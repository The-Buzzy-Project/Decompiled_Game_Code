
void** fun_18001000(void** ecx) {
    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx) == 0x5432) || *reinterpret_cast<int16_t*>(ecx + 0x15c) != 0x5432) {
        return 0;
    } else {
        return 1;
    }
}

void fun_180127c0(signed char* a1, uint32_t a2, uint32_t* a3, signed char* a4, uint32_t a5) {
    uint32_t eax6;
    signed char* esi7;
    uint32_t edx8;
    signed char* edi9;
    uint32_t ecx10;
    uint32_t ecx11;

    if (reinterpret_cast<int32_t>(a2) > reinterpret_cast<int32_t>(a5)) {
    }
    eax6 = a5;
    esi7 = a4;
    edx8 = eax6;
    edi9 = a1;
    ecx10 = eax6 >> 2;
    while (ecx10) {
        --ecx10;
        *edi9 = *esi7;
        edi9 = edi9 + 4;
        esi7 = esi7 + 4;
    }
    ecx11 = edx8 & 3;
    while (ecx11) {
        --ecx11;
        *edi9 = *esi7;
        ++edi9;
        ++esi7;
    }
    if (a3) {
        *a3 = eax6;
    }
    return;
}

struct s1 {
    signed char[8] pad8;
    int32_t f8;
};

struct s2 {
    signed char[8] pad8;
    int32_t f8;
};

struct s0 {
    signed char[44] pad44;
    signed char f44;
    signed char[3] pad48;
    signed char f48;
    signed char[3] pad52;
    signed char f52;
    signed char[3] pad56;
    signed char f56;
    signed char[3] pad60;
    signed char f60;
    signed char[7] pad68;
    signed char f68;
    signed char[731] pad800;
    signed char f800;
    signed char[587] pad1388;
    struct s1** f1388;
    signed char[1300] pad2692;
    struct s2* f2692;
};

struct s3 {
    signed char f0;
    signed char[3] pad4;
    int32_t f4;
    int32_t f8;
};

struct s4 {
    signed char f0;
    signed char[3] pad4;
    int32_t f4;
    int32_t f8;
};

void fun_180134b0(struct s0* ecx, int32_t a2, struct s3* a3, uint32_t a4, uint32_t* a5) {
    uint32_t eax6;
    struct s4* edx7;
    signed char* esi8;
    uint32_t edx9;
    struct s3* edi10;
    uint32_t ecx11;
    uint32_t ecx12;

    eax6 = 0;
    switch (a2 - 1) {
    case 0:
        a3->f0 = ecx->f68;
        eax6 = 4;
        break;
    case 2:
        eax6 = 4;
        a3->f0 = ecx->f44;
        break;
    case 3:
        a3->f0 = ecx->f48;
        eax6 = 4;
        break;
    case 4:
        edx7 = reinterpret_cast<struct s4*>(&ecx->f68);
        a3->f0 = edx7->f0;
        a3->f4 = edx7->f4;
        a3->f8 = edx7->f8;
        eax6 = 12;
        break;
    case 5:
        a3->f0 = ecx->f52;
        eax6 = 4;
        break;
    case 6:
        a3->f0 = ecx->f56;
        eax6 = 4;
        break;
    case 7:
        eax6 = 4;
        a3->f0 = ecx->f60;
        break;
    case 9:
        a3->f0 = ecx->f800;
        eax6 = 4;
        break;
    case 13:
        if (a4 > 0x2f0) {
        }
        eax6 = a4;
        esi8 = &ecx->f48;
        edx9 = eax6;
        edi10 = a3;
        ecx11 = eax6 >> 2;
        while (ecx11) {
            --ecx11;
            edi10->f0 = *esi8;
            edi10 = reinterpret_cast<struct s3*>(&edi10->f4);
            esi8 = esi8 + 4;
        }
        ecx12 = edx9 & 3;
        while (ecx12) {
            --ecx12;
            edi10->f0 = *esi8;
            edi10 = reinterpret_cast<struct s3*>(&edi10->pad4);
            ++esi8;
        }
    case 1:
    case 8:
    case 10:
    case 11:
    case 12:
        goto 0x180135a0;
    }
    if (a5) {
        *a5 = eax6;
    }
    return;
}

void fun_18018d50(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6);

void fun_180158c0(void** ecx) {
    void*** v2;
    void*** ebx3;
    void** ebx4;
    void** v5;
    void** esi6;
    void** al7;
    void** v8;
    void** edi9;
    void** ebp10;
    void** esi11;
    void** edi12;
    void** v13;
    void** edx14;
    void** v15;
    void** ecx16;
    void** v17;
    void** ecx18;
    void** eax19;

    v2 = ebx3;
    ebx4 = ecx;
    v5 = esi6;
    al7 = *reinterpret_cast<void***>(ebx4 + 5);
    v8 = edi9;
    if (!al7) {
        ebp10 = *reinterpret_cast<void***>(ebx4 + 8);
    } else {
        ebp10 = reinterpret_cast<void**>(0);
    }
    esi11 = ebx4 + 28;
    edi12 = ebx4 + 0x80;
    v13 = ebx4 + 32;
    do {
        edx14 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi11 + 12));
        v15 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx4 + 36)) + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi11)));
        *reinterpret_cast<void***>(edx14 + 4)();
        ecx16 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx4 + 36)) + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi11)));
        fun_18018d50(edi12 + 0xffffffb0, ecx16, ebp10, v15, v8, v5);
        v17 = *v2;
        fun_18018d50(edi12, v17, ebp10, v15, v8, v5);
        ecx18 = *reinterpret_cast<void***>(esi11);
        fun_18018d50(edi12 + 80, ecx18, ebp10, v15, v8, v5);
        esi11 = esi11 + 4;
        edi12 = edi12 + 40;
        eax19 = v13 - 1;
        v2 = v2 - 4;
        v13 = eax19;
    } while (eax19);
    goto 2;
}

void fun_180161e0(void** ecx) {
    int32_t v2;
    int32_t ebx3;
    void** ebx4;
    void** v5;
    void** esi6;
    void** al7;
    void** v8;
    void** edi9;
    void** ebp10;
    void** edi11;
    void** esi12;
    void** eax13;
    void** v14;
    void** eax15;
    void** ecx16;
    int32_t eax17;

    v2 = ebx3;
    ebx4 = ecx;
    v5 = esi6;
    al7 = *reinterpret_cast<void***>(ebx4 + 5);
    v8 = edi9;
    if (!al7) {
        ebp10 = *reinterpret_cast<void***>(ebx4 + 36);
    } else {
        ebp10 = reinterpret_cast<void**>(0);
    }
    edi11 = ebx4 + 0x78;
    esi12 = ebx4 + 24;
    do {
        eax13 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi12 + 0xb0));
        v14 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx4 + 32)) + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi12)));
        *reinterpret_cast<void***>(eax13 + 4)();
        eax15 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx4 + 32)) + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi12)));
        fun_18018d50(edi11 + 0xffffffb0, eax15, ebp10, v14, v8, v5);
        ecx16 = *reinterpret_cast<void***>(esi12);
        fun_18018d50(edi11, ecx16, ebp10, v14, v8, v5);
        esi12 = esi12 + 4;
        edi11 = edi11 + 40;
        eax17 = v2 - 1;
        v2 = eax17;
    } while (eax17);
    goto 2;
}

uint32_t fun_1802cadf(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7);

void fun_1802d338(void** a1, void** a2, void** a3) {
    void** ebp4;
    uint32_t eax5;

    *reinterpret_cast<void***>(a2 + 4) = *reinterpret_cast<void***>(a2 + 4) - 1;
    if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(a2 + 4)) < reinterpret_cast<signed char>(0)) {
        eax5 = fun_1802cadf(a1, a2, ebp4, __return_address(), a1, a2, a3);
    } else {
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(a2)) = a1;
        *reinterpret_cast<void***>(a2) = *reinterpret_cast<void***>(a2) + 1;
        eax5 = static_cast<uint32_t>(reinterpret_cast<unsigned char>(a1));
    }
    if (eax5 != 0xffffffff) {
        *reinterpret_cast<void***>(a3) = *reinterpret_cast<void***>(a3) + 1;
        return;
    } else {
        *reinterpret_cast<void***>(a3) = reinterpret_cast<void**>(0xffffffff);
        return;
    }
}

struct s5 {
    signed char[1] pad1;
    void** f1;
};

struct s6 {
    uint16_t f0;
    signed char f2;
    signed char f3;
    void** f4;
    unsigned char f5;
};

struct s7 {
    void** f0;
    signed char[1] pad2;
    void** f2;
    signed char[1] pad4;
    void** f4;
    signed char[1] pad6;
    void** f6;
    signed char[1] pad8;
    void** f8;
    signed char[1] pad10;
    uint16_t f10;
};

void fun_18032161(struct s7* a1, void* a2, void* a3);

void fun_18031f41(struct s7* a1, void** a2);

void fun_180314e6(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12);

void fun_18031514(void** ecx, void** a2);

uint32_t fun_18031488(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11);

void** fun_1802fd60(void** ecx, void** a2, void** a3, void** a4, void** a5, ...);

void** fun_18031ad9(void** ecx, void** a2, void** a3, uint32_t a4, struct s5* a5, unsigned char a6, struct s6* a7) {
    void* ebp8;
    void** v9;
    void** ebx10;
    struct s6* ebx11;
    void** v12;
    void** esi13;
    void** ecx14;
    void** v15;
    void** edi16;
    void** v17;
    uint32_t edx18;
    uint32_t eax19;
    uint96_t v20;
    void** ecx21;
    int32_t esi22;
    void** v23;
    void** v24;
    struct s5* edi25;
    uint32_t esi26;
    int32_t v27;
    uint32_t esi28;
    void** ecx29;
    void** eax30;
    void** v31;
    void** v32;
    void** eax33;
    void** ecx34;
    signed char al35;
    void** eax36;

    ebp8 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    v9 = ebx10;
    ebx11 = a7;
    v12 = esi13;
    ecx14 = reinterpret_cast<void**>(a4 & 0x8000);
    v15 = edi16;
    v17 = reinterpret_cast<void**>(1);
    edx18 = a4 & 0x7fff;
    if (!*reinterpret_cast<int16_t*>(&ecx14)) {
        ebx11->f2 = 32;
    } else {
        ebx11->f2 = 45;
    }
    if (*reinterpret_cast<uint16_t*>(&edx18) || (a3 || a2 != a3)) {
        if (*reinterpret_cast<uint16_t*>(&edx18) != 0x7fff) {
            eax19 = static_cast<uint32_t>(*reinterpret_cast<uint16_t*>(&edx18));
            *reinterpret_cast<uint16_t*>(&v20) = 0;
            ecx21 = reinterpret_cast<void**>(((eax19 >> 8) + (reinterpret_cast<unsigned char>(a3) >> 24) * 2) * 77);
            *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v20) + 6) = a3;
            esi22 = reinterpret_cast<int32_t>(reinterpret_cast<uint32_t>(ecx21 + eax19 * 0x4d10) + 0xecbced0c) >> 16;
            *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v20) + 2) = a2;
            fun_18032161(reinterpret_cast<int32_t>(ebp8) + 0xfffffff0, -static_cast<int32_t>(reinterpret_cast<int16_t>(*reinterpret_cast<uint16_t*>(&esi22))), 1);
            if (*reinterpret_cast<uint16_t*>(&edx18) >= 0x3fff) {
                ++esi22;
                fun_18031f41(reinterpret_cast<int32_t>(ebp8) + 0xfffffff0, reinterpret_cast<int32_t>(ebp8) + 0xffffffe4);
                ecx21 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp8) + 0xffffffe4);
            }
            ebx11->f0 = *reinterpret_cast<uint16_t*>(&esi22);
            if (a6 & 1) 
                goto addr_0x18031c4e_9;
        } else {
            ebx11->f0 = 1;
            if (reinterpret_cast<int1_t>(a3 == 0x80000000) && !a2 || reinterpret_cast<unsigned char>(a3) & 0x40000000) {
                if (!*reinterpret_cast<int16_t*>(&ecx14) || !reinterpret_cast<int1_t>(a3 == 0xc0000000)) {
                    if (!reinterpret_cast<int1_t>(a3 == 0x80000000) || a2) {
                        addr_0x18031bce_13:
                        v23 = reinterpret_cast<void**>(0x1803598c);
                        goto addr_0x18031bd3_14;
                    } else {
                        v24 = reinterpret_cast<void**>(0x18035994);
                        goto addr_0x18031bb6_16;
                    }
                } else {
                    if (a2) 
                        goto addr_0x18031bce_13;
                    v24 = reinterpret_cast<void**>(0x1803599c);
                    goto addr_0x18031bb6_16;
                }
            } else {
                v23 = reinterpret_cast<void**>(0x180359a4);
                goto addr_0x18031bd3_14;
            }
        }
    } else {
        addr_0x18031b50_20:
        ebx11->f0 = 0;
        ebx11->f2 = 32;
        ebx11->f3 = 1;
        *reinterpret_cast<void***>(&ebx11->f4) = reinterpret_cast<void**>(48);
        goto addr_0x18031d63_21;
    }
    edi25 = a5;
    goto addr_0x18031c62_23;
    addr_0x18031c4e_9:
    edi25 = reinterpret_cast<struct s5*>(reinterpret_cast<int32_t>(a5) + reinterpret_cast<int16_t>(*reinterpret_cast<uint16_t*>(&esi22)));
    if (!reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(edi25) < 0) | reinterpret_cast<uint1_t>(edi25 == 0))) {
        addr_0x18031c62_23:
        if (reinterpret_cast<int32_t>(edi25) > 21) {
            edi25 = reinterpret_cast<struct s5*>(21);
        }
    } else {
        goto addr_0x18031b50_20;
    }
    esi26 = *reinterpret_cast<uint16_t*>(&edx18) - 0x3ffe;
    *reinterpret_cast<uint16_t*>(reinterpret_cast<int32_t>(&v20) + 10) = 0;
    v27 = 8;
    do {
        fun_180314e6(ecx21, reinterpret_cast<int32_t>(ebp8) + 0xfffffff0, v15, v12, v9, 0xcccccccc, 0xcccccccc, 0x3ffbcccc, *reinterpret_cast<void***>(&v20), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v20) + 4), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v20) + 8), 1);
        --v27;
        ecx21 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp8) + 0xfffffff0);
    } while (v27);
    if (reinterpret_cast<int32_t>(esi26) < reinterpret_cast<int32_t>(0) && (esi28 = -esi26 & 0xff, !(reinterpret_cast<uint1_t>(__intrinsic()) | reinterpret_cast<uint1_t>(esi28 == 0)))) {
        do {
            fun_18031514(ecx21, reinterpret_cast<int32_t>(ebp8) + 0xfffffff0);
            --esi28;
            ecx21 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp8) + 0xfffffff0);
        } while (esi28);
    }
    ecx29 = reinterpret_cast<void**>(&edi25->f1);
    eax30 = reinterpret_cast<void**>(&ebx11->f4);
    v31 = eax30;
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(ecx29) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(ecx29 == 0))) {
        v32 = ecx29;
        do {
            fun_180314e6(ecx29, reinterpret_cast<int32_t>(ebp8) + 0xfffffff0, v15, v12, v9, 0xcccccccc, 0xcccccccc, 0x3ffbcccc, *reinterpret_cast<void***>(&v20), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v20) + 4), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v20) + 8), 1);
            fun_180314e6(ecx29, reinterpret_cast<int32_t>(ebp8) + 0xfffffff0, reinterpret_cast<int32_t>(ebp8) + 0xfffffff0, v15, v12, v9, 0xcccccccc, 0xcccccccc, 0x3ffbcccc, *reinterpret_cast<void***>(&v20), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v20) + 4), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v20) + 8));
            fun_18031488(reinterpret_cast<int32_t>(ebp8) + 0xfffffff0, reinterpret_cast<int32_t>(ebp8) + 8, reinterpret_cast<int32_t>(ebp8) + 0xfffffff0, reinterpret_cast<int32_t>(ebp8) + 0xfffffff0, v15, v12, v9, 0xcccccccc, 0xcccccccc, 0x3ffbcccc, *reinterpret_cast<void***>(&v20));
            fun_180314e6(ecx29, reinterpret_cast<int32_t>(ebp8) + 0xfffffff0, reinterpret_cast<int32_t>(ebp8) + 0xfffffff0, reinterpret_cast<int32_t>(ebp8) + 8, reinterpret_cast<int32_t>(ebp8) + 0xfffffff0, reinterpret_cast<int32_t>(ebp8) + 0xfffffff0, v15, v12, v9, 0xcccccccc, 0xcccccccc, 0x3ffbcccc);
            ecx29 = v31;
            *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&v20) + 11) = 0;
            ++v31;
            --v32;
            *reinterpret_cast<void***>(ecx29) = reinterpret_cast<void**>(48);
        } while (v32);
        eax30 = v31;
    }
    eax33 = eax30 - 1 - 1;
    ecx34 = reinterpret_cast<void**>(&ebx11->f4);
    if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(eax30 + 0xffffffff)) >= reinterpret_cast<signed char>(53)) {
        while (reinterpret_cast<unsigned char>(eax33) >= reinterpret_cast<unsigned char>(ecx34)) {
            if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax33) == 57)) 
                goto addr_0x18031d23_46;
            *reinterpret_cast<void***>(eax33) = reinterpret_cast<void**>(48);
            --eax33;
        }
        goto addr_0x18031d27_48;
        addr_0x18031d23_46:
        if (reinterpret_cast<unsigned char>(eax33) >= reinterpret_cast<unsigned char>(ecx34)) {
            addr_0x18031d2b_49:
            *reinterpret_cast<void***>(eax33) = *reinterpret_cast<void***>(eax33) + 1;
            goto addr_0x18031d2d_50;
        } else {
            addr_0x18031d27_48:
            ++eax33;
            ebx11->f0 = reinterpret_cast<uint16_t>(ebx11->f0 + 1);
            goto addr_0x18031d2b_49;
        }
    }
    while (reinterpret_cast<unsigned char>(eax33) >= reinterpret_cast<unsigned char>(ecx34)) {
        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax33) == 48)) 
            goto addr_0x18031d50_53;
        --eax33;
    }
    goto addr_0x18031d54_55;
    addr_0x18031d50_53:
    if (reinterpret_cast<unsigned char>(eax33) >= reinterpret_cast<unsigned char>(ecx34)) {
        addr_0x18031d2d_50:
        al35 = reinterpret_cast<signed char>(reinterpret_cast<signed char>(*reinterpret_cast<signed char*>(&eax33) - *reinterpret_cast<signed char*>(&ebx11)) - 3);
        ebx11->f3 = al35;
        *reinterpret_cast<unsigned char*>(al35 + reinterpret_cast<int32_t>(ebx11) + 4) = 0;
    } else {
        addr_0x18031d54_55:
        ebx11->f0 = 0;
        ebx11->f2 = 32;
        ebx11->f3 = 1;
        *reinterpret_cast<void***>(ecx34) = reinterpret_cast<void**>(48);
        goto addr_0x18031d63_21;
    }
    addr_0x18031d3c_56:
    eax36 = v17;
    addr_0x18031d3f_57:
    return eax36;
    addr_0x18031d63_21:
    ebx11->f5 = 0;
    eax36 = reinterpret_cast<void**>(1);
    goto addr_0x18031d3f_57;
    addr_0x18031bd3_14:
    fun_1802fd60(ecx14, &ebx11->f4, v23, v15, v12);
    ebx11->f3 = 6;
    addr_0x18031bc5_58:
    v17 = reinterpret_cast<void**>(0);
    goto addr_0x18031d3c_56;
    addr_0x18031bb6_16:
    fun_1802fd60(ecx14, &ebx11->f4, v24, v15, v12);
    ebx11->f3 = 5;
    goto addr_0x18031bc5_58;
}

void fun_1800a1e0(void** ecx) {
    void** ecx2;
    void** v3;

    if (*reinterpret_cast<void***>(ecx + 0x114)) {
        ecx2 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x114));
        v3 = *reinterpret_cast<void***>(ecx + 0x114);
        *reinterpret_cast<void***>(ecx2 + 12)(v3);
    }
    return;
}

int16_t fun_18001020(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, ...);

int16_t fun_1800d1a0(void** ecx, void** a2, void** a3, void** a4);

void* fun_1800d430(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19);

void* fun_1800d300(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19);

void fun_1800d030(void** a1, void** a2);

struct s8 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
};

void fun_1800d480(void** ecx, struct s8* a2);

struct s9 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

int16_t fun_1800d150(struct s9* a1, void* a2, void** a3);

void* fun_1800d110(void** a1, void** a2);

void* fun_1800d240(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19);

void fun_1800dae0(void** ecx, void** a2);

void fun_1800cef0(void** ecx, void** a2);

void fun_1800cfd0(void** a1, void** a2, void** a3);

void fun_1800de70(void** ecx, void** a2, void** a3);

void* fun_1800a980(void** ecx, void** a2, void** a3) {
    void*** esp4;
    void** esi5;
    void*** esp6;
    void** eax7;
    void** edi8;
    void** esi9;
    void** ebp10;
    void* esp11;
    void** ecx12;
    void* esp13;
    void** eax14;
    void** ecx15;
    void** edx16;
    void** v17;
    void** v18;
    void** v19;
    void** v20;
    void** v21;
    void** v22;
    void** ebx23;
    void** v24;
    void** v25;
    void** v26;
    void** v27;
    void** v28;
    void** v29;
    void** v30;
    void* esp31;
    void** ecx32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** eax40;
    void* esp41;
    void* esp42;
    void** v43;
    void** v44;
    void** v45;
    void* esp46;
    void** eax47;
    void*** esp48;
    void* esp49;
    void** v50;
    void** edx51;
    void*** esp52;
    void** v53;
    void** eax54;
    void** v55;
    void** ecx56;
    void* esp57;
    void** eax58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** ecx63;
    void** v64;
    void** ecx65;
    void** edx66;
    void** ecx67;
    void** v68;
    void*** esp69;
    void** v70;
    void** ecx71;
    void** eax72;
    void*** esp73;
    void** v74;
    void*** esp75;
    void** eax76;
    void** ebx77;
    void** eax78;
    void** ecx79;
    void** edx80;
    void** ecx81;
    void* ax82;
    void* esp83;
    void* ax84;
    void* esp85;
    void*** esp86;
    void* ax87;
    void* esp88;
    void* eax89;

    esp4 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 76 - 4 - 4 - 4 - 4);
    if (!*reinterpret_cast<signed char*>(&a3)) {
        esi5 = a2;
        esp6 = esp4 - 4;
        eax7 = reinterpret_cast<void**>(esp6 + 84);
        *reinterpret_cast<int16_t*>(&eax7) = fun_18001020(ecx, eax7, esi5 + 16, ecx + 88, edi8, esi9, ebp10);
        esp11 = reinterpret_cast<void*>(esp6 - 4 - 4 - 4 + 8 + 4);
        ecx12 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp11) + 72);
        *reinterpret_cast<int16_t*>(&eax7) = fun_1800d1a0(ecx12, ecx12, eax7, ecx + 88);
        esp13 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp11) - 4 - 4 - 4 + 12 + 4);
        eax14 = *reinterpret_cast<void***>(eax7);
        ecx15 = *reinterpret_cast<void***>(eax7 + 4);
        edx16 = *reinterpret_cast<void***>(eax7 + 8);
        v17 = eax14;
        v18 = eax14;
        v19 = ecx15;
        v20 = ecx15;
        v21 = edx16;
        v22 = edx16;
        fun_1800d430(ecx + 0x94, reinterpret_cast<int32_t>(esp13) + 20, edi8, esi9, ebp10, ebx23, v24, v18, v20, v22, v17, v19, v21, v25, v26, v27, v28, v29, v30);
        esp31 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp13) - 4 - 4 + 4 + 4);
        ecx32 = esi5 + 0xc4;
        *reinterpret_cast<void***>(esi5 + 0xc4) = v18;
        *reinterpret_cast<void***>(ecx32 + 4) = v20;
        *reinterpret_cast<void***>(ecx32 + 8) = v22;
        *reinterpret_cast<void**>(&eax40) = fun_1800d300(ecx32, reinterpret_cast<int32_t>(esp31) + 20, edi8, esi9, ebp10, ebx23, v33, v18, v20, v22, v17, v19, v21, v34, v35, v36, v37, v38, v39);
        esp41 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp31) - 4 - 4 + 4 + 4);
        __asm__("fstp dword [esi+0xa8]");
        fun_1800d030(reinterpret_cast<int32_t>(esp41) + 20, esi5 + 0xb0);
        esp42 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp41) - 4 - 4 - 4 + 8 + 4);
        __asm__("fstp dword [esi+0xac]");
    } else {
        __asm__("fld qword [0x180346d0]");
        __asm__("fmul dword [0x18034558]");
        esi5 = a2;
        __asm__("fld st0");
        __asm__("fmul dword [esi+0xac]");
        __asm__("fstp dword [esp+0x64]");
        __asm__("fmul dword [esi+0xb0]");
        __asm__("fld st0");
        __asm__("fcos ");
        __asm__("fmul dword [esi+0xa8]");
        __asm__("fstp dword [esp+0x60]");
        __asm__("fsin ");
        __asm__("fmul dword [esi+0xa8]");
        __asm__("fstp dword [esp+0x18]");
        __asm__("fld dword [esp+0x64]");
        __asm__("fsin ");
        v19 = v43;
        __asm__("fmul dword [esp+0x60]");
        __asm__("fstp dword [esp+0x14]");
        __asm__("fld dword [esp+0x64]");
        __asm__("fcos ");
        *reinterpret_cast<void***>(esi5 + 0xc4) = v44;
        v17 = v44;
        *reinterpret_cast<void***>(esi5 + 0xc4 + 4) = v43;
        __asm__("fmul dword [esp+0x60]");
        __asm__("fstp dword [esp+0x1c]");
        *reinterpret_cast<void***>(esi5 + 0xc4 + 8) = v45;
        v21 = v45;
        fun_1800d480(ecx + 0x94, esp4 + 32);
        esp46 = reinterpret_cast<void*>(esp4 - 4 - 4 + 4 + 4);
        eax47 = ecx + 88;
        esp48 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp46) - 4);
        *reinterpret_cast<int16_t*>(&eax47) = fun_1800d150(esp48 + 72, reinterpret_cast<int32_t>(esp46) + 32, eax47);
        esp49 = reinterpret_cast<void*>(esp48 - 4 - 4 - 4 + 12 + 4);
        v50 = *reinterpret_cast<void***>(eax47);
        edx51 = *reinterpret_cast<void***>(eax47 + 4);
        esp52 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp49) - 4);
        v53 = edx51;
        eax54 = *reinterpret_cast<void***>(eax47 + 8);
        v55 = eax54;
        *reinterpret_cast<int16_t*>(&eax54) = fun_18001020(ecx, esp52 + 84, reinterpret_cast<int32_t>(esp49) + 56, edi8, esi9, ebp10, ebx23);
        esp42 = reinterpret_cast<void*>(esp52 - 4 - 4 + 8 + 4);
        ecx56 = esi5 + 16;
        *reinterpret_cast<void***>(ecx56) = *reinterpret_cast<void***>(eax54);
        *reinterpret_cast<void***>(ecx56 + 4) = *reinterpret_cast<void***>(eax54 + 4);
        eax40 = *reinterpret_cast<void***>(eax54 + 8);
        *reinterpret_cast<void***>(ecx56 + 8) = eax40;
    }
    __asm__("fld dword [esi+0xa8]");
    __asm__("fcomp dword [0x1803422c]");
    __asm__("fnstsw ax");
    if (!(*reinterpret_cast<unsigned char*>(&eax40 + 1) & 64) && *reinterpret_cast<void***>(esi5 + 0xa8) != 0x3f800000) {
        __asm__("fld dword [0x18034238]");
        __asm__("fdiv dword [esi+0xa8]");
        __asm__("fstp dword [esp+0x64]");
        fun_1800d110(reinterpret_cast<int32_t>(esp42) + 20, a3);
        esp57 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp42) - 4 - 4 - 4 + 8 + 4);
        *reinterpret_cast<void**>(&eax40) = fun_1800d110(reinterpret_cast<int32_t>(esp57) + 32, a3);
        esp42 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp57) - 4 - 4 - 4 + 8 + 4);
    }
    __asm__("fld dword [esi+0x34]");
    __asm__("fcomp dword [0x1803423c]");
    __asm__("fnstsw ax");
    if (!(*reinterpret_cast<unsigned char*>(&eax40 + 1) & 1) || (*reinterpret_cast<unsigned char*>(&eax40 + 1) & 65 || *reinterpret_cast<unsigned char*>(&eax40 + 1) & 64 && (*reinterpret_cast<unsigned char*>(&eax40 + 1) & 64 && *reinterpret_cast<unsigned char*>(&eax40 + 1) & 64))) {
        *reinterpret_cast<void***>(esi5 + 0xb4) = reinterpret_cast<void**>(0x3f800000);
    } else {
        eax58 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp42) + 80);
        *reinterpret_cast<int16_t*>(&eax58) = fun_18001020(ecx, eax58, esi5 + 40, reinterpret_cast<int32_t>(esp42) + 32, edi8, esi9, ebp10, ecx, eax58, esi5 + 40, reinterpret_cast<int32_t>(esp42) + 32, edi8, esi9, ebp10);
        *reinterpret_cast<void**>(&eax40) = fun_1800d240(eax58, reinterpret_cast<int32_t>(esp42) + 32, edi8, esi9, ebp10, ebx23, v59, v18, v20, v22, v17, v19, v21, v60, v61, v62, v50, v53, v55);
        __asm__("fchs ");
        __asm__("fstp dword [esp]");
        fun_1800dae0(ecx, ecx);
        __asm__("fadd st0, st0");
        __asm__("fld qword [0x180346d0]");
        __asm__("fdivr dword [0x18034310]");
        ecx63 = *reinterpret_cast<void***>(esi5 + 56);
        a2 = *reinterpret_cast<void***>(esi5 + 52);
        v64 = ecx63;
        __asm__("fmul st0, st1");
        __asm__("fstp dword [esp+0x64]");
        __asm__("fstp st0");
        __asm__("fld dword [esi+0x3c]");
        __asm__("fld dword [esp+0x64]");
        __asm__("fcomp dword [esp+0x60]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax40 + 1) & 65)) {
            __asm__("fld dword [esp+0x64]");
            __asm__("fcomp dword [esp+0x10]");
            __asm__("fnstsw ax");
            if (*reinterpret_cast<unsigned char*>(&eax40 + 1) & 1) {
                __asm__("fld dword [esp+0x64]");
                __asm__("fsub dword [esp+0x60]");
                __asm__("fxch st0, st1");
                __asm__("fmulp st1, st0");
                __asm__("fld dword [esp+0x10]");
                __asm__("fsub dword [esp+0x60]");
                __asm__("fdivp st1, st0");
            }
        } else {
            __asm__("fstp st0");
            __asm__("fld dword [0x1803422c]");
        }
        __asm__("fchs ");
        __asm__("fstp dword [esp]");
        fun_1800cef0(ecx63, ecx63);
        esp42 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp42) - 4 - 4 - 4 - 4 + 8 + 4 - 4 - 4 + 8 + 4 - 4 - 4 + 4 + 4 - 4 - 4 + 4 + 4);
        __asm__("fstp dword [esi+0xb4]");
    }
    ecx65 = *reinterpret_cast<void***>(esi5 + 92);
    __asm__("fld dword [esi+0xa8]");
    if (!(*reinterpret_cast<unsigned char*>(&ecx65 + 1) & 16)) {
        edx66 = *reinterpret_cast<void***>(esi5 + 68);
        __asm__("fst dword [esp+0x60]");
        __asm__("fcomp dword [esp+0x64]");
        __asm__("fnstsw ax");
        if (*reinterpret_cast<unsigned char*>(&eax40 + 1) & 65) {
            ecx67 = *reinterpret_cast<void***>(esi5 + 64);
            edx66 = a2;
            v68 = *reinterpret_cast<void***>(esi5 + 72);
            esp69 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp42) - 4 - 4);
            v70 = ecx67;
        } else {
            if (!(*reinterpret_cast<unsigned char*>(&ecx65 + 1) & 8)) {
                addr_0x1800ac78_17:
                *reinterpret_cast<void***>(esi5 + 0xb8) = reinterpret_cast<void**>(0);
                goto addr_0x1800ad30_18;
            } else {
                ecx71 = *reinterpret_cast<void***>(esi5 + 64);
                v68 = *reinterpret_cast<void***>(esi5 + 72);
                esp69 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp42) - 4 - 4);
                v70 = ecx71;
            }
        }
        fun_1800cfd0(edx66, v70, v68);
        esp42 = reinterpret_cast<void*>(esp69 - 4 - 4 + 12 + 4);
    } else {
        __asm__("fcomp dword [esi+0x44]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax40 + 1) & 65)) 
            goto addr_0x1800ac78_17;
        __asm__("fld dword [esi+0xa8]");
        __asm__("fcomp dword [esi+0x40]");
        __asm__("fnstsw ax");
        if (*reinterpret_cast<unsigned char*>(&eax40 + 1) & 65) 
            goto addr_0x1800ace7_23;
        __asm__("fld dword [esi+0x48]");
        __asm__("fcomp dword [0x1803422c]");
        __asm__("fnstsw ax");
        if (*reinterpret_cast<unsigned char*>(&eax40 + 1) & 64) 
            goto addr_0x1800ace7_23; else 
            goto addr_0x1800aca7_25;
    }
    addr_0x1800ad2a_26:
    __asm__("fstp dword [esi+0xb8]");
    goto addr_0x1800ad30_18;
    addr_0x1800ace7_23:
    *reinterpret_cast<void***>(esi5 + 0xb8) = reinterpret_cast<void**>(0x3f800000);
    goto addr_0x1800ad30_18;
    addr_0x1800aca7_25:
    __asm__("fld dword [esi+0x44]");
    __asm__("fsub dword [esi+0xa8]");
    __asm__("fld dword [esi+0x44]");
    __asm__("fsub dword [esi+0x40]");
    __asm__("fdivp st1, st0");
    __asm__("fst dword [esp+0x60]");
    __asm__("fstp dword [esi+0xb8]");
    __asm__("fld dword [esi+0x48]");
    __asm__("fst dword [esp+0x64]");
    __asm__("fcomp dword [0x18034238]");
    __asm__("fnstsw ax");
    if (*reinterpret_cast<unsigned char*>(&eax40 + 1) & 64) {
        addr_0x1800ad30_18:
        __asm__("fld dword [esi+0x4c]");
        __asm__("fmul dword [esi+0xb8]");
        eax72 = ecx + 100;
        esp73 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp42) - 4);
        v74 = eax72;
        __asm__("fmul dword [esi+0xb4]");
        __asm__("fstp dword [esi+0xbc]");
        *reinterpret_cast<int16_t*>(&eax72) = fun_18001020(ecx, esp73 + 84, esi5 + 28, v74, edi8, esi9, ebp10, ecx, esp73 + 84, esi5 + 28, v74, edi8, esi9, ebp10);
        esp75 = esp73 - 4 - 4 - 4 + 8 + 4 - 4;
        eax76 = reinterpret_cast<void**>(esp75 + 76);
        *reinterpret_cast<int16_t*>(&eax76) = fun_1800d1a0(ecx, eax76, eax72, v74);
        ebx77 = esi5 + 0xd0;
        eax78 = *reinterpret_cast<void***>(eax76);
        ecx79 = *reinterpret_cast<void***>(eax76 + 4);
        edx80 = *reinterpret_cast<void***>(eax76 + 8);
        *reinterpret_cast<void***>(ebx77) = eax78;
        *reinterpret_cast<void***>(ebx77 + 4) = ecx79;
        ecx81 = ecx + 0x94;
        *reinterpret_cast<void***>(ebx77 + 8) = edx80;
        ax82 = fun_1800d430(ecx81, ebx77, edi8, esi9, ebp10, ebx23, v64, v18, v20, v22, v17, v19, v21, eax78, ecx79, edx80, v50, v53, v55);
        esp83 = reinterpret_cast<void*>(esp75 - 4 - 4 + 12 + 4 - 4 - 4 + 4 + 4);
        if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi5 + 92)) & 16)) {
            ax84 = fun_1800d300(ecx81, reinterpret_cast<int32_t>(esp83) + 44, edi8, esi9, ebp10, ebx23, v64, v18, v20, v22, v17, v19, v21, eax78, ecx79, edx80, v50, v53, v55);
            esp85 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp83) - 4 - 4 + 4 + 4);
            __asm__("fst dword [esp+0x64]");
            __asm__("fcomp dword [0x1803422c]");
            __asm__("fnstsw ax");
            if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&ax84) + 1) & 64) && !(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&ax84) + 1) & 64)) {
                __asm__("fld dword [0x18034238]");
                __asm__("fdiv dword [esp+0x64]");
                esp86 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp85) - 4);
                __asm__("fstp dword [esp]");
                fun_1800d110(esp86 + 48, ecx81);
                esp85 = reinterpret_cast<void*>(esp86 - 4 - 4 + 8 + 4);
            }
            ax87 = fun_1800d240(reinterpret_cast<int32_t>(esp85) + 32, reinterpret_cast<int32_t>(esp85) + 44, edi8, esi9, ebp10, ebx23, v64, v18, v20, v22, v17, v19, v21, eax78, ecx79, edx80, v50, v53, v55);
            esp88 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp85) - 4 - 4 - 4 + 8 + 4);
            __asm__("fmul dword [edi+0x88]");
            __asm__("fmul dword [esp+0x64]");
            __asm__("fdiv dword [0x18034718]");
            __asm__("fmul dword [edi+0x90]");
            __asm__("fcom dword [0x18034234]");
            __asm__("fnstsw ax");
            if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&ax87) + 1) & 65)) {
                __asm__("fadd dword [0x18034238]");
                __asm__("fdivr dword [0x18034238]");
                __asm__("fst dword [esp+0x64]");
                __asm__("fcomp dword [0x18034554]");
                __asm__("fnstsw ax");
                eax89 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp88) + 100);
                if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&ax87) + 1) & 65)) {
                    eax89 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp88) + 96);
                }
                __asm__("fld dword [eax]");
                __asm__("fstp dword [esi+0xc0]");
                return *reinterpret_cast<void**>(&eax89);
            } else {
                __asm__("fstp st0");
                __asm__("fld dword [0x18034554]");
                __asm__("fstp dword [esi+0xc0]");
                return ax87;
            }
        } else {
            *reinterpret_cast<void***>(esi5 + 0xc0) = reinterpret_cast<void**>(0x3f800000);
            return ax82;
        }
    } else {
        fun_1800de70(a2, a2, a3);
        esp42 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp42) - 4 - 4 - 4 + 8 + 4);
        goto addr_0x1800ad2a_26;
    }
}

void** fun_1800a200(void** ecx) {
    void** eax2;
    void** ecx3;

    eax2 = *reinterpret_cast<void***>(ecx + 0x114);
    if (eax2) {
        ecx3 = *reinterpret_cast<void***>(eax2);
        eax2 = reinterpret_cast<void**>(*reinterpret_cast<void***>(ecx3 + 16)(eax2));
    }
    return eax2;
}

int16_t fun_18009c50(void** ecx, void** a2) {
    void** eax3;

    if (reinterpret_cast<signed char>(a2) < reinterpret_cast<signed char>(0) || reinterpret_cast<signed char>(a2) >= reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 8))) {
        return 0;
    } else {
        eax3 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 12) + reinterpret_cast<unsigned char>(a2) * 4);
        return *reinterpret_cast<int16_t*>(&eax3);
    }
}

void fun_18007400(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24);

void fun_1800a870(void** ecx, void** a2) {
    void** v3;
    void** v4;
    void** v5;
    void** v6;
    void** v7;
    void** v8;
    void** v9;
    void** v10;
    void** v11;
    void** v12;
    void** v13;
    void** v14;
    void** v15;
    void** v16;
    void** v17;
    void** v18;
    void** v19;
    void** v20;
    void** v21;
    void** v22;
    void** v23;

    if (*reinterpret_cast<void***>(a2 + 0x2c4)) {
        fun_18007400(a2, __return_address(), a2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23);
    }
    return;
}

void** g1804587c = reinterpret_cast<void**>(0);

int16_t fun_18009260(void** ecx, void** a2, void** a3) {
    void** eax4;

    eax4 = a2;
    g1804587c = eax4;
    return *reinterpret_cast<int16_t*>(&eax4);
}

void fun_18029e00(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36);

int16_t fun_1802b2b0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47);

void fun_1800d690(void** ecx, void** a2);

void fun_1800d560(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34);

struct s10 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
    signed char[7] pad20;
    void** f20;
    signed char[95] pad116;
    uint32_t f116;
    void** f120;
    signed char[115] pad236;
    void** f236;
    signed char[3] pad240;
    void** f240;
};

void fun_1800b010(struct s10* ecx, void*** a2, void** a3);

void fun_18009730(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42) {
    void** v43;
    void** v44;
    void** v45;
    void** esi46;
    void** esi47;
    void*** esp48;
    void** v49;
    void** edi50;
    void** edi51;
    void** v52;
    void** edi53;
    void** edx54;
    void** v55;
    void** ecx56;
    void* esp57;
    void** edx58;
    void** eax59;
    void** edx60;
    void** edi61;
    void** eax62;
    void** ecx63;
    void** v64;
    void** v65;
    void** ebx66;
    struct s10* ebx67;
    void*** esp68;
    void** v69;
    void** ebp70;
    void** edi71;
    void** ebp72;
    void** eax73;
    void** eax74;
    void** ecx75;
    void** ecx76;
    void** edx77;
    void** eax78;
    void** eax79;
    void** edx80;

    v43 = reinterpret_cast<void**>(__return_address());
    v44 = ecx;
    v45 = esi46;
    esi47 = ecx;
    esp48 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4);
    v49 = edi50;
    edi51 = *reinterpret_cast<void***>(esi47 + 0x158);
    if (edi51) {
        ecx = edi51;
        fun_18029e00(ecx, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32);
        fun_1802b2b0(ecx, edi51, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
        esp48 = esp48 - 4 + 4 - 4 - 4 + 4 + 4;
    }
    if (*reinterpret_cast<void***>(esi47 + 0x14c)) {
        ecx = *reinterpret_cast<void***>(esi47 + 0x154);
        v52 = *reinterpret_cast<void***>(esi47 + 0x14c);
        fun_1800d690(ecx, v52);
        esp48 = esp48 - 4 - 4 + 4 + 4;
    }
    if (*reinterpret_cast<void***>(esi47 + 12)) {
        edi53 = reinterpret_cast<void**>(0);
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi47 + 8)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(esi47 + 8) == 0))) {
            do {
                ecx = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi47 + 12) + reinterpret_cast<unsigned char>(edi53) * 4);
                if (ecx) {
                    edx54 = *reinterpret_cast<void***>(ecx);
                    *reinterpret_cast<void***>(edx54 + 32)(1);
                    esp48 = esp48 - 4 - 4 + 4;
                }
                ++edi53;
            } while (reinterpret_cast<signed char>(edi53) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi47 + 8)));
        }
        v55 = *reinterpret_cast<void***>(esi47 + 12);
        fun_1802b2b0(ecx, v55, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
        esp48 = esp48 - 4 - 4 + 4 + 4;
    }
    ecx56 = *reinterpret_cast<void***>(esi47 + 20);
    fun_1802b2b0(ecx56, ecx56, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    esp57 = reinterpret_cast<void*>(esp48 - 4 - 4 + 4 + 4);
    if (*reinterpret_cast<void***>(esi47 + 0x110)) {
        edx58 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi47 + 0x110));
        *reinterpret_cast<void***>(edx58)(1);
        esp57 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp57) - 4 - 4 + 4);
    }
    if (*reinterpret_cast<void***>(esi47 + 0x10c)) {
        eax59 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi47 + 0x10c));
        *reinterpret_cast<void***>(eax59)(1);
        esp57 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp57) - 4 - 4 + 4);
    }
    if (*reinterpret_cast<void***>(esi47 + 0x108)) {
        edx60 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi47 + 0x108));
        *reinterpret_cast<void***>(edx60)(1);
        esp57 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp57) - 4 - 4 + 4);
    }
    edi61 = *reinterpret_cast<void***>(esi47 + 0x154);
    if (edi61) {
        fun_1800d560(edi61, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30);
        fun_1802b2b0(edi61, edi61, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
        esp57 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp57) - 4 + 4 - 4 - 4 + 4 + 4);
    }
    if (*reinterpret_cast<void***>(esi47 + 0x104)) {
        eax62 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi47 + 0x104));
        *reinterpret_cast<void***>(eax62)(1);
        esp57 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp57) - 4 - 4 + 4);
    }
    if (*reinterpret_cast<void***>(esi47 + 0x114)) {
        ecx63 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi47 + 0x114));
        v64 = *reinterpret_cast<void***>(esi47 + 0x114);
        *reinterpret_cast<void***>(ecx63 + 8)(v64);
        esp57 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp57) - 4 - 4 + 4);
    }
    v65 = ebx66;
    ebx67 = reinterpret_cast<struct s10*>(esi47 + 52);
    esp68 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp57) - 4 - 4);
    v69 = ebp70;
    edi71 = *reinterpret_cast<void***>(&ebx67->f4);
    ebp72 = reinterpret_cast<void**>(&ebx67->f4);
    if (edi71 != ebp72) {
        do {
            eax73 = edi71;
            edi71 = *reinterpret_cast<void***>(edi71);
            fun_1800b010(ebx67, esp68 + 16, eax73);
            esp68 = esp68 - 4 - 4 - 4 + 8 + 4;
        } while (edi71 != ebp72);
    }
    eax74 = ebx67->f20;
    if (eax74) {
        do {
            ecx75 = *reinterpret_cast<void***>(eax74);
            ebx67->f20 = ecx75;
            fun_1802b2b0(ecx75, eax74, v69, v65, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
            eax74 = ebx67->f20;
        } while (eax74);
    }
    ecx76 = *reinterpret_cast<void***>(esi47 + 28);
    edx77 = esi47 + 28;
    if (ecx76 != edx77) {
        do {
            eax78 = ecx76;
            ecx76 = *reinterpret_cast<void***>(ecx76);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax78 + 4)) = *reinterpret_cast<void***>(eax78);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax78) + 4) = *reinterpret_cast<void***>(eax78 + 4);
            *reinterpret_cast<void***>(eax78) = *reinterpret_cast<void***>(esi47 + 40);
            *reinterpret_cast<void***>(esi47 + 40) = eax78;
            *reinterpret_cast<void***>(esi47 + 24) = *reinterpret_cast<void***>(esi47 + 24) - 1;
        } while (ecx76 != edx77);
    }
    eax79 = *reinterpret_cast<void***>(esi47 + 40);
    if (eax79) {
        do {
            edx80 = *reinterpret_cast<void***>(eax79);
            *reinterpret_cast<void***>(esi47 + 40) = edx80;
            fun_1802b2b0(ecx76, eax79, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
            eax79 = *reinterpret_cast<void***>(esi47 + 40);
        } while (eax79);
    }
    return;
}

void** fun_1802ca0b(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6);

int16_t fun_1802b2b0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47) {
    void** eax48;

    eax48 = fun_1802ca0b(ecx, __return_address(), __return_address(), a2, a3, a4);
    return *reinterpret_cast<int16_t*>(&eax48);
}

void** fun_1802b2bb(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9);

int16_t fun_18009270(void** ecx, void** a2);

void** fun_18009250(void** ecx);

int16_t QSWaveMixInitEx(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26) {
    void** v27;
    void** v28;
    void** esi29;
    void** esi30;
    void*** esp31;
    void** v32;
    void** edi33;
    void** edx34;
    void** eax35;
    uint32_t ecx36;
    uint32_t ecx37;
    signed char* edi38;
    uint32_t ecx39;
    uint32_t edx40;
    uint32_t ecx41;
    void** ecx42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** eax47;
    void** eax48;
    void** eax49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** v74;
    void** v75;
    void** v76;
    void** v77;
    void** v78;
    void** v79;

    v27 = reinterpret_cast<void**>(__return_address());
    v28 = esi29;
    esi30 = a1;
    esp31 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 64 - 4 - 4);
    v32 = edi33;
    edx34 = *reinterpret_cast<void***>(esi30);
    if (reinterpret_cast<unsigned char>(edx34) < reinterpret_cast<unsigned char>(64)) {
        eax35 = edx34;
        ecx36 = reinterpret_cast<unsigned char>(edx34) >> 2;
        while (ecx36) {
            --ecx36;
        }
        ecx37 = reinterpret_cast<unsigned char>(eax35) & 3;
        while (ecx37) {
            --ecx37;
        }
        edi38 = reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(esp31) + reinterpret_cast<unsigned char>(edx34) + 8);
        ecx39 = 64 - reinterpret_cast<unsigned char>(edx34);
        esi30 = reinterpret_cast<void**>(esp31 + 8);
        edx40 = ecx39;
        ecx41 = ecx39 >> 2;
        while (ecx41) {
            --ecx41;
            *edi38 = reinterpret_cast<signed char>(0);
            edi38 = edi38 + 4;
            esi30 = esi30 + 4;
        }
        ecx42 = reinterpret_cast<void**>(edx40 & 3);
        while (ecx42) {
            --ecx42;
            *edi38 = 0;
            ++edi38;
            ++esi30;
        }
    }
    eax47 = fun_1802b2bb(ecx42, 0x160, v32, v28, 64, v43, v44, v45, v46);
    if (!eax47 || (ecx42 = eax47, *reinterpret_cast<int16_t*>(&eax47) = fun_18009270(ecx42, esi30), !eax47)) {
        fun_18009260(ecx42, 4, v32);
        return 0;
    } else {
        eax48 = fun_18009250(ecx42);
        if (!eax48) {
            eax49 = eax47;
            return *reinterpret_cast<int16_t*>(&eax49);
        } else {
            fun_18009730(eax47, v32, v28, 64, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v27, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
            fun_1802b2b0(eax47, eax47, v32, v28, 64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v27, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
            fun_18009260(eax47, eax48, v32);
            return 0;
        }
    }
}

struct s11 {
    struct s11* f0;
    signed char[4] pad8;
    void** f8;
};

int16_t fun_1800c1e0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35);

int16_t fun_18007a20(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, signed char a16, ...);

int16_t fun_1800a180(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40);

int16_t fun_180085a0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27);

int16_t fun_1800c650(void** ecx, void** a2);

int16_t fun_180090e0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40);

int16_t fun_1800c670(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, ...);

int16_t fun_18009070(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40);

int16_t fun_180078c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    void** v30;
    void** eax31;
    void** v32;
    void** ebx33;
    void** ebx34;
    void** v35;
    void** ebp36;
    void** v37;
    void** esi38;
    void** esi39;
    void*** esp40;
    void** v41;
    void** edi42;
    struct s11* edi43;
    struct s11* ebp44;
    void** ecx45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    signed char v66;
    int16_t ax67;
    void** ecx68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** v74;
    void** v75;
    void** v76;
    void** v77;
    void** v78;
    void** v79;
    void** ecx80;
    void** edi81;
    void** v82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** v92;
    void* esp93;
    void** v94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** v103;
    void** v104;
    void** v105;
    void** esp106;
    void** v107;
    void** v108;
    void** v109;
    void** v110;
    void** v111;
    void** v112;
    void** v113;
    void** v114;
    void** v115;
    void** v116;
    void** v117;
    void** v118;
    void** v119;
    void** v120;
    void** v121;
    void** v122;
    void** v123;
    void** v124;
    void** v125;
    void** v126;
    void** v127;
    void** v128;
    void** v129;
    void** v130;
    void** v131;
    void** v132;
    void** v133;
    void** v134;
    void** v135;
    void** v136;
    int16_t ax137;
    void** v138;
    void** v139;
    void** v140;
    void** v141;
    void** v142;
    void** v143;
    void** v144;
    void** v145;
    void** v146;
    void** v147;
    void** v148;
    void** v149;
    void** v150;
    void** v151;
    void** v152;
    void** v153;
    void** v154;
    void** v155;
    void** v156;
    void** v157;
    void** v158;
    void** v159;
    int16_t ax160;
    void** v161;
    void** v162;
    void** v163;
    void** v164;
    void** v165;
    void** v166;
    void** v167;
    void** v168;
    void** v169;
    void** v170;
    void** v171;
    void** esp172;
    void** v173;
    void** v174;
    void** v175;
    void** v176;
    void** v177;
    void** v178;
    void** v179;
    void** v180;
    void** v181;
    void** v182;
    void** v183;
    void** v184;
    void** v185;
    void** v186;
    void** v187;
    void** v188;
    void** v189;
    void** v190;
    void** v191;
    void** v192;
    void** v193;
    void** v194;
    void** v195;
    void** v196;
    void** v197;
    void** v198;
    void** v199;
    void** v200;
    signed char v201;
    void** v202;
    void** v203;
    void** v204;
    void** v205;
    void** v206;
    void** v207;
    void** v208;
    void** v209;
    void** v210;
    void** v211;
    void** v212;
    int16_t ax213;

    v30 = reinterpret_cast<void**>(__return_address());
    eax31 = a2;
    v32 = ebx33;
    ebx34 = *reinterpret_cast<void***>(eax31);
    v35 = ebp36;
    v37 = esi38;
    esi39 = ecx;
    esp40 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4);
    v41 = edi42;
    if (!*reinterpret_cast<signed char*>(&a4)) {
        if (!*reinterpret_cast<void***>(esi39 + 0x2cc) || !*reinterpret_cast<signed char*>(&a3)) {
            edi43 = *reinterpret_cast<struct s11**>(esi39 + 0x2d0);
            ebp44 = reinterpret_cast<struct s11*>(esi39 + 0x2d0);
            if (edi43 != ebp44) {
                do {
                    ecx45 = edi43->f8;
                    fun_1800c1e0(ecx45, ebx34, v41, v37, v35, v32, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v30, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
                    edi43 = edi43->f0;
                } while (edi43 != ebp44);
                eax31 = a2;
            }
            ax67 = fun_18007a20(esi39, eax31, v41, v37, v35, v32, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66);
            return ax67;
        } else {
            ecx68 = *reinterpret_cast<void***>(esi39 + 0x198);
            fun_1800a180(ecx68, esi39 + 0x2e0, ebx34, v41, v37, v35, v32, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v30, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
            ecx80 = *reinterpret_cast<void***>(esi39 + 0x198);
            edi81 = esi39 + 0x31c;
            fun_1800a180(ecx80, edi81, ebx34, v41, v37, v35, v32, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v30, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
            esp93 = reinterpret_cast<void*>(esp40 - 4 - 4 - 4 + 8 + 4 - 4 - 4 - 4 + 8 + 4);
            v94 = *reinterpret_cast<void***>(a2);
            fun_180085a0(esi39, reinterpret_cast<int32_t>(esp93) + 16, v94, v41, v37, v35, v32, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v30, a2, a3, a4, a5, a6, a7, a8, a9);
            esp106 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp93) - 4 - 4 - 4 + 8 + 4 - 44);
            fun_1800c650(esp106, esp106 + 60);
            fun_180090e0(edi81, v107, v108, v109, v110, v111, v112, v113, v114, 0x18007994, reinterpret_cast<int32_t>(esp93) + 16, v94, v41, v37, v35, v32, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v30, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
            ax137 = fun_1800c670(reinterpret_cast<uint32_t>(esp106 - 4) - 4 + 4 + 4 - 4 + 44 + 4 + 16, v41, v37, v35, v32, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, v30, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29);
            return ax137;
        }
    } else {
        if (!*reinterpret_cast<void***>(esi39 + 0x2cc) || *reinterpret_cast<signed char*>(&a3)) {
            fun_1800c650(esp40 - 44, eax31);
            ax160 = fun_180090e0(esi39 + 0x2e0, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v41, v37, v35, v32, v149, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v30, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
            return ax160;
        } else {
            fun_180085a0(esi39, esp40 + 16, ebx34, v41, v37, v35, v32, v161, v162, v163, v164, v165, v166, v167, v168, v169, v170, v171, v30, a2, a3, a4, a5, a6, a7, a8, a9);
            esp172 = reinterpret_cast<void**>(esp40 - 4 - 4 - 4 + 8 + 4 - 44);
            fun_1800c650(esp172, esp172 + 60);
            fun_18009070(esi39 + 0x358, v173, v174, v175, v176, v177, v178, v179, v180, 0x180078f6, esp40 + 16, ebx34, v41, v37, v35, v32, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v30, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
            fun_18007a20(esi39, a2, v41, v37, v35, v32, v192, v193, v194, v195, v196, v197, v198, v199, v200, v201);
            ax213 = fun_1800c670(reinterpret_cast<uint32_t>(esp172 - 4) - 4 + 4 + 4 - 4 + 44 + 4 - 4 - 4 + 4 + 4 + 16, v41, v37, v35, v32, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v30, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29);
            return ax213;
        }
    }
}

struct s12 {
    void** f0;
    signed char[87] pad88;
    void** f88;
};

int16_t fun_18008420(void** ecx, void** a2, void** a3, void** a4);

struct s12* fun_18008880(void** ecx, void** a2) {
    void** esi3;

    if (*reinterpret_cast<void***>(ecx + 0x2c7)) {
        fun_18008420(ecx, esi3, __return_address(), a2);
    }
    return ecx + 0x1a4;
}

int32_t IsBadWritePtr = 0x35e86;

int16_t fun_180010c0(void** a1) {
    int32_t eax2;
    void** ecx3;
    void** eax4;
    void** esi5;
    int16_t ax6;

    if (!a1 || ((eax2 = reinterpret_cast<int32_t>(IsBadWritePtr()), !!eax2) || (ecx3 = a1, eax4 = fun_18001000(ecx3), *reinterpret_cast<signed char*>(&eax4) == 0))) {
        ax6 = fun_18009260(ecx3, 2, esi5);
        *reinterpret_cast<signed char*>(&ax6) = 1;
        return ax6;
    } else {
        goto 0x160;
    }
}

void fun_18007730(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30);

void fun_18006760(void** ecx);

void fun_18007520(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26) {
    void** v27;
    void** v28;
    void** esi29;
    void** esi30;
    struct s11* eax31;
    void** v32;
    void** ecx33;

    v27 = reinterpret_cast<void**>(__return_address());
    v28 = esi29;
    esi30 = ecx;
    if (*reinterpret_cast<void***>(esi30 + 0x2cc)) {
        do {
            eax31 = *reinterpret_cast<struct s11**>(esi30 + 0x2d0);
            v32 = eax31->f8;
            fun_18007730(esi30, v32, 1, v28, v27, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
        } while (*reinterpret_cast<void***>(esi30 + 0x2cc));
    }
    ecx33 = *reinterpret_cast<void***>(esi30 + 0x198);
    fun_18006760(ecx33);
    return;
}

signed char fun_1800c220(void** ecx, void** a2);

void fun_18007560(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23) {
    void** v24;
    void** v25;
    void** ebx26;
    void** ebx27;
    void** v28;
    void** ebp29;
    void** v30;
    void** esi31;
    struct s11* esi32;
    struct s11* ebp33;
    void** v34;
    void** edi35;
    struct s11* eax36;
    void** edi37;
    signed char al38;
    void** ecx39;

    v24 = reinterpret_cast<void**>(__return_address());
    v25 = ebx26;
    ebx27 = ecx;
    v28 = ebp29;
    v30 = esi31;
    esi32 = *reinterpret_cast<struct s11**>(ebx27 + 0x2d0);
    ebp33 = reinterpret_cast<struct s11*>(ebx27 + 0x2d0);
    if (esi32 != ebp33) {
        v34 = edi35;
        do {
            eax36 = esi32;
            esi32 = esi32->f0;
            edi37 = eax36->f8;
            al38 = fun_1800c220(edi37, a2);
            if (al38) {
                fun_18007730(ebx27, edi37, 1, v34, v30, v28, v25, v24, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23);
            }
        } while (esi32 != ebp33);
    }
    ecx39 = *reinterpret_cast<void***>(ebx27 + 0x198);
    fun_18006760(ecx39);
    return;
}

void fun_1800a290(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8);

void fun_18006110(void** ecx, void** a2) {
    void** v3;
    void** ebx4;
    void** v5;
    void** esi6;
    void** esi7;
    void** ebx8;
    void** v9;
    void** ebp10;
    void** v11;
    void** edi12;
    void** eax13;
    void** v14;
    void** edi15;
    signed char al16;
    void** ecx17;
    void** edx18;
    void** eax19;

    v3 = ebx4;
    v5 = esi6;
    esi7 = ecx;
    ebx8 = *reinterpret_cast<void***>(esi7 + 28);
    if (ebx8 != esi7 + 28) {
        v9 = ebp10;
        v11 = edi12;
        do {
            eax13 = ebx8;
            ebx8 = *reinterpret_cast<void***>(ebx8);
            v14 = ebx8;
            edi15 = *reinterpret_cast<void***>(eax13 + 8);
            al16 = fun_1800c220(edi15, a2);
            if (al16) {
                ecx17 = *reinterpret_cast<void***>(esi7 + 28);
                edx18 = esi7 + 28;
                if (ecx17 != edx18) {
                    do {
                        if (*reinterpret_cast<void***>(ecx17 + 8) != edi15) {
                            ecx17 = *reinterpret_cast<void***>(ecx17);
                        } else {
                            eax19 = ecx17;
                            ecx17 = *reinterpret_cast<void***>(ecx17);
                            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax19 + 4)) = *reinterpret_cast<void***>(eax19);
                            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax19) + 4) = *reinterpret_cast<void***>(eax19 + 4);
                            *reinterpret_cast<void***>(eax19) = *reinterpret_cast<void***>(esi7 + 40);
                            ebx8 = v14;
                            *reinterpret_cast<void***>(esi7 + 40) = eax19;
                            *reinterpret_cast<void***>(esi7 + 24) = *reinterpret_cast<void***>(esi7 + 24) - 1;
                        }
                    } while (ecx17 != edx18);
                }
                fun_1800a290(esi7, edi15, 1, v11, v9, v5, v3, v14);
            }
        } while (ebx8 != esi7 + 28);
    }
    fun_18006760(esi7);
    return;
}

int16_t fun_1800c670(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, ...) {
    void** v46;
    int16_t ax47;

    if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx) == 15)) {
        v46 = *reinterpret_cast<void***>(ecx + 4);
        ax47 = fun_1802b2b0(ecx, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45);
    }
    return ax47;
}

int16_t fun_18001020(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, ...) {
    void** v8;
    void** v9;
    void** v10;
    void** eax11;

    v8 = *reinterpret_cast<void***>(a3);
    v9 = *reinterpret_cast<void***>(a3 + 4);
    if (!*reinterpret_cast<void***>(ecx + 4)) {
        v10 = *reinterpret_cast<void***>(a3 + 8);
    } else {
        __asm__("fld dword [eax+0x8]");
        __asm__("fchs ");
        __asm__("fstp dword [esp+0x8]");
    }
    eax11 = a2;
    *reinterpret_cast<void***>(eax11) = v8;
    *reinterpret_cast<void***>(eax11 + 4) = v9;
    *reinterpret_cast<void***>(eax11 + 8) = v10;
    return *reinterpret_cast<int16_t*>(&eax11);
}

struct s13 {
    int32_t f0;
    void** f4;
};

void fun_1800c750(struct s13* ecx, void** a2);

struct s14 {
    int32_t f0;
    void** f4;
};

void fun_1800c760(struct s14* ecx, void** a2);

struct s15 {
    int32_t f0;
    void** f4;
};

void fun_1800c770(struct s15* ecx, void** a2);

struct s16 {
    int32_t f0;
    void** f4;
};

void fun_1800c780(struct s16* ecx, void** a2);

struct s17 {
    signed char[15] pad15;
    void** f15;
};

struct s18 {
    int32_t f0;
    void** f4;
};

void fun_1800c790(struct s18* ecx, void** a2);

void fun_1800a7d0(void** ecx, void** a2, void** a3, void** a4);

struct s19 {
    int32_t f0;
    void** f4;
};

void fun_1800c7a0(struct s19* ecx, void** a2, ...);

struct s20 {
    int32_t f0;
    void** f4;
};

void fun_1800c7c0(struct s20* ecx, void** a2, ...);

struct s21 {
    int32_t f0;
    void** f4;
};

void fun_1800c7e0(struct s21* ecx, void** a2);

struct s22 {
    int32_t f0;
    void** f4;
};

void fun_1800c810(struct s22* ecx, void** a2);

void fun_1800c850(void** ecx, void** a2);

void fun_1800c830(void** ecx, void** a2, void** a3, void** a4);

struct s23 {
    int32_t f0;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

void fun_1800c870(struct s23* ecx, void** a2, void** a3, void** a4);

struct s24 {
    int32_t f0;
    void** f4;
};

void fun_1800c890(struct s24* ecx, void** a2);

void fun_1800c8a0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6);

struct s25 {
    int32_t f0;
    void** f4;
};

void fun_1800c920(struct s25* ecx, void** a2);

struct s26 {
    int32_t f0;
    void** f4;
};

void fun_1800c990(struct s26* ecx, void** a2);

int16_t fun_180085a0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27) {
    void** v28;
    void** v29;
    void** v30;
    void** v31;
    void** v32;
    void** ecx33;
    struct s17* v34;
    uint32_t edx35;
    uint32_t edx36;
    uint32_t eax37;
    void** ecx38;
    void** v39;
    void** v40;
    void** esi41;
    void** v42;
    void** ecx43;
    void** v44;
    void** v45;
    struct s19* ecx46;
    void** v47;
    void** v48;
    void** edx49;
    void** eax50;
    struct s20* ecx51;
    void** eax52;
    void** ecx53;
    void** v54;
    void** eax55;
    void** ecx56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** ecx61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** ebp72;
    void** eax73;
    void** eax74;
    void** v75;

    *reinterpret_cast<signed char*>(&v28) = 0;
    switch (a3 - 1) {
    case 0:
        v29 = *reinterpret_cast<void***>(ecx + 0x200);
        fun_1800c750(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 60, v29);
        goto addr_0x180087f2_4;
    case 1:
        __asm__("fld dword [esi+0x1f0]");
        __asm__("fmul dword [0x18034548]");
        __asm__("fstp dword [ebp+0xc]");
        __asm__("fld dword [ebp+0xc]");
        __asm__("fistp dword [ebp-0x4]");
        fun_1800c760(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 60, v30);
        goto addr_0x180087f2_4;
    case 2:
        v31 = *reinterpret_cast<void***>(ecx + 0x1f4);
        fun_1800c770(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 60, v31);
        goto addr_0x180087f2_4;
    case 3:
        v32 = *reinterpret_cast<void***>(ecx + 0x1f8);
        fun_1800c780(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 60, v32);
        goto addr_0x180087f2_4;
    case 4:
        __asm__("fld dword [esi+0x250]");
        __asm__("fmul dword [0x18034550]");
        __asm__("fstp dword [ebp+0xc]");
        __asm__("fld dword [ebp+0xc]");
        __asm__("fistp dword [ebp-0x4]");
        ecx33 = reinterpret_cast<void**>(&v34->f15);
        if (reinterpret_cast<signed char>(ecx33) > reinterpret_cast<signed char>(60)) {
            edx35 = __intrinsic() >> 5;
            ecx33 = ecx33 + -((edx35 << 4) - edx35) * 4;
        }
        if (reinterpret_cast<signed char>(ecx33) < reinterpret_cast<signed char>(0)) {
            edx36 = __intrinsic() >> 5;
            eax37 = edx36 + edx36 * 2;
            ecx33 = ecx33 + (eax37 + eax37 * 4) * 4;
        }
        fun_1800c790(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 60, ecx33);
        goto addr_0x180087f2_4;
    case 5:
        __asm__("fld dword [ebp+0xc]");
        __asm__("fistp dword [ebp-0x4]");
        ecx38 = *reinterpret_cast<void***>(ecx + 0x198);
        v39 = v40;
        fun_1800a7d0(ecx38, esi41, 0, v42);
        __asm__("fdivr dword [esi+0x24c]");
        __asm__("fmul dword [0x18034548]");
        __asm__("fstp dword [ebp+0xc]");
        __asm__("fld dword [ebp+0xc]");
        __asm__("fistp dword [ebp-0x4]");
        ecx43 = *reinterpret_cast<void***>(ecx + 0x254);
        v44 = v45;
        a3 = ecx43;
        __asm__("fld dword [ebp+0xc]");
        __asm__("fistp dword [ebp-0x4]");
        ecx46 = reinterpret_cast<struct s19*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 60);
        v47 = v48;
        fun_1800c7a0(ecx46, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff0, ecx46, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff0);
        goto addr_0x180087f2_4;
    case 6:
        edx49 = *reinterpret_cast<void***>(ecx + 0x24c);
        eax50 = *reinterpret_cast<void***>(ecx + 0x254);
        v39 = *reinterpret_cast<void***>(ecx + 0x250);
        v44 = edx49;
        ecx51 = reinterpret_cast<struct s20*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 60);
        v47 = eax50;
        fun_1800c7c0(ecx51, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff0, ecx51, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff0);
        goto addr_0x180087f2_4;
    case 7:
        fun_1800c7e0(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 60, ecx + 0x1b4);
        goto addr_0x180087f2_4;
    case 8:
        fun_1800c810(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 60, ecx + 0x1c0);
        goto addr_0x180087f2_4;
    case 9:
        fun_1800c850(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc4, ecx + 0x1cc);
        goto addr_0x180087f2_4;
    case 10:
        eax52 = *reinterpret_cast<void***>(ecx + 0x1dc);
        ecx53 = *reinterpret_cast<void***>(ecx + 0x1d8);
        v54 = *reinterpret_cast<void***>(ecx + 0x1e0);
        fun_1800c830(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc4, ecx53, eax52, v54);
        goto addr_0x180087f2_4;
    case 11:
        eax55 = *reinterpret_cast<void***>(ecx + 0x1e8);
        ecx56 = *reinterpret_cast<void***>(ecx + 0x1e4);
        v57 = *reinterpret_cast<void***>(ecx + 0x1ec);
        fun_1800c870(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 60, ecx56, eax55, v57);
        goto addr_0x180087f2_4;
    case 12:
        v58 = *reinterpret_cast<void***>(ecx + 0x1fc);
        fun_1800c890(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 60, v58);
        goto addr_0x180087f2_4;
    case 14:
        fun_1800c8a0(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc4, ecx + 0x1a4, esi41, 0, v59, v60);
        goto addr_0x180087f2_4;
    case 15:
        fun_1800c920(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc4, ecx + 0x39c);
        if (*reinterpret_cast<void***>(ecx + 0x398) == 1) {
            addr_0x180087f2_4:
        case 13:
            fun_1800c650(a2, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc4);
            ecx61 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc4);
            fun_1800c670(ecx61, esi41, 0, v62, v63, v64, v65, v66, v67, v68, v69, v70, v28, v39, v44, v47, v71, ebp72, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, ecx61);
            eax73 = a2;
            return *reinterpret_cast<int16_t*>(&eax73);
        } else {
            break;
        }
    case 16:
        fun_1800c990(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc4, ecx + 0x3c0);
        if (*reinterpret_cast<void***>(ecx + 0x398) == 2) 
            goto addr_0x180087f2_4;
    }
    eax74 = v75;
    *reinterpret_cast<unsigned char*>(&eax74) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax74) & 0xf0);
    v63 = eax74;
    goto addr_0x180087f2_4;
}

void** fun_1802ca65(void** a1, void** a2);

void** fun_1802b2bb(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9) {
    void** eax10;

    eax10 = fun_1802ca65(__return_address(), 1);
    return eax10;
}

struct s27 {
    void** f0;
    signed char[3] pad4;
    void** f4;
};

void fun_1800d330(void** ecx);

struct s28 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
    signed char[3] pad16;
    void** f16;
    signed char[3] pad20;
    void** f20;
    signed char[3] pad24;
    void** f24;
    signed char[3] pad28;
    void** f28;
    signed char[3] pad32;
    void** f32;
    signed char[3] pad36;
    void** f36;
    signed char[3] pad40;
    int32_t f40;
    int32_t f44;
};

void fun_1800ae80(struct s28* ecx);

void** fun_18027370(void** ecx);

void** g180382a0 = reinterpret_cast<void**>(0);

void** g180382a4 = reinterpret_cast<void**>(0);

void** g180382a8 = reinterpret_cast<void**>(0);

void** g180382b0 = reinterpret_cast<void**>(0);

void** g180382b4 = reinterpret_cast<void**>(0);

void** g180382b8 = reinterpret_cast<void**>(0);

void** g18038280 = reinterpret_cast<void**>(0);

void** g18038284 = reinterpret_cast<void**>(0);

void** g18038288 = reinterpret_cast<void**>(0);

void** g18038290 = reinterpret_cast<void**>(0);

void** g18038294 = reinterpret_cast<void**>(0);

void** g18038298 = reinterpret_cast<void**>(0);

void fun_1800d390(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7);

void** g18045874 = reinterpret_cast<void**>(0);

int16_t fun_18006dd0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7);

int32_t fun_1800d9b0(void** ecx);

uint32_t fun_1800d9d0(void** ecx);

void** fun_18017c30(void** ecx);

void** fun_18018b70(void** ecx);

void** fun_1800d850(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6);

int16_t fun_1800d4f0(void** ecx, int32_t a2, void** a3);

int16_t fun_18029d90(void** ecx, int32_t a2);

struct s29 {
    void** f0;
    signed char[7] pad8;
    void** f8;
};

int16_t fun_180098b0(void** ecx, void** a2, struct s29* a3);

void fun_1801d290(void** ecx, void** a2);

void fun_18024940(void** ecx, void** a2);

void fun_18024970(void** ecx, void* a2);

int16_t fun_18006e00(void** ecx, void** a2, void** a3, void** a4, struct s27* a5, void** a6);

int16_t fun_1800bcc0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7);

int16_t fun_18005070(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7);

struct s30 {
    void** f0;
    signed char[3] pad4;
    void** f4;
};

void fun_18009b50(void** ecx, struct s30* a2, void** a3, int32_t a4);

void fun_1800a660(void** ecx, void** a2, void** a3);

int16_t fun_18009c70(void** ecx, void** a2, void** a3);

int16_t fun_18009270(void** ecx, void** a2) {
    void** v3;
    void** ebx4;
    void** v5;
    void** ebp6;
    void** ebp7;
    void** v8;
    void** esi9;
    void*** esp10;
    void** v11;
    void** edi12;
    uint32_t ecx13;
    void** eax14;
    void** eax15;
    struct s27* edi16;
    int32_t ecx17;
    void*** esi18;
    void** edi19;
    void** esi20;
    void** edx21;
    uint32_t edx22;
    void** ecx23;
    void** eax24;
    void** edx25;
    void** edx26;
    void** edx27;
    void** edx28;
    void** ecx29;
    void** edx30;
    void** edx31;
    void** edx32;
    void** edx33;
    void** edx34;
    void** edx35;
    void** edx36;
    void** ecx37;
    void** eax38;
    void* esp39;
    void*** eax40;
    int32_t eax41;
    uint32_t eax42;
    void** eax43;
    void* esp44;
    void** eax45;
    void** v46;
    void** eax47;
    void** v48;
    void** v49;
    void** v50;
    void** eax51;
    void* esp52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** eax57;
    struct s29* edi58;
    void** ecx59;
    void** ecx60;
    void** v61;
    void* esp62;
    void** ecx63;
    void** v64;
    void** eax65;
    int32_t eax66;
    void* esp67;
    void** ecx68;
    void** ecx69;
    void** eax70;
    void** edx71;
    void** eax72;
    void** edi73;
    void** eax74;
    void** edx75;
    void** v76;
    void** eax77;
    void** ecx78;
    void** v79;
    void** edi80;
    void** eax81;
    void** edx82;
    int32_t eax83;
    void* esp84;
    void** ecx85;
    void** edx86;
    void** v87;
    void** eax88;
    void** eax89;
    int32_t v90;
    void** eax91;
    void** eax92;

    v3 = ebx4;
    v5 = ebp6;
    ebp7 = ecx;
    v8 = esi9;
    esp10 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x13c - 4 - 4 - 4 - 4);
    v11 = edi12;
    *reinterpret_cast<void***>(ebp7) = reinterpret_cast<void**>(0x5432);
    *reinterpret_cast<void***>(ebp7 + 2) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp7 + 3) = reinterpret_cast<void**>(0);
    ecx13 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 4)) >> 3;
    *reinterpret_cast<void***>(ebp7 + 5) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp7 + 4) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(~*reinterpret_cast<signed char*>(&ecx13)) & 1);
    *reinterpret_cast<void***>(ebp7 + 8) = reinterpret_cast<void**>(8);
    *reinterpret_cast<void***>(ebp7 + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp7 + 20) = reinterpret_cast<void**>(0);
    eax14 = ebp7 + 28;
    *reinterpret_cast<void***>(ebp7 + 24) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp7 + 40) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp7 + 32) = eax14;
    *reinterpret_cast<void***>(eax14) = eax14;
    *reinterpret_cast<void***>(ebp7 + 44) = reinterpret_cast<void**>(0x3bb);
    *reinterpret_cast<void***>(ebp7 + 48) = reinterpret_cast<void**>(0x3bd);
    eax15 = ebp7 + 56;
    *reinterpret_cast<void***>(ebp7 + 52) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp7 + 72) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(eax15) = eax15;
    *reinterpret_cast<void***>(ebp7 + 60) = eax15;
    edi16 = reinterpret_cast<struct s27*>(ebp7 + 84);
    ecx17 = 16;
    esi18 = reinterpret_cast<void***>(0x18038240);
    *reinterpret_cast<void***>(ebp7 + 76) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp7 + 80) = reinterpret_cast<void**>(15);
    while (ecx17) {
        --ecx17;
        edi16->f0 = *esi18;
        edi16 = reinterpret_cast<struct s27*>(&edi16->f4);
        esi18 = esi18 + 4;
    }
    edi19 = ebp7 + 0x94;
    fun_1800d330(edi19);
    esi20 = a2;
    edx21 = *reinterpret_cast<void***>(esi20 + 4);
    *reinterpret_cast<void***>(ebp7 + 0xbc) = reinterpret_cast<void**>(0xffffffff);
    edx22 = reinterpret_cast<unsigned char>(edx21) >> 4;
    *reinterpret_cast<void***>(ebp7 + 0xd0) = reinterpret_cast<void**>(0x40400000);
    *reinterpret_cast<void***>(ebp7 + 0xb8) = reinterpret_cast<void**>(*reinterpret_cast<unsigned char*>(&edx22) & 1);
    fun_1800ae80(ebp7 + 0xd4);
    ecx23 = ebp7 + 0x118;
    *reinterpret_cast<void***>(ebp7 + 0x108) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp7 + 0x10c) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp7 + 0x110) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp7 + 0x114) = reinterpret_cast<void**>(0);
    fun_18027370(ecx23);
    *reinterpret_cast<void***>(ebp7 + 0x140) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp7 + 0x148) = reinterpret_cast<void**>(1);
    *reinterpret_cast<void***>(ebp7 + 0x150) = reinterpret_cast<void**>(0xffffffff);
    *reinterpret_cast<int16_t*>(ebp7 + 0x15c) = 0x5432;
    fun_18009260(ecx23, 0, v11);
    eax24 = ebp7 + 0x70;
    if (!*reinterpret_cast<void***>(ebp7 + 4)) {
        edx25 = g180382a0;
        *reinterpret_cast<void***>(eax24) = edx25;
        edx26 = g180382a4;
        *reinterpret_cast<void***>(eax24 + 4) = edx26;
        edx27 = g180382a8;
        *reinterpret_cast<void***>(eax24 + 8) = edx27;
        edx28 = g180382b0;
        ecx29 = ebp7 + 0x7c;
        *reinterpret_cast<void***>(ebp7 + 0x7c) = edx28;
        edx30 = g180382b4;
        *reinterpret_cast<void***>(ecx29 + 4) = edx30;
        edx31 = g180382b8;
    } else {
        edx32 = g18038280;
        *reinterpret_cast<void***>(eax24) = edx32;
        edx33 = g18038284;
        *reinterpret_cast<void***>(eax24 + 4) = edx33;
        edx34 = g18038288;
        *reinterpret_cast<void***>(eax24 + 8) = edx34;
        edx35 = g18038290;
        ecx29 = ebp7 + 0x7c;
        *reinterpret_cast<void***>(ebp7 + 0x7c) = edx35;
        edx36 = g18038294;
        *reinterpret_cast<void***>(ecx29 + 4) = edx36;
        edx31 = g18038298;
    }
    *reinterpret_cast<void***>(ecx29 + 8) = edx31;
    ecx37 = edi19;
    fun_1800d390(ecx37, eax24, ebp7 + 0x7c, v11, v8, v5, v3);
    if (!*reinterpret_cast<void***>(ebp7 + 0xb8)) {
        __asm__("fld dword [0x1803422c]");
    } else {
        __asm__("fld dword [0x18034238]");
    }
    __asm__("fstp dword [ebp+0x8c]");
    eax38 = g18045874;
    *reinterpret_cast<int16_t*>(&eax38) = fun_18006dd0(ecx37, eax38, 0x180384c8, v11, v8, v5, v3);
    esp39 = reinterpret_cast<void*>(esp10 - 4 + 4 - 4 + 4 - 4 + 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 + 8 + 4 - 4 - 4 - 4 + 8 + 4);
    *reinterpret_cast<void***>(ebp7 + 0x104) = eax38;
    if (eax38) {
        *reinterpret_cast<void***>(ebp7 + 0x144) = reinterpret_cast<void**>(0x100);
        eax40 = reinterpret_cast<void***>(*reinterpret_cast<void***>(esi20 + 32) - 2);
        if (!eax40 || eax40 - 1 && ((eax41 = fun_1800d9b0(ecx37), esp39 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp39) - 4 + 4), eax41 == 0) || (eax42 = fun_1800d9d0(ecx37), esp39 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp39) - 4 + 4), eax42 == 0))) {
            eax43 = fun_18017c30(ecx37);
            esp44 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp39) - 4 + 4);
            *reinterpret_cast<void***>(ebp7 + 0x140) = eax43;
        } else {
            eax45 = fun_18018b70(ecx37);
            esp44 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp39) - 4 + 4);
            *reinterpret_cast<void***>(ebp7 + 0x140) = eax45;
            *reinterpret_cast<void***>(ebp7 + 0x144) = reinterpret_cast<void**>(0x400);
        }
        eax47 = fun_1800d850(ecx37, v11, v8, v5, v3, v46);
        *reinterpret_cast<void***>(ebp7 + 0x114) = eax47;
        if (eax47) {
            eax51 = fun_1802b2bb(ecx37, 68, v11, v8, v5, v3, v48, v49, v50);
            esp52 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp44) - 4 + 4 - 4 - 4 + 4 + 4);
            if (!eax51) {
                eax51 = reinterpret_cast<void**>(0);
            } else {
                v53 = *reinterpret_cast<void***>(ebp7 + 0x114);
                ecx37 = eax51;
                *reinterpret_cast<int16_t*>(&eax51) = fun_1800d4f0(ecx37, 15, v53);
                esp52 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp52) - 4 - 4 - 4 + 8 + 4);
            }
            *reinterpret_cast<void***>(ebp7 + 0x154) = eax51;
            eax57 = fun_1802b2bb(ecx37, 72, v11, v8, v5, v3, v54, v55, v56);
            esp39 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp52) - 4 - 4 + 4 + 4);
            if (!eax57) {
                eax57 = reinterpret_cast<void**>(0);
            } else {
                *reinterpret_cast<int16_t*>(&eax57) = fun_18029d90(eax57, 0xff);
                esp39 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp39) - 4 - 4 + 4 + 4);
            }
            ecx37 = *reinterpret_cast<void***>(ebp7 + 0x154);
            *reinterpret_cast<void***>(ebp7 + 0x158) = eax57;
            if (ecx37 && eax57) {
                edi58 = reinterpret_cast<struct s29*>(ebp7 + 0x108);
                *reinterpret_cast<int16_t*>(&eax57) = fun_180098b0(ebp7, esi20, edi58);
                if (!eax57) {
                    ecx59 = edi58->f0;
                    fun_1801d290(ecx59, ebp7 + 0x118);
                    ecx60 = edi58->f0;
                    v61 = *reinterpret_cast<void***>(ebp7 + 0x114);
                    fun_18024940(ecx60, v61);
                    esp62 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp39) - 4 - 4 - 4 + 8 + 4 - 4 - 4 + 4 + 4 - 4 - 4 + 4 + 4);
                    ecx63 = *reinterpret_cast<void***>(ebp7 + 0x104);
                    v64 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp62) + 72);
                    eax65 = *reinterpret_cast<void***>(ecx63);
                    eax66 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(eax65 + 8)());
                    esp67 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp62) - 4 - 4 - 4 - 4 - 4 - 4 + 4);
                    if (eax66) {
                        ecx68 = edi58->f0;
                        fun_18024970(ecx68, reinterpret_cast<int32_t>(esp67) + 72);
                        esp67 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp67) - 4 - 4 + 4 + 4);
                    }
                    if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi20 + 20)) > reinterpret_cast<signed char>(0)) {
                        *reinterpret_cast<void***>(ebp7 + 8) = *reinterpret_cast<void***>(esi20 + 20);
                    }
                    ecx69 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebp7 + 8)) << 2);
                    eax70 = fun_1802b2bb(ecx69, ecx69, 0x180384b8, 0x180384c0, 0x18045870, v64, 0x104, v11, v8);
                    edx71 = *reinterpret_cast<void***>(ebp7 + 8);
                    *reinterpret_cast<void***>(ebp7 + 12) = eax70;
                    eax72 = fun_1802b2bb(ecx69, reinterpret_cast<unsigned char>(edx71) << 2, ecx69, 0x180384b8, 0x180384c0, 0x18045870, v64, 0x104, v11);
                    ecx37 = *reinterpret_cast<void***>(ebp7 + 12);
                    esp39 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp67) - 4 - 4 + 4 - 4 - 4 + 4 + 8);
                    *reinterpret_cast<void***>(ebp7 + 20) = eax72;
                    if (ecx37 && eax72) {
                        edi73 = reinterpret_cast<void**>(0);
                        if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(ebp7 + 8)) > reinterpret_cast<signed char>(0)) {
                            do {
                                eax74 = fun_1802b2bb(ecx37, 0x400, 0x180384b8, 0x180384c0, 0x18045870, v64, 0x104, v11, v8);
                                esp39 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp39) - 4 - 4 + 4 + 4);
                                if (!eax74) {
                                    eax74 = reinterpret_cast<void**>(0);
                                } else {
                                    ecx37 = *reinterpret_cast<void***>(ebp7 + 4);
                                    edx75 = *reinterpret_cast<void***>(ebp7 + 0x140);
                                    v76 = ecx37;
                                    *reinterpret_cast<int16_t*>(&eax74) = fun_18006e00(eax74, edi73, ebp7, edx75, ebp7 + 84, v76);
                                    esp39 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp39) - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
                                }
                                ecx37 = *reinterpret_cast<void***>(ebp7 + 12);
                                ++edi73;
                                *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(ecx37 + reinterpret_cast<unsigned char>(edi73) * 4) - 4) = eax74;
                            } while (reinterpret_cast<signed char>(edi73) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(ebp7 + 8)));
                        }
                        eax77 = *reinterpret_cast<void***>(ebp7 + 0x144);
                        ecx78 = *reinterpret_cast<void***>(ebp7 + 0x140);
                        v79 = *reinterpret_cast<void***>(ebp7 + 0x108);
                        edi80 = ebp7 + 84;
                        *reinterpret_cast<int16_t*>(&eax77) = fun_1800bcc0(ecx78, ebp7, edi80, ecx78, eax77, v79, 0x180384b8);
                        *reinterpret_cast<void***>(ebp7 + 0x10c) = eax77;
                        if (!*reinterpret_cast<void***>(esi20 + 40) && (!*reinterpret_cast<void***>(esi20 + 52) && (!*reinterpret_cast<void***>(esi20 + 48) && (!*reinterpret_cast<void***>(esi20 + 60) && (!*reinterpret_cast<void***>(esi20 + 44) && !*reinterpret_cast<void***>(esi20 + 56)))))) {
                            eax81 = *reinterpret_cast<void***>(ebp7 + 8);
                            *reinterpret_cast<void***>(esi20 + 56) = eax81;
                            *reinterpret_cast<void***>(esi20 + 44) = eax81;
                            *reinterpret_cast<void***>(esi20 + 40) = eax81;
                        }
                        edx82 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebp7 + 0x108));
                        eax83 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(edx82 + 36)());
                        esp84 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp39) - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4 - 4 + 4);
                        if (eax83) {
                            ecx85 = *reinterpret_cast<void***>(ebp7 + 0x108);
                            edx86 = *reinterpret_cast<void***>(ebp7 + 0x140);
                            v87 = *reinterpret_cast<void***>(ebp7 + 0x144);
                            eax88 = *reinterpret_cast<void***>(ecx85);
                            eax89 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax88 + 44)(edx86, v87));
                            *reinterpret_cast<int16_t*>(&eax89) = fun_18005070(ecx85, ebp7, edi80, eax89, edx86, v87, 0x180384b8);
                            esp84 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp84) - 4 - 4 - 4 + 4 - 4 - 4 - 4 - 4 + 20 + 4);
                            *reinterpret_cast<void***>(ebp7 + 0x110) = eax89;
                        } else {
                            *reinterpret_cast<void***>(esi20 + 48) = reinterpret_cast<void**>(0);
                            *reinterpret_cast<void***>(esi20 + 40) = reinterpret_cast<void**>(0);
                            *reinterpret_cast<void***>(esi20 + 60) = reinterpret_cast<void**>(0);
                            *reinterpret_cast<void***>(esi20 + 52) = reinterpret_cast<void**>(0);
                        }
                        fun_18009b50(ebp7, reinterpret_cast<int32_t>(esp84) - 4 + 20, 15, 0);
                        fun_1800a660(ebp7, 0, 0xff);
                        fun_18009c70(ebp7, 0, 0x180384b8);
                        goto v90;
                    }
                } else {
                    fun_18009260(ebp7, eax57, v11);
                    eax91 = ebp7;
                    return *reinterpret_cast<int16_t*>(&eax91);
                }
            }
        }
    }
    fun_18009260(ecx37, 4, v11);
    eax92 = ebp7;
    return *reinterpret_cast<int16_t*>(&eax92);
}

void fun_180073a0(void** ecx);

void fun_1800a170(void** ecx, void** a2) {
    fun_180073a0(a2);
    return;
}

int16_t fun_1800cd70(void** ecx, void** a2, signed char* a3) {
    void** edx4;
    void** esi5;
    int32_t ecx6;
    void** edi7;
    void** eax8;
    signed char* edi9;
    void** ebx10;
    uint32_t ecx11;
    uint32_t ecx12;
    uint32_t eax13;
    void*** esi14;
    void** edi15;
    uint32_t ecx16;
    uint32_t ecx17;
    void** eax18;
    void** eax19;
    void** eax20;

    edx4 = ecx;
    esi5 = edx4 + 16;
    *reinterpret_cast<void***>(edx4 + 68) = a2;
    ecx6 = 8;
    edi7 = esi5;
    while (ecx6) {
        --ecx6;
        *reinterpret_cast<void***>(edi7) = reinterpret_cast<void**>(0);
        edi7 = edi7 + 4;
        esi5 = esi5 + 4;
    }
    eax8 = *reinterpret_cast<void***>(edx4 + 68);
    edi9 = a3;
    ebx10 = edx4 + 48;
    *reinterpret_cast<void***>(esi5) = *reinterpret_cast<void***>(eax8 + 8);
    *reinterpret_cast<void***>(edx4 + 20) = *reinterpret_cast<void***>(eax8 + 12);
    ecx11 = 0xffffffff;
    do {
        if (!ecx11) 
            break;
        --ecx11;
        ++edi9;
    } while (*edi9);
    ecx12 = ~ecx11;
    eax13 = ecx12;
    esi14 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(edi9) - ecx12);
    edi15 = ebx10;
    ecx16 = ecx12 >> 2;
    while (ecx16) {
        --ecx16;
        *reinterpret_cast<void***>(edi15) = *esi14;
        edi15 = edi15 + 4;
        esi14 = esi14 + 4;
    }
    ecx17 = eax13 & 3;
    while (ecx17) {
        --ecx17;
        *reinterpret_cast<void***>(edi15) = *esi14;
        ++edi15;
        ++esi14;
    }
    eax18 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(edx4 + 68) + 28);
    *reinterpret_cast<void***>(edx4 + 64) = eax18;
    if (!eax18) {
        eax19 = edx4;
        *reinterpret_cast<void***>(eax19) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax19 + 4) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax19 + 8) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax19 + 12) = reinterpret_cast<void**>(0);
        return *reinterpret_cast<int16_t*>(&eax19);
    } else {
        *reinterpret_cast<void***>(edx4) = *reinterpret_cast<void***>(eax18);
        *reinterpret_cast<void***>(edx4 + 4) = *reinterpret_cast<void***>(eax18 + 4);
        *reinterpret_cast<void***>(edx4 + 8) = *reinterpret_cast<void***>(eax18 + 8);
        *reinterpret_cast<void***>(edx4 + 12) = *reinterpret_cast<void***>(eax18 + 12);
        eax20 = edx4;
        return *reinterpret_cast<int16_t*>(&eax20);
    }
}

int32_t GetFullPathNameA = 0x36020;

uint32_t fun_1802c259(void** ecx, void** a2);

int32_t CreateFileA = 0x36012;

struct s31 {
    int32_t f0;
    int32_t f4;
};

int16_t fun_1802a9f0(struct s31* ecx, void** a2, int32_t a3);

int16_t fun_1802ab10(void** ecx, void** a2, void** a3, int32_t a4);

int16_t fun_1802acb0(void** ecx, void** a2);

int16_t fun_1802ac90(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30);

void fun_1802aaf0(void** ecx);

int32_t CloseHandle = 0x35f66;

void** fun_1802b500(void** ecx, void** a2, void** a3, void** a4, void** a5);

void** fun_18031d70(void** ecx, void** a2, void** a3, void** a4, void** a5);

signed char fun_1802af70(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35);

int32_t CreateFileMappingA = 0x35ffc;

int32_t MapViewOfFile = 0x35fec;

int32_t GetFileSize = 0x35fde;

int16_t fun_18022dd0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22);

int32_t UnmapViewOfFile = 0x35fcc;

int16_t fun_18023110(void** a1, void** a2) {
    void** v3;
    void** ebp4;
    void*** esp5;
    void* esp6;
    void** ecx7;
    void* esp8;
    signed char v9;
    signed char v10;
    uint32_t eax11;
    uint32_t ecx12;
    void** eax13;
    void** esi14;
    int32_t v15;
    void*** esp16;
    void* esp17;
    void* esp18;
    void** eax19;
    void*** esp20;
    void* esp21;
    void* esp22;
    void** eax23;
    void*** esp24;
    void** esi25;
    void** ebx26;
    void** v27;
    void** v28;
    void** v29;
    void** v30;
    void** v31;
    void** v32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void* esp38;
    void** ecx39;
    int32_t v40;
    void* esp41;
    void** eax42;
    void*** esp43;
    void** ecx44;
    void* esp45;
    void** ecx46;
    void** eax47;
    void** eax48;
    void* esp49;
    void** ecx50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    signed char al67;
    void** ecx68;
    void** eax69;
    void* esp70;
    void** eax71;
    void* esp72;
    int32_t edi73;
    void** ecx74;
    int32_t v75;
    void** eax76;
    void** edi77;
    void* esp78;
    void** eax79;
    void*** esp80;
    void*** v81;
    void** ecx82;
    int32_t v83;
    void** ecx84;
    int32_t v85;
    void** eax86;
    void* esp87;
    void** eax88;
    void* esp89;
    int32_t ebx90;
    void** v91;
    void** v92;
    void** v93;
    void** v94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** v103;
    void** v104;
    void** v105;
    void** v106;
    void** ecx107;
    int32_t v108;
    void** eax109;
    void** edi110;
    void* esp111;
    void*** v112;
    void** v113;
    void** v114;
    void** v115;
    void** v116;
    void** v117;
    void** v118;
    void** v119;
    void** v120;
    void** v121;
    void** v122;
    void** v123;
    void** v124;
    void** v125;
    void** v126;
    void** v127;
    void** v128;
    void** v129;
    void** v130;
    void** v131;
    void** v132;
    void** v133;
    void** v134;
    void** ecx135;
    void** v136;
    void** v137;
    void** v138;
    void** v139;
    void** v140;
    void** v141;
    void** v142;
    void** v143;
    void** v144;
    void** v145;
    void** v146;
    void** v147;
    void** v148;
    void** v149;
    void** v150;
    void** v151;
    void** v152;
    int32_t v153;
    int32_t edi154;
    void** v155;
    void** v156;
    void** v157;
    void** v158;
    void** v159;
    void** v160;
    void** v161;
    void** v162;
    void** v163;
    void** v164;
    void** v165;
    void** v166;
    void** v167;
    void** v168;
    void** v169;
    void** ecx170;
    int32_t v171;
    int32_t v172;
    void** v173;
    void** v174;
    void** v175;
    void** v176;
    void** v177;
    void** v178;
    void** v179;
    void** v180;
    void** v181;
    void** v182;
    void** v183;
    void** v184;
    void** v185;
    void** v186;
    void** v187;
    void** v188;
    void** v189;
    void** v190;
    void** v191;
    void** v192;
    void** v193;
    void** v194;
    void** v195;
    void** v196;
    void** v197;
    void** v198;
    void** v199;
    void** v200;
    int32_t v201;
    int32_t edi202;
    void** ecx203;
    int32_t v204;

    v3 = ebp4;
    esp5 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x260 - 4 - 4 - 4);
    esp6 = reinterpret_cast<void*>(esp5 - 4);
    ecx7 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp6) + 0x70);
    GetFullPathNameA();
    esp8 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp6) - 4 - 4 - 4 - 4 - 4 + 4);
    if (v9 == 58) {
        eax11 = fun_1802c259(ecx7, static_cast<int32_t>(v10));
        ecx12 = eax11 - 65;
        esp8 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp8) - 4 - 4 + 4 + 4);
        v3 = reinterpret_cast<void**>(1 << *reinterpret_cast<unsigned char*>(&ecx12));
    }
    eax13 = reinterpret_cast<void**>(CreateFileA());
    esi14 = eax13;
    if (reinterpret_cast<int1_t>(esi14 == 0xffffffff)) {
        goto v15;
    }
    esp16 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp8) - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4);
    *reinterpret_cast<int16_t*>(&eax13) = fun_1802a9f0(esp16 + 24, esi14, 0);
    esp17 = reinterpret_cast<void*>(esp16 - 4 + 8 + 4);
    if (!eax13) {
        esp18 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp17) - 4);
        eax19 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp18) + 40);
        esp20 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp18) - 4 - 4);
        *reinterpret_cast<int16_t*>(&eax19) = fun_1802ab10(esp20 + 28, eax19, 0, 32);
        esp21 = reinterpret_cast<void*>(esp20 - 4 + 12 + 4);
        if (!eax19) {
            *reinterpret_cast<int16_t*>(&eax19) = fun_1802acb0(reinterpret_cast<int32_t>(esp21) + 16, reinterpret_cast<int32_t>(esp21) + 36);
            esp22 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp21) - 4 - 4 + 4 + 4);
            eax23 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp22) + 28);
            esp24 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp22) - 4 - 4);
            *reinterpret_cast<int16_t*>(&eax23) = fun_1802ac90(esp24 + 24, reinterpret_cast<int32_t>(esp22) + 36, eax23, a1, 0x80000000, 1, 0, 0, 0, 0, a1, eax19, ecx7, esp5 + 52, 0x45564157, esi25, v3, ebx26, v27, v28, 0, v29, v30, v31, v32, v33, v34, v35, v36, v37);
            esp38 = reinterpret_cast<void*>(esp24 - 4 + 8 + 4);
            if (eax23) {
                ecx39 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp38) + 16);
                fun_1802aaf0(ecx39);
                if (esi14) {
                    CloseHandle(ecx39, esi14);
                }
                goto v40;
            }
            esp41 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp38) - 4);
            eax42 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp41) + 64);
            esp43 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp41) - 4 - 4);
            ecx44 = reinterpret_cast<void**>(esp43 + 28);
            *reinterpret_cast<int16_t*>(&eax42) = fun_1802ab10(ecx44, eax42, reinterpret_cast<int32_t>(esp38) + 36, 16);
            esp45 = reinterpret_cast<void*>(esp43 - 4 + 12 + 4);
            if (eax42) 
                goto addr_0x180233b2_12;
        } else {
            ecx46 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp21) + 16);
            fun_1802aaf0(ecx46);
            eax47 = fun_1802b500(ecx46, a1, 46, 0x18043b14, a1);
            eax48 = fun_18031d70(ecx46, eax47, 0x18043b14, a1, 0x80000000);
            esp49 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp21) - 4 + 4 - 4 - 4 - 4 - 4 + 4 + 8 - 4 - 4 + 4 + 8);
            if (eax48 || (ecx50 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp49) + 80), al67 = fun_1802af70(ecx50, ecx50, a1, a1, 0x80000000, 1, 0, 0, 0, 0, a1, 0x200, ecx7, esp5 + 52, 0x45564157, esi25, v3, ebx26, v51, v52, 0, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66), esp49 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp49) - 4 - 4 - 4 + 8 + 4), al67 == 0)) {
                addr_0x180233bb_14:
                ecx68 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp49) + 16);
                fun_1802aaf0(ecx68);
                if (esi14) {
                    CloseHandle(ecx68, esi14);
                    goto addr_0x180233cf_16;
                }
            } else {
                eax69 = reinterpret_cast<void**>(CreateFileMappingA());
                esp70 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp49) - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 4);
                if (eax69) {
                    eax71 = reinterpret_cast<void**>(MapViewOfFile());
                    esp72 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp70) - 4 - 4 - 4 - 4 - 4 - 4 + 4);
                    if (!eax71) {
                        edi73 = CloseHandle;
                        edi73();
                        ecx74 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp72) - 4 - 4 + 4 + 16);
                        fun_1802aaf0(ecx74);
                        if (esi14) {
                            edi73(ecx74, esi14);
                        }
                        goto v75;
                    }
                    eax76 = fun_1802b2bb(ecx50, 48, eax69, 4, 0, 0, 0, esi14, 0);
                    edi77 = eax76;
                    esp78 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp72) - 4 - 4 + 4 + 4);
                    if (!edi77) {
                        edi77 = reinterpret_cast<void**>(0);
                    } else {
                        eax79 = reinterpret_cast<void**>(GetFileSize(esi14, 0));
                        esp80 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp78) - 4 - 4 - 4 + 4 - 4 - 4 - 4);
                        ecx50 = edi77;
                        fun_18022dd0(ecx50, esp80 + 92, eax71, eax79, 0, 0, esi14, 0, eax69, 4, 0, 0, 0, esi14, 0, 2, 0, 0, 0, a1, 0x80000000, 1);
                        esp78 = reinterpret_cast<void*>(esp80 - 4 - 4 - 4 + 20 + 4);
                        *reinterpret_cast<void***>(edi77 + 36) = esi14;
                        *reinterpret_cast<void***>(edi77 + 40) = eax69;
                        *reinterpret_cast<void***>(edi77 + 44) = eax71;
                        *reinterpret_cast<void***>(edi77) = reinterpret_cast<void**>(0x180350f8);
                    }
                    *v81 = edi77;
                    if (edi77) 
                        goto addr_0x1802332d_26; else 
                        goto addr_0x180232f7_27;
                } else {
                    ecx82 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp70) + 16);
                    fun_1802aaf0(ecx82);
                    if (esi14) {
                        CloseHandle(ecx82);
                        goto v83;
                    }
                }
            }
        }
    } else {
        ecx84 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp17) + 16);
        fun_1802aaf0(ecx84);
        if (esi14) {
            CloseHandle(ecx84);
            goto v85;
        }
    }
    eax86 = reinterpret_cast<void**>(CreateFileMappingA(ecx44));
    esp87 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp45) - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 4);
    if (eax86) {
        eax88 = reinterpret_cast<void**>(MapViewOfFile(ecx44));
        esp89 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp87) - 4 - 4 - 4 - 4 - 4 - 4 + 4);
        if (!eax88) {
            ebx90 = CloseHandle;
            ebx90(ecx44);
            fun_1802b2b0(ecx44, a1, eax86, eax86, 4, 0, 0, 0, esi14, 0, 2, 0, 0, 0, a1, 0x80000000, 1, 0, 0, 0, a1, a1, eax19, ecx7, esp5 + 52, 0x45564157, esi25, v3, ebx26, 0x61746164, v91, 0, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106);
            ecx107 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp89) - 4 - 4 + 4 - 4 - 4 + 4 + 4 + 16);
            fun_1802aaf0(ecx107);
            if (esi14) {
                ebx90(ecx107, esi14);
            }
            goto v108;
        }
        eax109 = fun_1802b2bb(ecx44, 48, eax86, 4, 0, 0, 0, esi14, 0);
        edi110 = eax109;
        esp111 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp89) - 4 - 4 + 4 + 4);
        if (!edi110) {
            edi110 = reinterpret_cast<void**>(0);
        } else {
            ecx44 = edi110;
            fun_18022dd0(ecx44, 2, reinterpret_cast<unsigned char>(a1) + reinterpret_cast<unsigned char>(eax88), 0, 0, 0, eax86, 4, 0, 0, 0, esi14, 0, 2, 0, 0, 0, a1, 0x80000000, 1, 0, 0);
            esp111 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp111) - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
            *reinterpret_cast<void***>(edi110 + 36) = esi14;
            *reinterpret_cast<void***>(edi110 + 40) = eax86;
            *reinterpret_cast<void***>(edi110 + 44) = eax88;
            *reinterpret_cast<void***>(edi110) = reinterpret_cast<void**>(0x180350f8);
        }
        *v112 = edi110;
        if (!edi110) 
            goto addr_0x180234b5_41;
    } else {
        fun_1802b2b0(ecx44, a1, esi14, 0, 2, 0, 0, 0, a1, 0x80000000, 1, 0, 0, 0, a1, a1, eax19, ecx7, esp5 + 52, 0x45564157, esi25, v3, ebx26, 0x61746164, v113, 0, v114, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134);
        ecx135 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp87) - 4 - 4 + 4 + 4 + 16);
        fun_1802aaf0(ecx135);
        if (esi14) {
            CloseHandle(ecx135, esi14);
            goto addr_0x1802340e_44;
        }
    }
    fun_1802b2b0(0, 0, eax86, 4, 0, 0, 0, esi14, 0, 2, 0, 0, 0, a1, 0x80000000, 1, 0, 0, 0, a1, a1, eax19, ecx7, esp5 + 52, 0x45564157, esi25, v3, ebx26, 0x61746164, v136, 0, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152);
    esp78 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp111) - 4 - 4 + 4 + 4);
    addr_0x18023501_46:
    fun_1802aaf0(reinterpret_cast<int32_t>(esp78) + 16);
    goto v153;
    addr_0x180234b5_41:
    UnmapViewOfFile(ecx44);
    edi154 = CloseHandle;
    edi154(ecx44);
    fun_1802b2b0(ecx44, 0, eax86, eax88, eax86, 4, 0, 0, 0, esi14, 0, 2, 0, 0, 0, a1, 0x80000000, 1, 0, 0, 0, a1, a1, eax19, ecx7, esp5 + 52, 0x45564157, esi25, v3, ebx26, 0x61746164, v155, 0, v156, v157, v158, v159, v160, v161, v162, v163, v164, v165, v166, v167, v168, v169);
    ecx170 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp111) - 4 - 4 + 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4 + 16);
    fun_1802aaf0(ecx170);
    if (esi14) {
        edi154(ecx170, esi14);
    }
    goto v171;
    addr_0x1802340e_44:
    goto v172;
    addr_0x180233b2_12:
    fun_1802b2b0(ecx44, a1, a1, 0x80000000, 1, 0, 0, 0, a1, a1, eax19, ecx7, esp5 + 52, 0x45564157, esi25, v3, ebx26, 0x61746164, v173, 0, v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, v198, v199, v200);
    esp49 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp45) - 4 - 4 + 4 + 4);
    goto addr_0x180233bb_14;
    addr_0x180233cf_16:
    goto v201;
    addr_0x1802332d_26:
    *reinterpret_cast<void***>(edi77 + 24) = reinterpret_cast<void**>(0);
    goto addr_0x18023501_46;
    addr_0x180232f7_27:
    UnmapViewOfFile(ecx50);
    edi202 = CloseHandle;
    edi202(ecx50);
    ecx203 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp78) - 4 - 4 + 4 - 4 - 4 + 4 + 16);
    fun_1802aaf0(ecx203);
    if (esi14) {
        edi202(ecx203);
        goto v204;
    }
}

int16_t fun_18023a30(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16) {
    void** eax17;
    uint32_t eax18;
    uint32_t eax19;
    uint32_t eax20;
    uint32_t eax21;
    uint32_t eax22;
    uint32_t eax23;

    eax17 = fun_1802b2bb(ecx, 36, __return_address(), a2, a3, a4, a5, a6, a7);
    if (!eax17) {
        *reinterpret_cast<void***>(a6) = reinterpret_cast<void**>(0);
        eax18 = reinterpret_cast<uint32_t>(-reinterpret_cast<unsigned char>(0));
        eax19 = eax18 - (eax18 + reinterpret_cast<uint1_t>(eax18 < eax18));
        *reinterpret_cast<unsigned char*>(&eax19) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax19) & 0xfc);
        eax20 = eax19 + 4;
        return *reinterpret_cast<int16_t*>(&eax20);
    } else {
        *reinterpret_cast<int16_t*>(&eax17) = fun_18022dd0(eax17, a4, a2, a3, 0, a5, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
        *reinterpret_cast<void***>(a6) = eax17;
        eax21 = reinterpret_cast<uint32_t>(-reinterpret_cast<unsigned char>(eax17));
        eax22 = eax21 - (eax21 + reinterpret_cast<uint1_t>(eax21 < eax21 + reinterpret_cast<uint1_t>(!!eax17)));
        *reinterpret_cast<unsigned char*>(&eax22) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax22) & 0xfc);
        eax23 = eax22 + 4;
        return *reinterpret_cast<int16_t*>(&eax23);
    }
}

int16_t fun_18022c60(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6);

int16_t fun_18022d70(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** eax8;
    uint32_t eax9;
    uint32_t eax10;
    uint32_t eax11;
    uint32_t eax12;
    uint32_t eax13;
    uint32_t eax14;

    eax8 = fun_1802b2bb(ecx, 44, __return_address(), a2, a3, a4, a5, a6, a7);
    if (!eax8) {
        *reinterpret_cast<void***>(a7) = reinterpret_cast<void**>(0);
        eax9 = reinterpret_cast<uint32_t>(-reinterpret_cast<unsigned char>(0));
        eax10 = eax9 - (eax9 + reinterpret_cast<uint1_t>(eax9 < eax9));
        *reinterpret_cast<unsigned char*>(&eax10) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax10) & 0xfc);
        eax11 = eax10 + 4;
        return *reinterpret_cast<int16_t*>(&eax11);
    } else {
        *reinterpret_cast<int16_t*>(&eax8) = fun_18022c60(eax8, a3, a2, a4, a5, a6);
        *reinterpret_cast<void***>(a7) = eax8;
        eax12 = reinterpret_cast<uint32_t>(-reinterpret_cast<unsigned char>(eax8));
        eax13 = eax12 - (eax12 + reinterpret_cast<uint1_t>(eax12 < eax12 + reinterpret_cast<uint1_t>(!!eax8)));
        *reinterpret_cast<unsigned char*>(&eax13) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax13) & 0xfc);
        eax14 = eax13 + 4;
        return *reinterpret_cast<int16_t*>(&eax14);
    }
}

void fun_18027410(void** ecx);

void fun_18007240(void** ecx, unsigned char a2);

void fun_18027460(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6);

void fun_18027490(void** ecx);

struct s32 {
    signed char[508] pad508;
    int32_t f508;
    signed char[404] pad916;
    int32_t f916;
};

struct s33 {
    signed char[508] pad508;
    int32_t f508;
    signed char[404] pad916;
    int32_t f916;
};

int32_t fun_180069d0(struct s32** a1, struct s33** a2);

int32_t timeGetTime = 0x35e44;

void fun_180088a0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6);

uint32_t fun_18006a30(void** a1, void** a2, void** a3);

uint32_t fun_18006ab0(void*** a1, void*** a2);

struct s34 {
    signed char[508] pad508;
    int32_t f508;
};

struct s35 {
    signed char[508] pad508;
    int32_t f508;
};

uint32_t fun_18006b40(struct s34** a1, struct s35** a2);

void** fun_18008460(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7);

struct s36 {
    signed char[508] pad508;
    int32_t f508;
    signed char[132] pad644;
    uint32_t f644;
    signed char[60] pad708;
    signed char f708;
    signed char[1] pad710;
    signed char f710;
    signed char[5] pad716;
    uint32_t f716;
};

struct s37 {
    signed char[508] pad508;
    uint32_t f508;
    signed char[132] pad644;
    int32_t f644;
    signed char[60] pad708;
    signed char f708;
    signed char[1] pad710;
    signed char f710;
    signed char[5] pad716;
    int32_t f716;
};

uint32_t fun_18006bb0(struct s36** a1, struct s37** a2);

void fun_1802b324(void** a1, uint32_t a2, void** a3, void** a4);

void fun_18007460(void** ecx) {
    void** edx2;
    void** ecx3;
    void** v4;
    void** ebx5;
    void** ebx6;
    void** v7;
    void** ebp8;
    void** v9;
    void** esi10;
    void** al11;
    void** v12;
    void** edi13;
    void** v14;
    uint32_t eax15;
    void** eax16;
    void** ecx17;
    void** v18;
    void** ebp19;
    void** edi20;
    void** esi21;
    uint1_t less_or_equal22;
    void** ecx23;
    void** v24;
    void** ecx25;
    void** v26;
    void** edi27;
    void** ebx28;
    void** esi29;
    void** edx30;
    void** ecx31;
    uint32_t eax32;
    void** v33;
    void** eax34;
    void** v35;
    void** esi36;
    void** ecx37;
    void** eax38;
    void** ebx39;
    void** esi40;
    void** ecx41;
    void** esi42;
    void** ecx43;
    void** eax44;

    edx2 = *reinterpret_cast<void***>(ecx + 0x198);
    *reinterpret_cast<void***>(ecx + 0x2c6) = reinterpret_cast<void**>(1);
    *reinterpret_cast<void***>(ecx + 0x2c5) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(edx2 + 76) = reinterpret_cast<void**>(1);
    ecx3 = *reinterpret_cast<void***>(ecx + 0x198);
    v4 = ebx5;
    ebx6 = ecx3;
    v7 = ebp8;
    v9 = esi10;
    al11 = *reinterpret_cast<void***>(ebx6 + 76);
    v12 = edi13;
    v14 = ebx6;
    if (!al11 || ((eax15 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx6 + 80)) & 15, *reinterpret_cast<signed char*>(&eax15) == 15) || (!*reinterpret_cast<void***>(ebx6 + 2) || (eax16 = *reinterpret_cast<void***>(ebx6 + 52), *reinterpret_cast<void***>(ebx6 + 76) = reinterpret_cast<void**>(0), eax16 == 0)))) {
        addr_0x180069ab_3:
        return;
    } else {
        ecx17 = ebx6 + 0x118;
        v18 = ecx17;
        fun_18027410(ecx17);
        ebp19 = *reinterpret_cast<void***>(ebx6 + 20);
        edi20 = ebp19;
        esi21 = reinterpret_cast<void**>(0);
        less_or_equal22 = reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(ebx6 + 8)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(ebx6 + 8) == 0));
        if (less_or_equal22) 
            goto addr_0x18006999_5;
        while (1) {
            ecx23 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx6 + 12) + reinterpret_cast<unsigned char>(esi21) * 4);
            if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx23 + 0x288) == 0x7fff0000)) 
                goto addr_0x18006821_7;
            if (*reinterpret_cast<void***>(ecx23 + 0x1ac)) 
                goto addr_0x18006821_7;
            if (!*reinterpret_cast<void***>(ecx23 + 0x2c4)) {
                addr_0x18006806_10:
                if (*reinterpret_cast<void***>(ecx23 + 0x2cc)) {
                    addr_0x18006821_7:
                    ++esi21;
                    if (reinterpret_cast<signed char>(esi21) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(ebx6 + 8))) 
                        continue; else 
                        break;
                } else {
                    addr_0x18006810_11:
                    if (*reinterpret_cast<void***>(ecx23 + 0x284)) {
                        fun_18007240(ecx23, 0);
                        goto addr_0x18006821_7;
                    }
                }
            } else {
                if (!*reinterpret_cast<void***>(ecx23 + 0x2cc)) 
                    goto addr_0x18006810_11;
                if (*reinterpret_cast<void***>(ecx23 + 0x2c6)) 
                    goto addr_0x18006806_10;
            }
            *reinterpret_cast<void***>(edi20) = ecx23;
            edi20 = edi20 + 4;
            goto addr_0x18006821_7;
        }
        v24 = edi20;
        if (edi20 == ebp19) 
            goto addr_0x18006999_5;
        ecx25 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi20) - reinterpret_cast<unsigned char>(ebp19));
        v26 = ecx25;
        if (reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ecx25) & 0xfffffffc) > reinterpret_cast<int32_t>(4)) 
            goto addr_0x1800684b_18;
    }
    addr_0x18006900_19:
    edi27 = edi20 + 0xfffffffc;
    if (edi27 != ebp19) {
        do {
            if (*reinterpret_cast<void***>(*reinterpret_cast<void***>(edi27) + 0x284)) 
                break;
            edi27 = edi27 - 4;
        } while (edi27 != ebp19);
    }
    while (1) {
        ebx28 = *reinterpret_cast<void***>(ebp19);
        if (*reinterpret_cast<void***>(ebx28 + 0x284) || ((fun_18007240(ebx28, 1), !!*reinterpret_cast<void***>(ebx28 + 0x284)) || (esi29 = edi27, reinterpret_cast<unsigned char>(edi27) <= reinterpret_cast<unsigned char>(ebp19)))) {
            addr_0x1800698e_23:
            ebp19 = ebp19 + 4;
            if (ebp19 != v24) 
                continue; else 
                goto addr_0x18006999_5;
        } else {
            edx30 = *reinterpret_cast<void***>(ebx28 + 0x288);
            while ((ecx31 = *reinterpret_cast<void***>(esi29), eax32 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx31 + 0x1a8)) & reinterpret_cast<unsigned char>(edx30), (eax32 & 0xff0000) == 0) || !(eax32 & 0x7f000000)) {
                esi29 = esi29 - 4;
                if (reinterpret_cast<unsigned char>(esi29) <= reinterpret_cast<unsigned char>(ebp19)) 
                    goto addr_0x1800698e_23;
            }
        }
        fun_18007240(ecx31, 0);
        fun_18007240(ebx28, 1);
        if (esi29 == edi27) {
            do {
                if (*reinterpret_cast<void***>(*reinterpret_cast<void***>(edi27) + 0x284)) 
                    goto addr_0x1800698e_23;
                edi27 = edi27 - 4;
            } while (reinterpret_cast<unsigned char>(edi27) > reinterpret_cast<unsigned char>(ebp19));
            goto addr_0x1800698e_23;
        }
    }
    addr_0x1800684b_18:
    switch (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx6 + 80)) & 15) {
        addr_0x18006999_5:
    default:
        fun_18027460(v18, v12, v9, v7, v4, v33);
        fun_18027490(v18);
        goto addr_0x180069ab_3;
    case 0:
        v33 = reinterpret_cast<void**>(fun_180069d0);
        eax34 = reinterpret_cast<void**>(timeGetTime());
        v35 = eax34;
        esi36 = ebp19;
        do {
            ecx37 = *reinterpret_cast<void***>(esi36);
            fun_180088a0(ecx37, v35, v12, v9, v7, v4);
            esi36 = esi36 + 4;
        } while (esi36 != edi20);
        ecx25 = v26;
        break;
    case 1:
        v33 = reinterpret_cast<void**>(fun_18006a30);
        eax38 = reinterpret_cast<void**>(timeGetTime());
        ebx39 = eax38;
        esi40 = ebp19;
        do {
            ecx41 = *reinterpret_cast<void***>(esi40);
            fun_180088a0(ecx41, ebx39, v12, v9, v7, v4);
            esi40 = esi40 + 4;
        } while (esi40 != edi20);
        ebx6 = v14;
        ecx25 = v26;
        break;
    case 2:
        v33 = reinterpret_cast<void**>(fun_18006ab0);
        break;
    case 3:
        v33 = reinterpret_cast<void**>(fun_18006b40);
        esi42 = ebp19;
        do {
            ecx43 = *reinterpret_cast<void***>(esi42);
            fun_18008460(ecx43, v12, v9, v7, v4, fun_18006b40, v26);
            esi42 = esi42 + 4;
        } while (esi42 != edi20);
        ecx25 = v26;
        break;
    case 4:
        v33 = reinterpret_cast<void**>(fun_18006bb0);
    }
    eax44 = *reinterpret_cast<void***>(ebx6 + 20);
    fun_1802b324(eax44, reinterpret_cast<signed char>(ecx25) >> 2, 4, v33);
    goto addr_0x18006900_19;
}

int16_t fun_1800cb00(void** ecx, void** a2, void** a3, signed char a4);

void fun_1800a0f0(void** ecx) {
    void** eax2;
    void** ebp3;
    void** edi4;
    void** v5;
    void** esi6;
    void** ebx7;
    void** ecx8;
    void** ecx9;

    eax2 = ecx;
    ebp3 = *reinterpret_cast<void***>(eax2 + 56);
    edi4 = *reinterpret_cast<void***>(eax2 + 8);
    v5 = eax2;
    if (ebp3 != eax2 + 56) {
        do {
            if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(edi4) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(edi4 == 0)) 
                break;
            esi6 = *reinterpret_cast<void***>(ebp3 + 12);
            ebx7 = *reinterpret_cast<void***>(ebp3 + 8);
            if (esi6) {
                if (esi6 == 0xffffffff || reinterpret_cast<signed char>(esi6) > reinterpret_cast<signed char>(edi4)) {
                    esi6 = edi4;
                }
                ecx8 = *reinterpret_cast<void***>(eax2 + 0x110);
                if (ecx8) {
                    *reinterpret_cast<int16_t*>(&eax2) = fun_1800cb00(ecx8, ebx7, esi6, 0);
                    esi6 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi6) - reinterpret_cast<unsigned char>(eax2));
                    edi4 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi4) - reinterpret_cast<unsigned char>(eax2));
                    eax2 = v5;
                }
                ecx9 = *reinterpret_cast<void***>(eax2 + 0x10c);
                if (ecx9) {
                    *reinterpret_cast<int16_t*>(&eax2) = fun_1800cb00(ecx9, ebx7, esi6, 0);
                    edi4 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi4) - reinterpret_cast<unsigned char>(eax2));
                    eax2 = v5;
                }
            }
            ebp3 = *reinterpret_cast<void***>(ebp3);
        } while (ebp3 != eax2 + 56);
    }
    return;
}

int16_t fun_18009ea0(void** ecx, void** a2, void** a3);

int16_t fun_18009e40(void** ecx, uint32_t a2);

void fun_18007240(void** ecx, unsigned char a2) {
    void** edi3;
    void** eax4;
    void** edx5;
    void** ecx6;
    void** eax7;
    void** edx8;
    void** ebx9;
    void** ebx10;
    void** edi11;
    void** eax12;
    void** ebp13;
    void** ebp14;
    void** edi15;
    void** esi16;
    void** ecx17;
    void** eax18;
    void** v19;
    void** edx20;
    void** edx21;

    edi3 = *reinterpret_cast<void***>(ecx + 0x198);
    if (*reinterpret_cast<void***>(edi3 + 2) && (*reinterpret_cast<void***>(ecx + 0x2c4) && (eax4 = *reinterpret_cast<void***>(ecx + 0x284), a2 != static_cast<unsigned char>(reinterpret_cast<uint1_t>(!!eax4))))) {
        if (!a2) {
            edx5 = *reinterpret_cast<void***>(eax4);
            *reinterpret_cast<void***>(edx5 + 8)(eax4);
            ecx6 = *reinterpret_cast<void***>(ecx + 0x284);
            *reinterpret_cast<void***>(ecx + 0x1a8) = reinterpret_cast<void**>(0);
            eax7 = *reinterpret_cast<void***>(ecx6);
            *reinterpret_cast<void***>(eax7 + 12)();
            if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx + 0x288) == 0x7fff0000) || *reinterpret_cast<void***>(ecx + 0x1ac)) {
                if (*reinterpret_cast<void***>(ecx + 0x284)) {
                    edx8 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x284));
                    *reinterpret_cast<void***>(edx8)();
                    *reinterpret_cast<void***>(ecx + 0x284) = reinterpret_cast<void**>(0);
                    goto ebx9;
                }
            } else {
                ebx10 = *reinterpret_cast<void***>(ecx + 0x284);
                edi11 = *reinterpret_cast<void***>(ebx10 + 4) + 32;
                eax12 = *reinterpret_cast<void***>(edi11 + 16);
                ebp13 = edi11 + 4;
                if (!eax12) {
                    eax12 = fun_1802b2bb(ecx6, 12, 0, 0, ebp14, ebx9, edi15, esi16, __return_address());
                } else {
                    *reinterpret_cast<void***>(edi11 + 16) = *reinterpret_cast<void***>(eax12);
                }
                if (eax12) {
                    ecx17 = eax12 + 8;
                    if (ecx17) {
                        *reinterpret_cast<void***>(ecx17) = ebx10;
                    }
                    *reinterpret_cast<void***>(eax12) = ebp13;
                    *reinterpret_cast<void***>(eax12 + 4) = *reinterpret_cast<void***>(ebp13 + 4);
                    *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebp13 + 4)) = eax12;
                    *reinterpret_cast<void***>(ebp13 + 4) = eax12;
                    *reinterpret_cast<void***>(edi11) = *reinterpret_cast<void***>(edi11) + 1;
                }
            }
            *reinterpret_cast<void***>(ecx + 0x284) = reinterpret_cast<void**>(0);
        } else {
            eax18 = *reinterpret_cast<void***>(ecx + 0x288);
            if (!reinterpret_cast<int1_t>(eax18 == 0x7fff0000) || *reinterpret_cast<void***>(ecx + 0x1ac)) {
                v19 = *reinterpret_cast<void***>(ecx + 0x1ac);
                *reinterpret_cast<int16_t*>(&eax18) = fun_18009ea0(edi3, eax18, v19);
            } else {
                *reinterpret_cast<int16_t*>(&eax18) = fun_18009e40(edi3, 0x7fff0000);
            }
            *reinterpret_cast<void***>(ecx + 0x284) = eax18;
            if (eax18) {
                *reinterpret_cast<void***>(ecx + 0x1a8) = *reinterpret_cast<void***>(eax18 + 8);
                edx20 = *reinterpret_cast<void***>(eax18);
                *reinterpret_cast<void***>(edx20 + 12)();
                edx21 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x284));
                *reinterpret_cast<void***>(edx21 + 4)();
                goto edi15;
            }
        }
    }
    return;
}

void fun_1800a220(void** ecx) {
    void** eax2;

    fun_18006760(ecx);
    if (*reinterpret_cast<void***>(ecx + 0x110)) {
        eax2 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x110));
        *reinterpret_cast<void***>(eax2 + 16)();
    }
    if (!*reinterpret_cast<void***>(ecx + 0x10c)) {
        return;
    } else {
        goto *reinterpret_cast<void***>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x10c)) + 16);
    }
}

void fun_18007490(void** ecx) {
    void** ecx2;
    void** v3;
    void** ebx4;
    void** ebx5;
    void** v6;
    void** ebp7;
    void** v8;
    void** esi9;
    void** al10;
    void** v11;
    void** edi12;
    void** v13;
    uint32_t eax14;
    void** eax15;
    void** ecx16;
    void** v17;
    void** ebp18;
    void** edi19;
    void** esi20;
    uint1_t less_or_equal21;
    void** ecx22;
    void** v23;
    void** ecx24;
    void** v25;
    void** edi26;
    void** ebx27;
    void** esi28;
    void** edx29;
    void** ecx30;
    uint32_t eax31;
    void** v32;
    void** eax33;
    void** v34;
    void** esi35;
    void** ecx36;
    void** eax37;
    void** ebx38;
    void** esi39;
    void** ecx40;
    void** esi41;
    void** ecx42;
    void** eax43;

    *reinterpret_cast<void***>(ecx + 0x2c6) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x2c5) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x198) + 76) = reinterpret_cast<void**>(1);
    ecx2 = *reinterpret_cast<void***>(ecx + 0x198);
    v3 = ebx4;
    ebx5 = ecx2;
    v6 = ebp7;
    v8 = esi9;
    al10 = *reinterpret_cast<void***>(ebx5 + 76);
    v11 = edi12;
    v13 = ebx5;
    if (!al10 || ((eax14 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx5 + 80)) & 15, *reinterpret_cast<signed char*>(&eax14) == 15) || (!*reinterpret_cast<void***>(ebx5 + 2) || (eax15 = *reinterpret_cast<void***>(ebx5 + 52), *reinterpret_cast<void***>(ebx5 + 76) = reinterpret_cast<void**>(0), eax15 == 0)))) {
        addr_0x180069ab_3:
        return;
    } else {
        ecx16 = ebx5 + 0x118;
        v17 = ecx16;
        fun_18027410(ecx16);
        ebp18 = *reinterpret_cast<void***>(ebx5 + 20);
        edi19 = ebp18;
        esi20 = reinterpret_cast<void**>(0);
        less_or_equal21 = reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(ebx5 + 8)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(ebx5 + 8) == 0));
        if (less_or_equal21) 
            goto addr_0x18006999_5;
        while (1) {
            ecx22 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx5 + 12) + reinterpret_cast<unsigned char>(esi20) * 4);
            if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx22 + 0x288) == 0x7fff0000)) 
                goto addr_0x18006821_7;
            if (*reinterpret_cast<void***>(ecx22 + 0x1ac)) 
                goto addr_0x18006821_7;
            if (!*reinterpret_cast<void***>(ecx22 + 0x2c4)) {
                addr_0x18006806_10:
                if (*reinterpret_cast<void***>(ecx22 + 0x2cc)) {
                    addr_0x18006821_7:
                    ++esi20;
                    if (reinterpret_cast<signed char>(esi20) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(ebx5 + 8))) 
                        continue; else 
                        break;
                } else {
                    addr_0x18006810_11:
                    if (*reinterpret_cast<void***>(ecx22 + 0x284)) {
                        fun_18007240(ecx22, 0);
                        goto addr_0x18006821_7;
                    }
                }
            } else {
                if (!*reinterpret_cast<void***>(ecx22 + 0x2cc)) 
                    goto addr_0x18006810_11;
                if (*reinterpret_cast<void***>(ecx22 + 0x2c6)) 
                    goto addr_0x18006806_10;
            }
            *reinterpret_cast<void***>(edi19) = ecx22;
            edi19 = edi19 + 4;
            goto addr_0x18006821_7;
        }
        v23 = edi19;
        if (edi19 == ebp18) 
            goto addr_0x18006999_5;
        ecx24 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi19) - reinterpret_cast<unsigned char>(ebp18));
        v25 = ecx24;
        if (reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ecx24) & 0xfffffffc) > reinterpret_cast<int32_t>(4)) 
            goto addr_0x1800684b_18;
    }
    addr_0x18006900_19:
    edi26 = edi19 + 0xfffffffc;
    if (edi26 != ebp18) {
        do {
            if (*reinterpret_cast<void***>(*reinterpret_cast<void***>(edi26) + 0x284)) 
                break;
            edi26 = edi26 - 4;
        } while (edi26 != ebp18);
    }
    while (1) {
        ebx27 = *reinterpret_cast<void***>(ebp18);
        if (*reinterpret_cast<void***>(ebx27 + 0x284) || ((fun_18007240(ebx27, 1), !!*reinterpret_cast<void***>(ebx27 + 0x284)) || (esi28 = edi26, reinterpret_cast<unsigned char>(edi26) <= reinterpret_cast<unsigned char>(ebp18)))) {
            addr_0x1800698e_23:
            ebp18 = ebp18 + 4;
            if (ebp18 != v23) 
                continue; else 
                goto addr_0x18006999_5;
        } else {
            edx29 = *reinterpret_cast<void***>(ebx27 + 0x288);
            while ((ecx30 = *reinterpret_cast<void***>(esi28), eax31 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx30 + 0x1a8)) & reinterpret_cast<unsigned char>(edx29), (eax31 & 0xff0000) == 0) || !(eax31 & 0x7f000000)) {
                esi28 = esi28 - 4;
                if (reinterpret_cast<unsigned char>(esi28) <= reinterpret_cast<unsigned char>(ebp18)) 
                    goto addr_0x1800698e_23;
            }
        }
        fun_18007240(ecx30, 0);
        fun_18007240(ebx27, 1);
        if (esi28 == edi26) {
            do {
                if (*reinterpret_cast<void***>(*reinterpret_cast<void***>(edi26) + 0x284)) 
                    goto addr_0x1800698e_23;
                edi26 = edi26 - 4;
            } while (reinterpret_cast<unsigned char>(edi26) > reinterpret_cast<unsigned char>(ebp18));
            goto addr_0x1800698e_23;
        }
    }
    addr_0x1800684b_18:
    switch (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx5 + 80)) & 15) {
        addr_0x18006999_5:
    default:
        fun_18027460(v17, v11, v8, v6, v3, v32);
        fun_18027490(v17);
        goto addr_0x180069ab_3;
    case 0:
        v32 = reinterpret_cast<void**>(fun_180069d0);
        eax33 = reinterpret_cast<void**>(timeGetTime());
        v34 = eax33;
        esi35 = ebp18;
        do {
            ecx36 = *reinterpret_cast<void***>(esi35);
            fun_180088a0(ecx36, v34, v11, v8, v6, v3);
            esi35 = esi35 + 4;
        } while (esi35 != edi19);
        ecx24 = v25;
        break;
    case 1:
        v32 = reinterpret_cast<void**>(fun_18006a30);
        eax37 = reinterpret_cast<void**>(timeGetTime());
        ebx38 = eax37;
        esi39 = ebp18;
        do {
            ecx40 = *reinterpret_cast<void***>(esi39);
            fun_180088a0(ecx40, ebx38, v11, v8, v6, v3);
            esi39 = esi39 + 4;
        } while (esi39 != edi19);
        ebx5 = v13;
        ecx24 = v25;
        break;
    case 2:
        v32 = reinterpret_cast<void**>(fun_18006ab0);
        break;
    case 3:
        v32 = reinterpret_cast<void**>(fun_18006b40);
        esi41 = ebp18;
        do {
            ecx42 = *reinterpret_cast<void***>(esi41);
            fun_18008460(ecx42, v11, v8, v6, v3, fun_18006b40, v25);
            esi41 = esi41 + 4;
        } while (esi41 != edi19);
        ecx24 = v25;
        break;
    case 4:
        v32 = reinterpret_cast<void**>(fun_18006bb0);
    }
    eax43 = *reinterpret_cast<void***>(ebx5 + 20);
    fun_1802b324(eax43, reinterpret_cast<signed char>(ecx24) >> 2, 4, v32);
    goto addr_0x18006900_19;
}

void fun_1800c790(struct s18* ecx, void** a2) {
    ecx->f0 = 5;
    ecx->f4 = a2;
    return;
}

int16_t fun_18001520(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23) {
    void** v24;
    void** v25;
    void** esi26;
    void** v27;
    void** edi28;
    void** edi29;
    void** eax30;
    uint32_t ecx31;
    uint32_t edx32;
    void** eax33;
    void** esi34;
    void** v35;
    void** ebx36;
    void** ebx37;
    void** v38;
    void** ebp39;
    void** ebp40;

    v24 = reinterpret_cast<void**>(__return_address());
    v25 = esi26;
    v27 = edi28;
    edi29 = a2;
    fun_1800a1e0(edi29);
    eax30 = a4;
    ecx31 = reinterpret_cast<unsigned char>(eax30) >> 3;
    edx32 = reinterpret_cast<unsigned char>(eax30) >> 4;
    *reinterpret_cast<unsigned char*>(&a4) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&ecx31) & 1);
    *reinterpret_cast<unsigned char*>(&a2) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&edx32) & 1);
    if (*reinterpret_cast<unsigned char*>(&eax30) & 32) {
        *reinterpret_cast<void***>(a5 + 40) = reinterpret_cast<void**>(1);
    }
    if (!(*reinterpret_cast<unsigned char*>(&eax30) & 1)) {
        eax33 = a3;
        *reinterpret_cast<int16_t*>(&eax33) = fun_18009c50(edi29, eax33);
        if (eax33) {
            fun_180078c0(eax33, a5, a4, a2, v27, v25, v24, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23);
        } else {
            fun_18009260(edi29, 10, v27);
            fun_1800a200(edi29);
            return 11;
        }
    } else {
        esi34 = reinterpret_cast<void**>(1);
        *reinterpret_cast<int16_t*>(&eax30) = fun_18009c50(edi29, 0);
        if (eax30) {
            v35 = ebx36;
            ebx37 = a2;
            v38 = ebp39;
            ebp40 = a4;
            do {
                fun_180078c0(eax30, a5, ebp40, ebx37, v38, v35, v27, v25, v24, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
                eax30 = esi34;
                ++esi34;
                *reinterpret_cast<int16_t*>(&eax30) = fun_18009c50(edi29, eax30);
            } while (eax30);
            fun_1800a200(edi29);
            return 0;
        }
    }
    fun_1800a200(edi29);
    return 0;
}

unsigned char fun_1800c3e0(void** ecx);

void fun_1800c000(void** ecx, void** a2);

void fun_180074c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25) {
    struct s11* eax26;
    void** edi27;
    unsigned char al28;
    void** edi29;
    void** esi30;
    void** ecx31;
    void** ecx32;

    if (*reinterpret_cast<void***>(ecx + 0x2cc)) {
        eax26 = *reinterpret_cast<struct s11**>(ecx + 0x2d0);
        edi27 = eax26->f8;
        if (!*reinterpret_cast<signed char*>(&a2) || (al28 = fun_1800c3e0(edi27), al28 == 0)) {
            fun_18007730(ecx, edi27, 1, edi29, esi30, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25);
            ecx31 = *reinterpret_cast<void***>(ecx + 0x198);
            fun_18006760(ecx31);
        } else {
            fun_1800c000(edi27, 0);
            ecx32 = *reinterpret_cast<void***>(ecx + 0x198);
            fun_18006760(ecx32);
            return;
        }
    }
    return;
}

int32_t RegisterClassA = 0x36492;

int32_t CreateWindowExA = 0x36480;

int16_t fun_1800ce30(void** ecx, void** a2, int32_t a3, void** a4, int32_t a5) {
    void** ax6;
    void** eax7;
    int32_t edi8;

    *reinterpret_cast<void***>(ecx + 4) = a2;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 12) = a4;
    ax6 = reinterpret_cast<void**>(RegisterClassA(reinterpret_cast<int32_t>(__zero_stack_offset()) - 40 - 4 - 4 - 4 + 12));
    *reinterpret_cast<void***>(ecx) = ax6;
    eax7 = reinterpret_cast<void**>(CreateWindowExA());
    *reinterpret_cast<void***>(ecx + 8) = eax7;
    goto edi8;
}

int32_t DestroyWindow = 0x364b8;

int32_t UnregisterClassA = 0x364a4;

void fun_1800cec0(void** ecx) {
    void** edx2;
    void** v3;
    int32_t esi4;

    DestroyWindow();
    if (*reinterpret_cast<void***>(ecx)) {
        edx2 = *reinterpret_cast<void***>(ecx + 4);
        v3 = *reinterpret_cast<void***>(ecx + 12);
        UnregisterClassA(edx2, v3);
    }
    goto esi4;
}

void fun_180075b0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23);

void fun_1800a250(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18) {
    void** v19;
    void** v20;
    void** esi21;
    void** v22;
    void** edi23;
    void** edi24;
    void** esi25;
    void** v26;
    void** ebx27;
    void** ebx28;
    void** ecx29;

    v19 = reinterpret_cast<void**>(__return_address());
    v20 = esi21;
    v22 = edi23;
    edi24 = ecx;
    esi25 = reinterpret_cast<void**>(0);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(edi24 + 8)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(edi24 + 8) == 0))) {
        v26 = ebx27;
        ebx28 = a2;
        do {
            ecx29 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(edi24 + 12) + reinterpret_cast<unsigned char>(esi25) * 4);
            if (*reinterpret_cast<void***>(ecx29 + 0x2c4)) {
                fun_180075b0(ecx29, ebx28, v26, v22, v20, v19, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
            }
            ++esi25;
        } while (reinterpret_cast<signed char>(esi25) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(edi24 + 8)));
    }
    return;
}

void fun_180249c0(void** ecx, void** a2) {
    return;
}

int16_t fun_180249f0(void** ecx, void** a2, void** a3, void** a4);

void fun_18024d80(void** ecx, void** a2, void** a3, void** a4);

int16_t fun_18027110(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9) {
    void** edi10;
    void** esi11;
    void** eax12;
    void** edx13;
    int32_t eax14;
    void** edx15;
    int32_t eax16;
    void** eax17;

    eax12 = fun_1802b2bb(ecx, 0xd4, edi10, esi11, __return_address(), a2, a3, a4, a5);
    if (!eax12 || (*reinterpret_cast<int16_t*>(&eax12) = fun_180249f0(eax12, a4, a9, a5), !eax12)) {
        return 4;
    } else {
        fun_18024d80(eax12, a6, a7, edi10);
        edx13 = *reinterpret_cast<void***>(eax12);
        eax14 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(edx13 + 4)(eax12));
        if (eax14 || (edx15 = *reinterpret_cast<void***>(eax12), eax16 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(edx15 + 8)(eax12)), !!eax16)) {
            *reinterpret_cast<void***>(__return_address()) = reinterpret_cast<void**>(0);
            eax17 = *reinterpret_cast<void***>(eax12);
            *reinterpret_cast<void***>(eax17)(eax12);
            goto edi10;
        } else {
            *reinterpret_cast<void***>(esi11) = eax12;
            goto edi10;
        }
    }
}

void fun_1801d290(void** ecx, void** a2) {
    *reinterpret_cast<void***>(ecx + 16) = a2;
    return;
}

void fun_18024940(void** ecx, void** a2) {
    *reinterpret_cast<void***>(ecx + 8) = a2;
    return;
}

void fun_1800cc80(void** ecx, void** a2, void** a3);

void** g180458c8 = reinterpret_cast<void**>(0);

struct s38 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

void** g180458cc = reinterpret_cast<void**>(0);

void** g180458d0 = reinterpret_cast<void**>(0);

void** g180458d4 = reinterpret_cast<void**>(0);

void fun_18024950(void** ecx, void** a2);

int16_t fun_180050b0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** ebx7;
    void** ebp8;
    void** edx9;
    void** edi10;
    int32_t ecx11;
    void*** esi12;
    void** esi13;
    struct s38* ecx14;
    void** esi15;
    void** esi16;
    void** esi17;
    uint32_t eax18;
    void** eax19;

    ebx7 = ecx;
    fun_1800cc80(ecx, a3, a4);
    ebp8 = a5;
    edx9 = ebx7 + 20;
    edi10 = ebx7 + 40;
    *reinterpret_cast<void***>(edx9) = reinterpret_cast<void**>(0x180342d0);
    *reinterpret_cast<void***>(ebx7 + 32) = a3;
    *reinterpret_cast<void***>(ebx7 + 36) = a2;
    ecx11 = 16;
    esi12 = reinterpret_cast<void***>(0x180380a8);
    *reinterpret_cast<void***>(ebx7 + 24) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebx7 + 28) = ebp8;
    while (ecx11) {
        --ecx11;
        *reinterpret_cast<void***>(edi10) = *esi12;
        edi10 = edi10 + 4;
        esi12 = esi12 + 4;
    }
    esi13 = g180458c8;
    ecx14 = reinterpret_cast<struct s38*>(ebx7 + 0x6c);
    *reinterpret_cast<void***>(ebx7 + 0x6c) = esi13;
    esi15 = g180458cc;
    ecx14->f4 = esi15;
    esi16 = g180458d0;
    ecx14->f8 = esi16;
    esi17 = g180458d4;
    *reinterpret_cast<void***>(ebx7 + 0x7c) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebx7 + 0x80) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebx7 + 0x84) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebx7 + 0x68) = reinterpret_cast<void**>(0);
    ecx14->f12 = esi17;
    *reinterpret_cast<void***>(ebx7) = reinterpret_cast<void**>(0x180342a8);
    eax18 = reinterpret_cast<uint32_t>(-reinterpret_cast<unsigned char>(ebx7));
    *reinterpret_cast<void***>(ebx7 + 0x88) = a6;
    *reinterpret_cast<void***>(edx9) = reinterpret_cast<void**>(0x1803427c);
    fun_18024950(ebp8, eax18 - (eax18 + reinterpret_cast<uint1_t>(eax18 < eax18 + reinterpret_cast<uint1_t>(!!ebx7))) & reinterpret_cast<unsigned char>(edx9));
    eax19 = ebx7;
    return *reinterpret_cast<int16_t*>(&eax19);
}

void fun_18027240(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16) {
    void** eax17;
    void** edi18;
    uint32_t eax19;
    uint32_t edx20;

    eax17 = a4;
    edi18 = a2;
    *reinterpret_cast<void***>(a1 + 14) = eax17;
    __asm__("cdq ");
    *reinterpret_cast<void***>(a1 + 2) = edi18;
    eax19 = (reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax17) + (edx20 & 7)) >> 3) * reinterpret_cast<unsigned char>(edi18);
    *reinterpret_cast<void***>(a1 + 12) = *reinterpret_cast<void***>(&eax19);
    *reinterpret_cast<void***>(a1 + 4) = a3;
    *reinterpret_cast<void***>(a1) = reinterpret_cast<void**>(1);
    *reinterpret_cast<void***>(a1 + 8) = reinterpret_cast<void**>((eax19 & 0xffff) * reinterpret_cast<unsigned char>(a3));
    *reinterpret_cast<void***>(a1 + 16) = reinterpret_cast<void**>(0);
    return;
}

struct s40 {
    signed char[20] pad20;
    int32_t f20;
};

struct s42 {
    signed char[12] pad12;
    int32_t f12;
};

struct s41 {
    struct s42* f0;
    signed char[640] pad644;
    int32_t f644;
    signed char[60] pad708;
    signed char f708;
    signed char[1] pad710;
    signed char f710;
    signed char[5] pad716;
    int32_t f716;
};

struct s43 {
    signed char[16] pad16;
    int32_t f16;
};

struct s39 {
    struct s40* f0;
    signed char[8] pad12;
    struct s41* f12;
    signed char[12] pad28;
    struct s43** f28;
};

int32_t fun_18005370(struct s39* ecx, int32_t a2) {
    struct s42* eax3;
    struct s43* edx4;
    int32_t eax5;

    if (!ecx->f28 || (!ecx->f12->f708 || (!ecx->f12->f716 || (ecx->f12->f710 || !ecx->f12->f644)))) {
        return 0;
    } else {
        eax3 = ecx->f12->f0;
        eax3->f12();
        edx4 = *ecx->f28;
        eax5 = reinterpret_cast<int32_t>(edx4->f16());
        return eax5;
    }
}

struct s44 {
    void** f0;
    signed char[3] pad4;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

uint56_t g0;

struct s45 {
    signed char[8] pad8;
    int32_t f8;
    signed char[4] pad16;
    int32_t f16;
};

struct s45* g180344d8 = reinterpret_cast<struct s45*>(0x4a4e6fc1);

signed char fun_18004fc0(void** ecx, void** a2, struct s44* a3, void** a4, void** a5, void** a6, void** a7) {
    void** ecx8;
    int32_t eax9;
    int1_t less10;
    void** edx11;
    void** ecx12;
    struct s45* ecx13;
    struct s45* ecx14;

    ecx8 = *reinterpret_cast<void***>(a2);
    eax9 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(ecx8)());
    if (eax9 >= 0) {
        less10 = reinterpret_cast<signed char>(*reinterpret_cast<void***>(&g0)) < reinterpret_cast<signed char>(0);
        if (!less10) {
            edx11 = *reinterpret_cast<void***>(a2);
            *reinterpret_cast<void***>(edx11 + 16)();
        } else {
            ecx12 = *reinterpret_cast<void***>(a2);
            *reinterpret_cast<void***>(ecx12 + 16)();
            ecx13 = g180344d8;
            ecx13->f16(0x180344d8, 0x180344d8, 2, 0, 0, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 4 + 16, 4);
        }
        ecx14 = g180344d8;
        ecx14->f8();
        goto 0x180344d8;
    } else {
        goto 0x18034448;
    }
}

void fun_1800ca00(void** ecx, void** a2, void** a3);

void** g18038078 = reinterpret_cast<void**>(1);

void** g1803807c = reinterpret_cast<void**>(34);

void** g18038080 = reinterpret_cast<void**>(68);

void** g18038084 = reinterpret_cast<void**>(2);

void** g18038088 = reinterpret_cast<void**>(0);

int16_t fun_18004b80(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** edx6;
    void** ecx7;
    void** ecx8;
    void** ecx9;
    void** ecx10;
    void** cx11;
    void** eax12;

    fun_1800ca00(ecx, a2, a3);
    edx6 = ecx + 60;
    *reinterpret_cast<void***>(ecx + 52) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 56) = reinterpret_cast<void**>(0);
    ecx7 = g18038078;
    *reinterpret_cast<void***>(edx6) = ecx7;
    ecx8 = g1803807c;
    *reinterpret_cast<void***>(edx6 + 4) = ecx8;
    ecx9 = g18038080;
    *reinterpret_cast<void***>(edx6 + 8) = ecx9;
    ecx10 = g18038084;
    *reinterpret_cast<void***>(edx6 + 12) = ecx10;
    cx11 = g18038088;
    *reinterpret_cast<void***>(ecx + 84) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(edx6 + 16) = cx11;
    *reinterpret_cast<void***>(ecx + 88) = a5;
    *reinterpret_cast<void***>(ecx + 80) = a4;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034240);
    eax12 = ecx;
    return *reinterpret_cast<int16_t*>(&eax12);
}

void fun_18024950(void** ecx, void** a2) {
    void** edx3;

    *reinterpret_cast<void***>(ecx + 12) = a2;
    edx3 = *reinterpret_cast<void***>(a2);
    *reinterpret_cast<void***>(edx3 + 12)();
    goto a2;
}

void fun_1800ccb0(void** ecx) {
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x1803464c);
    return;
}

unsigned char fun_180056d0(void** ecx, void** a2) {
    unsigned char al3;
    void** ecx4;

    al3 = fun_1800c3e0(a2);
    if (al3) {
        if (*reinterpret_cast<void***>(ecx + 28)) {
            ecx4 = reinterpret_cast<void**>(0);
            *reinterpret_cast<int16_t*>(&ecx4) = *reinterpret_cast<int16_t*>(*reinterpret_cast<void***>(ecx + 28) + 22);
            if (*reinterpret_cast<void***>(a2 + 44) == ecx4) {
                return static_cast<unsigned char>(reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(a2 + 12) != *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 28) + 24)));
            } else {
                return 1;
            }
        } else {
            return 0;
        }
    } else {
        return al3;
    }
}

void fun_18009030(void** ecx, void** a2);

void fun_180053c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** eax7;
    void** esi8;
    void** edx9;
    void** v10;
    void** v11;
    void** v12;
    void** v13;
    void** v14;
    void** v15;
    void** ecx16;
    void** edx17;
    void** ecx18;
    int32_t v19;

    eax7 = *reinterpret_cast<void***>(ecx);
    *reinterpret_cast<void***>(eax7 + 8)(esi8);
    edx9 = reinterpret_cast<void**>(0);
    edx9 = *reinterpret_cast<void***>(a2 + 10);
    v10 = *reinterpret_cast<void***>(a2 + 12);
    fun_18027240(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 - 4 + 4 - 4 - 4 + 12, edx9, v10, 16, esi8, v11, v12, v13, v14, v15, __return_address(), a2, a3, a4, a5, a6);
    ecx16 = *reinterpret_cast<void***>(ecx + 28);
    edx17 = *reinterpret_cast<void***>(ecx16);
    *reinterpret_cast<void***>(edx17 + 4)();
    ecx18 = *reinterpret_cast<void***>(ecx + 12);
    if (ecx18) {
        fun_18009030(ecx18, esi8);
    }
    goto v19;
}

void fun_18009030(void** ecx, void** a2) {
    void** eax3;
    int32_t edi4;
    void** eax5;
    void** edi6;
    void** ecx7;

    if (*reinterpret_cast<void***>(ecx + 0x284) && *reinterpret_cast<void***>(ecx + 0x3f8)) {
        eax3 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x3f8));
        *reinterpret_cast<void***>(eax3 + 52)(edi4);
        eax5 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x284));
        edi6 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x3f8));
        *reinterpret_cast<void***>(eax5 + 32)(edi4);
        ecx7 = *reinterpret_cast<void***>(ecx + 0x3f8);
        *reinterpret_cast<void***>(edi6 + 48)(ecx7);
    }
    return;
}

struct s46 {
    signed char[16] pad16;
    int32_t f16;
};

struct s47 {
    signed char[8] pad8;
    int32_t f8;
    signed char[64] pad76;
    int32_t f76;
};

void fun_18005800(void** ecx) {
    void** eax2;
    void** ecx3;
    int32_t eax4;
    struct s46* v5;
    struct s47* ecx6;

    eax2 = *reinterpret_cast<void***>(ecx + 0x7c);
    if (eax2 && (*reinterpret_cast<void***>(ecx + 16) && (ecx3 = *reinterpret_cast<void***>(eax2), eax4 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(ecx3)(eax2, 0x18034448)), eax4 >= 0))) {
        if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 16) + 92)) & 4)) {
        }
        v5->f16(reinterpret_cast<int32_t>(__zero_stack_offset()) - 8 - 4 + 8, 0x180344e8);
        ecx6 = *reinterpret_cast<struct s47**>(reinterpret_cast<int32_t>(&g0) + 1);
        ecx6->f8(1, reinterpret_cast<int32_t>(__zero_stack_offset()) - 8 - 4 + 8, 0x180344e8);
    }
    return;
}

void fun_1800cfd0(void** a1, void** a2, void** a3) {
    unsigned char ah4;
    unsigned char ah5;
    unsigned char ah6;

    __asm__("fld dword [esp+0x4]");
    __asm__("fcomp dword [esp+0x8]");
    __asm__("fnstsw ax");
    if (ah4 & 65 || ah5 & 64) {
        __asm__("fld dword [0x18034238]");
        return;
    } else {
        __asm__("fld dword [esp+0xc]");
        __asm__("fcomp dword [0x18034238]");
        __asm__("fnstsw ax");
        if (!(ah6 & 64)) {
            __asm__("fld dword [esp+0x4]");
            __asm__("fsub dword [esp+0x8]");
            __asm__("fmul dword [esp+0xc]");
            __asm__("fadd dword [esp+0x8]");
            __asm__("fdivr dword [esp+0x8]");
            return;
        } else {
            __asm__("fld dword [esp+0x8]");
            __asm__("fdiv dword [esp+0x4]");
            return;
        }
    }
}

int16_t fun_18005770(void** ecx, void** a2) {
    void** v3;
    unsigned char ah4;
    unsigned char ah5;
    unsigned char ah6;
    unsigned char ah7;
    unsigned char ah8;
    unsigned char ah9;
    void** eax10;

    v3 = ecx;
    __asm__("fld dword [ebp+0x8]");
    __asm__("fcom dword [0x18034310]");
    __asm__("fnstsw ax");
    if (!(ah4 & 65)) {
        do {
            __asm__("fsub dword [0x1803423c]");
            __asm__("fcom dword [0x18034310]");
            __asm__("fnstsw ax");
        } while (!(ah5 & 65));
    }
    __asm__("fcom dword [0x1803430c]");
    __asm__("fnstsw ax");
    if (ah6 & 1) {
        do {
            __asm__("fadd dword [0x1803423c]");
            __asm__("fcom dword [0x1803430c]");
            __asm__("fnstsw ax");
        } while (ah7 & 1);
    }
    __asm__("fcom dword [0x18034308]");
    __asm__("fnstsw ax");
    if (ah8 & 65) {
        __asm__("fcom dword [0x18034304]");
        __asm__("fnstsw ax");
        if (ah9 & 1) {
            __asm__("fsubr dword [0x1803430c]");
        }
    } else {
        __asm__("fsubr dword [0x18034310]");
    }
    __asm__("fmul dword [0x18034300]");
    __asm__("fstp dword [ebp+0x8]");
    __asm__("fld dword [ebp+0x8]");
    __asm__("fistp dword [ebp-0x4]");
    eax10 = v3;
    return *reinterpret_cast<int16_t*>(&eax10);
}

struct s49 {
    signed char[16] pad16;
    int32_t f16;
};

struct s50 {
    signed char[8] pad8;
    void** f8;
};

struct s48 {
    struct s49* f0;
    signed char[712] pad716;
    int32_t f716;
    struct s50* f720;
};

signed char fun_180089b0(struct s48* ecx) {
    void** ecx2;
    unsigned char al3;

    if (!ecx->f716) {
        ecx2 = reinterpret_cast<void**>(0);
    } else {
        ecx2 = ecx->f720->f8;
    }
    if (!ecx2 || (al3 = fun_1800c3e0(ecx2), !!al3)) {
        return 0;
    } else {
        return 1;
    }
}

void fun_180274d0(void** ecx);

int16_t fun_1800bd00(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** ecx7;
    void** ecx8;
    void** al9;
    void** eax10;

    fun_180274d0(ecx);
    *reinterpret_cast<void***>(ecx + 0x198) = a2;
    *reinterpret_cast<void***>(ecx + 0x19c) = a3;
    *reinterpret_cast<void***>(ecx + 0x1a4) = a5;
    *reinterpret_cast<void***>(ecx + 0x1a0) = a4;
    *reinterpret_cast<void***>(ecx + 0x1a8) = a6;
    *reinterpret_cast<void***>(ecx + 0x1ac) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1b0) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1b4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1b8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1bc) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1c0) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1c4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1c8) = reinterpret_cast<void**>(0);
    ecx7 = ecx + 0x1cc;
    *reinterpret_cast<void***>(ecx + 0x1d4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1fc) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x200) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx7) = ecx7;
    *reinterpret_cast<void***>(ecx + 0x1d0) = ecx7;
    *reinterpret_cast<void***>(ecx + 0x204) = reinterpret_cast<void**>(0);
    ecx8 = ecx + 0x208;
    *reinterpret_cast<void***>(ecx + 0x210) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x238) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x23c) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx8) = ecx8;
    *reinterpret_cast<void***>(ecx + 0x20c) = ecx8;
    *reinterpret_cast<void***>(ecx + 0x240) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x241) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x244) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x248) = reinterpret_cast<void**>(0);
    al9 = *reinterpret_cast<void***>(ecx + 0x1a0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180345ec);
    if (reinterpret_cast<unsigned char>(al9) & 2) {
        *reinterpret_cast<void***>(ecx + 0x19c) = reinterpret_cast<void**>(0xffffffff);
    }
    eax10 = ecx;
    return *reinterpret_cast<int16_t*>(&eax10);
}

void fun_1800c760(struct s14* ecx, void** a2) {
    ecx->f0 = 2;
    ecx->f4 = a2;
    return;
}

int16_t fun_1800c060(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27) {
    void** v28;
    void** v29;
    void** v30;
    void** v31;
    void** v32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** esi39;
    int16_t ax40;

    fun_1800c650(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 44, a2);
    ax40 = fun_180090e0(ecx + 0x1c8, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, esi39, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27);
    return ax40;
}

struct s51 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

void fun_1800c7a0(struct s19* ecx, void** a2, ...) {
    struct s51* ecx3;

    ecx->f0 = 6;
    ecx3 = reinterpret_cast<struct s51*>(&ecx->f4);
    ecx3->f0 = *reinterpret_cast<void***>(a2);
    ecx3->f4 = *reinterpret_cast<void***>(a2 + 4);
    ecx3->f8 = *reinterpret_cast<void***>(a2 + 8);
    return;
}

void fun_1800c020(void** ecx, void** a2, void** a3, void** a4, void** a5);

int16_t fun_1800bef0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31) {
    void*** esp32;
    void** ecx33;
    void** edx34;
    void** v35;
    void** eax36;
    void** v37;
    void** v38;
    void*** esp39;
    void** v40;
    void** v41;
    void** edi42;
    void** esi43;
    void** v44;
    void** esp45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** ecx61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;

    esp32 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4);
    *reinterpret_cast<void***>(ecx + 0x1bc) = *reinterpret_cast<void***>(a2 + 8);
    *reinterpret_cast<void***>(ecx + 0x1c0) = *reinterpret_cast<void***>(a2 + 12);
    *reinterpret_cast<void***>(ecx + 0x1c4) = *reinterpret_cast<void***>(a2 + 16);
    if (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2)) > reinterpret_cast<unsigned char>(32)) {
        ecx33 = *reinterpret_cast<void***>(a2 + 28);
        edx34 = *reinterpret_cast<void***>(a2 + 24);
        v35 = *reinterpret_cast<void***>(a2 + 32);
        eax36 = *reinterpret_cast<void***>(a2 + 20);
        v37 = edx34;
        v38 = eax36;
        fun_1800c020(ecx, v38, v37, ecx33, v35);
        esp32 = esp32 - 4 - 4 - 4 - 4 - 4 + 16 + 4;
    }
    if (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2)) > reinterpret_cast<unsigned char>(36) && *reinterpret_cast<void***>(a2 + 36)) {
        esp39 = esp32 - 4;
        v40 = *reinterpret_cast<void***>(a2 + 36);
        *reinterpret_cast<signed char*>(&v41) = 0;
        fun_1800c8a0(esp39 + 12, v40, edi42, esi43, 0, v44);
        esp45 = reinterpret_cast<void**>(esp39 - 4 + 4 + 4 - 44);
        fun_1800c650(esp45, esp45 + 52);
        fun_180090e0(ecx + 0x1c8, v46, v47, v48, v49, v50, v51, 0x1800bf34, v38, v37, 0x1800bf54, v40, edi42, esi43, 0, v52, v53, v54, v55, v56, v57, v58, v59, v60, v41, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
        ecx61 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp45 - 4) - 4 + 4 + 4 - 4 + 44 + 4 + 8);
        fun_1800c670(ecx61, edi42, esi43, 0, v62, v63, v64, v65, v66, v67, v68, v69, v70, v41, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, ecx61);
    }
    return 0;
}

void** g18045880 = reinterpret_cast<void**>(0);

int16_t fun_1800bf90(void** ecx, void** a2);

int16_t fun_18006050(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25);

int16_t fun_18005f60(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19) {
    void** v20;
    void** eax21;
    void** v22;
    void** ebx23;
    void** ebx24;
    void** v25;
    void** ebp26;
    void** v27;
    void** esi28;
    void** esi29;
    void** v30;
    void** edi31;
    void** ebp32;
    uint32_t edx33;
    void** eax34;
    void** eax35;
    void** ecx36;
    void** edx37;
    void** edi38;
    void** eax39;
    void** edi40;
    void** ecx41;
    void** eax42;
    void** ecx43;

    v20 = reinterpret_cast<void**>(__return_address());
    eax21 = g18045880;
    v22 = ebx23;
    ebx24 = a2;
    v25 = ebp26;
    v27 = esi28;
    esi29 = ecx;
    v30 = edi31;
    ebp32 = reinterpret_cast<void**>(0);
    *reinterpret_cast<int16_t*>(&eax21) = fun_1800bf90(ebx24, eax21);
    if (!eax21) {
        edx33 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx24 + 0x1a0)) >> 3;
        if (!(*reinterpret_cast<unsigned char*>(&edx33) & 1)) {
            eax34 = *reinterpret_cast<void***>(esi29 + 24);
            if (eax34) {
                do {
                    eax35 = *reinterpret_cast<void***>(esi29 + 28);
                    ecx36 = *reinterpret_cast<void***>(eax35 + 8);
                    *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax35 + 4)) = *reinterpret_cast<void***>(eax35);
                    edx37 = *reinterpret_cast<void***>(eax35);
                    edi38 = *reinterpret_cast<void***>(eax35 + 4);
                    *reinterpret_cast<void***>(edx37 + 4) = edi38;
                    *reinterpret_cast<void***>(eax35) = *reinterpret_cast<void***>(esi29 + 40);
                    *reinterpret_cast<void***>(esi29 + 40) = eax35;
                    *reinterpret_cast<void***>(esi29 + 24) = *reinterpret_cast<void***>(esi29 + 24) - 1;
                    *reinterpret_cast<int16_t*>(&eax35) = fun_18006050(esi29, ecx36, v30, v27, v25, v22, v20, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
                    if (eax35) {
                        ebp32 = eax35;
                    }
                    eax34 = *reinterpret_cast<void***>(esi29 + 24);
                } while (eax34);
            }
            *reinterpret_cast<int16_t*>(&eax34) = fun_18006050(esi29, ebx24, v30, v27, v25, v22, v20, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
            if (eax34) {
                ebp32 = eax34;
            }
            fun_1800a220(esi29);
        } else {
            eax39 = *reinterpret_cast<void***>(esi29 + 40);
            edi40 = esi29 + 28;
            if (!eax39) {
                eax39 = fun_1802b2bb(ebx24, 12, v30, v27, v25, v22, v20, a2, a3);
            } else {
                *reinterpret_cast<void***>(esi29 + 40) = *reinterpret_cast<void***>(eax39);
            }
            if (eax39) {
                ecx41 = eax39 + 8;
                if (ecx41) {
                    *reinterpret_cast<void***>(ecx41) = ebx24;
                }
                *reinterpret_cast<void***>(eax39) = edi40;
                *reinterpret_cast<void***>(eax39 + 4) = *reinterpret_cast<void***>(edi40 + 4);
                *reinterpret_cast<void***>(*reinterpret_cast<void***>(edi40 + 4)) = eax39;
                *reinterpret_cast<void***>(edi40 + 4) = eax39;
                *reinterpret_cast<void***>(esi29 + 24) = *reinterpret_cast<void***>(esi29 + 24) + 1;
                return 0;
            }
        }
        eax42 = ebp32;
        return *reinterpret_cast<int16_t*>(&eax42);
    } else {
        ecx43 = *reinterpret_cast<void***>(ebx24);
        *reinterpret_cast<void***>(ecx43 + 8)();
        fun_18009260(ecx43, eax21, ebx24);
        goto v22;
    }
}

int16_t fun_180065f0(void** ecx, uint32_t a2, void** a3);

int16_t fun_18006530(void** ecx, uint32_t a2, void** a3);

void fun_1800c3b0(void** ecx, void** a2);

void fun_18007600(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30);

int16_t fun_18006050(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25) {
    void** eax26;
    void** eax27;
    void** edi28;
    void** eax29;
    void** ebp30;
    void** al31;
    void** ecx32;
    void** edi33;
    void** esi34;
    uint32_t ecx35;
    void** v36;

    eax26 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 0x1a0)) >> 1);
    if (!(*reinterpret_cast<unsigned char*>(&eax26) & 1)) {
        eax27 = *reinterpret_cast<void***>(a2 + 0x19c);
        *reinterpret_cast<int16_t*>(&eax27) = fun_18009c50(ecx, eax27);
        edi28 = eax27;
        if (!edi28) {
            eax29 = *reinterpret_cast<void***>(a2);
            *reinterpret_cast<void***>(eax29 + 8)(ecx);
            fun_18009260(ecx, 10, a2);
            goto ebp30;
        }
    } else {
        al31 = *reinterpret_cast<void***>(a2 + 0x1a0);
        if (!(reinterpret_cast<unsigned char>(al31) & 1)) {
            *reinterpret_cast<int16_t*>(&eax26) = fun_180065f0(ecx, 0x7fff0000, 0);
        } else {
            *reinterpret_cast<int16_t*>(&eax26) = fun_18006530(ecx, 0x7fff0000, 0);
        }
        edi28 = eax26;
        if (edi28) {
            *reinterpret_cast<void***>(a2 + 0x19c) = *reinterpret_cast<void***>(edi28 + 0x19c);
        } else {
            ecx32 = *reinterpret_cast<void***>(a2);
            *reinterpret_cast<void***>(ecx32 + 8)();
            fun_18009260(ecx32, 14, a2);
            goto ebp30;
        }
    }
    if (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 0x1a0)) & 1) {
        fun_18007520(edi28, edi33, esi34, ebp30, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
    }
    ecx35 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 0x1a0)) >> 1;
    if (*reinterpret_cast<unsigned char*>(&ecx35) & 1) {
        v36 = *reinterpret_cast<void***>(ecx + 44);
        fun_1800c3b0(a2, v36);
    }
    fun_18007600(edi28, a2, edi33, esi34, ebp30, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25);
    return 0;
}

int16_t fun_180063b0(uint32_t a1);

struct s52 {
    signed char[4] pad4;
    int32_t f4;
};

int16_t fun_18006580(void** ecx, void** a2, void** a3, uint32_t a4, void** a5, int32_t a6, struct s52* a7);

int16_t fun_18006530(void** ecx, uint32_t a2, void** a3) {
    int32_t eax4;
    void** ecx5;
    void** eax6;
    int16_t ax7;

    *reinterpret_cast<int16_t*>(&eax4) = fun_180063b0(a2);
    ecx5 = *reinterpret_cast<void***>(ecx + 12);
    eax6 = *reinterpret_cast<void***>(ecx + 8);
    ax7 = fun_18006580(ecx5, ecx5, eax6, a2, a3, eax4, reinterpret_cast<int32_t>(__zero_stack_offset()) - 16 - 4 - 4 - 4 - 4 + 4 + 4 + 8);
    return ax7;
}

int32_t PostMessageA = 0x35e28;

void fun_1800c3b0(void** ecx, void** a2) {
    void** eax3;
    void** ecx4;
    void** v5;

    eax3 = *reinterpret_cast<void***>(ecx + 0x1bc);
    if (eax3) {
        ecx4 = *reinterpret_cast<void***>(ecx + 0x19c);
        v5 = *reinterpret_cast<void***>(ecx + 0x1a4);
        PostMessageA(eax3, a2, ecx4, v5);
    }
    return;
}

signed char fun_1800c220(void** ecx, void** a2) {
    if (!a2 || *reinterpret_cast<void***>(ecx + 0x1a4) != a2) {
        return 0;
    } else {
        return 1;
    }
}

unsigned char fun_1800c5a0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11);

void fun_1800c5e0(void** ecx, void** a2);

void fun_1800a290(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8) {
    void** edi9;
    void** esi10;
    unsigned char al11;
    void** v12;
    void** ecx13;

    if (!*reinterpret_cast<signed char*>(&a3) || (al11 = fun_1800c5a0(a2, edi9, esi10, __return_address(), a2, a3, a4, a5, a6, a7, a8), !!al11)) {
        v12 = *reinterpret_cast<void***>(ecx + 48);
        fun_1800c5e0(a2, v12);
    }
    ecx13 = *reinterpret_cast<void***>(a2);
    *reinterpret_cast<void***>(ecx13 + 8)();
    goto esi10;
}

void fun_18006760(void** ecx) {
    void** v2;
    void** ebx3;
    void** ebx4;
    void** v5;
    void** ebp6;
    void** v7;
    void** esi8;
    void** al9;
    void** v10;
    void** edi11;
    void** v12;
    uint32_t eax13;
    void** eax14;
    void** ecx15;
    void** v16;
    void** ebp17;
    void** edi18;
    void** esi19;
    uint1_t less_or_equal20;
    void** ecx21;
    void** v22;
    void** ecx23;
    void** v24;
    void** edi25;
    void** ebx26;
    void** esi27;
    void** edx28;
    void** ecx29;
    uint32_t eax30;
    void** v31;
    void** eax32;
    void** v33;
    void** esi34;
    void** ecx35;
    void** eax36;
    void** ebx37;
    void** esi38;
    void** ecx39;
    void** esi40;
    void** ecx41;
    void** eax42;

    v2 = ebx3;
    ebx4 = ecx;
    v5 = ebp6;
    v7 = esi8;
    al9 = *reinterpret_cast<void***>(ebx4 + 76);
    v10 = edi11;
    v12 = ebx4;
    if (!al9 || ((eax13 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx4 + 80)) & 15, *reinterpret_cast<signed char*>(&eax13) == 15) || (!*reinterpret_cast<void***>(ebx4 + 2) || (eax14 = *reinterpret_cast<void***>(ebx4 + 52), *reinterpret_cast<void***>(ebx4 + 76) = reinterpret_cast<void**>(0), eax14 == 0)))) {
        addr_0x180069ab_2:
        return;
    } else {
        ecx15 = ebx4 + 0x118;
        v16 = ecx15;
        fun_18027410(ecx15);
        ebp17 = *reinterpret_cast<void***>(ebx4 + 20);
        edi18 = ebp17;
        esi19 = reinterpret_cast<void**>(0);
        less_or_equal20 = reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(ebx4 + 8)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(ebx4 + 8) == 0));
        if (less_or_equal20) 
            goto addr_0x18006999_4;
        while (1) {
            ecx21 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx4 + 12) + reinterpret_cast<unsigned char>(esi19) * 4);
            if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx21 + 0x288) == 0x7fff0000)) 
                goto addr_0x18006821_6;
            if (*reinterpret_cast<void***>(ecx21 + 0x1ac)) 
                goto addr_0x18006821_6;
            if (!*reinterpret_cast<void***>(ecx21 + 0x2c4)) {
                addr_0x18006806_9:
                if (*reinterpret_cast<void***>(ecx21 + 0x2cc)) {
                    addr_0x18006821_6:
                    ++esi19;
                    if (reinterpret_cast<signed char>(esi19) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(ebx4 + 8))) 
                        continue; else 
                        break;
                } else {
                    addr_0x18006810_10:
                    if (*reinterpret_cast<void***>(ecx21 + 0x284)) {
                        fun_18007240(ecx21, 0);
                        goto addr_0x18006821_6;
                    }
                }
            } else {
                if (!*reinterpret_cast<void***>(ecx21 + 0x2cc)) 
                    goto addr_0x18006810_10;
                if (*reinterpret_cast<void***>(ecx21 + 0x2c6)) 
                    goto addr_0x18006806_9;
            }
            *reinterpret_cast<void***>(edi18) = ecx21;
            edi18 = edi18 + 4;
            goto addr_0x18006821_6;
        }
        v22 = edi18;
        if (edi18 == ebp17) 
            goto addr_0x18006999_4;
        ecx23 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi18) - reinterpret_cast<unsigned char>(ebp17));
        v24 = ecx23;
        if (reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ecx23) & 0xfffffffc) > reinterpret_cast<int32_t>(4)) 
            goto addr_0x1800684b_17;
    }
    addr_0x18006900_18:
    edi25 = edi18 + 0xfffffffc;
    if (edi25 != ebp17) {
        do {
            if (*reinterpret_cast<void***>(*reinterpret_cast<void***>(edi25) + 0x284)) 
                break;
            edi25 = edi25 - 4;
        } while (edi25 != ebp17);
    }
    while (1) {
        ebx26 = *reinterpret_cast<void***>(ebp17);
        if (*reinterpret_cast<void***>(ebx26 + 0x284) || ((fun_18007240(ebx26, 1), !!*reinterpret_cast<void***>(ebx26 + 0x284)) || (esi27 = edi25, reinterpret_cast<unsigned char>(edi25) <= reinterpret_cast<unsigned char>(ebp17)))) {
            addr_0x1800698e_22:
            ebp17 = ebp17 + 4;
            if (ebp17 != v22) 
                continue; else 
                goto addr_0x18006999_4;
        } else {
            edx28 = *reinterpret_cast<void***>(ebx26 + 0x288);
            while ((ecx29 = *reinterpret_cast<void***>(esi27), eax30 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx29 + 0x1a8)) & reinterpret_cast<unsigned char>(edx28), (eax30 & 0xff0000) == 0) || !(eax30 & 0x7f000000)) {
                esi27 = esi27 - 4;
                if (reinterpret_cast<unsigned char>(esi27) <= reinterpret_cast<unsigned char>(ebp17)) 
                    goto addr_0x1800698e_22;
            }
        }
        fun_18007240(ecx29, 0);
        fun_18007240(ebx26, 1);
        if (esi27 == edi25) {
            do {
                if (*reinterpret_cast<void***>(*reinterpret_cast<void***>(edi25) + 0x284)) 
                    goto addr_0x1800698e_22;
                edi25 = edi25 - 4;
            } while (reinterpret_cast<unsigned char>(edi25) > reinterpret_cast<unsigned char>(ebp17));
            goto addr_0x1800698e_22;
        }
    }
    addr_0x1800684b_17:
    switch (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx4 + 80)) & 15) {
        addr_0x18006999_4:
    default:
        fun_18027460(v16, v10, v7, v5, v2, v31);
        fun_18027490(v16);
        goto addr_0x180069ab_2;
    case 0:
        v31 = reinterpret_cast<void**>(fun_180069d0);
        eax32 = reinterpret_cast<void**>(timeGetTime());
        v33 = eax32;
        esi34 = ebp17;
        do {
            ecx35 = *reinterpret_cast<void***>(esi34);
            fun_180088a0(ecx35, v33, v10, v7, v5, v2);
            esi34 = esi34 + 4;
        } while (esi34 != edi18);
        ecx23 = v24;
        break;
    case 1:
        v31 = reinterpret_cast<void**>(fun_18006a30);
        eax36 = reinterpret_cast<void**>(timeGetTime());
        ebx37 = eax36;
        esi38 = ebp17;
        do {
            ecx39 = *reinterpret_cast<void***>(esi38);
            fun_180088a0(ecx39, ebx37, v10, v7, v5, v2);
            esi38 = esi38 + 4;
        } while (esi38 != edi18);
        ebx4 = v12;
        ecx23 = v24;
        break;
    case 2:
        v31 = reinterpret_cast<void**>(fun_18006ab0);
        break;
    case 3:
        v31 = reinterpret_cast<void**>(fun_18006b40);
        esi40 = ebp17;
        do {
            ecx41 = *reinterpret_cast<void***>(esi40);
            fun_18008460(ecx41, v10, v7, v5, v2, fun_18006b40, v24);
            esi40 = esi40 + 4;
        } while (esi40 != edi18);
        ecx23 = v24;
        break;
    case 4:
        v31 = reinterpret_cast<void**>(fun_18006bb0);
    }
    eax42 = *reinterpret_cast<void***>(ebx4 + 20);
    fun_1802b324(eax42, reinterpret_cast<signed char>(ecx23) >> 2, 4, v31);
    goto addr_0x18006900_18;
}

void fun_18027410(void** ecx) {
    void** eax2;

    if (*reinterpret_cast<void***>(ecx + 24)) {
        eax2 = reinterpret_cast<void**>(*reinterpret_cast<void***>(ecx + 20)());
        *reinterpret_cast<void***>(ecx + 32) = eax2;
        *reinterpret_cast<void***>(ecx + 36) = eax2;
        *reinterpret_cast<void***>(ecx) = *reinterpret_cast<void***>(ecx) + 1;
    }
    return;
}

void fun_18027460(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** eax7;
    void** edx8;

    if (*reinterpret_cast<void***>(ecx + 24)) {
        eax7 = reinterpret_cast<void**>(*reinterpret_cast<void***>(ecx + 20)());
        edx8 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 4)) + (reinterpret_cast<unsigned char>(eax7) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 36))));
        *reinterpret_cast<void***>(ecx + 36) = eax7;
        *reinterpret_cast<void***>(ecx + 4) = edx8;
    }
    return;
}

void fun_18027490(void** ecx) {
    void** eax2;
    void** edx3;
    void** ecx4;

    if (*reinterpret_cast<void***>(ecx + 24)) {
        eax2 = reinterpret_cast<void**>(*reinterpret_cast<void***>(ecx + 20)());
        edx3 = *reinterpret_cast<void***>(ecx + 32);
        ecx4 = *reinterpret_cast<void***>(ecx + 12);
        *reinterpret_cast<void***>(ecx + 36) = eax2;
        *reinterpret_cast<void***>(ecx + 12) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx4) + (reinterpret_cast<unsigned char>(eax2) - reinterpret_cast<unsigned char>(edx3)));
    }
    return;
}

void** fun_1802b500(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** edi6;
    uint32_t ecx7;
    int32_t ecx8;
    void** edi9;
    void** al10;
    void** edi11;
    void** eax12;

    edi6 = a2;
    ecx7 = 0xffffffff;
    do {
        if (!ecx7) 
            break;
        --ecx7;
        ++edi6;
    } while (*reinterpret_cast<void***>(edi6));
    ecx8 = reinterpret_cast<int32_t>(-(ecx7 + 1));
    edi9 = edi6 - 1;
    al10 = a3;
    do {
        if (!ecx8) 
            break;
        --ecx8;
        --edi9;
    } while (*reinterpret_cast<void***>(edi9) != al10);
    edi11 = edi9 + 1;
    if (*reinterpret_cast<void***>(edi11) == al10) {
        eax12 = edi11;
    } else {
        eax12 = reinterpret_cast<void**>(0);
    }
    return eax12;
}

void** fun_1802b530(void** ecx, void** a2, void** a3, void* a4, void** a5) {
    void* ecx6;
    void* ebx7;
    void** esi8;
    void** edi9;
    uint32_t ecx10;
    void** eax11;
    uint32_t ecx12;
    void** edx13;

    ecx6 = a4;
    if (!ecx6) {
        addr_0x1802b5b3_2:
        return a2;
    } else {
        ebx7 = ecx6;
        esi8 = a3;
        edi9 = a2;
        if (!(reinterpret_cast<unsigned char>(esi8) & 3)) {
            ecx10 = reinterpret_cast<uint32_t>(ecx6) >> 2;
            if (!ecx10) {
                goto addr_0x1802b575_6;
            }
        }
        do {
            eax11 = *reinterpret_cast<void***>(esi8);
            ++esi8;
            *reinterpret_cast<void***>(edi9) = eax11;
            ++edi9;
            ecx6 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx6) - 1);
            if (!ecx6) 
                goto addr_0x1802b582_8;
            if (!eax11) 
                break;
        } while (reinterpret_cast<unsigned char>(esi8) & 3);
        goto addr_0x1802b569_11;
    }
    if (reinterpret_cast<unsigned char>(edi9) & 3) {
        do {
            *reinterpret_cast<void***>(edi9) = eax11;
            ++edi9;
            ecx6 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx6) - 1);
            if (!ecx6) 
                goto addr_0x1802b626_14;
        } while (reinterpret_cast<unsigned char>(edi9) & 3);
    }
    ebx7 = ecx6;
    ecx12 = reinterpret_cast<uint32_t>(ecx6) >> 2;
    if (ecx12) 
        goto addr_0x1802b617_17; else 
        goto addr_0x1802b5ab_18;
    addr_0x1802b569_11:
    ebx7 = ecx6;
    ecx10 = reinterpret_cast<uint32_t>(ecx6) >> 2;
    if (ecx10) {
        do {
            edx13 = *reinterpret_cast<void***>(esi8);
            esi8 = esi8 + 4;
            if ((reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi8)) ^ 0xffffffff ^ reinterpret_cast<uint32_t>(*reinterpret_cast<void***>(esi8) + 0x7efefeff)) & 0x81010100) {
                if (!*reinterpret_cast<signed char*>(&edx13)) 
                    break;
                if (!*reinterpret_cast<signed char*>(&edx13 + 1)) 
                    goto addr_0x1802b601_22;
                if (!(reinterpret_cast<unsigned char>(edx13) & 0xff0000)) 
                    goto addr_0x1802b5f7_24;
                if (!(reinterpret_cast<unsigned char>(edx13) & 0xff000000)) 
                    goto addr_0x1802b5f3_26;
            }
            *reinterpret_cast<void***>(edi9) = edx13;
            edi9 = edi9 + 4;
            --ecx10;
        } while (ecx10);
        goto addr_0x1802b570_28;
    } else {
        addr_0x1802b570_28:
        ebx7 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebx7) & 3);
        if (!ebx7) {
            addr_0x1802b582_8:
            return a2;
        } else {
            do {
                addr_0x1802b575_6:
                eax11 = *reinterpret_cast<void***>(esi8);
                ++esi8;
                *reinterpret_cast<void***>(edi9) = eax11;
                ++edi9;
                if (!eax11) 
                    goto addr_0x1802b5ae_29;
                ebx7 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebx7) - 1);
            } while (ebx7);
            goto addr_0x1802b582_8;
        }
    }
    *reinterpret_cast<void***>(edi9) = reinterpret_cast<void**>(0);
    addr_0x1802b60f_32:
    edi9 = edi9 + 4;
    eax11 = reinterpret_cast<void**>(0);
    ecx12 = ecx10 - 1;
    if (!ecx12) {
        addr_0x1802b621_33:
        ebx7 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebx7) & 3);
        if (ebx7) {
            do {
                addr_0x1802b5ab_18:
                *reinterpret_cast<void***>(edi9) = eax11;
                ++edi9;
                addr_0x1802b5ae_29:
                ebx7 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebx7) - 1);
            } while (ebx7);
        } else {
            addr_0x1802b626_14:
            return a2;
        }
    } else {
        addr_0x1802b617_17:
        eax11 = reinterpret_cast<void**>(0);
        goto addr_0x1802b619_34;
    }
    goto addr_0x1802b5b3_2;
    do {
        addr_0x1802b619_34:
        *reinterpret_cast<void***>(edi9) = reinterpret_cast<void**>(0);
        edi9 = edi9 + 4;
        --ecx12;
    } while (ecx12);
    goto addr_0x1802b621_33;
    addr_0x1802b601_22:
    *reinterpret_cast<void***>(edi9) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx13) & 0xff);
    goto addr_0x1802b60f_32;
    addr_0x1802b5f7_24:
    *reinterpret_cast<void***>(edi9) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx13) & 0xffff);
    goto addr_0x1802b60f_32;
    addr_0x1802b5f3_26:
    *reinterpret_cast<void***>(edi9) = edx13;
    goto addr_0x1802b60f_32;
}

int32_t GetModuleFileNameA = 0x35ede;

int32_t lstrcpyA = 0x35ed2;

int32_t lstrcatA = 0x35ec6;

int32_t OpenFile = 0x35eba;

int16_t fun_18006c80(void** ecx, void** a2, void** a3) {
    void** edi4;
    void** ebx5;
    int32_t eax6;
    int32_t ebp7;
    void** v8;
    void** eax9;
    void** edi10;
    int32_t v11;
    int32_t eax12;
    void** ecx13;
    int32_t v14;

    edi4 = ecx + 0x108;
    ebx5 = ecx + 4;
    *reinterpret_cast<void***>(ecx + 0x20c) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034514);
    *reinterpret_cast<void***>(ebx5) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(edi4) = reinterpret_cast<void**>(0);
    eax6 = reinterpret_cast<int32_t>(GetModuleFileNameA());
    if (eax6 && (ebp7 = lstrcpyA, v8 = ebx5, ebp7(v8, edi4), eax9 = fun_1802b500(ecx, ebx5, 92, v8, edi4), !!eax9)) {
        edi10 = eax9 + 1;
        ebp7(edi10, v11, v8, edi4);
        lstrcatA(edi10, ".ini", edi10, v11, v8, edi4);
        *reinterpret_cast<signed char*>(&v8) = 0x88;
        eax12 = reinterpret_cast<int32_t>(OpenFile(ebx5, reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x88 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 + 4 + 8 - 4 - 4 - 4 + 4 - 4 - 4 - 4 + 4 + 16, 0x4000, edi10, ".ini", edi10, v11, v8, edi4));
        ecx13 = reinterpret_cast<void**>(0);
        *reinterpret_cast<unsigned char*>(&ecx13) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(eax12 != -1));
        *reinterpret_cast<void***>(ecx + 0x20c) = ecx13;
    }
    goto v14;
}

void fun_1800ae80(struct s28* ecx) {
    ecx->f36 = reinterpret_cast<void**>(0);
    ecx->f40 = 0x3f000000;
    ecx->f44 = 0x3dcccccd;
    ecx->f8 = reinterpret_cast<void**>(0);
    ecx->f4 = reinterpret_cast<void**>(0);
    ecx->f0 = reinterpret_cast<void**>(0);
    ecx->f20 = reinterpret_cast<void**>(0);
    ecx->f16 = reinterpret_cast<void**>(0);
    ecx->f12 = reinterpret_cast<void**>(0);
    ecx->f32 = reinterpret_cast<void**>(0);
    ecx->f28 = reinterpret_cast<void**>(0);
    ecx->f24 = reinterpret_cast<void**>(0);
    return;
}

int16_t fun_18009200(void*** ecx, void*** a2, int32_t a3) {
    void** edx4;
    void*** eax5;

    edx4 = *ecx;
    *ecx = *reinterpret_cast<void***>(edx4);
    eax5 = a2;
    *eax5 = edx4;
    return *reinterpret_cast<int16_t*>(&eax5);
}

struct s53 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[7] pad12;
    void** f12;
    signed char[43] pad56;
    void** f56;
};

void fun_18009170(struct s53* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42) {
    void** edi43;
    void** esi44;

    *reinterpret_cast<void***>(*reinterpret_cast<void***>(a3 + 4)) = *reinterpret_cast<void***>(a3);
    *reinterpret_cast<void***>(*reinterpret_cast<void***>(a3) + 4) = *reinterpret_cast<void***>(a3 + 4);
    fun_1800c670(a3 + 8, edi43, esi44, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    *reinterpret_cast<void***>(a3) = ecx->f56;
    ecx->f56 = a3;
    ecx->f0 = ecx->f0 - 1;
    *reinterpret_cast<void***>(a2) = a3;
    return;
}

void fun_18009150(void*** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** v45;
    void** v46;
    void** esi47;
    void*** esi48;
    void** eax49;
    void** ecx50;

    v45 = reinterpret_cast<void**>(__return_address());
    v46 = esi47;
    esi48 = ecx;
    eax49 = *esi48;
    if (eax49) {
        do {
            ecx50 = *reinterpret_cast<void***>(eax49);
            *esi48 = ecx50;
            fun_1802b2b0(ecx50, eax49, v46, v45, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
            eax49 = *esi48;
        } while (eax49);
    }
    return;
}

void fun_180091b0(void** ecx, void*** a2, void** a3) {
    *reinterpret_cast<void***>(*reinterpret_cast<void***>(a3 + 4)) = *reinterpret_cast<void***>(a3);
    *reinterpret_cast<void***>(*reinterpret_cast<void***>(a3) + 4) = *reinterpret_cast<void***>(a3 + 4);
    *reinterpret_cast<void***>(a3) = *reinterpret_cast<void***>(ecx + 16);
    *reinterpret_cast<void***>(ecx + 16) = a3;
    *reinterpret_cast<void***>(ecx) = *reinterpret_cast<void***>(ecx) - 1;
    *a2 = a3;
    return;
}

void fun_180275f0(void** ecx) {
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180351f4);
    return;
}

struct s54 {
    signed char[18] pad18;
    void** f18;
};

int16_t fun_18027290(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** esi6;
    int32_t eax7;
    void** edi8;
    void** esi9;
    void** eax10;
    void** edx11;
    struct s54* edi12;
    void** edi13;
    void** edi14;
    void** edx15;
    uint32_t ecx16;
    uint32_t ecx17;

    esi6 = a2;
    if (esi6) {
        eax7 = 0;
        *reinterpret_cast<void***>(&eax7) = *reinterpret_cast<void***>(esi6);
        if (eax7 == 1 || eax7 == 3) {
            eax10 = fun_1802b2bb(ecx, 18, edi8, esi9, __return_address(), a2, a3, a4, a5);
            if (eax10) {
                *reinterpret_cast<void***>(eax10) = *reinterpret_cast<void***>(esi6);
                *reinterpret_cast<void***>(eax10 + 4) = *reinterpret_cast<void***>(esi6 + 4);
                *reinterpret_cast<void***>(eax10 + 8) = *reinterpret_cast<void***>(esi6 + 8);
                edx11 = *reinterpret_cast<void***>(esi6 + 12);
                *reinterpret_cast<void***>(eax10 + 16) = reinterpret_cast<void**>(0);
                *reinterpret_cast<void***>(eax10 + 12) = edx11;
            }
        } else {
            edi12 = reinterpret_cast<struct s54*>(0);
            *reinterpret_cast<void***>(&edi12) = *reinterpret_cast<void***>(esi6 + 16);
            edi13 = reinterpret_cast<void**>(&edi12->f18);
            eax10 = fun_1802b2bb(ecx, edi13, edi8, esi9, __return_address(), a2, a3, a4, a5);
            if (eax10) {
                edi14 = eax10;
                edx15 = edi13;
                ecx16 = reinterpret_cast<unsigned char>(edi13) >> 2;
                while (ecx16) {
                    --ecx16;
                    *reinterpret_cast<void***>(edi14) = *reinterpret_cast<void***>(esi6);
                    edi14 = edi14 + 4;
                    esi6 = esi6 + 4;
                }
                ecx17 = reinterpret_cast<unsigned char>(edx15) & 3;
                while (ecx17) {
                    --ecx17;
                    *reinterpret_cast<void***>(edi14) = *reinterpret_cast<void***>(esi6);
                    ++edi14;
                    ++esi6;
                }
                return *reinterpret_cast<int16_t*>(&eax10);
            }
        }
        return *reinterpret_cast<int16_t*>(&eax10);
    } else {
        return 0;
    }
}

int16_t fun_18009ea0(void** ecx, void** a2, void** a3) {
    void** ecx4;
    void** eax5;
    int32_t eax6;
    void** eax7;
    void** edx8;

    ecx4 = *reinterpret_cast<void***>(ecx + 0x110);
    if ((!ecx4 || (!(reinterpret_cast<unsigned char>(a2) & 0x20000) || (eax5 = *reinterpret_cast<void***>(ecx4), eax6 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(eax5 + 4)(reinterpret_cast<unsigned char>(a2) & 0xfff3ffff | 0x20000, a3)), !eax6))) && ((!*reinterpret_cast<void***>(ecx + 0x10c) || (!(reinterpret_cast<unsigned char>(a2) & 0x10000) || (eax7 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x10c)), eax6 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(eax7 + 4)(a2, a3)), !eax6))) && (!*reinterpret_cast<void***>(ecx + 0x110) || (!(reinterpret_cast<unsigned char>(a2) & 0xc0000) || (edx8 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x110)), eax6 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(edx8 + 4)(reinterpret_cast<unsigned char>(a2) & 0xfffdffff, a3)), !eax6))))) {
        eax6 = 0;
    }
    return *reinterpret_cast<int16_t*>(&eax6);
}

unsigned char fun_1800c3e0(void** ecx) {
    void** eax2;

    if (*reinterpret_cast<void***>(ecx + 0x240)) {
        if (!*reinterpret_cast<void***>(ecx + 0x241)) {
            eax2 = *reinterpret_cast<void***>(ecx);
            *reinterpret_cast<void***>(eax2 + 12)();
        }
        return 1;
    } else {
        return 0;
    }
}

void fun_1800c000(void** ecx, void** a2) {
    int1_t less_or_equal3;

    less_or_equal3 = reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 0x244)) <= reinterpret_cast<signed char>(a2);
    *reinterpret_cast<void***>(ecx + 0x1a8) = a2;
    if (!less_or_equal3) {
        *reinterpret_cast<void***>(ecx + 0x244) = a2;
    }
    return;
}

void fun_18007730(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30) {
    void** v31;
    void** v32;
    void** esi33;
    void** esi34;
    void*** esp35;
    void** v36;
    void** edi37;
    void** ecx38;
    void** v39;
    void** edx40;
    void** v41;
    void** ecx42;
    void** v43;
    void** edx44;
    void** v45;
    void** ecx46;
    void** v47;
    void** edx48;
    void** v49;
    void** v50;
    void** ebx51;
    void*** esp52;
    void** v53;
    void** ebp54;
    void** ebp55;
    void** edi56;
    void** ebx57;
    void** eax58;
    void** ecx59;
    void** v60;
    void* esp61;
    void** v62;
    void** edi63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** v74;
    void** v75;
    void* esp76;
    void** edx77;
    void** v78;
    void** v79;
    void** v80;
    void** v81;
    void** v82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    signed char v89;
    void* esp90;
    void** v91;
    void** v92;
    void** v93;
    void** v94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** edx103;

    v31 = reinterpret_cast<void**>(__return_address());
    v32 = esi33;
    esi34 = ecx;
    esp35 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 48 - 4 - 4);
    v36 = edi37;
    if ((*reinterpret_cast<struct s11**>(esi34 + 0x2d0))->f8 == a2) {
        if (*reinterpret_cast<void***>(esi34 + 0x3e4)) {
            ecx38 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi34 + 0x3e4));
            v39 = *reinterpret_cast<void***>(esi34 + 0x3e4);
            *reinterpret_cast<void***>(ecx38 + 8)(v39);
            esp35 = esp35 - 4 - 4 + 4;
            *reinterpret_cast<void***>(esi34 + 0x3e4) = reinterpret_cast<void**>(0);
        }
        if (*reinterpret_cast<void***>(esi34 + 0x3e8)) {
            edx40 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi34 + 0x3e8));
            v41 = *reinterpret_cast<void***>(esi34 + 0x3e8);
            *reinterpret_cast<void***>(edx40 + 8)(v41);
            esp35 = esp35 - 4 - 4 + 4;
            *reinterpret_cast<void***>(esi34 + 0x3e8) = reinterpret_cast<void**>(0);
        }
        if (*reinterpret_cast<void***>(esi34 + 0x3ec)) {
            ecx42 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi34 + 0x3ec));
            v43 = *reinterpret_cast<void***>(esi34 + 0x3ec);
            *reinterpret_cast<void***>(ecx42 + 8)(v43);
            esp35 = esp35 - 4 - 4 + 4;
            *reinterpret_cast<void***>(esi34 + 0x3ec) = reinterpret_cast<void**>(0);
        }
        if (*reinterpret_cast<void***>(esi34 + 0x3f0)) {
            edx44 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi34 + 0x3f0));
            v45 = *reinterpret_cast<void***>(esi34 + 0x3f0);
            *reinterpret_cast<void***>(edx44 + 8)(v45);
            esp35 = esp35 - 4 - 4 + 4;
            *reinterpret_cast<void***>(esi34 + 0x3f0) = reinterpret_cast<void**>(0);
        }
        if (*reinterpret_cast<void***>(esi34 + 0x3f4)) {
            ecx46 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi34 + 0x3f4));
            v47 = *reinterpret_cast<void***>(esi34 + 0x3f4);
            *reinterpret_cast<void***>(ecx46 + 8)(v47);
            esp35 = esp35 - 4 - 4 + 4;
            *reinterpret_cast<void***>(esi34 + 0x3f4) = reinterpret_cast<void**>(0);
        }
        if (*reinterpret_cast<void***>(esi34 + 0x3f8)) {
            edx48 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi34 + 0x3f8));
            v49 = *reinterpret_cast<void***>(esi34 + 0x3f8);
            *reinterpret_cast<void***>(edx48 + 8)(v49);
            esp35 = esp35 - 4 - 4 + 4;
            *reinterpret_cast<void***>(esi34 + 0x3f8) = reinterpret_cast<void**>(0);
        }
        *reinterpret_cast<void***>(esi34 + 0x3fc) = reinterpret_cast<void**>(0);
    }
    v50 = ebx51;
    esp52 = esp35 - 4 - 4;
    v53 = ebp54;
    ebp55 = esi34 + 0x2cc;
    edi56 = *reinterpret_cast<void***>(ebp55 + 4);
    ebx57 = ebp55 + 4;
    if (edi56 != ebx57) {
        do {
            if (*reinterpret_cast<void***>(edi56 + 8) != a2) {
                edi56 = *reinterpret_cast<void***>(edi56);
            } else {
                eax58 = edi56;
                edi56 = *reinterpret_cast<void***>(edi56);
                fun_180091b0(ebp55, esp52 + 16, eax58);
                esp52 = esp52 - 4 - 4 - 4 + 8 + 4;
            }
        } while (edi56 != ebx57);
    }
    ecx59 = *reinterpret_cast<void***>(esi34 + 0x198);
    fun_1800a290(ecx59, a2, a3, v53, v50, v36, v32, v60);
    esp61 = reinterpret_cast<void*>(esp52 - 4 - 4 - 4 + 8 + 4 + 4 + 4);
    if (*reinterpret_cast<void***>(esi34 + 0x358)) {
        do {
            v62 = *reinterpret_cast<void***>(esi34 + 0x35c) + 8;
            fun_1800c650(reinterpret_cast<int32_t>(esp61) + 12, v62);
            edi63 = *reinterpret_cast<void***>(esi34 + 0x35c);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(edi63 + 4)) = *reinterpret_cast<void***>(edi63);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(edi63) + 4) = *reinterpret_cast<void***>(edi63 + 4);
            fun_1800c670(edi63 + 8, v36, v32, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v31, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30);
            esp76 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp61) - 4 - 4 + 4 + 4 - 4 + 4);
            *reinterpret_cast<void***>(edi63) = *reinterpret_cast<void***>(esi34 + 0x390);
            *reinterpret_cast<void***>(esi34 + 0x390) = edi63;
            edx77 = *reinterpret_cast<void***>(esi34 + 0x358);
            *reinterpret_cast<void***>(esi34 + 0x358) = edx77 - 1;
            fun_18007a20(esi34, reinterpret_cast<int32_t>(esp76) + 12, v36, v32, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89);
            esp90 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp76) - 4 - 4 + 4 + 4);
            fun_1800c670(reinterpret_cast<int32_t>(esp90) + 12, v36, v32, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v31, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30);
            esp61 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp90) - 4 + 4);
        } while (*reinterpret_cast<void***>(esi34 + 0x358));
    }
    *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi34 + 0x198) + 76) = reinterpret_cast<void**>(1);
    edx103 = *reinterpret_cast<void***>(esi34);
    *reinterpret_cast<void***>(edx103 + 28)(esi34);
    return;
}

signed char fun_1800ce10(void** ecx, void** a2);

signed char fun_1800c240(void** ecx, void** a2) {
    void** ecx3;
    signed char al4;

    ecx3 = *reinterpret_cast<void***>(ecx + 0x1a4);
    al4 = fun_1800ce10(ecx3, a2);
    return al4;
}

void fun_1800c6a0(void** ecx, void** a2, void** a3);

int16_t fun_1800c650(void** ecx, void** a2) {
    void** esi3;
    void** eax4;

    fun_1800c6a0(ecx, a2, esi3);
    eax4 = ecx;
    return *reinterpret_cast<int16_t*>(&eax4);
}

int16_t fun_18007a00(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_1800c670(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_1800c090(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27) {
    void** v28;
    void** v29;
    void** v30;
    void** v31;
    void** v32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** esi39;
    int16_t ax40;

    fun_1800c650(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 44, a2);
    ax40 = fun_180090e0(ecx + 0x204, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, esi39, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27);
    return ax40;
}

int16_t fun_18008fc0(void** ecx, signed char a2);

int16_t fun_18008fa0(void** ecx, void** a2);

int16_t fun_1800aeb0(struct s28* ecx, void** a2, signed char a3);

void fun_1800aef0(struct s28* ecx, void** a2);

struct s55 {
    int32_t f0;
    void** f4;
};

void fun_1800c800(struct s55* ecx, void** a2);

int16_t fun_180089e0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60);

int16_t fun_18007a20(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, signed char a16, ...) {
    void** v16;
    void** v17;
    void** v18;
    void** ebp19;
    void** v20;
    void** ebx21;
    void** v22;
    void** esi23;
    void** esi24;
    void** v25;
    void** edi26;
    void** ebx27;
    void** eax28;
    void** v29;
    void** eax30;
    uint32_t eax31;
    void** v32;
    struct s20* ecx33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    int32_t v44;
    int32_t v45;
    int32_t v46;
    int32_t v47;
    int32_t v48;
    int32_t v49;
    int32_t v50;
    int32_t v51;
    int32_t v52;
    void** ecx53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** v74;
    void** ecx75;
    struct s20* ecx76;
    void** v77;
    void** v78;
    void** v79;
    void** v80;
    void** v81;
    void** v82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** ecx87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** v92;
    void** v93;
    void** v94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** v103;
    void** v104;
    void** v105;
    void** v106;
    void** v107;
    void** v108;
    void** v109;
    void** v110;
    void** ecx111;
    void** al112;
    void** eax113;
    void** v114;
    void** ecx115;
    void** ecx116;
    void** ecx117;
    void** edx118;
    void** v119;
    void** edx120;
    void** edx121;
    void** ecx122;
    void** ecx123;
    void** ecx124;
    void** edi125;
    void** v126;
    void** v127;
    void** v128;
    void** v129;
    void** v130;
    void** v131;
    void** v132;
    void** v133;
    void** v134;
    void** v135;
    void** v136;
    void** v137;
    void** v138;
    void** v139;
    void** v140;
    void** v141;
    void** v142;
    void** v143;
    void** v144;
    void** v145;
    void** v146;
    void** v147;
    void** v148;
    void** v149;
    void** v150;
    void** v151;
    void** v152;
    void** v153;
    void** ecx154;
    void** edx155;
    void** v156;
    void** v157;
    void** v158;
    void** v159;
    void** v160;
    void** v161;
    void** v162;
    void** v163;
    void** v164;
    void** v165;
    void** edx166;
    void** eax167;
    void** v168;
    void** v169;
    void** v170;
    void** v171;
    void** v172;
    void** v173;
    void** v174;
    void** v175;
    void** v176;
    void** v177;
    void** v178;
    void** v179;
    void** v180;
    void** v181;
    void** v182;
    void** v183;
    void** v184;
    void** v185;
    void** v186;
    void** v187;
    void** v188;
    void** v189;
    void** v190;
    void** v191;
    void** v192;
    void** v193;
    void** v194;
    void** v195;
    void** v196;
    void** v197;
    void** v198;
    void** v199;
    void** v200;
    void** v201;
    void** v202;
    void** v203;
    void** v204;
    void** v205;
    void** v206;
    void** v207;
    void** v208;
    void** v209;
    void** v210;
    void** v211;
    void** v212;
    void** v213;
    void** v214;
    void** v215;
    void** v216;
    void** v217;
    void** v218;
    void** v219;
    void** v220;
    void** v221;
    void** v222;
    void** v223;
    void** v224;
    void** v225;
    void** v226;
    void** v227;
    void** v228;
    void** v229;
    void** v230;
    void** v231;
    void** v232;
    void** v233;
    void** v234;
    void** v235;
    void** v236;
    void** v237;
    void** ecx238;
    void** v239;
    void** v240;
    void** v241;
    void** v242;
    void** v243;
    void** v244;
    void** v245;
    void** v246;
    void** v247;
    void** v248;
    void** v249;
    void** v250;
    void** v251;
    void** v252;
    void** v253;
    void** v254;
    void** v255;
    void** v256;
    void** v257;
    void** v258;
    void** v259;
    void** v260;
    void** v261;
    uint32_t edi262;
    void** edx263;
    int32_t v264;
    void*** edi265;
    int32_t ecx266;
    void** esi267;
    void** edx268;
    void*** edi269;
    int32_t ecx270;
    void** esi271;
    void** ecx272;
    void** edx273;
    int32_t v274;
    uint32_t edi275;
    void** ecx276;
    void** edx277;
    int32_t v278;
    int32_t v279;
    void*** edi280;
    void** esi281;
    int32_t ecx282;
    void** ecx283;
    void** edx284;
    int32_t v285;
    int32_t v286;
    void*** edi287;
    void** esi288;
    int32_t ecx289;
    void** v290;
    void** v291;
    void** v292;
    void** v293;
    void** v294;
    void** v295;
    void** v296;
    void** v297;
    void** v298;
    void** v299;
    void** v300;
    void** v301;
    void** v302;
    void** v303;
    void** v304;
    void** v305;
    void** v306;
    void** v307;
    void** v308;
    void** v309;
    void** v310;
    void** v311;
    void** v312;
    void** v313;
    void** v314;
    void** v315;
    void** v316;
    void** v317;
    void** v318;
    void** v319;
    void** v320;
    void** v321;
    void** v322;
    void** v323;
    void** v324;
    void** v325;
    void** v326;
    void** v327;
    void** v328;
    void** esi329;
    uint32_t edi330;
    void** edx331;
    int32_t v332;
    void*** edi333;
    void** esi334;
    int32_t ecx335;
    void*** edi336;
    int32_t ecx337;
    void** ecx338;
    void** edx339;
    int32_t v340;
    void** ecx341;
    void** edx342;
    int32_t v343;
    uint32_t edi344;
    void** ecx345;
    void** edx346;
    int32_t v347;
    int32_t v348;
    int32_t v349;
    void** ecx350;
    void** edx351;
    int32_t v352;
    int32_t v353;
    int32_t v354;
    void** v355;
    void** v356;
    void** v357;
    void** v358;
    void** v359;
    void** v360;
    void** v361;
    void** v362;
    void** v363;
    void** v364;
    void** v365;
    void** v366;
    void** v367;
    void** v368;
    void** v369;
    void** v370;
    void** v371;
    void** v372;
    void** v373;
    void** v374;
    void** v375;
    void** v376;
    void** v377;
    void** v378;
    void** v379;
    void** v380;
    void** v381;
    void** v382;
    void** v383;
    void** v384;
    void** v385;
    void** v386;
    void** v387;
    void** v388;
    void** v389;
    void** v390;
    void** v391;
    void** v392;
    void** v393;
    void** ebx394;
    void** eax395;

    *reinterpret_cast<signed char*>(&v16) = a16;
    v17 = reinterpret_cast<void**>(__return_address());
    v18 = ebp19;
    v20 = ebx21;
    v22 = esi23;
    esi24 = a2;
    v25 = edi26;
    ebx27 = ecx;
    eax28 = *reinterpret_cast<void***>(esi24) - 1;
    switch (eax28) {
    case 0:
        eax28 = *reinterpret_cast<void***>(esi24 + 4);
        *reinterpret_cast<void***>(ebx27 + 0x200) = eax28;
        break;
    case 1:
        __asm__("fild dword [esi+0x4]");
        __asm__("fmul dword [0x1803454c]");
        __asm__("fcom dword [ebx+0x1f0]");
        __asm__("fnstsw ax");
        if (*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64) {
            __asm__("fstp st0");
            break;
        } else {
            __asm__("fst dword [ebx+0x1f0]");
            __asm__("fld dword [ebx+0x25c]");
            __asm__("fmul dword [ebx+0x258]");
            __asm__("fmul st0, st1");
            __asm__("fstp dword [ebx+0x260]");
            __asm__("fstp st0");
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx27 + 0x198) + 76) = reinterpret_cast<void**>(1);
            break;
        }
    case 2:
        *reinterpret_cast<void***>(ebx27 + 0x1f4) = *reinterpret_cast<void***>(esi24 + 4);
        eax28 = *reinterpret_cast<void***>(esi24 + 40);
        v29 = eax28;
        *reinterpret_cast<int16_t*>(&eax28) = fun_18008fc0(ebx27, *reinterpret_cast<signed char*>(&v29));
        break;
    case 3:
        eax30 = *reinterpret_cast<void***>(esi24 + 4);
        *reinterpret_cast<void***>(ebx27 + 0x1f8) = eax30;
        *reinterpret_cast<int16_t*>(&eax28) = fun_18008fa0(ebx27, eax30);
        break;
    case 4:
        eax31 = reinterpret_cast<uint32_t>(*reinterpret_cast<void***>(esi24 + 4) - 15);
        v32 = *reinterpret_cast<void***>(ebx27 + 0x1e4);
        __asm__("fild dword [ebp+0x8]");
        ecx33 = reinterpret_cast<struct s20*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 100);
        *reinterpret_cast<signed char*>(&v34) = 0;
        __asm__("fstp dword [ebp-0x38]");
        fun_1800c7c0(ecx33, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc8, ecx33, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc8);
        fun_18007a20(ebx27, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c, v25, v22, v20, 0, v35, v36, v37, v38, v39, v40, v41, v42, v43, 0, ebx27, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c, v25, v22, v20, 0, v44, v45, v46, v47, v48, v49, v50, v51, v52, 0);
        ecx53 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c);
        *reinterpret_cast<int16_t*>(&eax28) = fun_1800c670(ecx53, v25, v22, v20, 0, v54, v55, v56, v57, v58, v59, v60, v61, v62, v34, v63, v32, 0, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v18, v17, eax31 + eax31 * 2 << 1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, ecx53);
        break;
    case 5:
        __asm__("fild dword [esi+0x4]");
        ecx75 = *reinterpret_cast<void***>(ebx27 + 0x198);
        __asm__("fstp dword [ebp-0x38]");
        fun_1800a7d0(ecx75, v25, v22, v20);
        __asm__("fimul dword [esi+0x8]");
        ecx76 = reinterpret_cast<struct s20*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 100);
        *reinterpret_cast<signed char*>(&v77) = 0;
        __asm__("fmul dword [0x1803454c]");
        __asm__("fstp dword [ebp-0x34]");
        __asm__("fild dword [esi+0xc]");
        __asm__("fstp dword [ebp-0x30]");
        fun_1800c7c0(ecx76, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc8, ecx76, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc8);
        fun_18007a20(ebx27, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c, v25, v22, v20, 0, v78, v79, v80, v81, v82, v83, v84, v85, v86, 0);
        ecx87 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c);
        *reinterpret_cast<int16_t*>(&eax28) = fun_1800c670(ecx87, v25, v22, v20, 0, v88, v89, v90, v91, v92, v93, v94, v95, v96, v77, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v18, v17, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, ecx87);
        break;
    case 6:
        __asm__("fld dword [ebx+0x250]");
        __asm__("fcomp dword [esi+0x4]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64) || (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64) || (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64) || (eax28 = *reinterpret_cast<void***>(ebx27 + 0x2c8), !eax28)))) {
            *reinterpret_cast<void***>(ebx27 + 0x250) = *reinterpret_cast<void***>(esi24 + 4);
            *reinterpret_cast<void***>(ebx27 + 0x24c) = *reinterpret_cast<void***>(esi24 + 8);
            eax28 = *reinterpret_cast<void***>(esi24 + 12);
            *reinterpret_cast<void***>(ebx27 + 0x254) = eax28;
            *reinterpret_cast<void***>(ebx27 + 0x2c8) = reinterpret_cast<void**>(1);
            *reinterpret_cast<void***>(ebx27 + 0x2bc) = reinterpret_cast<void**>(1);
            *reinterpret_cast<void***>(ebx27 + 0x2c7) = reinterpret_cast<void**>(1);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx27 + 0x198) + 76) = reinterpret_cast<void**>(1);
            break;
        }
    case 7:
        __asm__("fld dword [ebx+0x1b4]");
        __asm__("fcomp dword [esi+0x4]");
        ecx111 = ebx27 + 0x1b4;
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64) || (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64) || (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64) || (eax28 = *reinterpret_cast<void***>(ebx27 + 0x2c8), !!eax28)))) {
            *reinterpret_cast<void***>(ecx111) = *reinterpret_cast<void***>(esi24 + 4);
            *reinterpret_cast<void***>(ecx111 + 4) = *reinterpret_cast<void***>(esi24 + 8);
            *reinterpret_cast<void***>(ecx111 + 8) = *reinterpret_cast<void***>(esi24 + 12);
            if (!*reinterpret_cast<void***>(ebx27 + 0x2c4) || (!*reinterpret_cast<void***>(ebx27 + 0x2cc) || (*reinterpret_cast<void***>(ebx27 + 0x2c6) || (!*reinterpret_cast<void***>(ebx27 + 0x284) || (al112 = *reinterpret_cast<void***>(esi24 + 40), *reinterpret_cast<signed char*>(&a2) = 1, !!al112))))) {
                *reinterpret_cast<signed char*>(&a2) = 0;
            }
            eax113 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffd4);
            v114 = a2;
            ecx115 = *reinterpret_cast<void***>(ebx27 + 0x198);
            *reinterpret_cast<int16_t*>(&eax113) = fun_18001020(ecx115, eax113, ecx111, v114, v25, v22, v20);
            *reinterpret_cast<int16_t*>(&eax28) = fun_1800aeb0(ebx27 + 0x28c, eax113, *reinterpret_cast<signed char*>(&v114));
            *reinterpret_cast<void***>(ebx27 + 0x2c8) = reinterpret_cast<void**>(0);
            *reinterpret_cast<void***>(ebx27 + 0x2bc) = reinterpret_cast<void**>(1);
            *reinterpret_cast<void***>(ebx27 + 0x2c7) = reinterpret_cast<void**>(1);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx27 + 0x198) + 76) = reinterpret_cast<void**>(1);
            break;
        }
    case 8:
        __asm__("fld dword [ebx+0x1c0]");
        __asm__("fcomp dword [esi+0x4]");
        ecx116 = esi24 + 4;
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64) || (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64) || !(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64))) {
            ecx117 = *reinterpret_cast<void***>(ebx27 + 0x198);
            *reinterpret_cast<void***>(ebx27 + 0x1c0) = *reinterpret_cast<void***>(ecx116);
            *reinterpret_cast<void***>(ebx27 + 0x1c4) = *reinterpret_cast<void***>(ecx116 + 4);
            eax28 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe0);
            edx118 = *reinterpret_cast<void***>(ecx116 + 8);
            *reinterpret_cast<void***>(ebx27 + 0x1c8) = edx118;
            *reinterpret_cast<int16_t*>(&eax28) = fun_18001020(ecx117, eax28, ecx116, v25, v22, v20, v119);
            fun_1800aef0(ebx27 + 0x28c, eax28);
            eax28 = *reinterpret_cast<void***>(esi24 + 40);
            if (eax28 && *reinterpret_cast<void***>(ebx27 + 0x3f8)) {
                edx120 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx27 + 0x3f8));
                *reinterpret_cast<int16_t*>(&eax28) = reinterpret_cast<int16_t>(*reinterpret_cast<void***>(edx120 + 52)());
            }
            *reinterpret_cast<void***>(ebx27 + 0x2bc) = reinterpret_cast<void**>(1);
            *reinterpret_cast<void***>(ebx27 + 0x2c7) = reinterpret_cast<void**>(1);
            break;
        }
    case 9:
        __asm__("fld dword [ebx+0x1cc]");
        __asm__("fcomp dword [esi+0x4]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64) || (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64) || !(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64))) {
            *reinterpret_cast<void***>(ebx27 + 0x1cc) = *reinterpret_cast<void***>(esi24 + 4);
            *reinterpret_cast<void***>(ebx27 + 0x1d0) = *reinterpret_cast<void***>(esi24 + 8);
            edx121 = *reinterpret_cast<void***>(esi24 + 12);
            *reinterpret_cast<void***>(ebx27 + 0x2bc) = reinterpret_cast<void**>(1);
            *reinterpret_cast<void***>(ebx27 + 0x2c7) = reinterpret_cast<void**>(1);
            eax28 = *reinterpret_cast<void***>(ebx27 + 0x198);
            *reinterpret_cast<void***>(ebx27 + 0x1d4) = edx121;
            *reinterpret_cast<void***>(eax28 + 76) = reinterpret_cast<void**>(1);
            break;
        }
    case 10:
        __asm__("fld dword [ebx+0x1d8]");
        __asm__("fcomp dword [esi+0x4]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64) || (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64) || !(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64))) {
            *reinterpret_cast<void***>(ebx27 + 0x1d8) = *reinterpret_cast<void***>(esi24 + 4);
            *reinterpret_cast<void***>(ebx27 + 0x1dc) = *reinterpret_cast<void***>(esi24 + 8);
            eax28 = *reinterpret_cast<void***>(esi24 + 12);
            *reinterpret_cast<void***>(ebx27 + 0x2bc) = reinterpret_cast<void**>(1);
            *reinterpret_cast<void***>(ebx27 + 0x2c7) = reinterpret_cast<void**>(1);
            ecx122 = *reinterpret_cast<void***>(ebx27 + 0x198);
            *reinterpret_cast<void***>(ebx27 + 0x1e0) = eax28;
            *reinterpret_cast<void***>(ecx122 + 76) = reinterpret_cast<void**>(1);
            break;
        }
    case 11:
        __asm__("fld dword [ebx+0x1e4]");
        __asm__("fcomp dword [esi+0x4]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64) || (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64) || !(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64))) {
            *reinterpret_cast<void***>(ebx27 + 0x1e4) = *reinterpret_cast<void***>(esi24 + 4);
            ecx123 = *reinterpret_cast<void***>(ebx27 + 0x198);
            *reinterpret_cast<void***>(ebx27 + 0x1e8) = *reinterpret_cast<void***>(esi24 + 8);
            if (!*reinterpret_cast<void***>(ecx123 + 0xb8)) {
                *reinterpret_cast<void***>(ebx27 + 0x1ec) = *reinterpret_cast<void***>(esi24 + 12);
            }
            *reinterpret_cast<void***>(ebx27 + 0x2bc) = reinterpret_cast<void**>(1);
            *reinterpret_cast<void***>(ebx27 + 0x2c7) = reinterpret_cast<void**>(1);
            eax28 = *reinterpret_cast<void***>(ebx27 + 0x198);
            *reinterpret_cast<void***>(eax28 + 76) = reinterpret_cast<void**>(1);
            break;
        }
    case 12:
        eax28 = *reinterpret_cast<void***>(esi24 + 4);
        if (*reinterpret_cast<void***>(ebx27 + 0x1fc) != eax28) {
            ecx124 = *reinterpret_cast<void***>(ebx27 + 0x198);
            *reinterpret_cast<void***>(ebx27 + 0x1fc) = eax28;
            *reinterpret_cast<void***>(ecx124 + 76) = reinterpret_cast<void**>(1);
            break;
        }
    case 13:
        __asm__("fld dword [ebx+0x204]");
        __asm__("fcomp dword [esi+0x4]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64)) {
            *reinterpret_cast<void***>(ebx27 + 0x204) = *reinterpret_cast<void***>(esi24 + 4);
            break;
        }
    case 14:
        edi125 = *reinterpret_cast<void***>(esi24 + 4);
        if (edi125) {
            *reinterpret_cast<signed char*>(&v126) = 0;
            fun_1800c7e0(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 100, edi125 + 16);
            fun_18007a20(ebx27, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c, v25, v22, v20, 0, v127, v128, v129, v130, v131, v132, v133, v134, v135, 0);
            fun_1800c810(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 100, edi125 + 28);
            fun_18007a20(ebx27, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c, v25, v22, v20, 0, v136, v137, v138, v139, v140, v141, v142, v143, v144, 0);
            fun_1800c850(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c, edi125 + 40);
            fun_18007a20(ebx27, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c, v25, v22, v20, 0, v145, v146, v147, v148, v149, v150, v151, v152, v153, 0);
            ecx154 = *reinterpret_cast<void***>(edi125 + 56);
            edx155 = *reinterpret_cast<void***>(edi125 + 52);
            v156 = *reinterpret_cast<void***>(edi125 + 60);
            fun_1800c830(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c, edx155, ecx154, v156);
            fun_18007a20(ebx27, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c, v25, v22, v20, 0, v157, v158, v159, v160, v161, v162, v163, v164, v165, 0);
            edx166 = *reinterpret_cast<void***>(edi125 + 68);
            eax167 = *reinterpret_cast<void***>(edi125 + 64);
            v168 = *reinterpret_cast<void***>(edi125 + 72);
            fun_1800c870(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 100, eax167, edx166, v168);
            fun_18007a20(ebx27, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c, v25, v22, v20, 0, v169, v170, v171, v172, v173, v174, v175, v176, v177, 0);
            v178 = *reinterpret_cast<void***>(edi125 + 96);
            fun_1800c800(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 100, v178);
            fun_18007a20(ebx27, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c, v25, v22, v20, 0, v179, v180, v181, v182, v183, v184, v185, v186, v187, 0);
            __asm__("fld dword [edi+0x4c]");
            __asm__("fmul dword [0x18034548]");
            __asm__("fstp dword [ebp+0x8]");
            __asm__("fld dword [ebp+0x8]");
            __asm__("fistp dword [ebp-0x10]");
            fun_1800c760(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 100, v188);
            fun_18007a20(ebx27, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c, v25, v22, v20, 0, v189, v190, v191, v192, v193, v194, v195, v196, v197, 0);
            v198 = *reinterpret_cast<void***>(edi125 + 80);
            fun_1800c770(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 100, v198);
            fun_18007a20(ebx27, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c, v25, v22, v20, 0, v199, v200, v201, v202, v203, v204, v205, v206, v207, 0);
            v208 = *reinterpret_cast<void***>(edi125 + 84);
            fun_1800c780(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 100, v208);
            fun_18007a20(ebx27, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c, v25, v22, v20, 0, v209, v210, v211, v212, v213, v214, v215, v216, v217, 0);
            v218 = *reinterpret_cast<void***>(edi125 + 88);
            fun_1800c890(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 100, v218);
            fun_18007a20(ebx27, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c, v25, v22, v20, 0, v219, v220, v221, v222, v223, v224, v225, v226, v227, 0);
            v228 = *reinterpret_cast<void***>(edi125 + 92);
            fun_1800c750(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 100, v228);
            fun_18007a20(ebx27, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c, v25, v22, v20, 0, v229, v230, v231, v232, v233, v234, v235, v236, v237, 0);
            ecx238 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff9c);
            *reinterpret_cast<int16_t*>(&eax28) = fun_1800c670(ecx238, v25, v22, v20, 0, v239, v240, v241, v242, v243, v244, v245, v246, v247, v126, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v18, v17, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, ecx238);
            break;
        }
    case 15:
        eax28 = *reinterpret_cast<void***>(ebx27 + 0x3e4);
        *reinterpret_cast<void***>(ebx27 + 0x398) = reinterpret_cast<void**>(1);
        if (!eax28) 
            goto addr_0x18008052_36;
        edi262 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi24 + 8)) & 15;
        eax28 = reinterpret_cast<void**>(static_cast<unsigned char>(reinterpret_cast<uint1_t>(edi262 == 0)));
        if (*reinterpret_cast<void***>(ebx27 + 0x3f0)) {
            addr_0x18008078_38:
            if (!eax28) {
                addr_0x1800809e_39:
                __asm__("fld dword [esi+0x14]");
                __asm__("fst dword [ebp-0x4]");
                __asm__("fcomp dword [ebx+0x3ac]");
                __asm__("fnstsw ax");
                if (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64)) {
                    edx263 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx27 + 0x3f0));
                    *reinterpret_cast<int16_t*>(&eax28) = reinterpret_cast<int16_t>(*reinterpret_cast<void***>(edx263 + 52)(v264));
                }
            } else {
                addr_0x1800807c_41:
                edi265 = reinterpret_cast<void***>(ebx27 + 0x39c);
                ecx266 = 9;
                esi267 = a2 + 4;
                goto label_42;
            }
        } else {
            if (!eax28) {
                if (!*reinterpret_cast<void***>(ebx27 + 0x3f0)) {
                    if (!eax28) 
                        goto addr_0x1800807c_41;
                    if (!*reinterpret_cast<void***>(ebx27 + 0x3f0)) 
                        goto addr_0x1800809e_39; else 
                        goto addr_0x18008078_38;
                }
            } else {
                addr_0x18008052_36:
                edx268 = a2;
                edi269 = reinterpret_cast<void***>(ebx27 + 0x39c);
                ecx270 = 9;
                esi271 = edx268 + 4;
                goto label_47;
            }
        }
        __asm__("fld dword [esi+0x10]");
        __asm__("fst dword [ebp-0x4]");
        __asm__("fcomp dword [ebx+0x3a8]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64)) {
            ecx272 = *reinterpret_cast<void***>(ebx27 + 0x3f0);
            edx273 = *reinterpret_cast<void***>(ecx272);
            *reinterpret_cast<int16_t*>(&eax28) = reinterpret_cast<int16_t>(*reinterpret_cast<void***>(edx273 + 48)(v274));
        }
        if (edi262 != (*reinterpret_cast<uint32_t*>(ebx27 + 0x3a0) & 15)) 
            goto addr_0x1800812d_51;
        __asm__("fld dword [esi+0x24]");
        __asm__("fcomp dword [ebx+0x3bc]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64)) 
            goto addr_0x1800812d_51;
        __asm__("fld dword [esi+0x18]");
        __asm__("fcomp dword [ebx+0x3b0]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64)) 
            goto addr_0x1800812d_51;
        __asm__("fld dword [esi+0x1c]");
        __asm__("fcomp dword [ebx+0x3b4]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64)) 
            goto addr_0x1800812d_51;
        __asm__("fld dword [esi+0x20]");
        __asm__("fcomp dword [ebx+0x3b8]");
        __asm__("fnstsw ax");
        if (*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64) 
            goto addr_0x180081d3_56;
        addr_0x1800812d_51:
        eax28 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx27 + 0x3e4) + 12);
        __asm__("fild dword [ebp-0x10]");
        __asm__("fst dword [ebp-0xc]");
        __asm__("fmul dword [0x18034544]");
        __asm__("fstp dword [ebp-0x8]");
        __asm__("fld dword [esi+0x20]");
        __asm__("fmul dword [esi+0x1c]");
        __asm__("fstp dword [ebp-0x4]");
        __asm__("fld dword [esi+0x18]");
        __asm__("fsub dword [ebp-0x4]");
        __asm__("fmul dword [ebp-0x8]");
        __asm__("fstp dword [ebp-0x14]");
        __asm__("fld dword [ebp-0x14]");
        __asm__("fistp dword [ebp-0x10]");
        __asm__("fld dword [ebp-0x4]");
        __asm__("fadd dword [esi+0x18]");
        __asm__("fmul dword [ebp-0x8]");
        __asm__("fstp dword [ebp-0x14]");
        __asm__("fld dword [ebp-0x14]");
        __asm__("fistp dword [ebp-0x8]");
        __asm__("fld dword [ebp-0xc]");
        __asm__("fdiv dword [esi+0x24]");
        __asm__("fstp dword [ebp-0x14]");
        __asm__("fld dword [ebp-0x14]");
        __asm__("fistp dword [ebp-0xc]");
        edi275 = edi262 - 1;
        if (!edi275) {
            ecx276 = *reinterpret_cast<void***>(ebx27 + 0x3f0);
            edx277 = *reinterpret_cast<void***>(ecx276);
            *reinterpret_cast<int16_t*>(&eax28) = reinterpret_cast<int16_t>(*reinterpret_cast<void***>(edx277 + 44)(eax28, v278, v279));
            goto addr_0x180081d3_56;
        }
        if (edi275 - 1) {
            addr_0x180081d3_56:
            edi280 = reinterpret_cast<void***>(ebx27 + 0x39c);
            esi281 = a2 + 4;
            ecx282 = 9;
        } else {
            ecx283 = *reinterpret_cast<void***>(ebx27 + 0x3f0);
            edx284 = *reinterpret_cast<void***>(ecx283);
            *reinterpret_cast<int16_t*>(&eax28) = reinterpret_cast<int16_t>(*reinterpret_cast<void***>(edx284 + 40)(eax28, v285, v286));
            edi287 = reinterpret_cast<void***>(ebx27 + 0x39c);
            esi288 = a2 + 4;
            ecx289 = 9;
            while (ecx289) {
                --ecx289;
                *edi287 = *reinterpret_cast<void***>(esi288);
                edi287 = edi287 + 4;
                esi288 = esi288 + 4;
            }
            esi24 = a2;
            break;
        }
        while (ecx282) {
            --ecx282;
            *edi280 = *reinterpret_cast<void***>(esi281);
            edi280 = edi280 + 4;
            esi281 = esi281 + 4;
        }
        esi24 = a2;
        break;
        label_42:
        while (ecx266) {
            --ecx266;
            *edi265 = *reinterpret_cast<void***>(esi267);
            edi265 = edi265 + 4;
            esi267 = esi267 + 4;
        }
        *reinterpret_cast<int16_t*>(&eax28) = fun_180089e0(ebx27, v25, v22, v20, v290, v291, v292, v293, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303, v304, v305, v306, v307, v308, v309, v310, v311, v312, v313, v314, v18, v17, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, v16, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, v325, v326, v327, v328);
        esi24 = a2;
        break;
        label_47:
        while (ecx270) {
            --ecx270;
            *edi269 = *reinterpret_cast<void***>(esi271);
            edi269 = edi269 + 4;
            esi271 = esi271 + 4;
        }
        esi24 = edx268;
        break;
    case 16:
        eax28 = *reinterpret_cast<void***>(ebx27 + 0x3e4);
        *reinterpret_cast<void***>(ebx27 + 0x398) = reinterpret_cast<void**>(2);
        if (!eax28) {
            esi329 = a2 + 4;
        } else {
            edi330 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi24 + 8)) & 15;
            eax28 = reinterpret_cast<void**>(static_cast<unsigned char>(reinterpret_cast<uint1_t>(edi330 == 0)));
            if (*reinterpret_cast<void***>(ebx27 + 0x3f4)) {
                addr_0x18008234_73:
                if (!eax28) {
                    addr_0x1800825a_74:
                    __asm__("fld dword [esi+0x14]");
                    __asm__("fst dword [ebp-0x4]");
                    __asm__("fcomp dword [ebx+0x3d0]");
                    __asm__("fnstsw ax");
                    if (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64)) {
                        edx331 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx27 + 0x3f4));
                        *reinterpret_cast<int16_t*>(&eax28) = reinterpret_cast<int16_t>(*reinterpret_cast<void***>(edx331 + 52)(v332));
                        goto addr_0x18008276_76;
                    }
                } else {
                    addr_0x18008238_77:
                    edi333 = reinterpret_cast<void***>(ebx27 + 0x3c0);
                    esi334 = a2 + 4;
                    ecx335 = 9;
                    goto label_78;
                }
            } else {
                if (!eax28) {
                    if (!*reinterpret_cast<void***>(ebx27 + 0x3f4)) {
                        if (!eax28) 
                            goto addr_0x18008238_77;
                        if (!*reinterpret_cast<void***>(ebx27 + 0x3f4)) 
                            goto addr_0x1800825a_74; else 
                            goto addr_0x18008234_73;
                    }
                } else {
                    eax28 = a2;
                    esi329 = eax28 + 4;
                }
            }
        }
        addr_0x1800839f_84:
        edi336 = reinterpret_cast<void***>(ebx27 + 0x3c0);
        ecx337 = 9;
        while (ecx337) {
            --ecx337;
            *edi336 = *reinterpret_cast<void***>(esi329);
            edi336 = edi336 + 4;
            esi329 = esi329 + 4;
        }
        esi24 = a2;
        break;
        addr_0x18008276_76:
        __asm__("fld dword [esi+0x10]");
        __asm__("fst dword [ebp-0x4]");
        __asm__("fcomp dword [ebx+0x3cc]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64)) {
            ecx338 = *reinterpret_cast<void***>(ebx27 + 0x3f4);
            edx339 = *reinterpret_cast<void***>(ecx338);
            *reinterpret_cast<int16_t*>(&eax28) = reinterpret_cast<int16_t>(*reinterpret_cast<void***>(edx339 + 48)(v340));
        }
        __asm__("fld dword [esi+0x24]");
        __asm__("fst dword [ebp-0x14]");
        __asm__("fcomp dword [ebx+0x3e0]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64)) {
            ecx341 = *reinterpret_cast<void***>(ebx27 + 0x3f4);
            edx342 = *reinterpret_cast<void***>(ecx341);
            *reinterpret_cast<int16_t*>(&eax28) = reinterpret_cast<int16_t>(*reinterpret_cast<void***>(edx342 + 56)(v343));
        }
        if (edi330 != (*reinterpret_cast<uint32_t*>(ebx27 + 0x3c4) & 15)) 
            goto addr_0x180082fb_92;
        __asm__("fld dword [esi+0x20]");
        __asm__("fcomp dword [ebx+0x3dc]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64)) 
            goto addr_0x180082fb_92;
        __asm__("fld dword [esi+0x18]");
        __asm__("fcomp dword [ebx+0x3d4]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64)) 
            goto addr_0x180082fb_92;
        __asm__("fld dword [esi+0x1c]");
        __asm__("fcomp dword [ebx+0x3d8]");
        __asm__("fnstsw ax");
        if (*reinterpret_cast<unsigned char*>(&eax28 + 1) & 64) 
            goto addr_0x18008391_96;
        addr_0x180082fb_92:
        eax28 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx27 + 0x3e4) + 12);
        __asm__("fild dword [ebp-0x14]");
        __asm__("fst dword [ebp-0xc]");
        __asm__("fmul dword [0x18034544]");
        __asm__("fstp dword [ebp-0x10]");
        __asm__("fld dword [0x18034238]");
        __asm__("fsub dword [esi+0x1c]");
        __asm__("fmul dword [esi+0x18]");
        __asm__("fmul dword [ebp-0x10]");
        __asm__("fstp dword [ebp-0x14]");
        __asm__("fld dword [ebp-0x14]");
        __asm__("fistp dword [ebp-0x4]");
        __asm__("fld dword [esi+0x1c]");
        __asm__("fadd dword [0x18034238]");
        __asm__("fmul dword [esi+0x18]");
        __asm__("fmul dword [ebp-0x10]");
        __asm__("fstp dword [ebp-0x14]");
        __asm__("fld dword [ebp-0x14]");
        __asm__("fistp dword [ebp-0x8]");
        __asm__("fld dword [ebp-0xc]");
        __asm__("fdiv dword [esi+0x20]");
        __asm__("fstp dword [ebp-0x14]");
        __asm__("fld dword [ebp-0x14]");
        __asm__("fistp dword [ebp-0x10]");
        edi344 = edi330 - 1;
        if (!edi344) {
            ecx345 = *reinterpret_cast<void***>(ebx27 + 0x3f4);
            edx346 = *reinterpret_cast<void***>(ecx345);
            *reinterpret_cast<int16_t*>(&eax28) = reinterpret_cast<int16_t>(*reinterpret_cast<void***>(edx346 + 44)(v347, v348, v349));
            goto addr_0x18008391_96;
        } else {
            if (edi344 - 1) {
                addr_0x18008391_96:
                esi329 = a2 + 4;
                goto addr_0x1800839f_84;
            } else {
                ecx350 = *reinterpret_cast<void***>(ebx27 + 0x3f4);
                edx351 = *reinterpret_cast<void***>(ecx350);
                *reinterpret_cast<int16_t*>(&eax28) = reinterpret_cast<int16_t>(*reinterpret_cast<void***>(edx351 + 40)(v352, v353, v354));
                esi329 = a2 + 4;
                goto addr_0x1800839f_84;
            }
        }
        label_78:
        while (ecx335) {
            --ecx335;
            *edi333 = *reinterpret_cast<void***>(esi334);
            edi333 = edi333 + 4;
            esi334 = esi334 + 4;
        }
        *reinterpret_cast<int16_t*>(&eax28) = fun_180089e0(ebx27, v25, v22, v20, v355, v356, v357, v358, v359, v360, v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, v379, v18, v17, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, v16, v380, v381, v382, v383, v384, v385, v386, v387, v388, v389, v390, v391, v392, v393);
        esi24 = a2;
    }
    ebx394 = *reinterpret_cast<void***>(ebx27 + 0x284);
    if (ebx394) {
        eax395 = *reinterpret_cast<void***>(ebx394);
        *reinterpret_cast<int16_t*>(&eax28) = reinterpret_cast<int16_t>(*reinterpret_cast<void***>(eax395 + 16)(ebx394, esi24));
    }
    return *reinterpret_cast<int16_t*>(&eax28);
}

int16_t fun_180091e0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44);

int16_t fun_18009070(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40) {
    void*** esp41;
    void** esi42;
    void** ebx43;
    void** ebp44;
    void** edi45;
    void** esi46;
    void** ebp47;
    void** ebx48;
    void** eax49;
    void** esp50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    int16_t ax60;

    esp41 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4 - 4);
    esi42 = *reinterpret_cast<void***>(ecx + 56);
    ebx43 = *reinterpret_cast<void***>(ecx + 4);
    ebp44 = ecx + 56;
    if (!esi42) {
        eax49 = fun_1802b2bb(ecx, 52, edi45, esi46, ebp47, ebx48, __return_address(), a2, a3);
        esp41 = esp41 - 4 - 4 + 4 + 4;
        esi42 = eax49;
    } else {
        *reinterpret_cast<void***>(ebp44) = *reinterpret_cast<void***>(esi42);
    }
    if (esi42) {
        esp50 = reinterpret_cast<void**>(esp41 - 44);
        fun_1800c650(esp50, esp50 + 64);
        fun_180091e0(ebp44, esi42 + 8, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0x18009091, 52, edi45, esi46, ebp47, ebx48, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27);
        esp41 = reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esp50 - 4) - 4 + 4 + 4 - 4 - 4 + 48 + 4);
        *reinterpret_cast<void***>(esi42) = ebx43;
        *reinterpret_cast<void***>(esi42 + 4) = *reinterpret_cast<void***>(ebx43 + 4);
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx43 + 4)) = esi42;
        *reinterpret_cast<void***>(ebx43 + 4) = esi42;
        *reinterpret_cast<void***>(ecx) = *reinterpret_cast<void***>(ecx) + 1;
    }
    ax60 = fun_1800c670(esp41 + 20, edi45, esi46, ebp47, ebx48, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    return ax60;
}

int16_t fun_1800a180(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40) {
    void** v41;
    void** v42;
    void** ebx43;
    void** ebx44;
    void** v45;
    void** ebp46;
    void** v47;
    void** edi48;
    void** edi49;
    void** ebp50;
    void** v51;
    void** esi52;
    void** eax53;
    void** esi54;

    v41 = reinterpret_cast<void**>(__return_address());
    v42 = ebx43;
    ebx44 = a2;
    v45 = ebp46;
    v47 = edi48;
    edi49 = *reinterpret_cast<void***>(ebx44 + 4);
    ebp50 = ebx44 + 4;
    if (edi49 != ebp50) {
        v51 = esi52;
        do {
            eax53 = a3;
            if (*reinterpret_cast<void***>(edi49 + 8) != eax53) {
                edi49 = *reinterpret_cast<void***>(edi49);
            } else {
                esi54 = edi49;
                edi49 = *reinterpret_cast<void***>(edi49);
                *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi54 + 4)) = *reinterpret_cast<void***>(esi54);
                *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi54) + 4) = *reinterpret_cast<void***>(esi54 + 4);
                *reinterpret_cast<int16_t*>(&eax53) = fun_1800c670(esi54 + 8, v51, v47, v45, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
                *reinterpret_cast<void***>(esi54) = *reinterpret_cast<void***>(ebx44 + 56);
                *reinterpret_cast<void***>(ebx44 + 56) = esi54;
                *reinterpret_cast<void***>(ebx44) = *reinterpret_cast<void***>(ebx44) - 1;
            }
        } while (edi49 != ebp50);
    }
    return *reinterpret_cast<int16_t*>(&eax53);
}

int16_t fun_180090e0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40) {
    void*** esp41;
    void** esi42;
    void** ebp43;
    void** ebx44;
    void** edi45;
    void** esi46;
    void** ebp47;
    void** ebx48;
    void** eax49;
    void** esp50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    int16_t ax60;

    esp41 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4 - 4);
    esi42 = *reinterpret_cast<void***>(ecx + 56);
    ebp43 = ecx + 56;
    ebx44 = ecx + 4;
    if (!esi42) {
        eax49 = fun_1802b2bb(ecx, 52, edi45, esi46, ebp47, ebx48, __return_address(), a2, a3);
        esp41 = esp41 - 4 - 4 + 4 + 4;
        esi42 = eax49;
    } else {
        *reinterpret_cast<void***>(ebp43) = *reinterpret_cast<void***>(esi42);
    }
    if (esi42) {
        esp50 = reinterpret_cast<void**>(esp41 - 44);
        fun_1800c650(esp50, esp50 + 64);
        fun_180091e0(ebp43, esi42 + 8, v51, v52, v53, v54, v55, v56, v57, v58, v59, 0x18009101, 52, edi45, esi46, ebp47, ebx48, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27);
        esp41 = reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esp50 - 4) - 4 + 4 + 4 - 4 - 4 + 48 + 4);
        *reinterpret_cast<void***>(esi42) = ebx44;
        *reinterpret_cast<void***>(esi42 + 4) = *reinterpret_cast<void***>(ebx44 + 4);
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx44 + 4)) = esi42;
        *reinterpret_cast<void***>(ebx44 + 4) = esi42;
        *reinterpret_cast<void***>(ecx) = *reinterpret_cast<void***>(ecx) + 1;
    }
    ax60 = fun_1800c670(esp41 + 20, edi45, esi46, ebp47, ebx48, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    return ax60;
}

int16_t fun_1800c1e0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35) {
    void** ecx36;
    void** edi37;
    void** esi38;
    void** ecx39;
    int16_t ax40;

    ecx36 = *reinterpret_cast<void***>(ecx + 0x198);
    fun_1800a180(ecx36, ecx + 0x1c8, a2, edi37, esi38, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35);
    ecx39 = *reinterpret_cast<void***>(ecx + 0x198);
    ax40 = fun_1800a180(ecx39, ecx + 0x204, a2, edi37, esi38, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35);
    return ax40;
}

struct s56 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

void fun_1800aef0(struct s28* ecx, void** a2) {
    struct s56* ecx3;

    ecx3 = reinterpret_cast<struct s56*>(&ecx->f24);
    ecx3->f0 = *reinterpret_cast<void***>(a2);
    ecx3->f4 = *reinterpret_cast<void***>(a2 + 4);
    ecx3->f8 = *reinterpret_cast<void***>(a2 + 8);
    return;
}

struct s57 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

void fun_1800c7e0(struct s21* ecx, void** a2) {
    struct s57* ecx3;

    ecx->f0 = 8;
    ecx3 = reinterpret_cast<struct s57*>(&ecx->f4);
    ecx3->f0 = *reinterpret_cast<void***>(a2);
    ecx3->f4 = *reinterpret_cast<void***>(a2 + 4);
    ecx3->f8 = *reinterpret_cast<void***>(a2 + 8);
    return;
}

struct s58 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

void fun_1800c810(struct s22* ecx, void** a2) {
    struct s58* ecx3;

    ecx->f0 = 9;
    ecx3 = reinterpret_cast<struct s58*>(&ecx->f4);
    ecx3->f0 = *reinterpret_cast<void***>(a2);
    ecx3->f4 = *reinterpret_cast<void***>(a2 + 4);
    ecx3->f8 = *reinterpret_cast<void***>(a2 + 8);
    return;
}

void fun_1800c850(void** ecx, void** a2) {
    void** ecx3;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(10);
    ecx3 = ecx + 4;
    *reinterpret_cast<void***>(ecx3) = *reinterpret_cast<void***>(a2);
    *reinterpret_cast<void***>(ecx3 + 4) = *reinterpret_cast<void***>(a2 + 4);
    *reinterpret_cast<void***>(ecx3 + 8) = *reinterpret_cast<void***>(a2 + 8);
    return;
}

void fun_1800c830(void** ecx, void** a2, void** a3, void** a4) {
    *reinterpret_cast<void***>(ecx + 4) = a2;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(11);
    *reinterpret_cast<void***>(ecx + 8) = a3;
    *reinterpret_cast<void***>(ecx + 12) = a4;
    return;
}

void fun_1800c870(struct s23* ecx, void** a2, void** a3, void** a4) {
    ecx->f4 = a2;
    ecx->f0 = 12;
    ecx->f8 = a3;
    ecx->f12 = a4;
    return;
}

void fun_1800c800(struct s55* ecx, void** a2) {
    ecx->f0 = 14;
    ecx->f4 = a2;
    return;
}

void fun_1800c770(struct s15* ecx, void** a2) {
    ecx->f0 = 3;
    ecx->f4 = a2;
    return;
}

void fun_1800c780(struct s16* ecx, void** a2) {
    ecx->f0 = 4;
    ecx->f4 = a2;
    return;
}

void fun_1800c890(struct s24* ecx, void** a2) {
    ecx->f0 = 13;
    ecx->f4 = a2;
    return;
}

void fun_1800c750(struct s13* ecx, void** a2) {
    ecx->f0 = 1;
    ecx->f4 = a2;
    return;
}

int16_t fun_18029d50(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6);

int16_t fun_18029870(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73);

int16_t fun_18028cf0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7);

int16_t fun_18028c80(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16);

void fun_18027690(void** ecx, void*** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9);

int16_t fun_18027620(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7);

int16_t fun_180089e0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60) {
    void** ecx61;
    void** v62;
    void** edx63;
    void** v64;
    void** ecx65;
    void** v66;
    void** ecx67;
    void** eax68;
    void** ebx69;
    void** ecx70;
    void** v71;
    uint32_t edi72;
    void** edx73;
    void** edi74;
    void** esi75;
    uint32_t eax76;
    void** ecx77;
    void** eax78;
    int32_t v79;
    int32_t v80;
    int32_t v81;
    void** ecx82;
    void** eax83;
    int32_t v84;
    int32_t v85;
    int32_t v86;
    void** ecx87;
    int32_t v88;
    void** eax89;
    void** ecx90;
    int32_t v91;
    void** eax92;
    void** ecx93;
    int32_t v94;
    void** eax95;
    uint32_t edi96;
    void** v97;
    void** ebx98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** ebp103;
    uint32_t eax104;
    void** ecx105;
    void** edx106;
    int32_t v107;
    int32_t v108;
    int32_t v109;
    void** ecx110;
    void** edx111;
    int32_t v112;
    int32_t v113;
    int32_t v114;
    void** ecx115;
    int32_t v116;
    void** edx117;
    void** ecx118;
    void** edx119;
    void** ecx120;
    void** ecx121;
    void** ecx122;
    void** edx123;
    void** v124;
    void** v125;
    void** v126;
    void** v127;
    void** v128;
    void** eax129;
    void** v130;
    void** v131;
    void** v132;
    void** v133;
    int16_t ax134;

    if (*reinterpret_cast<void***>(ecx + 0x3f0)) {
        ecx61 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x3f0));
        v62 = *reinterpret_cast<void***>(ecx + 0x3f0);
        *reinterpret_cast<void***>(ecx61 + 8)(v62);
        *reinterpret_cast<void***>(ecx + 0x3f0) = reinterpret_cast<void**>(0);
    }
    if (*reinterpret_cast<void***>(ecx + 0x3f4)) {
        edx63 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x3f4));
        v64 = *reinterpret_cast<void***>(ecx + 0x3f4);
        *reinterpret_cast<void***>(edx63 + 8)(v64);
        *reinterpret_cast<void***>(ecx + 0x3f4) = reinterpret_cast<void**>(0);
    }
    if (*reinterpret_cast<void***>(ecx + 0x3f8)) {
        ecx65 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x3f8));
        v66 = *reinterpret_cast<void***>(ecx + 0x3f8);
        *reinterpret_cast<void***>(ecx65 + 8)(v66);
        *reinterpret_cast<void***>(ecx + 0x3f8) = reinterpret_cast<void**>(0);
    }
    ecx67 = *reinterpret_cast<void***>(ecx + 0x3e8);
    eax68 = *reinterpret_cast<void***>(ecx + 0x3e4);
    *reinterpret_cast<void***>(ecx + 0x3fc) = eax68;
    if (ecx67 || (ecx67 = *reinterpret_cast<void***>(ecx + 0x3ec), !!ecx67)) {
        *reinterpret_cast<void***>(ecx + 0x3fc) = ecx67;
    }
    ebx69 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x198) + 0x144);
    if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax68 + 10) == 1) && (ecx70 = *reinterpret_cast<void***>(ecx + 0x398), !!ecx70)) {
        v71 = *reinterpret_cast<void***>(eax68 + 12);
        __asm__("fild dword [ebp-0x14]");
        __asm__("fst dword [ebp-0x10]");
        __asm__("fmul dword [0x18034544]");
        __asm__("fstp dword [ebp-0x4]");
        if (!reinterpret_cast<int1_t>(ecx70 == 1)) {
            if (reinterpret_cast<int1_t>(ecx70 == 2) && ((edi72 = *reinterpret_cast<uint32_t*>(ecx + 0x3c4) & 15, !!edi72) && (edx73 = *reinterpret_cast<void***>(ecx + 0x1a0), *reinterpret_cast<int16_t*>(&eax68) = fun_18029d50(ecx70, edx73, eax68, ebx69, edi74, esi75), *reinterpret_cast<void***>(ecx + 0x3f4) = eax68, !!eax68))) {
                __asm__("fld dword [0x18034238]");
                __asm__("fsub dword [esi+0x3d8]");
                __asm__("fmul dword [esi+0x3d4]");
                __asm__("fmul dword [ebp-0x4]");
                __asm__("fstp dword [ebp-0x14]");
                __asm__("fld dword [ebp-0x14]");
                __asm__("fistp dword [ebp-0x8]");
                __asm__("fld dword [esi+0x3d8]");
                __asm__("fadd dword [0x18034238]");
                __asm__("fmul dword [esi+0x3d4]");
                __asm__("fmul dword [ebp-0x4]");
                __asm__("fstp dword [ebp-0x14]");
                __asm__("fld dword [ebp-0x14]");
                __asm__("fistp dword [ebp-0xc]");
                __asm__("fld dword [ebp-0x10]");
                __asm__("fdiv dword [esi+0x3dc]");
                __asm__("fstp dword [ebp-0x14]");
                __asm__("fld dword [ebp-0x14]");
                __asm__("fistp dword [ebp-0x10]");
                eax76 = edi72 - 1;
                if (!eax76) {
                    ecx77 = *reinterpret_cast<void***>(ecx + 0x3f4);
                    eax78 = *reinterpret_cast<void***>(ecx77);
                    *reinterpret_cast<void***>(eax78 + 44)(v79, v80, v81);
                } else {
                    if (!(eax76 - 1)) {
                        ecx82 = *reinterpret_cast<void***>(ecx + 0x3f4);
                        eax83 = *reinterpret_cast<void***>(ecx82);
                        *reinterpret_cast<void***>(eax83 + 40)(v84, v85, v86);
                    }
                }
                ecx87 = *reinterpret_cast<void***>(ecx + 0x3f4);
                v88 = *reinterpret_cast<int32_t*>(ecx + 0x3cc);
                eax89 = *reinterpret_cast<void***>(ecx87);
                *reinterpret_cast<void***>(eax89 + 48)(v88);
                ecx90 = *reinterpret_cast<void***>(ecx + 0x3f4);
                v91 = *reinterpret_cast<int32_t*>(ecx + 0x3d0);
                eax92 = *reinterpret_cast<void***>(ecx90);
                *reinterpret_cast<void***>(eax92 + 52)(v91, v88);
                ecx93 = *reinterpret_cast<void***>(ecx + 0x3f4);
                v94 = *reinterpret_cast<int32_t*>(ecx + 0x3e0);
                eax95 = *reinterpret_cast<void***>(ecx93);
                *reinterpret_cast<void***>(eax95 + 56)(v94, v91, v88);
                eax68 = *reinterpret_cast<void***>(ecx + 0x3f4);
                *reinterpret_cast<void***>(ecx + 0x3fc) = eax68;
            }
        } else {
            edi96 = *reinterpret_cast<uint32_t*>(ecx + 0x3a0) & 15;
            if (edi96 && (v97 = eax68, eax68 = *reinterpret_cast<void***>(ecx + 0x1a0), *reinterpret_cast<int16_t*>(&eax68) = fun_18029870(ecx70, eax68, v97, ebx69, edi74, esi75, ebx98, v71, v99, v100, v101, v102, ebp103, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60), *reinterpret_cast<void***>(ecx + 0x3f0) = eax68, !!eax68)) {
                __asm__("fld dword [esi+0x3b8]");
                __asm__("fmul dword [esi+0x3b4]");
                __asm__("fstp dword [ebp-0x14]");
                __asm__("fld dword [esi+0x3b0]");
                __asm__("fsub dword [ebp-0x14]");
                __asm__("fmul dword [ebp-0x4]");
                __asm__("fstp dword [ebp-0x8]");
                __asm__("fld dword [ebp-0x8]");
                __asm__("fistp dword [ebp-0xc]");
                __asm__("fld dword [ebp-0x14]");
                __asm__("fadd dword [esi+0x3b0]");
                __asm__("fmul dword [ebp-0x4]");
                __asm__("fstp dword [ebp-0x14]");
                __asm__("fld dword [ebp-0x14]");
                __asm__("fistp dword [ebp-0x8]");
                __asm__("fld dword [ebp-0x10]");
                __asm__("fdiv dword [esi+0x3bc]");
                __asm__("fstp dword [ebp-0x14]");
                __asm__("fld dword [ebp-0x14]");
                __asm__("fistp dword [ebp-0x4]");
                eax104 = edi96 - 1;
                if (!eax104) {
                    ecx105 = *reinterpret_cast<void***>(ecx + 0x3f0);
                    edx106 = *reinterpret_cast<void***>(ecx105);
                    *reinterpret_cast<void***>(edx106 + 44)(v107, v108, v109);
                } else {
                    if (!(eax104 - 1)) {
                        ecx110 = *reinterpret_cast<void***>(ecx + 0x3f0);
                        edx111 = *reinterpret_cast<void***>(ecx110);
                        *reinterpret_cast<void***>(edx111 + 40)(v112, v113, v114);
                    }
                }
                ecx115 = *reinterpret_cast<void***>(ecx + 0x3f0);
                v116 = *reinterpret_cast<int32_t*>(ecx + 0x3a8);
                edx117 = *reinterpret_cast<void***>(ecx115);
                *reinterpret_cast<void***>(edx117 + 48)(v116);
                ecx118 = *reinterpret_cast<void***>(ecx + 0x3f0);
                eax68 = *reinterpret_cast<void***>(ecx + 0x3ac);
                edx119 = *reinterpret_cast<void***>(ecx118);
                *reinterpret_cast<void***>(edx119 + 52)(eax68, v116);
                *reinterpret_cast<void***>(ecx + 0x3fc) = *reinterpret_cast<void***>(ecx + 0x3f0);
            }
        }
    }
    ecx120 = *reinterpret_cast<void***>(ecx + 0x200);
    ecx121 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx120) & 0x700);
    if (ecx121 == 0x100) {
        ecx122 = *reinterpret_cast<void***>(ecx + 0x3fc);
        edx123 = *reinterpret_cast<void***>(ecx + 0x1a0);
        *reinterpret_cast<int16_t*>(&eax68) = fun_18028cf0(ecx122, edx123, ecx122, ebx69, 1, 0, edi74);
    } else {
        eax68 = *reinterpret_cast<void***>(ecx + 0x1a0);
        v124 = *reinterpret_cast<void***>(ecx + 0x3fc);
        *reinterpret_cast<int16_t*>(&eax68) = fun_18028c80(ecx121, eax68, v124, ebx69, 1, 0, edi74, esi75, ebx98, v71, v125, v126, v127, v128, ebp103, __return_address());
    }
    *reinterpret_cast<void***>(ecx + 0x3f8) = eax68;
    fun_18009030(ecx, edi74);
    eax129 = *reinterpret_cast<void***>(ecx + 0x3f8);
    *reinterpret_cast<void***>(ecx + 0x3fc) = eax129;
    v130 = *reinterpret_cast<void***>(eax129 + 44);
    fun_18027690(ecx, 0, v130, 0, edi74, esi75, ebx98, v71, v131);
    v132 = *reinterpret_cast<void***>(ecx + 0x3fc) + 8;
    ax134 = fun_18027620(ecx, v132, edi74, esi75, ebx98, v71, v133);
    return ax134;
}

int16_t fun_18008fc0(void** ecx, signed char a2) {
    void** eax3;
    void** eax4;
    int32_t ecx5;
    void** ecx6;
    void** edx7;
    int16_t ax8;

    if (*reinterpret_cast<void***>(ecx + 0x3f8)) {
        if (a2) {
            eax3 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x3f8));
            *reinterpret_cast<void***>(eax3 + 52)();
        }
        eax4 = *reinterpret_cast<void***>(ecx + 0x1f4);
        if (reinterpret_cast<int1_t>(eax4 == 0xffffffff)) {
            eax4 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x3e4) + 12);
        }
        ecx5 = *reinterpret_cast<int32_t*>(ecx + 0x264);
        if (ecx5 != 0x3f800000) {
            __asm__("fild dword [ebp+0x8]");
            __asm__("fmul dword [esi+0x264]");
            __asm__("fstp dword [ebp+0x8]");
            __asm__("fld dword [ebp+0x8]");
            __asm__("fistp dword [ebp-0x4]");
            eax4 = ecx;
        }
        ecx6 = *reinterpret_cast<void***>(ecx + 0x3f8);
        edx7 = *reinterpret_cast<void***>(ecx6);
        ax8 = reinterpret_cast<int16_t>(*reinterpret_cast<void***>(edx7 + 44)(eax4));
    }
    return ax8;
}

struct s59 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

int16_t fun_1800d1f0(struct s59* a1, void** a2, void** a3);

int16_t fun_1800af10(void** ecx, void** a2) {
    unsigned char ah3;
    void* esp4;
    void** edi5;
    void** eax6;
    void** ecx7;
    void*** esp8;
    void** ebx9;
    void*** esp10;
    void** v11;
    void* esp12;
    void*** esp13;
    struct s9* eax14;
    void** ecx15;
    void** edx16;
    void** eax17;
    void** ecx18;
    void** edx19;

    __asm__("fld dword [esp+0x4]");
    __asm__("fadd dword [esi+0x24]");
    __asm__("fst dword [esi+0x24]");
    __asm__("fcomp dword [esi+0x2c]");
    __asm__("fnstsw ax");
    if (ah3 & 1) {
        return 0;
    } else {
        esp4 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 84 - 4 - 4 - 4);
        edi5 = ecx + 12;
        eax6 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp4) + 48);
        *reinterpret_cast<int16_t*>(&eax6) = fun_1800d1a0(ecx, eax6, ecx, edi5);
        __asm__("fld dword [0x18034238]");
        __asm__("fsub dword [esi+0x28]");
        ecx7 = *reinterpret_cast<void***>(eax6);
        esp8 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp4) - 4 - 4 - 4 - 4 + 12 + 4 - 4);
        __asm__("fdiv dword [esi+0x2c]");
        __asm__("fstp dword [esp]");
        fun_1800d1f0(esp8 + 64, esp8 + 16, ecx7);
        ebx9 = ecx + 24;
        esp10 = esp8 - 4 - 4 - 4 + 12 + 4 - 4;
        v11 = *reinterpret_cast<void***>(ecx + 40);
        fun_1800d1f0(esp10 + 76, ebx9, v11);
        esp12 = reinterpret_cast<void*>(esp10 - 4 - 4 - 4 + 12 + 4);
        esp13 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp12) - 4);
        eax14 = reinterpret_cast<struct s9*>(esp13 - 4 + 92);
        *reinterpret_cast<int16_t*>(&eax14) = fun_1800d150(eax14, esp13 + 40, reinterpret_cast<int32_t>(esp12) + 24);
        __asm__("fld dword [esi+0x24]");
        __asm__("fsub dword [esi+0x2c]");
        ecx15 = eax14->f4;
        edx16 = eax14->f8;
        *reinterpret_cast<void***>(ebx9) = eax14->f0;
        eax17 = *reinterpret_cast<void***>(ecx);
        *reinterpret_cast<void***>(ebx9 + 4) = ecx15;
        ecx18 = *reinterpret_cast<void***>(ecx + 4);
        *reinterpret_cast<void***>(ebx9 + 8) = edx16;
        edx19 = *reinterpret_cast<void***>(ecx + 8);
        *reinterpret_cast<void***>(edi5) = eax17;
        __asm__("fstp dword [esi+0x24]");
        *reinterpret_cast<void***>(edi5 + 4) = ecx18;
        *reinterpret_cast<void***>(edi5 + 8) = edx19;
        return 1;
    }
}

int16_t fun_18008420(void** ecx, void** a2, void** a3, void** a4) {
    void** eax5;
    void** ecx6;
    int16_t ax7;

    eax5 = *reinterpret_cast<void***>(ecx + 0x2c8);
    ecx6 = *reinterpret_cast<void***>(ecx + 0x198);
    fun_1800a980(ecx6, ecx + 0x1a4, eax5);
    *reinterpret_cast<void***>(ecx + 0x2c7) = reinterpret_cast<void**>(0);
    ax7 = fun_18008fc0(ecx, 0);
    if (!*reinterpret_cast<void***>(ecx + 0x284)) {
        return ax7;
    } else {
        goto *reinterpret_cast<void***>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x284)) + 24);
    }
}

void* fun_1800c260(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12);

void** fun_18008970(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8) {
    void** v9;
    void** v10;
    void** ebx11;
    void** v12;
    void** esi13;
    struct s11* esi14;
    void** ebx15;
    void** v16;
    void** edi17;
    struct s11* edi18;
    void** ecx19;
    void* eax20;

    v9 = reinterpret_cast<void**>(__return_address());
    v10 = ebx11;
    v12 = esi13;
    esi14 = *reinterpret_cast<struct s11**>(ecx + 0x2d0);
    ebx15 = *reinterpret_cast<void***>(ecx + 0x394);
    v16 = edi17;
    edi18 = reinterpret_cast<struct s11*>(ecx + 0x2d0);
    if (esi14 == edi18) {
        addr_0x1800899e_2:
        return ebx15;
    } else {
        do {
            ecx19 = esi14->f8;
            eax20 = fun_1800c260(ecx19, v16, v12, v10, v9, a2, a3, a4, a5, a6, a7, a8);
            if (eax20 == 0xffffffff) 
                break;
            esi14 = esi14->f0;
            ebx15 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx15) + reinterpret_cast<uint32_t>(eax20));
        } while (esi14 != edi18);
        goto addr_0x1800899e_2;
    }
    return 0xffffffff;
}

int16_t fun_1800da70(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22);

void* fun_1800c260(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12) {
    void** edi13;
    void** edx14;
    int32_t eax15;
    void** ecx16;
    void** eax17;
    void** edx18;
    void** eax19;
    void** ecx20;
    void* eax21;
    void** ecx22;
    void** edi23;
    void** esi24;

    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx + 0x1a8) == 0xffffffff)) {
        edi13 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x1a4) + 68);
        if (edi13) {
            edx14 = *reinterpret_cast<void***>(edi13);
            eax15 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(edx14 + 20)(edi13));
            if (!*reinterpret_cast<signed char*>(&eax15)) {
                ecx16 = *reinterpret_cast<void***>(ecx + 0x1b8);
                if (!ecx16) {
                    ecx16 = *reinterpret_cast<void***>(edi13 + 16);
                }
                eax17 = *reinterpret_cast<void***>(ecx + 0x1b4);
                if (!eax17) {
                    eax17 = *reinterpret_cast<void***>(edi13 + 16);
                }
                edx18 = *reinterpret_cast<void***>(ecx + 0x1b0);
                eax19 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax17) - reinterpret_cast<unsigned char>(edx18));
                ecx20 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx16) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 0x1ac)));
                if (reinterpret_cast<signed char>(eax19) < reinterpret_cast<signed char>(0)) {
                }
                if (reinterpret_cast<signed char>(ecx20) < reinterpret_cast<signed char>(0)) {
                }
                eax21 = reinterpret_cast<void*>(0);
                if (0) {
                    ecx22 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(edi13 + 28) + 4);
                    *reinterpret_cast<int16_t*>(&eax21) = fun_1800da70(ecx22, 0, 0x3e8, ecx22, edi23, esi24, eax19, 0, ecx20, 0, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                    return eax21;
                } else {
                    return 0xffffffff;
                }
            } else {
                return 0xffffffff;
            }
        } else {
            return 0xffffffff;
        }
    } else {
        return 0xffffffff;
    }
}

int16_t fun_180292c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78);

int16_t fun_18029870(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73) {
    void** esi74;
    void** eax75;
    int16_t ax76;

    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a3 + 44) == 1) || (eax75 = fun_1802b2bb(ecx, 0x26c, esi74, __return_address(), a2, a3, a4, a5, a6), eax75 == 0)) {
        return 0;
    } else {
        ax76 = fun_180292c0(eax75, a2, a3, a4, esi74, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73);
        return ax76;
    }
}

int16_t fun_180298b0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9);

int16_t fun_18029d50(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** esi7;
    void** eax8;
    int16_t ax9;

    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a3 + 44) == 1) || (eax8 = fun_1802b2bb(ecx, 0x1f8, esi7, __return_address(), a2, a3, a4, a5, a6), eax8 == 0)) {
        return 0;
    } else {
        ax9 = fun_180298b0(eax8, a2, a3, a4, esi7, __return_address(), a2, a3, a4);
        return ax9;
    }
}

int16_t fun_18028240(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21);

int16_t fun_18028800(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24);

int16_t fun_18028c80(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16) {
    void** edi17;
    void** esi18;
    void** ebx19;
    void** eax20;
    void** esi21;
    void** eax22;
    int16_t ax23;
    void** eax24;

    eax20 = fun_1802b2bb(ecx, 0x1e0, edi17, esi18, ebx19, __return_address(), a2, a3, a4);
    if (!eax20) {
        esi21 = reinterpret_cast<void**>(0);
    } else {
        ecx = eax20;
        *reinterpret_cast<int16_t*>(&eax20) = fun_18028240(ecx, a2, a3, a4, edi17, esi18, ebx19, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
        esi21 = eax20;
    }
    if (*reinterpret_cast<signed char*>(&a5)) {
        eax22 = fun_1802b2bb(ecx, 0x1c4, edi17, esi18, ebx19, __return_address(), a2, a3, a4);
        if (!eax22) {
            return 0;
        } else {
            ax23 = fun_18028800(eax22, a4, a3, esi21, a6, edi17, esi18, ebx19, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
            return ax23;
        }
    } else {
        eax24 = esi21;
        return *reinterpret_cast<int16_t*>(&eax24);
    }
}

int16_t fun_1800c680(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42);

signed char fun_1800c0c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31) {
    void** eax32;
    void*** esp33;
    void* esp34;
    void** esi35;
    void** edi36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** esi59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;

    if (*reinterpret_cast<void***>(ecx + 0x1c8)) {
        eax32 = *reinterpret_cast<void***>(ecx + 0x1cc);
        esp33 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4);
        fun_1800c650(esp33 + 8, eax32 + 8);
        esp34 = reinterpret_cast<void*>(esp33 - 4 - 4 + 4 + 4);
        fun_1800c680(a2, reinterpret_cast<int32_t>(esp34) + 8, esi35, edi36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27);
        fun_1800c670(reinterpret_cast<int32_t>(esp34) - 4 - 4 + 4 + 4 + 8, esi35, edi36, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31);
        esi59 = *reinterpret_cast<void***>(ecx + 0x1cc);
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi59 + 4)) = *reinterpret_cast<void***>(esi59);
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi59) + 4) = *reinterpret_cast<void***>(esi59 + 4);
        fun_1800c670(esi59 + 8, esi35, edi36, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31);
        *reinterpret_cast<void***>(esi59) = *reinterpret_cast<void***>(ecx + 0x200);
        *reinterpret_cast<void***>(ecx + 0x200) = esi59;
        *reinterpret_cast<void***>(ecx + 0x1c8) = *reinterpret_cast<void***>(ecx + 0x1c8) - 1;
        return 1;
    } else {
        return 0;
    }
}

signed char fun_1800c150(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31) {
    void** eax32;
    void*** esp33;
    void* esp34;
    void** esi35;
    void** edi36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** esi59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;

    if (*reinterpret_cast<void***>(ecx + 0x204)) {
        eax32 = *reinterpret_cast<void***>(ecx + 0x208);
        esp33 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4);
        fun_1800c650(esp33 + 8, eax32 + 8);
        esp34 = reinterpret_cast<void*>(esp33 - 4 - 4 + 4 + 4);
        fun_1800c680(a2, reinterpret_cast<int32_t>(esp34) + 8, esi35, edi36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27);
        fun_1800c670(reinterpret_cast<int32_t>(esp34) - 4 - 4 + 4 + 4 + 8, esi35, edi36, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31);
        esi59 = *reinterpret_cast<void***>(ecx + 0x208);
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi59 + 4)) = *reinterpret_cast<void***>(esi59);
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi59) + 4) = *reinterpret_cast<void***>(esi59 + 4);
        fun_1800c670(esi59 + 8, esi35, edi36, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31);
        *reinterpret_cast<void***>(esi59) = *reinterpret_cast<void***>(ecx + 0x23c);
        *reinterpret_cast<void***>(ecx + 0x23c) = esi59;
        *reinterpret_cast<void***>(ecx + 0x204) = *reinterpret_cast<void***>(ecx + 0x204) - 1;
        return 1;
    } else {
        return 0;
    }
}

int16_t fun_18027d40(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26);

int16_t fun_18027e60(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22) {
    void** eax23;
    int16_t ax24;

    eax23 = fun_1802b2bb(ecx, 0x1bc, __return_address(), a2, a3, a4, a5, a6, a7);
    if (!eax23) {
        return 0;
    } else {
        ax24 = fun_18027d40(eax23, a2, a3, a4, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
        return ax24;
    }
}

struct s60 {
    signed char[12] pad12;
    int32_t f12;
    int32_t f16;
};

void fun_18027820(void** ecx, struct s60* a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8) {
    void** v9;
    void** ebx10;
    void** v11;
    void** esi12;
    struct s60* esi13;
    void*** esp14;
    void** v15;
    void** edi16;
    void** edi17;
    void** ebx18;
    void* esp19;
    void** edx20;
    int32_t ecx21;
    void** eax22;
    void** v23;
    void** v24;

    v9 = ebx10;
    v11 = esi12;
    esi13 = a2;
    esp14 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 24 - 4 - 4 - 4);
    v15 = edi16;
    edi17 = a3;
    ebx18 = ecx;
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(edi17) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(edi17 == 0))) {
        esp19 = reinterpret_cast<void*>(esp14 - 4);
        edx20 = edi17;
        do {
            --edx20;
        } while (edx20);
        esp14 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp19) + 4);
    }
    ecx21 = esi13->f16;
    if (ecx21 < 0) {
        eax22 = reinterpret_cast<void**>(esi13->f12 * reinterpret_cast<unsigned char>(a4));
    } else {
        eax22 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a4) << *reinterpret_cast<unsigned char*>(&ecx21));
    }
    fun_18027690(ebx18, esp14 - 4 + 16, edi17, eax22, v15, v11, v9, v23, v24);
    return;
}

int16_t fun_180091e0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void* esp45;
    int16_t ax46;

    esp45 = __zero_stack_offset();
    if (a2) {
        fun_1800c650(a2, reinterpret_cast<int32_t>(esp45) + 8);
        esp45 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp45) - 4 - 4 + 4 + 4);
    }
    ax46 = fun_1800c670(reinterpret_cast<int32_t>(esp45) + 8, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    return ax46;
}

void** g18038570 = reinterpret_cast<void**>(0);

void** g18038574 = reinterpret_cast<void**>(0);

void** g18038578 = reinterpret_cast<void**>(0);

void** g18038580 = reinterpret_cast<void**>(0);

void** g18038584 = reinterpret_cast<void**>(0);

void** g18038588 = reinterpret_cast<void**>(0);

void** g18038590 = reinterpret_cast<void**>(0);

void** g18038594 = reinterpret_cast<void**>(0);

void** g18038598 = reinterpret_cast<void**>(0);

void fun_1800d330(void** ecx) {
    void** edx2;
    void** edx3;
    void** edx4;
    void** edx5;
    void** ecx6;
    void** edx7;
    void** edx8;
    void** edx9;
    void** ecx10;
    void** edx11;
    void** edx12;

    edx2 = g18038570;
    *reinterpret_cast<void***>(ecx) = edx2;
    edx3 = g18038574;
    *reinterpret_cast<void***>(ecx + 4) = edx3;
    edx4 = g18038578;
    *reinterpret_cast<void***>(ecx + 8) = edx4;
    edx5 = g18038580;
    ecx6 = ecx + 12;
    *reinterpret_cast<void***>(ecx + 12) = edx5;
    edx7 = g18038584;
    *reinterpret_cast<void***>(ecx6 + 4) = edx7;
    edx8 = g18038588;
    *reinterpret_cast<void***>(ecx6 + 8) = edx8;
    edx9 = g18038590;
    ecx10 = ecx + 24;
    *reinterpret_cast<void***>(ecx + 24) = edx9;
    edx11 = g18038594;
    *reinterpret_cast<void***>(ecx10 + 4) = edx11;
    edx12 = g18038598;
    *reinterpret_cast<void***>(ecx10 + 8) = edx12;
    return;
}

void fun_180273d0();

int32_t fun_180273b0(int32_t ecx);

void** fun_18027370(void** ecx) {
    int32_t eax2;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(0);
    eax2 = fun_1800d9b0(ecx);
    if (!eax2) {
        *reinterpret_cast<void***>(ecx + 20) = reinterpret_cast<void**>(fun_180273d0);
        return ecx;
    } else {
        *reinterpret_cast<void***>(ecx + 20) = reinterpret_cast<void**>(fun_180273b0);
        return ecx;
    }
}

int32_t fun_1800d9b0(void** ecx) {
    __asm__("btr dword [esp], 0x15");
    return 0;
}

uint32_t fun_1800d9d0(void** ecx) {
    return static_cast<uint32_t>(static_cast<uint1_t>(__intrinsic() >> 23));
}

void** fun_18018b70(void** ecx) {
    return 0x180458dc;
}

int32_t CreateEventA = 0x35f56;

void** fun_1802b7d7(void** ecx, void** a2, void** a3, void** a4, void** a5, int32_t a6, int32_t a7, int32_t a8, void** a9, int32_t a10, int32_t a11);

void fun_1800d550(int32_t a1);

int32_t SetThreadPriority = 0x35f42;

int16_t fun_1800d4f0(void** ecx, int32_t a2, void** a3) {
    void** eax4;
    void** eax5;
    void** edi6;
    int32_t esi7;
    void** eax8;

    eax4 = ecx + 4;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(eax4) = eax4;
    *reinterpret_cast<void***>(ecx + 8) = eax4;
    *reinterpret_cast<void***>(ecx + 52) = a3;
    *reinterpret_cast<void***>(ecx + 60) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 64) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 40) = reinterpret_cast<void**>(0);
    eax5 = reinterpret_cast<void**>(CreateEventA());
    *reinterpret_cast<void***>(ecx + 56) = eax5;
    *reinterpret_cast<void***>(ecx + 48) = reinterpret_cast<void**>(0xffffffff);
    eax8 = fun_1802b7d7(ecx, fun_1800d550, 0, ecx, 0, 0, 0, 0, edi6, esi7, __return_address());
    *reinterpret_cast<void***>(ecx + 36) = eax8;
    SetThreadPriority();
    goto 0;
}

int32_t InitializeCriticalSection = 0x3609c;

struct s62 {
    struct s62* f0;
    struct s62** f4;
};

struct s61 {
    signed char[28] pad28;
    int32_t f28;
    int32_t f32;
    int32_t f36;
    struct s62* f40;
    signed char[24] pad68;
    struct s62* f68;
};

void fun_18029df0(struct s61* a1);

int16_t fun_18029d90(void** ecx, int32_t a2) {
    void** eax3;
    int32_t esi4;
    void** eax5;
    void** eax6;

    *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0);
    eax3 = ecx + 40;
    *reinterpret_cast<void***>(ecx + 36) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 68) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(eax3) = eax3;
    *reinterpret_cast<void***>(ecx + 44) = eax3;
    InitializeCriticalSection(ecx, esi4, __return_address());
    eax5 = reinterpret_cast<void**>(CreateEventA(0, 0));
    *reinterpret_cast<void***>(ecx + 28) = eax5;
    eax6 = fun_1802b7d7(ecx, fun_18029df0, 0, ecx, 0, 0, 0, 0, ecx, esi4, __return_address());
    *reinterpret_cast<void***>(ecx + 24) = eax6;
    SetThreadPriority();
    goto 0;
}

int32_t waveOutGetNumDevs = 0x35e68;

int32_t waveOutGetDevCapsA = 0x35e52;

struct s63 {
    uint32_t f0;
    unsigned char f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
    signed char[3] pad16;
    void** f16;
    signed char[7] pad24;
    int32_t f24;
    void** f28;
    signed char[7] pad36;
    void** f36;
};

int16_t fun_18009210(void** ecx, void** a2, int32_t a3, void** a4);

int16_t fun_18027070(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9);

int16_t fun_1802a840(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7);

int16_t fun_180098b0(void** ecx, void** a2, struct s29* a3) {
    int32_t eax4;
    void** ecx5;
    void** eax6;
    void** eax7;
    void* esp8;
    int32_t eax9;
    void* esp10;
    unsigned char v11;
    void** ecx12;
    void** v13;
    void** eax14;
    int32_t eax15;
    int32_t v16;
    void*** esp17;
    void** ebx18;
    struct s63* v19;
    void* esp20;
    void** eax21;
    uint32_t eax22;
    uint32_t eax23;
    void** ecx24;
    void*** ecx25;
    void*** esp26;
    uint32_t ecx27;
    void** edi28;
    void** ebp29;
    void** ebx30;
    void* esp31;
    void** eax32;
    void* esp33;
    void** v34;
    void*** esp35;
    void* esp36;
    void** ebp37;
    void** eax38;
    void** ecx39;
    void** esi40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    unsigned char eax45;
    void** ebp46;
    void** v47;
    void* esp48;
    void* esp49;
    void** eax50;
    void* esp51;
    int32_t eax52;
    void** edx53;
    void** ecx54;
    void** eax55;
    void** v56;
    void** eax57;
    void*** esp58;
    void** ecx59;
    void*** esp60;
    void** esi61;
    void** eax62;
    void** ecx63;
    void*** esp64;
    void** ecx65;
    int32_t* v66;
    int32_t v67;
    int32_t v68;
    void** v69;
    void*** esp70;
    void** ecx71;
    void*** esp72;

    eax4 = reinterpret_cast<int32_t>(waveOutGetNumDevs());
    if (!eax4) {
        return 6;
    }
    ecx5 = *reinterpret_cast<void***>(ecx + 0x104);
    eax6 = *reinterpret_cast<void***>(ecx5);
    eax7 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax6 + 4)(0x180384b8, 0x18038538, 0xff));
    esp8 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 88 - 4 - 4 + 4 - 4 - 4 - 4 - 4 + 4);
    eax9 = reinterpret_cast<int32_t>(waveOutGetDevCapsA());
    esp10 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp8) - 4 - 4 - 4 - 4 + 4);
    if (eax9) {
        lstrcpyA(reinterpret_cast<int32_t>(esp10) + 48, "Unknown Device");
        esp10 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp10) - 4 - 4 - 4 + 4);
    }
    if (v11 & 16 || (ecx12 = *reinterpret_cast<void***>(ecx + 0x104), v13 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp10) + 48), eax14 = *reinterpret_cast<void***>(ecx12), eax15 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(eax14 + 4)()), esp10 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp10) - 4 - 4 - 4 - 4 + 4), !!eax15)) {
        goto v16;
    }
    esp17 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp10) - 4 - 4 - 4);
    ebx18 = v19->f8;
    if (!ebx18) {
        esp20 = reinterpret_cast<void*>(esp17 - 4);
        eax21 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp20) + 64);
        *reinterpret_cast<int16_t*>(&eax21) = fun_18009210(ecx, eax21, "SamplesPerSec", 22);
        esp17 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp20) - 4 - 4 - 4 + 12 + 4);
        if (eax21 == 11) {
            ebx18 = reinterpret_cast<void**>(0x2b11);
        } else {
            eax22 = reinterpret_cast<uint32_t>(eax21 - 44);
            eax23 = -eax22;
            ebx18 = reinterpret_cast<void**>((eax23 - (eax23 + reinterpret_cast<uint1_t>(eax23 < eax23 + reinterpret_cast<uint1_t>(!!eax22))) & 0xffffa9de) + 0xac44);
        }
    }
    ecx24 = *reinterpret_cast<void***>(ecx + 0x150);
    ecx25 = reinterpret_cast<void***>(ecx24 - 3);
    esp26 = esp17 - 4 - 4;
    ecx27 = -reinterpret_cast<uint32_t>(ecx25);
    fun_18027240(esp26 + 40, (ecx27 - (ecx27 + reinterpret_cast<uint1_t>(ecx27 < ecx27 + reinterpret_cast<uint1_t>(!!ecx25))) & 0xfffffffe) + 4, ebx18, 16, edi28, ebp29, ebx30, 0x18038518, v13, 0, eax7, reinterpret_cast<int32_t>(esp8) + 40, 52, 0x180384b8, 0x18038538, 0xff);
    esp31 = reinterpret_cast<void*>(esp26 - 4 - 4 - 4 + 16 + 4 - 4);
    eax32 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp31) + 64);
    *reinterpret_cast<int16_t*>(&eax32) = fun_18009210(ecx, eax32, "Latency", 0);
    esp33 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp31) - 4 - 4 - 4 + 12 + 4);
    v34 = eax32;
    if (!eax32) {
        esp35 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp33) - 4);
        *reinterpret_cast<int16_t*>(&eax32) = fun_18009210(ecx, esp35 + 64, "WaveBlocks", eax32);
        esp36 = reinterpret_cast<void*>(esp35 - 4 - 4 - 4 + 12 + 4 - 4);
        ebp37 = eax32;
        *reinterpret_cast<int16_t*>(&eax32) = fun_18009210(ecx, reinterpret_cast<int32_t>(esp36) + 64, "WaveBlockLen", 0);
        eax38 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax32) * reinterpret_cast<unsigned char>(ebp37));
        ecx39 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx18) * 4);
        *reinterpret_cast<int16_t*>(&eax38) = fun_1800da70(ecx39, eax38, 0x3e8, ecx39, edi28, ebp29, ebx30, 0x18038518, v13, v34, eax7, reinterpret_cast<int32_t>(esp8) + 40, 52, 0x180384b8, 0x18038538, 0xff, esi40, eax7, v41, v42, v43, v44);
        esp33 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp36) - 4 - 4 - 4 + 12 + 4 - 4 - 4 - 4 - 4 + 12 + 4);
        v34 = eax38;
    }
    eax45 = v19->f4;
    ebp46 = reinterpret_cast<void**>(0);
    v47 = reinterpret_cast<void**>(0);
    if (eax45 & 2) {
        ebp46 = reinterpret_cast<void**>(1);
    }
    if (eax45 & 4) {
        ebp46 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebp46) | 2);
    }
    esp48 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp33) - 4);
    *reinterpret_cast<int16_t*>(&eax45) = fun_18009210(ecx, reinterpret_cast<int32_t>(esp48) + 64, "DirectSound", 0xff);
    esp49 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp48) - 4 - 4 - 4 + 12 + 4 - 4);
    eax50 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp49) + 64);
    *reinterpret_cast<int16_t*>(&eax50) = fun_18009210(ecx, eax50, "waveOut", 0xff);
    esp51 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp49) - 4 - 4 - 4 + 12 + 4);
    eax52 = v19->f24;
    if (eax52 == 2) 
        goto addr_0x18009a58_18;
    if (eax52) 
        goto addr_0x18009ad0_20;
    if (!reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax45) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax45 == 0))) 
        goto addr_0x18009a58_18;
    if (eax45 != 0xffffffff) 
        goto addr_0x18009ad0_20;
    if (!reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax50) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax50 == 0))) 
        goto addr_0x18009ad0_20;
    addr_0x18009a58_18:
    edx53 = v19->f12;
    if (!edx53 && (ebp46 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebp46) | 0x600), !!(v19->f4 & 1))) {
        ebp46 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebp46) | 0x100);
    }
    ecx54 = v19->f28;
    if (!ecx54) {
        ecx54 = v34;
    }
    eax55 = reinterpret_cast<void**>(0);
    if (v19->f0 >= 40) {
        eax55 = v19->f36;
    }
    if (edx53) 
        goto addr_0x18009a8d_30;
    v56 = *reinterpret_cast<void***>(ecx + 0x154);
    eax57 = v19->f16;
    esp58 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp51) - 4 - 4 - 4 - 4 - 4);
    ecx59 = reinterpret_cast<void**>(esp58 + 52);
    esp60 = esp58 - 4;
    *reinterpret_cast<int16_t*>(&eax57) = fun_18027070(ecx59, esp60 + 40, ecx59, ebp46, ecx54, eax57, 0, eax55, v56);
    esp51 = reinterpret_cast<void*>(esp60 - 4 - 4 - 4 + 32 + 4);
    v47 = eax57;
    addr_0x18009ad0_20:
    esi61 = v47;
    addr_0x18009ad4_32:
    if (!0 && (v19->f24 == 1 || !v19->f24 && eax50)) {
        eax62 = v34;
        if (v19->f28) {
            eax62 = v19->f28;
        }
        ecx63 = g18045874;
        esp64 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp51) - 4 - 4 - 4);
        ecx65 = reinterpret_cast<void**>(esp64 - 4 + 32);
        fun_1802a840(ecx65, ecx65, esp64 + 44, ebp46, eax62, reinterpret_cast<int32_t>(esp8) + 40, ecx63);
    }
    if (!esi61) {
        *v66 = 0;
        goto v67;
    } else {
        goto v68;
    }
    addr_0x18009a8d_30:
    v69 = *reinterpret_cast<void***>(ecx + 0x154);
    esp70 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp51) - 4 - 4 - 4 - 4 - 4);
    ecx71 = reinterpret_cast<void**>(esp70 + 52);
    esp72 = esp70 - 4;
    *reinterpret_cast<int16_t*>(&eax55) = fun_18027110(ecx71, esp72 + 40, ecx71, ebp46, ecx54, edx53, 0, eax55, v69);
    esp51 = reinterpret_cast<void*>(esp72 - 4 - 4 - 4 + 32 + 4);
    esi61 = eax55;
    goto addr_0x18009ad4_32;
}

struct s64 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    int32_t f12;
    signed char[8] pad24;
    int32_t f24;
    int32_t f28;
    signed char[12] pad44;
    signed char f44;
};

void fun_1802b120(struct s64* ecx, void* a2, void** a3);

void fun_18024970(void** ecx, void* a2) {
    fun_1802b120(ecx + 44, a2, ecx + 20);
    return;
}

struct s65 {
    struct s65* f0;
    signed char[4] pad8;
    void** f8;
};

int16_t fun_18006e00(void** ecx, void** a2, void** a3, void** a4, struct s27* a5, void** a6) {
    void** v7;
    void** ebx8;
    void** v9;
    void** ebp10;
    void** v11;
    void** esi12;
    void** v13;
    void** edi14;
    void** ebp15;
    void* esp16;
    struct s12* edi17;
    int32_t ecx18;
    void*** esi19;
    struct s27* eax20;
    void* esp21;
    struct s11* eax22;
    struct s65* eax23;
    void** eax24;
    void** eax25;
    void** al26;
    void*** edi27;
    int32_t ecx28;
    void*** esi29;
    void*** edi30;
    int32_t ecx31;
    void*** esi32;
    int1_t zf33;
    void** eax34;
    void** ecx35;
    void** edx36;
    void** eax37;

    v7 = ebx8;
    v9 = ebp10;
    v11 = esi12;
    v13 = edi14;
    ebp15 = ecx;
    fun_180274d0(ecx);
    esp16 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 12 - 4 - 4 - 4 - 4 - 4 + 4);
    *reinterpret_cast<void***>(ebp15 + 0x19c) = a2;
    edi17 = reinterpret_cast<struct s12*>(ebp15 + 0x1a4);
    ecx18 = 55;
    esi19 = reinterpret_cast<void***>(0x180380f0);
    *reinterpret_cast<void***>(ebp15 + 0x198) = a3;
    eax20 = a5;
    *reinterpret_cast<void***>(ebp15 + 0x1a0) = a4;
    while (ecx18) {
        --ecx18;
        edi17->f0 = *esi19;
        edi17 = reinterpret_cast<struct s12*>(reinterpret_cast<uint32_t>(edi17) + 4);
        esi19 = esi19 + 4;
    }
    *reinterpret_cast<struct s27**>(ebp15 + 0x280) = eax20;
    *reinterpret_cast<void***>(ebp15 + 0x284) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x288) = reinterpret_cast<void**>(0x7fff0000);
    fun_1800ae80(ebp15 + 0x28c);
    esp21 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp16) - 4 + 4);
    *reinterpret_cast<void***>(ebp15 + 0x2c4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x2c5) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x2c6) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x2c7) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x2c8) = reinterpret_cast<void**>(1);
    eax22 = reinterpret_cast<struct s11*>(ebp15 + 0x2d0);
    *reinterpret_cast<void***>(ebp15 + 0x2cc) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x2dc) = reinterpret_cast<void**>(0);
    eax22->f0 = eax22;
    *reinterpret_cast<struct s11**>(ebp15 + 0x2d4) = eax22;
    *reinterpret_cast<void***>(ebp15 + 0x2e0) = reinterpret_cast<void**>(0);
    eax23 = reinterpret_cast<struct s65*>(ebp15 + 0x2e4);
    *reinterpret_cast<void***>(ebp15 + 0x2ec) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x314) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x318) = reinterpret_cast<void**>(0);
    eax23->f0 = eax23;
    *reinterpret_cast<struct s65**>(ebp15 + 0x2e8) = eax23;
    *reinterpret_cast<void***>(ebp15 + 0x31c) = reinterpret_cast<void**>(0);
    eax24 = ebp15 + 0x320;
    *reinterpret_cast<void***>(ebp15 + 0x328) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x350) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x354) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(eax24) = eax24;
    *reinterpret_cast<void***>(ebp15 + 0x324) = eax24;
    *reinterpret_cast<void***>(ebp15 + 0x358) = reinterpret_cast<void**>(0);
    eax25 = ebp15 + 0x35c;
    *reinterpret_cast<void***>(ebp15 + 0x364) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x38c) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x390) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(eax25) = eax25;
    *reinterpret_cast<void***>(ebp15 + 0x360) = eax25;
    al26 = a6;
    edi27 = reinterpret_cast<void***>(ebp15 + 0x39c);
    ecx28 = 9;
    esi29 = reinterpret_cast<void***>(0x180381d0);
    *reinterpret_cast<void***>(ebp15 + 0x398) = reinterpret_cast<void**>(0);
    while (ecx28) {
        --ecx28;
        *edi27 = *esi29;
        edi27 = edi27 + 4;
        esi29 = esi29 + 4;
    }
    edi30 = reinterpret_cast<void***>(ebp15 + 0x3c0);
    ecx31 = 9;
    esi32 = reinterpret_cast<void***>(0x180381f8);
    zf33 = al26 == 0;
    while (ecx31) {
        --ecx31;
        *edi30 = *esi32;
        edi30 = edi30 + 4;
        esi32 = esi32 + 4;
    }
    *reinterpret_cast<void***>(ebp15 + 0x3e4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x3e8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x3ec) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x3f0) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x3f4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x3f8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15 + 0x3fc) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp15) = reinterpret_cast<void**>(0x18034520);
    eax34 = reinterpret_cast<void**>(0x18038220);
    if (zf33) {
        eax34 = reinterpret_cast<void**>(0x18038230);
    }
    ecx35 = *reinterpret_cast<void***>(ebp15 + 0x198);
    *reinterpret_cast<int16_t*>(&eax34) = fun_18001020(ecx35, reinterpret_cast<int32_t>(esp21) + 16, eax34, v13, v11, v9, v7);
    edx36 = ebp15 + 0x1cc;
    *reinterpret_cast<void***>(edx36) = *reinterpret_cast<void***>(eax34);
    *reinterpret_cast<void***>(edx36 + 4) = *reinterpret_cast<void***>(eax34 + 4);
    *reinterpret_cast<void***>(edx36 + 8) = *reinterpret_cast<void***>(eax34 + 8);
    eax37 = ebp15;
    return *reinterpret_cast<int16_t*>(&eax37);
}

int16_t fun_1800b040(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6);

int16_t fun_1800bcc0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** eax8;
    int16_t ax9;

    eax8 = fun_1802b2bb(ecx, 92, __return_address(), a2, a3, a4, a5, a6, a7);
    if (!eax8) {
        return 0;
    } else {
        ax9 = fun_1800b040(eax8, a2, a3, a4, a5, a6);
        return ax9;
    }
}

int32_t SetEvent = 0x35f36;

int32_t WaitForSingleObject = 0x35f74;

struct s66 {
    signed char[8] pad8;
    int32_t f8;
};

struct s67 {
    signed char[8] pad8;
    int32_t f8;
};

int32_t DeleteCriticalSection = 0x360b8;

void fun_18029e00(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36) {
    void** v37;
    void** v38;
    void** ebx39;
    void** ebx40;
    void** eax41;
    void** v42;
    void** ecx43;
    void** eax44;
    void** v45;
    void** esi46;
    void** v47;
    void** edi48;
    int32_t ecx49;
    struct s66* edx50;
    struct s66** v51;
    struct s67* ecx52;
    struct s67** v53;
    void** eax54;
    void** ecx55;
    void** v56;
    int32_t esi57;
    void** ecx58;
    void** edx59;
    void** eax60;
    void** eax61;
    void** edx62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    int32_t v68;

    v37 = reinterpret_cast<void**>(__return_address());
    v38 = ebx39;
    ebx40 = ecx;
    if (*reinterpret_cast<void***>(ebx40 + 24) != 0xffffffff) {
        eax41 = reinterpret_cast<void**>(CreateEventA(0, 0, 0, 0, v38));
        *reinterpret_cast<void***>(ebx40 + 32) = eax41;
        v42 = *reinterpret_cast<void***>(ebx40 + 28);
        SetEvent(v42, 0, 0, 0, 0, v38);
        ecx43 = *reinterpret_cast<void***>(ebx40 + 32);
        WaitForSingleObject(ecx43, 0x3e8, v42, 0, 0, 0, 0, v38);
    }
    eax44 = *reinterpret_cast<void***>(ebx40 + 36);
    v45 = esi46;
    v47 = edi48;
    if (eax44) {
        do {
            ecx49 = 5;
            while (ecx49) {
                --ecx49;
            }
            edx50 = *v51;
            edx50->f8(v51, v47, v45, v38);
            ecx52 = *v53;
            ecx52->f8(v53, v51, v47, v45, v38);
            eax54 = *reinterpret_cast<void***>(ebx40 + 40);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax54 + 4)) = *reinterpret_cast<void***>(eax54);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax54) + 4) = *reinterpret_cast<void***>(eax54 + 4);
            *reinterpret_cast<void***>(eax54) = *reinterpret_cast<void***>(ebx40 + 68);
            *reinterpret_cast<void***>(ebx40 + 68) = eax54;
            ecx55 = *reinterpret_cast<void***>(ebx40 + 36) - 1;
            *reinterpret_cast<void***>(ebx40 + 36) = ecx55;
        } while (ecx55);
    }
    v56 = ebx40;
    DeleteCriticalSection();
    esi57 = CloseHandle;
    esi57();
    esi57();
    ecx58 = *reinterpret_cast<void***>(ebx40 + 40);
    edx59 = ebx40 + 40;
    if (ecx58 != edx59) {
        do {
            eax60 = ecx58;
            ecx58 = *reinterpret_cast<void***>(ecx58);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax60 + 4)) = *reinterpret_cast<void***>(eax60);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax60) + 4) = *reinterpret_cast<void***>(eax60 + 4);
            *reinterpret_cast<void***>(eax60) = *reinterpret_cast<void***>(ebx40 + 68);
            *reinterpret_cast<void***>(ebx40 + 68) = eax60;
            *reinterpret_cast<void***>(ebx40 + 36) = *reinterpret_cast<void***>(ebx40 + 36) - 1;
        } while (ecx58 != edx59);
    }
    eax61 = *reinterpret_cast<void***>(ebx40 + 68);
    if (eax61) {
        do {
            edx62 = *reinterpret_cast<void***>(eax61);
            *reinterpret_cast<void***>(ebx40 + 68) = edx62;
            fun_1802b2b0(ecx58, eax61, v56, v47, v45, v38, v63, v64, v65, v66, v67, v37, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36);
            eax61 = *reinterpret_cast<void***>(ebx40 + 68);
        } while (eax61);
    }
    goto v68;
}

void** fun_1800d700(void** ecx);

void fun_1800d690(void** ecx, void** a2) {
    void** esi3;
    void** eax4;
    void** ecx5;
    void** eax6;
    void** edx7;
    void** eax8;
    void** eax9;

    esi3 = ecx;
    eax4 = *reinterpret_cast<void***>(esi3 + 4);
    ecx5 = esi3 + 4;
    if (eax4 == ecx5) {
        addr_0x1800d6ef_2:
        eax6 = fun_1800d700(esi3);
        *reinterpret_cast<void***>(esi3 + 48) = eax6;
        return;
    } else {
        edx7 = a2;
        do {
            if (*reinterpret_cast<void***>(eax4 + 8) == edx7) 
                break;
            eax4 = *reinterpret_cast<void***>(eax4);
        } while (eax4 != ecx5);
        goto addr_0x1800d6ac_6;
    }
    if (!*reinterpret_cast<void***>(esi3 + 64)) {
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax4 + 4)) = *reinterpret_cast<void***>(eax4);
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax4) + 4) = *reinterpret_cast<void***>(eax4 + 4);
        *reinterpret_cast<void***>(eax4) = *reinterpret_cast<void***>(esi3 + 32);
        *reinterpret_cast<void***>(esi3 + 32) = eax4;
        *reinterpret_cast<void***>(esi3) = *reinterpret_cast<void***>(esi3) - 1;
        goto addr_0x1800d6ef_2;
    } else {
        *reinterpret_cast<void***>(eax4 + 20) = reinterpret_cast<void**>(0);
        eax8 = fun_1800d700(esi3);
        *reinterpret_cast<void***>(esi3 + 48) = eax8;
        return;
    }
    addr_0x1800d6ac_6:
    eax9 = fun_1800d700(esi3);
    *reinterpret_cast<void***>(esi3 + 48) = eax9;
    return;
}

void fun_1800d560(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34) {
    void** v35;
    void** v36;
    void** esi37;
    void** v38;
    void** edi39;
    void** esi40;
    void** eax41;
    void** v42;
    void** ecx43;
    void** v44;
    int32_t edi45;
    void** v46;
    void** v47;
    void** ecx48;
    void** edx49;
    void** eax50;
    void** eax51;
    void** ecx52;

    v35 = reinterpret_cast<void**>(__return_address());
    v36 = esi37;
    v38 = edi39;
    esi40 = ecx;
    eax41 = reinterpret_cast<void**>(CreateEventA(0, 0, 0, 0, v38, v36, v35));
    *reinterpret_cast<void***>(esi40 + 60) = eax41;
    v42 = *reinterpret_cast<void***>(esi40 + 56);
    SetEvent(v42, 0, 0, 0, 0, v38, v36, v35);
    ecx43 = *reinterpret_cast<void***>(esi40 + 60);
    v44 = ecx43;
    WaitForSingleObject();
    edi45 = CloseHandle;
    v46 = *reinterpret_cast<void***>(esi40 + 60);
    edi45();
    v47 = *reinterpret_cast<void***>(esi40 + 56);
    edi45();
    ecx48 = *reinterpret_cast<void***>(esi40 + 4);
    edx49 = esi40 + 4;
    if (ecx48 != edx49) {
        do {
            eax50 = ecx48;
            ecx48 = *reinterpret_cast<void***>(ecx48);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax50 + 4)) = *reinterpret_cast<void***>(eax50);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax50) + 4) = *reinterpret_cast<void***>(eax50 + 4);
            *reinterpret_cast<void***>(eax50) = *reinterpret_cast<void***>(esi40 + 32);
            *reinterpret_cast<void***>(esi40 + 32) = eax50;
            *reinterpret_cast<void***>(esi40) = *reinterpret_cast<void***>(esi40) - 1;
        } while (ecx48 != edx49);
    }
    eax51 = *reinterpret_cast<void***>(esi40 + 32);
    if (eax51) {
        do {
            ecx52 = *reinterpret_cast<void***>(eax51);
            *reinterpret_cast<void***>(esi40 + 32) = ecx52;
            fun_1802b2b0(ecx52, eax51, v47, v46, v44, 0x3e8, v42, 0, 0, 0, 0, v38, v36, v35, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34);
            eax51 = *reinterpret_cast<void***>(esi40 + 32);
        } while (eax51);
    }
    goto v44;
}

void fun_1800b010(struct s10* ecx, void*** a2, void** a3) {
    *reinterpret_cast<void***>(*reinterpret_cast<void***>(a3 + 4)) = *reinterpret_cast<void***>(a3);
    *reinterpret_cast<void***>(*reinterpret_cast<void***>(a3) + 4) = *reinterpret_cast<void***>(a3 + 4);
    *reinterpret_cast<void***>(a3) = ecx->f20;
    ecx->f20 = a3;
    ecx->f0 = ecx->f0 - 1;
    *a2 = a3;
    return;
}

int16_t fun_18009210(void** ecx, void** a2, int32_t a3, void** a4) {
    void** ecx5;
    void** edi6;
    void** ecx7;

    ecx5 = *reinterpret_cast<void***>(ecx + 0x104);
    edi6 = *reinterpret_cast<void***>(ecx5);
    *reinterpret_cast<void***>(edi6 + 4)();
    ecx7 = *reinterpret_cast<void***>(ecx + 0x104);
    *reinterpret_cast<void***>(edi6 + 4)(ecx7);
    goto "default";
}

int16_t fun_1800da70(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22) {
    int32_t eax23;

    eax23 = reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(a2) * reinterpret_cast<unsigned char>(a3) + (reinterpret_cast<signed char>(a4) >> 1)) / reinterpret_cast<signed char>(a4);
    return *reinterpret_cast<int16_t*>(&eax23);
}

int16_t fun_1800dcc0(void** a1) {
    void** ecx2;
    int32_t eax3;

    ecx2 = a1;
    eax3 = 0;
    if (ecx2) {
        do {
            ecx2 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx2) & reinterpret_cast<unsigned char>(ecx2 + 0xffffffff));
            ++eax3;
        } while (ecx2);
    }
    return *reinterpret_cast<int16_t*>(&eax3);
}

int16_t fun_1800cc30(void** ecx, void** a2) {
    void** edx3;
    void** esi4;
    void** edi5;
    void** eax6;

    edx3 = *reinterpret_cast<void***>(ecx + 36);
    esi4 = ecx + 36;
    if (edx3 == esi4) {
        addr_0x1800cc4e_2:
        return 0;
    } else {
        edi5 = a2;
        do {
            eax6 = *reinterpret_cast<void***>(edx3 + 8);
            if (*reinterpret_cast<void***>(eax6 + 8) == edi5) 
                break;
            edx3 = *reinterpret_cast<void***>(edx3);
        } while (edx3 != esi4);
        goto addr_0x1800cc4e_2;
    }
    *reinterpret_cast<void***>(*reinterpret_cast<void***>(edx3 + 4)) = *reinterpret_cast<void***>(edx3);
    *reinterpret_cast<void***>(*reinterpret_cast<void***>(edx3) + 4) = *reinterpret_cast<void***>(edx3 + 4);
    *reinterpret_cast<void***>(edx3) = *reinterpret_cast<void***>(ecx + 48);
    *reinterpret_cast<void***>(ecx + 48) = edx3;
    *reinterpret_cast<void***>(ecx + 32) = *reinterpret_cast<void***>(ecx + 32) - 1;
    return *reinterpret_cast<int16_t*>(&eax6);
}

int16_t fun_1800d5f0(void** ecx, void** a2, void** a3, void** a4) {
    void** v5;
    void** ebx6;
    void** edx7;
    void** edx8;
    void** eax9;
    void** v10;
    void** eax11;
    void** ebp12;
    void** ebp13;
    void** ebx14;
    void** edi15;
    int32_t ecx16;
    void** eax17;

    v5 = reinterpret_cast<void**>(__return_address());
    ebx6 = ecx;
    edx7 = *reinterpret_cast<void***>(ebx6 + 40);
    edx8 = edx7 + 1;
    *reinterpret_cast<void***>(ebx6 + 40) = edx8;
    eax9 = reinterpret_cast<void**>(timeGetTime());
    v10 = a4;
    eax11 = *reinterpret_cast<void***>(ebx6 + 32);
    ebp12 = ebx6 + 4;
    if (!eax11) {
        eax11 = fun_1802b2bb(a2, 28, ebp13, ebx14, edx8, a2, eax9, a3, v10);
    } else {
        *reinterpret_cast<void***>(ebx6 + 32) = *reinterpret_cast<void***>(eax11);
    }
    if (eax11) {
        edi15 = eax11 + 8;
        if (edi15) {
            ecx16 = 5;
            while (ecx16) {
                --ecx16;
                *reinterpret_cast<void***>(edi15) = v5;
                edi15 = edi15 + 4;
            }
        }
        *reinterpret_cast<void***>(eax11) = ebp12;
        *reinterpret_cast<void***>(eax11 + 4) = *reinterpret_cast<void***>(ebp12 + 4);
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebp12 + 4)) = eax11;
        *reinterpret_cast<void***>(ebp12 + 4) = eax11;
        *reinterpret_cast<void***>(ebx6) = *reinterpret_cast<void***>(ebx6) + 1;
    }
    eax17 = fun_1800d700(ebx6);
    *reinterpret_cast<void***>(ebx6 + 48) = eax17;
    SetEvent(ebx6);
    goto v10;
}

int16_t fun_1800cb00(void** ecx, void** a2, void** a3, signed char a4) {
    void** v5;
    void** v6;
    void** ebx7;
    void** v8;
    void** ebp9;
    void** v10;
    void** esi11;
    void** esi12;
    void** v13;
    void** edi14;
    void** ebx15;
    void** edi16;
    void** ebp17;
    void** v18;
    void** eax19;
    void** ecx20;
    void** edi21;
    void** ebp22;
    void** eax23;
    void** ecx24;
    void** eax25;
    void** edx26;
    void** eax27;
    void** eax28;
    void** edi29;
    void** ecx30;
    void** eax31;

    v5 = reinterpret_cast<void**>(__return_address());
    v6 = ebx7;
    v8 = ebp9;
    v10 = esi11;
    esi12 = ecx;
    v13 = edi14;
    ebx15 = reinterpret_cast<void**>(0);
    edi16 = *reinterpret_cast<void***>(esi12 + 16);
    ebp17 = esi12 + 16;
    v18 = reinterpret_cast<void**>(0);
    if (edi16 != ebp17) {
        do {
            eax19 = edi16;
            edi16 = *reinterpret_cast<void***>(edi16);
            ecx20 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax19 + 8) + 12);
            if ((reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx20 + 0x288) == 0x7fff0000) && !*reinterpret_cast<void***>(ecx20 + 0x1ac) || a4) && (a2 == 0x7fff0000 || *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax19 + 8) + 8) == a2)) {
                if (ebx15 != a3) {
                    ++ebx15;
                } else {
                    fun_18007240(ecx20, 0);
                }
            }
        } while (edi16 != ebp17);
        v18 = ebx15;
    }
    edi21 = *reinterpret_cast<void***>(esi12 + 36);
    ebp22 = esi12 + 36;
    if (edi21 != ebp22) {
        do {
            eax23 = edi21;
            edi21 = *reinterpret_cast<void***>(edi21);
            ecx24 = *reinterpret_cast<void***>(eax23 + 8);
            if (a2 == 0x7fff0000 || *reinterpret_cast<void***>(ecx24 + 8) == a2) {
                if (ebx15 != a3) {
                    ++ebx15;
                    v18 = ebx15;
                } else {
                    *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax23 + 4)) = *reinterpret_cast<void***>(eax23);
                    *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax23) + 4) = *reinterpret_cast<void***>(eax23 + 4);
                    *reinterpret_cast<void***>(eax23) = *reinterpret_cast<void***>(esi12 + 48);
                    *reinterpret_cast<void***>(esi12 + 48) = eax23;
                    *reinterpret_cast<void***>(esi12 + 32) = *reinterpret_cast<void***>(esi12 + 32) - 1;
                    if (ecx24) {
                        eax25 = *reinterpret_cast<void***>(ecx24);
                        *reinterpret_cast<void***>(eax25)(1);
                    }
                    ebx15 = v18;
                }
            }
        } while (edi21 != ebp22);
    }
    if (reinterpret_cast<signed char>(ebx15) < reinterpret_cast<signed char>(a3)) {
        do {
            edx26 = *reinterpret_cast<void***>(esi12);
            eax27 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx26 + 4)(esi12, a2, 0));
            if (!eax27) 
                break;
            eax28 = *reinterpret_cast<void***>(esi12 + 48);
            edi29 = esi12 + 36;
            if (!eax28) {
                eax28 = fun_1802b2bb(esi12, 12, a2, 0, v13, v10, v8, v6, v18);
            } else {
                *reinterpret_cast<void***>(esi12 + 48) = *reinterpret_cast<void***>(eax28);
            }
            if (eax28) {
                ecx30 = eax28 + 8;
                if (ecx30) {
                    *reinterpret_cast<void***>(ecx30) = eax27;
                }
                *reinterpret_cast<void***>(eax28) = edi29;
                *reinterpret_cast<void***>(eax28 + 4) = *reinterpret_cast<void***>(edi29 + 4);
                *reinterpret_cast<void***>(*reinterpret_cast<void***>(edi29 + 4)) = eax28;
                *reinterpret_cast<void***>(edi29 + 4) = eax28;
                *reinterpret_cast<void***>(esi12 + 32) = *reinterpret_cast<void***>(esi12 + 32) + 1;
            }
            ++ebx15;
        } while (reinterpret_cast<signed char>(ebx15) < reinterpret_cast<signed char>(v5));
    }
    eax31 = ebx15;
    return *reinterpret_cast<int16_t*>(&eax31);
}

void fun_180075b0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23) {
    void** v24;
    void** v25;
    void** ebx26;
    void** ebx27;
    void** v28;
    void** ebp29;
    void** v30;
    void** esi31;
    struct s11* esi32;
    struct s11* ebp33;
    void** v34;
    void** edi35;
    struct s11* eax36;
    void** edi37;
    signed char al38;
    void** ecx39;

    v24 = reinterpret_cast<void**>(__return_address());
    v25 = ebx26;
    ebx27 = ecx;
    v28 = ebp29;
    v30 = esi31;
    esi32 = *reinterpret_cast<struct s11**>(ebx27 + 0x2d0);
    ebp33 = reinterpret_cast<struct s11*>(ebx27 + 0x2d0);
    if (esi32 != ebp33) {
        v34 = edi35;
        do {
            eax36 = esi32;
            esi32 = esi32->f0;
            edi37 = eax36->f8;
            al38 = fun_1800c240(edi37, a2);
            if (al38) {
                fun_18007730(ebx27, edi37, 1, v34, v30, v28, v25, v24, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23);
            }
        } while (esi32 != ebp33);
    }
    ecx39 = *reinterpret_cast<void***>(ebx27 + 0x198);
    fun_18006760(ecx39);
    return;
}

unsigned char fun_1800c5a0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11) {
    void** eax12;
    void* eax13;

    if (*reinterpret_cast<void***>(ecx + 0x1c0) || *reinterpret_cast<void***>(ecx + 0x1bc)) {
        eax12 = *reinterpret_cast<void***>(ecx + 0x1a0);
        if (!(*reinterpret_cast<unsigned char*>(&eax12 + 1) & 4)) {
            eax13 = fun_1800c260(ecx, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
            return static_cast<unsigned char>(reinterpret_cast<uint1_t>(eax13 == 0xffffffff));
        } else {
            return 1;
        }
    } else {
        return 0;
    }
}

int32_t PulseEvent = 0x35f28;

void fun_1800c5e0(void** ecx, void** a2) {
    void** eax3;
    void** ecx4;
    void** edx5;
    void** v6;
    void** ecx7;
    void** eax8;
    void** ecx9;
    void** v10;

    eax3 = *reinterpret_cast<void***>(ecx + 0x1c0);
    if (eax3) {
        ecx4 = *reinterpret_cast<void***>(ecx + 0x1a0);
        if (!(*reinterpret_cast<unsigned char*>(&ecx4 + 1) & 1)) {
            if (!(*reinterpret_cast<unsigned char*>(&ecx4 + 1) & 2)) {
                edx5 = *reinterpret_cast<void***>(ecx + 0x1a4);
                v6 = *reinterpret_cast<void***>(ecx + 0x1c4);
                ecx7 = *reinterpret_cast<void***>(ecx + 0x19c);
                eax3(ecx7, edx5, v6);
            } else {
                PulseEvent(eax3);
            }
        } else {
            SetEvent(eax3);
        }
    }
    eax8 = *reinterpret_cast<void***>(ecx + 0x1bc);
    if (eax8) {
        ecx9 = *reinterpret_cast<void***>(ecx + 0x19c);
        v10 = *reinterpret_cast<void***>(ecx + 0x1a4);
        PostMessageA(eax8, a2, ecx9, v10);
    }
    return;
}

struct s68 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

int16_t fun_1800aeb0(struct s28* ecx, void** a2, signed char a3) {
    void** eax4;
    struct s68* ecx5;

    eax4 = a2;
    ecx->f0 = *reinterpret_cast<void***>(eax4);
    ecx->f4 = *reinterpret_cast<void***>(eax4 + 4);
    ecx->f8 = *reinterpret_cast<void***>(eax4 + 8);
    if (!a3) {
        ecx5 = reinterpret_cast<struct s68*>(&ecx->f12);
        ecx5->f0 = *reinterpret_cast<void***>(eax4);
        ecx5->f4 = *reinterpret_cast<void***>(eax4 + 4);
        eax4 = *reinterpret_cast<void***>(eax4 + 8);
        ecx5->f8 = eax4;
    }
    return *reinterpret_cast<int16_t*>(&eax4);
}

int16_t fun_1800d0d0(void** a1, void** a2) {
    unsigned char ah3;
    unsigned char ah4;
    unsigned char ah5;

    __asm__("fld dword [ecx]");
    __asm__("fcomp dword [edx]");
    __asm__("fnstsw ax");
    if (!(ah3 & 64) || (!(ah4 & 64) || !(ah5 & 64))) {
        return 1;
    } else {
        return 0;
    }
}

void* fun_1800d2c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16);

struct s69 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

int16_t fun_1800d260(struct s69* a1, void** a2, void** a3);

void fun_1800d390(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** edx8;
    void** ebx9;
    void** esi10;
    void** eax11;
    void** ecx12;
    void** edi13;
    void** esi14;
    void** ebp15;
    void** ebx16;
    void** v17;
    void** v18;
    void** v19;
    void** v20;
    void** v21;
    void** v22;
    void*** esp23;
    void** ecx24;
    void** edx25;
    struct s69* eax26;
    void** ecx27;
    void** edx28;

    edx8 = *reinterpret_cast<void***>(a2);
    ebx9 = ecx + 24;
    esi10 = ecx + 12;
    *reinterpret_cast<void***>(ebx9) = edx8;
    *reinterpret_cast<void***>(ebx9 + 4) = *reinterpret_cast<void***>(a2 + 4);
    *reinterpret_cast<void***>(ebx9 + 8) = *reinterpret_cast<void***>(a2 + 8);
    *reinterpret_cast<void***>(esi10) = *reinterpret_cast<void***>(a3);
    eax11 = *reinterpret_cast<void***>(a3 + 4);
    *reinterpret_cast<void***>(esi10 + 4) = eax11;
    ecx12 = *reinterpret_cast<void***>(a3 + 8);
    *reinterpret_cast<void***>(esi10 + 8) = ecx12;
    fun_1800d2c0(ecx12, ebx9, edi13, esi14, ebp15, ebx16, v17, v18, v19, __return_address(), a2, a3, a4, a5, a6, a7);
    __asm__("fstp st0");
    fun_1800d2c0(ecx12, esi10, edi13, esi14, ebp15, ebx16, v20, v21, v22, __return_address(), a2, a3, a4, a5, a6, a7);
    esp23 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 12 - 4 - 4 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 + 4 + 4 - 4);
    __asm__("fstp st0");
    *reinterpret_cast<int16_t*>(&eax11) = fun_1800d260(esp23 + 20, esi10, ebx9);
    ecx24 = *reinterpret_cast<void***>(eax11 + 4);
    edx25 = *reinterpret_cast<void***>(eax11 + 8);
    *reinterpret_cast<void***>(ecx) = *reinterpret_cast<void***>(eax11);
    eax26 = reinterpret_cast<struct s69*>(esp23 - 4 - 4 - 4 + 12 + 4 - 4 - 4 + 24);
    *reinterpret_cast<void***>(ecx + 4) = ecx24;
    *reinterpret_cast<void***>(ecx + 8) = edx25;
    *reinterpret_cast<int16_t*>(&eax26) = fun_1800d260(eax26, ebx9, ecx);
    ecx27 = eax26->f4;
    edx28 = eax26->f8;
    *reinterpret_cast<void***>(esi10) = eax26->f0;
    *reinterpret_cast<void***>(esi10 + 4) = ecx27;
    *reinterpret_cast<void***>(esi10 + 8) = edx28;
    return;
}

void fun_18008590(void** ecx, void** a2) {
    *reinterpret_cast<void***>(ecx + 0x1ec) = a2;
    return;
}

void fun_18007400(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24) {
    void** esi25;
    void** eax26;
    uint32_t ecx27;
    void** ecx28;

    fun_18007520(ecx, esi25, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24);
    fun_18007240(ecx, 0);
    eax26 = *reinterpret_cast<void***>(ecx + 0x288);
    *reinterpret_cast<void***>(ecx + 0x2c4) = reinterpret_cast<void**>(0);
    if (reinterpret_cast<int1_t>(eax26 == 0x7fff0000) && (!*reinterpret_cast<void***>(ecx + 0x1ac) && (ecx27 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x198) + 80)) & 15, *reinterpret_cast<signed char*>(&ecx27) != 15))) {
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x198) + 76) = reinterpret_cast<void**>(1);
        ecx28 = *reinterpret_cast<void***>(ecx + 0x198);
        fun_18006760(ecx28);
    }
    return;
}

void fun_1800a450(void** ecx, void** a2) {
    void** esi3;
    int16_t ax4;
    void** ecx5;
    void** edx6;
    void** eax7;

    esi3 = ecx + 100;
    ax4 = fun_1800d0d0(esi3, a2);
    if (*reinterpret_cast<signed char*>(&ax4)) {
        *reinterpret_cast<void***>(esi3) = *reinterpret_cast<void***>(a2);
        ecx5 = *reinterpret_cast<void***>(ecx + 0x10c);
        *reinterpret_cast<void***>(esi3 + 4) = *reinterpret_cast<void***>(a2 + 4);
        *reinterpret_cast<void***>(esi3 + 8) = *reinterpret_cast<void***>(a2 + 8);
        if (ecx5) {
            edx6 = *reinterpret_cast<void***>(ecx5);
            *reinterpret_cast<void***>(edx6 + 36)(a2);
        }
        if (*reinterpret_cast<void***>(ecx + 0x110)) {
            eax7 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x110));
            *reinterpret_cast<void***>(eax7 + 36)(a2);
        }
        *reinterpret_cast<void***>(ecx + 5) = reinterpret_cast<void**>(1);
    }
    return;
}

struct s70 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

int16_t fun_18008500(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26) {
    void** eax27;
    void*** esp28;
    struct s70* ecx29;
    void** v30;
    void** v31;
    void** eax32;
    void*** esp33;
    void** eax34;
    void** ecx35;
    void** ecx36;
    void** esi37;
    void*** esp38;
    void* esp39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    signed char v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;

    eax27 = *reinterpret_cast<void***>(ecx + 0x2c8);
    if (!eax27 && (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 0x200)) & 2 && (eax27 = a2, *reinterpret_cast<int16_t*>(&eax27) = fun_1800af10(ecx + 0x28c, eax27), esp28 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 68 - 4 - 4 - 4 + 4 + 4), !!eax27))) {
        ecx29 = reinterpret_cast<struct s70*>(ecx + 0x2a4);
        *reinterpret_cast<signed char*>(&v30) = 0;
        v31 = ecx29->f0;
        eax32 = ecx29->f4;
        esp33 = esp28 - 4;
        eax34 = reinterpret_cast<void**>(esp33 + 20);
        ecx35 = ecx29->f8;
        ecx36 = *reinterpret_cast<void***>(ecx + 0x198);
        *reinterpret_cast<int16_t*>(&eax34) = fun_18001020(ecx36, eax34, esp28 + 4, esi37, v31, eax32, ecx35, ecx36, eax34, esp28 + 4, esi37, v31, eax32, ecx35);
        esp38 = esp33 - 4 - 4 + 8 + 4 - 4;
        fun_1800c810(esp38 + 32, eax34);
        esp39 = reinterpret_cast<void*>(esp38 - 4 + 4 + 4);
        fun_18007a20(ecx, reinterpret_cast<int32_t>(esp39) + 28, esi37, v31, eax32, ecx35, v40, v41, v42, 0, v43, v44, v45, v46, v47, v48);
        *reinterpret_cast<int16_t*>(&eax27) = fun_1800c670(reinterpret_cast<int32_t>(esp39) - 4 - 4 + 4 + 4 + 28, esi37, v31, eax32, ecx35, v49, v50, v51, 0, v52, v53, v54, v55, v56, v57, v58, v59, v60, v30, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
    }
    return *reinterpret_cast<int16_t*>(&eax27);
}

struct s71 {
    signed char[700] pad700;
    signed char f700;
    signed char[10] pad711;
    signed char f711;
};

void fun_1800a950(void** ecx) {
    void** eax2;
    struct s71* edx3;

    eax2 = reinterpret_cast<void**>(0);
    if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 8)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(ecx + 8) == 0)) {
        *reinterpret_cast<void***>(ecx + 5) = reinterpret_cast<void**>(0);
        return;
    } else {
        do {
            ++eax2;
            edx3 = *reinterpret_cast<struct s71**>(reinterpret_cast<uint32_t>(*reinterpret_cast<void***>(ecx + 12) + reinterpret_cast<unsigned char>(eax2) * 4) - 4);
            edx3->f700 = 1;
            edx3->f711 = 1;
        } while (reinterpret_cast<signed char>(eax2) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 8)));
        *reinterpret_cast<void***>(ecx + 5) = reinterpret_cast<void**>(0);
        return;
    }
}

void fun_1800d480(void** ecx, struct s8* a2) {
    int32_t v3;
    int32_t v4;
    int32_t v5;

    __asm__("fld dword [ecx+0xc]");
    __asm__("fmul dword [eax+0x4]");
    __asm__("fld dword [ecx+0x18]");
    __asm__("fmul dword [eax+0x8]");
    __asm__("faddp st1, st0");
    __asm__("fld dword [eax]");
    __asm__("fmul dword [ecx]");
    __asm__("faddp st1, st0");
    __asm__("fstp dword [esp+0x0]");
    __asm__("fld dword [ecx+0x10]");
    __asm__("fmul dword [eax+0x4]");
    __asm__("fld dword [ecx+0x4]");
    __asm__("fmul dword [eax]");
    __asm__("faddp st1, st0");
    __asm__("fld dword [ecx+0x1c]");
    __asm__("fmul dword [eax+0x8]");
    __asm__("faddp st1, st0");
    __asm__("fstp dword [esp+0x4]");
    __asm__("fld dword [ecx+0x14]");
    __asm__("fmul dword [eax+0x4]");
    __asm__("fld dword [ecx+0x8]");
    __asm__("fmul dword [eax]");
    __asm__("faddp st1, st0");
    __asm__("fld dword [ecx+0x20]");
    __asm__("fmul dword [eax+0x8]");
    a2->f0 = v3;
    a2->f4 = v4;
    __asm__("faddp st1, st0");
    __asm__("fstp dword [esp+0x8]");
    a2->f8 = v5;
    return;
}

int16_t fun_1800d150(struct s9* a1, void* a2, void** a3) {
    struct s9* eax4;
    void** v5;
    void** v6;
    void** v7;

    __asm__("fld dword [eax]");
    __asm__("fadd dword [ecx]");
    __asm__("fstp dword [esp+0x0]");
    __asm__("fld dword [eax+0x4]");
    __asm__("fadd dword [ecx+0x4]");
    __asm__("fstp dword [esp+0x4]");
    __asm__("fld dword [eax+0x8]");
    eax4 = a1;
    __asm__("fadd dword [ecx+0x8]");
    eax4->f0 = v5;
    __asm__("fstp dword [esp+0x8]");
    eax4->f4 = v6;
    eax4->f8 = v7;
    return *reinterpret_cast<int16_t*>(&eax4);
}

void* fun_1800d110(void** a1, void** a2) {
    unsigned char ah3;
    void** eax4;
    void** eax5;

    __asm__("fld dword [esp+0x8]");
    __asm__("fcomp dword [0x18034238]");
    __asm__("fnstsw ax");
    if (ah3 & 64) {
        eax4 = a1;
        return *reinterpret_cast<void**>(&eax4);
    } else {
        eax5 = a1;
        __asm__("fld dword [esp+0x8]");
        __asm__("fmul dword [eax]");
        __asm__("fstp dword [eax]");
        __asm__("fld dword [esp+0x8]");
        __asm__("fmul dword [eax+0x4]");
        __asm__("fstp dword [eax+0x4]");
        __asm__("fld dword [esp+0x8]");
        __asm__("fmul dword [eax+0x8]");
        __asm__("fstp dword [eax+0x8]");
        return *reinterpret_cast<void**>(&eax5);
    }
}

void* fun_1800d240(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19) {
    void** eax20;

    eax20 = a1;
    __asm__("fld dword [eax+0x8]");
    __asm__("fmul dword [ecx+0x8]");
    __asm__("fld dword [eax+0x4]");
    __asm__("fmul dword [ecx+0x4]");
    __asm__("faddp st1, st0");
    __asm__("fld dword [eax]");
    __asm__("fmul dword [ecx]");
    __asm__("faddp st1, st0");
    return *reinterpret_cast<void**>(&eax20);
}

void fun_1800dae0(void** ecx, void** a2) {
    __asm__("fld dword [ebp+0x8]");
    __asm__("fld1 ");
    __asm__("fld st1");
    __asm__("fmul st0, st2");
    __asm__("fsubp st1, st0");
    __asm__("fsqrt ");
    __asm__("fxch st0, st1");
    __asm__("fpatan ");
    __asm__("fstp dword [ebp-0x4]");
    __asm__("fld dword [ebp-0x4]");
    return;
}

void fun_1800de40(void** ecx, void** a2);

void fun_1800de70(void** ecx, void** a2, void** a3) {
    __asm__("fld dword [ebp+0xc]");
    __asm__("fld dword [ebp+0x8]");
    __asm__("fyl2x ");
    __asm__("fstp dword [ebp-0x4]");
    fun_1800de40(ecx, ecx);
    return;
}

int16_t fun_1800d1a0(void** ecx, void** a2, void** a3, void** a4) {
    void** eax5;
    void** v6;
    void** v7;
    void** v8;

    __asm__("fld dword [eax]");
    __asm__("fsub dword [ecx]");
    __asm__("fstp dword [esp+0x0]");
    __asm__("fld dword [eax+0x4]");
    __asm__("fsub dword [ecx+0x4]");
    __asm__("fstp dword [esp+0x4]");
    __asm__("fld dword [eax+0x8]");
    eax5 = a2;
    __asm__("fsub dword [ecx+0x8]");
    *reinterpret_cast<void***>(eax5) = v6;
    __asm__("fstp dword [esp+0x8]");
    *reinterpret_cast<void***>(eax5 + 4) = v7;
    *reinterpret_cast<void***>(eax5 + 8) = v8;
    return *reinterpret_cast<int16_t*>(&eax5);
}

int16_t fun_1800d1f0(struct s59* a1, void** a2, void** a3) {
    struct s59* eax4;
    void** v5;
    void** v6;
    void** v7;

    __asm__("fld dword [esp+0x18]");
    __asm__("fmul dword [eax]");
    __asm__("fstp dword [esp+0x0]");
    __asm__("fld dword [esp+0x18]");
    __asm__("fmul dword [eax+0x4]");
    __asm__("fstp dword [esp+0x4]");
    __asm__("fld dword [esp+0x18]");
    __asm__("fmul dword [eax+0x8]");
    eax4 = a1;
    __asm__("fstp dword [esp+0x8]");
    eax4->f0 = v5;
    eax4->f4 = v6;
    eax4->f8 = v7;
    return *reinterpret_cast<int16_t*>(&eax4);
}

void fun_1800ca40(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42) {
    void** v43;
    void** v44;
    void** ebx45;
    void** v46;
    void** esi47;
    void** v48;
    void** edi49;
    void** esi50;
    void** ecx51;
    void** edx52;
    void** eax53;
    void** eax54;
    void** ecx55;
    void** ecx56;
    void** edx57;
    void** eax58;
    void** eax59;
    void** edx60;

    v43 = reinterpret_cast<void**>(__return_address());
    v44 = ebx45;
    v46 = esi47;
    v48 = edi49;
    esi50 = ecx;
    *reinterpret_cast<void***>(esi50) = reinterpret_cast<void**>(0x18034610);
    fun_1800cb00(ecx, 0x7fff0000, 0, 1);
    ecx51 = *reinterpret_cast<void***>(esi50 + 36);
    edx52 = esi50 + 36;
    if (ecx51 != edx52) {
        do {
            eax53 = ecx51;
            ecx51 = *reinterpret_cast<void***>(ecx51);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax53 + 4)) = *reinterpret_cast<void***>(eax53);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax53) + 4) = *reinterpret_cast<void***>(eax53 + 4);
            *reinterpret_cast<void***>(eax53) = *reinterpret_cast<void***>(esi50 + 48);
            *reinterpret_cast<void***>(esi50 + 48) = eax53;
            *reinterpret_cast<void***>(esi50 + 32) = *reinterpret_cast<void***>(esi50 + 32) - 1;
        } while (ecx51 != edx52);
    }
    eax54 = *reinterpret_cast<void***>(esi50 + 48);
    if (eax54) {
        do {
            ecx55 = *reinterpret_cast<void***>(eax54);
            *reinterpret_cast<void***>(esi50 + 48) = ecx55;
            fun_1802b2b0(ecx55, eax54, v48, v46, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
            eax54 = *reinterpret_cast<void***>(esi50 + 48);
        } while (eax54);
    }
    ecx56 = *reinterpret_cast<void***>(esi50 + 16);
    edx57 = esi50 + 16;
    if (ecx56 != edx57) {
        do {
            eax58 = ecx56;
            ecx56 = *reinterpret_cast<void***>(ecx56);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax58 + 4)) = *reinterpret_cast<void***>(eax58);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax58) + 4) = *reinterpret_cast<void***>(eax58 + 4);
            *reinterpret_cast<void***>(eax58) = *reinterpret_cast<void***>(esi50 + 28);
            *reinterpret_cast<void***>(esi50 + 28) = eax58;
            *reinterpret_cast<void***>(esi50 + 12) = *reinterpret_cast<void***>(esi50 + 12) - 1;
        } while (ecx56 != edx57);
    }
    eax59 = *reinterpret_cast<void***>(esi50 + 28);
    if (eax59) {
        do {
            edx60 = *reinterpret_cast<void***>(eax59);
            *reinterpret_cast<void***>(esi50 + 28) = edx60;
            fun_1802b2b0(ecx56, eax59, v48, v46, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
            eax59 = *reinterpret_cast<void***>(esi50 + 28);
        } while (eax59);
    }
    return;
}

int16_t fun_1800b800(void** ecx, void** a2, void** a3, void** a4) {
    void** eax5;

    fun_1800cc80(ecx, a2, a3);
    *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 20) = a4;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180345c4);
    eax5 = ecx;
    return *reinterpret_cast<int16_t*>(&eax5);
}

void fun_1800b3a0(void** ecx, void** a2);

void fun_1800b880(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** ecx6;
    void** v7;
    void** eax8;
    void** eax9;

    if (*reinterpret_cast<void***>(ecx + 24)) {
        ecx6 = *reinterpret_cast<void***>(ecx + 4);
        v7 = *reinterpret_cast<void***>(ecx + 24);
        fun_1800b3a0(ecx6, v7);
    }
    eax8 = *reinterpret_cast<void***>(a2);
    eax9 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax8 + 28)());
    *reinterpret_cast<void***>(ecx + 24) = eax9;
    return;
}

void fun_1800baf0(void** ecx, void** a2);

void fun_1800ba50(void** ecx, void** a2, void*** a3, int32_t a4, void** a5, void** a6, void** a7);

void fun_1800b9c0(void** ecx, void** a2, void** a3, void** a4) {
    void** eax5;
    uint32_t edx6;
    void** eax7;
    void** ecx8;
    void** edx9;
    void** eax10;
    void** v11;
    void** eax12;
    void** v13;
    void** ecx14;
    void*** edx15;
    void** eax16;

    eax5 = *reinterpret_cast<void***>(ecx + 24);
    if (eax5 && (*reinterpret_cast<void***>(ecx + 12) && *reinterpret_cast<void***>(ecx + 16))) {
        *reinterpret_cast<void***>(eax5 + 0x7d) = reinterpret_cast<void**>(1);
        *reinterpret_cast<void***>(eax5 + 0x7c) = reinterpret_cast<void**>(1);
        edx6 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 12) + 0x1a8)) >> 25;
        if (!(1 & *reinterpret_cast<unsigned char*>(&edx6))) {
            eax7 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 16) + 92);
            *reinterpret_cast<unsigned char*>(&eax7) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax7) & 0xfe);
        } else {
            eax7 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 16) + 92);
        }
        ecx8 = *reinterpret_cast<void***>(ecx + 24);
        edx9 = *reinterpret_cast<void***>(ecx8);
        *reinterpret_cast<void***>(edx9 + 4)(eax7);
        fun_1800baf0(ecx, eax7);
        eax10 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 24));
        v11 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 16) + 64);
        *reinterpret_cast<void***>(eax10 + 32)(v11, eax7);
        eax12 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 24));
        v13 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 16) + 72);
        *reinterpret_cast<void***>(eax12 + 36)(v13, v11, eax7);
        ecx14 = *reinterpret_cast<void***>(ecx + 24);
        edx15 = reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 16) + 96);
        eax16 = *reinterpret_cast<void***>(ecx14);
        *reinterpret_cast<void***>(eax16 + 8)(3, edx15, 4, v13, v11, eax7);
        fun_1800ba50(ecx, 3, edx15, 4, v13, v11, eax7);
    }
    return;
}

void fun_1800a7d0(void** ecx, void** a2, void** a3, void** a4) {
    __asm__("fld dword [ecx+0xd0]");
    return;
}

void fun_1800bb80(void** ecx) {
    void** edx2;
    void** v3;

    if (*reinterpret_cast<void***>(ecx + 24) && *reinterpret_cast<void***>(ecx + 16)) {
        edx2 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 24));
        v3 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 16) + 72);
        *reinterpret_cast<void***>(edx2 + 36)(v3);
    }
    return;
}

struct s73 {
    signed char[700] pad700;
    signed char f700;
    signed char[10] pad711;
    signed char f711;
};

struct s72 {
    signed char[12] pad12;
    struct s73* f12;
};

void fun_1800bba0(struct s72* ecx, int32_t a2, void* a3, int32_t a4) {
    struct s73* eax5;

    eax5 = ecx->f12;
    if (eax5) {
        eax5->f700 = 1;
        eax5->f711 = 1;
    }
    return;
}

struct s75 {
    signed char[40] pad40;
    int32_t f40;
};

struct s74 {
    signed char[12] pad12;
    struct s48* f12;
    signed char[8] pad24;
    struct s75** f24;
};

int16_t fun_1800bbf0(struct s74* ecx, int32_t a2) {
    struct s74* ebx3;
    int32_t v4;
    int32_t esi5;
    void* esp6;
    int32_t ecx7;
    struct s49* eax8;
    int32_t eax9;
    struct s75** ecx10;
    int32_t* esp11;
    struct s75* eax12;
    struct s48* ecx13;
    signed char al14;
    int32_t v15;

    ebx3 = ecx;
    if (!ebx3->f12 || !ebx3->f24) {
        return 0;
    }
    v4 = esi5;
    esp6 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x7c - 4 - 4 - 4 - 4);
    ecx7 = 6;
    do {
        --ecx7;
    } while (ecx7);
    while (eax8 = ebx3->f12->f0, eax9 = reinterpret_cast<int32_t>(eax8->f16()), !!eax9) {
        ecx10 = ebx3->f24;
        esp11 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esp6) - 4 - 4 - 4 - 4 + 4 - 4 - 4);
        eax12 = *ecx10;
        eax12->f40(esp11 + 7, v4, eax9);
        esp6 = reinterpret_cast<void*>(esp11 - 1 - 1 + 1);
    }
    ecx13 = ebx3->f12;
    al14 = fun_180089b0(ecx13);
    if (!al14) 
        goto addr_0x1800bc95_9;
    addr_0x1800bc97_10:
    goto v15;
    addr_0x1800bc95_9:
    goto addr_0x1800bc97_10;
}

void fun_1800b3a0(void** ecx, void** a2) {
    void** ecx3;
    void** eax4;
    void** edx5;
    int32_t esi6;

    ecx3 = *reinterpret_cast<void***>(ecx + 64);
    eax4 = *reinterpret_cast<void***>(ecx3);
    *reinterpret_cast<void***>(eax4 + 32)();
    if (a2) {
        edx5 = *reinterpret_cast<void***>(a2);
        *reinterpret_cast<void***>(edx5)(a2, 1);
    }
    goto esi6;
}

void fun_1800baf0(void** ecx, void** a2) {
    void** eax3;
    void** eax4;
    void** v5;
    void** ecx6;
    void** eax7;
    int32_t v8;
    int32_t v9;

    eax3 = *reinterpret_cast<void***>(ecx + 24);
    if (eax3 && *reinterpret_cast<void***>(ecx + 16)) {
        __asm__("fld dword [edx+0xa8]");
        __asm__("fst dword [ebp-0xc]");
        __asm__("fcomp dword [edx+0x44]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax3 + 1) & 65) && (eax4 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 16) + 92), !!(*reinterpret_cast<unsigned char*>(&eax4 + 1) & 8))) {
            v5 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 16) + 68);
        }
        __asm__("fld dword [ebp-0x4]");
        __asm__("fistp dword [ebp-0x8]");
        __asm__("fld dword [ebp-0x4]");
        __asm__("fistp dword [ebp-0x10]");
        ecx6 = *reinterpret_cast<void***>(ecx + 24);
        eax7 = *reinterpret_cast<void***>(ecx6);
        *reinterpret_cast<void***>(eax7 + 28)(v8, v5, v9);
    }
    return;
}

void fun_1800ba50(void** ecx, void** a2, void*** a3, int32_t a4, void** a5, void** a6, void** a7) {
    void** eax8;
    void** ecx9;
    void** ecx10;
    void** edx11;
    void** edx12;
    void** eax13;
    void** v14;
    void** ecx15;
    void** edx16;

    if (*reinterpret_cast<void***>(ecx + 24) && (eax8 = *reinterpret_cast<void***>(ecx + 16), !!eax8)) {
        __asm__("fld dword [eax+0xb4]");
        __asm__("fmul dword [eax+0x4c]");
        ecx9 = *reinterpret_cast<void***>(eax8 + 92);
        __asm__("fstp dword [esp+0x4]");
        if (!(*reinterpret_cast<unsigned char*>(&ecx9 + 1) & 16)) {
            __asm__("fld dword [eax+0xa8]");
            __asm__("fcomp dword [eax+0x44]");
            __asm__("fnstsw ax");
            if (!(*reinterpret_cast<unsigned char*>(&eax8 + 1) & 65) && !(*reinterpret_cast<unsigned char*>(&ecx9 + 1) & 8)) {
                ecx10 = *reinterpret_cast<void***>(ecx + 24);
                edx11 = *reinterpret_cast<void***>(ecx10);
                *reinterpret_cast<void***>(edx11 + 20)();
                goto 0;
            }
        } else {
            edx12 = *reinterpret_cast<void***>(eax8 + 64);
            eax13 = *reinterpret_cast<void***>(eax8 + 0xa8);
            v14 = *reinterpret_cast<void***>(eax8 + 72);
            fun_1800cfd0(eax13, edx12, v14);
            __asm__("fcom dword [0x1803422c]");
            __asm__("fnstsw ax");
            if (!(*reinterpret_cast<unsigned char*>(&eax13 + 1) & 64)) {
                __asm__("fld dword [ecx+0xb8]");
                __asm__("fdiv st0, st1");
                __asm__("fmul dword [esp+0x4]");
                __asm__("fstp dword [esp+0x4]");
            }
            __asm__("fstp st0");
        }
        ecx15 = *reinterpret_cast<void***>(ecx + 24);
        edx16 = *reinterpret_cast<void***>(ecx15);
        *reinterpret_cast<void***>(edx16 + 20)(ecx);
    }
    return;
}

struct s76 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

int16_t fun_1800b040(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    struct s10* edx7;
    void** edi8;
    struct s76* eax9;
    void** edi10;
    void** edi11;
    void** edi12;
    uint32_t eax13;
    void** eax14;

    fun_1800ca00(ecx, a2, a3);
    edx7 = reinterpret_cast<struct s10*>(ecx + 52);
    edx7->f0 = reinterpret_cast<void**>(0x180342d0);
    *reinterpret_cast<void***>(ecx + 68) = a4;
    *reinterpret_cast<void***>(ecx + 56) = reinterpret_cast<void**>(1);
    *reinterpret_cast<void***>(ecx + 60) = a6;
    *reinterpret_cast<void***>(ecx + 64) = reinterpret_cast<void**>(0);
    edi8 = g180458c8;
    eax9 = reinterpret_cast<struct s76*>(ecx + 72);
    *reinterpret_cast<void***>(ecx + 72) = edi8;
    edi10 = g180458cc;
    eax9->f4 = edi10;
    edi11 = g180458d0;
    eax9->f8 = edi11;
    edi12 = g180458d4;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034588);
    edx7->f0 = reinterpret_cast<void**>(0x1803455c);
    eax9->f12 = edi12;
    *reinterpret_cast<void***>(ecx + 88) = a5;
    eax13 = reinterpret_cast<uint32_t>(-reinterpret_cast<unsigned char>(ecx));
    fun_18024950(a6, eax13 - (eax13 + reinterpret_cast<uint1_t>(eax13 < eax13 + reinterpret_cast<uint1_t>(!!ecx))) & reinterpret_cast<uint32_t>(edx7));
    eax14 = ecx;
    return *reinterpret_cast<int16_t*>(&eax14);
}

void fun_1800c020(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    *reinterpret_cast<void***>(ecx + 0x1ac) = a2;
    *reinterpret_cast<void***>(ecx + 0x1b0) = a3;
    if (a4) {
        *reinterpret_cast<void***>(ecx + 0x1b4) = a4;
    }
    if (a5) {
        *reinterpret_cast<void***>(ecx + 0x1b8) = a5;
    }
    return;
}

void fun_1800c8a0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** ebx7;
    void** edi8;
    void** esi9;
    void** ebx10;
    void** eax11;
    void** esi12;
    void** ecx13;
    void** edx14;
    void** edi15;
    void** eax16;
    uint32_t ecx17;
    uint32_t ecx18;
    uint32_t ecx19;
    signed char* edi20;
    uint32_t edx21;
    uint32_t ecx22;
    uint32_t ecx23;

    ebx7 = ecx;
    *reinterpret_cast<void***>(ebx7) = reinterpret_cast<void**>(15);
    eax11 = fun_1802b2bb(ecx, 0xdc, edi8, esi9, ebx10, ecx, __return_address(), a2, a3);
    esi12 = a2;
    *reinterpret_cast<void***>(ebx7 + 4) = eax11;
    ecx13 = *reinterpret_cast<void***>(esi12);
    if (reinterpret_cast<unsigned char>(ecx13) > reinterpret_cast<unsigned char>(0xdc)) {
    }
    edx14 = ecx13;
    edi15 = eax11;
    eax16 = edx14;
    ecx17 = reinterpret_cast<unsigned char>(edx14) >> 2;
    while (ecx17) {
        --ecx17;
        *reinterpret_cast<void***>(edi15) = *reinterpret_cast<void***>(esi12);
        edi15 = edi15 + 4;
        esi12 = esi12 + 4;
    }
    ecx18 = reinterpret_cast<unsigned char>(eax16) & 3;
    while (ecx18) {
        --ecx18;
        *reinterpret_cast<void***>(edi15) = *reinterpret_cast<void***>(esi12);
        ++edi15;
        ++esi12;
    }
    ecx19 = 0xdc - reinterpret_cast<unsigned char>(edx14);
    edi20 = reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx7 + 4)) + reinterpret_cast<unsigned char>(edx14));
    edx21 = ecx19;
    ecx22 = ecx19 >> 2;
    while (ecx22) {
        --ecx22;
        *edi20 = reinterpret_cast<signed char>(0);
        edi20 = edi20 + 4;
    }
    ecx23 = edx21 & 3;
    while (ecx23) {
        --ecx23;
        *edi20 = 0;
        ++edi20;
    }
    return;
}

signed char fun_1800ce10(void** ecx, void** a2) {
    uint32_t eax3;
    uint32_t eax4;
    int32_t eax5;

    eax3 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 68) + 24)) & reinterpret_cast<unsigned char>(a2);
    eax4 = -eax3;
    eax5 = reinterpret_cast<int32_t>(-(eax4 - (eax4 + reinterpret_cast<uint1_t>(eax4 < eax4 + reinterpret_cast<uint1_t>(!!eax3)))));
    return *reinterpret_cast<signed char*>(&eax5);
}

struct s77 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

void** fun_18017200(struct s77* a1, void** a2, void** a3);

int16_t fun_18027620(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** ecx8;
    void** edx9;
    void** ecx10;
    void** edx11;
    struct s77* eax12;
    void** esi13;
    void** eax14;
    void** ecx15;
    void** edx16;
    void** edi17;

    ecx8 = ecx + 8;
    *reinterpret_cast<void***>(ecx + 8) = *reinterpret_cast<void***>(a2);
    *reinterpret_cast<void***>(ecx8 + 4) = *reinterpret_cast<void***>(a2 + 4);
    *reinterpret_cast<void***>(ecx8 + 8) = *reinterpret_cast<void***>(a2 + 8);
    edx9 = *reinterpret_cast<void***>(a2 + 12);
    *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx8 + 12) = edx9;
    ecx10 = reinterpret_cast<void**>(0);
    ecx10 = *reinterpret_cast<void***>(a2 + 14);
    edx11 = reinterpret_cast<void**>(0);
    edx11 = *reinterpret_cast<void***>(a2 + 2);
    eax12 = reinterpret_cast<struct s77*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 16 - 4 - 4 - 4 + 12);
    *reinterpret_cast<void***>(&eax12) = fun_18017200(eax12, edx11, ecx10);
    esi13 = ecx + 28;
    eax14 = eax12->f0;
    ecx15 = eax12->f4;
    edx16 = eax12->f8;
    edi17 = eax12->f12;
    *reinterpret_cast<void***>(esi13) = eax14;
    *reinterpret_cast<void***>(esi13 + 4) = ecx15;
    *reinterpret_cast<void***>(esi13 + 8) = edx16;
    *reinterpret_cast<void***>(esi13 + 12) = edi17;
    return *reinterpret_cast<int16_t*>(&eax14);
}

struct s78 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

struct s79 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

void fun_18027690(void** ecx, void*** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9) {
    void*** esi10;
    void** v11;
    void** v12;
    void** edi13;
    struct s10* eax14;
    void** edx15;
    void** ebx16;
    void** v17;
    void** ecx18;
    void** ebp19;
    uint32_t edx20;
    void** ecx21;
    void** v22;
    void** ebx23;
    void** ebp24;
    struct s78* edx25;
    struct s79* ecx26;
    struct s10* edx27;
    void** ecx28;
    int1_t less29;

    esi10 = a2;
    v11 = ecx;
    *reinterpret_cast<void***>(ecx + 44) = a3;
    if (esi10 && (v12 = reinterpret_cast<void**>(0), !(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(a3) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(a3 == 0)))) {
        edi13 = ecx + 28;
        eax14 = reinterpret_cast<struct s10*>(ecx + 52);
        do {
            edx15 = *esi10;
            esi10 = esi10 + 4;
            ebx16 = *reinterpret_cast<void***>(edi13);
            v17 = *reinterpret_cast<void***>(edi13 + 4);
            ecx18 = *reinterpret_cast<void***>(edi13 + 8);
            ebp19 = *reinterpret_cast<void***>(edi13 + 12);
            *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(eax14) + 0xfffffffc) = edx15;
            eax14->f0 = ebx16;
            *reinterpret_cast<void***>(&eax14->f4) = v17;
            eax14->f8 = ecx18;
            eax14->f12 = ebp19;
            edx20 = *reinterpret_cast<int32_t*>(esi10 - 4) + reinterpret_cast<unsigned char>(a4);
            ecx21 = *reinterpret_cast<void***>(edi13);
            v22 = *reinterpret_cast<void***>(edi13 + 4);
            ebx23 = *reinterpret_cast<void***>(edi13 + 8);
            ebp24 = *reinterpret_cast<void***>(edi13 + 12);
            eax14->f116 = edx20;
            edx25 = reinterpret_cast<struct s78*>(&eax14->f120);
            eax14->f120 = ecx21;
            edx25->f4 = v22;
            ecx26 = reinterpret_cast<struct s79*>(&eax14->f240);
            edx25->f8 = ebx23;
            edx25->f12 = ebp24;
            eax14->f236 = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(eax14) + 0xfffffffc);
            edx27 = eax14;
            eax14 = reinterpret_cast<struct s10*>(&eax14->f20);
            ecx26->f0 = edx27->f0;
            ecx26->f4 = *reinterpret_cast<void***>(&edx27->f4);
            ecx26->f8 = edx27->f8;
            ecx26->f12 = edx27->f12;
            ecx28 = v12 + 1;
            less29 = reinterpret_cast<signed char>(ecx28) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(v11 + 44));
            v12 = ecx28;
        } while (less29);
    }
    return;
}

int16_t fun_1800c740(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45) {
    void** v46;
    int16_t ax47;

    if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx) == 15)) {
        v46 = *reinterpret_cast<void***>(ecx + 4);
        ax47 = fun_1802b2b0(ecx, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45);
    }
    return ax47;
}

void fun_1800c6a0(void** ecx, void** a2, void** a3) {
    void** v4;
    void** ebx5;
    void** eax6;
    void** esi7;
    void** edi8;
    int32_t ecx9;
    void** edi10;
    void** esi11;
    void** ebx12;
    void** eax13;
    void** esi14;
    void** ecx15;
    void** edx16;
    void** edi17;
    void** eax18;
    uint32_t ecx19;
    uint32_t ecx20;
    uint32_t ecx21;
    signed char* edi22;
    uint32_t edx23;
    uint32_t ecx24;
    uint32_t ecx25;

    v4 = ecx;
    ebx5 = ecx;
    eax6 = *reinterpret_cast<void***>(a2);
    *reinterpret_cast<void***>(ebx5) = eax6;
    ecx = *reinterpret_cast<void***>(a2 + 40);
    *reinterpret_cast<void***>(ebx5 + 40) = ecx;
    if (!reinterpret_cast<int1_t>(eax6 == 15)) {
        esi7 = a2 + 4;
        edi8 = ebx5 + 4;
        ecx9 = 9;
        while (ecx9) {
            --ecx9;
            *reinterpret_cast<void***>(edi8) = *reinterpret_cast<void***>(esi7);
            edi8 = edi8 + 4;
            esi7 = esi7 + 4;
        }
        return;
    } else {
        eax13 = fun_1802b2bb(ecx, 0xdc, edi10, esi11, ebx12, v4, __return_address(), a2, a3);
        *reinterpret_cast<void***>(ebx5 + 4) = eax13;
        esi14 = *reinterpret_cast<void***>(a2 + 4);
        ecx15 = *reinterpret_cast<void***>(esi14);
        if (reinterpret_cast<unsigned char>(ecx15) > reinterpret_cast<unsigned char>(0xdc)) {
        }
        edx16 = ecx15;
        edi17 = eax13;
        eax18 = edx16;
        ecx19 = reinterpret_cast<unsigned char>(edx16) >> 2;
        while (ecx19) {
            --ecx19;
            *reinterpret_cast<void***>(edi17) = *reinterpret_cast<void***>(esi14);
            edi17 = edi17 + 4;
            esi14 = esi14 + 4;
        }
        ecx20 = reinterpret_cast<unsigned char>(eax18) & 3;
        while (ecx20) {
            --ecx20;
            *reinterpret_cast<void***>(edi17) = *reinterpret_cast<void***>(esi14);
            ++edi17;
            ++esi14;
        }
        ecx21 = 0xdc - reinterpret_cast<unsigned char>(edx16);
        edi22 = reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx5 + 4)) + reinterpret_cast<unsigned char>(edx16));
        edx23 = ecx21;
        ecx24 = ecx21 >> 2;
        while (ecx24) {
            --ecx24;
            *edi22 = reinterpret_cast<signed char>(0);
            edi22 = edi22 + 4;
        }
        ecx25 = edx23 & 3;
        while (ecx25) {
            --ecx25;
            *edi22 = 0;
            ++edi22;
        }
        return;
    }
}

void fun_1800ddc0(int32_t a1, int32_t a2, void** a3) {
    void** eax4;
    void** edx5;
    void** eax6;
    uint32_t eax7;

    eax4 = a3;
    if (eax4) {
        if (reinterpret_cast<signed char>(eax4) >= reinterpret_cast<signed char>(0)) {
            __asm__("fld qword [ebp+0x8]");
        } else {
            __asm__("fld qword [0x180346b0]");
            __asm__("fdiv qword [ebp+0x8]");
            eax4 = reinterpret_cast<void**>(-reinterpret_cast<unsigned char>(eax4));
            a3 = eax4;
            __asm__("fst qword [ebp+0x8]");
        }
        if (eax4 != 1) {
            if (!reinterpret_cast<int1_t>(eax4 == 2)) {
                __asm__("fstp st0");
                edx5 = a3;
                eax6 = reinterpret_cast<void**>(1);
                do {
                    eax6 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax6) << 1);
                } while (reinterpret_cast<signed char>(eax6) <= reinterpret_cast<signed char>(edx5));
                eax7 = reinterpret_cast<unsigned char>(eax6) >> 2;
                __asm__("fld qword [ebp+0x8]");
                __asm__("fld st0");
                do {
                    __asm__("fmul st0, st0");
                    if (reinterpret_cast<unsigned char>(edx5) & eax7) {
                        __asm__("fmul st0, st1");
                    }
                    eax7 = eax7 >> 1;
                } while (eax7);
                __asm__("fstp qword [ebp-0x8]");
                __asm__("fstp st0");
                __asm__("fld qword [ebp-0x8]");
            } else {
                __asm__("fld st0");
                __asm__("fmulp st1, st0");
                return;
            }
        }
        return;
    } else {
        __asm__("fld qword [0x180346b0]");
        return;
    }
}

void** fun_1800d700(void** ecx) {
    void** edx2;
    void** eax3;
    void** ecx4;
    int1_t below_or_equal5;
    void** v6;

    edx2 = ecx + 4;
    eax3 = reinterpret_cast<void**>(0xffffffff);
    ecx4 = *reinterpret_cast<void***>(edx2);
    if (ecx4 != edx2) {
        do {
            below_or_equal5 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx4 + 12)) <= reinterpret_cast<unsigned char>(eax3);
            v6 = *reinterpret_cast<void***>(ecx4 + 12);
            if (!below_or_equal5) {
            }
            ecx4 = *reinterpret_cast<void***>(ecx4);
            eax3 = v6;
        } while (ecx4 != edx2);
    }
    return eax3;
}

void fun_18018ba0(void** ecx, void** a2, void** a3);

void** fun_18018b80(void** ecx) {
    *reinterpret_cast<void***>(ecx + 16) = reinterpret_cast<void**>(0);
    fun_18018ba0(ecx, 0, 0);
    return ecx;
}

void fun_18018f90(void** ecx, void** a2) {
    fun_1801d290(ecx, a2);
    fun_1801d290(ecx + 40, a2 + 40);
    return;
}

void fun_18018d40(void** ecx, void** a2, void** a3, void** a4, void** a5);

void fun_18018fb0(void** ecx, void** a2) {
    void** edi3;
    void** esi4;

    fun_18018d40(ecx, a2, edi3, esi4, __return_address());
    fun_18018d40(ecx + 40, a2, edi3, esi4, __return_address());
    return;
}

void** g1803471c = reinterpret_cast<void**>(61);

int16_t fun_1800e050(void** ecx, void** a2);

int32_t fun_1800e260(void** ecx) {
    void** eax2;
    void** v3;
    void** ecx4;
    void** edi5;
    void** ecx6;

    eax2 = g1803471c;
    v3 = eax2;
    ecx4 = *reinterpret_cast<void***>(ecx + 0x2b0);
    edi5 = *reinterpret_cast<void***>(ecx4);
    fun_1800e050(ecx, eax2);
    ecx6 = *reinterpret_cast<void***>(ecx + 0x2b0);
    *reinterpret_cast<void***>(edi5 + 4)(ecx6);
    goto v3;
}

void fun_18012700(void** ecx) {
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x1803483c);
    return;
}

void fun_1800cef0(void** ecx, void** a2) {
    __asm__("fld qword [0x18034688]");
    __asm__("fmul dword [esp+0x4]");
    __asm__("fstp dword [esp]");
    fun_1800de40(ecx, ecx);
    return;
}

int32_t g1803469c = 0x3ff004b7;

int32_t g18034698 = 0xe9b5ce5d;

int32_t g180346a0 = 0xf4303d67;

int32_t g180346a4 = 0x3feff692;

void fun_1800cf10(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14) {
    int32_t edx15;
    int32_t eax16;
    int32_t ecx17;
    int32_t eax18;

    if (a2) {
        if (reinterpret_cast<signed char>(a2) >= reinterpret_cast<signed char>(0)) {
            edx15 = g1803469c;
            eax16 = g18034698;
            fun_1800ddc0(eax16, edx15, a2);
            return;
        } else {
            ecx17 = g180346a0;
            eax18 = g180346a4;
            fun_1800ddc0(ecx17, eax18, -reinterpret_cast<unsigned char>(a2));
            return;
        }
    } else {
        __asm__("fld qword [0x180346b0]");
        return;
    }
}

void fun_18019040(void** ecx, void** a2, void** a3) {
    void** edi4;
    void** esi5;
    void** ebx6;

    if (reinterpret_cast<signed char>(a2) < reinterpret_cast<signed char>(0)) {
    }
    fun_18018d50(ecx, a2, a3, edi4, esi5, ebx6);
    if (__intrinsic()) {
    }
    fun_18018d50(ecx + 40, 0, a3, edi4, esi5, ebx6);
    return;
}

void fun_18018fd0(void** ecx, void** a2, void** a3, void** a4) {
    __asm__("fld dword [esp+0x8]");
    __asm__("fmul dword [ebx]");
    __asm__("fstp dword [esp]");
    fun_18018ba0(ecx, ecx, a4);
    __asm__("fld dword [esp+0x14]");
    __asm__("fmul dword [ebx+0x4]");
    __asm__("fstp dword [esp]");
    fun_18018ba0(ecx + 40, ecx, a4);
    return;
}

struct s81 {
    signed char[44] pad44;
    int32_t f44;
    int32_t f48;
    signed char[12] pad64;
    int32_t f64;
};

struct s82 {
    signed char[20] pad20;
    int32_t f20;
};

struct s83 {
    signed char[20] pad20;
    int32_t f20;
};

struct s84 {
    signed char[32] pad32;
    int32_t f32;
};

struct s85 {
    signed char[28] pad28;
    int32_t f28;
};

struct s80 {
    struct s81* f0;
    signed char[12] pad16;
    int32_t f16;
    signed char[104] pad124;
    signed char f124;
    signed char f125;
    signed char[2] pad128;
    void** f128;
    signed char[3] pad132;
    void** f132;
    signed char[51] pad184;
    void** f184;
    signed char[39] pad224;
    void** f224;
    signed char[439] pad664;
    void** f664;
    signed char[23] pad688;
    struct s82** f688;
    signed char[772] pad1464;
    struct s83** f1464;
    signed char[32] pad1500;
    int32_t f1500;
    void** f1504;
    signed char[3] pad1508;
    void** f1508;
    signed char[3] pad1512;
    int32_t f1512;
    signed char[192] pad1708;
    struct s84** f1708;
    signed char[32] pad1744;
    struct s85** f1744;
};

void fun_18012f60(struct s80* ecx, void** a2) {
    struct s81* eax3;
    int32_t v4;
    struct s81* edx5;
    int32_t esi6;
    struct s81* eax7;
    struct s81* edx8;

    if (ecx->f132 == a2) {
        if (ecx->f124) {
            eax3 = ecx->f0;
            if (!ecx->f125) {
                v4 = ecx->f16;
                eax3->f64(ecx, v4);
                ecx->f125 = 0;
                ecx->f124 = 0;
            } else {
                eax3->f48(ecx);
                edx5 = ecx->f0;
                edx5->f64(ecx);
                ecx->f125 = 0;
                ecx->f124 = 0;
                goto esi6;
            }
        }
        return;
    } else {
        ecx->f132 = a2;
        eax7 = ecx->f0;
        eax7->f44(ecx);
        edx8 = ecx->f0;
        edx8->f64(ecx);
        ecx->f125 = 0;
        ecx->f124 = 0;
        goto esi6;
    }
}

struct s87 {
    signed char[12] pad12;
    int32_t f12;
};

struct s86 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
    signed char[3] pad16;
    void** f16;
    signed char[3] pad20;
    int32_t f20;
    int32_t f24;
    void** f28;
    signed char[3] pad32;
    void** f32;
    signed char[3] pad36;
    struct s87** f36;
};

void* fun_18018bf0(struct s86* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23);

void fun_18018da0(struct s86* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9) {
    void** v10;
    void** ebx11;
    void** v12;
    void** ebp13;
    void** ebp14;
    void** v15;
    void** esi16;
    struct s86* esi17;
    void* ebx18;
    void*** esp19;
    void** v20;
    void** edi21;
    int1_t zf22;
    void** v23;
    void*** eax24;
    void** edi25;
    void** eax26;
    void** v27;
    void** v28;
    void** ecx29;
    void* edx30;
    void** edx31;
    void** v32;
    void** ecx33;
    void** v34;
    void** edx35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void*** esp40;
    void** v41;
    void** ecx42;
    void** eax43;
    void** v44;
    void** ecx45;
    void** v46;
    void** ecx47;
    void** v48;
    void** ecx49;
    void** v50;
    void** ecx51;
    void** v52;
    struct s87** ecx53;
    void*** esp54;
    struct s87* edi55;
    void** v56;
    int32_t edx57;
    int32_t ecx58;
    void** edi59;

    v10 = ebx11;
    v12 = ebp13;
    ebp14 = a3;
    v15 = esi16;
    esi17 = ecx;
    ebx18 = reinterpret_cast<void*>(-esi17->f20);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(ebp14) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(ebp14 == 0))) {
        esp19 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 68 - 4 - 4 - 4 - 4);
        v20 = edi21;
        while (1) {
            zf22 = esi17->f20 == esi17->f24;
            v23 = ebp14;
            if (!zf22) {
                eax24 = &esi17->f32;
                if (reinterpret_cast<signed char>(ebp14) <= reinterpret_cast<signed char>(esi17->f32)) {
                    eax24 = esp19 + 16;
                }
                ebp14 = *eax24;
                v23 = ebp14;
            }
            if (reinterpret_cast<int32_t>(ebx18) >= reinterpret_cast<int32_t>(0)) {
                edi25 = *reinterpret_cast<void***>(a2);
                eax26 = a2 + 4;
                v27 = *reinterpret_cast<void***>(eax26);
                v28 = *reinterpret_cast<void***>(eax26 + 4);
                ecx29 = *reinterpret_cast<void***>(eax26 + 12);
                if (reinterpret_cast<signed char>(ecx29) < reinterpret_cast<signed char>(0)) {
                    edx30 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax26 + 8)) * reinterpret_cast<uint32_t>(ebx18));
                } else {
                    edx30 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebx18) << *reinterpret_cast<unsigned char*>(&ecx29));
                }
                edx31 = *reinterpret_cast<void***>(eax26 + 4);
                v32 = *reinterpret_cast<void***>(eax26);
                ecx33 = *reinterpret_cast<void***>(eax26 + 8);
                v34 = edx31;
                edx35 = *reinterpret_cast<void***>(eax26 + 12);
                v36 = ecx33;
                v37 = a4;
                v38 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi25) + reinterpret_cast<uint32_t>(edx30));
                v39 = edx35;
                esp40 = esp19 - 4 - 4;
                v41 = ebp14;
                ecx42 = reinterpret_cast<void**>(esp40 + 52);
            } else {
                eax43 = reinterpret_cast<void**>(-reinterpret_cast<uint32_t>(ebx18));
                v44 = eax43;
                if (reinterpret_cast<signed char>(ebp14) > reinterpret_cast<signed char>(eax43)) {
                }
                ecx45 = g180458c8;
                v46 = ecx45;
                ecx47 = g180458cc;
                v48 = ecx47;
                ecx49 = g180458d0;
                v50 = ecx49;
                ecx51 = g180458d4;
                v52 = ecx51;
                ecx53 = esi17->f36;
                esp54 = esp19 - 4;
                v37 = reinterpret_cast<void**>(esp19 + 16);
                v23 = v44;
                edi55 = *ecx53;
                v41 = reinterpret_cast<void**>(esp54 + 28);
                edi55->f12(eax43, v44, v41, v37);
                esp40 = esp54 - 4 - 4 - 4 - 4 + 4 - 4 - 4;
                ecx42 = reinterpret_cast<void**>(esp40 + 32);
            }
            fun_18018bf0(esi17, ecx42, v41, v37, v20, v15, v12, v10, v23, v44, 0, v46, v48, v50, v52, v38, v32, v34, v36, v39, v56, v27, v28);
            esp19 = esp40 - 4 - 4 + 12 + 4;
            edx57 = esi17->f24;
            ebx18 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebx18) + reinterpret_cast<unsigned char>(v23));
            a4 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a4) + reinterpret_cast<unsigned char>(v23));
            ecx58 = esi17->f20;
            a3 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a3) - reinterpret_cast<unsigned char>(v23));
            if (ecx58 != edx57 && (edi59 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi17->f32) - reinterpret_cast<unsigned char>(v23)), esi17->f32 = edi59, !edi59)) {
                if (edx57 <= ecx58) {
                    ebx18 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebx18) + 1);
                    esi17->f20 = ecx58 - 1;
                } else {
                    ebx18 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebx18) - 1);
                    esi17->f20 = ecx58 + 1;
                }
                esi17->f32 = esi17->f28;
            }
            if (reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(a3) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(a3 == 0))) 
                break;
            ebp14 = a3;
        }
    }
    return;
}

void* fun_18019390(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36);

void* fun_18018bf0(struct s86* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23) {
    void** eax24;
    void** ecx25;
    void** v26;
    void** ecx27;
    void** edi28;
    void** ebx29;
    void** esi30;
    void** ebp31;
    void** v32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** ebx38;
    void** eax39;
    void** edx40;
    void** ecx41;
    void* edi42;
    void** v43;
    void** v44;
    void** eax45;
    void** v46;
    void** ecx47;
    void** ecx48;
    void** v49;
    void** edx50;
    void** eax51;
    void** ecx52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** eax59;
    void** ecx60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void* ax68;

    eax24 = ecx->f0;
    if (eax24) {
        if (reinterpret_cast<signed char>(a3) >= reinterpret_cast<signed char>(eax24)) {
            ecx25 = ecx->f4;
            v26 = ecx->f12;
            ecx27 = ecx->f16;
            fun_18019390(ecx27, a2, ecx25, v26, eax24, a4, edi28, ebx29, esi30, ebp31, v32, v33, v34, v35, v36, v37, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
            ebx38 = *reinterpret_cast<void***>(a2);
            eax39 = a2 + 4;
            edx40 = ecx->f0;
            ecx41 = *reinterpret_cast<void***>(eax39 + 12);
            if (reinterpret_cast<signed char>(ecx41) < reinterpret_cast<signed char>(0)) {
                edi42 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax39 + 8)) * reinterpret_cast<unsigned char>(edx40));
            } else {
                edi42 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(edx40) << *reinterpret_cast<unsigned char*>(&ecx41));
            }
            v43 = *reinterpret_cast<void***>(eax39);
            v44 = *reinterpret_cast<void***>(eax39 + 4);
            eax45 = *reinterpret_cast<void***>(eax39 + 12);
            v46 = *reinterpret_cast<void***>(eax39 + 8);
            ecx47 = ecx->f8;
            ecx48 = ecx->f16;
            fun_18019390(ecx48, reinterpret_cast<int32_t>(__zero_stack_offset()) - 24 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4 - 4 - 4 - 4 + 32, ecx47, 0, reinterpret_cast<unsigned char>(a3) - reinterpret_cast<unsigned char>(edx40), reinterpret_cast<unsigned char>(edx40) + reinterpret_cast<unsigned char>(a4), edi28, ebx29, esi30, ebp31, v49, reinterpret_cast<unsigned char>(ebx38) + reinterpret_cast<uint32_t>(edi42), v43, v44, v46, eax45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
            eax24 = ecx->f8;
            ecx->f4 = eax24;
            ecx->f12 = reinterpret_cast<void**>(0);
            ecx->f0 = reinterpret_cast<void**>(0);
        } else {
            edx50 = ecx->f12;
            eax51 = ecx->f4;
            ecx52 = ecx->f16;
            fun_18019390(ecx52, a2, eax51, edx50, a3, a4, esi30, ebp31, v53, v54, v55, v56, v57, v58, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
            __asm__("fild dword [esp+0x28]");
            eax59 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx->f0) - reinterpret_cast<unsigned char>(a3));
            __asm__("fmul dword [esi+0xc]");
            ecx->f0 = eax59;
            __asm__("fadd dword [esi+0x4]");
            __asm__("fstp dword [esi+0x4]");
            return *reinterpret_cast<void**>(&eax59);
        }
    } else {
        __asm__("fld dword [esi+0x4]");
        __asm__("fst dword [esp+0x8]");
        __asm__("fcomp dword [0x1803422c]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax24 + 1) & 64)) {
            ecx60 = ecx->f16;
            ax68 = fun_18019390(ecx60, a2, v61, 0, a3, a4, esi30, ebp31, v62, v63, v64, v65, v66, v67, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
            return ax68;
        }
    }
    return *reinterpret_cast<void**>(&eax24);
}

void fun_18019180(void** ecx) {
    void** esi2;
    void** edx3;
    void** esi4;
    void** esi5;
    void** esi6;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0);
    esi2 = g180458c8;
    edx3 = ecx + 4;
    *reinterpret_cast<void***>(ecx + 4) = esi2;
    esi4 = g180458cc;
    *reinterpret_cast<void***>(edx3 + 4) = esi4;
    esi5 = g180458d0;
    *reinterpret_cast<void***>(edx3 + 8) = esi5;
    esi6 = g180458d4;
    *reinterpret_cast<void***>(ecx + 20) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(edx3 + 12) = esi6;
    *reinterpret_cast<void***>(ecx + 28) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 36) = reinterpret_cast<void**>(0);
    return;
}

int16_t fun_18019210(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** eax45;
    void** ecx46;
    void** esi47;

    eax45 = *reinterpret_cast<void***>(ecx + 36);
    if (eax45 && (*reinterpret_cast<void***>(eax45) = *reinterpret_cast<void***>(eax45) - 1, eax45 = *reinterpret_cast<void***>(ecx + 36), !*reinterpret_cast<void***>(eax45))) {
        ecx46 = *reinterpret_cast<void***>(ecx + 32);
        *reinterpret_cast<int16_t*>(&eax45) = fun_1802b2b0(ecx46, ecx46, esi47, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
        *reinterpret_cast<void***>(ecx + 36) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0);
    }
    return *reinterpret_cast<int16_t*>(&eax45);
}

void fun_18013090(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** v45;
    void** v46;
    void** esi47;
    void** esi48;
    void** edx49;
    void** ecx50;
    void** eax51;
    void** eax52;
    void** ecx53;

    v45 = reinterpret_cast<void**>(__return_address());
    v46 = esi47;
    esi48 = ecx;
    edx49 = esi48 + 24;
    *reinterpret_cast<void***>(esi48) = reinterpret_cast<void**>(0x180348a0);
    ecx50 = *reinterpret_cast<void***>(edx49);
    if (ecx50 != edx49) {
        do {
            eax51 = ecx50;
            ecx50 = *reinterpret_cast<void***>(ecx50);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax51 + 4)) = *reinterpret_cast<void***>(eax51);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax51) + 4) = *reinterpret_cast<void***>(eax51 + 4);
            *reinterpret_cast<void***>(eax51) = *reinterpret_cast<void***>(esi48 + 36);
            *reinterpret_cast<void***>(esi48 + 36) = eax51;
            *reinterpret_cast<void***>(esi48 + 20) = *reinterpret_cast<void***>(esi48 + 20) - 1;
        } while (ecx50 != edx49);
    }
    eax52 = *reinterpret_cast<void***>(esi48 + 36);
    if (eax52) {
        do {
            ecx53 = *reinterpret_cast<void***>(eax52);
            *reinterpret_cast<void***>(esi48 + 36) = ecx53;
            fun_1802b2b0(ecx53, eax52, v46, v45, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
            eax52 = *reinterpret_cast<void***>(esi48 + 36);
        } while (eax52);
    }
    *reinterpret_cast<void***>(esi48) = reinterpret_cast<void**>(0x180348d4);
    return;
}

struct s88 {
    signed char[32] pad32;
    int32_t f32;
};

int16_t fun_18019f00(void*** ecx, void** a2, void* a3, void* a4);

int16_t fun_18019f50(void** ecx, void** a2) {
    void** esi3;
    void** eax4;
    struct s88** eax5;
    struct s88** edi6;
    struct s88** v7;
    void** eax8;
    void** ebp9;
    void* esp10;
    void* ebx11;
    void** edx12;
    void* edi13;
    void** ecx14;
    void** ecx15;
    void** edx16;
    struct s88* eax17;
    int32_t v18;

    esi3 = a2;
    if (!esi3 || (reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi3 + 8)) > reinterpret_cast<signed char>(20) || (eax4 = *reinterpret_cast<void***>(ecx), eax5 = reinterpret_cast<struct s88**>(*reinterpret_cast<void***>(eax4 + 72)()), edi6 = eax5, v7 = edi6, edi6 == 0))) {
        return 0;
    } else {
        eax8 = *reinterpret_cast<void***>(esi3 + 8);
        ebp9 = reinterpret_cast<void**>(0);
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax8) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax8 == 0))) {
            esp10 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x150 - 4 - 4 - 4 + 4 - 4 - 4);
            ebx11 = reinterpret_cast<void*>(0);
            do {
                edx12 = *reinterpret_cast<void***>(esi3);
                edi13 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp10) + reinterpret_cast<uint32_t>(ebx11) + 32);
                ecx14 = *reinterpret_cast<void***>(esi3 + 12);
                fun_18019f00(reinterpret_cast<unsigned char>(ecx14) + reinterpret_cast<uint32_t>(ebx11), edx12, edi13, reinterpret_cast<uint32_t>(edi13) + 4);
                ecx15 = *reinterpret_cast<void***>(esi3);
                edx16 = *reinterpret_cast<void***>(esi3 + 12);
                fun_18019f00(reinterpret_cast<unsigned char>(edx16) + reinterpret_cast<uint32_t>(ebx11) + 8, ecx15, reinterpret_cast<uint32_t>(edi13) + 8, reinterpret_cast<uint32_t>(edi13) + 12);
                esp10 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp10) - 4 - 4 - 4 - 4 + 12 + 4 - 4 - 4 - 4 - 4 + 12 + 4);
                ++ebp9;
                ebx11 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebx11) + 16);
            } while (reinterpret_cast<signed char>(ebp9) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi3 + 8)));
            edi6 = v7;
        }
        eax17 = *edi6;
        eax17->f32(edi6);
        goto v18;
    }
}

int16_t fun_18013e80(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85, void** a86, void** a87, void** a88, void** a89, void** a90, void** a91, void** a92, void** a93, void** a94, void** a95, void** a96);

int16_t fun_18014440(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85, void** a86, void** a87, void** a88, void** a89, void** a90, void** a91, void** a92, void** a93, void** a94, void** a95, void** a96, void** a97, void** a98, void** a99, void** a100, void** a101, void** a102, void** a103, void** a104, void** a105) {
    void** esi106;
    void** eax107;
    int16_t ax108;

    if (!a4) {
        eax107 = fun_1802b2bb(a4, 0x280, esi106, __return_address(), a2, a3, a4, a5, a6);
        if (eax107) {
            ax108 = fun_18013e80(eax107, ecx, a2, a3, esi106, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91);
            return ax108;
        }
    }
    return 0;
}

struct s89 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

struct s90 {
    signed char[8] pad8;
    void** f8;
};

void fun_18019220(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42);

void** fun_18017250(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25);

void fun_180190d0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85, void** a86, void** a87, void** a88, void** a89, void** a90, void** a91, void** a92, void** a93, void** a94, void** a95, void** a96, void** a97, void** a98, void** a99, void** a100, void** a101, void** a102, void** a103, void** a104) {
    void** eax105;
    struct s89* eax106;
    void** v107;
    void** ecx108;
    void** v109;
    void** ebp110;
    void** ebx111;
    void** esi112;
    struct s90* eax113;
    void** edi114;
    void** esi115;
    void** ebp116;
    void** v117;
    void** eax118;
    void** eax119;
    void** v120;
    void** v121;
    void** v122;
    void** v123;
    void** v124;
    void** v125;
    void** v126;
    void** v127;
    void** v128;
    void** v129;
    void** v130;
    void** v131;
    void** v132;
    void** v133;
    int32_t v134;

    eax105 = *reinterpret_cast<void***>(ecx);
    eax106 = reinterpret_cast<struct s89*>(*reinterpret_cast<void***>(eax105)(ecx));
    v107 = eax106->f0;
    ecx108 = eax106->f4;
    v109 = ecx108;
    ebp110 = eax106->f8;
    ebx111 = eax106->f12;
    if (!ebx111) {
        esi112 = a2;
        eax113 = reinterpret_cast<struct s90*>(reinterpret_cast<unsigned char>(ebp110) * reinterpret_cast<unsigned char>(esi112));
    } else {
        esi112 = a2;
        ecx108 = ebx111;
        eax113 = reinterpret_cast<struct s90*>(reinterpret_cast<unsigned char>(esi112) << *reinterpret_cast<unsigned char*>(&ecx108));
    }
    eax118 = fun_1802b2bb(ecx108, &eax113->f8, reinterpret_cast<int32_t>(__zero_stack_offset()) - 32 - 4 - 4 - 4 - 4 + 32, edi114, esi115, ebp116, v107, v109, v117);
    if (eax118) {
        *reinterpret_cast<void***>(eax118) = reinterpret_cast<void**>(0);
        eax119 = eax118 + 8;
        *reinterpret_cast<unsigned char*>(&eax119) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax119) & 0xf8);
        fun_18019220(__return_address(), ecx, v107, v109, ebp110, ebx111, esi112, eax119, eax118, eax118, reinterpret_cast<int32_t>(__zero_stack_offset()) - 32 - 4 - 4 - 4 - 4 + 32, edi114, esi115, ebp116, v107, v109, v120, v121, v122, v123, v124, v125, v126, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
        fun_18017250(__return_address(), esi112, reinterpret_cast<int32_t>(__zero_stack_offset()) - 32 - 4 - 4 - 4 - 4 + 32, edi114, esi115, ebp116, v107, v109, v127, v128, v129, v130, v131, v132, v133, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10);
    }
    goto v134;
}

struct s91 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

int16_t fun_1800e220(void** ecx, void** a2) {
    struct s91* eax3;
    int32_t eax4;
    void** edx5;
    int32_t eax6;

    eax3 = reinterpret_cast<struct s91*>(ecx + 0x88);
    eax3->f0 = *reinterpret_cast<void***>(a2);
    eax3->f4 = *reinterpret_cast<void***>(a2 + 4);
    eax3->f8 = *reinterpret_cast<void***>(a2 + 8);
    eax4 = fun_1800e260(ecx);
    edx5 = *reinterpret_cast<void***>(ecx);
    *reinterpret_cast<void***>(edx5 + 60)(ecx);
    eax6 = eax4;
    *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(1);
    return *reinterpret_cast<int16_t*>(&eax6);
}

int16_t fun_18012620(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16);

void fun_18005d20(void** a1, void* a2, int32_t a3, int32_t a4);

void** fun_18018d20(void** ecx);

int16_t fun_1800de90(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10) {
    void** esi11;
    void** edi12;
    void** esi13;
    void** ebp14;
    void** ebx15;
    void** ebx16;
    int32_t ebp17;
    void** edi18;
    void** ebp19;
    void** edx20;
    void** eax21;
    void** edi22;
    int32_t ebx23;
    void** v24;
    void** v25;
    void** eax26;

    esi11 = ecx;
    fun_18012620(ecx, a10, edi12, esi13, ebp14, ebx15, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10);
    ebx16 = esi11 + 0xb8;
    ebp17 = 6;
    edi18 = ebx16;
    do {
        fun_18005d20(edi18, 40, 2, fun_18018d20);
        edi18 = edi18 + 80;
        --ebp17;
    } while (ebp17);
    ebp19 = esi11 + 0x298;
    fun_18018b80(ebp19);
    *reinterpret_cast<void***>(esi11 + 0x2b0) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi11 + 0x2ac) = a9;
    *reinterpret_cast<void***>(esi11) = reinterpret_cast<void**>(0x18034720);
    edx20 = *reinterpret_cast<void***>(a2);
    eax21 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx20 + 4)());
    *reinterpret_cast<void***>(esi11 + 0x2b0) = eax21;
    fun_18018f90(ebx16, a3);
    fun_18018f90(esi11 + 0x108, a4);
    fun_18018f90(esi11 + 0x158, a5);
    fun_18018f90(esi11 + 0x1a8, a6);
    fun_18018f90(esi11 + 0x1f8, a7);
    fun_18018f90(esi11 + 0x248, a8);
    edi22 = ebx16;
    ebx23 = 6;
    do {
        v24 = *reinterpret_cast<void***>(esi11 + 0x2b0);
        fun_18018fb0(edi22, v24);
        edi22 = edi22 + 80;
        --ebx23;
    } while (ebx23);
    v25 = *reinterpret_cast<void***>(esi11 + 0x2ac);
    fun_1801d290(ebp19, v25);
    *reinterpret_cast<void***>(esi11 + 0x98) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(esi11 + 0xb0) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(esi11 + 0xac) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(esi11 + 0xa8) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(esi11 + 0x9c) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(esi11 + 0x94) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi11 + 0xb4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi11 + 0xa0) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi11 + 0xa4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi11 + 0x90) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi11 + 0x8c) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi11 + 0x88) = reinterpret_cast<void**>(0);
    fun_1800e260(esi11);
    eax26 = esi11;
    return *reinterpret_cast<int16_t*>(&eax26);
}

void** fun_18019310(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14);

int16_t fun_180192b0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9) {
    void** eax10;
    void** eax11;
    int16_t ax12;
    void** edi13;
    void** esi14;
    void** ebx15;
    void** edx16;

    if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 24)) >= reinterpret_cast<signed char>(a3)) {
        eax10 = *reinterpret_cast<void***>(a2);
        *reinterpret_cast<void***>(eax10 + 16)();
        *reinterpret_cast<signed char*>(&eax10) = 1;
        return *reinterpret_cast<int16_t*>(&eax10);
    } else {
        if (*reinterpret_cast<void***>(ecx + 24) || (eax11 = *reinterpret_cast<void***>(a2), ax12 = reinterpret_cast<int16_t>(*reinterpret_cast<void***>(eax11 + 20)(a2)), *reinterpret_cast<signed char*>(&ax12) == 0)) {
            fun_18019310(ecx, a3, edi13, esi14, ebx15, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
            edx16 = *reinterpret_cast<void***>(a2);
            *reinterpret_cast<void***>(edx16 + 12)(a2);
            goto ebx15;
        } else {
            *reinterpret_cast<signed char*>(&ax12) = 0;
            return ax12;
        }
    }
}

void** fun_1801a210(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43);

int16_t fun_18019740(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25) {
    void** eax26;
    void*** esp27;
    void** ecx28;
    void** ecx29;
    void** eax30;
    void** eax31;
    void** eax32;
    void** eax33;
    void*** esp34;
    void** ebp35;
    void** ecx36;
    void* edx37;
    void** edx38;
    void** v39;
    void** ecx40;
    void** edx41;
    void** eax42;
    void** ebp43;
    void** ecx44;
    void* edx45;
    void** edx46;
    void** v47;
    void** ecx48;
    void** edx49;
    void** ebp50;
    void** edi51;
    void** esi52;
    void** ebx53;
    void** eax54;

    eax26 = *reinterpret_cast<void***>(a2 + 24);
    esp27 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4);
    ecx28 = *reinterpret_cast<void***>(ecx + 24);
    if (reinterpret_cast<signed char>(ecx28) > reinterpret_cast<signed char>(eax26)) {
    }
    if (ecx28) {
        ecx29 = *reinterpret_cast<void***>(ecx + 20);
        eax30 = *reinterpret_cast<void***>(ecx29);
        *reinterpret_cast<void***>(eax30 + 16)(ecx, a2, ecx28);
        esp27 = esp27 - 4 - 4 - 4 - 4 + 4;
    }
    eax31 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 24)) - reinterpret_cast<unsigned char>(ecx28));
    if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax31) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax31 == 0)) {
        eax32 = ecx;
        return *reinterpret_cast<int16_t*>(&eax32);
    } else {
        eax33 = ecx + 4;
        esp34 = esp27 - 4;
        ebp35 = *reinterpret_cast<void***>(ecx);
        ecx36 = *reinterpret_cast<void***>(eax33 + 12);
        if (reinterpret_cast<signed char>(ecx36) < reinterpret_cast<signed char>(0)) {
            edx37 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax33 + 8)) * reinterpret_cast<unsigned char>(ecx28));
        } else {
            edx37 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ecx28) << *reinterpret_cast<unsigned char*>(&ecx36));
        }
        edx38 = *reinterpret_cast<void***>(eax33 + 4);
        v39 = *reinterpret_cast<void***>(eax33);
        ecx40 = *reinterpret_cast<void***>(eax33 + 8);
        edx41 = *reinterpret_cast<void***>(eax33 + 12);
        eax42 = a2 + 4;
        ebp43 = *reinterpret_cast<void***>(a2);
        ecx44 = *reinterpret_cast<void***>(eax42 + 12);
        if (reinterpret_cast<signed char>(ecx44) < reinterpret_cast<signed char>(0)) {
            edx45 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax42 + 8)) * reinterpret_cast<unsigned char>(ecx28));
        } else {
            edx45 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ecx28) << *reinterpret_cast<unsigned char*>(&ecx44));
        }
        edx46 = *reinterpret_cast<void***>(eax42 + 4);
        v47 = *reinterpret_cast<void***>(eax42);
        ecx48 = *reinterpret_cast<void***>(eax42 + 8);
        edx49 = *reinterpret_cast<void***>(eax42 + 12);
        fun_1801a210(esp34 - 4 - 4 + 48, esp34 + 20, eax31, ebp50, edi51, esi52, ebx53, eax26, reinterpret_cast<uint32_t>(edx37) + reinterpret_cast<unsigned char>(ebp35), v39, edx38, ecx40, edx41, reinterpret_cast<unsigned char>(ebp43) + reinterpret_cast<uint32_t>(edx45), v47, edx46, ecx48, edx49, __return_address(), eax31, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25);
        *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 24)) + reinterpret_cast<unsigned char>(eax31));
        eax54 = ecx;
        return *reinterpret_cast<int16_t*>(&eax54);
    }
}

void fun_18019b10(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10) {
    void** edi11;
    void** esi12;
    void** ecx13;
    void** eax14;

    fun_18019310(ecx, a3, edi11, esi12, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10);
    ecx13 = *reinterpret_cast<void***>(ecx + 20);
    eax14 = *reinterpret_cast<void***>(ecx13);
    *reinterpret_cast<void***>(eax14 + 0x70)();
    *reinterpret_cast<void***>(ecx + 28) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 28)) + reinterpret_cast<unsigned char>(edi11));
    goto a3;
}

void fun_18013010(void** ecx, void** a2);

struct s92 {
    void** f0;
    signed char[7] pad8;
    void** f8;
    signed char[11] pad20;
    void** f20;
    signed char[7] pad28;
    void** f28;
    signed char[7] pad36;
    void** f36;
};

int16_t fun_1800e7c0(void** ecx, void** a2) {
    void** esi3;
    void** edi4;
    int32_t ebx5;
    void** edi6;
    int32_t ebx7;
    void** edi8;
    int32_t ebx9;
    void** edi10;
    int32_t ebx11;
    void** edi12;
    int32_t ebx13;
    void** edi14;
    int32_t ebx15;
    struct s92* eax16;
    int32_t edx17;
    void** eax18;

    esi3 = ecx;
    fun_18013010(ecx, a2);
    edi4 = esi3 + 0x32c;
    ebx5 = 2;
    do {
        fun_18019180(edi4);
        edi4 = edi4 + 40;
        --ebx5;
    } while (ebx5);
    edi6 = esi3 + 0x37c;
    ebx7 = 2;
    do {
        fun_18019180(edi6);
        edi6 = edi6 + 40;
        --ebx7;
    } while (ebx7);
    edi8 = esi3 + 0x3cc;
    ebx9 = 2;
    do {
        fun_18019180(edi8);
        edi8 = edi8 + 40;
        --ebx9;
    } while (ebx9);
    edi10 = esi3 + 0x41c;
    ebx11 = 2;
    do {
        fun_18019180(edi10);
        edi10 = edi10 + 40;
        --ebx11;
    } while (ebx11);
    edi12 = esi3 + 0x46c;
    ebx13 = 2;
    do {
        fun_18019180(edi12);
        edi12 = edi12 + 40;
        --ebx13;
    } while (ebx13);
    edi14 = esi3 + 0x4bc;
    ebx15 = 2;
    do {
        fun_18019180(edi14);
        edi14 = edi14 + 40;
        --ebx15;
    } while (ebx15);
    fun_18019180(esi3 + 0x50c);
    fun_18019180(esi3 + 0x534);
    *reinterpret_cast<void***>(esi3) = reinterpret_cast<void**>(0x18034778);
    eax16 = reinterpret_cast<struct s92*>(esi3 + 0x55c);
    edx17 = 2;
    do {
        eax16->f8 = reinterpret_cast<void**>(0);
        eax16->f0 = reinterpret_cast<void**>(0);
        eax16->f28 = reinterpret_cast<void**>(0);
        eax16->f20 = reinterpret_cast<void**>(0);
        eax16->f36 = reinterpret_cast<void**>(0);
        eax16 = reinterpret_cast<struct s92*>(reinterpret_cast<uint32_t>(eax16) + 4);
        --edx17;
    } while (edx17);
    *reinterpret_cast<void***>(esi3 + 0x56c) = reinterpret_cast<void**>(0);
    eax18 = esi3;
    return *reinterpret_cast<int16_t*>(&eax18);
}

void** fun_18018d20(void** ecx) {
    fun_18018b80(ecx);
    *reinterpret_cast<void***>(ecx + 20) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 28) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0);
    return ecx;
}

void fun_18018d40(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    *reinterpret_cast<void***>(ecx + 36) = a2;
    return;
}

void fun_18018ba0(void** ecx, void** a2, void** a3) {
    void** eax4;

    *reinterpret_cast<void***>(ecx + 8) = a2;
    eax4 = a3;
    *reinterpret_cast<void***>(ecx) = eax4;
    if (eax4) {
        __asm__("fld dword [esp+0x4]");
        __asm__("fsub dword [ecx+0x4]");
        __asm__("fidiv dword [esp+0x8]");
        __asm__("fst dword [ecx+0xc]");
        __asm__("fcomp dword [0x1803422c]");
        __asm__("fnstsw ax");
        if (*reinterpret_cast<unsigned char*>(&eax4 + 1) & 64) {
            *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0);
            *reinterpret_cast<void***>(ecx + 4) = a2;
        }
        return;
    } else {
        *reinterpret_cast<void***>(ecx + 12) = eax4;
        *reinterpret_cast<void***>(ecx + 4) = a2;
        return;
    }
}

void fun_1800feb0(void** ecx, void** a2, signed char* a3, signed char a4) {
    void** eax5;

    if (a4 != *a3 && ((*a3 = a4, !a4) && a2)) {
        eax5 = *reinterpret_cast<void***>(a2);
        *reinterpret_cast<void***>(eax5 + 4)(3, 0x18045888, 8);
    }
    return;
}

int16_t fun_1800dce0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** edx8;
    uint32_t eax9;
    void** esi10;
    void** ecx11;

    edx8 = a2;
    eax9 = 0;
    if (!edx8) {
        addr_0x1800dd00_2:
        eax9 = 0xffffffff;
    } else {
        esi10 = a3;
        do {
            ecx11 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(-reinterpret_cast<unsigned char>(edx8)) & reinterpret_cast<unsigned char>(edx8));
            if (ecx11 == esi10) 
                break;
            edx8 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx8) ^ reinterpret_cast<unsigned char>(ecx11));
            ++eax9;
        } while (edx8);
        goto addr_0x1800dd00_2;
    }
    return *reinterpret_cast<int16_t*>(&eax9);
}

struct s93 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    signed char f8;
};

struct s94 {
    signed char[4] pad4;
    void** f4;
    signed char[3] pad8;
    signed char f8;
};

void fun_1800fd90(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** eax6;
    void** esi7;
    void** edi8;
    void** eax9;
    void** ecx10;
    struct s93* ecx11;
    struct s94* edx12;

    eax6 = a5;
    esi7 = ecx;
    edi8 = a3;
    fun_18018ba0(edi8, a4, eax6);
    __asm__("fld dword [edi+0x4]");
    __asm__("fcomp dword [0x1803422c]");
    __asm__("fnstsw ax");
    if (!(*reinterpret_cast<unsigned char*>(&eax6 + 1) & 64) || *reinterpret_cast<void***>(edi8)) {
        eax9 = *reinterpret_cast<void***>(esi7 + 0x5dc);
        ecx10 = reinterpret_cast<void**>(0);
        if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax9) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax9 == 0)) {
            addr_0x1800fddd_3:
            if (reinterpret_cast<signed char>(eax9) < reinterpret_cast<signed char>(16)) {
                *reinterpret_cast<void***>(esi7 + 0x5dc) = eax9 + 1;
                ecx11 = reinterpret_cast<struct s93*>(esi7 + (reinterpret_cast<uint32_t>(eax9 + reinterpret_cast<unsigned char>(eax9) * 2) + 0x17a) * 4);
                ecx11->f4 = edi8;
                ecx11->f0 = a2;
                ecx11->f8 = 1;
                goto addr_0x1800fe00_5;
            }
        } else {
            edx12 = reinterpret_cast<struct s94*>(esi7 + 0x5e8);
            do {
                if (edx12->f4 == edi8) 
                    break;
                ++ecx10;
                edx12 = reinterpret_cast<struct s94*>(reinterpret_cast<uint32_t>(edx12) + 12);
            } while (reinterpret_cast<signed char>(ecx10) < reinterpret_cast<signed char>(eax9));
            goto addr_0x1800fddd_3;
        }
    } else {
        addr_0x1800fe00_5:
        return;
    }
    edx12->f8 = 1;
    return;
}

int16_t fun_1800f900(void** ecx, uint32_t a2, void** a3, void** a4) {
    void** esi5;
    void** eax6;
    uint32_t edi7;
    void*** edx8;
    uint32_t eax9;

    esi5 = *reinterpret_cast<void***>(ecx + 0x8c);
    eax6 = reinterpret_cast<void**>(0);
    if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(esi5) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(esi5 == 0)) {
        addr_0x1800f924_2:
        return 0;
    } else {
        edi7 = a2;
        edx8 = reinterpret_cast<void***>(ecx + 0x9c);
        do {
            if (reinterpret_cast<unsigned char>(*edx8) & edi7) 
                break;
            ++eax6;
            edx8 = edx8 + 96;
        } while (reinterpret_cast<signed char>(eax6) < reinterpret_cast<signed char>(esi5));
        goto addr_0x1800f924_2;
    }
    eax9 = (reinterpret_cast<uint32_t>(eax6 + reinterpret_cast<unsigned char>(eax6) * 2) << 5) + reinterpret_cast<unsigned char>(ecx) + 0x98;
    return *reinterpret_cast<int16_t*>(&eax9);
}

int16_t fun_1800db30(void** ecx, void** a2) {
    void** esi3;
    uint32_t ecx4;
    uint32_t eax5;
    uint32_t ecx6;
    uint32_t eax7;
    void** eax8;
    uint32_t eax9;
    uint32_t esi10;
    uint32_t eax11;
    uint32_t eax12;

    esi3 = a2;
    if (reinterpret_cast<signed char>(esi3) < reinterpret_cast<signed char>(0)) {
        ecx4 = (0x167 - reinterpret_cast<unsigned char>(esi3) - __intrinsic() >> 1) + __intrinsic() >> 8;
        eax5 = ecx4 + ecx4 * 4;
        esi3 = esi3 + (eax5 + eax5 * 8) * 8;
    }
    if (reinterpret_cast<signed char>(esi3) > reinterpret_cast<signed char>(0x168)) {
        ecx6 = (reinterpret_cast<unsigned char>(esi3 + 0xffffffff) - __intrinsic() >> 1) + __intrinsic() >> 8;
        eax7 = (reinterpret_cast<int32_t>(-ecx6) << 2) - ecx6;
        esi3 = esi3 + (eax7 + eax7 * 8) * 8;
    }
    if (reinterpret_cast<signed char>(esi3) <= reinterpret_cast<signed char>(0xb4)) {
        if (reinterpret_cast<signed char>(esi3) <= reinterpret_cast<signed char>(90)) {
            eax8 = esi3;
            __asm__("fld dword [eax*4+0x1803859c]");
            return *reinterpret_cast<int16_t*>(&eax8);
        } else {
            eax9 = 0xb4 - reinterpret_cast<unsigned char>(esi3);
            __asm__("fld dword [eax*4+0x1803859c]");
            return *reinterpret_cast<int16_t*>(&eax9);
        }
    } else {
        esi10 = reinterpret_cast<uint32_t>(esi3 - 0xb4);
        if (reinterpret_cast<int32_t>(esi10) <= reinterpret_cast<int32_t>(90)) {
            eax11 = esi10;
            __asm__("fld dword [eax*4+0x1803859c]");
            __asm__("fchs ");
            return *reinterpret_cast<int16_t*>(&eax11);
        } else {
            eax12 = 0xb4 - esi10;
            __asm__("fld dword [eax*4+0x1803859c]");
            __asm__("fchs ");
            return *reinterpret_cast<int16_t*>(&eax12);
        }
    }
}

int16_t fun_18010e00(void** a1) {
    int32_t eax2;

    if (reinterpret_cast<signed char>(a1) < reinterpret_cast<signed char>(1) || reinterpret_cast<signed char>(a1) > reinterpret_cast<signed char>(6)) {
        return 0;
    } else {
        eax2 = *reinterpret_cast<int32_t*>(reinterpret_cast<unsigned char>(a1) * 4 + 0x18038c74);
        return *reinterpret_cast<int16_t*>(&eax2);
    }
}

void fun_1800fbe0(void** ecx, void** a2, void** a3) {
    int32_t* esp4;
    void** edx5;
    int32_t esi6;
    void** eax7;
    void** ecx8;
    void** eax9;
    void** ecx10;
    void** eax11;

    esp4 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    if (!*reinterpret_cast<void***>(ecx + 0x5c0)) {
        edx5 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5bc)));
        eax7 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx5 + 28)(esi6, __return_address()));
        esp4 = esp4 - 1 + 1;
        *reinterpret_cast<void***>(ecx + 0x5c0) = eax7;
    }
    ecx8 = *reinterpret_cast<void***>(ecx + 0x5c0);
    eax9 = *reinterpret_cast<void***>(ecx8);
    *reinterpret_cast<void***>(eax9 + 4)(1, esp4 + 2, 4, esi6, __return_address());
    ecx10 = *reinterpret_cast<void***>(ecx + 0x5c0);
    eax11 = *reinterpret_cast<void***>(ecx10);
    *reinterpret_cast<void***>(eax11 + 4)();
    goto esp4 - 1 - 1 - 1 - 1 + 1 + 3;
}

struct s95 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

void fun_1800fe50(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void*** eax7;
    struct s95* eax8;
    void** eax9;

    if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 0x5e4)) < reinterpret_cast<signed char>(4)) {
        eax7 = reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5e4) + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 0x5e4)) * 2);
        *reinterpret_cast<void***>(ecx + 0x5e4) = *reinterpret_cast<void***>(ecx + 0x5e4) + 1;
        eax8 = reinterpret_cast<struct s95*>(reinterpret_cast<uint32_t>(ecx + reinterpret_cast<uint32_t>(eax7) * 4) + 0x6c8);
        __asm__("fld dword [esp+0x18]");
        eax8->f0 = a2;
        eax8->f4 = a3;
        eax8->f8 = a4;
        __asm__("fmul dword [eax]");
        __asm__("fstp dword [esp+0xc]");
        __asm__("fld dword [esp+0x24]");
        __asm__("fmul dword [eax+0x4]");
        eax9 = *reinterpret_cast<void***>(a4);
        __asm__("fstp dword [esp+0x10]");
        *reinterpret_cast<void***>(eax9 + 4)(3, reinterpret_cast<int32_t>(__zero_stack_offset()) - 8, 8);
    }
    return;
}

void fun_1800fc80(void** ecx, void** a2, void** a3) {
    int32_t* esp4;
    void** edx5;
    int32_t esi6;
    void** eax7;
    void** ecx8;
    void** eax9;
    void** ecx10;
    void** eax11;

    esp4 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    if (!*reinterpret_cast<void***>(ecx + 0x5c0)) {
        edx5 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5bc) + 4));
        eax7 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx5 + 28)(esi6, __return_address()));
        esp4 = esp4 - 1 + 1;
        *reinterpret_cast<void***>(ecx + 0x5c8) = eax7;
    }
    ecx8 = *reinterpret_cast<void***>(ecx + 0x5c8);
    eax9 = *reinterpret_cast<void***>(ecx8);
    *reinterpret_cast<void***>(eax9 + 4)(1, esp4 + 2, 4, esi6, __return_address());
    ecx10 = *reinterpret_cast<void***>(ecx + 0x5c8);
    eax11 = *reinterpret_cast<void***>(ecx10);
    *reinterpret_cast<void***>(eax11 + 4)();
    goto esp4 - 1 - 1 - 1 - 1 + 1 + 3;
}

struct s96 {
    void** f0;
    signed char[3] pad4;
    signed char f4;
};

struct s97 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    int32_t f8;
};

struct s98 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    int32_t f8;
};

void fun_1800fd10(void** ecx) {
    void** esi2;
    void** edi3;
    void** edx4;
    struct s96* ebx5;
    void** ecx6;
    void** eax7;
    void** v8;
    void* eax9;
    struct s97* edx10;
    struct s98* ecx11;

    esi2 = ecx;
    edi3 = reinterpret_cast<void**>(0);
    edx4 = *reinterpret_cast<void***>(esi2 + 0x5dc);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(edx4) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(edx4 == 0))) {
        ebx5 = reinterpret_cast<struct s96*>(esi2 + 0x5ec);
        do {
            ecx6 = ebx5->f0;
            __asm__("fld dword [ecx+0x4]");
            __asm__("fcomp dword [0x1803422c]");
            __asm__("fnstsw ax");
            if (!(*reinterpret_cast<unsigned char*>(&eax7 + 1) & 64) || *reinterpret_cast<void***>(ecx6)) {
                if (!ebx5->f4) {
                    v8 = *reinterpret_cast<void***>(esi2 + 16);
                    fun_18018ba0(ecx6, 0, v8);
                }
                ++edi3;
                ebx5 = reinterpret_cast<struct s96*>(reinterpret_cast<uint32_t>(ebx5) + 12);
            } else {
                eax7 = edx4 + 0xffffffff;
                *reinterpret_cast<void***>(esi2 + 0x5dc) = eax7;
                if (reinterpret_cast<signed char>(edi3) < reinterpret_cast<signed char>(eax7)) {
                    eax9 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(eax7 + reinterpret_cast<unsigned char>(eax7) * 2) + 0x17a);
                    edx10 = reinterpret_cast<struct s97*>(reinterpret_cast<uint32_t>(ebx5) - 4);
                    ecx11 = reinterpret_cast<struct s98*>(esi2 + reinterpret_cast<uint32_t>(eax9) * 4);
                    edx10->f0 = *reinterpret_cast<void***>(esi2 + reinterpret_cast<uint32_t>(eax9) * 4);
                    eax7 = ecx11->f4;
                    edx10->f4 = eax7;
                    edx10->f8 = ecx11->f8;
                }
            }
            edx4 = *reinterpret_cast<void***>(esi2 + 0x5dc);
        } while (reinterpret_cast<signed char>(edi3) < reinterpret_cast<signed char>(edx4));
    }
    return;
}

void fun_18018d50(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void* eax7;
    void** eax8;

    eax7 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a2) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 20)));
    *reinterpret_cast<void***>(ecx + 24) = a2;
    if (eax7) {
        if (a3) {
            __asm__("cdq ");
            __asm__("cdq ");
            eax8 = reinterpret_cast<void**>(reinterpret_cast<signed char>(a3) / reinterpret_cast<int32_t>((reinterpret_cast<uint32_t>(eax7) ^ reinterpret_cast<unsigned char>(a2)) - reinterpret_cast<unsigned char>(a2)));
            *reinterpret_cast<void***>(ecx + 28) = eax8;
            if (!eax8) {
                *reinterpret_cast<void***>(ecx + 28) = reinterpret_cast<void**>(1);
            }
            *reinterpret_cast<void***>(ecx + 32) = *reinterpret_cast<void***>(ecx + 28);
        } else {
            *reinterpret_cast<void***>(ecx + 20) = a2;
            return;
        }
    }
    return;
}

void** fun_18014ad0(void** ecx) {
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034978);
    *reinterpret_cast<void***>(ecx + 4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 16) = reinterpret_cast<void**>(0);
    fun_18019180(ecx + 20);
    fun_18019180(ecx + 60);
    fun_18018d20(ecx + 100);
    fun_18018d20(ecx + 0x8c);
    fun_18018d20(ecx + 0xb4);
    *reinterpret_cast<void***>(ecx + 0xdc) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0xe0) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0xe4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180349d4);
    return ecx;
}

struct s99 {
    int32_t f0;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
    signed char[23] pad36;
    void** f36;
    signed char[15] pad52;
    void** f52;
    signed char[23] pad76;
    void** f76;
    signed char[15] pad92;
    void** f92;
    signed char[3] pad96;
    void** f96;
};

struct s99* fun_180148a0(struct s99* ecx) {
    ecx->f0 = 0x180348d4;
    ecx->f4 = reinterpret_cast<void**>(0);
    ecx->f8 = reinterpret_cast<void**>(0);
    fun_18019180(&ecx->f12);
    fun_18019180(&ecx->f52);
    ecx->f92 = reinterpret_cast<void**>(0);
    ecx->f96 = reinterpret_cast<void**>(0);
    ecx->f0 = 0x180349b8;
    return ecx;
}

struct s100 {
    int32_t f0;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[23] pad32;
    int32_t f32;
    signed char[12] pad48;
    void** f48;
    signed char[23] pad72;
    int32_t f72;
    signed char[12] pad88;
    void** f88;
};

void** fun_18016d30(void** ecx, void** a2, void** a3, void** a4);

struct s100* fun_18014660(struct s100* ecx, void** a2) {
    void** esi3;

    ecx->f0 = 0x180348d4;
    ecx->f4 = reinterpret_cast<void**>(0);
    fun_18019180(&ecx->f8);
    fun_18019180(&ecx->f48);
    fun_18016d30(&ecx->f88, esi3, __return_address(), a2);
    ecx->f0 = 0x1803499c;
    return ecx;
}

struct s102 {
    signed char[32] pad32;
    int32_t f32;
};

struct s101 {
    struct s102* f0;
    int32_t f4;
    void** f8;
    signed char[63] pad72;
    int32_t f72;
};

struct s101* fun_18014480(struct s101* ecx) {
    ecx->f0 = reinterpret_cast<struct s102*>(0x18034978);
    ecx->f4 = 0;
    fun_18019180(&ecx->f8);
    ecx->f72 = 0;
    ecx->f0 = reinterpret_cast<struct s102*>(0x18034954);
    return ecx;
}

void fun_18016db0(void** ecx);

int16_t fun_180146c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42) {
    void** ecx43;
    void** eax44;
    void** esi45;
    int16_t ax46;

    ecx43 = *reinterpret_cast<void***>(ecx + 4);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x1803499c);
    if (ecx43) {
        eax44 = *reinterpret_cast<void***>(ecx43);
        *reinterpret_cast<void***>(eax44)(1);
    }
    fun_18016db0(ecx + 88);
    fun_18019210(ecx + 48, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    ax46 = fun_18019210(ecx + 8, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    return ax46;
}

int16_t fun_18014900(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42) {
    void** ecx43;
    void** eax44;
    void** edx45;
    void** esi46;
    int16_t ax47;

    ecx43 = *reinterpret_cast<void***>(ecx + 4);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180349b8);
    if (ecx43) {
        eax44 = *reinterpret_cast<void***>(ecx43);
        *reinterpret_cast<void***>(eax44)(1);
    }
    if (*reinterpret_cast<void***>(ecx + 8)) {
        edx45 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 8));
        *reinterpret_cast<void***>(edx45)(1);
    }
    fun_18019210(ecx + 52, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    ax47 = fun_18019210(ecx + 12, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    return ax47;
}

int16_t fun_18014b60(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42) {
    void** ecx43;
    void** eax44;
    void** edx45;
    void** eax46;
    void** edx47;
    void** eax48;
    void** esi49;
    int16_t ax50;

    ecx43 = *reinterpret_cast<void***>(ecx + 4);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180349d4);
    if (ecx43) {
        eax44 = *reinterpret_cast<void***>(ecx43);
        *reinterpret_cast<void***>(eax44)(1);
    }
    if (*reinterpret_cast<void***>(ecx + 16)) {
        edx45 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 16));
        *reinterpret_cast<void***>(edx45)(1);
    }
    if (*reinterpret_cast<void***>(ecx + 0xdc)) {
        eax46 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0xdc));
        *reinterpret_cast<void***>(eax46)(1);
    }
    if (*reinterpret_cast<void***>(ecx + 0xe0)) {
        edx47 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0xe0));
        *reinterpret_cast<void***>(edx47)(1);
    }
    if (*reinterpret_cast<void***>(ecx + 0xe4)) {
        eax48 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0xe4));
        *reinterpret_cast<void***>(eax48)(1);
    }
    fun_18019210(ecx + 60, esi49, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    ax50 = fun_18019210(ecx + 20, esi49, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    return ax50;
}

int16_t fun_18014bd0(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6);

int16_t fun_18014c80(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85, void** a86, void** a87, void** a88, void** a89, void** a90, void** a91, void** a92) {
    void** eax93;
    void** ebx94;
    void** eax95;
    void** eax96;
    void** edx97;
    void** ebp98;
    void** eax99;
    void** eax100;
    void** ecx101;
    void** edx102;
    void** v103;
    void** eax104;
    void** edx105;
    void** eax106;
    void** ecx107;
    void** edx108;
    void** ebp109;
    void** v110;
    void** eax111;
    void** edx112;
    void** eax113;
    void** ecx114;
    void** edx115;
    void** ebx116;
    void** v117;
    void** eax118;
    void** ebp119;
    void** edi120;
    void** esi121;
    void** ebx122;

    eax93 = ecx + 12;
    ebx94 = ecx + 8;
    *reinterpret_cast<int16_t*>(&eax93) = fun_18014bd0(a2, a3, a5, ebx94, eax93, ecx + 4);
    if (!eax93) {
        eax95 = *reinterpret_cast<void***>(a2);
        eax96 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax95 + 76)(a2));
        *reinterpret_cast<void***>(ecx + 16) = eax96;
        edx97 = *reinterpret_cast<void***>(eax96);
        *reinterpret_cast<void***>(edx97 + 32)(eax96);
        if (*reinterpret_cast<void***>(ecx + 16)) {
            ebp98 = ecx + 100;
            fun_18018ba0(ebp98, 0x3f800000, 0);
            fun_18018ba0(ecx + 0x8c, 0x3f800000, 0);
            fun_18018ba0(ecx + 0xb4, 0x3f800000, 0);
            eax99 = *reinterpret_cast<void***>(a2);
            eax100 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax99 + 4)(a2));
            ecx101 = *reinterpret_cast<void***>(ebx94);
            *reinterpret_cast<void***>(ecx + 0xdc) = eax100;
            edx102 = *reinterpret_cast<void***>(eax100);
            *reinterpret_cast<void***>(edx102 + 4)(eax100, ecx101);
            v103 = *reinterpret_cast<void***>(ecx + 0xdc);
            fun_18018d40(ebp98, v103, ecx101, 0x78, a3);
            eax104 = *reinterpret_cast<void***>(ebx94);
            fun_18018d50(ebp98, eax104, 0, ecx101, 0x78, a3);
            edx105 = *reinterpret_cast<void***>(a2);
            eax106 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx105 + 4)(a2, ecx101));
            ecx107 = *reinterpret_cast<void***>(ebx94);
            *reinterpret_cast<void***>(ecx + 0xe0) = eax106;
            edx108 = *reinterpret_cast<void***>(eax106);
            *reinterpret_cast<void***>(edx108 + 4)(eax106, ecx107, ecx101);
            ebp109 = ecx + 0x8c;
            v110 = *reinterpret_cast<void***>(ecx + 0xe0);
            fun_18018d40(ebp109, v110, ecx107, ecx101, 0x78);
            eax111 = *reinterpret_cast<void***>(ebx94);
            fun_18018d50(ebp109, eax111, 0, ecx107, ecx101, 0x78);
            edx112 = *reinterpret_cast<void***>(a2);
            eax113 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx112 + 4)(a2, ecx107, ecx101));
            ecx114 = *reinterpret_cast<void***>(ecx + 12);
            *reinterpret_cast<void***>(ecx + 0xe4) = eax113;
            edx115 = *reinterpret_cast<void***>(eax113);
            *reinterpret_cast<void***>(edx115 + 4)(eax113, ecx114, ecx107, ecx101);
            ebx116 = ecx + 0xb4;
            v117 = *reinterpret_cast<void***>(ecx + 0xe4);
            fun_18018d40(ebx116, v117, ecx114, ecx107, ecx101);
            eax118 = *reinterpret_cast<void***>(ecx + 12);
            fun_18018d50(ebx116, eax118, 0, ecx114, ecx107, ecx101);
            fun_180190d0(a2, ecx + 20, ebp119, ecx114, ecx107, ecx101, 0x78, a3, edi120, esi121, ebp119, ebx122, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92);
            fun_180190d0(a2, ecx + 60, ebp119, ecx114, ecx107, ecx101, 0x78, a3, edi120, esi121, ebp119, ebx122, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92);
            eax93 = reinterpret_cast<void**>(0);
        } else {
            goto ebp119;
        }
    }
    return *reinterpret_cast<int16_t*>(&eax93);
}

int16_t fun_1801a010(void** ecx, void*** a2, uint32_t a3, void** a4, uint32_t a5);

int16_t fun_18014500(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85, void** a86, void** a87, void** a88, void** a89, void** a90, void** a91, void** a92, void** a93, void** a94, void** a95, void** a96, void** a97, void** a98, void** a99) {
    void** v100;
    void*** v101;
    void** eax102;
    void** esi103;
    void** edi104;
    void** esi105;
    uint32_t eax106;
    uint32_t eax107;
    uint32_t eax108;

    if (!*reinterpret_cast<signed char*>(&a5)) {
        v100 = a3;
        v101 = reinterpret_cast<void***>(0x18042600);
    } else {
        eax102 = a3;
        v100 = eax102;
        v101 = reinterpret_cast<void***>(0x18042590);
    }
    *reinterpret_cast<int16_t*>(&eax102) = fun_1801a010(a2, v101, 4, v100, 0);
    *reinterpret_cast<void***>(ecx + 4) = eax102;
    if (eax102) {
        esi103 = ecx + 8;
        fun_180190d0(a2, esi103, a4, edi104, esi105, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97, a98, a99);
        eax106 = reinterpret_cast<uint32_t>(-reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi103)));
        eax107 = eax106 - (eax106 + reinterpret_cast<uint1_t>(eax106 < eax106 + reinterpret_cast<uint1_t>(!!*reinterpret_cast<void***>(esi103))));
        *reinterpret_cast<unsigned char*>(&eax107) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax107) & 0xfc);
        eax108 = eax107 + 4;
        return *reinterpret_cast<int16_t*>(&eax108);
    } else {
        return 4;
    }
}

int16_t fun_18014940(struct s99* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85, void** a86, void** a87, void** a88, void** a89, void** a90, void** a91, void** a92, void** a93, void** a94, void** a95) {
    void** eax96;
    void** eax97;
    void** edx98;
    void** eax99;
    void** ecx100;
    void** ebx101;
    void** ebp102;
    void** edi103;
    void** esi104;
    void** ebx105;
    void** esi106;

    eax96 = *reinterpret_cast<void***>(a2);
    eax97 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax96 + 84)(a2));
    ecx->f4 = eax97;
    edx98 = *reinterpret_cast<void***>(a2);
    eax99 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx98 + 64)(a2));
    ecx100 = ecx->f4;
    ecx->f8 = eax99;
    if (!ecx100 || (!eax99 || ((ebx101 = reinterpret_cast<void**>(&ecx->f12), fun_180190d0(a2, ebx101, a2, ebp102, a3, a3, edi103, esi104, ebx105, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95), esi106 = reinterpret_cast<void**>(&ecx->f52), fun_180190d0(a2, esi106, a2, ebp102, a3, a3, edi103, esi104, ebx105, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95), *reinterpret_cast<void***>(ebx101) == 0) || !*reinterpret_cast<void***>(esi106)))) {
        goto esi104;
    } else {
        goto esi104;
    }
}

void fun_18016de0(void** ecx, void** a2, void** a3);

int16_t fun_18014700(struct s100* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85, void** a86, void** a87, void** a88, void** a89, void** a90, void** a91, void** a92, void** a93, void** a94, void** a95, void** a96, void** a97) {
    void** eax98;
    void** edi99;
    void** esi100;
    void** ebp101;
    void** v102;
    void** ebx103;
    void** ebx104;

    eax98 = a3;
    *reinterpret_cast<int16_t*>(&eax98) = fun_18014440(a2, eax98, a4, 0, edi99, esi100, ebp101, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97, v102);
    ecx->f4 = eax98;
    if (!eax98 || ((ebx103 = reinterpret_cast<void**>(&ecx->f8), fun_180190d0(a2, ebx103, a4, ebx104, edi99, esi100, ebp101, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97), fun_180190d0(a2, &ecx->f48, a4, ebx104, edi99, esi100, ebp101, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97), *reinterpret_cast<void***>(ebx103) == 0) || !*reinterpret_cast<void***>(&ecx->f48))) {
        return 4;
    } else {
        fun_18016de0(&ecx->f88, a2, a3);
        return 0;
    }
}

int16_t fun_18015af0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85, void** a86, void** a87, void** a88, void** a89, void** a90, void** a91, void** a92, void** a93, void** a94, void** a95, void** a96, void** a97);

int16_t fun_18016390(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85, void** a86, void** a87, void** a88, void** a89, void** a90, void** a91, void** a92, void** a93, void** a94, void** a95, void** a96, void** a97);

int16_t fun_18016770(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85, void** a86, void** a87, void** a88, void** a89, void** a90) {
    void** esi91;
    void** eax92;
    int16_t ax93;
    void** eax94;
    int16_t ax95;

    if (!(reinterpret_cast<unsigned char>(a6) & 0x20000000)) {
        eax92 = fun_1802b2bb(ecx, 0x11c, esi91, __return_address(), a2, a3, a4, a5, a6);
        if (eax92) {
            ax93 = fun_18015af0(eax92, a2, a3, a4, a5, a6, esi91, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90);
            return ax93;
        }
    } else {
        eax94 = fun_1802b2bb(ecx, 0xa4, esi91, __return_address(), a2, a3, a4, a5, a6);
        if (eax94) {
            ax95 = fun_18016390(eax94, a2, a3, a4, a5, a6, esi91, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90);
            return ax95;
        }
    }
    return 0;
}

int16_t fun_18015200(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85, void** a86, void** a87, void** a88, void** a89, void** a90, void** a91);

int16_t fun_180155f0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85) {
    void** eax86;
    int16_t ax87;

    eax86 = fun_1802b2bb(ecx, 0x70, __return_address(), a2, a3, a4, a5, a6, a7);
    if (!eax86) {
        return 0;
    } else {
        ax87 = fun_18015200(eax86, a2, a3, a4, a5, a6, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85);
        return ax87;
    }
}

signed char fun_1800dc50(int32_t ecx, int32_t a2, void** a3, void** a4, void* a5, void* a6, int32_t a7);

void fun_1801a0d0(void** ecx, int32_t a2, int32_t a3, void** a4, void** a5, void** a6, void** a7) {
    int32_t v8;
    int32_t esi9;
    void** edx10;

    __asm__("fld dword [ebp+0xc]");
    __asm__("fmul dword [ebp+0xc]");
    __asm__("fstp dword [ebp-0x4]");
    __asm__("fild dword [ebp+0x8]");
    __asm__("fmul qword [0x180346d8]");
    __asm__("fidiv dword [esi+0x4]");
    __asm__("fstp qword [ebp-0xc]");
    __asm__("fld qword [ebp-0xc]");
    __asm__("fcos ");
    __asm__("fstp qword [ebp-0x14]");
    __asm__("fld qword [ebp-0x14]");
    __asm__("fld dword [ebp-0x4]");
    __asm__("fsub dword [0x18034238]");
    __asm__("fsub st0, st1");
    __asm__("fstp dword [esp]");
    __asm__("fld dword [ebp-0x4]");
    __asm__("fadd st0, st0");
    __asm__("fsub dword [0x18034238]");
    __asm__("fmul st0, st1");
    __asm__("fsub dword [0x18034238]");
    __asm__("fstp dword [esp]");
    __asm__("fstp st0");
    fun_1800dc50(v8, v8, ecx, ecx, 0, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, esi9);
    __asm__("fld dword [ebp+0xc]");
    __asm__("fadd dword [0x18034238]");
    edx10 = *reinterpret_cast<void***>(ecx);
    __asm__("fmul dword [0x18034774]");
    __asm__("fstp dword [esp]");
    *reinterpret_cast<void***>(edx10 + 32)(ecx);
    return;
}

void fun_1801a170(void** ecx, int32_t a2, int32_t a3, void** a4, void** a5, void** a6) {
    int32_t v7;
    int32_t esi8;
    void** edx9;

    __asm__("fld dword [ebp+0xc]");
    __asm__("fmul dword [ebp+0xc]");
    __asm__("fstp dword [ebp-0x4]");
    __asm__("fild dword [ebp+0x8]");
    __asm__("fmul qword [0x180346d8]");
    __asm__("fidiv dword [esi+0x4]");
    __asm__("fstp qword [ebp-0xc]");
    __asm__("fld qword [ebp-0xc]");
    __asm__("fcos ");
    __asm__("fstp qword [ebp-0x14]");
    __asm__("fld qword [ebp-0x14]");
    __asm__("fld dword [ebp-0x4]");
    __asm__("fsub dword [0x18034238]");
    __asm__("fadd st0, st1");
    __asm__("fstp dword [esp]");
    __asm__("fld dword [ebp-0x4]");
    __asm__("fadd st0, st0");
    __asm__("fsub dword [0x18034238]");
    __asm__("fmul st0, st1");
    __asm__("fadd dword [0x18034238]");
    __asm__("fstp dword [esp]");
    __asm__("fstp st0");
    fun_1800dc50(v7, v7, ecx, ecx, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 0, esi8);
    __asm__("fld dword [0x18034238]");
    __asm__("fsub dword [ebp+0xc]");
    edx9 = *reinterpret_cast<void***>(ecx);
    __asm__("fmul dword [0x18034774]");
    __asm__("fstp dword [esp]");
    *reinterpret_cast<void***>(edx9 + 32)(ecx);
    return;
}

struct s104 {
    struct s104* f0;
    signed char[4] pad8;
    void** f8;
};

struct s103 {
    signed char[8] pad8;
    void** f8;
    signed char[7] pad16;
    void** f16;
    signed char[7] pad24;
    struct s104* f24;
    signed char[784] pad812;
    void** f812;
    signed char[3] pad816;
    void** f816;
    signed char[39] pad856;
    void** f856;
    signed char[39] pad896;
    void** f896;
    signed char[39] pad936;
    void** f936;
    signed char[39] pad976;
    void** f976;
    signed char[39] pad1016;
    void** f1016;
    signed char[39] pad1056;
    void** f1056;
    signed char[39] pad1096;
    void** f1096;
    signed char[39] pad1136;
    void** f1136;
    signed char[39] pad1176;
    void** f1176;
    signed char[35] pad1212;
    void** f1212;
    signed char[39] pad1252;
    void** f1252;
    signed char[3] pad1256;
    void** f1256;
    signed char[3] pad1260;
    int32_t f1260;
    signed char[124] pad1388;
    void** f1388;
    signed char[31] pad1420;
    void** f1420;
    signed char[3] pad1424;
    void** f1424;
};

void fun_180116d0(struct s103* ecx, void** a2) {
    *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(ecx) + reinterpret_cast<unsigned char>(ecx->f1176) * 4 + 0x49c) = a2;
    ecx->f1176 = ecx->f1176 + 1;
    return;
}

struct s105 {
    int32_t f0;
    int32_t f4;
    signed char f8;
    signed char f9;
    signed char[2] pad12;
    void** f12;
};

void fun_18011700(struct s103* ecx, int32_t a2, int32_t a3, void** a4, signed char a5, signed char a6) {
    struct s105* eax7;

    eax7 = reinterpret_cast<struct s105*>((reinterpret_cast<unsigned char>(ecx->f1252) << 4) + reinterpret_cast<uint32_t>(ecx) + 0x4ec);
    eax7->f0 = a2;
    eax7->f4 = a3;
    eax7->f12 = a4;
    eax7->f8 = a5;
    eax7->f9 = a6;
    ecx->f1252 = ecx->f1252 + 1;
    return;
}

struct s106 {
    signed char[100] pad100;
    void** f100;
    signed char[39] pad140;
    void** f140;
    signed char[39] pad180;
    void** f180;
};

int16_t fun_18014e10(struct s106* ecx, signed char a2, int32_t a3, int32_t a4) {
    uint32_t eax5;

    eax5 = reinterpret_cast<uint32_t>(ecx) + 20;
    if (!a2) {
        eax5 = reinterpret_cast<uint32_t>(ecx) + 60;
    }
    return *reinterpret_cast<int16_t*>(&eax5);
}

struct s107 {
    signed char[4] pad4;
    int32_t f4;
};

struct s108 {
    signed char[4] pad4;
    int32_t f4;
};

unsigned char fun_18011ca0(struct s107* a1, struct s108* a2) {
    return static_cast<unsigned char>(reinterpret_cast<uint1_t>(a1->f4 < a2->f4));
}

void fun_18014dd0(struct s106* ecx, void** a2, void** a3) {
    fun_1801d290(&ecx->f100, a2);
    fun_1801d290(&ecx->f140, a2);
    fun_1801d290(&ecx->f180, a3);
    return;
}

struct s109 {
    signed char[8] pad8;
    void** f8;
    signed char[39] pad48;
    int32_t f48;
    signed char[20] pad72;
    void** f72;
    signed char[15] pad88;
    void** f88;
};

void** fun_180145c0(struct s109* ecx) {
    return &ecx->f8;
}

struct s110 {
    signed char[12] pad12;
    void** f12;
    signed char[79] pad92;
    int32_t f92;
    void** f96;
};

void fun_180149e0(struct s110* ecx, int32_t a2, void** a3) {
    ecx->f92 = a2;
    ecx->f96 = a3;
    return;
}

void fun_18016e50(void** ecx, void** a2, void** a3, void** a4);

void fun_180147a0(struct s109* ecx, void** a2, void** a3) {
    fun_18016e50(&ecx->f88, a2, a3, __return_address());
    return;
}

void fun_18014570(struct s109* ecx, int32_t* a2, void** a3) {
    void** eax4;
    int32_t* edx5;
    int32_t* esi6;

    if (reinterpret_cast<signed char>(a3) > reinterpret_cast<signed char>(6)) {
    }
    eax4 = reinterpret_cast<void**>(0);
    ecx->f72 = a3;
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(a3) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(a3 == 0))) {
        edx5 = a2;
        esi6 = &ecx->f48;
        do {
            ++eax4;
            *esi6 = *edx5;
            ++edx5;
            ++esi6;
        } while (reinterpret_cast<signed char>(eax4) < reinterpret_cast<signed char>(ecx->f72));
    }
    return;
}

void** fun_18014a00(struct s110* ecx) {
    return &ecx->f12;
}

struct s111 {
    int32_t f0;
    signed char[8] pad12;
    void** f12;
};

struct s112 {
    void** f0;
    signed char[3] pad4;
    void** f4;
};

struct s113 {
    int32_t f0;
    int32_t f4;
    signed char f8;
};

struct s114 {
    int32_t f0;
    int32_t f4;
    signed char f8;
};

void fun_1800f940(void** ecx, void** a2, void** a3, struct s111* a4, void** a5, void*** a6, void** a7, struct s112* a8, void** a9, void** a10) {
    void** esi11;
    void** ebx12;
    void*** v13;
    void** edi14;
    void*** ebp15;
    void** v16;
    void** eax17;
    void** eax18;
    void** edi19;
    void** ebx20;
    void** eax21;
    struct s113* ecx22;
    struct s114* eax23;
    void** eax24;
    void** edx25;
    void** v26;
    void** v27;
    void** ebp28;
    void** edi29;
    int32_t ebx30;
    void** eax31;
    uint32_t ecx32;
    uint32_t eax33;
    void** edx34;
    void** eax35;
    struct s111* edi36;
    struct s111* ecx37;
    void** edi38;

    esi11 = ecx;
    ebx12 = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi11 + 0x8c) = a5;
    *reinterpret_cast<void***>(esi11 + 0x90) = a3;
    *reinterpret_cast<void***>(esi11 + 0x5b4) = a2;
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(a5) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(a5 == 0))) {
        v13 = a6;
        edi14 = esi11 + 0xa8;
        ebp15 = &a4->f12;
        do {
            *reinterpret_cast<void***>(edi14 + 0xfffffff4) = *(ebp15 - 12);
            *reinterpret_cast<int32_t*>(edi14 + 0xfffffff0) = *reinterpret_cast<int32_t*>(ebp15 - 8);
            v16 = *ebp15;
            fun_1801d290(edi14, v16);
            *reinterpret_cast<void***>(edi14 + 0xfffffff8) = reinterpret_cast<void**>(0);
            if (!*reinterpret_cast<signed char*>(ebp15 - 4)) {
                *reinterpret_cast<signed char*>(edi14 + 0xfffffff9) = 0;
            } else {
                *reinterpret_cast<signed char*>(edi14 + 0xfffffff9) = 1;
                eax17 = *v13;
                v13 = v13 + 4;
                fun_1801d290(edi14 + 40, eax17);
            }
            ++ebx12;
            ebp15 = ebp15 + 16;
            edi14 = edi14 + 96;
        } while (reinterpret_cast<signed char>(ebx12) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi11 + 0x8c)));
    }
    eax18 = *reinterpret_cast<void***>(esi11 + 0x8c);
    edi19 = reinterpret_cast<void**>(0);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax18) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax18 == 0))) {
        do {
            if (*reinterpret_cast<signed char*>((reinterpret_cast<unsigned char>(edi19) << 4) + reinterpret_cast<uint32_t>(a4) + 9)) {
                ebx20 = eax18 + 0xffffffff;
                if (edi19) {
                    ebx20 = edi19 + 0xffffffff;
                }
                if (edi19 != eax18 - 1) {
                    eax21 = edi19 + 1;
                } else {
                    eax21 = reinterpret_cast<void**>(0);
                }
                ecx22 = reinterpret_cast<struct s113*>((reinterpret_cast<unsigned char>(ebx20) << 4) + reinterpret_cast<uint32_t>(a4));
                eax23 = reinterpret_cast<struct s114*>((reinterpret_cast<unsigned char>(eax21) << 4) + reinterpret_cast<uint32_t>(a4));
                if (ecx22->f4 >= 0 && (ecx22->f4 <= 90 && ecx22->f8)) {
                    *reinterpret_cast<signed char*>((reinterpret_cast<uint32_t>(ebx20 + reinterpret_cast<unsigned char>(ebx20) * 2) << 5) + reinterpret_cast<unsigned char>(esi11) + 0xa0) = 1;
                }
                if (eax23->f4 >= 90 && (eax23->f4 <= 0xb4 && !eax23->f8)) {
                    *reinterpret_cast<signed char*>((reinterpret_cast<uint32_t>(edi19 + reinterpret_cast<unsigned char>(edi19) * 2) << 5) + reinterpret_cast<unsigned char>(esi11) + 0xa0) = 1;
                }
                if (eax23->f4 >= 0x10e && (eax23->f4 <= 0x168 && eax23->f8)) {
                    *reinterpret_cast<signed char*>((reinterpret_cast<uint32_t>(edi19 + reinterpret_cast<unsigned char>(edi19) * 2) << 5) + reinterpret_cast<unsigned char>(esi11) + 0xa0) = 1;
                }
                if (ecx22->f4 >= 0xb4 && (ecx22->f4 <= 0x10e && !ecx22->f8)) {
                    *reinterpret_cast<signed char*>((reinterpret_cast<uint32_t>(ebx20 + reinterpret_cast<unsigned char>(ebx20) * 2) << 5) + reinterpret_cast<unsigned char>(esi11) + 0xa0) = 1;
                }
            }
            eax18 = *reinterpret_cast<void***>(esi11 + 0x8c);
            ++edi19;
        } while (reinterpret_cast<signed char>(edi19) < reinterpret_cast<signed char>(eax18));
    }
    eax24 = *reinterpret_cast<void***>(esi11 + 0x8c);
    if (reinterpret_cast<signed char>(eax24) > reinterpret_cast<signed char>(1) && (edx25 = reinterpret_cast<void**>(0), !(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax24) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax24 == 0)))) {
        do {
            if (edx25 != eax24 - 1) {
            }
            ++edx25;
            __asm__("fild dword [esp+0x20]");
            __asm__("fdivr dword [0x18034238]");
            __asm__("fstp dword [edi-0x60]");
            eax24 = *reinterpret_cast<void***>(esi11 + 0x8c);
        } while (reinterpret_cast<signed char>(edx25) < reinterpret_cast<signed char>(eax24));
    }
    v26 = a8->f0;
    fun_1801d290(esi11 + 0x3f8, v26);
    v27 = a8->f4;
    fun_1801d290(esi11 + 0x420, v27);
    ebp28 = a9;
    edi29 = esi11 + 0x448;
    ebx30 = 7;
    do {
        fun_1801d290(edi29, ebp28);
        edi29 = edi29 + 40;
        --ebx30;
    } while (ebx30);
    eax31 = *reinterpret_cast<void***>(esi11 + 0x5b4);
    if (!(*reinterpret_cast<unsigned char*>(&eax31) & 4)) 
        goto addr_0x1800fbc4_34;
    ecx32 = reinterpret_cast<unsigned char>(eax31) & 3;
    if (*reinterpret_cast<signed char*>(&ecx32) != 3 || (eax33 = reinterpret_cast<unsigned char>(eax31) & 48, *reinterpret_cast<signed char*>(&eax33) != 48)) {
        edx34 = *reinterpret_cast<void***>(esi11 + 0x8c);
        eax35 = reinterpret_cast<void**>(0);
        if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(edx34) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(edx34 == 0)) {
            addr_0x1800fbc4_34:
            *reinterpret_cast<signed char*>(esi11 + 0x5b0) = 1;
            *reinterpret_cast<void***>(esi11 + 0x7c) = reinterpret_cast<void**>(1);
            return;
        } else {
            edi36 = a4;
            ecx37 = edi36;
            do {
                if (ecx37->f0 == 4) 
                    break;
                ++eax35;
                ecx37 = reinterpret_cast<struct s111*>(reinterpret_cast<uint32_t>(ecx37) + 16);
            } while (reinterpret_cast<signed char>(eax35) < reinterpret_cast<signed char>(edx34));
            goto addr_0x1800fb93_40;
        }
    } else {
        edi38 = a10;
        goto addr_0x1800fbac_42;
    }
    edi38 = *reinterpret_cast<void***>((reinterpret_cast<unsigned char>(eax35) << 4) + reinterpret_cast<uint32_t>(edi36) + 12);
    addr_0x1800fbac_42:
    fun_1801d290(esi11 + 0x560, edi38);
    fun_1801d290(esi11 + 0x588, edi38);
    goto addr_0x1800fbc4_34;
    addr_0x1800fb93_40:
    *reinterpret_cast<signed char*>(esi11 + 0x5b0) = 1;
    *reinterpret_cast<void***>(esi11 + 0x7c) = reinterpret_cast<void**>(1);
    return;
}

struct s116 {
    signed char[4] pad4;
    int32_t f4;
};

struct s115 {
    signed char[56] pad56;
    int32_t f56;
    int32_t f60;
    signed char[48] pad112;
    int32_t f112;
    signed char[432] pad548;
    int32_t f548;
    int32_t f552;
    signed char[696] pad1252;
    int32_t f1252;
    signed char[1436] pad2692;
    struct s116* f2692;
};

struct s117 {
    int32_t f0;
    int32_t f4;
};

struct s118 {
    signed char[64] pad64;
    int32_t f64;
};

void fun_18013ba0(int32_t a1, int32_t a2, struct s118* a3, int32_t* a4, int32_t* a5, int32_t* a6);

void fun_18013a40(struct s115* ecx, int32_t* a2, int32_t a3, struct s117* a4, int32_t* a5, int32_t a6) {
    int32_t ebp7;
    int32_t* esi8;
    void* esp9;
    struct s115* edi10;
    int32_t ecx11;
    int32_t ebx12;
    struct s115* v13;
    int32_t ecx14;
    int32_t edx15;
    int32_t ebx16;
    int32_t ecx17;
    int32_t eax18;
    int32_t v19;
    int32_t* edi20;
    void* edx21;
    int32_t* ebp22;
    int32_t* v23;
    void* v24;
    int32_t eax25;
    int32_t esi26;
    int32_t** esp27;
    struct s118* edi28;
    int32_t** esp29;
    void* esp30;
    int32_t** esp31;
    int32_t eax32;

    ebp7 = a6;
    esi8 = a5;
    esp9 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 - 4 - 4 - 4);
    edi10 = ecx;
    ecx11 = *esi8;
    ebx12 = *(esi8 + ebp7 - 1);
    v13 = edi10;
    __asm__("cdq ");
    ecx14 = ecx11 - (ecx11 - ebx12 + 0x168 - edx15 >> 1);
    ebx16 = ecx14;
    if (ecx14 >= 0) {
        addr_0x18013a98_2:
    } else {
        ecx17 = edi10->f112;
        ebx16 = ebx16 + 0x168;
        eax18 = 0;
        if (!(reinterpret_cast<uint1_t>(ecx17 < 0) | reinterpret_cast<uint1_t>(ecx17 == 0))) {
            do {
                if (*reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi10) + (eax18 + eax18 * 2) * 4 + 0x74) >= ebx16) 
                    break;
                ++eax18;
            } while (eax18 < ecx17);
        }
        if (eax18 == ecx17) 
            goto addr_0x18013a98_2;
    }
    a4->f0 = 0;
    v19 = 0;
    if (ebp7 > 0) {
        edi20 = &a4->f4;
        edx21 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esi8) - reinterpret_cast<int32_t>(a4));
        ebp22 = esi8;
        v23 = edi20;
        v24 = edx21;
        while (1) {
            if (v19 != a6 - 1) {
                eax25 = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edx21) + reinterpret_cast<int32_t>(edi20)) - *ebp22;
            } else {
                eax25 = *esi8 - *ebp22 + 0x168;
            }
            __asm__("cdq ");
            esi26 = (eax25 - reinterpret_cast<int32_t>(edx21) >> 1) + *ebp22;
            if (esi26 < 0x168) {
                esp27 = reinterpret_cast<int32_t**>(reinterpret_cast<int32_t>(esp9) - 4);
                fun_18013ba0(ebx16, esi26, reinterpret_cast<int32_t>(v13) + 48, esp27 + 5, a2, reinterpret_cast<int32_t>(esp9) + 48);
                esp9 = reinterpret_cast<void*>(esp27 - 1 - 1 - 1 - 1 - 1 - 1 + 6 + 1);
            } else {
                edi28 = reinterpret_cast<struct s118*>(reinterpret_cast<int32_t>(v13) + 48);
                esp29 = reinterpret_cast<int32_t**>(reinterpret_cast<int32_t>(esp9) - 4);
                fun_18013ba0(ebx16, 0x168, edi28, esp29 + 5, a2, reinterpret_cast<int32_t>(esp9) + 48);
                esp30 = reinterpret_cast<void*>(esp29 - 1 - 1 - 1 - 1 - 1 - 1 + 6 + 1);
                esp31 = reinterpret_cast<int32_t**>(reinterpret_cast<int32_t>(esp30) - 4);
                fun_18013ba0(0, esi26 - 0x168, edi28, esp31 + 5, a2, reinterpret_cast<int32_t>(esp30) + 48);
                esp9 = reinterpret_cast<void*>(esp31 - 1 - 1 - 1 - 1 - 1 - 1 + 6 + 1);
                edi20 = v23;
            }
            *edi20 = 0;
            eax32 = v19 + 1;
            ++ebp22;
            ++edi20;
            ebx16 = esi26;
            v19 = eax32;
            v23 = edi20;
            if (eax32 >= a6) 
                break;
            edx21 = v24;
            esi8 = a5;
        }
    }
    return;
}

struct s120 {
    signed char[32] pad32;
    int32_t f32;
};

struct s119 {
    signed char[4] pad4;
    struct s120** f4;
    void** f8;
};

void fun_180149b0(struct s119* ecx, void** a2, void** a3, int32_t a4) {
    struct s120** ecx5;
    struct s120* eax6;
    void** ecx7;
    void** esi8;

    ecx5 = ecx->f4;
    eax6 = *ecx5;
    eax6->f32();
    ecx7 = ecx->f8;
    fun_1801a0d0(ecx7, __return_address(), 0x3f3504f3, a3, a2, 0, esi8);
    goto a2;
}

struct s122 {
    signed char[32] pad32;
    int32_t f32;
    int32_t f36;
};

struct s121 {
    struct s116* f0;
    struct s122** f4;
};

void fun_18014770(struct s121* ecx, int32_t a2, int32_t a3) {
    struct s122* eax4;
    struct s122** ecx5;
    struct s122* eax6;

    eax4 = *ecx->f4;
    eax4->f32();
    ecx5 = ecx->f4;
    eax6 = *ecx5;
    eax6->f36();
    goto a2;
}

struct s123 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

struct s124 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

struct s125 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

struct s126 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

void fun_18011750(struct s103* ecx) {
    struct s103* esi2;
    void* esp3;
    void** eax4;
    void** edi5;
    void** edi6;
    void** edi7;
    void** edi8;
    void** edi9;
    void** eax10;
    void** edi11;
    void** eax12;
    void** edi13;
    void** eax14;
    void** edi15;
    void** edx16;
    uint32_t ecx17;
    void** eax18;
    struct s106* edi19;
    uint32_t ebx20;
    unsigned char bl21;
    void** v22;
    void** v23;
    void** eax24;
    struct s106* ebp25;
    void** v26;
    uint32_t ecx27;
    int32_t v28;
    void** v29;
    int32_t* esp30;
    int32_t v31;
    void** edi32;
    void** ecx33;
    void** v34;
    struct s111* ebx35;
    void** eax36;
    void** ecx37;
    void** v38;
    void** v39;
    void* ecx40;
    void* ebp41;
    void* v42;
    void* v43;
    struct s123* edx44;
    void** edi45;
    int32_t v46;
    int32_t v47;
    int32_t v48;
    int32_t v49;
    struct s108** esp50;
    unsigned char al51;
    struct s124* ecx52;
    struct s125* eax53;
    unsigned char al54;
    struct s126* edi55;
    void** eax56;
    void** edi57;
    void** ebp58;
    void* esp59;
    void** edi60;
    struct s110* v61;
    void** eax62;
    int32_t v63;
    int1_t less64;
    void** v65;
    void* esp66;
    void** v67;
    void** v68;
    void** edi69;
    void*** ebp70;
    struct s110* v71;
    void** eax72;
    int1_t less73;
    void** eax74;
    void** eax75;
    struct s104* ebp76;
    struct s104* edi77;
    void** eax78;
    void** edx79;
    void** ecx80;
    void** v81;

    esi2 = ecx;
    esp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 68 - 4 - 4 - 4 - 4);
    if (!esi2->f16 || (eax4 = esi2->f812, eax4 == 0)) {
        addr_0x18011c89_2:
        return;
    } else {
        esi2->f1176 = reinterpret_cast<void**>(0);
        esi2->f1252 = reinterpret_cast<void**>(0);
        if (*reinterpret_cast<unsigned char*>(&eax4) & 1) {
            edi5 = reinterpret_cast<void**>(&esi2->f816);
            fun_180116d0(ecx, edi5);
            fun_18011700(esi2, 1, 0x138, edi5, 1, 0);
            esp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp3) - 4 - 4 + 4 + 4 - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
        }
        if (reinterpret_cast<unsigned char>(esi2->f812) & 2) {
            edi6 = reinterpret_cast<void**>(&esi2->f856);
            fun_180116d0(esi2, edi6);
            fun_18011700(esi2, 2, 48, edi6, 1, 0);
            esp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp3) - 4 - 4 + 4 + 4 - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
        }
        if (reinterpret_cast<unsigned char>(esi2->f812) & 4) {
            edi7 = reinterpret_cast<void**>(&esi2->f1056);
            fun_180116d0(esi2, edi7);
            fun_18011700(esi2, 4, 0, edi7, 1, 0);
            esp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp3) - 4 - 4 + 4 + 4 - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
        }
        if (reinterpret_cast<unsigned char>(esi2->f812) & 8) {
            fun_180116d0(esi2, &esi2->f1136);
            esp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp3) - 4 - 4 + 4 + 4);
        }
        if (reinterpret_cast<unsigned char>(esi2->f812) & 16) {
            edi8 = reinterpret_cast<void**>(&esi2->f896);
            fun_180116d0(esi2, edi8);
            fun_18011700(esi2, 16, 0xe4, edi8, 1, 0);
            esp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp3) - 4 - 4 + 4 + 4 - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
        }
        if (reinterpret_cast<unsigned char>(esi2->f812) & 32) {
            edi9 = reinterpret_cast<void**>(&esi2->f936);
            fun_180116d0(esi2, edi9);
            fun_18011700(esi2, 32, 0x84, edi9, 1, 0);
            esp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp3) - 4 - 4 + 4 + 4 - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
        }
        eax10 = esi2->f812;
        if (*reinterpret_cast<unsigned char*>(&eax10 + 1) & 1) {
            edi11 = reinterpret_cast<void**>(&esi2->f1096);
            fun_180116d0(esi2, edi11);
            fun_18011700(esi2, 0x100, 0xb4, edi11, 1, 0);
            esp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp3) - 4 - 4 + 4 + 4 - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
        }
        eax12 = esi2->f812;
        if (*reinterpret_cast<unsigned char*>(&eax12 + 1) & 2) {
            edi13 = reinterpret_cast<void**>(&esi2->f976);
            fun_180116d0(esi2, edi13);
            fun_18011700(esi2, 0x200, 0x10e, edi13, 1, 0);
            esp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp3) - 4 - 4 + 4 + 4 - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
        }
        eax14 = esi2->f812;
        if (*reinterpret_cast<unsigned char*>(&eax14 + 1) & 4) {
            edi15 = reinterpret_cast<void**>(&esi2->f1016);
            fun_180116d0(esi2, edi15);
            fun_18011700(esi2, 0x400, 90, edi15, 1, 0);
            esp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp3) - 4 - 4 + 4 + 4 - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
        }
        edx16 = esi2->f1252;
        esi2->f1256 = edx16;
        if (reinterpret_cast<signed char>(edx16) > reinterpret_cast<signed char>(0)) {
            do {
                --edx16;
            } while (edx16);
        }
        ecx17 = reinterpret_cast<unsigned char>(esi2->f812) & 3;
        if (*reinterpret_cast<signed char*>(&ecx17) != 3) 
            goto addr_0x180119f6_25;
        eax18 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi2->f812) & 0x600);
        if (eax18 == 0x600) 
            goto addr_0x180119f6_25;
        edi19 = reinterpret_cast<struct s106*>(reinterpret_cast<uint32_t>(esi2) + 0x594);
        ebx20 = reinterpret_cast<unsigned char>(esi2->f8) >> 1;
        bl21 = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&ebx20) & 1);
        *reinterpret_cast<unsigned char*>(&v22) = bl21;
        v23 = v22;
        *reinterpret_cast<int16_t*>(&eax18) = fun_18014e10(edi19, *reinterpret_cast<signed char*>(&v23), 0, 1);
        fun_18011700(esi2, 0x200, 0x10e, eax18, 0, 1);
        eax24 = v22;
        ebp25 = reinterpret_cast<struct s106*>(reinterpret_cast<uint32_t>(esi2) + 0x67c);
        v26 = eax24;
        *reinterpret_cast<int16_t*>(&eax24) = fun_18014e10(ebp25, *reinterpret_cast<signed char*>(&v26), 0, 1);
        fun_18011700(esi2, 0x400, 90, eax24, 0, 1);
        esp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp3) - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 - 4 + 20 + 4 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 - 4 + 20 + 4);
        ecx27 = reinterpret_cast<unsigned char>(esi2->f812) & 48;
        if (*reinterpret_cast<signed char*>(&ecx27) == 48) 
            goto addr_0x180119f6_25;
        if (reinterpret_cast<unsigned char>(esi2->f8) & 1) 
            goto addr_0x18011992_29;
    }
    fun_18011700(esi2, 16, 0xe4, &esi2->f816, 0, 0);
    v28 = 0;
    v29 = reinterpret_cast<void**>(&esi2->f856);
    esp30 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esp3) - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4 - 4 - 4 - 4 - 4);
    v31 = 0x84;
    addr_0x180119ed_31:
    fun_18011700(esi2, 32, v31, v29, 0, *reinterpret_cast<signed char*>(&v28));
    esp3 = reinterpret_cast<void*>(esp30 - 1 - 1 + 5 + 1);
    goto addr_0x180119f6_25;
    addr_0x18011992_29:
    if (bl21) {
        addr_0x180119f6_25:
        edi32 = esi2->f1252;
        ecx33 = reinterpret_cast<void**>(1);
        v34 = edi32;
        ebx35 = reinterpret_cast<struct s111*>(&esi2->f1260);
        if (reinterpret_cast<signed char>(edi32) >= reinterpret_cast<signed char>(1)) {
            do {
                eax36 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(ecx33 + reinterpret_cast<unsigned char>(ecx33) * 2) + 1);
                ecx33 = eax36;
            } while (reinterpret_cast<signed char>(eax36) <= reinterpret_cast<signed char>(edi32));
        }
    } else {
        *reinterpret_cast<int16_t*>(&eax24) = fun_18014e10(edi19, 1, 0, 1);
        fun_18011700(esi2, 16, 0xf0, eax24, 0, 1);
        v28 = 1;
        *reinterpret_cast<int16_t*>(&eax24) = fun_18014e10(ebp25, 1, 0, 1);
        v29 = eax24;
        esp30 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esp3) - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 - 4 + 20 + 4 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4);
        v31 = 0x78;
        goto addr_0x180119ed_31;
    }
    while (1) {
        ecx37 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(__intrinsic()) + (reinterpret_cast<uint32_t>(__intrinsic()) >> 31));
        v38 = ecx37;
        v39 = ecx37;
        if (reinterpret_cast<signed char>(ecx37) < reinterpret_cast<signed char>(edi32)) {
            ecx40 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ecx37) << 4);
            ebp41 = ecx40;
            v42 = ecx40;
            v43 = ebp41;
            while (1) {
                edx44 = reinterpret_cast<struct s123*>(reinterpret_cast<uint32_t>(ebx35) + reinterpret_cast<uint32_t>(ebp41));
                edi45 = v39;
                v46 = edx44->f0;
                v47 = edx44->f4;
                v48 = edx44->f8;
                v49 = edx44->f12;
                esp50 = reinterpret_cast<struct s108**>(reinterpret_cast<int32_t>(esp3) - 4);
                al51 = fun_18011ca0(esp50 + 10, reinterpret_cast<uint32_t>(ebp41) - reinterpret_cast<uint32_t>(ecx40) + reinterpret_cast<uint32_t>(ebx35));
                esp3 = reinterpret_cast<void*>(esp50 - 1 - 1 + 2 + 1);
                if (al51) {
                    do {
                        ecx52 = reinterpret_cast<struct s124*>(reinterpret_cast<uint32_t>(ebx35) + reinterpret_cast<uint32_t>(ebp41));
                        eax53 = reinterpret_cast<struct s125*>(reinterpret_cast<uint32_t>(ebp41) - reinterpret_cast<uint32_t>(v42) + reinterpret_cast<uint32_t>(ebx35));
                        ecx52->f0 = eax53->f0;
                        ecx52->f4 = eax53->f4;
                        ecx52->f8 = eax53->f8;
                        ebp41 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebp41) - reinterpret_cast<uint32_t>(v42));
                        ecx52->f12 = eax53->f12;
                        edi45 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi45) - reinterpret_cast<unsigned char>(v38));
                        if (reinterpret_cast<signed char>(edi45) < reinterpret_cast<signed char>(v38)) 
                            break;
                        al54 = fun_18011ca0(reinterpret_cast<int32_t>(esp3) + 36, reinterpret_cast<uint32_t>(ebp41) - reinterpret_cast<uint32_t>(v42) + reinterpret_cast<uint32_t>(ebx35));
                        esp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp3) - 4 - 4 - 4 + 8 + 4);
                    } while (al54);
                    ebp41 = v43;
                }
                edi55 = reinterpret_cast<struct s126*>((reinterpret_cast<unsigned char>(edi45) << 4) + reinterpret_cast<uint32_t>(ebx35));
                ebp41 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebp41) + 16);
                edi55->f0 = v46;
                v43 = ebp41;
                edi55->f4 = v47;
                eax56 = v39 + 1;
                edi55->f8 = v48;
                v39 = eax56;
                edi55->f12 = v49;
                if (reinterpret_cast<signed char>(eax56) >= reinterpret_cast<signed char>(v34)) 
                    break;
                ecx40 = v42;
            }
            edi32 = v34;
            ecx37 = v38;
        }
        if (reinterpret_cast<signed char>(ecx37) <= reinterpret_cast<signed char>(1)) 
            break;
    }
    edi57 = reinterpret_cast<void**>(&esi2->f856);
    ebp58 = reinterpret_cast<void**>(&esi2->f816);
    fun_18014dd0(reinterpret_cast<uint32_t>(esi2) + 0x594, ebp58, edi57);
    fun_18014dd0(reinterpret_cast<uint32_t>(esi2) + 0x67c, edi57, ebp58);
    esp59 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp3) - 4 - 4 - 4 + 8 + 4 - 4 - 4 - 4 + 8 + 4);
    edi60 = reinterpret_cast<void**>(0);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(esi2->f1256) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(esi2->f1256 == 0))) {
        v61 = reinterpret_cast<struct s110*>(reinterpret_cast<uint32_t>(esi2) + 0x764);
        do {
            eax62 = fun_180145c0(reinterpret_cast<uint32_t>(esi2) + 0xa84);
            fun_180149e0(v61, v63, eax62);
            esp59 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp59) - 4 + 4 - 4 - 4 - 4 + 8 + 4);
            ++edi60;
            less64 = reinterpret_cast<signed char>(edi60) < reinterpret_cast<signed char>(esi2->f1256);
            v61 = reinterpret_cast<struct s110*>(reinterpret_cast<uint32_t>(v61) + 100);
        } while (less64);
    }
    v65 = esi2->f1256;
    fun_180147a0(reinterpret_cast<uint32_t>(esi2) + 0xa84, reinterpret_cast<int32_t>(esp59) + 52, v65);
    esp66 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp59) - 4 - 4 - 4 + 8 + 4);
    v67 = esi2->f1256;
    fun_18014570(reinterpret_cast<uint32_t>(esi2) + 0xb90, reinterpret_cast<int32_t>(esp66) + 52, v67);
    v68 = esi2->f1256;
    fun_18014570(reinterpret_cast<uint32_t>(esi2) + 0xbdc, reinterpret_cast<int32_t>(esp66) - 4 - 4 - 4 + 8 + 4 + 52, v68);
    edi69 = reinterpret_cast<void**>(0);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(esi2->f1256) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(esi2->f1256 == 0))) {
        ebp70 = &esi2->f1388;
        v71 = reinterpret_cast<struct s110*>(reinterpret_cast<uint32_t>(esi2) + 0x764);
        do {
            eax72 = fun_18014a00(v71);
            *ebp70 = eax72;
            ++edi69;
            ebp70 = ebp70 + 4;
            less73 = reinterpret_cast<signed char>(edi69) < reinterpret_cast<signed char>(esi2->f1256);
            v71 = reinterpret_cast<struct s110*>(reinterpret_cast<uint32_t>(v71) + 100);
        } while (less73);
    }
    eax74 = fun_180145c0(reinterpret_cast<uint32_t>(esi2) + 0xb90);
    esi2->f1420 = eax74;
    eax75 = fun_180145c0(reinterpret_cast<uint32_t>(esi2) + 0xbdc);
    ebp76 = reinterpret_cast<struct s104*>(&esi2->f24);
    esi2->f1424 = eax75;
    edi77 = ebp76->f0;
    if (edi77 != ebp76) {
        do {
            eax78 = esi2->f1256;
            edx79 = esi2->f1252;
            ecx80 = edi77->f8;
            v81 = esi2->f812;
            fun_1800f940(ecx80, v81, eax78, ebx35, edx79, &esi2->f1388, eax78, &esi2->f1420, &esi2->f1136, &esi2->f1212);
            edi77 = edi77->f0;
        } while (edi77 != ebp76);
        goto addr_0x18011c89_2;
    }
}

int16_t fun_1800f550(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10) {
    void** v11;
    void** ebx12;
    void** v13;
    void** esi14;
    void** v15;
    void** edi16;
    void** esi17;
    void** ebp18;
    void** edi19;
    int32_t ebp20;
    void** edi21;
    int32_t ebp22;
    void** edi23;
    int32_t ebp24;
    void** edi25;
    int32_t ebp26;
    void** eax27;
    void** eax28;
    void** ecx29;
    void** ecx30;
    void** edx31;
    void** v32;
    void** edi33;
    int32_t ebp34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** edi39;
    int32_t ebx40;
    void** v41;
    void** v42;
    void** v43;

    v11 = ebx12;
    v13 = esi14;
    v15 = edi16;
    esi17 = ecx;
    fun_18012620(ecx, a3, v15, v13, ebp18, v11, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10);
    *reinterpret_cast<void***>(esi17 + 0x88) = a2;
    *reinterpret_cast<void***>(esi17 + 0x8c) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi17 + 0x90) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi17 + 0x94) = reinterpret_cast<void**>(0);
    edi19 = esi17 + 0xd0;
    ebp20 = 9;
    do {
        fun_18018d20(edi19 + 0xffffffd8);
        fun_18018d20(edi19);
        edi19 = edi19 + 96;
        --ebp20;
    } while (ebp20);
    edi21 = esi17 + 0x3f8;
    ebp22 = 2;
    do {
        fun_18018d20(edi21);
        edi21 = edi21 + 40;
        --ebp22;
    } while (ebp22);
    edi23 = esi17 + 0x448;
    ebp24 = 7;
    do {
        fun_18018d20(edi23);
        edi23 = edi23 + 40;
        --ebp24;
    } while (ebp24);
    edi25 = esi17 + 0x560;
    ebp26 = 2;
    do {
        fun_18018d20(edi25);
        edi25 = edi25 + 40;
        --ebp26;
    } while (ebp26);
    *reinterpret_cast<signed char*>(esi17 + 0x5b0) = 0;
    *reinterpret_cast<void***>(esi17 + 0x5b8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi17 + 0x5bc) = a5;
    *reinterpret_cast<void***>(esi17 + 0x5c0) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi17 + 0x5c4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi17 + 0x5c8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi17 + 0x5cc) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi17 + 0x5d0) = reinterpret_cast<void**>(0);
    *reinterpret_cast<signed char*>(esi17 + 0x5d4) = 0;
    *reinterpret_cast<signed char*>(esi17 + 0x5d5) = 0;
    *reinterpret_cast<signed char*>(esi17 + 0x5d6) = 0;
    *reinterpret_cast<signed char*>(esi17 + 0x5d7) = 0;
    *reinterpret_cast<signed char*>(esi17 + 0x5d8) = 0;
    *reinterpret_cast<void***>(esi17 + 0x5dc) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi17 + 0x5e0) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi17 + 0x5e4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi17) = reinterpret_cast<void**>(0x180347b0);
    eax27 = *reinterpret_cast<void***>(a2);
    eax28 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax27 + 4)());
    ecx29 = *reinterpret_cast<void***>(esi17 + 0x5bc);
    *reinterpret_cast<void***>(esi17 + 0x5b8) = eax28;
    ecx30 = ecx29 + 16;
    if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx29 + 16)) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx29 + 20))) {
        ecx30 = ecx29 + 20;
    }
    edx31 = *reinterpret_cast<void***>(eax28);
    v32 = *reinterpret_cast<void***>(ecx30);
    *reinterpret_cast<void***>(edx31 + 4)(eax28);
    edi33 = esi17 + 0xd0;
    ebp34 = 8;
    do {
        v35 = *reinterpret_cast<void***>(esi17 + 0x5b8);
        fun_18018d40(edi33 + 0xffffffd8, v35, v32, v15, v13);
        v36 = *reinterpret_cast<void***>(esi17 + 0x5b8);
        fun_18018d40(edi33, v36, v32, v15, v13);
        *reinterpret_cast<void***>(edi33 + 0xffffffcc) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(edi33 + 0xffffffc8) = reinterpret_cast<void**>(0);
        edi33 = edi33 + 96;
        --ebp34;
    } while (ebp34);
    v37 = *reinterpret_cast<void***>(esi17 + 0x5b8);
    fun_18018d40(esi17 + 0x3f8, v37, v32, v15, v13);
    v38 = *reinterpret_cast<void***>(esi17 + 0x5b8);
    fun_18018d40(esi17 + 0x420, v38, v32, v15, v13);
    edi39 = esi17 + 0x448;
    ebx40 = 7;
    do {
        v41 = *reinterpret_cast<void***>(esi17 + 0x5b8);
        fun_18018d40(edi39, v41, v32, v15, v13);
        edi39 = edi39 + 40;
        --ebx40;
    } while (ebx40);
    v42 = *reinterpret_cast<void***>(esi17 + 0x5b8);
    fun_18018d40(esi17 + 0x560, v42, v32, v15, v13);
    v43 = *reinterpret_cast<void***>(esi17 + 0x5b8);
    fun_18018d40(esi17 + 0x588, v43, v32, v15, v13);
    goto v11;
}

int16_t fun_18019850(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** eax6;
    void* esp7;
    int1_t less_or_equal8;
    void** v9;
    void** ecx10;
    void** eax11;
    void* ebp12;
    void** ecx13;
    void** edx14;
    void** eax15;

    eax6 = *reinterpret_cast<void***>(a2 + 24);
    esp7 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4);
    less_or_equal8 = reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 24)) <= reinterpret_cast<signed char>(eax6);
    v9 = *reinterpret_cast<void***>(ecx + 24);
    if (!less_or_equal8) {
    }
    if (v9) {
        ecx10 = *reinterpret_cast<void***>(ecx + 20);
        eax11 = *reinterpret_cast<void***>(ecx10);
        *reinterpret_cast<void***>(eax11 + 20)(ecx, a2, v9);
        esp7 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp7) - 4 - 4 - 4 - 4 + 4);
    }
    ebp12 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 24)) - reinterpret_cast<unsigned char>(v9));
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(ebp12) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(ebp12 == 0))) {
        if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(a2 + 4 + 12)) < reinterpret_cast<signed char>(0)) {
        }
        if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 4 + 12)) < reinterpret_cast<signed char>(0)) {
        }
        ecx13 = *reinterpret_cast<void***>(ecx + 20);
        edx14 = *reinterpret_cast<void***>(ecx13);
        *reinterpret_cast<void***>(edx14 + 24)(reinterpret_cast<int32_t>(esp7) - 4 - 4 + 48, reinterpret_cast<int32_t>(esp7) + 20, ebp12);
        *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 24)) + reinterpret_cast<uint32_t>(ebp12));
    }
    eax15 = ecx;
    return *reinterpret_cast<int16_t*>(&eax15);
}

int16_t fun_18014a10(struct s99* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20) {
    void** ebx21;
    void** v22;
    void** esi23;
    void** ebp24;
    void** ebx25;
    int16_t ax26;
    void** ecx27;
    void** edx28;
    void** ecx29;
    void** edi30;
    void** edi31;
    int16_t ax32;
    void** ecx33;
    void** edx34;
    void** ecx35;
    void** ecx36;

    ebx21 = reinterpret_cast<void**>(&ecx->f12);
    v22 = ecx->f4;
    ax26 = fun_180192b0(ebx21, v22, a2, esi23, ebp24, ebx25, __return_address(), a2, a3);
    if (*reinterpret_cast<signed char*>(&ax26)) {
        ecx27 = ecx->f4;
        edx28 = *reinterpret_cast<void***>(ecx27);
        *reinterpret_cast<void***>(edx28 + 28)(&ecx->f52, ebx21);
    }
    ecx29 = ecx->f8;
    edi30 = reinterpret_cast<void**>(&ecx->f52);
    ax32 = fun_180192b0(edi30, ecx29, a2, edi31, esi23, ebp24, ebx25, __return_address(), a2);
    if (*reinterpret_cast<signed char*>(&ax32)) {
        ecx33 = ecx->f8;
        edx34 = *reinterpret_cast<void***>(ecx33);
        ax32 = reinterpret_cast<int16_t>(*reinterpret_cast<void***>(edx34 + 28)(edi30));
    }
    ecx35 = ecx->f92;
    if (ecx35) {
        ax32 = fun_18019740(ecx35, edi30, edi31, esi23, ebp24, ebx25, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
    }
    ecx36 = ecx->f96;
    if (ecx36) {
        ax32 = fun_18019740(ecx36, ebx21, esi23, ebp24, ebx25, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
    }
    ecx->f36 = reinterpret_cast<void**>(0);
    ecx->f76 = reinterpret_cast<void**>(0);
    return ax32;
}

void fun_18014840(struct s100* ecx, void** a2, void** a3, void** a4) {
    void** v5;
    void** esi6;
    void** ebx7;
    int16_t ax8;
    void** ecx9;
    void** edx10;
    void** eax11;

    v5 = ecx->f4;
    ax8 = fun_180192b0(&ecx->f8, v5, a2, esi6, ebx7, __return_address(), a2, a3, a4);
    if (!*reinterpret_cast<signed char*>(&ax8)) {
        ecx->f32 = 0;
        ecx->f72 = 0;
        return;
    } else {
        ecx9 = ecx->f4;
        edx10 = *reinterpret_cast<void***>(ecx9);
        *reinterpret_cast<void***>(edx10 + 28)();
        eax11 = *reinterpret_cast<void***>(&ecx->f88);
        *reinterpret_cast<void***>(eax11 + 32)(&ecx->f88);
        ecx->f32 = 0;
        ecx->f72 = 0;
        goto &ecx->f48;
    }
}

struct s128 {
    signed char[24] pad24;
    void** f24;
};

struct s127 {
    int32_t f0;
    struct s128* f4;
};

struct s129 {
    signed char[12] pad12;
    int32_t f12;
};

int16_t fun_18019950(void** ecx, struct s127* a2, void** a3, void** a4, void** a5) {
    struct s128* eax6;
    void* esp7;
    void** ecx8;
    void** edx9;
    void** ecx10;
    int32_t ebp11;
    void** edx12;
    void* ebp13;
    struct s129* eax14;
    void** ecx15;
    int32_t* esp16;
    int32_t v17;
    void** edx18;
    void** eax19;

    eax6 = a2->f4;
    esp7 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 48 - 4 - 4 - 4 - 4);
    ecx8 = eax6->f24;
    edx9 = *reinterpret_cast<void***>(ecx + 24);
    if (reinterpret_cast<signed char>(edx9) > reinterpret_cast<signed char>(ecx8)) {
    }
    if (ecx8) {
        ecx10 = *reinterpret_cast<void***>(ecx + 20);
        ebp11 = a2->f0;
        edx12 = *reinterpret_cast<void***>(ecx10);
        *reinterpret_cast<void***>(edx12 + 12)(ecx, eax6, ebp11, 0, ecx8);
        esp7 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp7) - 4 - 4 - 4 - 4 - 4 - 4 + 4);
    }
    ebp13 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a2->f4->f24) - reinterpret_cast<unsigned char>(ecx8));
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(ebp13) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(ebp13 == 0))) {
        eax14 = reinterpret_cast<struct s129*>(reinterpret_cast<int32_t>(a2->f4) + 4);
        if (eax14->f12 < 0) {
        }
        if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 4 + 12)) < reinterpret_cast<signed char>(0)) {
        }
        ecx15 = *reinterpret_cast<void***>(ecx + 20);
        esp16 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esp7) - 4 - 4 - 4);
        v17 = a2->f0;
        edx18 = *reinterpret_cast<void***>(ecx15);
        *reinterpret_cast<void***>(edx18 + 8)(esp16 - 1 + 15, esp16 + 9, v17, 0, ebp13);
        *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 24)) + reinterpret_cast<uint32_t>(ebp13));
    }
    eax19 = ecx;
    return *reinterpret_cast<int16_t*>(&eax19);
}

void fun_18019d30(void** ecx, int32_t a2, void** a3, int32_t a4, void** a5) {
    void** v6;
    void** ebx7;
    void** v8;
    void** ebp9;
    void** v10;
    void** esi11;
    void** v12;
    void** edi13;
    void** v14;
    int32_t edx15;
    int32_t ebx16;
    void** ebp17;
    void** esi18;
    void** v19;
    void** v20;
    void** v21;
    void** v22;
    void** v23;
    void** v24;
    void** v25;
    void** edx26;
    int32_t v27;

    v6 = ebx7;
    v8 = ebp9;
    v10 = esi11;
    v12 = edi13;
    v14 = ecx;
    edx15 = 8;
    do {
        --edx15;
    } while (edx15);
    ebx16 = a4;
    ebp17 = a5;
    if (!(reinterpret_cast<uint1_t>(ebx16 < 0) | reinterpret_cast<uint1_t>(ebx16 == 0))) {
        esi18 = a3;
        do {
            fun_18019310(esi18, ebp17, v12, v10, v8, v6, v14, v19, v20, v21, v22, v23, v24, v25);
            esi18 = esi18 + 40;
            --ebx16;
        } while (ebx16);
        ecx = v14;
    }
    edx26 = *reinterpret_cast<void***>(ecx);
    *reinterpret_cast<void***>(edx26 + 0x6c)();
    goto v27;
}

int16_t fun_1800dd10(void** a1, void** a2) {
    void** ecx3;
    uint32_t eax4;
    void** edx5;

    ecx3 = a1;
    if (!ecx3) {
        addr_0x1800dd2b_2:
        eax4 = 0;
    } else {
        edx5 = a2;
        do {
            eax4 = reinterpret_cast<uint32_t>(-reinterpret_cast<unsigned char>(ecx3)) & reinterpret_cast<unsigned char>(ecx3);
            if (!edx5) 
                break;
            --edx5;
            ecx3 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx3) ^ eax4);
        } while (ecx3);
        goto addr_0x1800dd2b_2;
    }
    return *reinterpret_cast<int16_t*>(&eax4);
}

void fun_18012fd0(void** ecx);

void fun_18013cb0(void** ecx, void** a2) {
    void** esi3;
    void** edi4;
    void** ecx5;

    esi3 = *reinterpret_cast<void***>(ecx + 24);
    edi4 = ecx + 24;
    if (esi3 != edi4) {
        do {
            ecx5 = *reinterpret_cast<void***>(esi3 + 8);
            fun_18012fd0(ecx5);
            esi3 = *reinterpret_cast<void***>(esi3);
        } while (esi3 != edi4);
    }
    return;
}

int16_t fun_18010fe0(void** ecx, void** a2) {
    void** v3;
    void** edi4;
    void** esi5;
    void** edi6;
    int32_t ebx7;
    void** edi8;
    int32_t ebx9;
    void** edi10;
    int32_t ebx11;
    void** edi12;
    int32_t ebx13;
    void** edi14;
    int32_t ebx15;
    struct s99* edi16;
    int32_t ebx17;
    struct s101* edi18;
    int32_t ebx19;
    void** eax20;

    v3 = edi4;
    esi5 = ecx;
    fun_18013010(ecx, a2);
    edi6 = esi5 + 0x330;
    *reinterpret_cast<void***>(esi5 + 0x328) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi5 + 0x32c) = reinterpret_cast<void**>(0);
    ebx7 = 2;
    do {
        fun_18019180(edi6);
        edi6 = edi6 + 40;
        --ebx7;
    } while (ebx7);
    edi8 = esi5 + 0x380;
    ebx9 = 2;
    do {
        fun_18019180(edi8);
        edi8 = edi8 + 40;
        --ebx9;
    } while (ebx9);
    edi10 = esi5 + 0x3d0;
    ebx11 = 2;
    do {
        fun_18019180(edi10);
        edi10 = edi10 + 40;
        --ebx11;
    } while (ebx11);
    edi12 = esi5 + 0x420;
    ebx13 = 2;
    do {
        fun_18019180(edi12);
        edi12 = edi12 + 40;
        --ebx13;
    } while (ebx13);
    fun_18019180(esi5 + 0x470);
    fun_18019180(esi5 + 0x4bc);
    *reinterpret_cast<void***>(esi5 + 0x4e4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi5 + 0x4e8) = reinterpret_cast<void**>(0);
    edi14 = esi5 + 0x594;
    ebx15 = 2;
    do {
        fun_18014ad0(edi14);
        edi14 = edi14 + 0xe8;
        --ebx15;
    } while (ebx15);
    edi16 = reinterpret_cast<struct s99*>(esi5 + 0x764);
    ebx17 = 8;
    do {
        fun_180148a0(edi16);
        edi16 = reinterpret_cast<struct s99*>(reinterpret_cast<uint32_t>(edi16) + 100);
        --ebx17;
    } while (ebx17);
    fun_18014660(esi5 + 0xa84, v3);
    edi18 = reinterpret_cast<struct s101*>(esi5 + 0xb90);
    ebx19 = 2;
    do {
        fun_18014480(edi18);
        ++edi18;
        --ebx19;
    } while (ebx19);
    *reinterpret_cast<void***>(esi5 + 0xc28) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi5 + 0xc2c) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi5 + 0xc30) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi5 + 0xc34) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi5 + 0xc3c) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi5 + 0xc38) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi5 + 0xc40) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi5 + 0xc44) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi5 + 0xc48) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi5 + 0xc4c) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi5) = reinterpret_cast<void**>(0x180347f8);
    *reinterpret_cast<void***>(esi5 + 0xc50) = reinterpret_cast<void**>(0);
    eax20 = esi5;
    return *reinterpret_cast<int16_t*>(&eax20);
}

unsigned char g18045894 = 0;

void fun_18012ca0(void** ecx) {
    unsigned char ah2;
    unsigned char ah3;
    void** eax4;
    void** eax5;
    unsigned char bl6;
    void** eax7;
    void** v8;

    __asm__("fld dword [ecx+0x28]");
    __asm__("fcomp dword [ecx+0x2c]");
    __asm__("fnstsw ax");
    if (ah2 & 65 || ah3 & 64) {
        *reinterpret_cast<void***>(ecx + 0x68) = reinterpret_cast<void**>(0x3f800000);
    } else {
        eax4 = *reinterpret_cast<void***>(ecx + 48);
        if (!reinterpret_cast<int1_t>(eax4 == 0x3f800000)) {
            __asm__("fld dword [ecx+0x28]");
            __asm__("fsub dword [ecx+0x2c]");
            __asm__("fmul dword [ecx+0x30]");
            __asm__("fadd dword [ecx+0x2c]");
            __asm__("fdivr dword [ecx+0x2c]");
            __asm__("fstp dword [ecx+0x68]");
        } else {
            __asm__("fld dword [ecx+0x2c]");
            __asm__("fdiv dword [ecx+0x28]");
            __asm__("fstp dword [ecx+0x68]");
        }
    }
    if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 4)) & 4)) {
        *reinterpret_cast<void***>(ecx + 0x6c) = reinterpret_cast<void**>(0);
    } else {
        __asm__("fld dword [ecx+0x38]");
        __asm__("fcomp dword [0x1803422c]");
        __asm__("fnstsw ax");
        if (*reinterpret_cast<unsigned char*>(&eax4 + 1) & 1) {
            eax5 = *reinterpret_cast<void***>(ecx + 0x68);
            *reinterpret_cast<void***>(ecx + 0x6c) = eax5;
            bl6 = g18045894;
            if (!(1 & bl6)) {
                __asm__("fld dword [0x18034830]");
                __asm__("fsub dword [0x1803482c]");
                g18045894 = reinterpret_cast<unsigned char>(bl6 | 1);
                __asm__("fdiv dword [0x18034834]");
                __asm__("fstp dword [0x18045890]");
            }
            __asm__("fld dword [ecx+0x30]");
            __asm__("fcomp dword [0x18045890]");
            __asm__("fnstsw ax");
            if (!(*reinterpret_cast<unsigned char*>(&eax5 + 1) & 65)) {
                __asm__("fld dword [ecx+0x30]");
                __asm__("fsub dword [0x18045890]");
                __asm__("fmul dword [0x18034838]");
                __asm__("fadd dword [0x18034830]");
            } else {
                __asm__("fld dword [0x18034834]");
                __asm__("fmul dword [ecx+0x30]");
                __asm__("fadd dword [0x1803482c]");
            }
            __asm__("fmul dword [ecx+0x6c]");
            __asm__("fstp dword [esp+0x4]");
            __asm__("fld dword [ecx+0x28]");
            __asm__("fcomp dword [ecx+0x2c]");
            eax7 = v8;
            *reinterpret_cast<void***>(ecx + 0x6c) = eax7;
            __asm__("fnstsw ax");
            if (!(*reinterpret_cast<unsigned char*>(&eax7 + 1) & 65) && !(*reinterpret_cast<unsigned char*>(&eax7 + 1) & 65)) {
                __asm__("fld dword [ecx+0x28]");
                __asm__("fdiv dword [ecx+0x2c]");
                __asm__("fstp dword [esp+0x0]");
                __asm__("fld dword [ecx+0x30]");
                __asm__("fcomp dword [0x18034238]");
                __asm__("fnstsw ax");
                if (*reinterpret_cast<unsigned char*>(&eax7 + 1) & 65) {
                    __asm__("fld dword [ecx+0x30]");
                    __asm__("fcomp dword [0x1803489c]");
                    __asm__("fnstsw ax");
                    if (*reinterpret_cast<unsigned char*>(&eax7 + 1) & 65) {
                        __asm__("fld dword [esp+0x4]");
                    } else {
                        __asm__("fld dword [esp+0x0]");
                        __asm__("fcomp dword [0x18034554]");
                        __asm__("fld dword [esp+0x0]");
                        __asm__("fnstsw ax");
                        if (!(*reinterpret_cast<unsigned char*>(&eax7 + 1) & 1)) {
                            __asm__("fsub dword [0x18034554]");
                            __asm__("fmul dword [0x18034890]");
                            __asm__("fadd dword [0x1803488c]");
                        } else {
                            __asm__("fmul dword [0x18034898]");
                            __asm__("fsubr dword [0x18034894]");
                            __asm__("fld dword [esp+0x0]");
                            __asm__("fsub dword [0x18034238]");
                            __asm__("fmulp st1, st0");
                            __asm__("fadd dword [0x18034238]");
                        }
                    }
                    __asm__("fld dword [ecx+0x30]");
                    __asm__("fcomp dword [0x1803489c]");
                    __asm__("fnstsw ax");
                    if (*reinterpret_cast<unsigned char*>(&eax7 + 1) & 1) {
                        __asm__("fld dword [esp+0x0]");
                        __asm__("fsub dword [0x18034238]");
                        __asm__("fmul dword [0x18034888]");
                        __asm__("fadd dword [0x18034238]");
                        __asm__("fld dword [0x18034238]");
                        __asm__("fdiv dword [esp+0x0]");
                        __asm__("fsubr dword [0x18034238]");
                        __asm__("fmul dword [0x18034884]");
                        __asm__("fsubp st1, st0");
                        __asm__("fstp dword [esp+0x0]");
                    }
                    if (*reinterpret_cast<void***>(ecx + 48) != 0x3f800000) {
                        __asm__("fld dword [ecx+0x30]");
                        __asm__("fcomp dword [0x1803489c]");
                        __asm__("fnstsw ax");
                        if (*reinterpret_cast<unsigned char*>(&eax7 + 1) & 65) {
                            __asm__("fstp st0");
                            if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx + 48) == 0x3dcccccd)) {
                                __asm__("fld dword [ecx+0x30]");
                                __asm__("fmul dword [0x18034554]");
                                __asm__("fmul dword [esp+0x0]");
                            } else {
                                __asm__("fld dword [esp+0x0]");
                                __asm__("fld dword [esp+0x4]");
                                __asm__("fmul st0, st1");
                                __asm__("fstp dword [ecx+0x6c]");
                                __asm__("fstp st0");
                                __asm__("fld dword [ecx+0x3c]");
                                __asm__("fmul dword [ecx+0x68]");
                                __asm__("fstp dword [ecx+0x68]");
                                return;
                            }
                        } else {
                            __asm__("fld dword [ecx+0x30]");
                            __asm__("fsub dword [0x1803489c]");
                            __asm__("fmul dword [0x18034880]");
                            __asm__("fld dword [0x18034238]");
                            __asm__("fsub st0, st1");
                            __asm__("fmul dword [esp+0x0]");
                            __asm__("fxch st0, st1");
                            __asm__("fmul st0, st2");
                            __asm__("faddp st1, st0");
                            __asm__("fstp st1");
                            __asm__("fld dword [esp+0x4]");
                            __asm__("fmul st0, st1");
                            __asm__("fstp dword [ecx+0x6c]");
                            __asm__("fstp st0");
                            __asm__("fld dword [ecx+0x3c]");
                            __asm__("fmul dword [ecx+0x68]");
                            __asm__("fstp dword [ecx+0x68]");
                            return;
                        }
                    }
                    __asm__("fld dword [esp+0x4]");
                    __asm__("fmul st0, st1");
                    __asm__("fstp dword [ecx+0x6c]");
                    __asm__("fstp st0");
                    __asm__("fld dword [ecx+0x3c]");
                    __asm__("fmul dword [ecx+0x68]");
                    __asm__("fstp dword [ecx+0x68]");
                    return;
                } else {
                    __asm__("fld dword [0x18034238]");
                    __asm__("fdiv dword [esp+0x0]");
                    __asm__("fsubr dword [0x18034238]");
                    __asm__("fmul dword [ecx+0x30]");
                    __asm__("fadd st0, st0");
                    __asm__("fadd dword [0x18034238]");
                    __asm__("fld dword [esp+0x4]");
                    __asm__("fmul st0, st1");
                    __asm__("fstp dword [ecx+0x6c]");
                    __asm__("fstp st0");
                    __asm__("fld dword [ecx+0x3c]");
                    __asm__("fmul dword [ecx+0x68]");
                    __asm__("fstp dword [ecx+0x68]");
                    return;
                }
            }
        } else {
            __asm__("fld dword [ecx+0x3c]");
            __asm__("fmul dword [ecx+0x68]");
            *reinterpret_cast<void***>(ecx + 0x6c) = *reinterpret_cast<void***>(ecx + 56);
            __asm__("fstp dword [ecx+0x68]");
            return;
        }
    }
    __asm__("fld dword [ecx+0x3c]");
    __asm__("fmul dword [ecx+0x68]");
    __asm__("fstp dword [ecx+0x68]");
    return;
}

void fun_1800db10(void** ecx, void** a2);

int16_t fun_1800dc20(void** ecx, void** a2, void** a3, void*** a4);

int16_t fun_18012a30(void** ecx) {
    void** v2;
    int16_t ax3;
    void** v4;
    void** eax5;
    void** v6;
    void** v7;
    void** edx8;
    void** ecx9;
    void** edx10;
    void** ecx11;
    int16_t ax12;

    v2 = *reinterpret_cast<void***>(ecx + 36) + 90;
    ax3 = fun_1800db30(ecx, v2);
    __asm__("fstp dword [ebp-0x4]");
    __asm__("fld dword [esi+0x28]");
    __asm__("fcomp dword [esi+0x2c]");
    __asm__("fnstsw ax");
    if (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&ax3) + 1) & 1) {
        __asm__("fld dword [esi+0x28]");
        __asm__("fdiv dword [esi+0x2c]");
        __asm__("fmul dword [ebp-0x4]");
        __asm__("fstp dword [ebp-0x4]");
    }
    v4 = *reinterpret_cast<void***>(ecx + 32);
    fun_1800db30(ecx, v4);
    __asm__("fmul dword [ebp-0x4]");
    __asm__("fstp dword [esp]");
    fun_1800db10(ecx, ecx);
    __asm__("fld qword [0x180346d0]");
    __asm__("fdivr dword [0x18034310]");
    __asm__("fmul st0, st1");
    __asm__("fstp dword [ebp-0x8]");
    __asm__("fstp st0");
    __asm__("fld dword [ebp-0x8]");
    __asm__("fistp dword [ebp-0xc]");
    eax5 = *reinterpret_cast<void***>(ecx + 32) + 90;
    *reinterpret_cast<void***>(ecx + 80) = v6;
    fun_1800db30(v6, eax5);
    __asm__("fmul dword [ebp-0x4]");
    __asm__("fstp dword [esp]");
    fun_1800db10(v6, v6);
    __asm__("fld qword [0x180346d0]");
    __asm__("fdivr dword [0x18034310]");
    __asm__("fmul st0, st1");
    __asm__("fstp dword [ebp-0xc]");
    __asm__("fstp st0");
    __asm__("fld dword [ebp-0xc]");
    __asm__("fistp dword [ebp-0x8]");
    *reinterpret_cast<void***>(ecx + 84) = v7;
    edx8 = *reinterpret_cast<void***>(ecx + 80) + 90;
    ecx9 = ecx + 88;
    fun_1800dc20(ecx9, reinterpret_cast<signed char>(edx8) >> 1, ecx9, ecx + 92);
    edx10 = *reinterpret_cast<void***>(ecx + 84) + 90;
    ecx11 = ecx + 100;
    ax12 = fun_1800dc20(ecx11, reinterpret_cast<signed char>(edx10) >> 1, ecx11, ecx + 96);
    *reinterpret_cast<void***>(ecx + 52) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(1);
    return ax12;
}

void fun_1800db10(void** ecx, void** a2) {
    __asm__("fld dword [ebp+0x8]");
    __asm__("fld1 ");
    __asm__("fld st1");
    __asm__("fmul st0, st2");
    __asm__("fsubp st1, st0");
    __asm__("fsqrt ");
    __asm__("fpatan ");
    __asm__("fstp dword [ebp-0x4]");
    __asm__("fld dword [ebp-0x4]");
    return;
}

int16_t fun_1800dc20(void** ecx, void** a2, void** a3, void*** a4) {
    int16_t ax5;

    fun_1800db30(ecx, a2 + 90);
    __asm__("fstp dword [ecx]");
    ax5 = fun_1800db30(a3, a2);
    __asm__("fstp dword [edx]");
    return ax5;
}

void fun_18012bb0(void** ecx, void** a2) {
    *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(1);
    *reinterpret_cast<void***>(ecx + 8) = a2;
    return;
}

struct s132 {
    signed char[44] pad44;
    int32_t f44;
};

struct s133 {
    struct s133* f0;
    signed char[4] pad8;
    void** f8;
};

struct s134 {
    signed char[4] pad4;
    int32_t f4;
};

struct s135 {
    signed char[4] pad4;
    int32_t f4;
};

struct s136 {
    signed char[4] pad4;
    int32_t f4;
};

struct s137 {
    signed char[4] pad4;
    int32_t f4;
};

struct s138 {
    signed char[4] pad4;
    int32_t f4;
};

struct s139 {
    signed char[4] pad4;
    int32_t f4;
};

struct s131 {
    struct s132* f0;
    signed char[20] pad24;
    struct s133* f24;
    signed char[12] pad40;
    signed char f40;
    signed char[3] pad44;
    void** f44;
    signed char[3] pad48;
    void** f48;
    signed char[3] pad52;
    void** f52;
    signed char[3] pad56;
    void** f56;
    signed char[3] pad60;
    void** f60;
    signed char[3] pad64;
    int32_t f64;
    void** f68;
    signed char[35] pad104;
    uint32_t f104;
    int32_t f108;
    signed char[688] pad800;
    void** f800;
    signed char[3] pad804;
    unsigned char f804;
    signed char[583] pad1388;
    struct s134** f1388;
    signed char[36] pad1428;
    struct s135* f1428;
    signed char[228] pad1660;
    struct s136* f1660;
    signed char[1028] pad2692;
    struct s137* f2692;
    signed char[424] pad3120;
    struct s138** f3120;
    struct s139** f3124;
};

struct s130 {
    void** f0;
    signed char[31] pad32;
    void** f32;
    signed char[11] pad44;
    void** f44;
    signed char[19] pad64;
    void** f64;
    signed char[435] pad500;
    struct s131* f500;
    int32_t f504;
    signed char[76] pad584;
    int32_t f584;
    signed char[160] pad748;
    int32_t f748;
};

int16_t fun_180135f0(struct s130* a1, void** a2, void** a3) {
    void** ecx4;
    struct s130* edi5;
    int32_t ecx6;
    void*** esi7;
    int16_t ax8;
    void** eax9;
    void** esi10;
    void** eax11;
    struct s130* edi12;
    int32_t ecx13;

    ecx4 = a2;
    if (reinterpret_cast<signed char>(ecx4) < reinterpret_cast<signed char>(0)) {
        edi5 = a1;
        ecx6 = 0xbc;
        esi7 = reinterpret_cast<void***>(0x18038ca0);
        *reinterpret_cast<signed char*>(&ax8) = 1;
        while (ecx6) {
            --ecx6;
            edi5->f0 = *esi7;
            edi5 = reinterpret_cast<struct s130*>(reinterpret_cast<uint32_t>(edi5) + 4);
            esi7 = esi7 + 4;
        }
        return ax8;
    }
    eax9 = a3;
    if (!eax9) {
        esi10 = reinterpret_cast<void**>(0x18038f90);
        eax11 = reinterpret_cast<void**>(0x1803dbf0);
    } else {
        eax11 = eax9 - 1;
        if (eax11) {
            addr_0x18013641_9:
            *reinterpret_cast<signed char*>(&eax11) = 0;
            return *reinterpret_cast<int16_t*>(&eax11);
        } else {
            esi10 = reinterpret_cast<void**>(0x1803dbf0);
            eax11 = reinterpret_cast<void**>(0x18042560);
        }
    }
    do {
        if (*reinterpret_cast<void***>(esi10) == ecx4) 
            break;
        esi10 = esi10 + 0x2f0;
    } while (reinterpret_cast<unsigned char>(esi10) < reinterpret_cast<unsigned char>(eax11));
    goto addr_0x18013641_9;
    edi12 = a1;
    ecx13 = 0xbc;
    while (ecx13) {
        --ecx13;
        edi12->f0 = *reinterpret_cast<void***>(esi10);
        edi12 = reinterpret_cast<struct s130*>(reinterpret_cast<uint32_t>(edi12) + 4);
        esi10 = esi10 + 4;
    }
    *reinterpret_cast<signed char*>(&eax11) = 1;
    return *reinterpret_cast<int16_t*>(&eax11);
}

int16_t fun_180167f0(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, uint32_t a7, int32_t a8);

void fun_1800dd30(void** a1);

signed char fun_1800d090(void* a1, void** a2);

void fun_1800dd40(void** a1, uint32_t a2);

int32_t g18034714 = 0x1770;

struct s140 {
    int32_t f0;
    int32_t f4;
};

void fun_18013660(struct s131* ecx, struct s130* a2) {
    void* ebp3;
    struct s130* edi4;
    struct s131* v5;
    uint32_t edx6;
    int32_t v7;
    void** eax8;
    void** ecx9;
    void** edx10;
    void** v11;
    void** eax12;
    void** ebx13;
    void** v14;
    void** v15;
    void* ebx16;
    void* edx17;
    void* v18;
    int32_t ecx19;
    void* eax20;
    void** ecx21;
    int1_t less22;
    int32_t v23;
    void** v24;
    int32_t* edi25;
    void* eax26;
    int32_t ecx27;
    int32_t* esi28;
    void** eax29;
    void** eax30;
    int32_t v31;
    int32_t ecx32;
    int32_t* edi33;
    void** eax34;
    int32_t v35;
    void** eax36;
    void** ebx37;
    void** v38;
    void* esi39;
    signed char al40;
    int32_t v41;
    void** v42;
    uint32_t v43;
    int32_t v44;
    int32_t esi45;
    int32_t ecx46;
    int32_t eax47;
    uint32_t esi48;
    uint32_t v49;
    void* edx50;
    void* ebx51;
    uint32_t edi52;
    void* eax53;
    void* ecx54;
    void* eax55;
    int32_t edx56;
    void* eax57;
    int32_t esi58;
    struct s140* eax59;
    int32_t ecx60;
    int32_t edx61;

    ebp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    edi4 = a2;
    v5 = ecx;
    edx6 = ecx->f104;
    v7 = ecx->f108;
    eax8 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp3) + 0xfffffac8);
    *reinterpret_cast<int16_t*>(&eax8) = fun_180167f0(eax8, 36, 32, &ecx->f68, &edi4->f44, &edi4->f32, edx6, v7);
    ecx9 = eax8;
    edx10 = reinterpret_cast<void**>(1);
    v11 = ecx9;
    if (reinterpret_cast<signed char>(ecx9) >= reinterpret_cast<signed char>(1)) {
        do {
            eax12 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(edx10 + reinterpret_cast<unsigned char>(edx10) * 2) + 1);
            edx10 = eax12;
        } while (reinterpret_cast<signed char>(eax12) <= reinterpret_cast<signed char>(ecx9));
    }
    while (1) {
        ebx13 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(__intrinsic()) + (reinterpret_cast<uint32_t>(__intrinsic()) >> 31));
        v14 = ebx13;
        v15 = ebx13;
        if (reinterpret_cast<signed char>(ebx13) < reinterpret_cast<signed char>(ecx9)) {
            ebx16 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebx13 + reinterpret_cast<unsigned char>(ebx13) * 8) << 2);
            edx17 = ebx16;
            v18 = edx17;
            do {
                ecx19 = 9;
                eax20 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(edx17) - reinterpret_cast<uint32_t>(ebx16));
                while (ecx19) {
                    --ecx19;
                }
                ecx21 = v15;
                less22 = v23 < *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(ebp3) + reinterpret_cast<uint32_t>(eax20) - 0x518);
                v24 = ecx21;
                if (less22) {
                    do {
                        edi25 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(ebp3) + reinterpret_cast<uint32_t>(edx17) - 0x538);
                        eax26 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(edx17) - reinterpret_cast<uint32_t>(ebx16));
                        ecx27 = 9;
                        edx17 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(edx17) - reinterpret_cast<uint32_t>(ebx16));
                        esi28 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(ebp3) + reinterpret_cast<uint32_t>(eax26) - 0x538);
                        eax29 = v24;
                        while (ecx27) {
                            --ecx27;
                            *edi25 = *esi28;
                            ++edi25;
                            ++esi28;
                        }
                        eax30 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax29) - reinterpret_cast<unsigned char>(v14));
                        v24 = eax30;
                    } while (reinterpret_cast<signed char>(eax30) >= reinterpret_cast<signed char>(v14) && v31 < *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(ebp3) + (reinterpret_cast<uint32_t>(edx17) - reinterpret_cast<uint32_t>(ebx16)) - 0x518));
                    ecx21 = v24;
                    edx17 = v18;
                }
                ecx32 = 9;
                edx17 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(edx17) + 36);
                edi33 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(ebp3) + reinterpret_cast<uint32_t>(ecx21 + reinterpret_cast<unsigned char>(ecx21) * 8) * 4 - 0x538);
                eax34 = v15;
                while (ecx32) {
                    --ecx32;
                    *edi33 = v35;
                    ++edi33;
                }
                ecx9 = v11;
                eax36 = eax34 + 1;
                v15 = eax36;
                v18 = edx17;
            } while (reinterpret_cast<signed char>(eax36) < reinterpret_cast<signed char>(ecx9));
            ebx13 = v14;
            edi4 = a2;
        }
        if (reinterpret_cast<signed char>(ebx13) <= reinterpret_cast<signed char>(1)) 
            break;
    }
    __asm__("fld dword [esi+0x4c]");
    __asm__("fmul dword [esi+0x44]");
    __asm__("fstp dword [ebp-0xc]");
    __asm__("fld dword [ebp-0xc]");
    __asm__("fsqrt ");
    __asm__("fstp dword [ebp-0x4]");
    __asm__("fld dword [ebp-0x4]");
    __asm__("fstp dword [esp]");
    fun_1800dd30(ecx9);
    __asm__("fdiv dword [edi+0x8]");
    __asm__("fstp dword [esp]");
    fun_1800de70(ecx9, 0x3a83126f, ecx9);
    ebx37 = reinterpret_cast<void**>(0);
    __asm__("fstp dword [ebp-0x4]");
    edi4->f64 = reinterpret_cast<void**>(0);
    v38 = reinterpret_cast<void**>(0);
    if (reinterpret_cast<signed char>(v11) > reinterpret_cast<signed char>(0)) {
        esi39 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(ebp3) - 0x534);
        do {
            if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(ebx37) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(ebx37 == 0) || (ecx9 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esi39) + 0xffffffdc), al40 = fun_1800d090(esi39, ecx9), al40 == 0)) {
                *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(edi4) + reinterpret_cast<uint32_t>(edi4->f64 + reinterpret_cast<unsigned char>(edi4->f64) * 2) * 4 + 68) = v41;
                fun_1800dd30(v42);
                __asm__("fmul dword [0x180348f8]");
                ecx9 = v15;
                __asm__("fstp dword [ebx+0x4]");
                fun_1800dd40(ecx9, v43);
                __asm__("fld dword [ebp-0x14]");
                __asm__("fdiv dword [esi+0x18]");
                __asm__("fmulp st1, st0");
                __asm__("fst dword [ebx+0x8]");
                ebx37 = v38;
                __asm__("fstp dword [ebp-0x18]");
                edi4->f64 = edi4->f64 + 1;
            } else {
                __asm__("fld dword [ebp-0x18]");
                __asm__("fadd dword [edi+edx*4+0x40]");
                __asm__("fstp dword [eax]");
            }
            ++ebx37;
            esi39 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esi39) + 36);
            v38 = ebx37;
        } while (reinterpret_cast<signed char>(ebx37) < reinterpret_cast<signed char>(v11));
    }
    __asm__("fild dword [0x18034714]");
    __asm__("fmul dword [edi+0xc]");
    __asm__("fstp dword [ebp-0x14]");
    __asm__("fld dword [ebp-0x14]");
    __asm__("fistp dword [ebp-0x8]");
    edi4->f500 = v5;
    __asm__("fld dword [esi+0x44]");
    __asm__("fadd st0, st0");
    __asm__("fstp dword [esp]");
    fun_1800dd30(ecx9);
    __asm__("fmul dword [0x180348f8]");
    __asm__("fstp dword [ebp-0x28]");
    __asm__("fld dword [esi+0x48]");
    __asm__("fadd st0, st0");
    __asm__("fstp dword [esp]");
    fun_1800dd30(ecx9);
    __asm__("fmul dword [0x180348f8]");
    __asm__("fstp dword [ebp-0x24]");
    __asm__("fld dword [esi+0x4c]");
    __asm__("fadd st0, st0");
    __asm__("fstp dword [esp]");
    fun_1800dd30(ecx9);
    __asm__("fmul dword [0x180348f8]");
    v44 = 0;
    do {
        __asm__("fild dword [ebp-0x4]");
        esi45 = 0;
        __asm__("fdiv dword [ebp-0x28]");
        __asm__("fld st0");
        __asm__("fmulp st1, st0");
        do {
            __asm__("fild dword [ebp-0x8]");
            ecx46 = 0;
            __asm__("fdiv dword [ebp-0x24]");
            __asm__("fld st0");
            __asm__("fmulp st1, st0");
            __asm__("fadd st0, st1");
            do {
                __asm__("fild dword [ebp-0x8]");
                ++ecx46;
                __asm__("fdiv st0, st3");
                __asm__("fld st0");
                __asm__("fmul st0, st1");
                __asm__("fadd st0, st2");
                __asm__("fstp dword [eax-0x4]");
                __asm__("fstp st0");
            } while (ecx46 < 3);
            ++esi45;
            __asm__("fstp st0");
        } while (esi45 < 3);
        eax47 = v44 + 1;
        v44 = eax47;
        __asm__("fstp st0");
    } while (eax47 < 3);
    __asm__("fstp st0");
    esi48 = 1;
    do {
        esi48 = esi48 + esi48 * 2 + 1;
    } while (reinterpret_cast<int32_t>(esi48) <= reinterpret_cast<int32_t>(27));
    do {
        esi48 = __intrinsic() + (__intrinsic() >> 31);
        v49 = esi48;
        if (reinterpret_cast<int32_t>(esi48) < reinterpret_cast<int32_t>(27)) {
            edx50 = reinterpret_cast<void*>(esi48 * 4);
            ebx51 = edx50;
            do {
                __asm__("fld dword [ebp+ebx+0xffffff48]");
                edi52 = v49;
                eax53 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebx51) - reinterpret_cast<uint32_t>(edx50));
                __asm__("fcom dword [ebp+eax+0xffffff48]");
                __asm__("fnstsw ax");
                if (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax53) + 1) & 1) {
                    ecx54 = ebx51;
                    do {
                        edi52 = edi52 - esi48;
                        *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(ebp3) + reinterpret_cast<uint32_t>(ecx54) + 0xffffff48) = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(ebp3) + (reinterpret_cast<uint32_t>(ecx54) - reinterpret_cast<uint32_t>(edx50)) + 0xffffff48);
                        ecx54 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx54) - reinterpret_cast<uint32_t>(edx50));
                        if (reinterpret_cast<int32_t>(edi52) < reinterpret_cast<int32_t>(esi48)) 
                            break;
                        eax55 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx54) - reinterpret_cast<uint32_t>(edx50));
                        __asm__("fcom dword [ebp+eax+0xffffff48]");
                        __asm__("fnstsw ax");
                    } while (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax55) + 1) & 1);
                }
                __asm__("fstp dword [ebp+edi*4+0xffffff48]");
                ebx51 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebx51) + 4);
                ++v49;
            } while (reinterpret_cast<int32_t>(ebx51) < reinterpret_cast<int32_t>(0x6c));
            edi4 = a2;
        }
    } while (reinterpret_cast<int32_t>(esi48) > reinterpret_cast<int32_t>(1));
    edx56 = 6;
    edi4->f504 = 6;
    eax57 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(edi4) + 0x200);
    do {
        __asm__("fld dword [ebp+0x8]");
        __asm__("fsqrt ");
        __asm__("fstp dword [ebp-0x14]");
        __asm__("fld dword [ebp-0x14]");
        __asm__("fdivr dword [0x18034238]");
        eax57 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(eax57) + 12);
        --edx56;
        __asm__("fstp dword [eax-0x10]");
        esi58 = g18034714;
        *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(eax57) - 12) = 100;
        *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(eax57) - 8) = esi58;
    } while (edx56);
    eax59 = reinterpret_cast<struct s140*>(&edi4->f584);
    ecx60 = 14;
    do {
        *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(eax59) - 4) = 0;
        edx61 = g18034714;
        eax59->f4 = edx61;
        eax59->f0 = 100;
        eax59 = reinterpret_cast<struct s140*>(reinterpret_cast<uint32_t>(eax59) + 12);
        --ecx60;
    } while (ecx60);
    edi4->f748 = 0x41a00000;
    return;
}

int16_t fun_18012bf0(void** ecx, void** a2) {
    unsigned char ah3;
    void** eax4;

    __asm__("fld dword [ecx+0x40]");
    __asm__("fcomp dword [esp+0x4]");
    __asm__("fnstsw ax");
    if (!(ah3 & 64)) {
        eax4 = a2;
        *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(1);
        *reinterpret_cast<void***>(ecx + 64) = eax4;
    }
    return *reinterpret_cast<int16_t*>(&eax4);
}

int16_t fun_18012bc0(void** ecx, void** a2) {
    unsigned char ah3;
    void** eax4;

    __asm__("fld dword [ecx+0x14]");
    __asm__("fcomp dword [esp+0x4]");
    __asm__("fnstsw ax");
    if (!(ah3 & 64)) {
        __asm__("fld dword [esp+0x4]");
        __asm__("fmul dword [ecx+0x18]");
        eax4 = a2;
        *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(1);
        *reinterpret_cast<void***>(ecx + 20) = eax4;
        __asm__("fstp dword [ecx+0x1c]");
    }
    return *reinterpret_cast<int16_t*>(&eax4);
}

int16_t fun_18012c10(void** ecx, void** a2) {
    int16_t ax3;

    *reinterpret_cast<void***>(&ax3) = a2;
    if (*reinterpret_cast<void***>(ecx + 53) != *reinterpret_cast<void***>(&ax3) && (*reinterpret_cast<void***>(ecx + 53) = *reinterpret_cast<void***>(&ax3), *reinterpret_cast<void***>(&ax3) = *reinterpret_cast<void***>(ecx + 52), !!*reinterpret_cast<void***>(&ax3))) {
        *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(1);
    }
    return ax3;
}

void fun_1800dd30(void** a1) {
    __asm__("fld dword [esp+0x4]");
    __asm__("fdiv dword [0x18034718]");
    return;
}

signed char fun_1800d090(void* a1, void** a2) {
    unsigned char ah3;
    unsigned char ah4;
    unsigned char ah5;

    __asm__("fld dword [ecx]");
    __asm__("fcomp dword [edx]");
    __asm__("fnstsw ax");
    if (!(ah3 & 64) || (!(ah4 & 64) || !(ah5 & 64))) {
        return 0;
    } else {
        return 1;
    }
}

struct s141 {
    signed char[4] pad4;
    int32_t f4;
    int32_t f8;
};

void fun_18013ba0(int32_t a1, int32_t a2, struct s118* a3, int32_t* a4, int32_t* a5, int32_t* a6) {
    struct s118* edi7;
    int32_t* edx8;
    int32_t* ebx9;
    int32_t* eax10;
    int32_t ecx11;
    struct s141* ecx12;
    int32_t ebp13;

    edi7 = a3;
    if (edi7->f64) {
        edx8 = a6;
        ebx9 = a5;
        eax10 = a4;
        do {
            ecx11 = *eax10 + *eax10 * 2;
            ecx12 = reinterpret_cast<struct s141*>(reinterpret_cast<int32_t>(edi7) + ecx11 * 4 + 68);
            if (*reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi7) + ecx11 * 4 + 68) < a1) 
                break;
            if (*reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi7) + ecx11 * 4 + 68) > a2) 
                break;
            ebx9[*edx8 * 2] = ecx12->f4;
            (ebx9 + *edx8 * 2)[1] = ecx12->f8;
            *edx8 = *edx8 + 1;
            ebp13 = *eax10 + 1;
            *eax10 = ebp13;
            if (ebp13 == edi7->f64) {
                *eax10 = 0;
            }
        } while (*edx8 != edi7->f64);
    }
    return;
}

void fun_18013c10(void** ecx, void** a2) {
    void** v3;
    void** edx4;
    void** eax5;
    void** v6;
    void** v7;
    void** v8;
    void** eax9;
    void** ebx10;
    void** edi11;
    void** esi12;
    void** ebx13;
    void** ecx14;

    v3 = *reinterpret_cast<void***>(ecx + 8);
    fun_18012bb0(a2, v3);
    edx4 = *reinterpret_cast<void***>(a2);
    *reinterpret_cast<void***>(edx4 + 32)(a2);
    eax5 = *reinterpret_cast<void***>(a2);
    *reinterpret_cast<void***>(eax5 + 36)(a2);
    v6 = *reinterpret_cast<void***>(ecx + 52);
    fun_18012bf0(a2, v6);
    v7 = *reinterpret_cast<void***>(ecx + 0x320);
    *reinterpret_cast<int16_t*>(&eax5) = fun_18012bc0(a2, v7);
    eax5 = *reinterpret_cast<void***>(ecx + 0x324);
    v8 = eax5;
    fun_18012c10(a2, v8);
    eax9 = *reinterpret_cast<void***>(ecx + 36);
    ebx10 = ecx + 24;
    if (!eax9) {
        eax9 = fun_1802b2bb(a2, 12, 0x3f800000, 0x3f800000, edi11, esi12, ebx13, __return_address(), a2);
    } else {
        *reinterpret_cast<void***>(ecx + 36) = *reinterpret_cast<void***>(eax9);
    }
    if (eax9) {
        ecx14 = eax9 + 8;
        if (ecx14) {
            *reinterpret_cast<void***>(ecx14) = a2;
        }
        *reinterpret_cast<void***>(eax9) = ebx10;
        *reinterpret_cast<void***>(eax9 + 4) = *reinterpret_cast<void***>(ebx10 + 4);
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx10 + 4)) = eax9;
        *reinterpret_cast<void***>(ebx10 + 4) = eax9;
        *reinterpret_cast<void***>(ecx + 20) = *reinterpret_cast<void***>(ecx + 20) + 1;
    }
    goto esi12;
}

void fun_18012fd0(void** ecx) {
    void** eax2;

    if (*reinterpret_cast<void***>(ecx + 0x80)) {
        *reinterpret_cast<void***>(ecx + 0x80) = reinterpret_cast<void**>(0);
        return;
    } else {
        if (!*reinterpret_cast<void***>(ecx + 0x7d)) {
            eax2 = *reinterpret_cast<void***>(ecx);
            *reinterpret_cast<void***>(eax2 + 48)();
        }
        *reinterpret_cast<void***>(ecx + 0x7d) = reinterpret_cast<void**>(1);
        return;
    }
}

void fun_18013d40(void** ecx, void** a2) {
    if (a2) {
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x6c)) = a2;
        *reinterpret_cast<void***>(ecx + 0x6c) = *reinterpret_cast<void***>(ecx + 0x6c) + 4;
    }
    return;
}

void fun_18013f80(void** ecx, int32_t a2) {
    void** ecx3;
    void** eax4;
    void** eax5;
    int32_t esi6;

    ecx3 = *reinterpret_cast<void***>(ecx + 4);
    eax4 = *reinterpret_cast<void***>(ecx3);
    eax5 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax4 + 88)());
    *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(ecx + (reinterpret_cast<int32_t>(__return_address()) + reinterpret_cast<int32_t>(__return_address()) * 2) * 8) + 0x84) = eax5;
    fun_18013d40(ecx, eax5);
    *reinterpret_cast<void***>(ecx + 0x70) = *reinterpret_cast<void***>(ecx + 0x70) + 1;
    goto esi6;
}

void fun_18013d60(void** ecx, void** a2) {
    void** esi3;
    void** edx4;
    void** eax5;
    void** edx6;

    esi3 = a2;
    if (!esi3 || (edx4 = *reinterpret_cast<void***>(ecx + 0x6c), eax5 = ecx + 24, eax5 == edx4)) {
        addr_0x18013d90_2:
        return;
    } else {
        do {
            if (*reinterpret_cast<void***>(eax5) == esi3) 
                break;
            eax5 = eax5 + 4;
        } while (eax5 != edx4);
        goto addr_0x18013d7e_5;
    }
    edx6 = edx4 + 0xfffffffc;
    *reinterpret_cast<void***>(ecx + 0x6c) = edx6;
    if (eax5 != edx6) {
        *reinterpret_cast<void***>(eax5) = *reinterpret_cast<void***>(edx6);
        goto addr_0x18013d90_2;
    }
    addr_0x18013d7e_5:
    return;
}

int16_t fun_1800d9f0(void** a1, void** a2) {
    int16_t ax3;
    void** eax4;

    if (a1) {
        __asm__("cdq ");
        ax3 = fun_1800d9f0(reinterpret_cast<signed char>(a2) % reinterpret_cast<signed char>(a1), a1);
        return ax3;
    } else {
        eax4 = a2;
        return *reinterpret_cast<int16_t*>(&eax4);
    }
}

int16_t fun_18016c30() {
    unsigned char ah1;
    void* eax2;
    unsigned char ah3;
    int16_t ax4;

    __asm__("fld qword [ebp+0x8]");
    __asm__("fdiv qword [ebp+0x10]");
    __asm__("fcom qword [0x18034b08]");
    __asm__("fnstsw ax");
    if (ah1 & 1) {
        __asm__("fld qword [0x180346d0]");
        __asm__("fmul st0, st1");
        __asm__("fstp qword [ebp+0x8]");
        __asm__("fstp st0");
        __asm__("fld qword [ebp+0x8]");
        __asm__("fptan ");
        __asm__("fstp st0");
        __asm__("fstp qword [ebp+0x10]");
        __asm__("fld qword [ebp+0x10]");
        __asm__("fmul qword [0x18034b00]");
        __asm__("fst qword [ebp+0x8]");
        __asm__("fcomp qword [0x180346d0]");
        __asm__("fnstsw ax");
        eax2 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 8);
        if (!(ah3 & 65)) {
            eax2 = reinterpret_cast<void*>(0x180346d0);
        }
        __asm__("fld qword [eax]");
        return *reinterpret_cast<int16_t*>(&eax2);
    } else {
        __asm__("fstp st0");
        __asm__("fld qword [0x180346d0]");
        return ax4;
    }
}

struct s143 {
    signed char[24] pad24;
    int32_t f24;
};

struct s144 {
    signed char[72] pad72;
    int32_t f72;
};

struct s145 {
    signed char[28] pad28;
    int32_t f28;
    signed char[8] pad40;
    int32_t f40;
};

struct s146 {
    signed char[28] pad28;
    int32_t f28;
    signed char[4] pad36;
    int32_t f36;
};

struct s142 {
    struct s143* f0;
    struct s144** f4;
    signed char[4] pad12;
    signed char f12;
    signed char[3] pad16;
    int32_t f16;
    signed char[112] pad132;
    struct s145** f132;
    signed char[484] pad620;
    int32_t f620;
    signed char[12] pad636;
    struct s146** f636;
};

void fun_180140c0(struct s142* ecx, int32_t a2);

void fun_18014340(struct s142* ecx) {
    int32_t v2;
    int32_t ebx3;
    struct s142* esi4;
    int32_t edi5;
    struct s145*** ebx6;
    struct s145** ecx7;
    int32_t v8;
    struct s145* eax9;
    struct s143* eax10;
    struct s146** ecx11;
    struct s146* edx12;

    v2 = ebx3;
    esi4 = ecx;
    edi5 = 0;
    ebx6 = &esi4->f132;
    do {
        if (*ebx6) {
            fun_180140c0(esi4, edi5);
            ecx7 = *ebx6;
            v8 = esi4->f16;
            eax9 = *ecx7;
            eax9->f40(v8);
        }
        ++edi5;
        ebx6 = ebx6 + 6;
    } while (edi5 < 20);
    __asm__("fld dword [esi+0x10]");
    __asm__("fcomp dword [0x1803422c]");
    __asm__("fnstsw ax");
    if (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax9) + 1) & 65) {
        eax10 = esi4->f0;
        eax10->f24(esi4);
    }
    ecx11 = esi4->f636;
    edx12 = *ecx11;
    edx12->f36();
    esi4->f12 = 0;
    goto v2;
}

struct s147 {
    void** f0;
    signed char[115] pad116;
    int32_t f116;
    signed char[12] pad132;
    int32_t** f132;
    int32_t** f136;
};

void fun_18013fb0(void** ecx, int32_t a2) {
    int32_t eax3;
    struct s147* edi4;
    void** v5;
    int32_t* edx6;
    int32_t* eax7;

    eax3 = a2 + a2 * 2;
    edi4 = reinterpret_cast<struct s147*>(ecx + eax3 * 8);
    if (*reinterpret_cast<void***>(reinterpret_cast<uint32_t>(ecx + eax3 * 8) + 0x84)) {
        v5 = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(ecx + eax3 * 8) + 0x84);
        fun_18013d60(ecx, v5);
        *reinterpret_cast<void***>(ecx + 0x70) = *reinterpret_cast<void***>(ecx + 0x70) - 1;
        if (edi4->f132) {
            edx6 = *edi4->f132;
            *edx6(1);
        }
        edi4->f132 = reinterpret_cast<int32_t**>(0);
        if (edi4->f136) {
            eax7 = *edi4->f136;
            *eax7(1);
        }
        edi4->f136 = reinterpret_cast<int32_t**>(0);
        edi4->f116 = 0;
    }
    return;
}

struct s149 {
    signed char[32] pad32;
    int32_t f32;
};

struct s148 {
    void** f0;
    signed char[15] pad16;
    struct s149** f16;
};

struct s150 {
    void** f0;
    signed char[79] pad80;
    void** f80;
};

void fun_18014020(void** ecx, int32_t a2) {
    void** v3;
    struct s148* v4;
    void** eax5;
    void** v6;
    void** ebx7;
    int32_t esi8;
    struct s150* edi9;
    void** eax10;
    struct s149** ecx11;
    struct s149* edx12;

    v3 = ecx;
    __asm__("fld dword [ecx+eax*8+0x78]");
    __asm__("fimul dword [ecx+0x8]");
    v4 = reinterpret_cast<struct s148*>(reinterpret_cast<uint32_t>(ecx + (a2 + a2 * 2) * 8) + 0x74);
    __asm__("fmul dword [0x18034544]");
    __asm__("fstp dword [ebp-0x4]");
    __asm__("fld dword [ebp-0x4]");
    __asm__("fistp dword [ebp-0x8]");
    eax5 = v6;
    ebx7 = eax5;
    if (*reinterpret_cast<unsigned char*>(&eax5) & 1) {
        while (1) {
            esi8 = 0;
            edi9 = reinterpret_cast<struct s150*>(v3 + 0x74);
            while (a2 == esi8 || ((eax10 = edi9->f0, eax10 == 0) || (*reinterpret_cast<int16_t*>(&eax10) = fun_1800d9f0(eax10, ebx7), reinterpret_cast<signed char>(eax10) <= reinterpret_cast<signed char>(1)))) {
                ++esi8;
                edi9 = reinterpret_cast<struct s150*>(reinterpret_cast<uint32_t>(edi9) + 24);
                if (esi8 >= 20) 
                    goto addr_0x18014090_5;
            }
            ebx7 = ebx7 + 2;
            addr_0x1801405e_8:
        }
        addr_0x18014090_5:
        __asm__("fild dword [ebp-0x4]");
        ecx11 = v4->f16;
        v4->f0 = ebx7;
        __asm__("fmul dword [0x180348f8]");
        edx12 = *ecx11;
        __asm__("fidiv dword [eax+0x8]");
        __asm__("fstp dword [esp]");
        edx12->f32();
        return;
    } else {
        ebx7 = eax5 + 1;
        goto addr_0x1801405e_8;
    }
}

struct s152 {
    signed char[36] pad36;
    int32_t f36;
};

struct s153 {
    signed char[32] pad32;
    int32_t f32;
};

struct s151 {
    signed char[16] pad16;
    struct s152** f16;
    struct s153** f20;
};

void** g180348fc = reinterpret_cast<void**>(0x6f);

int16_t fun_18016c90(int32_t a1, int32_t a2);

void fun_180140c0(struct s142* ecx, int32_t a2) {
    void* esp3;
    int32_t eax4;
    void** ecx5;
    struct s151* edi6;
    void** edx7;
    void** eax8;
    void** v9;
    int16_t ax10;
    struct s144* edx11;
    struct s153** eax12;
    struct s153* eax13;
    struct s152** ecx14;
    struct s152* edx15;

    esp3 = reinterpret_cast<void*>((reinterpret_cast<uint32_t>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4) & 0xfffffff8) - 56 - 4 - 4);
    eax4 = a2 + a2 * 2;
    ecx5 = *reinterpret_cast<void***>(reinterpret_cast<int32_t>(ecx) + eax4 * 8 + 0x88);
    edi6 = reinterpret_cast<struct s151*>(reinterpret_cast<int32_t>(ecx) + eax4 * 8 + 0x74);
    if (ecx5) {
        edx7 = *reinterpret_cast<void***>(ecx5);
        *reinterpret_cast<void***>(edx7)(1);
        esp3 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp3) - 4 - 4 + 4);
    }
    edi6->f20 = reinterpret_cast<struct s153**>(0);
    __asm__("fld dword [esi+0x10]");
    __asm__("fcomp dword [0x1803489c]");
    __asm__("fnstsw ax");
    if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax4) + 1) & 1)) {
        __asm__("fld dword [edi+0x4]");
        __asm__("fmul dword [0x18034544]");
        eax8 = g180348fc;
        __asm__("fdiv dword [esi+0x10]");
        __asm__("fstp dword [esp]");
        fun_1800de70(ecx5, eax8, ecx5);
        __asm__("fstp dword [esp+0xc]");
        __asm__("fld dword [0x18034238]");
        __asm__("fdiv dword [esi+0x14]");
        __asm__("fstp dword [esp]");
        fun_1800de70(v9, v9, ecx5);
        __asm__("fstp st0");
        __asm__("fild dword [esi+0x8]");
        __asm__("fstp qword [esp]");
        __asm__("fld dword [edi+0xc]");
        __asm__("fstp qword [esp]");
        ax10 = fun_18016c30();
        __asm__("fstp qword [esp+0x18]");
        __asm__("fld dword [edi+0x8]");
        __asm__("fmul dword [esi+0x14]");
        __asm__("fst dword [esp+0x10]");
        __asm__("fcomp dword [0x18034950]");
        __asm__("fnstsw ax");
        if (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&ax10) + 1) & 1) {
        }
        __asm__("fild dword [esi+0x8]");
        __asm__("fstp qword [esp]");
        __asm__("fld dword [eax]");
        __asm__("fstp qword [esp]");
        fun_18016c30();
        __asm__("fld st0");
        __asm__("fmul qword [esp+0x18]");
        __asm__("fstp qword [esp]");
        __asm__("fld st0");
        __asm__("fadd qword [esp+0x2c]");
        __asm__("fstp qword [esp]");
        __asm__("fld qword [esp+0x2c]");
        __asm__("fdiv st0, st1");
        __asm__("fadd qword [0x180346b0]");
        __asm__("fdivr qword [0x180346b0]");
        __asm__("fdivr st0, st1");
        __asm__("fstp qword [esp]");
        __asm__("fstp st0");
        fun_18016c90(0, 0);
        __asm__("fld dword [esp+0x24]");
        __asm__("fmul dword [esp+0xc]");
        __asm__("fstp dword [esp+0x24]");
        edx11 = *ecx->f4;
        eax12 = reinterpret_cast<struct s153**>(edx11->f72());
        eax13 = *eax12;
        eax13->f32(eax12, reinterpret_cast<uint32_t>(esp3) - 4 - 4 - 4 + 8 + 4 - 4 - 4 - 4 + 8 + 4 - 8 - 8 - 4 + 16 + 4 - 8 - 8 - 4 + 16 + 4 - 4 - 8 - 8 - 4 - 4 - 4 - 4 - 8 - 4 - 4 - 4 + 52 + 4 - 4 + 4 + 36);
        edi6->f20 = eax12;
    }
    ecx14 = edi6->f16;
    edx15 = *ecx14;
    edx15->f36();
    return;
}

struct s155 {
    signed char[32] pad32;
    int32_t f32;
};

struct s154 {
    signed char[20] pad20;
    struct s155** f20;
    int32_t f24;
};

int16_t fun_18019710(struct s154* ecx, int32_t a2) {
    unsigned char ah3;
    struct s155** ecx4;
    int32_t v5;
    struct s155* eax6;
    struct s154* eax7;

    __asm__("fld dword [esp+0x4]");
    __asm__("fcomp dword [0x18034238]");
    __asm__("fnstsw ax");
    if (!(ah3 & 64)) {
        ecx4 = ecx->f20;
        v5 = ecx->f24;
        eax6 = *ecx4;
        eax6->f32(ecx, a2, v5);
    }
    eax7 = ecx;
    return *reinterpret_cast<int16_t*>(&eax7);
}

void fun_18013cf0(void** ecx, void** a2, void** a3);

int16_t fun_18013e80(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85, void** a86, void** a87, void** a88, void** a89, void** a90, void** a91, void** a92, void** a93, void** a94, void** a95, void** a96) {
    void** v97;
    void** ebx98;
    void** esi99;
    void** edi100;
    void** ecx101;
    void** edx102;
    void** eax103;
    void** ecx104;
    void** edi105;
    void** esi106;
    void** ebp107;
    void*** eax108;
    int32_t ecx109;
    void** v110;
    int32_t edi111;

    v97 = ebx98;
    esi99 = ecx;
    fun_18013cf0(ecx, a2, a3);
    edi100 = esi99 + 0x254;
    *reinterpret_cast<void***>(esi99 + 0x70) = reinterpret_cast<void**>(0);
    fun_18019180(edi100);
    ecx101 = *reinterpret_cast<void***>(esi99 + 4);
    *reinterpret_cast<void***>(esi99) = reinterpret_cast<void**>(0x18034928);
    edx102 = *reinterpret_cast<void***>(ecx101);
    eax103 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx102 + 92)());
    ecx104 = *reinterpret_cast<void***>(esi99 + 4);
    *reinterpret_cast<void***>(esi99 + 0x27c) = eax103;
    fun_180190d0(ecx104, edi100, a3, a3, edi105, esi106, ebp107, v97, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96);
    eax108 = reinterpret_cast<void***>(esi99 + 0x78);
    ecx109 = 20;
    do {
        *(eax108 - 4) = reinterpret_cast<void**>(0);
        *eax108 = reinterpret_cast<void**>(0);
        __asm__("fild dword [0x18034714]");
        eax108 = eax108 + 24;
        --ecx109;
        __asm__("fstp dword [eax-0x14]");
        *reinterpret_cast<int32_t*>(eax108 - 16) = 0x42c80000;
        *(eax108 - 12) = reinterpret_cast<void**>(0);
        *(eax108 - 8) = reinterpret_cast<void**>(0);
    } while (ecx109);
    v110 = *reinterpret_cast<void***>(esi99 + 0x27c);
    fun_18013d40(esi99, v110);
    edi111 = 0;
    do {
        fun_18013f80(esi99, edi111);
        ++edi111;
    } while (edi111 < 6);
    goto v97;
}

void fun_18016db0(void** ecx) {
    void** ecx2;
    void** eax3;

    ecx2 = *reinterpret_cast<void***>(ecx + 0xb0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034b24);
    if (ecx2) {
        eax3 = *reinterpret_cast<void***>(ecx2);
        *reinterpret_cast<void***>(eax3)(1);
    }
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    return;
}

void fun_18016de0(void** ecx, void** a2, void** a3) {
    int32_t v4;
    int32_t ebp5;
    void** v6;
    void** ebx7;
    void** v8;
    void** esi9;
    void** esi10;
    void** v11;
    void** edi12;
    void** eax13;
    void** eax14;
    void** edi15;
    int32_t ebx16;
    void** v17;
    void** ecx18;
    void** edx19;

    v4 = ebp5;
    v6 = ebx7;
    v8 = esi9;
    esi10 = ecx;
    v11 = edi12;
    eax13 = *reinterpret_cast<void***>(a2);
    eax14 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax13 + 4)());
    *reinterpret_cast<void***>(esi10 + 0xb0) = eax14;
    edi15 = esi10 + 16;
    ebx16 = 4;
    do {
        v17 = *reinterpret_cast<void***>(esi10 + 0xb0);
        fun_18018d40(edi15, v17, v11, v8, v6);
        edi15 = edi15 + 40;
        --ebx16;
    } while (ebx16);
    __asm__("fild dword [ebp+0xc]");
    __asm__("fmul dword [0x18034b20]");
    __asm__("fmul dword [0x18034544]");
    __asm__("fstp dword [ebp+0x8]");
    __asm__("fld dword [ebp+0x8]");
    __asm__("fistp dword [ebp+0xc]");
    ecx18 = *reinterpret_cast<void***>(esi10 + 0xb0);
    *reinterpret_cast<void***>(esi10 + 8) = a3;
    edx19 = *reinterpret_cast<void***>(ecx18);
    *reinterpret_cast<void***>(edx19 + 4)();
    goto v4;
}

void fun_18018f10(void** ecx, void** a2) {
    fun_1801d290(ecx, a2);
    fun_1801d290(ecx + 20, a2 + 40);
    return;
}

void fun_18018f30(void** ecx, void** a2, void** a3);

void fun_180150e0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9) {
    void** edi10;
    void** al11;
    void** ecx12;
    void** v13;
    void** edi14;
    void** esi15;

    if (!*reinterpret_cast<unsigned char*>(ecx + 13)) {
        edi10 = *reinterpret_cast<void***>(ecx + 8);
    } else {
        edi10 = reinterpret_cast<void**>(0);
    }
    al11 = *reinterpret_cast<void***>(ecx + 12);
    if (!al11) {
        ecx12 = ecx + 16;
        fun_18018f30(ecx12, 0, edi10);
        v13 = *reinterpret_cast<void***>(ecx + 0x7c);
        if (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 4)) & 8) {
            fun_1800cf10(ecx12, 0xffffff38, edi14, esi15, v13, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
            __asm__("fmul dword [esp+0x8]");
            __asm__("fstp dword [esp+0x8]");
        }
        fun_18018ba0(ecx + 56, v13, edi10);
        fun_18018ba0(ecx + 96, v13, edi10);
        return;
    } else {
        fun_18018f30(ecx + 16, 0x3f800000, edi10);
        fun_18018ba0(ecx + 56, 0, edi10);
        fun_18018ba0(ecx + 96, 0, edi10);
        return;
    }
}

void fun_180151e0(void** ecx) {
    void** eax2;

    eax2 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x74));
    *reinterpret_cast<void***>(eax2 + 36)();
    *reinterpret_cast<unsigned char*>(ecx + 13) = 1;
    return;
}

void fun_18018f30(void** ecx, void** a2, void** a3) {
    fun_18018ba0(ecx, a2, a3);
    fun_18018ba0(ecx + 20, a2, a3);
    return;
}

int16_t fun_18017020(void** ecx, void** a2, void** a3, void** a4) {
    int32_t v5;
    int32_t ebx6;
    void** ebx7;
    void** ebp8;
    uint32_t esi9;
    uint32_t edi10;
    int32_t* ecx11;
    void** eax12;
    uint32_t edx13;
    uint32_t edx14;
    int32_t edx15;
    void** edx16;

    v5 = ebx6;
    ebx7 = a3;
    ebp8 = a3;
    esi9 = 0xffffffff;
    edi10 = 0;
    ecx11 = reinterpret_cast<int32_t*>(0x18043110);
    do {
        __asm__("cdq ");
        eax12 = reinterpret_cast<void**>((*ecx11 - reinterpret_cast<unsigned char>(ebp8) ^ edx13) - edx14);
        if (!eax12) 
            break;
        if (esi9 == 0xffffffff || reinterpret_cast<signed char>(eax12) < reinterpret_cast<signed char>(ebx7)) {
            esi9 = edi10;
            ebx7 = eax12;
        }
        ecx11 = ecx11 + 3;
        ++edi10;
    } while (reinterpret_cast<uint32_t>(ecx11) < 0x1804317c);
    goto addr_0x1801705a_6;
    esi9 = edi10;
    addr_0x1801705e_8:
    __asm__("cdq ");
    *reinterpret_cast<void***>(a4) = reinterpret_cast<void**>(*reinterpret_cast<int32_t*>((esi9 + esi9 * 2 << 2) + 0x18043118) - 1 - edx15 >> 1);
    edx16 = *reinterpret_cast<void***>(a2);
    *reinterpret_cast<void***>(edx16 + 80)();
    goto v5;
    addr_0x1801705a_6:
    goto addr_0x1801705e_8;
}

int16_t fun_18014f70(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** v8;
    void** v9;
    void** ebx10;
    void** v11;
    void** ebp12;
    void** v13;
    void** esi14;
    void** esi15;
    void** v16;
    void** edi17;
    int32_t ebp18;
    void** ebx19;
    void** edi20;
    void** edi21;
    void** ebp22;
    void** edx23;
    void** eax24;
    void** ecx25;
    void** edx26;
    void** v27;
    void** eax28;

    v8 = reinterpret_cast<void**>(__return_address());
    v9 = ebx10;
    v11 = ebp12;
    v13 = esi14;
    esi15 = ecx;
    v16 = edi17;
    ebp18 = 2;
    ebx19 = esi15 + 16;
    *reinterpret_cast<void***>(esi15) = reinterpret_cast<void**>(0x18034a1c);
    *reinterpret_cast<void***>(esi15 + 4) = a3;
    *reinterpret_cast<void***>(esi15 + 8) = reinterpret_cast<void**>(0x400);
    *reinterpret_cast<void***>(esi15 + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<unsigned char*>(esi15 + 13) = 1;
    edi20 = ebx19;
    do {
        fun_18018b80(edi20);
        edi20 = edi20 + 20;
        --ebp18;
    } while (ebp18);
    edi21 = esi15 + 56;
    fun_18018d20(edi21);
    ebp22 = esi15 + 96;
    fun_18018b80(ebp22);
    *reinterpret_cast<void***>(esi15 + 0x78) = a7;
    *reinterpret_cast<void***>(esi15 + 0x74) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi15 + 0x7c) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(esi15) = reinterpret_cast<void**>(0x180349f8);
    fun_18018f10(ebx19, a4);
    fun_1801d290(edi21, a5);
    fun_1801d290(ebp22, a6);
    edx23 = *reinterpret_cast<void***>(a2);
    eax24 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx23 + 4)());
    ecx25 = *reinterpret_cast<void***>(esi15 + 0x78);
    *reinterpret_cast<void***>(esi15 + 0x74) = eax24;
    edx26 = *reinterpret_cast<void***>(eax24);
    *reinterpret_cast<void***>(edx26 + 4)(eax24);
    v27 = *reinterpret_cast<void***>(esi15 + 0x74);
    fun_18018d40(edi21, v27, ecx25, v16, v13);
    eax28 = *reinterpret_cast<void***>(esi15 + 0x78);
    fun_18018d50(edi21, eax28, 0, ecx25, v16, v13);
    fun_180150e0(esi15, ecx25, v16, v13, v11, v9, v8, a2, a3);
    fun_180151e0(esi15);
    goto v9;
}

int16_t fun_18015200(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85, void** a86, void** a87, void** a88, void** a89, void** a90, void** a91) {
    void** ebx92;
    void** ecx93;
    void** edi94;
    void** esi95;
    void** ebx96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** ebp103;
    void** ecx104;
    void** eax105;
    void** v106;
    void** v107;
    void** v108;
    void** v109;
    void** v110;
    void** v111;
    void** edx112;
    void** v113;
    void** v114;
    void** v115;
    void** v116;
    void** v117;
    void** v118;
    void** edx119;
    void** eax120;
    void** v121;
    void** v122;
    void** v123;
    void** v124;
    void** v125;
    void** v126;
    void** eax127;
    void** ecx128;
    void** edx129;
    void** ecx130;
    void** edx131;
    void** ecx132;
    void** edx133;
    void** edx134;
    void** eax135;
    void** edx136;
    void** v137;
    void** v138;
    void** v139;
    void** v140;
    void** v141;
    void** v142;
    void** edx143;
    void** eax144;
    void** edx145;
    void** ecx146;
    void** edx147;
    void** eax148;
    void** eax149;

    ebx92 = ecx + 16;
    *reinterpret_cast<void***>(ecx + 8) = a6;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034978);
    *reinterpret_cast<void***>(ecx + 4) = a2;
    *reinterpret_cast<void***>(ecx + 12) = a3;
    fun_18019180(ebx92);
    fun_18019180(ecx + 56);
    ecx93 = *reinterpret_cast<void***>(ecx + 4);
    *reinterpret_cast<void***>(ecx + 96) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 100) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x68) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x6c) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034a48);
    fun_180190d0(ecx93, ebx92, a5, edi94, esi95, ebx96, v97, v98, v99, v100, v101, v102, ebp103, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91);
    ecx104 = *reinterpret_cast<void***>(ecx + 4);
    eax105 = ecx + 56;
    fun_180190d0(ecx104, eax105, a5, edi94, esi95, ebx96, v106, v107, v108, v109, v110, v111, ebp103, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91);
    if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 8)) & 8)) {
        edx112 = *reinterpret_cast<void***>(ecx + 4);
        *reinterpret_cast<int16_t*>(&eax105) = fun_18016770(a3, edx112, a3, a4, a5, 0xc0000000, edi94, esi95, ebx96, v113, v114, v115, v116, v117, v118, ebp103, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74);
        *reinterpret_cast<void***>(ecx + 0x68) = eax105;
        if (eax105) {
            edx119 = *reinterpret_cast<void***>(eax105);
            eax120 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx119 + 28)(eax105));
            *reinterpret_cast<void***>(ecx + 0x6c) = eax120;
            fun_1800cf10(eax105, 0xfffffc18, edi94, esi95, ebx96, v121, v122, v123, v124, v125, v126, ebp103, __return_address(), a2);
            __asm__("fstp dword [ebp+0xc]");
            eax127 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x6c));
            *reinterpret_cast<void***>(eax127 + 4)(2, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 4);
            ecx128 = *reinterpret_cast<void***>(ecx + 0x6c);
            edx129 = *reinterpret_cast<void***>(ecx128);
            *reinterpret_cast<void***>(edx129 + 4)(5, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 4, 2, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 4);
            ecx130 = *reinterpret_cast<void***>(ecx + 0x68);
            edx131 = *reinterpret_cast<void***>(ecx130);
            *reinterpret_cast<void***>(edx131 + 4)(6, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 4, 5, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 4, 2, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 4);
            __asm__("fild dword [ebp+0x10]");
            __asm__("fmul qword [0x18034a40]");
            __asm__("fstp qword [ebp-0x18]");
            __asm__("fld qword [ebp-0x18]");
            __asm__("fistp dword [ebp+0xc]");
            ecx132 = *reinterpret_cast<void***>(ecx + 0x6c);
            edx133 = *reinterpret_cast<void***>(ecx132);
            *reinterpret_cast<void***>(edx133 + 4)(4, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff8, 8, 6, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 4, 5, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 4, 2, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 4);
            fun_1800cf10(ecx132, 0xfffffed4, 4, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff8, 8, 6, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 4, 5, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 4, 2, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 4);
            __asm__("fstp dword [ebp-0xc]");
            edx134 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x6c));
            *reinterpret_cast<void***>(edx134 + 4)(3, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 16, 8, 4, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff8, 8, 6, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 4, 5, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 4, 2, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 4);
        }
    } else {
        eax135 = *reinterpret_cast<void***>(ecx + 4);
        *reinterpret_cast<int16_t*>(&eax135) = fun_18017020(ecx104, eax135, a4, ecx + 100);
        edx136 = *reinterpret_cast<void***>(ecx + 4);
        *reinterpret_cast<void***>(ecx + 96) = eax135;
        *reinterpret_cast<int16_t*>(&eax135) = fun_18016770(a3, edx136, a3, a4, a5, 0xa0000000, edi94, esi95, ebx96, v137, v138, v139, v140, v141, v142, ebp103, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74);
        *reinterpret_cast<void***>(ecx + 0x68) = eax135;
        if (eax135) {
            edx143 = *reinterpret_cast<void***>(eax135);
            eax144 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx143 + 28)(eax135));
            *reinterpret_cast<void***>(ecx + 0x6c) = eax144;
            edx145 = *reinterpret_cast<void***>(eax144);
            *reinterpret_cast<void***>(edx145 + 4)(eax144, 1, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 4);
            ecx146 = *reinterpret_cast<void***>(ecx + 0x68);
            edx147 = *reinterpret_cast<void***>(ecx146);
            *reinterpret_cast<void***>(edx147 + 4)();
            eax148 = ecx;
            return *reinterpret_cast<int16_t*>(&eax148);
        }
    }
    eax149 = ecx;
    return *reinterpret_cast<int16_t*>(&eax149);
}

void fun_18015950(void** ecx) {
    void** edi2;
    void** ebx3;
    void** ebp4;
    void** esi5;
    int32_t v6;
    void** ecx7;
    void** ecx8;
    void** al9;
    void** v10;
    void** v11;
    int32_t eax12;

    edi2 = ecx;
    if (!*reinterpret_cast<void***>(edi2 + 5)) {
        ebx3 = *reinterpret_cast<void***>(edi2 + 8);
    } else {
        ebx3 = reinterpret_cast<void**>(0);
    }
    ebp4 = edi2 + 20;
    esi5 = edi2 + 0x80;
    v6 = 2;
    do {
        ecx7 = *reinterpret_cast<void***>(ebp4);
        ecx8 = esi5 + 0xffffffb0;
        fun_18018ba0(ecx8, ecx7, ebx3);
        al9 = *reinterpret_cast<void***>(edi2 + 4);
        if (!al9) {
            __asm__("fld dword [edi+0xc]");
            __asm__("fmul dword [edx]");
            __asm__("fstp dword [esp]");
            fun_18018ba0(esi5, ecx8, ebx3);
            __asm__("fld dword [edi+0x10]");
            __asm__("fmul dword [ebp+0x0]");
            v10 = ebx3;
            v11 = esi5;
            __asm__("fmul dword [edi+0xc]");
            __asm__("fchs ");
            __asm__("fstp dword [esp]");
        } else {
            fun_18018ba0(esi5, 0, ebx3);
            v10 = ebx3;
            v11 = reinterpret_cast<void**>(0);
        }
        fun_18018ba0(esi5 + 80, v11, v10);
        ebp4 = ebp4 + 4;
        esi5 = esi5 + 40;
        eax12 = v6 - 1;
        v6 = eax12;
    } while (eax12);
    return;
}

void fun_18015ad0(void** ecx) {
    void** esi2;
    int32_t edi3;
    void** eax4;

    *reinterpret_cast<void***>(ecx + 5) = reinterpret_cast<void**>(1);
    esi2 = ecx + 40;
    edi3 = 2;
    do {
        eax4 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi2));
        *reinterpret_cast<void***>(eax4 + 36)();
        esi2 = esi2 + 4;
        --edi3;
    } while (edi3);
    return;
}

int16_t fun_18017130(void** ecx, void** a2, void** a3, int32_t a4, void** a5) {
    uint32_t ecx6;
    void** ebx7;
    void** ebp8;
    void* esp9;
    uint32_t edi10;
    int32_t* esi11;
    void** eax12;
    uint32_t edx13;
    uint32_t edx14;
    int16_t ax15;

    ecx6 = 0xffffffff;
    ebx7 = a3;
    ebp8 = a3;
    esp9 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 16 - 4 - 4 - 4 - 4);
    edi10 = 0;
    esi11 = reinterpret_cast<int32_t*>(0x180433a0);
    do {
        __asm__("cdq ");
        eax12 = reinterpret_cast<void**>((*esi11 - reinterpret_cast<unsigned char>(ebp8) ^ edx13) - edx14);
        if (!eax12) 
            break;
        if (ecx6 == 0xffffffff || reinterpret_cast<signed char>(eax12) < reinterpret_cast<signed char>(ebx7)) {
            ecx6 = edi10;
            ebx7 = eax12;
        }
        esi11 = esi11 + 4;
        ++edi10;
    } while (reinterpret_cast<uint32_t>(esi11) < 0x18043430);
    goto addr_0x1801716d_6;
    addr_0x18017171_8:
    *reinterpret_cast<void***>(a5) = reinterpret_cast<void**>(0);
    __asm__("fld dword [esp+0x14]");
    __asm__("fmul dword [esp+0x2c]");
    __asm__("fstp dword [esp+0x18]");
    ax15 = fun_18019f50(a2, reinterpret_cast<int32_t>(esp9) + 16);
    return ax15;
    addr_0x1801716d_6:
    goto addr_0x18017171_8;
}

struct s156 {
    signed char[32] pad32;
    int32_t f32;
};

int16_t fun_18015630(void** a1, void** a2) {
    void** ecx3;
    int32_t v4;
    int32_t esi5;
    void*** eax6;
    void** eax7;
    struct s156** eax8;
    struct s156* edx9;

    ecx3 = a2;
    v4 = esi5;
    eax6 = reinterpret_cast<void***>(0x180429d0);
    do {
        if (ecx3 == *eax6) 
            break;
        eax6 = eax6 + 20;
    } while (reinterpret_cast<uint32_t>(eax6) < 0x18042a84);
    goto addr_0x1801564c_4;
    eax7 = *reinterpret_cast<void***>(a1);
    eax8 = reinterpret_cast<struct s156**>(*reinterpret_cast<void***>(eax7 + 72)());
    if (eax8) {
        edx9 = *eax8;
        edx9->f32(eax8);
        goto v4;
    }
    addr_0x1801564c_4:
    return 0;
}

void fun_18015f60(void** ecx) {
    struct s29* esi2;
    int32_t edi3;
    void** eax4;
    void** edx5;
    void** eax6;

    esi2 = reinterpret_cast<struct s29*>(ecx + 0x108);
    edi3 = 2;
    do {
        eax4 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi2) - 8));
        *reinterpret_cast<void***>(eax4 + 24)();
        edx5 = *reinterpret_cast<void***>(esi2->f0);
        *reinterpret_cast<void***>(edx5 + 24)();
        if (esi2->f8) {
            eax6 = *reinterpret_cast<void***>(esi2->f8);
            *reinterpret_cast<void***>(eax6 + 24)();
        }
        esi2 = reinterpret_cast<struct s29*>(reinterpret_cast<uint32_t>(esi2) + 4);
        --edi3;
    } while (edi3);
    return;
}

int16_t fun_18015680(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** v7;
    void** ebp8;
    void** v9;
    void** esi10;
    void** esi11;
    void** v12;
    void** edi13;
    void** edi14;
    int32_t ebx15;
    void** edi16;
    int32_t ebp17;
    void** ebx18;
    void** ebp19;
    int32_t v20;
    void** ebx21;
    int32_t eax22;
    void** ebx23;
    struct s64* ebp24;
    int32_t v25;
    void** edx26;
    void** eax27;
    void** v28;
    void** v29;
    int32_t eax30;
    void** eax31;

    v7 = ebp8;
    v9 = esi10;
    esi11 = ecx;
    v12 = edi13;
    *reinterpret_cast<void***>(esi11 + 12) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(esi11 + 16) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(esi11) = reinterpret_cast<void**>(0x18034a1c);
    *reinterpret_cast<void***>(esi11 + 4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi11 + 5) = reinterpret_cast<void**>(1);
    *reinterpret_cast<void***>(esi11 + 8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi11 + 36) = a6;
    edi14 = esi11 + 48;
    ebx15 = 2;
    do {
        fun_18018d20(edi14);
        edi14 = edi14 + 40;
        --ebx15;
    } while (ebx15);
    edi16 = esi11 + 0x80;
    ebp17 = 2;
    ebx18 = edi16;
    do {
        fun_18018d20(ebx18);
        ebx18 = ebx18 + 40;
        --ebp17;
    } while (ebp17);
    ebp19 = esi11 + 0xd0;
    v20 = 2;
    ebx21 = ebp19;
    do {
        fun_18018d20(ebx21);
        ebx21 = ebx21 + 40;
        eax22 = v20 - 1;
        v20 = eax22;
    } while (eax22);
    *reinterpret_cast<void***>(esi11 + 24) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(esi11 + 20) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(esi11) = reinterpret_cast<void**>(0x18034a6c);
    *reinterpret_cast<void***>(esi11 + 32) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi11 + 28) = reinterpret_cast<void**>(0);
    fun_18018f90(esi11 + 48, a3);
    fun_18018f90(edi16, a4);
    fun_18018f90(ebp19, a5);
    ebx23 = esi11 + 40;
    ebp24 = reinterpret_cast<struct s64*>(esi11 + 44);
    v25 = 2;
    do {
        edx26 = *reinterpret_cast<void***>(a2);
        eax27 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx26 + 4)());
        *reinterpret_cast<void***>(ebx23) = eax27;
        fun_18018d40(edi16 + 0xffffffb0, eax27, v12, v9, v7);
        v28 = ebp24->f0;
        fun_18018d40(edi16, v28, v12, v9, v7);
        v29 = *reinterpret_cast<void***>(ebx23);
        fun_18018d40(edi16 + 80, v29, v12, v9, v7);
        ebx23 = ebx23 + 4;
        ebp24 = reinterpret_cast<struct s64*>(reinterpret_cast<uint32_t>(ebp24) - 4);
        edi16 = edi16 + 40;
        eax30 = v25 - 1;
        v25 = eax30;
    } while (eax30);
    fun_18015950(esi11);
    fun_180158c0(esi11);
    fun_18015ad0(esi11);
    eax31 = esi11;
    return *reinterpret_cast<int16_t*>(&eax31);
}

void fun_18016250(void** ecx) {
    void** edi2;
    void** ecx3;
    void** ecx4;
    void** ecx5;

    if (!*reinterpret_cast<void***>(ecx + 5)) {
        edi2 = *reinterpret_cast<void***>(ecx + 36);
    } else {
        edi2 = reinterpret_cast<void**>(0);
    }
    __asm__("fld dword [esi+0x10]");
    __asm__("fmul dword [esi+0xc]");
    ecx3 = ecx + 40;
    __asm__("fstp dword [esp]");
    fun_18018ba0(ecx3, ecx, edi2);
    __asm__("fld dword [esi+0x14]");
    __asm__("fmul dword [esi+0xc]");
    ecx4 = ecx + 80;
    __asm__("fstp dword [esp]");
    fun_18018ba0(ecx4, ecx3, edi2);
    __asm__("fld dword [esi+0x10]");
    __asm__("fmul dword [esi+0x8]");
    ecx5 = ecx + 0x78;
    __asm__("fstp dword [esp]");
    fun_18018ba0(ecx5, ecx4, edi2);
    __asm__("fld dword [esi+0x14]");
    __asm__("fmul dword [esi+0x8]");
    __asm__("fchs ");
    __asm__("fstp dword [esp]");
    fun_18018ba0(ecx + 0xa0, ecx5, edi2);
    return;
}

void fun_18016360(void** ecx) {
    void*** esi2;
    int32_t edi3;
    void** eax4;

    *reinterpret_cast<void***>(ecx + 5) = reinterpret_cast<void**>(1);
    esi2 = reinterpret_cast<void***>(ecx + 0xc8);
    edi3 = 2;
    do {
        eax4 = *reinterpret_cast<void***>(*esi2);
        *reinterpret_cast<void***>(eax4 + 36)();
        esi2 = esi2 + 4;
        --edi3;
    } while (edi3);
    return;
}

int16_t fun_18015fa0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** v7;
    void** ebp8;
    void** v9;
    void** esi10;
    void** v11;
    void** edi12;
    void** edi13;
    int32_t ebx14;
    void** esi15;
    void** esi16;
    int32_t ebx17;
    void** ebx18;
    void** ebp19;
    void*** esi20;
    int32_t v21;
    void** edx22;
    void** eax23;
    void** v24;
    int32_t eax25;
    void** eax26;

    v7 = ebp8;
    v9 = esi10;
    v11 = edi12;
    edi13 = ecx;
    ebx14 = 2;
    *reinterpret_cast<void***>(edi13 + 8) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(edi13 + 12) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(edi13) = reinterpret_cast<void**>(0x18034a1c);
    *reinterpret_cast<void***>(edi13 + 4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(edi13 + 5) = reinterpret_cast<void**>(1);
    *reinterpret_cast<void***>(edi13 + 32) = a6;
    *reinterpret_cast<void***>(edi13 + 36) = reinterpret_cast<void**>(0x400);
    esi15 = edi13 + 40;
    do {
        fun_18018d20(esi15);
        esi15 = esi15 + 40;
        --ebx14;
    } while (ebx14);
    esi16 = edi13 + 0x78;
    ebx17 = 2;
    do {
        fun_18018d20(esi16);
        esi16 = esi16 + 40;
        --ebx17;
    } while (ebx17);
    ebx18 = a2;
    *reinterpret_cast<void***>(edi13) = reinterpret_cast<void**>(0x18034ab4);
    ebp19 = edi13 + 0x78;
    esi20 = reinterpret_cast<void***>(edi13 + 0xc8);
    v21 = 2;
    do {
        *reinterpret_cast<int32_t*>(esi20 - 0xb8) = 0x3f800000;
        *reinterpret_cast<int32_t*>(esi20 - 0xb0) = 0;
        edx22 = *reinterpret_cast<void***>(ebx18);
        eax23 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx22 + 4)(ebx18));
        *esi20 = eax23;
        fun_18018d40(ebp19 + 0xffffffb0, eax23, v11, v9, v7);
        v24 = *esi20;
        fun_18018d40(ebp19, v24, v11, v9, v7);
        esi20 = esi20 + 4;
        ebp19 = ebp19 + 40;
        eax25 = v21 - 1;
        v21 = eax25;
    } while (eax25);
    fun_18018f90(edi13 + 40, a4);
    fun_1801d290(edi13 + 0x78, a5);
    fun_1801d290(edi13 + 0xa0, a5);
    fun_180161e0(edi13);
    fun_18016250(edi13);
    fun_18016360(edi13);
    eax26 = edi13;
    return *reinterpret_cast<int16_t*>(&eax26);
}

int16_t fun_18017090(void** ecx, void** a2, void** a3, int32_t a4, void** a5);

int16_t fun_18016390(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85, void** a86, void** a87, void** a88, void** a89, void** a90, void** a91, void** a92, void** a93, void** a94, void** a95, void** a96, void** a97) {
    void** v98;
    void** v99;
    void** ebx100;
    void** v101;
    void** ebp102;
    void** v103;
    void** esi104;
    void** esi105;
    void** v106;
    void** edi107;
    void** edi108;
    void** ebx109;
    int32_t ebp110;
    void** ebp111;
    int32_t ebx112;
    void** v113;
    void** ecx114;
    void** ecx115;
    void** v116;
    void** ecx117;
    void** ebx118;
    void** eax119;
    void** eax120;
    void** edx121;
    void** ecx122;
    int1_t zf123;
    void** eax124;
    void** v125;
    void** v126;
    void** eax127;
    void*** edi128;
    int32_t ebp129;
    void** ecx130;

    v98 = reinterpret_cast<void**>(__return_address());
    v99 = ebx100;
    v101 = ebp102;
    v103 = esi104;
    esi105 = ecx;
    v106 = edi107;
    edi108 = esi105 + 20;
    *reinterpret_cast<void***>(esi105) = reinterpret_cast<void**>(0x18034978);
    *reinterpret_cast<void***>(esi105 + 4) = a2;
    *reinterpret_cast<void***>(esi105 + 8) = a6;
    *reinterpret_cast<void***>(esi105 + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi105 + 16) = a5;
    ebx109 = edi108;
    ebp110 = 2;
    do {
        fun_18019180(ebx109);
        ebx109 = ebx109 + 40;
        --ebp110;
    } while (ebp110);
    ebp111 = esi105 + 100;
    fun_18019180(ebp111);
    *reinterpret_cast<void***>(esi105) = reinterpret_cast<void**>(0x18034ad8);
    *reinterpret_cast<void***>(esi105 + 0x8c) = a3;
    ebx112 = 2;
    do {
        v113 = *reinterpret_cast<void***>(esi105 + 16);
        ecx114 = *reinterpret_cast<void***>(esi105 + 4);
        fun_180190d0(ecx114, edi108, v113, v106, v103, v101, v99, v98, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97);
        edi108 = edi108 + 40;
        --ebx112;
    } while (ebx112);
    ecx115 = *reinterpret_cast<void***>(esi105 + 4);
    v116 = *reinterpret_cast<void***>(esi105 + 16);
    fun_180190d0(ecx115, ebp111, v116, v106, v103, v101, v99, v98, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97);
    ecx117 = *reinterpret_cast<void***>(esi105 + 4);
    ebx118 = a4;
    eax119 = *reinterpret_cast<void***>(ecx117);
    eax120 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax119 + 76)());
    *reinterpret_cast<void***>(esi105 + 0x90) = eax120;
    edx121 = *reinterpret_cast<void***>(eax120);
    *reinterpret_cast<void***>(edx121 + 32)(eax120);
    ecx122 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi105 + 8)) >> 30);
    ecx122 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx122) & 1);
    zf123 = (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi105 + 8)) & 0x80000000) == 0;
    eax124 = esi105 + 12;
    *reinterpret_cast<void***>(esi105 + 0x94) = ecx122;
    v125 = eax124;
    if (zf123) {
        eax124 = *reinterpret_cast<void***>(esi105 + 4);
        *reinterpret_cast<int16_t*>(&eax124) = fun_18017090(ecx122, eax124, ebx118, 0x3f800000, v125);
    } else {
        v126 = *reinterpret_cast<void***>(esi105 + 4);
        *reinterpret_cast<int16_t*>(&eax124) = fun_18017130(ecx122, v126, ebx118, 0x3f800000, v125);
    }
    *reinterpret_cast<void***>(esi105 + 0x98) = eax124;
    eax127 = *reinterpret_cast<void***>(esi105 + 8);
    if (!(reinterpret_cast<unsigned char>(eax127) & 0x10000000)) {
        *reinterpret_cast<void***>(esi105 + 0xa0) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(esi105 + 0x9c) = reinterpret_cast<void**>(0);
        goto v101;
    } else {
        edi128 = reinterpret_cast<void***>(esi105 + 0x9c);
        ebp129 = 2;
        do {
            ecx130 = *reinterpret_cast<void***>(esi105 + 4);
            *reinterpret_cast<int16_t*>(&eax127) = fun_18015630(ecx130, ebx118);
            *edi128 = eax127;
            edi128 = edi128 + 4;
            --ebp129;
        } while (ebp129);
        goto v101;
    }
}

int16_t fun_18015af0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85, void** a86, void** a87, void** a88, void** a89, void** a90, void** a91, void** a92, void** a93, void** a94, void** a95, void** a96, void** a97) {
    void** v98;
    void** v99;
    void** ebx100;
    void** v101;
    void** ebp102;
    void** v103;
    void** esi104;
    void** esi105;
    void** v106;
    void** edi107;
    void** edi108;
    int32_t ebx109;
    void** ebp110;
    void** ebp111;
    int32_t ebx112;
    void** ebp113;
    int32_t ebx114;
    uint32_t ecx115;
    uint32_t edx116;
    void** v117;
    struct s29* ebp118;
    void** ebx119;
    void** eax120;
    void** eax121;
    void** edx122;
    void** eax123;
    void** eax124;

    v98 = reinterpret_cast<void**>(__return_address());
    v99 = ebx100;
    v101 = ebp102;
    v103 = esi104;
    esi105 = a2;
    v106 = edi107;
    edi108 = ecx;
    ebx109 = 2;
    *reinterpret_cast<void***>(edi108) = reinterpret_cast<void**>(0x18034978);
    *reinterpret_cast<void***>(edi108 + 4) = esi105;
    ebp110 = edi108 + 12;
    do {
        fun_18019180(ebp110);
        ebp110 = ebp110 + 40;
        --ebx109;
    } while (ebx109);
    ebp111 = edi108 + 92;
    ebx112 = 2;
    do {
        fun_18019180(ebp111);
        ebp111 = ebp111 + 40;
        --ebx112;
    } while (ebx112);
    ebp113 = edi108 + 0xac;
    ebx114 = 2;
    do {
        fun_18019180(ebp113);
        ebp113 = ebp113 + 40;
        --ebx114;
    } while (ebx114);
    *reinterpret_cast<void***>(edi108) = reinterpret_cast<void**>(0x18034a90);
    *reinterpret_cast<void***>(edi108 + 0xfc) = a3;
    ecx115 = reinterpret_cast<unsigned char>(a6) >> 30;
    edx116 = reinterpret_cast<unsigned char>(a6) >> 28;
    *reinterpret_cast<void***>(edi108 + 0x118) = reinterpret_cast<void**>(*reinterpret_cast<unsigned char*>(&ecx115) & 1);
    *reinterpret_cast<unsigned char*>(edi108 + 0x119) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&edx116) & 1);
    v117 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a6) & 0x80000000);
    ebp118 = reinterpret_cast<struct s29*>(edi108 + 0x108);
    ebx119 = edi108 + 12;
    do {
        fun_180190d0(esi105, ebx119 + 80, a5, v106, v103, v101, v99, v98, 2, v117, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97);
        fun_180190d0(esi105, ebx119, a5, v106, v103, v101, v99, v98, 2, v117, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97);
        eax120 = *reinterpret_cast<void***>(esi105);
        eax121 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax120 + 76)(esi105));
        *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(ebp118) - 8) = eax121;
        edx122 = *reinterpret_cast<void***>(eax121);
        *reinterpret_cast<void***>(edx122 + 32)(eax121);
        if (!v98) {
            eax123 = reinterpret_cast<void**>(2);
            *reinterpret_cast<int16_t*>(&eax123) = fun_18017090(eax121, esi105, 2, 0x3f800000, edi108 + 8);
        } else {
            eax123 = edi108 + 8;
            *reinterpret_cast<int16_t*>(&eax123) = fun_18017130(2, esi105, 2, 0x3f800000, eax123);
        }
        ebp118->f0 = eax123;
        if (!*reinterpret_cast<unsigned char*>(edi108 + 0x119)) {
            ebp118->f8 = reinterpret_cast<void**>(0);
        } else {
            *reinterpret_cast<int16_t*>(&eax123) = fun_18015630(esi105, 2);
            ebp118->f8 = eax123;
            fun_180190d0(esi105, ebx119 + 0xa0, v117, 75, a4, v106, v103, v101, v99, v98, 2, v117, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95);
        }
        ebp118 = reinterpret_cast<struct s29*>(reinterpret_cast<uint32_t>(ebp118) + 4);
        ebx119 = ebx119 + 40;
        eax124 = v99 - 1;
        v99 = eax124;
    } while (eax124);
    fun_18015f60(edi108);
    goto v101;
}

int16_t fun_18016970(void** a1, void** a2, void** a3, void** a4, void* a5, void** a6, void** a7) {
    void** v8;
    void** ebx9;
    void** ebx10;
    void** v11;
    void** ebp12;
    void** v13;
    void** esi14;
    void*** esp15;
    void** v16;
    void** edi17;
    void** v18;
    void** edi19;
    void** esi20;
    void** ebp21;
    void* eax22;
    void* v23;
    void*** esp24;
    void** eax25;
    void** ecx26;
    void** ecx27;
    void*** esp28;
    void** ecx29;
    void** edx30;
    void** v31;
    void** v32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void* ax41;
    void*** esp42;
    struct s59* eax43;
    void* esp44;
    void** ecx45;
    void** edx46;
    void*** esp47;
    void** eax48;
    void** ebp49;
    void** ecx50;
    void** edx51;
    void** eax52;
    void** eax53;

    v8 = ebx9;
    ebx10 = reinterpret_cast<void**>(0);
    v11 = ebp12;
    v13 = esi14;
    esp15 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 64 - 4 - 4 - 4 - 4);
    v16 = edi17;
    v18 = reinterpret_cast<void**>(0);
    if (reinterpret_cast<signed char>(a7) > reinterpret_cast<signed char>(0)) {
        edi19 = a6;
        esi20 = a1;
        ebp21 = a4;
        eax22 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(a5) - reinterpret_cast<unsigned char>(edi19));
        v23 = eax22;
        while (reinterpret_cast<signed char>(ebx10) < reinterpret_cast<signed char>(a2)) {
            esp24 = esp15 - 4;
            eax25 = reinterpret_cast<void**>(esp24 + 48);
            *reinterpret_cast<int16_t*>(&eax25) = fun_1800d1a0(ecx26, eax25, ebp21, reinterpret_cast<uint32_t>(eax22) + reinterpret_cast<unsigned char>(edi19));
            ecx27 = *reinterpret_cast<void***>(eax25);
            esp28 = esp24 - 4 - 4 - 4 + 12 + 4 - 4;
            ecx29 = reinterpret_cast<void**>(esp28 + 24);
            edx30 = *reinterpret_cast<void***>(eax25 + 4);
            v31 = *reinterpret_cast<void***>(eax25 + 8);
            ax41 = fun_1800d240(ecx29, edi19, v16, v13, v11, v8, v18, ecx27, edx30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40);
            esp15 = esp28 - 4 - 4 + 8 + 4;
            __asm__("fcom dword [0x1803422c]");
            __asm__("fnstsw ax");
            if (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&ax41) + 1) & 65) {
                __asm__("fstp st0");
            } else {
                esp42 = esp15 - 4;
                __asm__("fadd st0, st0");
                eax43 = reinterpret_cast<struct s59*>(esp42 + 60);
                *reinterpret_cast<void***>(esi20) = a3;
                __asm__("fstp dword [esp]");
                *reinterpret_cast<int16_t*>(&eax43) = fun_1800d1f0(eax43, edi19, ecx29);
                esp44 = reinterpret_cast<void*>(esp42 - 4 - 4 - 4 + 12 + 4);
                v32 = eax43->f0;
                ecx45 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp44) + 32);
                edx46 = eax43->f4;
                esp47 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp44) - 4);
                v33 = edx46;
                eax48 = eax43->f8;
                v34 = eax48;
                *reinterpret_cast<int16_t*>(&eax48) = fun_1800d1a0(ecx45, esp47 + 72, ebp21, ecx45);
                esp15 = esp47 - 4 - 4 - 4 + 12 + 4;
                ebp49 = esi20 + 4;
                ++ebx10;
                esi20 = esi20 + 36;
                ecx50 = *reinterpret_cast<void***>(eax48 + 4);
                edx51 = *reinterpret_cast<void***>(eax48 + 8);
                *reinterpret_cast<void***>(ebp49) = *reinterpret_cast<void***>(eax48);
                *reinterpret_cast<void***>(ebp49 + 4) = ecx50;
                *reinterpret_cast<void***>(ebp49 + 8) = edx51;
                ebp21 = a4;
            }
            ecx26 = a7;
            eax52 = v18 + 1;
            edi19 = edi19 + 12;
            v18 = eax52;
            if (reinterpret_cast<signed char>(eax52) >= reinterpret_cast<signed char>(ecx26)) 
                break;
            eax22 = v23;
        }
    }
    eax53 = ebx10;
    return *reinterpret_cast<int16_t*>(&eax53);
}

void fun_1800dac0(void** ecx, void** a2, void** a3) {
    __asm__("fld dword [ebp+0x8]");
    __asm__("fld dword [ebp+0xc]");
    __asm__("fpatan ");
    __asm__("fstp dword [ebp-0x4]");
    __asm__("fld dword [ebp-0x4]");
    return;
}

struct s157 {
    signed char[8] pad8;
    int32_t f8;
};

int16_t fun_18016c90(int32_t a1, int32_t a2) {
    int32_t eax3;
    struct s157* v4;

    __asm__("fld qword [esp+0xc]");
    __asm__("fmul qword [0x18034b18]");
    __asm__("fld qword [esp+0x14]");
    __asm__("fadd st0, st0");
    eax3 = v4->f8;
    __asm__("fst qword [esp+0x0]");
    __asm__("fadd st0, st1");
    __asm__("fadd qword [esp+0x1c]");
    __asm__("fld qword [esp+0x24]");
    __asm__("fmul qword [0x18034b18]");
    __asm__("fstp qword [esp+0x14]");
    __asm__("fld qword [esp+0x2c]");
    __asm__("fadd st0, st0");
    __asm__("fst qword [esp+0x2c]");
    __asm__("fadd qword [esp+0x14]");
    __asm__("fadd qword [esp+0x34]");
    __asm__("fld qword [esp+0x34]");
    __asm__("fadd st0, st0");
    __asm__("fld qword [esp+0x24]");
    __asm__("fmul qword [0x18034b10]");
    __asm__("fsubp st1, st0");
    __asm__("fdiv st0, st1");
    __asm__("fstp dword [eax]");
    __asm__("fld qword [esp+0x14]");
    __asm__("fsub qword [esp+0x2c]");
    __asm__("fadd qword [esp+0x34]");
    __asm__("fdiv st0, st1");
    __asm__("fstp dword [eax+0x4]");
    __asm__("fld qword [esp+0x1c]");
    __asm__("fadd st0, st0");
    __asm__("fld qword [esp+0xc]");
    __asm__("fmul qword [0x18034b10]");
    __asm__("fsubp st1, st0");
    __asm__("fdiv st0, st2");
    __asm__("fstp dword [eax+0x8]");
    __asm__("fxch st0, st2");
    __asm__("fsub qword [esp+0x0]");
    __asm__("fadd qword [esp+0x1c]");
    __asm__("fdiv st0, st1");
    __asm__("fstp dword [eax+0xc]");
    __asm__("fdiv st0, st1");
    __asm__("fstp dword [ecx]");
    __asm__("fstp st0");
    return *reinterpret_cast<int16_t*>(&eax3);
}

void fun_18016ed0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8) {
    void** edi9;
    void** esi10;
    void** ebx11;
    void** ecx12;
    void** edi13;
    void** ebx14;
    void** edx15;
    void** edi16;
    void** eax17;
    void** ebx18;
    void** ecx19;
    void** eax20;
    void** edi21;

    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx + 4) == 1)) {
        if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 4)) >= reinterpret_cast<signed char>(2) && (fun_1800cf10(ecx, 0xffffff1f, edi9, esi10, ebx11, ecx, __return_address(), a2, a3, a4, a5, a6, a7, a8), ecx12 = *reinterpret_cast<void***>(ecx + 12), edi13 = ecx + 16, fun_18018ba0(edi13, ecx12, 0), ebx14 = ecx + 56, fun_18018ba0(ebx14, edi13, 0), edx15 = *reinterpret_cast<void***>(ecx + 8), fun_18018d50(edi13, edx15, 0, edi9, esi10, ebx11), fun_18018d50(ebx14, 0, 0, edi9, esi10, ebx11), reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 4)) >= reinterpret_cast<signed char>(4))) {
            __asm__("fld dword [esp+0xc]");
            __asm__("fmul dword [esi+0xc]");
            edi16 = ecx + 96;
            __asm__("fstp dword [esp]");
            fun_18018ba0(edi16, ebx14, 0);
            eax17 = *reinterpret_cast<void***>(ecx + 12);
            ebx18 = ecx + 0x88;
            fun_18018ba0(ebx18, eax17, 0);
            fun_18018d50(edi16, 0, 0, edi9, esi10, ebx11);
            ecx19 = *reinterpret_cast<void***>(ecx + 8);
            fun_18018d50(ebx18, ecx19, 0, edi9, esi10, ebx11);
        }
        return;
    } else {
        eax20 = *reinterpret_cast<void***>(ecx + 12);
        edi21 = ecx + 16;
        fun_18018ba0(edi21, eax20, 0);
        fun_18018d50(edi21, 0, 0, edi9, esi10, ebx11);
        return;
    }
}

int16_t fun_180172a0(void** a1, void** a2, int32_t a3, int32_t a4, uint32_t a5) {
    uint32_t ecx6;
    void* ecx7;
    void** edi8;
    void* ecx9;
    int32_t eax10;
    uint32_t ecx11;

    __asm__("fld dword [ebp+0x14]");
    __asm__("fadd st0, st0");
    __asm__("fadd st0, st0");
    __asm__("fld dword [ebp+0x10]");
    ecx6 = reinterpret_cast<uint32_t>(reinterpret_cast<int32_t>(a5) >> 2);
    if (ecx6) {
        ecx7 = reinterpret_cast<void*>(ecx6 << 4);
        edi8 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a1) + reinterpret_cast<uint32_t>(ecx7));
        ecx9 = reinterpret_cast<void*>(-reinterpret_cast<uint32_t>(ecx7));
        do {
            eax10 = *reinterpret_cast<int32_t*>(reinterpret_cast<unsigned char>(edi8) + reinterpret_cast<uint32_t>(ecx9));
            __asm__("fld dword [esi+ecx]");
            __asm__("fld dword [esi+ecx+0x4]");
            __asm__("fxch st0, st1");
            __asm__("fmul st0, st2");
            __asm__("fld dword [esi+ecx+0x8]");
            __asm__("fxch st0, st2");
            __asm__("fmul st0, st3");
            __asm__("fld dword [esi+ecx+0xc]");
            __asm__("fxch st0, st3");
            __asm__("fmul st0, st4");
            __asm__("fxch st0, st2");
            __asm__("fstp dword [edi+ecx]");
            __asm__("fxch st0, st2");
            __asm__("fmul st0, st3");
            __asm__("fxch st0, st2");
            __asm__("fstp dword [edi+ecx+0x4]");
            __asm__("fstp dword [edi+ecx+0x8]");
            __asm__("fstp dword [edi+ecx+0xc]");
            __asm__("fadd st0, st1");
            ecx9 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx9) + 16);
        } while (ecx9);
    }
    ecx11 = a5 & 3;
    if (ecx11) {
        __asm__("fxch st0, st1");
        __asm__("fstp st0");
        __asm__("fld dword [ebp+0x14]");
        __asm__("fxch st0, st1");
        do {
            __asm__("fld dword [esi]");
            __asm__("fmul st0, st1");
            __asm__("fld st2");
            __asm__("faddp st2, st0");
            __asm__("fstp dword [edi]");
            --ecx11;
        } while (ecx11);
    }
    __asm__("fstp st0");
    __asm__("fstp st0");
    return *reinterpret_cast<int16_t*>(&eax10);
}

struct s158 {
    unsigned char f0;
    signed char[1] pad2;
    unsigned char f2;
};

int16_t fun_180178f0(int32_t a1, struct s158* a2, uint32_t a3) {
    int32_t ecx4;
    int32_t ecx5;
    uint32_t ecx6;
    int16_t ax7;

    ecx4 = reinterpret_cast<int32_t>(a3) >> 2;
    if (ecx4) {
        ecx5 = -(ecx4 << 4);
        do {
            __asm__("fld dword [esi+ecx]");
            __asm__("fld dword [esi+ecx+0x4]");
            __asm__("fld dword [esi+ecx+0x8]");
            __asm__("fld dword [esi+ecx+0xc]");
            __asm__("fxch st0, st3");
            __asm__("fadd dword [edi+ecx]");
            __asm__("fxch st0, st2");
            __asm__("fadd dword [edi+ecx+0x4]");
            __asm__("fxch st0, st1");
            __asm__("fadd dword [edi+ecx+0x8]");
            __asm__("fxch st0, st3");
            __asm__("fadd dword [edi+ecx+0xc]");
            __asm__("fxch st0, st2");
            __asm__("fstp dword [edi+ecx]");
            __asm__("fstp dword [edi+ecx+0x4]");
            __asm__("fxch st0, st1");
            __asm__("fstp dword [edi+ecx+0x8]");
            __asm__("fstp dword [edi+ecx+0xc]");
            ecx5 = ecx5 + 16;
        } while (ecx5);
    }
    ecx6 = a3 & 3;
    if (ecx6) {
        do {
            __asm__("fld dword [edi]");
            __asm__("fadd dword [esi]");
            __asm__("fstp dword [edi]");
            --ecx6;
        } while (ecx6);
    }
    return ax7;
}

int16_t fun_18017fd0(unsigned char* ecx, unsigned char* a2, unsigned char* a3, int32_t a4, int32_t a5, void** a6) {
    unsigned char* v7;
    uint32_t ecx8;
    unsigned char* edi9;
    uint32_t ecx10;
    unsigned char* eax11;

    v7 = ecx;
    __asm__("fld dword [ebp+0x14]");
    __asm__("fld dword [ebp+0x10]");
    __asm__("fld dword [0x18034bd0]");
    __asm__("fmul st1, st0");
    __asm__("fmulp st2, st0");
    ecx8 = reinterpret_cast<unsigned char>(a6) << 1;
    edi9 = reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(a2) + ecx8);
    ecx10 = -ecx8;
    while (1) {
        __asm__("fld dword [esi+ecx*2]");
        __asm__("fmul st0, st1");
        __asm__("fxch st0, st1");
        __asm__("fadd st0, st2");
        __asm__("fxch st0, st1");
        __asm__("fistp dword [ebp-0x4]");
        eax11 = v7;
        if (reinterpret_cast<int32_t>(eax11) >= 0x7fff) {
            *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi9) + ecx10) = 0x7fff;
            ecx10 = ecx10 + 2;
            if (!ecx10) 
                break;
        } else {
            if (reinterpret_cast<int32_t>(eax11) <= 0xffff8000) {
                *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi9) + ecx10) = 0x8000;
                ecx10 = ecx10 + 2;
                if (!ecx10) 
                    goto addr_0x1801803c_6;
            } else {
                *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi9) + ecx10) = *reinterpret_cast<int16_t*>(&eax11);
                ecx10 = ecx10 + 2;
                if (!ecx10) 
                    goto addr_0x18018022_8;
            }
        }
    }
    addr_0x1801803c_6:
    __asm__("fstp st0");
    __asm__("fstp st0");
    return *reinterpret_cast<int16_t*>(&eax11);
    addr_0x18018022_8:
    goto addr_0x1801803c_6;
}

int16_t fun_180184a0(int16_t* a1, unsigned char* a2, void** a3) {
    unsigned char* esi4;
    int16_t* edi5;
    uint32_t ecx6;
    uint32_t ecx7;
    int32_t ecx8;
    uint32_t ecx9;
    int16_t ax10;
    uint32_t ecx11;
    unsigned char* esi12;
    int16_t* edi13;
    uint32_t ecx14;

    esi4 = a2;
    edi5 = a1;
    ecx6 = reinterpret_cast<uint32_t>(reinterpret_cast<signed char>(a3) >> 4);
    if (ecx6) {
        ecx7 = ecx6 << 5;
        esi4 = reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(esi4) + ecx7);
        edi5 = reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi5) + ecx7);
        ecx8 = reinterpret_cast<int32_t>(-ecx7);
        do {
            __asm__("movq mm0, [esi+ecx]");
            __asm__("movq mm1, [esi+ecx+0x8]");
            __asm__("movq mm2, [esi+ecx+0x10]");
            __asm__("movq mm3, [esi+ecx+0x18]");
            __asm__("paddsw mm0, [edi+ecx]");
            __asm__("paddsw mm1, [edi+ecx+0x8]");
            __asm__("paddsw mm2, [edi+ecx+0x10]");
            __asm__("paddsw mm3, [edi+ecx+0x18]");
            __asm__("movq [edi+ecx], mm0");
            __asm__("movq [edi+ecx+0x8], mm1");
            __asm__("movq [edi+ecx+0x10], mm2");
            __asm__("movq [edi+ecx+0x18], mm3");
            ecx8 = ecx8 + 32;
        } while (ecx8);
        __asm__("emms ");
    }
    ecx9 = reinterpret_cast<unsigned char>(a3) & 15;
    if (!ecx9) {
        addr_0x18018540_6:
        return ax10;
    } else {
        ecx11 = ecx9 << 1;
        esi12 = reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(esi4) + ecx11);
        edi13 = reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi5) + ecx11);
        ecx14 = -ecx11;
        while (1) {
            ax10 = reinterpret_cast<int16_t>(*reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(esi12) + ecx14) + *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi13) + ecx14));
            if (__intrinsic()) {
                if (__intrinsic()) {
                    *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi13) + ecx14) = 0x8000;
                    ecx14 = ecx14 + 2;
                    if (!ecx14) 
                        goto addr_0x18018540_6;
                } else {
                    *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi13) + ecx14) = 0x7fff;
                    ecx14 = ecx14 + 2;
                    if (!ecx14) 
                        break;
                }
            } else {
                *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi13) + ecx14) = ax10;
                ecx14 = ecx14 + 2;
                if (!ecx14) 
                    goto addr_0x18018524_13;
            }
        }
    }
    goto addr_0x18018540_6;
    addr_0x18018524_13:
    goto addr_0x18018540_6;
}

int16_t fun_18018420(unsigned char* ecx, int16_t* a2, unsigned char* a3, int32_t a4, int32_t a5, void** a6) {
    unsigned char* v7;
    uint32_t ecx8;
    int16_t* edi9;
    uint32_t ecx10;
    uint32_t eax11;

    v7 = ecx;
    __asm__("fld dword [ebp+0x14]");
    __asm__("fld dword [ebp+0x10]");
    __asm__("fld dword [0x18034bd0]");
    __asm__("fmul st1, st0");
    __asm__("fmulp st2, st0");
    ecx8 = reinterpret_cast<unsigned char>(a6) << 1;
    edi9 = reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(a2) + ecx8);
    ecx10 = -ecx8;
    while (1) {
        __asm__("fld dword [esi+ecx*2]");
        __asm__("fmul st0, st1");
        __asm__("fistp dword [ebp-0x4]");
        __asm__("fadd st0, st1");
        eax11 = *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi9) + ecx10) + reinterpret_cast<uint32_t>(v7);
        if (reinterpret_cast<int32_t>(eax11) >= reinterpret_cast<int32_t>(0x7fff)) {
            *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi9) + ecx10) = 0x7fff;
            ecx10 = ecx10 + 2;
            if (!ecx10) 
                break;
        } else {
            if (reinterpret_cast<int32_t>(eax11) <= reinterpret_cast<int32_t>(0xffff8000)) {
                *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi9) + ecx10) = 0x8000;
                ecx10 = ecx10 + 2;
                if (!ecx10) 
                    goto addr_0x1801848c_6;
            } else {
                *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi9) + ecx10) = *reinterpret_cast<int16_t*>(&eax11);
                ecx10 = ecx10 + 2;
                if (!ecx10) 
                    goto addr_0x18018472_8;
            }
        }
    }
    addr_0x1801848c_6:
    __asm__("fstp st0");
    __asm__("fstp st0");
    return *reinterpret_cast<int16_t*>(&eax11);
    addr_0x18018472_8:
    goto addr_0x1801848c_6;
}

int16_t fun_180189d0(int16_t* a1, int16_t a2, int32_t a3);

unsigned char fun_18018b30(int16_t* a1, int32_t a2) {
    int32_t eax3;

    eax3 = a2;
    *reinterpret_cast<int16_t*>(&eax3) = fun_180189d0(a1, 10, eax3);
    return static_cast<unsigned char>(reinterpret_cast<uint1_t>(eax3 == -1));
}

struct s159 {
    signed char[12] pad12;
    int32_t f12;
    int32_t f16;
};

int16_t fun_180196f0(struct s159* ecx, void** a2, void** a3);

struct s160 {
    int32_t f0;
    int32_t f4;
};

struct s161 {
    int32_t f0;
    int32_t f4;
};

void fun_180196c0(struct s161* ecx, struct s160* a2);

void* fun_18019390(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36) {
    void** edi37;
    void** esi38;
    void** ebp39;
    void** ebx40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** eax49;
    void*** esp50;
    void** ebx51;
    void* esp52;
    struct s160** esp53;
    void* esp54;
    void** eax55;
    void** v56;
    void** eax57;
    void** ebp58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** ecx63;
    void** edx64;
    void*** esp65;
    void** ecx66;
    void*** esp67;
    void** edx68;
    void** eax69;
    void** v70;
    void*** esp71;
    void** v72;
    void** ecx73;
    void** v74;
    void** eax75;
    void** ecx76;
    void** v77;
    void** edx78;
    void** eax79;
    void*** esp80;
    void** v81;
    void* esp82;
    struct s160** esp83;
    void* esp84;
    void*** esp85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** v92;
    void*** esp93;
    void* esp94;
    struct s160** esp95;
    void*** esp96;
    void* esp97;
    struct s160** esp98;
    void** ecx99;
    void** edx100;
    void*** esp101;
    void** esp102;
    void** eax103;
    void** ecx104;
    void*** eax105;
    void** eax106;

    fun_18019310(ecx, a6, edi37, esi38, ebp39, ebx40, v41, v42, v43, v44, v45, v46, v47, v48);
    eax49 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 24)) - reinterpret_cast<unsigned char>(a6));
    if (reinterpret_cast<signed char>(eax49) > reinterpret_cast<signed char>(a5)) {
    }
    esp50 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x68 - 4 - 4 - 4 - 4 - 4 - 4 + 4 + 4 - 4);
    ebx51 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a5) - reinterpret_cast<unsigned char>(a5));
    fun_180196f0(esp50 + 24, a6, edi37);
    esp52 = reinterpret_cast<void*>(esp50 - 4 + 4 + 4);
    esp53 = reinterpret_cast<struct s160**>(reinterpret_cast<int32_t>(esp52) - 4);
    fun_180196c0(esp53 + 16, reinterpret_cast<int32_t>(esp52) + 20);
    esp54 = reinterpret_cast<void*>(esp53 - 1 + 1 + 1);
    __asm__("fld dword [esp+0x80]");
    __asm__("fcomp dword [0x18034238]");
    eax55 = v56;
    __asm__("fnstsw ax");
    if (!(*reinterpret_cast<unsigned char*>(&eax55 + 1) & 64) || !(*reinterpret_cast<unsigned char*>(&eax55 + 1) & 64)) {
        eax57 = a2;
        goto addr_0x1801958a_5;
    }
    eax57 = a2;
    ebp58 = eax57 + 4;
    v59 = *reinterpret_cast<void***>(ebp58);
    v60 = *reinterpret_cast<void***>(ebp58 + 4);
    if (v59 != v61 || v60 != v62) {
        addr_0x1801958a_5:
        if (a5) {
            ecx63 = *reinterpret_cast<void***>(ecx + 20);
            edx64 = *reinterpret_cast<void***>(ecx63);
            esp65 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp54) - 4 - 4 - 4 - 4);
            *reinterpret_cast<void***>(edx64 + 12)(esp65 + 56, eax57, a3, a4, a5);
            esp54 = reinterpret_cast<void*>(esp65 - 4 - 4 + 4);
        }
    } else {
        if (a5) {
            ecx66 = *reinterpret_cast<void***>(ecx + 20);
            esp67 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp54) - 4 - 4);
            edx68 = *reinterpret_cast<void***>(ecx66);
            *reinterpret_cast<void***>(edx68 + 16)(esp67 + 48, eax57, a5);
            esp54 = reinterpret_cast<void*>(esp67 - 4 - 4 + 4);
        }
        if (ebx51) {
            eax69 = v70;
            esp71 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp54) - 4);
            v72 = eax69;
            *reinterpret_cast<int16_t*>(&eax69) = fun_180196f0(esp71 + 24, a5, edi37);
            ecx73 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v74) + reinterpret_cast<unsigned char>(eax69));
            eax75 = *reinterpret_cast<void***>(ebp58);
            ecx76 = *reinterpret_cast<void***>(ebp58 + 4);
            v77 = *reinterpret_cast<void***>(a2);
            edx78 = *reinterpret_cast<void***>(ebp58 + 8);
            eax79 = *reinterpret_cast<void***>(ebp58 + 12);
            esp80 = esp71 - 4 + 4 + 4 - 4;
            v81 = eax79;
            *reinterpret_cast<int16_t*>(&eax79) = fun_180196f0(esp80 + 64, a5, edi37);
            esp82 = reinterpret_cast<void*>(esp80 - 4 + 4 + 4);
            esp83 = reinterpret_cast<struct s160**>(reinterpret_cast<int32_t>(esp82) - 4);
            fun_180196c0(esp83 + 26, reinterpret_cast<int32_t>(esp82) + 60);
            esp84 = reinterpret_cast<void*>(esp83 - 1 + 1 + 1);
            esp85 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp84) - 4 - 4);
            fun_1801a210(esp85 + 0x6c, reinterpret_cast<int32_t>(esp84) + 80, ebx51, edi37, esi38, ebp39, ebx40, a5, ecx73, v86, v72, v87, eax55, v74, v86, v70, v87, eax55, reinterpret_cast<unsigned char>(v77) + reinterpret_cast<unsigned char>(eax79), eax75, ecx76, edx78, v81, ecx73, v86, v72, v87, eax55, v88, v89, v90, v91, v92, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10);
            esp54 = reinterpret_cast<void*>(esp85 - 4 + 8 + 4);
            goto addr_0x1801967a_12;
        }
    }
    if (ebx51) {
        esp93 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp54) - 4);
        fun_180196f0(esp93 + 64, a5, edi37);
        esp94 = reinterpret_cast<void*>(esp93 - 4 + 4 + 4);
        esp95 = reinterpret_cast<struct s160**>(reinterpret_cast<int32_t>(esp94) - 4);
        fun_180196c0(esp95 + 26, reinterpret_cast<int32_t>(esp94) + 60);
        esp96 = reinterpret_cast<void***>(esp95 - 1 + 1 + 1 - 1);
        fun_180196f0(esp96 + 24, a5, edi37);
        esp97 = reinterpret_cast<void*>(esp96 - 4 + 4 + 4);
        esp98 = reinterpret_cast<struct s160**>(reinterpret_cast<int32_t>(esp97) - 4);
        fun_180196c0(esp98 + 21, reinterpret_cast<int32_t>(esp97) + 20);
        __asm__("fild dword [esp+0x10]");
        ecx99 = *reinterpret_cast<void***>(ecx + 20);
        __asm__("fmul dword [esp+0x8c]");
        edx100 = *reinterpret_cast<void***>(ecx99);
        esp101 = reinterpret_cast<void***>(esp98 - 1 + 1 + 1 - 1 - 1 - 1);
        __asm__("fadd dword [esp+0x8c]");
        __asm__("fstp dword [esp]");
        esp102 = reinterpret_cast<void**>(esp101 - 4);
        *reinterpret_cast<void***>(edx100 + 8)(esp102 + 24, esp101 + 0x70, ecx99, a4, ebx51);
        esp54 = reinterpret_cast<void*>(esp102 - 1 - 1 + 1);
    }
    addr_0x1801967a_12:
    eax103 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a5) + reinterpret_cast<unsigned char>(a6));
    ecx104 = *reinterpret_cast<void***>(ecx + 24);
    if (reinterpret_cast<signed char>(ecx104) < reinterpret_cast<signed char>(eax103)) {
        eax105 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp54) + 0x7c);
        *reinterpret_cast<void***>(ecx + 24) = eax103;
        return *reinterpret_cast<void**>(&eax105);
    } else {
        eax106 = ecx104;
        *reinterpret_cast<void***>(ecx + 24) = eax106;
        return *reinterpret_cast<void**>(&eax106);
    }
}

int16_t fun_18019270(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44);

void fun_18019220(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42) {
    void** esi43;
    void** ecx44;

    fun_18019270(ecx, esi43, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    ecx44 = ecx + 4;
    *reinterpret_cast<void***>(ecx) = a8;
    *reinterpret_cast<void***>(ecx44) = a3;
    *reinterpret_cast<void***>(ecx44 + 4) = a4;
    *reinterpret_cast<void***>(ecx44 + 8) = a5;
    *reinterpret_cast<void***>(ecx + 32) = a9;
    *reinterpret_cast<void***>(ecx44 + 12) = a6;
    *reinterpret_cast<void***>(ecx + 20) = a2;
    *reinterpret_cast<void***>(ecx + 36) = a10;
    if (a10) {
        *reinterpret_cast<void***>(a10) = *reinterpret_cast<void***>(a10) + 1;
    }
    return;
}

void** fun_18017250(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25) {
    void** ecx26;
    uint32_t eax27;
    int32_t eax28;
    void** edi29;
    uint32_t eax30;
    uint32_t edx31;
    uint32_t ebx32;
    void** eax33;
    uint32_t ecx34;
    uint32_t ecx35;

    ecx26 = *reinterpret_cast<void***>(ecx + 16);
    if (reinterpret_cast<signed char>(ecx26) < reinterpret_cast<signed char>(0)) {
        eax27 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 12)) * reinterpret_cast<unsigned char>(a2);
    } else {
        eax27 = reinterpret_cast<unsigned char>(a2) << *reinterpret_cast<unsigned char*>(&ecx26);
    }
    eax28 = 0;
    *reinterpret_cast<unsigned char*>(&eax28) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx + 8) == 8)));
    edi29 = *reinterpret_cast<void***>(ecx);
    eax30 = reinterpret_cast<uint32_t>(eax28 - 1) & 0x80;
    edx31 = eax27;
    *reinterpret_cast<signed char*>(&ebx32) = *reinterpret_cast<signed char*>(&eax30);
    *reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(&ebx32) + 1) = *reinterpret_cast<signed char*>(&ebx32);
    eax33 = reinterpret_cast<void**>(ebx32 << 16);
    eax33 = *reinterpret_cast<void***>(&ebx32);
    ecx34 = eax27 >> 2;
    while (ecx34) {
        --ecx34;
        *reinterpret_cast<void***>(edi29) = eax33;
        edi29 = edi29 + 4;
    }
    ecx35 = edx31 & 3;
    while (ecx35) {
        --ecx35;
        *reinterpret_cast<void***>(edi29) = eax33;
        ++edi29;
    }
    return eax33;
}

int16_t fun_180196f0(struct s159* ecx, void** a2, void** a3) {
    int32_t ecx4;
    uint32_t eax5;
    uint32_t eax6;

    ecx4 = ecx->f16;
    if (ecx4 < 0) {
        eax5 = ecx->f12 * reinterpret_cast<unsigned char>(a2);
        return *reinterpret_cast<int16_t*>(&eax5);
    } else {
        eax6 = reinterpret_cast<unsigned char>(a2) << *reinterpret_cast<unsigned char*>(&ecx4);
        return *reinterpret_cast<int16_t*>(&eax6);
    }
}

struct s162 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

struct s163 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

void fun_180196c0(struct s161* ecx, struct s160* a2) {
    struct s162* ecx3;
    struct s163* edx4;

    ecx3 = reinterpret_cast<struct s162*>(&a2->f4);
    ecx->f0 = a2->f0;
    edx4 = reinterpret_cast<struct s163*>(&ecx->f4);
    edx4->f0 = ecx3->f0;
    edx4->f4 = ecx3->f4;
    edx4->f8 = ecx3->f8;
    edx4->f12 = ecx3->f12;
    return;
}

void** fun_1801aba0(void** ecx, void** a2, void** a3);

void** fun_1801a210(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43) {
    void*** ebp44;
    void** eax45;
    void** ecx46;
    void** edx47;
    void** esi48;
    void** v49;
    void** v50;
    void** ecx51;
    uint32_t edx52;
    void** esi53;
    uint32_t eax54;
    uint32_t ecx55;
    void** edi56;
    uint32_t ecx57;
    void** ecx58;
    void** edi59;
    void** edx60;
    void** esi61;
    void** ebx62;
    void** ecx63;
    void** esi64;
    void** ebx65;
    void** ecx66;
    void** ax67;
    void** edi68;
    void** esi69;
    void** ebx70;
    void** v71;
    void** v72;
    void** v73;
    void** ebp74;
    void** ax75;
    void** ecx76;
    void** edx77;
    void** esi78;
    void** edx79;
    void** eax80;
    void** edi81;
    int32_t ebx82;
    void** edx83;
    void** edi84;
    void** esi85;
    void** ecx86;
    void** edx87;
    void** esi88;
    void** edi89;
    int32_t ecx90;
    int32_t edx91;
    int32_t ecx92;
    void** esi93;
    void** edi94;
    void** ebx95;
    void** ecx96;
    void** ax97;
    void** edi98;
    void** ebx99;
    void** v100;
    void** ax101;
    void** esi102;
    void** edi103;
    int32_t ecx104;
    int32_t edx105;
    int32_t edx106;
    int32_t ecx107;
    void** edx108;
    int32_t esi109;
    void** edx110;
    void** esi111;
    void** ecx112;
    void** edx113;
    void** edi114;
    void** esi115;
    void** edx116;
    void** edx117;
    void** esi118;
    void** ecx119;
    void** ecx120;
    void** esi121;
    void** edx122;
    void** dl123;
    void** edi124;
    void** ecx125;
    uint32_t ecx126;
    void** edi127;
    uint32_t ecx128;
    void* ecx129;
    uint32_t ebx130;
    void** ecx131;
    void** ax132;
    void* ecx133;
    uint32_t ebx134;
    void** ecx135;
    void** ax136;
    void** ecx137;
    void** edx138;
    void** esi139;
    void** edi140;
    void** eax141;
    int32_t eax142;
    int32_t edx143;
    void** esi144;
    void** edx145;
    void** dx146;
    void** edx147;
    void** esi148;
    void** ecx149;
    void** edx150;
    void** esi151;
    void** edx152;
    void** edx153;
    void** eax154;
    void** edi155;
    int32_t ebx156;
    void* esi157;
    void** edx158;
    uint32_t edi159;
    void** esi160;
    void** ecx161;
    void** edi162;
    void** esi163;
    void** esi164;
    void* edx165;
    uint32_t edx166;
    void* edx167;
    uint32_t edi168;

    ebp44 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    eax45 = ecx;
    ecx46 = a2 + 4;
    edx47 = *reinterpret_cast<void***>(ecx46);
    esi48 = *reinterpret_cast<void***>(ecx46 + 4);
    v49 = *reinterpret_cast<void***>(ecx46 + 8);
    v50 = *reinterpret_cast<void***>(ecx46 + 12);
    if (*reinterpret_cast<void***>(eax45 + 4) == edx47 && *reinterpret_cast<void***>(eax45 + 8) == esi48) {
        ecx51 = *reinterpret_cast<void***>(eax45 + 16);
        if (reinterpret_cast<signed char>(ecx51) < reinterpret_cast<signed char>(0)) {
            edx52 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax45 + 12)) * reinterpret_cast<unsigned char>(a3);
        } else {
            edx52 = reinterpret_cast<unsigned char>(a3) << *reinterpret_cast<unsigned char*>(&ecx51);
        }
        esi53 = *reinterpret_cast<void***>(eax45);
        eax54 = edx52;
        ecx55 = edx52 >> 2;
        edi56 = *reinterpret_cast<void***>(a2);
        while (ecx55) {
            --ecx55;
            *reinterpret_cast<void***>(edi56) = *reinterpret_cast<void***>(esi53);
            edi56 = edi56 + 4;
            esi53 = esi53 + 4;
        }
        ecx57 = eax54 & 3;
        while (ecx57) {
            --ecx57;
            *reinterpret_cast<void***>(edi56) = *reinterpret_cast<void***>(esi53);
            ++edi56;
            ++esi53;
        }
        return *reinterpret_cast<void***>(&eax54);
    }
    ecx58 = *reinterpret_cast<void***>(ecx46) - 1;
    if (!ecx58) {
        edi59 = a2;
        if (*reinterpret_cast<void***>(edi59 + 8) == 8) {
            edx60 = *reinterpret_cast<void***>(eax45 + 4) - 1;
            if (!edx60) {
                if (*reinterpret_cast<void***>(eax45 + 8) == 16) {
                    eax45 = a3;
                    esi61 = *reinterpret_cast<void***>(edi59);
                    if (eax45) {
                        ebx62 = eax45;
                        do {
                            ecx63 = esi61;
                            ++esi61;
                            eax45 = fun_1801aba0(ecx63, ecx63, ebp44 + 12);
                            --ebx62;
                        } while (ebx62);
                    }
                } else {
                    if (*reinterpret_cast<void***>(eax45 + 8) == 32) {
                        eax45 = a3;
                        esi64 = *reinterpret_cast<void***>(edi59);
                        if (eax45) {
                            ebx65 = eax45;
                            do {
                                __asm__("fld dword [0x18034ca4]");
                                ecx66 = esi64;
                                ++esi64;
                                __asm__("fmul dword [eax]");
                                __asm__("fstp dword [ebp+0x8]");
                                __asm__("fld dword [ebp+0x8]");
                                __asm__("fistp dword [ebp-0x4]");
                                ax67 = fun_1801aba0(ecx66, ecx66, ebp44 + 12);
                                --ebx65;
                            } while (ebx65);
                            return ax67;
                        }
                    } else {
                        addr_0x1801ab0c_24:
                        ax75 = fun_18017250(edi59, a3, edi68, esi69, ebx70, v71, v72, v49, v50, v73, ebp74, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
                        return ax75;
                    }
                }
            } else {
                if (edx60 - 1) 
                    goto addr_0x1801ab0c_24;
                if (*reinterpret_cast<void***>(eax45 + 8) == 8) 
                    goto addr_0x1801aacf_27; else 
                    goto addr_0x1801aa3a_28;
            }
        } else {
            if (*reinterpret_cast<void***>(edi59 + 8) == 16) {
                ecx76 = *reinterpret_cast<void***>(edi59);
                edx77 = *reinterpret_cast<void***>(eax45 + 4) - 1;
                if (!edx77) {
                    if (*reinterpret_cast<void***>(eax45 + 8) == 8) {
                        esi78 = *reinterpret_cast<void***>(eax45);
                        eax45 = a3;
                        if (eax45) {
                            edx79 = eax45;
                            do {
                                eax80 = esi78;
                                edi81 = ecx76;
                                ebx82 = 0;
                                ecx76 = ecx76 + 2;
                                ++esi78;
                                *reinterpret_cast<unsigned char*>(&eax80) = reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax80)) ^ 0x80);
                                --edx79;
                                *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&ebx82) + 1) = *reinterpret_cast<unsigned char*>(&eax80);
                                *reinterpret_cast<void***>(edi81) = *reinterpret_cast<void***>(&ebx82);
                            } while (edx79);
                            return eax80;
                        }
                    } else {
                        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax45 + 8) == 32)) 
                            goto addr_0x1801ab0c_24;
                        eax45 = *reinterpret_cast<void***>(eax45);
                        edx83 = ecx76;
                        if (a3) {
                            edi84 = a3;
                            do {
                                __asm__("fld dword [0x18034ca4]");
                                esi85 = edx83;
                                edx83 = edx83 + 2;
                                eax45 = eax45 + 4;
                                __asm__("fmul dword [ecx]");
                                __asm__("fstp dword [ebp+0xc]");
                                __asm__("fld dword [ebp+0xc]");
                                __asm__("fistp dword [ebp+0x8]");
                                ecx86 = a2;
                                if (reinterpret_cast<signed char>(ecx86) < reinterpret_cast<signed char>(0x7fff)) {
                                    if (reinterpret_cast<signed char>(ecx86) < reinterpret_cast<signed char>(0xffff8000)) {
                                        ecx86 = reinterpret_cast<void**>(0xffff8000);
                                    }
                                } else {
                                    ecx86 = reinterpret_cast<void**>(0x7fff);
                                }
                                --edi84;
                                *reinterpret_cast<void***>(esi85) = ecx86;
                            } while (edi84);
                            return eax45;
                        }
                    }
                } else {
                    if (edx77 - 1) 
                        goto addr_0x1801ab0c_24;
                    if (*reinterpret_cast<void***>(eax45 + 8) == 8) 
                        goto addr_0x1801a948_47; else 
                        goto addr_0x1801a8ae_48;
                }
            } else {
                if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(edi59 + 8) == 32)) 
                    goto addr_0x1801ab0c_24;
                edx87 = *reinterpret_cast<void***>(eax45 + 4) - 1;
                if (!edx87) 
                    goto addr_0x1801a80f_51; else 
                    goto addr_0x1801a740_52;
            }
        }
    } else {
        edi59 = a2;
        if (ecx58 - 1) 
            goto addr_0x1801ab0c_24;
        if (*reinterpret_cast<void***>(edi59 + 8) == 8) 
            goto addr_0x1801a584_55; else 
            goto addr_0x1801a294_56;
    }
    return eax45;
    addr_0x1801aacf_27:
    eax45 = *reinterpret_cast<void***>(eax45);
    esi88 = *reinterpret_cast<void***>(edi59);
    if (a3) {
        edi89 = a3;
        do {
            ecx90 = 0;
            edx91 = 0;
            *reinterpret_cast<void***>(&ecx90) = *reinterpret_cast<void***>(eax45 + 1);
            *reinterpret_cast<void***>(&edx91) = *reinterpret_cast<void***>(eax45);
            eax45 = eax45 + 2;
            ecx92 = ecx90 + edx91 >> 1;
            *reinterpret_cast<void***>(esi88) = *reinterpret_cast<void***>(&ecx92);
            ++esi88;
            --edi89;
        } while (edi89);
        return eax45;
    }
    addr_0x1801aa3a_28:
    if (*reinterpret_cast<void***>(eax45 + 8) == 16) {
        esi93 = *reinterpret_cast<void***>(eax45);
        eax45 = a3;
        edi94 = *reinterpret_cast<void***>(edi59);
        if (eax45) {
            ebx95 = eax45;
            do {
                ecx96 = reinterpret_cast<void**>(static_cast<int32_t>(reinterpret_cast<int16_t>(*reinterpret_cast<void***>(esi93))));
                ax97 = fun_1801aba0(ecx96, edi94, ebp44 + 12);
                esi93 = esi93 + 4;
                ++edi94;
                --ebx95;
            } while (ebx95);
            return ax97;
        }
    } else {
        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax45 + 8) == 32)) 
            goto addr_0x1801ab0c_24;
        eax45 = a3;
        edi98 = *reinterpret_cast<void***>(edi59);
        if (eax45) {
            ebx99 = eax45;
            do {
                __asm__("fld dword [esi+0x4]");
                __asm__("fadd dword [esi]");
                __asm__("fmul dword [0x18034774]");
                __asm__("fmul dword [0x18034ca4]");
                __asm__("fstp dword [ebp+0x8]");
                __asm__("fld dword [ebp+0x8]");
                __asm__("fistp dword [ebp-0x4]");
                ax101 = fun_1801aba0(v100, edi98, ebp44 + 12);
                ++edi98;
                --ebx99;
            } while (ebx99);
            return ax101;
        }
    }
    addr_0x1801a948_47:
    eax45 = *reinterpret_cast<void***>(eax45);
    esi102 = ecx76;
    if (a3) {
        edi103 = a3;
        do {
            ecx104 = 0;
            edx105 = 0;
            *reinterpret_cast<void***>(&ecx104) = *reinterpret_cast<void***>(eax45 + 1);
            *reinterpret_cast<void***>(&edx105) = *reinterpret_cast<void***>(eax45);
            edx106 = 0;
            ecx107 = ecx104 + edx105 >> 1;
            eax45 = eax45 + 2;
            *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&edx106) + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&ecx107) ^ 0x80);
            *reinterpret_cast<void***>(esi102) = *reinterpret_cast<void***>(&edx106);
            esi102 = esi102 + 2;
            --edi103;
        } while (edi103);
        return eax45;
    }
    addr_0x1801a8ae_48:
    if (*reinterpret_cast<void***>(eax45 + 8) == 16) {
        edx108 = a3;
        eax45 = *reinterpret_cast<void***>(eax45);
        if (edx108) {
            do {
                eax45 = eax45 + 4;
                esi109 = reinterpret_cast<int16_t>(*reinterpret_cast<void***>(eax45 + 2)) + reinterpret_cast<int16_t>(*reinterpret_cast<void***>(eax45)) >> 1;
                *reinterpret_cast<void***>(ecx76) = *reinterpret_cast<void***>(&esi109);
                ecx76 = ecx76 + 2;
                --edx108;
            } while (edx108);
            return eax45;
        }
    } else {
        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax45 + 8) == 32)) 
            goto addr_0x1801ab0c_24;
        eax45 = *reinterpret_cast<void***>(eax45);
        edx110 = ecx76;
        if (a3) {
            esi111 = a3;
            do {
                __asm__("fld dword [eax+0x4]");
                __asm__("fadd dword [eax]");
                __asm__("fmul dword [0x18034774]");
                __asm__("fmul dword [0x18034ca4]");
                __asm__("fstp dword [ebp+0xc]");
                __asm__("fld dword [ebp+0xc]");
                __asm__("fistp dword [ebp+0x8]");
                ecx112 = a2;
                if (reinterpret_cast<signed char>(ecx112) < reinterpret_cast<signed char>(0x7fff)) {
                    if (reinterpret_cast<signed char>(ecx112) < reinterpret_cast<signed char>(0xffff8000)) {
                        ecx112 = reinterpret_cast<void**>(0xffff8000);
                    }
                } else {
                    ecx112 = reinterpret_cast<void**>(0x7fff);
                }
                *reinterpret_cast<void***>(edx110) = ecx112;
                eax45 = eax45 + 8;
                edx110 = edx110 + 2;
                --esi111;
            } while (esi111);
            return eax45;
        }
    }
    addr_0x1801a80f_51:
    if (*reinterpret_cast<void***>(eax45 + 8) == 8) {
        edx113 = a3;
        eax45 = *reinterpret_cast<void***>(eax45);
        if (edx113) {
            do {
                ++eax45;
                --edx113;
                __asm__("fild dword [ebp+0xc]");
                __asm__("fmul dword [0x18034ca8]");
                __asm__("fstp dword [edi]");
            } while (edx113);
            return eax45;
        }
    } else {
        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax45 + 8) == 16)) 
            goto addr_0x1801ab0c_24;
        eax45 = *reinterpret_cast<void***>(eax45);
        if (a3) {
            edi114 = a3;
            do {
                eax45 = eax45 + 2;
                --edi114;
                __asm__("fild dword [ebp+0xc]");
                __asm__("fmul dword [0x18034ca0]");
                __asm__("fstp dword [esi]");
            } while (edi114);
            return eax45;
        }
    }
    addr_0x1801a740_52:
    if (edx87 - 1) 
        goto addr_0x1801ab0c_24;
    if (*reinterpret_cast<void***>(eax45 + 8) != 8) 
        goto addr_0x1801a74f_94;
    eax45 = *reinterpret_cast<void***>(eax45);
    if (a3) {
        esi115 = a3;
        do {
            eax45 = eax45 + 2;
            --esi115;
            __asm__("fild dword [ebp+0xc]");
            __asm__("fmul dword [0x18034ca8]");
            __asm__("fstp dword [ecx-0x4]");
        } while (esi115);
        return eax45;
    }
    addr_0x1801a74f_94:
    if (*reinterpret_cast<void***>(eax45 + 8) == 16) {
        edx116 = a3;
        eax45 = *reinterpret_cast<void***>(eax45);
        if (edx116) {
            do {
                eax45 = eax45 + 4;
                __asm__("fild dword [ebp+0xc]");
                --edx116;
                __asm__("fmul dword [0x18034ca0]");
                __asm__("fstp dword [ecx-0x4]");
            } while (edx116);
            return eax45;
        }
    } else {
        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax45 + 8) == 32)) 
            goto addr_0x1801ab0c_24;
        edx117 = a3;
        eax45 = *reinterpret_cast<void***>(eax45);
        if (edx117) {
            do {
                __asm__("fld dword [eax+0x4]");
                __asm__("fadd dword [eax]");
                eax45 = eax45 + 8;
                --edx117;
                __asm__("fmul dword [0x18034774]");
                __asm__("fstp dword [ecx-0x4]");
            } while (edx117);
            return eax45;
        }
    }
    addr_0x1801a584_55:
    esi118 = *reinterpret_cast<void***>(edi59);
    ecx119 = *reinterpret_cast<void***>(eax45 + 4) - 1;
    if (!ecx119) {
        if (*reinterpret_cast<void***>(eax45 + 8) == 8) {
            eax45 = *reinterpret_cast<void***>(eax45);
            ecx120 = esi118;
            if (a3) {
                esi121 = a3;
                do {
                    edx122 = eax45;
                    ++eax45;
                    ecx120 = ecx120 + 2;
                    --esi121;
                    dl123 = *reinterpret_cast<void***>(edx122);
                    *reinterpret_cast<void***>(ecx120 + 0xffffffff) = dl123;
                    *reinterpret_cast<void***>(ecx120 + 0xfffffffe) = dl123;
                } while (esi121);
                return eax45;
            }
        } else {
            if (*reinterpret_cast<void***>(eax45 + 8) == 16) {
                eax45 = *reinterpret_cast<void***>(eax45);
                if (a3) {
                    edi124 = a3;
                    do {
                        ecx125 = eax45;
                        eax45 = eax45 + 2;
                        ecx126 = reinterpret_cast<uint32_t>(reinterpret_cast<int16_t>(*reinterpret_cast<void***>(ecx125)) + 0x8080 >> 8);
                        if (reinterpret_cast<int32_t>(ecx126) <= reinterpret_cast<int32_t>(0xff)) {
                            edx47 = reinterpret_cast<void**>(static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(ecx126) < reinterpret_cast<int32_t>(0))));
                            edx47 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx47 - 1) & ecx126);
                        } else {
                            edx47 = reinterpret_cast<void**>(0xff);
                        }
                        *reinterpret_cast<void***>(esi118 + 1) = edx47;
                        *reinterpret_cast<void***>(esi118) = edx47;
                        esi118 = esi118 + 2;
                        --edi124;
                    } while (edi124);
                    return eax45;
                }
            } else {
                if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax45 + 8) == 32)) 
                    goto addr_0x1801ab0c_24;
                eax45 = *reinterpret_cast<void***>(eax45);
                if (a3) {
                    edi127 = a3;
                    do {
                        __asm__("fld dword [0x18034ca4]");
                        eax45 = eax45 + 4;
                        __asm__("fmul dword [ecx]");
                        __asm__("fstp dword [ebp+0xc]");
                        __asm__("fld dword [ebp+0xc]");
                        __asm__("fistp dword [ebp+0x8]");
                        ecx128 = reinterpret_cast<uint32_t>(reinterpret_cast<int32_t>(a2 + 0x8080) >> 8);
                        if (reinterpret_cast<int32_t>(ecx128) <= reinterpret_cast<int32_t>(0xff)) {
                            edx47 = reinterpret_cast<void**>(static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(ecx128) < reinterpret_cast<int32_t>(0))));
                            edx47 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx47 - 1) & ecx128);
                        } else {
                            edx47 = reinterpret_cast<void**>(0xff);
                        }
                        *reinterpret_cast<void***>(esi118 + 1) = edx47;
                        *reinterpret_cast<void***>(esi118) = edx47;
                        esi118 = esi118 + 2;
                        --edi127;
                    } while (edi127);
                    return eax45;
                }
            }
        }
    } else {
        if (ecx119 - 1) 
            goto addr_0x1801ab0c_24;
        if (*reinterpret_cast<void***>(eax45 + 8) != 16) 
            goto addr_0x1801a59f_129;
    }
    ecx129 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(a3));
    if (ecx129) {
        ebx130 = reinterpret_cast<uint32_t>(ecx129) - 1 + 1;
        do {
            ecx131 = esi118;
            ++esi118;
            ax132 = fun_1801aba0(ecx131, ecx131, ebp44 + 12);
            --ebx130;
        } while (ebx130);
        return ax132;
    }
    addr_0x1801a59f_129:
    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax45 + 8) == 32)) 
        goto addr_0x1801ab0c_24;
    ecx133 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(a3));
    if (ecx133) {
        ebx134 = reinterpret_cast<uint32_t>(ecx133) - 1 + 1;
        do {
            __asm__("fld dword [0x18034ca4]");
            ecx135 = esi118;
            ++esi118;
            __asm__("fmul dword [eax]");
            __asm__("fstp dword [ebp+0x8]");
            __asm__("fld dword [ebp+0x8]");
            __asm__("fistp dword [ebp-0x4]");
            ax136 = fun_1801aba0(ecx135, ecx135, ebp44 + 12);
            --ebx134;
        } while (ebx134);
        return ax136;
    }
    addr_0x1801a294_56:
    if (*reinterpret_cast<void***>(edi59 + 8) == 16) {
        ecx137 = *reinterpret_cast<void***>(edi59);
        edx138 = *reinterpret_cast<void***>(eax45 + 4) - 1;
        if (!edx138) {
            if (*reinterpret_cast<void***>(eax45 + 8) == 8) {
                esi139 = *reinterpret_cast<void***>(eax45);
                eax45 = a3;
                if (eax45) {
                    edi140 = eax45;
                    do {
                        eax141 = esi139;
                        ++esi139;
                        ecx137 = ecx137 + 4;
                        eax142 = 0;
                        --edi140;
                        *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax142) + 1) = reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax141)) ^ 0x80);
                        edx143 = eax142;
                        *reinterpret_cast<void***>(ecx137 + 0xfffffffe) = *reinterpret_cast<void***>(&edx143);
                        *reinterpret_cast<void***>(ecx137 + 0xfffffffc) = *reinterpret_cast<void***>(&edx143);
                    } while (edi140);
                    return *reinterpret_cast<void***>(&eax142);
                }
            } else {
                if (*reinterpret_cast<void***>(eax45 + 8) == 16) {
                    eax45 = *reinterpret_cast<void***>(eax45);
                    if (a3) {
                        esi144 = a3;
                        do {
                            edx145 = eax45;
                            eax45 = eax45 + 2;
                            ecx137 = ecx137 + 4;
                            --esi144;
                            dx146 = *reinterpret_cast<void***>(edx145);
                            *reinterpret_cast<void***>(ecx137 + 0xfffffffe) = dx146;
                            *reinterpret_cast<void***>(ecx137 + 0xfffffffc) = dx146;
                        } while (esi144);
                        return eax45;
                    }
                } else {
                    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax45 + 8) == 32)) 
                        goto addr_0x1801ab0c_24;
                    eax45 = *reinterpret_cast<void***>(eax45);
                    edx147 = ecx137;
                    if (a3) {
                        esi148 = a3;
                        do {
                            __asm__("fld dword [0x18034ca4]");
                            eax45 = eax45 + 4;
                            __asm__("fmul dword [ecx]");
                            __asm__("fstp dword [ebp+0xc]");
                            __asm__("fld dword [ebp+0xc]");
                            __asm__("fistp dword [ebp+0x8]");
                            ecx149 = a2;
                            if (reinterpret_cast<signed char>(ecx149) < reinterpret_cast<signed char>(0x7fff)) {
                                if (reinterpret_cast<signed char>(ecx149) < reinterpret_cast<signed char>(0xffff8000)) {
                                    ecx149 = reinterpret_cast<void**>(0xffff8000);
                                }
                            } else {
                                ecx149 = reinterpret_cast<void**>(0x7fff);
                            }
                            *reinterpret_cast<void***>(edx147 + 2) = ecx149;
                            *reinterpret_cast<void***>(edx147) = ecx149;
                            edx147 = edx147 + 4;
                            --esi148;
                        } while (esi148);
                        return eax45;
                    }
                }
            }
        } else {
            if (edx138 - 1) 
                goto addr_0x1801ab0c_24;
            if (*reinterpret_cast<void***>(eax45 + 8) != 8) 
                goto addr_0x1801a410_160;
        }
    } else {
        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(edi59 + 8) == 32)) 
            goto addr_0x1801ab0c_24;
        edx150 = *reinterpret_cast<void***>(eax45 + 4) - 1;
        if (!edx150) 
            goto addr_0x1801a345_163; else 
            goto addr_0x1801a2b2_164;
    }
    esi151 = *reinterpret_cast<void***>(eax45);
    edx152 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(a3));
    eax45 = edx152;
    if (eax45) {
        edx153 = edx152 - 1 + 1;
        do {
            eax154 = esi151;
            edi155 = ecx137;
            ebx156 = 0;
            ecx137 = ecx137 + 2;
            ++esi151;
            *reinterpret_cast<unsigned char*>(&eax154) = reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax154)) ^ 0x80);
            --edx153;
            *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&ebx156) + 1) = *reinterpret_cast<unsigned char*>(&eax154);
            *reinterpret_cast<void***>(edi155) = *reinterpret_cast<void***>(&ebx156);
        } while (edx153);
        return eax154;
    }
    addr_0x1801a410_160:
    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax45 + 8) == 32)) 
        goto addr_0x1801ab0c_24;
    eax45 = *reinterpret_cast<void***>(eax45);
    esi157 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(a3));
    edx158 = ecx137;
    if (esi157) {
        edi159 = reinterpret_cast<uint32_t>(esi157) - 1 + 1;
        do {
            __asm__("fld dword [0x18034ca4]");
            esi160 = edx158;
            edx158 = edx158 + 2;
            eax45 = eax45 + 4;
            __asm__("fmul dword [ecx]");
            __asm__("fstp dword [ebp+0xc]");
            __asm__("fld dword [ebp+0xc]");
            __asm__("fistp dword [ebp+0x8]");
            ecx161 = a2;
            if (reinterpret_cast<signed char>(ecx161) < reinterpret_cast<signed char>(0x7fff)) {
                if (reinterpret_cast<signed char>(ecx161) < reinterpret_cast<signed char>(0xffff8000)) {
                    ecx161 = reinterpret_cast<void**>(0xffff8000);
                }
            } else {
                ecx161 = reinterpret_cast<void**>(0x7fff);
            }
            --edi159;
            *reinterpret_cast<void***>(esi160) = ecx161;
        } while (edi159);
        return eax45;
    }
    addr_0x1801a345_163:
    if (*reinterpret_cast<void***>(eax45 + 8) == 8) {
        edi162 = a3;
        eax45 = *reinterpret_cast<void***>(eax45);
        if (edi162) {
            do {
                ++eax45;
                --edi162;
                __asm__("fild dword [ebp+0xc]");
                __asm__("fmul dword [0x18034ca8]");
                __asm__("fst dword [ecx-0x4]");
                __asm__("fstp dword [ecx-0x8]");
            } while (edi162);
            return eax45;
        }
    } else {
        if (*reinterpret_cast<void***>(eax45 + 8) == 16) {
            esi163 = a3;
            eax45 = *reinterpret_cast<void***>(eax45);
            if (esi163) {
                do {
                    eax45 = eax45 + 2;
                    --esi163;
                    __asm__("fild dword [ebp+0xc]");
                    __asm__("fmul dword [0x18034ca0]");
                    __asm__("fst dword [ecx-0x4]");
                    __asm__("fstp dword [ecx-0x8]");
                } while (esi163);
                return eax45;
            }
        } else {
            if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax45 + 8) == 32)) 
                goto addr_0x1801ab0c_24;
            esi164 = a3;
            eax45 = *reinterpret_cast<void***>(eax45);
            if (esi164) {
                do {
                    eax45 = eax45 + 4;
                    --esi164;
                    __asm__("fld dword [edx]");
                    __asm__("fst dword [ecx-0x4]");
                    __asm__("fstp dword [ecx-0x8]");
                } while (esi164);
                return eax45;
            }
        }
    }
    addr_0x1801a2b2_164:
    if (edx150 - 1) 
        goto addr_0x1801ab0c_24;
    if (*reinterpret_cast<void***>(eax45 + 8) != 8) 
        goto addr_0x1801a2c1_189;
    eax45 = *reinterpret_cast<void***>(eax45);
    edx165 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(a3));
    if (edx165) {
        edx166 = reinterpret_cast<uint32_t>(edx165) - 1 + 1;
        do {
            ++eax45;
            --edx166;
            __asm__("fild dword [ebp+0xc]");
            __asm__("fmul dword [0x18034ca8]");
            __asm__("fstp dword [edi]");
        } while (edx166);
        return eax45;
    }
    addr_0x1801a2c1_189:
    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax45 + 8) == 16)) 
        goto addr_0x1801ab0c_24;
    eax45 = *reinterpret_cast<void***>(eax45);
    edx167 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(a3));
    if (edx167) {
        edi168 = reinterpret_cast<uint32_t>(edx167) - 1 + 1;
        do {
            eax45 = eax45 + 2;
            --edi168;
            __asm__("fild dword [ebp+0xc]");
            __asm__("fmul dword [0x18034ca0]");
            __asm__("fstp dword [esi]");
        } while (edi168);
        return eax45;
    }
}

void** fun_180217d0(void** a1, void** a2, void** a3, void** a4);

void** fun_18021810(void** a1, void** a2, void** a3, void** a4);

void** fun_18021860(void** a1, void** a2, void** a3, void** a4);

void** fun_180216c0(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34) {
    void** eax35;
    void** v36;
    void** v37;
    void** v38;
    void** edx39;
    int1_t zf40;
    void** v41;
    void** v42;
    void** v43;
    void** edx44;
    void** ecx45;
    void** eax46;
    void** ax47;
    void** edx48;
    void** ecx49;
    void** eax50;
    void** ax51;
    void** edx52;
    void** ecx53;
    void** eax54;
    void** ax55;
    void** edi56;
    void** esi57;
    void** ebp58;
    void** ebx59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** ax64;

    eax35 = *reinterpret_cast<void***>(a2 + 4);
    v36 = *reinterpret_cast<void***>(a2 + 4 + 4);
    v37 = *reinterpret_cast<void***>(a2 + 4 + 8);
    v38 = *reinterpret_cast<void***>(a2 + 4 + 12);
    edx39 = a1 + 4;
    zf40 = *reinterpret_cast<void***>(edx39) == eax35;
    v41 = *reinterpret_cast<void***>(edx39 + 4);
    v42 = *reinterpret_cast<void***>(edx39 + 8);
    v43 = *reinterpret_cast<void***>(edx39 + 12);
    if (zf40 && (v41 == v36 && (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(edx39) == 1) && reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a3 + 4) == 2)))) {
        if (*reinterpret_cast<void***>(a3 + 8) == 8) {
            if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a1 + 8) == 8)) {
                edx44 = *reinterpret_cast<void***>(a3);
                ecx45 = *reinterpret_cast<void***>(a1);
                eax46 = *reinterpret_cast<void***>(a2);
                ax47 = fun_180217d0(ecx45, eax46, edx44, a4);
                return ax47;
            }
        } else {
            if (*reinterpret_cast<void***>(a3 + 8) == 16) {
                if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a1 + 8) == 16)) {
                    edx48 = *reinterpret_cast<void***>(a3);
                    ecx49 = *reinterpret_cast<void***>(a1);
                    eax50 = *reinterpret_cast<void***>(a2);
                    ax51 = fun_18021810(ecx49, eax50, edx48, a4);
                    return ax51;
                }
            } else {
                if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a3 + 8) == 32) && reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a1 + 8) == 32)) {
                    edx52 = *reinterpret_cast<void***>(a3);
                    ecx53 = *reinterpret_cast<void***>(a1);
                    eax54 = *reinterpret_cast<void***>(a2);
                    ax55 = fun_18021860(ecx53, eax54, edx52, a4);
                    return ax55;
                }
            }
        }
    }
    fun_18017250(a1, a4, edi56, esi57, ebp58, ebx59, v60, v36, v37, v38, v61, v41, v42, v43, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    ax64 = fun_18017250(a2, a4, edi56, esi57, ebp58, ebx59, v62, v36, v37, v38, v63, v41, v42, v43, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    return ax64;
}

void** fun_18021a90(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6);

void** fun_18021ae0(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6);

void** fun_18021b40(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6);

void** fun_180218a0(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10) {
    void** eax11;
    void** edi12;
    void** v13;
    void** v14;
    void** edx15;
    int1_t zf16;
    void** v17;
    void** v18;
    void** v19;
    void** eax20;
    void** esi21;
    int1_t zf22;
    void** v23;
    void** esi24;
    void** edi25;
    int1_t zf26;
    void** eax27;
    void** ecx28;
    void** v29;
    void** v30;
    void** v31;
    void** ax32;
    void** eax33;
    void** ecx34;
    void** v35;
    void** v36;
    void** v37;
    void** ax38;
    void** eax39;
    void** ecx40;
    void** v41;
    void** v42;
    void** v43;
    void** ax44;
    void** edi45;
    void** esi46;
    void** ebp47;
    void** ebx48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** ax57;

    eax11 = *reinterpret_cast<void***>(a2 + 4);
    edi12 = *reinterpret_cast<void***>(a2 + 4 + 4);
    v13 = *reinterpret_cast<void***>(a2 + 4 + 8);
    v14 = *reinterpret_cast<void***>(a2 + 4 + 12);
    edx15 = a1 + 4;
    zf16 = *reinterpret_cast<void***>(edx15) == eax11;
    v17 = *reinterpret_cast<void***>(edx15 + 4);
    v18 = *reinterpret_cast<void***>(edx15 + 8);
    v19 = *reinterpret_cast<void***>(edx15 + 12);
    if (zf16 && (v17 == edi12 && ((eax20 = a4 + 4, esi21 = *reinterpret_cast<void***>(eax20), v17 = *reinterpret_cast<void***>(eax20 + 4), v18 = *reinterpret_cast<void***>(eax20 + 8), v19 = *reinterpret_cast<void***>(eax20 + 12), zf22 = *reinterpret_cast<void***>(a3 + 4) == esi21, v23 = *reinterpret_cast<void***>(a3 + 4 + 4), v13 = *reinterpret_cast<void***>(a3 + 4 + 8), v14 = *reinterpret_cast<void***>(a3 + 4 + 12), zf22) && (v23 == v17 && ((esi24 = *reinterpret_cast<void***>(eax20), edi25 = *reinterpret_cast<void***>(eax20 + 4), zf26 = *reinterpret_cast<void***>(edx15) == esi24, v23 = *reinterpret_cast<void***>(edx15 + 4), v13 = *reinterpret_cast<void***>(edx15 + 8), v14 = *reinterpret_cast<void***>(edx15 + 12), zf26) && (v23 == edi25 && (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a5 + 4) == 4) && reinterpret_cast<int1_t>(*reinterpret_cast<void***>(edx15) == 1)))))))) {
        if (*reinterpret_cast<void***>(a5 + 8) == 8) {
            if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a1 + 8) == 8)) {
                eax27 = *reinterpret_cast<void***>(a5);
                ecx28 = *reinterpret_cast<void***>(a1);
                v29 = *reinterpret_cast<void***>(a4);
                v30 = *reinterpret_cast<void***>(a3);
                v31 = *reinterpret_cast<void***>(a2);
                ax32 = fun_18021a90(ecx28, v31, v30, v29, eax27, a6);
                return ax32;
            }
        } else {
            if (*reinterpret_cast<void***>(a5 + 8) == 16) {
                if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a1 + 8) == 16)) {
                    eax33 = *reinterpret_cast<void***>(a5);
                    ecx34 = *reinterpret_cast<void***>(a1);
                    v35 = *reinterpret_cast<void***>(a4);
                    v36 = *reinterpret_cast<void***>(a3);
                    v37 = *reinterpret_cast<void***>(a2);
                    ax38 = fun_18021ae0(ecx34, v37, v36, v35, eax33, a6);
                    return ax38;
                }
            } else {
                if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a5 + 8) == 32) && reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a1 + 8) == 32)) {
                    eax39 = *reinterpret_cast<void***>(a5);
                    ecx40 = *reinterpret_cast<void***>(a1);
                    v41 = *reinterpret_cast<void***>(a4);
                    v42 = *reinterpret_cast<void***>(a3);
                    v43 = *reinterpret_cast<void***>(a2);
                    ax44 = fun_18021b40(ecx40, v43, v42, v41, eax39, a6);
                    return ax44;
                }
            }
        }
    }
    fun_18017250(a1, a6, edi45, esi46, ebp47, ebx48, v49, v17, v18, v19, v50, v23, v13, v14, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    fun_18017250(a2, a6, edi45, esi46, ebp47, ebx48, v51, v17, v18, v19, v52, v23, v13, v14, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    fun_18017250(a3, a6, edi45, esi46, ebp47, ebx48, v53, v17, v18, v19, v54, v23, v13, v14, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    ax57 = fun_18017250(a4, a6, edi45, esi46, ebp47, ebx48, v55, v17, v18, v19, v56, v23, v13, v14, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    return ax57;
}

void** fun_18021c40(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18) {
    void*** ebp19;
    void** v20;
    void** edx21;
    void** eax22;
    void** esi23;
    void** edi24;
    void** esi25;
    void** v26;
    void** ecx27;
    void** eax28;
    void** esi29;
    void** ecx30;
    void* edx31;
    int32_t edi32;
    void** esi33;
    void** esi34;
    void** ecx35;
    void** edi36;
    void* esi37;
    void** esi38;
    void** ecx39;
    void* edi40;
    int32_t ebx41;
    int32_t ebx42;
    void** edi43;
    void** edi44;
    void** esi45;
    void** ebx46;
    void** ebp47;
    void** ax48;
    void** edi49;
    void** esi50;
    void** ebx51;
    void** v52;
    void** v53;
    void** ecx54;
    void** eax55;
    void** esi56;
    void** ecx57;
    void* edx58;
    void** esi59;
    void** edi60;
    void** ecx61;
    uint32_t eax62;
    int32_t edx63;
    uint32_t edx64;
    void** edi65;
    void** ecx66;
    void** eax67;
    void** esi68;
    void** edi69;
    void** v70;
    uint32_t eax71;
    int32_t ecx72;
    uint32_t ecx73;
    void** eax74;
    void** edi75;
    void** ecx76;
    void** eax77;
    void** eax78;
    void** esi79;
    void** ecx80;
    void* edx81;

    ebp19 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    v20 = ecx;
    edx21 = *reinterpret_cast<void***>(a3 + 8);
    if (edx21 == 8) {
        eax22 = *reinterpret_cast<void***>(a4);
        if (*reinterpret_cast<void***>(a2 + 4) - 2) 
            goto addr_0x180220d1_3;
        if (*reinterpret_cast<void***>(a2 + 8) != 8) 
            goto addr_0x180220c7_5;
    } else {
        if (edx21 == 16) {
            eax22 = *reinterpret_cast<void***>(a4);
            esi23 = *reinterpret_cast<void***>(a2 + 4) - 1;
            if (!esi23) {
                if (*reinterpret_cast<void***>(a2 + 8) == 8) {
                    edi24 = *reinterpret_cast<void***>(a2);
                    esi25 = eax22;
                    if (a5) {
                        v26 = a5;
                        do {
                            ecx27 = reinterpret_cast<void**>(static_cast<int32_t>(reinterpret_cast<int16_t>(*reinterpret_cast<void***>(esi25))));
                            fun_1801aba0(ecx27, edi24, ebp19 + 16);
                            esi25 = esi25 + 2;
                            ++edi24;
                            eax28 = v26 - 1;
                            v26 = eax28;
                        } while (eax28);
                        return eax28;
                    }
                } else {
                    if (*reinterpret_cast<void***>(a2 + 8) == 16) {
                        esi29 = a5;
                        ecx30 = *reinterpret_cast<void***>(a2);
                        if (esi29) {
                            edx31 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a3)) - reinterpret_cast<unsigned char>(eax22));
                            do {
                                eax22 = eax22 + 2;
                                edi32 = *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edx31) + reinterpret_cast<unsigned char>(eax22)) + reinterpret_cast<int16_t>(*reinterpret_cast<void***>(eax22)) >> 1;
                                *reinterpret_cast<void***>(ecx30) = *reinterpret_cast<void***>(&edi32);
                                ecx30 = ecx30 + 2;
                                --esi29;
                            } while (esi29);
                            return eax22;
                        }
                    } else {
                        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a2 + 8) == 32)) 
                            goto addr_0x180220d1_3;
                        esi33 = a5;
                        if (esi33) {
                            do {
                                eax22 = eax22 + 2;
                                __asm__("fild dword [ebp+0x14]");
                                --esi33;
                                __asm__("fmul dword [0x18035094]");
                                __asm__("fstp dword [ecx-0x4]");
                            } while (esi33);
                            return eax22;
                        }
                    }
                }
            } else {
                if (esi23 - 1) 
                    goto addr_0x180220d1_3;
                if (*reinterpret_cast<void***>(a2 + 8) == 8) 
                    goto addr_0x18021f89_25; else 
                    goto addr_0x18021f04_26;
            }
        } else {
            if (!reinterpret_cast<int1_t>(edx21 == 32)) 
                goto addr_0x180220d1_3;
            eax22 = *reinterpret_cast<void***>(a4);
            esi34 = *reinterpret_cast<void***>(a2 + 4) - 1;
            if (!esi34) 
                goto addr_0x18021dd7_29; else 
                goto addr_0x18021c7c_30;
        }
    }
    ecx35 = *reinterpret_cast<void***>(a2);
    if (a5) {
        edi36 = a5;
        esi37 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a3)) - reinterpret_cast<unsigned char>(eax22));
        do {
            ++eax22;
            *reinterpret_cast<void***>(ecx35) = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi37) + reinterpret_cast<unsigned char>(eax22));
            *reinterpret_cast<void***>(ecx35 + 1) = *reinterpret_cast<void***>(eax22 + 0xffffffff);
            ecx35 = ecx35 + 2;
            --edi36;
        } while (edi36);
    }
    return eax22;
    addr_0x180220c7_5:
    if (*reinterpret_cast<void***>(a2 + 8) == 16) {
        esi38 = *reinterpret_cast<void***>(a2);
        ecx39 = a5;
        if (ecx39) {
            edi40 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a3)) - reinterpret_cast<unsigned char>(eax22));
            do {
                ebx41 = 0;
                esi38 = esi38 + 4;
                *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&ebx41) + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(edi40) + reinterpret_cast<unsigned char>(eax22)) ^ 0x80);
                *reinterpret_cast<void***>(esi38 + 0xfffffffc) = *reinterpret_cast<void***>(&ebx41);
                ebx42 = 0;
                *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&ebx42) + 1) = reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax22)) ^ 0x80);
                ++eax22;
                *reinterpret_cast<void***>(esi38 + 0xfffffffe) = *reinterpret_cast<void***>(&ebx42);
                --ecx39;
            } while (ecx39);
            return eax22;
        }
    } else {
        if (*reinterpret_cast<void***>(a2 + 8) == 32) {
            if (a5) {
                edi43 = a5;
                do {
                    __asm__("fild dword [ebp+0x14]");
                    __asm__("fmul dword [0x18034ca8]");
                    __asm__("fstp dword [ecx-0x8]");
                    ++eax22;
                    --edi43;
                    __asm__("fild dword [ebp+0x14]");
                    __asm__("fmul dword [0x18034ca8]");
                    __asm__("fstp dword [ecx-0x4]");
                } while (edi43);
                return eax22;
            }
        } else {
            addr_0x180220d1_3:
            ax48 = fun_18017250(a2, a5, edi44, esi45, ebx46, v20, ebp47, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
            return ax48;
        }
    }
    addr_0x18021f89_25:
    edi49 = *reinterpret_cast<void***>(a2);
    esi50 = eax22;
    if (a5) {
        ebx51 = edi49 + 1;
        v52 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a3)) - reinterpret_cast<unsigned char>(eax22));
        v53 = a5;
        do {
            fun_1801aba0(v52, edi49, ebp19 + 12);
            ecx54 = reinterpret_cast<void**>(static_cast<int32_t>(reinterpret_cast<int16_t>(*reinterpret_cast<void***>(esi50))));
            fun_1801aba0(ecx54, ebx51, ebp19 + 12);
            esi50 = esi50 + 2;
            edi49 = edi49 + 2;
            ebx51 = ebx51 + 2;
            eax55 = v53 - 1;
            v53 = eax55;
        } while (eax55);
        return eax55;
    }
    addr_0x18021f04_26:
    if (*reinterpret_cast<void***>(a2 + 8) == 16) {
        esi56 = a5;
        ecx57 = *reinterpret_cast<void***>(a2);
        if (esi56) {
            edx58 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a3)) - reinterpret_cast<unsigned char>(eax22));
            do {
                eax22 = eax22 + 2;
                *reinterpret_cast<void***>(ecx57) = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(edx58) + reinterpret_cast<unsigned char>(eax22));
                *reinterpret_cast<void***>(ecx57 + 2) = *reinterpret_cast<void***>(eax22 + 0xfffffffe);
                ecx57 = ecx57 + 4;
                --esi56;
            } while (esi56);
            return eax22;
        }
    } else {
        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a2 + 8) == 32)) 
            goto addr_0x180220d1_3;
        esi59 = a5;
        if (esi59) {
            do {
                eax22 = eax22 + 2;
                __asm__("fild dword [ebp+0x14]");
                --esi59;
                __asm__("fmul dword [0x18035094]");
                __asm__("fstp dword [ecx-0x8]");
                __asm__("fild dword [ebp+0x14]");
                __asm__("fmul dword [0x18035094]");
                __asm__("fstp dword [ecx-0x4]");
            } while (esi59);
            return eax22;
        }
    }
    addr_0x18021dd7_29:
    if (*reinterpret_cast<void***>(a2 + 8) == 8) {
        edi60 = a5;
        ecx61 = *reinterpret_cast<void***>(a2);
        if (edi60) {
            do {
                __asm__("fld dword [esi+ebx]");
                __asm__("fadd dword [esi]");
                __asm__("fmul dword [0x18034774]");
                __asm__("fmul dword [0x18035098]");
                __asm__("fstp dword [ebp+0x14]");
                __asm__("fld dword [ebp+0x14]");
                __asm__("fistp dword [ebp+0x10]");
                eax62 = reinterpret_cast<uint32_t>(reinterpret_cast<int32_t>(a4 + 0x8080) >> 8);
                if (reinterpret_cast<int32_t>(eax62) <= reinterpret_cast<int32_t>(0xff)) {
                    edx63 = 0;
                    *reinterpret_cast<unsigned char*>(&edx63) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(eax62) < reinterpret_cast<int32_t>(0)));
                    edx64 = reinterpret_cast<uint32_t>(edx63 - 1) & eax62;
                } else {
                    edx64 = 0xff;
                }
                *reinterpret_cast<void***>(ecx61) = *reinterpret_cast<void***>(&edx64);
                ++ecx61;
                --edi60;
            } while (edi60);
            return *reinterpret_cast<void***>(&eax62);
        }
    } else {
        if (*reinterpret_cast<void***>(a2 + 8) == 16) {
            edi65 = a5;
            ecx66 = *reinterpret_cast<void***>(a2);
            if (edi65) {
                do {
                    __asm__("fld dword [esi+edx]");
                    __asm__("fadd dword [esi]");
                    __asm__("fmul dword [0x18034774]");
                    __asm__("fmul dword [0x18035098]");
                    __asm__("fstp dword [ebp+0x14]");
                    __asm__("fld dword [ebp+0x14]");
                    __asm__("fistp dword [ebp+0x10]");
                    eax67 = a4;
                    if (reinterpret_cast<signed char>(eax67) < reinterpret_cast<signed char>(0x7fff)) {
                        if (reinterpret_cast<signed char>(eax67) < reinterpret_cast<signed char>(0xffff8000)) {
                            eax67 = reinterpret_cast<void**>(0xffff8000);
                        }
                    } else {
                        eax67 = reinterpret_cast<void**>(0x7fff);
                    }
                    *reinterpret_cast<void***>(ecx66) = eax67;
                    ecx66 = ecx66 + 2;
                    --edi65;
                } while (edi65);
                return eax67;
            }
        } else {
            if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a2 + 8) == 32)) 
                goto addr_0x180220d1_3;
            esi68 = a5;
            if (esi68) {
                do {
                    __asm__("fld dword [eax+edx]");
                    __asm__("fadd dword [eax]");
                    eax22 = eax22 + 4;
                    --esi68;
                    __asm__("fmul dword [0x18034774]");
                    __asm__("fstp dword [ecx-0x4]");
                } while (esi68);
                return eax22;
            }
        }
    }
    addr_0x18021c7c_30:
    if (esi34 - 1) 
        goto addr_0x180220d1_3;
    if (*reinterpret_cast<void***>(a2 + 8) != 8) 
        goto addr_0x18021c8f_78;
    edi69 = *reinterpret_cast<void***>(a2);
    if (a5) {
        v70 = a5;
        do {
            __asm__("fld dword [0x18035098]");
            __asm__("fmul dword [esi+ebx]");
            __asm__("fstp dword [ebp+0xc]");
            __asm__("fld dword [ebp+0xc]");
            __asm__("fistp dword [ebp+0x8]");
            fun_1801aba0(a2, edi69, ebp19 + 20);
            __asm__("fld dword [0x18035098]");
            __asm__("fmul dword [esi]");
            __asm__("fstp dword [ebp+0xc]");
            __asm__("fld dword [ebp+0xc]");
            __asm__("fistp dword [ebp-0x4]");
            eax71 = reinterpret_cast<uint32_t>(reinterpret_cast<int32_t>(v20 + 0x8080) >> 8);
            if (reinterpret_cast<int32_t>(eax71) <= reinterpret_cast<int32_t>(0xff)) {
                ecx72 = 0;
                *reinterpret_cast<unsigned char*>(&ecx72) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(eax71) < reinterpret_cast<int32_t>(0)));
                ecx73 = reinterpret_cast<uint32_t>(ecx72 - 1) & eax71;
            } else {
                ecx73 = 0xff;
            }
            *reinterpret_cast<void***>(edi69 + 1) = *reinterpret_cast<void***>(&ecx73);
            edi69 = edi69 + 2;
            eax74 = v70 - 1;
            v70 = eax74;
        } while (eax74);
        return eax74;
    }
    addr_0x18021c8f_78:
    if (*reinterpret_cast<void***>(a2 + 8) == 16) {
        edi75 = a5;
        ecx76 = *reinterpret_cast<void***>(a2);
        if (edi75) {
            do {
                __asm__("fld dword [0x18035098]");
                __asm__("fmul dword [esi+edx]");
                __asm__("fstp dword [ebp+0x14]");
                __asm__("fld dword [ebp+0x14]");
                __asm__("fistp dword [ebp+0x10]");
                eax77 = a4;
                if (reinterpret_cast<signed char>(eax77) < reinterpret_cast<signed char>(0x7fff)) {
                    if (reinterpret_cast<signed char>(eax77) < reinterpret_cast<signed char>(0xffff8000)) {
                        eax77 = reinterpret_cast<void**>(0xffff8000);
                    }
                } else {
                    eax77 = reinterpret_cast<void**>(0x7fff);
                }
                *reinterpret_cast<void***>(ecx76) = eax77;
                __asm__("fld dword [0x18035098]");
                __asm__("fmul dword [esi]");
                __asm__("fstp dword [ebp+0x14]");
                __asm__("fld dword [ebp+0x14]");
                __asm__("fistp dword [ebp+0xc]");
                eax78 = a3;
                if (reinterpret_cast<signed char>(eax78) < reinterpret_cast<signed char>(0x7fff)) {
                    if (reinterpret_cast<signed char>(eax78) < reinterpret_cast<signed char>(0xffff8000)) {
                        eax78 = reinterpret_cast<void**>(0xffff8000);
                    }
                } else {
                    eax78 = reinterpret_cast<void**>(0x7fff);
                }
                *reinterpret_cast<void***>(ecx76 + 2) = eax78;
                ecx76 = ecx76 + 4;
                --edi75;
            } while (edi75);
            return eax78;
        }
    } else {
        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a2 + 8) == 32)) 
            goto addr_0x180220d1_3;
        esi79 = a5;
        ecx80 = *reinterpret_cast<void***>(a2);
        if (esi79) {
            edx81 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a3)) - reinterpret_cast<unsigned char>(eax22));
            do {
                eax22 = eax22 + 4;
                *reinterpret_cast<void***>(ecx80) = *reinterpret_cast<void***>(reinterpret_cast<unsigned char>(eax22) + reinterpret_cast<uint32_t>(edx81));
                *reinterpret_cast<void***>(ecx80 + 4) = *reinterpret_cast<void***>(eax22 + 0xfffffffc);
                ecx80 = ecx80 + 8;
                --esi79;
            } while (esi79);
            return eax22;
        }
    }
}

void** fun_18019310(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14) {
    void** edi15;
    void** eax16;
    void** ebp17;
    void** ecx18;
    void* edx19;
    void** edx20;
    void** v21;
    void** ecx22;
    void** edx23;
    void** ebp24;
    void** edi25;
    void** esi26;
    void** ebx27;
    void** ax28;

    edi15 = *reinterpret_cast<void***>(ecx + 24);
    if (reinterpret_cast<signed char>(edi15) < reinterpret_cast<signed char>(a2)) {
        eax16 = ecx + 4;
        ebp17 = *reinterpret_cast<void***>(ecx);
        ecx18 = *reinterpret_cast<void***>(eax16 + 12);
        if (reinterpret_cast<signed char>(ecx18) < reinterpret_cast<signed char>(0)) {
            edx19 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax16 + 8)) * reinterpret_cast<unsigned char>(edi15));
        } else {
            edx19 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(edi15) << *reinterpret_cast<unsigned char*>(&ecx18));
        }
        edx20 = *reinterpret_cast<void***>(eax16 + 4);
        v21 = *reinterpret_cast<void***>(eax16);
        ecx22 = *reinterpret_cast<void***>(eax16 + 8);
        edx23 = *reinterpret_cast<void***>(eax16 + 12);
        ax28 = fun_18017250(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 - 4 - 4 - 4 + 16, reinterpret_cast<unsigned char>(a2) - reinterpret_cast<unsigned char>(edi15), ebp24, edi25, esi26, ebx27, reinterpret_cast<uint32_t>(edx19) + reinterpret_cast<unsigned char>(ebp17), v21, edx20, ecx22, edx23, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
        *reinterpret_cast<void***>(ecx + 24) = a2;
    }
    return ax28;
}

int16_t fun_18019f00(void*** ecx, void** a2, void* a3, void* a4) {
    void* eax5;

    __asm__("fld dword [ecx]");
    __asm__("fmul qword [0x180346d8]");
    __asm__("fidiv dword [ebp+0x8]");
    __asm__("fstp qword [ebp-0x8]");
    __asm__("fld qword [ebp-0x8]");
    __asm__("fcos ");
    __asm__("fstp qword [ebp-0x10]");
    __asm__("fld dword [ecx+0x4]");
    __asm__("fmul qword [ebp-0x10]");
    eax5 = a3;
    __asm__("fmul qword [0x18034c70]");
    __asm__("fstp dword [eax]");
    __asm__("fld dword [ecx+0x4]");
    __asm__("fld st0");
    __asm__("fmul st0, st1");
    __asm__("fstp dword [ecx]");
    __asm__("fstp st0");
    return *reinterpret_cast<int16_t*>(&eax5);
}

void** fun_1801aba0(void** ecx, void** a2, void** a3) {
    uint32_t eax4;
    int32_t ecx5;
    uint32_t ecx6;

    eax4 = reinterpret_cast<uint32_t>(reinterpret_cast<int32_t>(*reinterpret_cast<void***>(a3) + 0x8080) >> 8);
    if (reinterpret_cast<int32_t>(eax4) <= reinterpret_cast<int32_t>(0xff)) {
        ecx5 = 0;
        *reinterpret_cast<unsigned char*>(&ecx5) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(eax4) < reinterpret_cast<int32_t>(0)));
        ecx6 = reinterpret_cast<uint32_t>(ecx5 - 1) & eax4;
        *reinterpret_cast<void***>(a2) = *reinterpret_cast<void***>(&ecx6);
        return *reinterpret_cast<void***>(&eax4);
    } else {
        *reinterpret_cast<void***>(a2) = reinterpret_cast<void**>(0xff);
        return 0xff;
    }
}

void fun_18022a90(void** ecx, void** a2);

void** fun_1801ac30(void** ecx) {
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034ccc);
    fun_18022a90(ecx + 4, 0);
    *reinterpret_cast<void***>(ecx + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 20) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034cac);
    return ecx;
}

void fun_1801add0(int32_t* ecx, int32_t* a2, int32_t a3, uint32_t a4) {
    int32_t ecx5;
    uint32_t ecx6;

    __asm__("fldz ");
    ecx5 = reinterpret_cast<int32_t>(a4) >> 2;
    if (ecx5) {
        do {
            __asm__("fld dword [esi]");
            __asm__("fld dword [esi+0x4]");
            __asm__("fld dword [esi+0x8]");
            __asm__("fld dword [esi+0xc]");
            __asm__("fxch st0, st3");
            __asm__("fmul dword [edi]");
            __asm__("fxch st0, st2");
            __asm__("fmul dword [edi+0x4]");
            __asm__("fxch st0, st1");
            __asm__("fmul dword [edi+0x8]");
            __asm__("fxch st0, st3");
            __asm__("fmul dword [edi+0xc]");
            __asm__("fxch st0, st2");
            __asm__("faddp st4, st0");
            __asm__("faddp st3, st0");
            __asm__("fxch st0, st1");
            __asm__("faddp st2, st0");
            __asm__("faddp st1, st0");
            --ecx5;
        } while (ecx5);
    }
    ecx6 = a4 & 3;
    if (ecx6) {
        do {
            __asm__("fld dword [esi]");
            __asm__("fmul dword [edi]");
            __asm__("faddp st1, st0");
            --ecx6;
        } while (ecx6);
    }
    __asm__("fstp dword [ebp-0x4]");
    __asm__("fld dword [ebp-0x4]");
    return;
}

void** fun_180221a0(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23);

void** fun_18019cd0(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39) {
    void** ax40;
    void** ax41;
    void** ecx42;
    void** ax43;

    if (!reinterpret_cast<int1_t>(a3 == 2)) {
        if (!reinterpret_cast<int1_t>(a3 == 1)) {
            ax40 = fun_180221a0(a1, a2, a3, a4, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
            return ax40;
        } else {
            ax41 = fun_1801a210(a2, a1, a4, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39);
            return ax41;
        }
    } else {
        ecx42 = a2 + 20;
        ax43 = fun_18021c40(ecx42, a1, a2, ecx42, a4, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
        return ax43;
    }
}

void** fun_1801b140(void** a1, void** a2, void** a3, void** a4) {
    uint32_t ecx5;
    int32_t ecx6;
    void** ax7;

    ecx5 = reinterpret_cast<unsigned char>(a4) << 2;
    if (!ecx5) {
        ecx6 = reinterpret_cast<int32_t>(-ecx5);
        do {
            __asm__("fld dword [esi+ecx]");
            __asm__("fld dword [ebx+ecx]");
            __asm__("fxch st0, st1");
            __asm__("fstp dword [edi+ecx*2]");
            __asm__("fstp dword [edi+ecx*2+0x4]");
            ecx6 = ecx6 + 4;
        } while (ecx6);
    }
    return ax7;
}

void fun_18022a90(void** ecx, void** a2) {
    *reinterpret_cast<void***>(ecx) = a2;
    *reinterpret_cast<void***>(ecx + 4) = a2;
    return;
}

void* fun_1801c1e0(void** ecx, void** a2, void** a3, void**** a4, void*** a5) {
    void** edx6;
    void* esp7;
    void** eax8;
    void** ecx9;
    void** edx10;
    void*** eax11;
    void** eax12;

    edx6 = *reinterpret_cast<void***>(ecx);
    esp7 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    eax8 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 8)) - reinterpret_cast<unsigned char>(edx6)) >> 2);
    if (reinterpret_cast<signed char>(a2) > reinterpret_cast<signed char>(eax8)) {
        ecx9 = *reinterpret_cast<void***>(ecx + 4);
        edx10 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a2) - reinterpret_cast<unsigned char>(eax8));
        *a4 = reinterpret_cast<void***>(ecx9 - reinterpret_cast<unsigned char>(edx10) * 4);
        eax11 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp7) + 12);
        if (reinterpret_cast<signed char>(a3) > reinterpret_cast<signed char>(edx10)) {
            eax11 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp7) + 8);
        }
        *a5 = a3;
        return *reinterpret_cast<void**>(&eax11);
    } else {
        eax12 = a3;
        *a4 = reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 8) - reinterpret_cast<unsigned char>(a2) * 4);
        *a5 = eax12;
        return *reinterpret_cast<void**>(&eax12);
    }
}

int16_t fun_1801c050(void** a1, void** a2, void** a3, void** a4) {
    void** eax5;
    void** edi6;
    void** ebx7;
    void** esi8;
    void** ecx9;
    void* eax10;
    void** eax11;
    void** edx12;

    eax5 = a2 + 4;
    edi6 = *reinterpret_cast<void***>(eax5);
    ebx7 = *reinterpret_cast<void***>(eax5 + 4);
    esi8 = *reinterpret_cast<void***>(eax5 + 8);
    ecx9 = *reinterpret_cast<void***>(eax5 + 12);
    if (reinterpret_cast<signed char>(ecx9) < reinterpret_cast<signed char>(0)) {
        eax10 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(esi8) * reinterpret_cast<unsigned char>(a3));
    } else {
        eax10 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a3) << *reinterpret_cast<unsigned char*>(&ecx9));
    }
    eax11 = a1;
    *reinterpret_cast<void***>(eax11) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2)) + reinterpret_cast<uint32_t>(eax10));
    edx12 = eax11 + 4;
    *reinterpret_cast<void***>(eax11 + 4) = edi6;
    *reinterpret_cast<void***>(edx12 + 4) = ebx7;
    *reinterpret_cast<void***>(edx12 + 8) = esi8;
    *reinterpret_cast<void***>(edx12 + 12) = ecx9;
    return *reinterpret_cast<int16_t*>(&eax11);
}

struct s164 {
    uint32_t f0;
    signed char[8] pad12;
    int32_t f12;
    int32_t f16;
};

void fun_1801c020(struct s164* ecx, void** a2) {
    int32_t ecx3;

    ecx3 = ecx->f16;
    if (ecx3 < 0) {
        ecx->f0 = ecx->f0 + ecx->f12 * reinterpret_cast<unsigned char>(a2);
        return;
    } else {
        ecx->f0 = ecx->f0 + (reinterpret_cast<unsigned char>(a2) << *reinterpret_cast<unsigned char*>(&ecx3));
        return;
    }
}

unsigned char fun_18022af0(void** ecx);

void fun_18022aa0(void** ecx, void** a2) {
    unsigned char al3;

    al3 = fun_18022af0(ecx);
    if (al3) {
        *reinterpret_cast<void***>(ecx + 4) = a2;
    }
    *reinterpret_cast<void***>(ecx) = a2;
    return;
}

void** g18043454 = reinterpret_cast<void**>(32);

void** g18043458 = reinterpret_cast<void**>(4);

void** g18043450 = reinterpret_cast<void**>(1);

void** g1804345c = reinterpret_cast<void**>(2);

void** fun_1801ca40(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26) {
    void** ebx27;
    void** ecx28;
    void** ebp29;
    void** eax30;
    void** ecx31;
    void** eax32;
    void** eax33;
    void** ebp34;
    void** ecx35;
    void** edx36;
    void** eax37;
    void** eax38;
    void*** esp39;
    void** edi40;
    void** esi41;
    void** ebp42;
    void** ebx43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** ax49;
    void* esp50;
    void** edx51;
    void** esi52;
    void* eax53;
    void** v54;
    void* eax55;
    void** ecx56;
    void** edx57;
    void** ebx58;
    void** eax59;
    void** ecx60;
    void* edi61;
    void** ecx62;
    void** edx63;
    void** v64;
    void** eax65;
    void** v66;
    void** ecx67;
    void** ecx68;
    void** eax69;

    ebx27 = a3;
    ecx28 = *reinterpret_cast<void***>(ecx + 8);
    ebp29 = *reinterpret_cast<void***>(ecx);
    eax30 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ecx28) - reinterpret_cast<unsigned char>(ebp29)) >> 2);
    if (reinterpret_cast<signed char>(ebx27) > reinterpret_cast<signed char>(eax30)) {
        ecx31 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(eax30));
        eax32 = *reinterpret_cast<void***>(ecx + 4);
        a3 = ecx31;
        eax33 = eax32 - reinterpret_cast<unsigned char>(ecx31) * 4;
        if (reinterpret_cast<signed char>(a4) > reinterpret_cast<signed char>(ecx31)) {
        }
        ebp34 = a4;
    } else {
        ebp34 = a4;
        eax33 = ecx28 - reinterpret_cast<unsigned char>(ebx27) * 4;
    }
    ecx35 = g18043454;
    edx36 = g18043458;
    eax37 = g18043450;
    eax38 = g1804345c;
    esp39 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 40 - 4 - 4 - 4 - 4 - 4 - 4);
    ax49 = fun_1801a210(esp39 + 24, a2, ebp34, edi40, esi41, ebp42, ebx43, eax33, eax37, ecx35, edx36, eax38, v44, v45, v46, v47, v48, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
    esp50 = reinterpret_cast<void*>(esp39 - 4 + 8 + 4);
    if (reinterpret_cast<signed char>(ebp34) < reinterpret_cast<signed char>(a4)) {
        edx51 = *reinterpret_cast<void***>(ecx + 8);
        esi52 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a4) - reinterpret_cast<unsigned char>(ebp34));
        eax53 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(edx51) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx)));
        v54 = esi52;
        eax55 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(eax53) >> 2);
        if (reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(ebp34)) > reinterpret_cast<int32_t>(eax55)) {
            ecx56 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(ebp34) - reinterpret_cast<uint32_t>(eax55));
            a3 = ecx56;
            edx57 = *reinterpret_cast<void***>(ecx + 4) - reinterpret_cast<unsigned char>(ecx56) * 4;
            if (reinterpret_cast<signed char>(esi52) > reinterpret_cast<signed char>(ecx56)) {
            }
            esi52 = v54;
        } else {
            edx57 = edx51 - (reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(ebp34)) * 4;
        }
        ebx58 = *reinterpret_cast<void***>(a2);
        eax59 = a2 + 4;
        ecx60 = *reinterpret_cast<void***>(eax59 + 12);
        if (reinterpret_cast<signed char>(ecx60) < reinterpret_cast<signed char>(0)) {
            edi61 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax59 + 8)) * reinterpret_cast<unsigned char>(ebp34));
        } else {
            edi61 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ebp34) << *reinterpret_cast<unsigned char*>(&ecx60));
        }
        ecx62 = *reinterpret_cast<void***>(eax59);
        edx63 = g18043454;
        v64 = *reinterpret_cast<void***>(eax59 + 4);
        eax65 = *reinterpret_cast<void***>(eax59 + 12);
        v66 = *reinterpret_cast<void***>(eax59 + 8);
        ecx67 = g18043450;
        ecx68 = g1804345c;
        eax69 = g18043458;
        ax49 = fun_1801a210(reinterpret_cast<int32_t>(esp50) - 4 - 4 + 44, reinterpret_cast<int32_t>(esp50) + 16, esi52, edi40, esi41, ebp42, ebx43, reinterpret_cast<unsigned char>(ebx58) + reinterpret_cast<uint32_t>(edi61), ecx62, v64, v66, eax65, edx57, ecx67, edx63, eax69, ecx68, __return_address(), a2, a3, v54, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
    }
    return ax49;
}

void fun_1801cce0(void** ecx);

int16_t fun_1801cbe0(void** ecx, void** a2) {
    void** eax3;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034e38);
    fun_18022a90(ecx + 4, 0x3e8);
    *reinterpret_cast<void***>(ecx + 12) = a2;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034e14);
    *reinterpret_cast<void***>(ecx + 16) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 20) = reinterpret_cast<void**>(0);
    fun_1801cce0(ecx);
    eax3 = ecx;
    return *reinterpret_cast<int16_t*>(&eax3);
}

int16_t fun_1801cc90(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t eax6;
    int32_t ecx7;

    eax6 = a4;
    ecx7 = a5;
    __asm__("fld dword [ebp+0xc]");
    __asm__("fld dword [ebp+0x10]");
    __asm__("fld dword [eax]");
    __asm__("fld dword [eax+0x4]");
    do {
        __asm__("fld st1");
        __asm__("fmul st0, st3");
        __asm__("fld st2");
        __asm__("fmul st0, st5");
        __asm__("fld dword [edi]");
        __asm__("fxch st0, st2");
        __asm__("faddp st3, st0");
        __asm__("fsubp st1, st0");
        __asm__("fsub st0, st1");
        __asm__("fld st0");
        __asm__("fmul st0, st4");
        __asm__("fxch st0, st1");
        __asm__("fstp dword [edi]");
        __asm__("faddp st2, st0");
        --ecx7;
    } while (ecx7);
    __asm__("fstp dword [eax+0x4]");
    __asm__("fstp dword [eax]");
    __asm__("fstp st0");
    __asm__("fstp st0");
    return *reinterpret_cast<int16_t*>(&eax6);
}

void** fun_18017c30(void** ecx) {
    return 0x180458d8;
}

void fun_1801cee0(int32_t a1, uint32_t a2, uint32_t a3, int32_t a4) {
    int32_t ecx5;

    if (a4) {
        __asm__("fld dword [edi]");
        __asm__("fld dword [edi+0x4]");
        ecx5 = a4;
        do {
            __asm__("fld st1");
            __asm__("fmul dword [ebx]");
            __asm__("fld st1");
            __asm__("fmul dword [ebx+0x4]");
            __asm__("fld st3");
            __asm__("fmul dword [ebx+0x8]");
            __asm__("fxch st0, st3");
            __asm__("fmul dword [ebx+0xc]");
            __asm__("fxch st0, st2");
            __asm__("faddp st1, st0");
            __asm__("fxch st0, st1");
            __asm__("faddp st2, st0");
            __asm__("fsubr dword [esi]");
            __asm__("fxch st0, st1");
            __asm__("fadd st0, st1");
            __asm__("fstp dword [esi]");
            __asm__("fxch st0, st1");
            --ecx5;
        } while (ecx5);
        __asm__("fstp dword [edi+0x4]");
        __asm__("fstp dword [edi]");
    }
    return;
}

void** fun_1801cfb0(void** ecx) {
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034ec8);
    fun_18022a90(ecx + 4, 0x3e8);
    *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(1);
    *reinterpret_cast<void***>(ecx + 16) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 20) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034ea4);
    return ecx;
}

void fun_1801d160(int32_t a1, uint32_t a2, uint32_t a3, uint32_t a4) {
    int32_t ecx5;

    __asm__("fld dword [ebx]");
    __asm__("fld dword [ebx+0x4]");
    __asm__("fld dword [ebx]");
    __asm__("fld dword [ebx+0x4]");
    if (a4 & 1) {
        __asm__("fmul st0, st2");
        __asm__("fld st1");
        __asm__("fmul st0, st4");
        __asm__("faddp st1, st0");
        __asm__("fsubr dword [esi]");
        __asm__("fst dword [esi]");
        __asm__("fxch st0, st1");
    }
    ecx5 = reinterpret_cast<int32_t>(a4) >> 1;
    if (ecx5) {
        do {
            __asm__("fmul st0, st2");
            __asm__("fld st1");
            __asm__("fmul st0, st4");
            __asm__("fxch st0, st1");
            __asm__("fsubr dword [esi]");
            __asm__("fxch st0, st2");
            __asm__("fmul st0, st3");
            __asm__("fxch st0, st2");
            __asm__("fsubrp st1, st0");
            __asm__("fxch st0, st1");
            __asm__("fsubr dword [esi+0x4]");
            __asm__("fxch st0, st1");
            __asm__("fld st0");
            __asm__("fmul st0, st4");
            __asm__("fsubp st2, st0");
            __asm__("fst dword [esi]");
            __asm__("fxch st0, st1");
            __asm__("fst dword [esi+0x4]");
            __asm__("fxch st0, st1");
            --ecx5;
        } while (ecx5);
    }
    __asm__("fstp dword [ebx+0x4]");
    __asm__("fstp dword [ebx]");
    __asm__("fstp st0");
    __asm__("fstp st0");
    return;
}

void fun_1801a0b0(void** ecx, void** a2);

int16_t fun_1801d1e0(void** ecx, void** a2) {
    void** eax3;

    fun_1801a0b0(ecx, a2);
    fun_18022a90(ecx + 8, 100);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034eec);
    *reinterpret_cast<void***>(ecx + 16) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 20) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 28) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 36) = reinterpret_cast<void**>(0);
    eax3 = ecx;
    return *reinterpret_cast<int16_t*>(&eax3);
}

struct s165 {
    int32_t f0;
    signed char f1;
    signed char f2;
    signed char f3;
};

struct s166 {
    int32_t f0;
    signed char f1;
    signed char f2;
    signed char f3;
};

void** fun_1802b920(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12) {
    void** esi13;
    void** edi14;
    uint32_t ecx15;
    uint32_t edx16;
    struct s165* esi17;
    struct s166* edi18;
    uint32_t ecx19;
    uint32_t edx20;
    void* eax21;

    esi13 = a2;
    edi14 = a1;
    if (reinterpret_cast<unsigned char>(edi14) <= reinterpret_cast<unsigned char>(esi13) || reinterpret_cast<unsigned char>(edi14) >= reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(esi13))) {
        if (reinterpret_cast<unsigned char>(edi14) & 3) {
            if (reinterpret_cast<unsigned char>(a3) < reinterpret_cast<unsigned char>(4)) {
                goto *reinterpret_cast<int32_t*>(reinterpret_cast<unsigned char>(a3 - 4) * 4 + 0x1802ba78);
            } else {
                goto *reinterpret_cast<int32_t*>((reinterpret_cast<unsigned char>(edi14) & 3) * 4 + 0x1802b980);
            }
        }
        ecx15 = reinterpret_cast<unsigned char>(a3) >> 2;
        edx16 = reinterpret_cast<unsigned char>(a3) & 3;
        if (ecx15 >= 8) 
            goto addr_0x1802b953_7;
    } else {
        esi17 = reinterpret_cast<struct s165*>(reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(esi13) + 0xfffffffc);
        edi18 = reinterpret_cast<struct s166*>(reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(edi14) + 0xfffffffc);
        if (reinterpret_cast<uint32_t>(edi18) & 3) {
            if (reinterpret_cast<unsigned char>(a3) >= reinterpret_cast<unsigned char>(4)) {
                goto *reinterpret_cast<int32_t*>((reinterpret_cast<uint32_t>(edi18) & 3) * 4 + 0x1802bb08);
            }
            goto *reinterpret_cast<int32_t*>(reinterpret_cast<unsigned char>(a3) * 4 + 0x1802bc00);
        } else {
            ecx19 = reinterpret_cast<unsigned char>(a3) >> 2;
            edx20 = reinterpret_cast<unsigned char>(a3) & 3;
            if (ecx19 < 8) {
                goto *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(-ecx19) * 4 + 0x1802bbb0);
                goto *reinterpret_cast<int32_t*>(edx20 * 4 + 0x1802bc00);
            } else {
                while (ecx19) {
                    --ecx19;
                    edi18->f0 = esi17->f0;
                    edi18 = reinterpret_cast<struct s166*>(reinterpret_cast<uint32_t>(edi18) - 4);
                    esi17 = reinterpret_cast<struct s165*>(reinterpret_cast<uint32_t>(esi17) - 4);
                }
                goto *reinterpret_cast<int32_t*>(edx20 * 4 + 0x1802bc00);
            }
        }
    }
    switch (ecx15) {
        addr_0x1802ba5f_20:
    case 0:
        switch (edx16) {
        case 0:
            return a1;
        case 1:
            *reinterpret_cast<void***>(edi14) = *reinterpret_cast<void***>(esi13);
            return a1;
        case 2:
            *reinterpret_cast<void***>(edi14) = *reinterpret_cast<void***>(esi13);
            *reinterpret_cast<void***>(edi14 + 1) = *reinterpret_cast<void***>(esi13 + 1);
            return a1;
        case 3:
            *reinterpret_cast<void***>(edi14) = *reinterpret_cast<void***>(esi13);
            *reinterpret_cast<void***>(edi14 + 1) = *reinterpret_cast<void***>(esi13 + 1);
            *reinterpret_cast<void***>(edi14 + 2) = *reinterpret_cast<void***>(esi13 + 2);
            return a1;
        }
        addr_0x1802ba4c_25:
    case 1:
        *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(edi14 + ecx15 * 4) - 4) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(esi13 + ecx15 * 4) - 4);
        eax21 = reinterpret_cast<void*>(ecx15 * 4);
        esi13 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi13) + reinterpret_cast<uint32_t>(eax21));
        edi14 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi14) + reinterpret_cast<uint32_t>(eax21));
        goto addr_0x1802ba5f_20;
        addr_0x1802ba44_26:
    case 2:
        *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(edi14 + ecx15 * 4) - 8) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(esi13 + ecx15 * 4) - 8);
        goto addr_0x1802ba4c_25;
        addr_0x1802ba3c_27:
    case 3:
        *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(edi14 + ecx15 * 4) - 12) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(esi13 + ecx15 * 4) - 12);
        goto addr_0x1802ba44_26;
        addr_0x1802ba34_28:
    case 4:
        *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(edi14 + ecx15 * 4) - 16) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(esi13 + ecx15 * 4) - 16);
        goto addr_0x1802ba3c_27;
        addr_0x1802ba2c_29:
    case 5:
        *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(edi14 + ecx15 * 4) - 20) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(esi13 + ecx15 * 4) - 20);
        goto addr_0x1802ba34_28;
        addr_0x1802ba24_30:
    case 6:
        *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(edi14 + ecx15 * 4) - 24) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(esi13 + ecx15 * 4) - 24);
        goto addr_0x1802ba2c_29;
    case 7:
        *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(edi14 + ecx15 * 4) - 28) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(esi13 + ecx15 * 4) - 28);
        goto addr_0x1802ba24_30;
    }
    addr_0x1802b953_7:
    while (ecx15) {
        --ecx15;
        *reinterpret_cast<void***>(edi14) = *reinterpret_cast<void***>(esi13);
        edi14 = edi14 + 4;
        esi13 = esi13 + 4;
    }
    goto *reinterpret_cast<int32_t*>(edx16 * 4 + 0x1802ba68);
    return a1;
    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi18) + 3) = *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esi17) + 3);
    return a1;
    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi18) + 3) = *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esi17) + 3);
    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi18) + 2) = *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esi17) + 2);
    return a1;
    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi18) + 3) = *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esi17) + 3);
    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi18) + 2) = *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esi17) + 2);
    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi18) + 1) = *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esi17) + 1);
    return a1;
}

void fun_18017ad0(int32_t ecx, int32_t a2, int32_t a3);

signed char fun_18017be0(int32_t a1, int32_t a2) {
    int32_t eax3;

    eax3 = a2;
    fun_18017ad0(a1, a1, eax3);
    __asm__("fcomp dword [0x18034b54]");
    __asm__("fnstsw ax");
    if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax3) + 1) & 65)) {
        return 0;
    } else {
        return 1;
    }
}

void** fun_1801df00(void** ecx) {
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034ccc);
    fun_18022a90(ecx + 4, 0);
    *reinterpret_cast<void***>(ecx + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 52) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034f3c);
    *reinterpret_cast<void***>(ecx + 20) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 28) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0);
    return ecx;
}

int16_t fun_1801e1f0(int16_t* ecx, int16_t* a2, void* a3, uint32_t a4) {
    int16_t* esi5;
    void* edi6;
    int32_t ebx7;
    uint32_t ecx8;
    uint32_t ecx9;
    int32_t ecx10;
    uint32_t ecx11;
    uint32_t ecx12;
    int16_t* esi13;
    void* edi14;
    uint32_t ecx15;
    int32_t eax16;

    esi5 = a2;
    edi6 = a3;
    ebx7 = 0;
    ecx8 = reinterpret_cast<uint32_t>(reinterpret_cast<int32_t>(a4) >> 4);
    if (ecx8) {
        ecx9 = ecx8 << 5;
        esi5 = reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(esi5) + ecx9);
        edi6 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(edi6) + ecx9);
        ecx10 = reinterpret_cast<int32_t>(-ecx9);
        __asm__("pxor mm0, mm0");
        __asm__("movq mm1, mm0");
        __asm__("movq mm2, mm0");
        __asm__("movq mm3, mm0");
        __asm__("movq mm4, mm0");
        do {
            __asm__("movq mm1, [esi+ecx]");
            __asm__("psrad mm4, 0xf");
            __asm__("movq mm2, [esi+ecx+0x8]");
            __asm__("paddd mm0, mm3");
            __asm__("movq mm3, [esi+ecx+0x10]");
            __asm__("paddd mm0, mm4");
            __asm__("movq mm4, [esi+ecx+0x18]");
            __asm__("pmaddwd mm1, [edi+ecx]");
            __asm__("pmaddwd mm2, [edi+ecx+0x8]");
            __asm__("pmaddwd mm3, [edi+ecx+0x10]");
            __asm__("pmaddwd mm4, [edi+ecx+0x18]");
            __asm__("psrad mm1, 0xf");
            __asm__("psrad mm2, 0xf");
            __asm__("paddd mm0, mm1");
            __asm__("psrad mm3, 0xf");
            __asm__("paddd mm0, mm2");
            ecx10 = ecx10 + 32;
        } while (ecx10);
        __asm__("psrad mm4, 0xf");
        __asm__("paddd mm0, mm3");
        __asm__("paddd mm0, mm4");
        __asm__("movq mm1, mm0");
        __asm__("psrlq mm0, 0x20");
        __asm__("paddd mm0, mm1");
        __asm__("movd ebx, mm0");
        __asm__("emms ");
    }
    ecx11 = a4 & 15;
    if (ecx11) {
        ecx12 = ecx11 << 1;
        esi13 = reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(esi5) + ecx12);
        edi14 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(edi6) + ecx12);
        ecx15 = -ecx12;
        do {
            __asm__("shrd ax, dx, 0xf");
            ebx7 = ebx7 + reinterpret_cast<int16_t>(*reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(esi13) + ecx15) * *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi14) + ecx15));
            ecx15 = ecx15 + 2;
        } while (ecx15);
    }
    eax16 = ebx7;
    return *reinterpret_cast<int16_t*>(&eax16);
}

void** fun_1801e370(void** a1, void** a2, void** a3, void** a4) {
    void** esi5;
    void** ebx6;
    void** edi7;
    uint32_t ecx8;
    void* ecx9;
    int32_t ecx10;
    uint32_t ecx11;
    void* ecx12;
    void*** esi13;
    void*** ebx14;
    void*** edi15;
    void* ecx16;
    void** ax17;
    int16_t dx18;

    esi5 = a2;
    ebx6 = a3;
    edi7 = a1;
    ecx8 = reinterpret_cast<unsigned char>(a4) >> 3;
    if (ecx8) {
        ecx9 = reinterpret_cast<void*>(ecx8 << 4);
        esi5 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi5) + reinterpret_cast<uint32_t>(ecx9));
        ebx6 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx6) + reinterpret_cast<uint32_t>(ecx9));
        edi7 = edi7 + reinterpret_cast<uint32_t>(ecx9) * 2;
        ecx10 = reinterpret_cast<int32_t>(-reinterpret_cast<uint32_t>(ecx9));
        do {
            __asm__("movq mm0, [esi+ecx]");
            __asm__("movq mm2, [esi+ecx+0x8]");
            __asm__("movq mm1, mm0");
            __asm__("punpcklwd mm0, [ebx+ecx]");
            __asm__("movq mm3, mm2");
            __asm__("punpckhwd mm1, [ebx+ecx]");
            __asm__("punpcklwd mm2, [ebx+ecx+0x8]");
            __asm__("punpckhwd mm3, [ebx+ecx+0x8]");
            __asm__("movq [edi+ecx*2], mm0");
            __asm__("movq [edi+ecx*2+0x8], mm1");
            __asm__("movq [edi+ecx*2+0x10], mm2");
            __asm__("movq [edi+ecx*2+0x18], mm3");
            ecx10 = ecx10 + 16;
        } while (ecx10);
        __asm__("emms ");
    }
    ecx11 = reinterpret_cast<unsigned char>(a4) & 7;
    if (ecx11) {
        ecx12 = reinterpret_cast<void*>(ecx11 << 1);
        esi13 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(esi5) + reinterpret_cast<uint32_t>(ecx12));
        ebx14 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(ebx6) + reinterpret_cast<uint32_t>(ecx12));
        edi15 = reinterpret_cast<void***>(edi7 + reinterpret_cast<uint32_t>(ecx12) * 2);
        ecx16 = reinterpret_cast<void*>(-reinterpret_cast<uint32_t>(ecx12));
        do {
            ax17 = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi13) + reinterpret_cast<uint32_t>(ecx16));
            dx18 = *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(ebx14) + reinterpret_cast<uint32_t>(ecx16));
            edi15[reinterpret_cast<uint32_t>(ecx16) * 2] = ax17;
            *reinterpret_cast<int16_t*>(edi15 + reinterpret_cast<uint32_t>(ecx16) * 2 + 2) = dx18;
            ecx16 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx16) + 2);
        } while (ecx16);
    }
    return ax17;
}

void fun_1801e840(void** a1, void** a2, void** a3, void** a4) {
    int32_t ecx5;

    ecx5 = reinterpret_cast<int32_t>(-(reinterpret_cast<unsigned char>(a4) << 1));
    do {
        __asm__("movq mm0, [esi+ecx*2]");
        __asm__("movq mm1, [esi+ecx*2+0x8]");
        __asm__("movq mm2, mm0");
        __asm__("movq mm3, mm1");
        __asm__("psrad mm0, 0x10");
        __asm__("psrad mm1, 0x10");
        __asm__("pslld mm2, 0x10");
        __asm__("pslld mm3, 0x10");
        __asm__("psrad mm2, 0x10");
        __asm__("psrad mm3, 0x10");
        __asm__("packssdw mm0, mm1");
        __asm__("movq [edx+ecx], mm0");
        __asm__("packssdw mm2, mm3");
        __asm__("movq [edi+ecx], mm2");
        ecx5 = ecx5 + 8;
    } while (ecx5);
    __asm__("emms ");
    return;
}

int16_t fun_1801e7e0(void** a1, void** a2, void** a3, void** a4) {
    int32_t ecx5;

    ecx5 = reinterpret_cast<int32_t>(-reinterpret_cast<unsigned char>(a4));
    __asm__("movq mm4, [eax]");
    do {
        __asm__("movq mm0, [esi+ecx*2]");
        __asm__("movq mm1, [esi+ecx*2+0x8]");
        __asm__("movq mm2, mm0");
        __asm__("psrlw mm0, 0x8");
        __asm__("movq mm3, mm1");
        __asm__("psrlw mm1, 0x8");
        __asm__("pand mm2, mm4");
        __asm__("packuswb mm0, mm1");
        __asm__("pand mm3, mm4");
        __asm__("movq [edx+ecx], mm0");
        __asm__("packuswb mm2, mm3");
        __asm__("movq [edi+ecx], mm2");
        ecx5 = ecx5 + 8;
    } while (ecx5);
    __asm__("emms ");
    return 0x38d8;
}

int16_t fun_1801ea30(int16_t* a1, signed char* a2, void* a3, uint32_t a4, int32_t* a5, int32_t* a6, uint32_t a7) {
    int32_t ecx8;
    int32_t eax9;
    int32_t v10;
    int32_t v11;
    uint32_t ecx12;
    signed char* edi13;
    int32_t ecx14;
    void* edx15;
    void* ebx16;
    int32_t eax17;

    ecx8 = *a5;
    eax9 = *a6;
    v10 = ecx8;
    v11 = eax9;
    ecx12 = reinterpret_cast<uint32_t>(reinterpret_cast<int32_t>(a4) >> 1) << 2;
    edi13 = reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(a2) + ecx12);
    ecx14 = reinterpret_cast<int32_t>(-ecx12);
    edx15 = a3;
    __asm__("movd mm0, dword [ebp-0xc]");
    __asm__("movd mm1, dword [ebp-0x14]");
    __asm__("movq mm6, mm0");
    __asm__("movd mm2, dword [ebp+0x20]");
    __asm__("paddd mm6, mm1");
    __asm__("punpckldq mm0, mm6");
    __asm__("paddd mm1, mm1");
    __asm__("paddd mm1, mm2");
    __asm__("paddd mm2, mm2");
    __asm__("movq mm7, mm1");
    __asm__("paddd mm7, mm2");
    __asm__("paddd mm2, mm2");
    __asm__("punpckldq mm1, mm7");
    __asm__("punpckldq mm2, mm2");
    __asm__("movq mm7, [0x180438e0]");
    __asm__("movq mm5, mm0");
    __asm__("movq mm3, mm0");
    __asm__("psrld mm5, 0x10");
    __asm__("movq mm4, mm0");
    __asm__("movd eax, mm5");
    __asm__("psrlq mm5, 0x20");
    __asm__("movd ebx, mm5");
    __asm__("pslld mm3, 0x10");
    __asm__("pand mm4, mm7");
    __asm__("por mm3, mm7");
    do {
        if (reinterpret_cast<int32_t>(ebx16) >= reinterpret_cast<int32_t>(edx15)) 
            break;
        __asm__("movd mm6, dword [esi+eax*2-0x2]");
        __asm__("psubw mm3, mm4");
        __asm__("punpckldq mm6, [esi+ebx*2-0x2]");
        __asm__("paddd mm0, mm1");
        __asm__("psrlw mm3, 0x1");
        __asm__("movq mm5, mm0");
        __asm__("pmaddwd mm6, mm3");
        __asm__("psrld mm5, 0x10");
        __asm__("movq mm3, mm0");
        __asm__("paddd mm1, mm2");
        __asm__("movd eax, mm5");
        __asm__("psrlq mm5, 0x20");
        __asm__("psrad mm6, 0xf");
        __asm__("movq mm4, mm0");
        __asm__("movd ebx, mm5");
        __asm__("packssdw mm6, mm6");
        __asm__("pand mm4, mm7");
        __asm__("pslld mm3, 0x10");
        __asm__("movd dword [edi+ecx], mm6");
        __asm__("por mm3, mm7");
        ecx14 = ecx14 + 4;
    } while (ecx14);
    __asm__("movd dword [ebp-0xc], mm0");
    __asm__("psrad mm2, 0x2");
    __asm__("psubd mm1, mm2");
    __asm__("psrad mm1, 0x1");
    __asm__("movd dword [ebp-0x14], mm1");
    __asm__("emms ");
    *a5 = v10;
    *a6 = v11;
    eax17 = reinterpret_cast<int32_t>(ecx14 + (reinterpret_cast<uint32_t>(edi13) - reinterpret_cast<uint32_t>(a2))) >> 1;
    return *reinterpret_cast<int16_t*>(&eax17);
}

void* fun_1801f3c0(void** ecx, void** a2, void** a3, void** a4, void*** a5) {
    void** edx6;
    void* esp7;
    void** eax8;
    void** ecx9;
    void** edx10;
    void*** eax11;
    void** eax12;

    edx6 = *reinterpret_cast<void***>(ecx);
    esp7 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    eax8 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 8)) - reinterpret_cast<unsigned char>(edx6)) >> 1);
    if (reinterpret_cast<signed char>(a2) > reinterpret_cast<signed char>(eax8)) {
        ecx9 = *reinterpret_cast<void***>(ecx + 4);
        edx10 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a2) - reinterpret_cast<unsigned char>(eax8));
        *a4 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ecx9) - (reinterpret_cast<unsigned char>(edx10) + reinterpret_cast<unsigned char>(edx10)));
        eax11 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp7) + 12);
        if (reinterpret_cast<signed char>(a3) > reinterpret_cast<signed char>(edx10)) {
            eax11 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp7) + 8);
        }
        *a5 = a3;
        return *reinterpret_cast<void**>(&eax11);
    } else {
        eax12 = a3;
        *a4 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 8)) - (reinterpret_cast<unsigned char>(a2) + reinterpret_cast<unsigned char>(a2)));
        *a5 = eax12;
        return *reinterpret_cast<void**>(&eax12);
    }
}

void fun_1801ff30(void** ecx);

int16_t fun_1801fd50(void** ecx, void** a2) {
    void** eax3;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034e38);
    fun_18022a90(ecx + 4, 0x3e8);
    *reinterpret_cast<void***>(ecx + 12) = a2;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034fd8);
    *reinterpret_cast<void***>(ecx + 16) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 18) = reinterpret_cast<void**>(0);
    fun_1801ff30(ecx);
    eax3 = ecx;
    return *reinterpret_cast<int16_t*>(&eax3);
}

int16_t fun_1801fe20(void* a1, int16_t a2, int16_t a3, int32_t a4, int32_t a5) {
    int32_t edx6;
    int32_t ecx7;
    void* edi8;
    int32_t ecx9;
    int32_t eax10;

    edx6 = -static_cast<int32_t>(a3) - a2;
    __asm__("movq mm0, [eax]");
    __asm__("movq mm5, [ebp-0x18]");
    __asm__("movq mm6, [ebp-0x10]");
    __asm__("movq mm7, [ebp-0x8]");
    ecx7 = a5 << 1;
    edi8 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(a1) + ecx7);
    ecx9 = -ecx7;
    __asm__("movq mm2, mm0");
    __asm__("psrad mm2, 0xe");
    __asm__("movd mm1, eax");
    __asm__("punpckldq mm1, mm1");
    do {
        __asm__("pmaddwd mm1, mm5");
        __asm__("packssdw mm2, mm2");
        __asm__("movq mm3, mm2");
        __asm__("pmaddwd mm2, mm6");
        __asm__("pmaddwd mm3, mm7");
        __asm__("movd mm4, eax");
        __asm__("paddd mm1, mm2");
        __asm__("punpckldq mm4, mm4");
        __asm__("punpckldq mm3, mm1");
        __asm__("psrad mm1, 0xe");
        __asm__("paddd mm0, mm3");
        __asm__("packssdw mm1, mm1");
        __asm__("movq mm2, mm0");
        __asm__("psrld mm1, 0x10");
        __asm__("movd edx, mm1");
        __asm__("movq mm1, mm4");
        *reinterpret_cast<int16_t*>(reinterpret_cast<int32_t>(edi8) + ecx9) = *reinterpret_cast<int16_t*>(&edx6);
        __asm__("psrad mm2, 0xe");
        ecx9 = ecx9 + 2;
    } while (ecx9);
    eax10 = a4;
    __asm__("movq [eax], mm0");
    __asm__("emms ");
    return *reinterpret_cast<int16_t*>(&eax10);
}

void fun_18020390(int16_t* a1, uint32_t a2, void* a3, uint32_t a4) {
    int32_t ecx5;

    __asm__("movd mm1, dword [esi]");
    __asm__("movd mm2, dword [esi+0x4]");
    __asm__("punpckldq mm1, mm1");
    __asm__("punpckldq mm2, mm2");
    __asm__("movq mm3, [ebx]");
    __asm__("movq mm4, [ebx+0x8]");
    __asm__("movq mm5, [ebx+0x10]");
    __asm__("movd mm0, dword [edi+ecx]");
    __asm__("pmaddwd mm2, mm5");
    __asm__("punpckldq mm0, mm0");
    __asm__("pmaddwd mm1, mm4");
    __asm__("movq mm7, mm0");
    __asm__("pmaddwd mm0, mm3");
    __asm__("paddd mm2, mm1");
    __asm__("movq mm1, mm7");
    __asm__("paddd mm2, mm0");
    __asm__("movd mm0, dword [edi+ecx+0x4]");
    __asm__("paddd mm2, [ebx]");
    __asm__("psrad mm2, 0xd");
    __asm__("punpckldq mm0, mm0");
    __asm__("movq mm6, mm0");
    __asm__("movq mm7, mm6");
    ecx5 = reinterpret_cast<int32_t>(-(a4 << 1)) + 4;
    if (ecx5) {
        do {
            __asm__("pmaddwd mm0, mm3");
            __asm__("packssdw mm2, mm2");
            __asm__("movd dword [edi+ecx-0x4], mm2");
            __asm__("pmaddwd mm1, mm4");
            __asm__("movd mm6, dword [edi+ecx+0x4]");
            __asm__("pmaddwd mm2, mm5");
            __asm__("paddd mm0, [ebx]");
            __asm__("punpckldq mm6, mm6");
            __asm__("paddd mm1, mm0");
            __asm__("movq mm0, mm6");
            __asm__("paddd mm2, mm1");
            __asm__("movq mm1, mm7");
            __asm__("psrad mm2, 0xd");
            __asm__("movq mm7, mm6");
            ecx5 = ecx5 + 4;
        } while (ecx5);
    }
    __asm__("packssdw mm2, mm2");
    __asm__("movd dword [edi+ecx-0x4], mm2");
    __asm__("movd dword [esi], mm1");
    __asm__("movd dword [esi+0x4], mm2");
    __asm__("emms ");
    return;
}

struct s167 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
    int32_t f16;
};

struct s168 {
    int16_t f0;
    int16_t f2;
    int16_t f4;
    int16_t f6;
    int32_t f8;
};

int32_t g180438e8 = 0x1000;

void fun_18020300(int16_t* a1, struct s167* a2, struct s168* a3, uint32_t a4) {
    struct s167* edx5;
    struct s168* ecx6;
    int16_t* esi7;
    uint32_t v8;
    int32_t eax9;
    int32_t eax10;
    int32_t ebp11;
    int32_t eax12;
    uint32_t eax13;

    if (a4) {
        edx5 = a2;
        ecx6 = a3;
        esi7 = a1;
        v8 = a4 - 1 + 1;
        do {
            eax9 = g180438e8;
            ++esi7;
            eax10 = ecx6->f2 * edx5->f12;
            ebp11 = *esi7 * edx5->f0 + eax9 + (ecx6->f0 * edx5->f16 - ecx6->f6 * edx5->f4 - ecx6->f4 * edx5->f8);
            ecx6->f0 = ecx6->f2;
            ecx6->f2 = *(esi7 - 1);
            eax12 = eax10 + ebp11 >> 13;
            ecx6->f4 = ecx6->f6;
            ecx6->f6 = *reinterpret_cast<int16_t*>(&eax12);
            *(esi7 - 1) = *reinterpret_cast<int16_t*>(&eax12);
            eax13 = v8 - 1;
            v8 = eax13;
        } while (eax13);
    }
    return;
}

void** fun_18020500(void** ecx) {
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034ec8);
    fun_18022a90(ecx + 4, 0x3e8);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035020);
    *reinterpret_cast<void***>(ecx + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 16) = reinterpret_cast<void**>(0);
    return ecx;
}

void fun_18020800(void* a1, uint32_t a2, uint32_t a3, uint32_t a4) {
    int32_t ecx5;

    __asm__("movq mm2, [ebx]");
    __asm__("movq mm3, [ebx+0x8]");
    __asm__("movd mm0, dword [edi+ecx]");
    __asm__("punpckldq mm0, mm0");
    __asm__("movd mm1, dword [esi]");
    __asm__("punpckldq mm1, mm1");
    __asm__("pmaddwd mm0, mm2");
    __asm__("pmaddwd mm1, mm3");
    __asm__("movd mm4, dword [edi+ecx+0x4]");
    __asm__("psrad mm0, 0xd");
    __asm__("psrad mm1, 0xd");
    __asm__("punpckldq mm4, mm4");
    __asm__("paddd mm1, mm0");
    __asm__("packssdw mm1, mm1");
    __asm__("pmaddwd mm4, mm2");
    __asm__("movd dword [edi+ecx], mm1");
    __asm__("pmaddwd mm1, mm3");
    __asm__("movd mm0, dword [edi+ecx+0x8]");
    __asm__("psrad mm4, 0xd");
    __asm__("psrad mm1, 0xd");
    __asm__("punpckldq mm0, mm0");
    __asm__("paddd mm1, mm4");
    ecx5 = reinterpret_cast<int32_t>(-(a4 << 1)) + 8;
    if (ecx5) {
        do {
            __asm__("packssdw mm1, mm1");
            __asm__("pmaddwd mm0, mm2");
            __asm__("movd dword [edi+ecx-0x4], mm1");
            __asm__("pmaddwd mm1, mm3");
            __asm__("movd mm4, dword [edi+ecx+0x4]");
            __asm__("psrad mm0, 0xd");
            __asm__("psrad mm1, 0xd");
            __asm__("punpckldq mm4, mm4");
            __asm__("paddd mm1, mm0");
            __asm__("packssdw mm1, mm1");
            __asm__("pmaddwd mm4, mm2");
            __asm__("movd dword [edi+ecx], mm1");
            __asm__("pmaddwd mm1, mm3");
            __asm__("movd mm0, dword [edi+ecx+0x8]");
            __asm__("psrad mm4, 0xd");
            __asm__("psrad mm1, 0xd");
            __asm__("punpckldq mm0, mm0");
            __asm__("paddd mm1, mm4");
            ecx5 = ecx5 + 8;
        } while (ecx5);
    }
    __asm__("packssdw mm1, mm1");
    __asm__("movd dword [edi+ecx-0x4], mm1");
    __asm__("movd dword [esi], mm1");
    __asm__("emms ");
    return;
}

struct s169 {
    int16_t f0;
    int16_t f2;
    int16_t f4;
    signed char[16] pad22;
    int16_t f22;
};

struct s170 {
    int16_t f0;
    int16_t f2;
};

void fun_180208d0(void* a1, struct s169* a2, struct s170* a3, uint32_t a4) {
    int32_t v5;
    int32_t v6;
    int32_t v7;
    struct s170* esi8;
    uint32_t ecx9;
    void* edi10;
    uint32_t ecx11;
    int32_t eax12;
    int16_t bx13;

    v5 = static_cast<int32_t>(a2->f0);
    v6 = static_cast<int32_t>(a2->f2);
    v7 = static_cast<int32_t>(a2->f4);
    if (a4) {
        esi8 = a3;
        ecx9 = a4 << 1;
        edi10 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(a1) + ecx9);
        ecx11 = -ecx9;
        do {
            eax12 = *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi10) + ecx11) * v5 - esi8->f2 * v6 - esi8->f0 * v7 >> 14;
            if (eax12 >= 0xffff8000) {
                if (eax12 > 0x7fff) {
                    eax12 = 0x7fff;
                }
            } else {
                eax12 = 0xffff8000;
            }
            *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi10) + ecx11) = *reinterpret_cast<int16_t*>(&eax12);
            bx13 = esi8->f2;
            esi8->f2 = *reinterpret_cast<int16_t*>(&eax12);
            esi8->f0 = bx13;
            ecx11 = ecx11 + 2;
        } while (ecx11);
    }
    return;
}

int16_t fun_18020970(void** ecx, void** a2) {
    void** edx3;
    void** ecx4;
    void** eax5;

    fun_1801a0b0(ecx, a2);
    fun_18022a90(ecx + 8, 100);
    edx3 = ecx + 32;
    *reinterpret_cast<void***>(ecx + 16) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 20) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 28) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 64) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 68) = reinterpret_cast<void**>(0);
    *reinterpret_cast<signed char*>(ecx + 70) = 0;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035044);
    *reinterpret_cast<void***>(edx3) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(edx3 + 4) = reinterpret_cast<void**>(0);
    ecx4 = ecx + 40;
    *reinterpret_cast<void***>(ecx4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx4 + 4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 48) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 48 + 4) = reinterpret_cast<void**>(0);
    eax5 = ecx;
    return *reinterpret_cast<int16_t*>(&eax5);
}

void** fun_18021860(void** a1, void** a2, void** a3, void** a4) {
    void** eax5;
    void** edx6;
    void** ecx7;
    void** esi8;

    eax5 = a4 - 1;
    if (a4) {
        edx6 = a2;
        ecx7 = a1;
        esi8 = eax5 + 1;
        eax5 = a3;
        do {
            edx6 = edx6 + 4;
            *reinterpret_cast<void***>(ecx7) = *reinterpret_cast<void***>(eax5);
            *reinterpret_cast<void***>(edx6 + 0xfffffffc) = *reinterpret_cast<void***>(eax5 + 4);
            ecx7 = ecx7 + 4;
            eax5 = eax5 + 8;
            --esi8;
        } while (esi8);
    }
    return eax5;
}

void** fun_18021810(void** a1, void** a2, void** a3, void** a4) {
    void* ecx5;
    void*** esi6;
    void*** edi7;
    void*** edx8;
    void* ecx9;
    void** ax10;

    if (a4) {
        ecx5 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a4) << 1);
        esi6 = reinterpret_cast<void***>(a3 + reinterpret_cast<uint32_t>(ecx5) * 2);
        edi7 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(a1) + reinterpret_cast<uint32_t>(ecx5));
        edx8 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(a2) + reinterpret_cast<uint32_t>(ecx5));
        ecx9 = reinterpret_cast<void*>(-reinterpret_cast<uint32_t>(ecx5));
        do {
            *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(edi7) + reinterpret_cast<uint32_t>(ecx9)) = esi6[reinterpret_cast<uint32_t>(ecx9) * 2];
            ax10 = (esi6 + reinterpret_cast<uint32_t>(ecx9) * 2)[2];
            *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(edx8) + reinterpret_cast<uint32_t>(ecx9)) = ax10;
            ecx9 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx9) + 2);
        } while (ecx9);
    }
    return ax10;
}

void** fun_180217d0(void** a1, void** a2, void** a3, void** a4) {
    void*** esi5;
    void* edi6;
    void* edx7;
    void* ecx8;
    void** ax9;

    if (a4) {
        esi5 = reinterpret_cast<void***>(a3 + reinterpret_cast<unsigned char>(a4) * 2);
        edi6 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a1) + reinterpret_cast<unsigned char>(a4));
        edx7 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a2) + reinterpret_cast<unsigned char>(a4));
        ecx8 = reinterpret_cast<void*>(-reinterpret_cast<unsigned char>(a4));
        do {
            ax9 = esi5[reinterpret_cast<uint32_t>(ecx8) * 2];
            *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi6) + reinterpret_cast<uint32_t>(ecx8)) = *reinterpret_cast<signed char*>(&ax9);
            *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edx7) + reinterpret_cast<uint32_t>(ecx8)) = *reinterpret_cast<signed char*>(&ax9 + 1);
            ecx8 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx8) + 1);
        } while (ecx8);
    }
    return ax9;
}

void** fun_18021b40(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** eax7;
    void** edx8;
    void** ecx9;
    void** esi10;
    void** edi11;
    void** ebx12;

    eax7 = a6 - 1;
    if (a6) {
        edx8 = a2;
        ecx9 = a1;
        esi10 = a3;
        edi11 = a4;
        ebx12 = eax7 + 1;
        eax7 = a5;
        do {
            edx8 = edx8 + 4;
            *reinterpret_cast<void***>(ecx9) = *reinterpret_cast<void***>(eax7);
            *reinterpret_cast<void***>(edx8 + 0xfffffffc) = *reinterpret_cast<void***>(eax7 + 4);
            *reinterpret_cast<void***>(esi10) = *reinterpret_cast<void***>(eax7 + 8);
            *reinterpret_cast<void***>(edi11) = *reinterpret_cast<void***>(eax7 + 12);
            ecx9 = ecx9 + 4;
            esi10 = esi10 + 4;
            edi11 = edi11 + 4;
            eax7 = eax7 + 16;
            --ebx12;
        } while (ebx12);
    }
    return eax7;
}

void** fun_18021ae0(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** eax7;
    void** edx8;
    void** ecx9;
    void** esi10;
    void** edi11;
    void** ebx12;

    eax7 = a6 - 1;
    if (a6) {
        edx8 = a2;
        ecx9 = a1;
        esi10 = a3;
        edi11 = a4;
        ebx12 = eax7 + 1;
        eax7 = a5;
        do {
            edx8 = edx8 + 2;
            *reinterpret_cast<void***>(ecx9) = *reinterpret_cast<void***>(eax7);
            *reinterpret_cast<void***>(edx8 + 0xfffffffe) = *reinterpret_cast<void***>(eax7 + 2);
            *reinterpret_cast<void***>(esi10) = *reinterpret_cast<void***>(eax7 + 4);
            *reinterpret_cast<void***>(edi11) = *reinterpret_cast<void***>(eax7 + 6);
            ecx9 = ecx9 + 2;
            esi10 = esi10 + 2;
            edi11 = edi11 + 2;
            eax7 = eax7 + 8;
            --ebx12;
        } while (ebx12);
    }
    return eax7;
}

void** fun_18021a90(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** eax7;
    void** ecx8;
    void** ebp9;
    void** esi10;
    void** edi11;
    void** edx12;

    eax7 = a6 - 1;
    if (a6) {
        ecx8 = a1;
        ebp9 = a4;
        esi10 = a2;
        edi11 = a3;
        edx12 = eax7 + 1;
        eax7 = a5;
        do {
            eax7 = eax7 + 4;
            *reinterpret_cast<void***>(ecx8) = *reinterpret_cast<void***>(eax7);
            *reinterpret_cast<void***>(esi10) = *reinterpret_cast<void***>(eax7 + 0xfffffffd);
            *reinterpret_cast<void***>(edi11) = *reinterpret_cast<void***>(eax7 + 0xfffffffe);
            ++ecx8;
            ++esi10;
            ++edi11;
            *reinterpret_cast<void***>(ebp9) = *reinterpret_cast<void***>(eax7 + 0xffffffff);
            ++ebp9;
            --edx12;
        } while (edx12);
    }
    return eax7;
}

void fun_18022a50(void** a1, int32_t* a2) {
    int32_t eax3;

    eax3 = *a2;
    if (eax3 < 0x7fff) {
        if (eax3 < 0xffff8000) {
            *reinterpret_cast<void***>(a1) = reinterpret_cast<void**>(0x8000);
            return;
        }
    } else {
        eax3 = 0x7fff;
    }
    *reinterpret_cast<void***>(a1) = *reinterpret_cast<void***>(&eax3);
    return;
}

int16_t fun_18027b90(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7);

void fun_18027c50(void** ecx);

int16_t fun_18022b20(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** edi8;
    void** esi9;
    void** ebx10;
    void** eax11;

    fun_18027b90(ecx, a3, a4, edi8, esi9, ebx10, __return_address());
    *reinterpret_cast<void***>(ecx + 0x1ac) = a6;
    *reinterpret_cast<void***>(ecx + 0x1b0) = a5;
    *reinterpret_cast<void***>(ecx + 0x1b4) = a3;
    *reinterpret_cast<void***>(ecx + 0x1b8) = a4;
    *reinterpret_cast<void***>(ecx + 0x1bc) = a7;
    *reinterpret_cast<void***>(ecx + 0x1c0) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x1803509c);
    fun_18027620(ecx, a2, edi8, esi9, ebx10, __return_address(), a2);
    fun_18027c50(ecx);
    eax11 = ecx;
    return *reinterpret_cast<int16_t*>(&eax11);
}

int16_t fun_1802a8b0(void** ecx, void** a2, void** a3, void** a4, void** a5);

int16_t fun_18022c60(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** eax7;

    fun_1802a8b0(ecx, a2, 0, a3, 0);
    *reinterpret_cast<void***>(ecx + 36) = a5;
    *reinterpret_cast<void***>(ecx + 32) = a4;
    *reinterpret_cast<void***>(ecx + 40) = a6;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180350c8);
    eax7 = ecx;
    return *reinterpret_cast<int16_t*>(&eax7);
}

int16_t fun_180241a0(void** ecx, void** a2, void** a3, void** a4) {
    void** v5;
    void** v6;
    void** ebx7;
    void** v8;
    void** esi9;
    void** v10;
    void** edi11;
    void** ebx12;
    void** esi13;
    uint32_t ecx14;
    void** edi15;
    void** ecx16;
    void** eax17;
    void** edx18;
    void** edi19;
    uint32_t ecx20;
    uint32_t ecx21;
    uint32_t eax22;
    void*** esi23;
    void** edi24;
    uint32_t ecx25;
    uint32_t ecx26;
    void** eax27;

    v5 = reinterpret_cast<void**>(__return_address());
    v6 = ebx7;
    v8 = esi9;
    v10 = edi11;
    ebx12 = ecx;
    fun_1802a8b0(ecx, 0, 0, 0, 0);
    esi13 = a2;
    ecx14 = 0xffffffff;
    edi15 = esi13;
    *reinterpret_cast<void***>(ebx12) = reinterpret_cast<void**>(0x1803513c);
    do {
        if (!ecx14) 
            break;
        --ecx14;
        ++edi15;
        ++esi13;
    } while (*reinterpret_cast<void***>(edi15));
    ecx16 = reinterpret_cast<void**>(~ecx14);
    eax17 = fun_1802b2bb(ecx16, ecx16, v10, v8, v6, v5, a2, a3, a4);
    edx18 = eax17;
    *reinterpret_cast<void***>(ebx12 + 32) = edx18;
    if (edx18) {
        edi19 = esi13;
        ecx20 = 0xffffffff;
        do {
            if (!ecx20) 
                break;
            --ecx20;
            ++edi19;
        } while (*reinterpret_cast<void***>(edi19));
        ecx21 = ~ecx20;
        eax22 = ecx21;
        esi23 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(edi19) - ecx21);
        edi24 = edx18;
        ecx25 = ecx21 >> 2;
        while (ecx25) {
            --ecx25;
            *reinterpret_cast<void***>(edi24) = *esi23;
            edi24 = edi24 + 4;
            esi23 = esi23 + 4;
        }
        ecx26 = eax22 & 3;
        while (ecx26) {
            --ecx26;
            *reinterpret_cast<void***>(edi24) = *esi23;
            ++edi24;
            ++esi23;
        }
    }
    eax27 = ebx12;
    return *reinterpret_cast<int16_t*>(&eax27);
}

int32_t mmioDescend = 0x365d6;

int16_t fun_1802ab10(void** ecx, void** a2, void** a3, int32_t a4) {
    void** ecx5;

    ecx5 = *reinterpret_cast<void***>(ecx);
    mmioDescend();
    goto ecx5;
}

int32_t mmioClose = 0x365ca;

void fun_1802aaf0(void** ecx) {
    void** eax2;
    void** v3;

    eax2 = *reinterpret_cast<void***>(ecx);
    if (eax2) {
        v3 = *reinterpret_cast<void***>(ecx + 4);
        mmioClose(eax2, v3);
        *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0);
    }
    return;
}

void** g18045b0c = reinterpret_cast<void**>(0);

int32_t g18046f08;

void** g18046f04;

void fun_1802e8ff(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9);

void** fun_1802f71a(void** ecx, void** a2, void** a3);

void** fun_1802e960(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6);

void** fun_18031d70(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** v6;
    void** ebp7;
    void** v8;
    void** edi9;
    void** v10;
    void** esi11;
    void** v12;
    void** ebx13;
    void** esi14;
    void** edi15;
    int1_t zf16;
    int1_t less_or_equal17;
    void** v18;
    void** eax19;
    void** ebx20;
    void** eax21;
    void** al22;
    void** edi23;
    void** al24;
    void* al25;
    void* cl26;
    void* al27;
    void** eax28;
    uint1_t cf29;
    void* eax30;
    uint1_t cf31;
    void* al32;

    v6 = ebp7;
    v8 = edi9;
    v10 = esi11;
    v12 = ebx13;
    esi14 = a3;
    edi15 = a2;
    zf16 = g18045b0c == 0;
    if (!zf16) {
        ++g18046f08;
        less_or_equal17 = reinterpret_cast<signed char>(g18046f04) <= reinterpret_cast<signed char>(0);
        if (!less_or_equal17) {
            --g18046f08;
            fun_1802e8ff(ecx, 19, v12, v10, v8, v6, __return_address(), a2, a3);
            v18 = reinterpret_cast<void**>(1);
        } else {
            v18 = reinterpret_cast<void**>(0);
        }
        eax19 = reinterpret_cast<void**>(0xff);
        ebx20 = reinterpret_cast<void**>(0);
        do {
            eax19 = eax19;
            if (!eax19) 
                break;
            eax19 = *reinterpret_cast<void***>(esi14);
            ++esi14;
            ebx20 = *reinterpret_cast<void***>(edi15);
            ++edi15;
        } while (eax19 == ebx20 || (eax21 = fun_1802f71a(ecx, ebx20, eax19), ebx20 = eax21, eax19 = fun_1802f71a(ecx, eax19, v18), ebx20 == eax19));
        goto addr_0x18031e1a_8;
    } else {
        al22 = reinterpret_cast<void**>(0xff);
        edi23 = edi15;
        do {
            al24 = al22;
            if (!al24) 
                goto addr_0x18031dbe_11;
            al22 = *reinterpret_cast<void***>(esi14);
            ++esi14;
            ++edi23;
        } while (*reinterpret_cast<void***>(edi23) == al22 || (al25 = reinterpret_cast<void*>(al22 - 65), cl26 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(*reinterpret_cast<void**>(&ecx)) - reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(*reinterpret_cast<void**>(&ecx)) + reinterpret_cast<uint1_t>(reinterpret_cast<unsigned char>(*reinterpret_cast<void**>(&ecx)) < reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(*reinterpret_cast<void**>(&ecx)) + reinterpret_cast<uint1_t>(reinterpret_cast<unsigned char>(al25) < 26))))) & 32), al27 = reinterpret_cast<void*>(*reinterpret_cast<void***>(edi23) - 65), *reinterpret_cast<void**>(&ecx) = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(cl26) - reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(cl26) + reinterpret_cast<uint1_t>(reinterpret_cast<unsigned char>(cl26) < reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(cl26) + reinterpret_cast<uint1_t>(reinterpret_cast<unsigned char>(al27) < 26))))) & 32), al22 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(al27) + reinterpret_cast<unsigned char>(*reinterpret_cast<void**>(&ecx))) + 65), al22 == reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(al25) + reinterpret_cast<unsigned char>(cl26)) + 65));
        goto addr_0x18031dba_13;
    }
    addr_0x18031e1f_14:
    if (v18) {
        fun_1802e960(ecx, 19, v12, v10, v8, v6);
    } else {
        --g18046f08;
    }
    eax28 = eax19;
    addr_0x18031e3b_18:
    return eax28;
    addr_0x18031e1a_8:
    cf29 = reinterpret_cast<uint1_t>(reinterpret_cast<unsigned char>(eax19) < reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(eax19) + reinterpret_cast<uint1_t>(reinterpret_cast<unsigned char>(ebx20) < reinterpret_cast<unsigned char>(eax19))));
    eax30 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(eax19) - (reinterpret_cast<unsigned char>(eax19) + cf29));
    eax19 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(eax30) - (1 - reinterpret_cast<uint1_t>(reinterpret_cast<uint32_t>(eax30) < 1 - cf29)));
    goto addr_0x18031e1f_14;
    addr_0x18031dbe_11:
    eax28 = reinterpret_cast<void**>(static_cast<int32_t>(reinterpret_cast<signed char>(al24)));
    goto addr_0x18031e3b_18;
    addr_0x18031dba_13:
    cf31 = reinterpret_cast<uint1_t>(reinterpret_cast<unsigned char>(al22) < reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(al22) + reinterpret_cast<uint1_t>(reinterpret_cast<unsigned char>(al22) < reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(al25) + reinterpret_cast<unsigned char>(cl26)) + 65))));
    al32 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(al22) - reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(al22) + cf31));
    al24 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(al32) - reinterpret_cast<unsigned char>(1 - reinterpret_cast<uint1_t>(reinterpret_cast<unsigned char>(al32) < reinterpret_cast<unsigned char>(1 - cf31))));
    goto addr_0x18031dbe_11;
}

struct s171 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
    int32_t f16;
    int32_t f20;
    int32_t f24;
    signed char f28;
};

void fun_1802ad50(struct s171* ecx);

unsigned char fun_1802ad80(void** ecx, void** a2, void** a3, void** a4, void** a5);

struct s172 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void* f8;
    void* f12;
    void* f16;
    void** f20;
    signed char[3] pad24;
    void* f24;
    unsigned char f28;
};

unsigned char fun_1802af00(struct s172* ecx, uint32_t a2, void** a3);

int16_t fun_1802ae30(struct s172* ecx, void** a2, void** a3, void** a4);

int16_t fun_1802adc0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44);

int16_t fun_1802ad70(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44);

signed char fun_1802af70(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35) {
    struct s171* esp36;
    void** eax37;
    void*** esp38;
    void** v39;
    void** v40;
    unsigned char al41;
    void** esp42;
    void* esp43;
    unsigned char al44;
    void** esp45;
    void* esp46;
    void** edi47;
    void** esi48;
    void* esp49;
    void* esp50;
    void* edi51;
    void* esp52;
    void* esp53;
    void** ebx54;
    void* esp55;
    void** ebp56;
    void* esp57;
    void** esi58;
    void* esp59;
    void* esp60;
    void* esp61;
    void* esp62;
    void* esp63;
    void* esp64;
    void** ebp65;
    void** ebx66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** v74;
    void* eax75;
    void** ebp76;
    int32_t edx77;
    void*** eax78;
    void*** eax79;
    int32_t edx80;
    void* esi81;
    void*** eax82;
    void** eax83;
    int32_t eax84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** v92;
    void** v93;
    void** v94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** v103;
    void** v104;
    void** v105;
    void** v106;
    void** v107;
    void** v108;

    esp36 = reinterpret_cast<struct s171*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 32);
    fun_1802ad50(esp36);
    eax37 = a3;
    esp38 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp36) - 4 + 4 - 4 - 4);
    al41 = fun_1802ad80(esp38 + 8, eax37, 0x1000, v39, v40);
    esp42 = reinterpret_cast<void**>(esp38 - 4 + 8 + 4);
    if (al41) {
        esp43 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp42 - 4) - 4);
        al44 = fun_1802af00(reinterpret_cast<uint32_t>(esp43) + 8, 0xfff, 12);
        esp45 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp43) - 4 + 8 + 4);
        if (al44) {
            esp46 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp45 - 4) - 4 - 4 - 4 - 4);
            fun_1802ae30(reinterpret_cast<uint32_t>(esp46) + 20, 1, edi47, esi48);
            esp49 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp46) - 4 + 4 + 4 - 4);
            *reinterpret_cast<int16_t*>(&eax37) = fun_1802ae30(reinterpret_cast<uint32_t>(esp49) + 20, 2, edi47, esi48);
            esp50 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp49) - 4 + 4 + 4 - 4);
            edi51 = reinterpret_cast<void*>(4 - reinterpret_cast<unsigned char>(eax37));
            fun_1802ae30(reinterpret_cast<uint32_t>(esp50) + 20, 1, edi47, esi48);
            esp52 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp50) - 4 + 4 + 4 - 4);
            *reinterpret_cast<int16_t*>(&eax37) = fun_1802ae30(reinterpret_cast<uint32_t>(esp52) + 20, 4, edi47, esi48);
            esp53 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp52) - 4 + 4 + 4 - 4);
            ebx54 = eax37;
            *reinterpret_cast<int16_t*>(&eax37) = fun_1802ae30(reinterpret_cast<uint32_t>(esp53) + 20, 2, edi47, esi48);
            esp55 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp53) - 4 + 4 + 4 - 4);
            ebp56 = eax37;
            *reinterpret_cast<int16_t*>(&eax37) = fun_1802ae30(reinterpret_cast<uint32_t>(esp55) + 20, 1, edi47, esi48);
            esp57 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp55) - 4 + 4 + 4 - 4);
            esi58 = eax37;
            fun_1802ae30(reinterpret_cast<uint32_t>(esp57) + 20, 1, edi47, esi48);
            esp59 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp57) - 4 + 4 + 4 - 4);
            *reinterpret_cast<int16_t*>(&eax37) = fun_1802ae30(reinterpret_cast<uint32_t>(esp59) + 20, 2, edi47, esi48);
            esp60 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp59) - 4 + 4 + 4 - 4);
            fun_1802ae30(reinterpret_cast<uint32_t>(esp60) + 20, 2, edi47, esi48);
            esp61 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp60) - 4 + 4 + 4 - 4);
            fun_1802ae30(reinterpret_cast<uint32_t>(esp61) + 20, 1, edi47, esi48);
            esp62 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp61) - 4 + 4 + 4 - 4);
            fun_1802ae30(reinterpret_cast<uint32_t>(esp62) + 20, 1, edi47, esi48);
            esp63 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp62) - 4 + 4 + 4 - 4);
            fun_1802ae30(reinterpret_cast<uint32_t>(esp63) + 20, 2, edi47, esi48);
            esp64 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp63) - 4 + 4 + 4);
            fun_1802adc0(reinterpret_cast<uint32_t>(esp64) + 16, edi47, esi48, ebp65, ebx66, v67, v68, v69, v70, v71, v72, v73, v74, __return_address(), a2, eax37, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31);
            eax75 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(edi51) + reinterpret_cast<uint32_t>(edi51) * 2);
            ebp76 = *reinterpret_cast<void***>(reinterpret_cast<unsigned char>(ebp56) * 4 + 0x180440ec);
            edx77 = 0;
            eax78 = *reinterpret_cast<void****>((reinterpret_cast<uint32_t>(eax75) + reinterpret_cast<uint32_t>(ebx54 + reinterpret_cast<uint32_t>(eax75) * 4)) * 4 + 0x180440c0);
            *reinterpret_cast<void***>(a2) = reinterpret_cast<void**>(85);
            *reinterpret_cast<unsigned char*>(&edx77) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(!reinterpret_cast<int1_t>(eax37 == 3)));
            eax79 = eax78 + reinterpret_cast<int32_t>(eax78) * 4;
            edx80 = edx77 + 1;
            esi81 = reinterpret_cast<void*>(-reinterpret_cast<unsigned char>(esi58));
            eax82 = eax79 + reinterpret_cast<int32_t>(eax79) * 4;
            *reinterpret_cast<void***>(a2 + 2) = *reinterpret_cast<void***>(&edx80);
            *reinterpret_cast<void***>(a2 + 4) = ebp76;
            eax83 = reinterpret_cast<void**>(eax82 + reinterpret_cast<int32_t>(eax82) * 4);
            *reinterpret_cast<void***>(a2 + 8) = eax83;
            *reinterpret_cast<void***>(a2 + 12) = reinterpret_cast<void**>(1);
            *reinterpret_cast<void***>(a2 + 14) = reinterpret_cast<void**>(0);
            __asm__("cdq ");
            eax84 = reinterpret_cast<int32_t>(reinterpret_cast<uint32_t>(eax83 + reinterpret_cast<unsigned char>(eax83) * 8) << 7) / reinterpret_cast<signed char>(ebp76);
            *reinterpret_cast<void***>(a2 + 16) = reinterpret_cast<void**>(12);
            *reinterpret_cast<void***>(a2 + 18) = reinterpret_cast<void**>(1);
            *reinterpret_cast<void***>(a2 + 20) = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esi81) - (reinterpret_cast<uint32_t>(esi81) + reinterpret_cast<uint1_t>(reinterpret_cast<uint32_t>(esi81) < reinterpret_cast<uint32_t>(esi81) + reinterpret_cast<uint1_t>(!!esi58))) + 2);
            *reinterpret_cast<void***>(a2 + 26) = reinterpret_cast<void**>(1);
            *reinterpret_cast<void***>(a2 + 24) = *reinterpret_cast<void***>(&eax84);
            *reinterpret_cast<void***>(a2 + 28) = reinterpret_cast<void**>(0x571);
            fun_1802ad70(reinterpret_cast<uint32_t>(esp64) - 4 + 4 + 16, edi47, esi48, ebp65, ebx66, v85, v86, v87, v88, v89, v90, v91, v92, __return_address(), a2, eax37, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31);
            return 1;
        } else {
            fun_1802ad70(esp45, v93, v94, v95, v96, v97, v98, v99, v100, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35);
            return 0;
        }
    } else {
        fun_1802ad70(esp42, v101, v102, v103, v104, v105, v106, v107, v108, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35);
        return 0;
    }
}

void** fun_1802bf8a(void** a1, void** a2, void** a3, uint32_t a4);

void** fun_1802bf73(void** ecx, void** a2, uint32_t a3, void** a4) {
    void** eax5;

    eax5 = fun_1802bf8a(__return_address(), a2, 64, a3);
    return eax5;
}

void** g18047020;

void** fun_1802dfa3(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7);

void** fun_1802dfac(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, ...);

void fun_1802e5ec(void** a1, void** a2, void** a3);

void** fun_1802e6d2(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, ...);

void fun_1802e64b(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9);

void** fun_18032f60(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    int1_t cf8;
    uint32_t eax9;
    void** esi10;
    void** eax11;
    void** eax12;
    void** edi13;
    void** ebx14;
    void** eax15;
    void** ebx16;
    void** eax17;

    cf8 = reinterpret_cast<unsigned char>(a2) < reinterpret_cast<unsigned char>(g18047020);
    if (!cf8 || (eax9 = reinterpret_cast<unsigned char>(a2) & 31, ecx = *reinterpret_cast<void***>((reinterpret_cast<signed char>(a2) >> 5) * 4 + 0x18046f20), (*reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(ecx + (eax9 + eax9 * 8) * 4) + 4) & 1) == 0)) {
        eax11 = fun_1802dfa3(ecx, esi10, __return_address(), a2, a3, a4, a5);
        *reinterpret_cast<void***>(eax11) = reinterpret_cast<void**>(9);
        eax12 = fun_1802dfac(ecx, esi10, __return_address(), a2, a3, a4, a5, a6, a7);
        *reinterpret_cast<void***>(eax12) = reinterpret_cast<void**>(0);
        return 0xffffffff;
    } else {
        fun_1802e5ec(a2, edi13, ebx14);
        eax15 = fun_1802e6d2(ecx, a2, 0, 1, a2, edi13, ebx14, esi10, __return_address(), a2, a3, a4, a5, a6);
        ebx16 = reinterpret_cast<void**>(0xffffffff);
        if (eax15 != 0xffffffff && (eax17 = fun_1802e6d2(ecx, a2, 0, 2, edi13, ebx14, esi10, __return_address(), a2, a3, a4, a5, a6, a7), ebx16 = eax17, eax15 != ebx16)) {
            fun_1802e6d2(ecx, a2, eax15, 0, edi13, ebx14, esi10, __return_address(), a2, a3, a4, a5, a6, a7);
        }
        fun_1802e64b(ecx, a2, edi13, ebx14, esi10, __return_address(), a2, a3, a4);
        return ebx16;
    }
}

void** fun_1802bd9a(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11);

void** fun_1802bd35(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    int1_t cf8;
    uint32_t eax9;
    void** esi10;
    void** eax11;
    void** eax12;
    void** edi13;
    void** eax14;

    cf8 = reinterpret_cast<unsigned char>(a2) < reinterpret_cast<unsigned char>(g18047020);
    if (!cf8 || (eax9 = reinterpret_cast<unsigned char>(a2) & 31, ecx = *reinterpret_cast<void***>((reinterpret_cast<signed char>(a2) >> 5) * 4 + 0x18046f20), (*reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(ecx + (eax9 + eax9 * 8) * 4) + 4) & 1) == 0)) {
        eax11 = fun_1802dfa3(ecx, esi10, __return_address(), a2, a3, a4, a5);
        *reinterpret_cast<void***>(eax11) = reinterpret_cast<void**>(9);
        eax12 = fun_1802dfac(ecx, esi10, __return_address(), a2, a3, a4, a5, a6, a7);
        *reinterpret_cast<void***>(eax12) = reinterpret_cast<void**>(0);
        return 0xffffffff;
    } else {
        fun_1802e5ec(a2, edi13, esi10);
        eax14 = fun_1802bd9a(a2, a2, a3, a2, edi13, esi10, __return_address(), a2, a3, a4, a5);
        fun_1802e64b(ecx, a2, a2, a2, a3, a2, edi13, esi10, __return_address());
        return eax14;
    }
}

uint32_t fun_1802bcb2(void** ecx, void** a2, void** a3, void** a4, void** a5);

uint32_t fun_1802bc55(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12) {
    int1_t cf13;
    uint32_t eax14;
    void** esi15;
    void** eax16;
    void** eax17;
    void** edi18;
    uint32_t eax19;

    cf13 = reinterpret_cast<unsigned char>(a2) < reinterpret_cast<unsigned char>(g18047020);
    if (!cf13 || (eax14 = reinterpret_cast<unsigned char>(a2) & 31, ecx = *reinterpret_cast<void***>((reinterpret_cast<signed char>(a2) >> 5) * 4 + 0x18046f20), (*reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(ecx + (eax14 + eax14 * 8) * 4) + 4) & 1) == 0)) {
        eax16 = fun_1802dfa3(ecx, esi15, __return_address(), a2, a3, a4, a5);
        *reinterpret_cast<void***>(eax16) = reinterpret_cast<void**>(9);
        eax17 = fun_1802dfac(ecx, esi15, __return_address(), a2, a3, a4, a5, a6, a7);
        *reinterpret_cast<void***>(eax17) = reinterpret_cast<void**>(0);
        return 0xffffffff;
    } else {
        fun_1802e5ec(a2, edi18, esi15);
        eax19 = fun_1802bcb2(ecx, a2, a2, edi18, esi15);
        fun_1802e64b(ecx, a2, a2, a2, edi18, esi15, __return_address(), a2, a3);
        return eax19;
    }
}

int16_t fun_18022dd0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22) {
    int1_t zf23;
    void** eax24;
    void** ecx25;
    void** edi26;
    void** esi27;
    void** ebx28;
    void** eax29;

    fun_1802a8b0(ecx, a2, a3, a4, a6);
    zf23 = *reinterpret_cast<void***>(ecx + 16) == 0;
    *reinterpret_cast<void***>(ecx + 32) = a5;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180350e0);
    if (zf23) {
        eax24 = *reinterpret_cast<void***>(a2 + 8);
        ecx25 = *reinterpret_cast<void***>(a2 + 4);
        *reinterpret_cast<int16_t*>(&eax24) = fun_1800da70(ecx25, a4, ecx25, eax24, edi26, esi27, ebx28, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
        *reinterpret_cast<void***>(ecx + 16) = eax24;
    }
    eax29 = ecx;
    return *reinterpret_cast<int16_t*>(&eax29);
}

int32_t InterlockedIncrement = 0x361d6;

int32_t InterlockedDecrement = 0x361be;

void** fun_1802c2c8(void** ecx, void** a2);

uint32_t fun_1802c259(void** ecx, void** a2) {
    void** v3;
    void** ebx4;
    int1_t zf5;
    int1_t zf6;
    int32_t edi7;
    void** edi8;
    void** esi9;
    void** ebx10;
    void** eax11;

    v3 = reinterpret_cast<void**>(__return_address());
    ebx4 = reinterpret_cast<void**>(0);
    zf5 = g18045b0c == 0;
    if (!zf5) {
        InterlockedIncrement();
        zf6 = g18046f04 == 0;
        edi7 = InterlockedDecrement;
        if (!zf6) {
            edi7(0x18046f08);
            fun_1802e8ff(ecx, 19, 0x18046f08, 0x18046f08, edi8, esi9, ebx10, v3, a2);
            ecx = reinterpret_cast<void**>(19);
            ebx4 = reinterpret_cast<void**>(1);
        }
        eax11 = fun_1802c2c8(ecx, ebx10);
        v3 = eax11;
        if (!ebx4) {
            edi7(ebx10, 0x18046f08);
        } else {
            fun_1802e960(ebx10, 19, 0x18046f08, edi8, esi9, ebx10);
        }
    } else {
        if (reinterpret_cast<signed char>(a2) >= reinterpret_cast<signed char>(97) && reinterpret_cast<signed char>(a2) <= reinterpret_cast<signed char>(0x7a)) {
            return a2 - 32;
        }
    }
    goto v3;
}

int16_t fun_1802a920(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45);

int16_t fun_18022e40(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** eax45;
    void** esi46;
    int16_t ax47;

    eax45 = *reinterpret_cast<void***>(ecx + 32);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180350e0);
    fun_1802b2b0(ecx, eax45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    ax47 = fun_1802a920(ecx, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43);
    return ax47;
}

int32_t mmioOpenA = 0x365be;

int16_t fun_1802aac0(int32_t* ecx, void** a2, int32_t a3) {
    int32_t eax4;

    eax4 = reinterpret_cast<int32_t>(mmioOpenA());
    *ecx = eax4;
    goto a2;
}

int16_t fun_1802aa60(int32_t* ecx, void** a2, int32_t a3, int32_t a4) {
    int32_t* esi5;
    int32_t ecx6;
    int32_t eax7;
    int32_t v8;

    esi5 = ecx;
    ecx6 = 18;
    while (ecx6) {
        --ecx6;
        ++esi5;
    }
    eax7 = reinterpret_cast<int32_t>(mmioOpenA());
    *esi5 = eax7;
    goto v8;
}

void** g18045268 = reinterpret_cast<void**>(0xff);

signed char g18045ca0 = 0;

signed char g18045ca1 = 0;

void** g18045264 = reinterpret_cast<void**>(0xff);

int16_t fun_180327a0(void** a1, void* a2, void** a3, void*** a4);

void** fun_18030798(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7);

void** fun_18032300(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10) {
    void** eax11;
    void** ecx12;
    void* esp13;
    signed char al14;
    signed char al15;
    void** eax16;
    void** v17;
    void** eax18;
    void*** esp19;
    void** eax20;
    void** edx21;
    void** v22;
    void** v23;
    void** v24;

    eax11 = a1;
    ecx12 = g18045268;
    esp13 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x404);
    if (reinterpret_cast<signed char>(eax11) <= reinterpret_cast<signed char>(ecx12)) {
        al14 = g18045ca0;
        if (!al14) {
            al15 = g18045ca1;
            if (!al15) {
                eax16 = fun_1802bf73(ecx12, 0x18045160, 0x8301, 0x180);
                esp13 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp13) - 4 - 4 - 4 - 4 + 4 + 12);
                g18045264 = eax16;
                g18045ca1 = 1;
            } else {
                eax18 = fun_1802bf73(ecx12, 0x18045160, 0x8009, v17);
                esp13 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp13) - 4 - 4 - 4 + 4 + 8);
                g18045264 = eax18;
            }
            g18045ca0 = 1;
        }
        eax11 = g18045264;
        if (reinterpret_cast<signed char>(eax11) >= reinterpret_cast<signed char>(0)) {
            esp19 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp13) - 4 - 4);
            eax20 = reinterpret_cast<void**>(esp19 + 8);
            *reinterpret_cast<int16_t*>(&eax20) = fun_180327a0(eax20, 0x400, a2, reinterpret_cast<int32_t>(esp13) + 0x410);
            if (reinterpret_cast<signed char>(eax20) < reinterpret_cast<signed char>(0)) {
                eax20 = reinterpret_cast<void**>(0x400);
            }
            edx21 = g18045264;
            eax11 = fun_18030798(esp19 - 4 - 4 - 4 + 16 + 4, edx21, esp19 - 4 - 4 - 4 + 16 + 4, eax20, v22, v23, v24);
        }
    }
    return eax11;
}

int32_t MultiByteToWideChar = 0x36086;

void** g180458e8 = reinterpret_cast<void**>(0);

int16_t fun_18024280(void** ecx, void** a2) {
    void** edi3;
    void** esi4;
    void** ebp5;
    void** ebx6;
    void** ebx7;
    void*** edi8;
    void** eax9;
    void* esp10;
    void* esp11;
    int32_t eax12;
    void* esp13;
    void** eax14;
    void** ecx15;
    void* esp16;
    void** edi17;
    void** edx18;
    int32_t v19;

    fun_18027b90(ecx, 0, 0, edi3, esi4, ebp5, ebx6);
    ebx7 = ecx + 0x1ac;
    edi8 = reinterpret_cast<void***>(ecx + 0x1b8);
    eax9 = ecx + 0x1c0;
    *reinterpret_cast<void***>(ebx7 + 4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebx7) = reinterpret_cast<void**>(0x18035180);
    *edi8 = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1bc) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1d8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(eax9) = eax9;
    *reinterpret_cast<void***>(ecx + 0x1c4) = eax9;
    *reinterpret_cast<void***>(ecx + 0x204) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x208) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035154);
    *reinterpret_cast<void***>(ecx + 0x1b4) = ecx;
    InitializeCriticalSection(ecx + 0x1ec, edi3, esi4, ebp5, ebx6);
    esp10 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x220 - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 8 + 4 - 4 - 4 + 4);
    *reinterpret_cast<void***>(ecx + 0x1dc) = reinterpret_cast<void**>(0);
    MultiByteToWideChar(0, 0, __return_address(), 0xff, reinterpret_cast<int32_t>(esp10) + 40, 0x104, ecx + 0x1ec, edi3, esi4, ebp5, ebx6);
    esp11 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp10) - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4);
    eax12 = reinterpret_cast<int32_t>(g180458e8());
    esp13 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp11) - 4 - 4 - 4 + 4);
    if (eax12 >= 0) {
        eax14 = *edi8;
        ecx15 = *reinterpret_cast<void***>(eax14);
        *reinterpret_cast<void***>(ecx15 + 24)(eax14, reinterpret_cast<int32_t>(esp13) + 20, 18);
        esp16 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp13) - 4 - 4 - 4 - 4 + 4);
        fun_18027620(ecx, reinterpret_cast<int32_t>(esp16) + 20, eax14, reinterpret_cast<int32_t>(esp13) + 20, 18, reinterpret_cast<int32_t>(esp11) + 48, ebx7);
        fun_18027690(ecx, reinterpret_cast<int32_t>(esp16) - 4 - 4 + 4 + 4 - 4 + 20, 1, 0, eax14, reinterpret_cast<int32_t>(esp13) + 20, 18, reinterpret_cast<int32_t>(esp11) + 48, 0);
        edi17 = *edi8;
        edx18 = *reinterpret_cast<void***>(edi17);
        *reinterpret_cast<void***>(edx18 + 28)(ecx, edi17, eax14, reinterpret_cast<int32_t>(esp13) + 20, 18);
    }
    goto v19;
}

struct s173 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[23] pad28;
    void** f28;
};

void fun_180248a0(struct s173* ecx, void*** a2, void** a3) {
    *reinterpret_cast<void***>(*reinterpret_cast<void***>(a3 + 4)) = *reinterpret_cast<void***>(a3);
    *reinterpret_cast<void***>(*reinterpret_cast<void***>(a3) + 4) = *reinterpret_cast<void***>(a3 + 4);
    *reinterpret_cast<void***>(a3) = ecx->f28;
    ecx->f28 = a3;
    ecx->f0 = ecx->f0 - 1;
    *a2 = a3;
    return;
}

int16_t fun_18023cf0(void** ecx, void** a2, void** a3, void** a4) {
    void** esi5;
    void** edi6;
    void** esi7;
    int32_t ecx8;
    void*** edx9;
    void*** edi10;
    void** eax11;

    esi5 = ecx;
    fun_18027b90(esi5, a3, a4, edi6, esi7, __return_address(), a2);
    ecx8 = 21;
    *reinterpret_cast<void***>(esi5 + 0x1ac) = a2;
    edx9 = reinterpret_cast<void***>(esi5 + 0x1b8);
    edi10 = edx9;
    *reinterpret_cast<void***>(esi5 + 0x1b4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi5) = reinterpret_cast<void**>(0x18035110);
    while (ecx8) {
        --ecx8;
        *edi10 = reinterpret_cast<void**>(0);
        edi10 = edi10 + 4;
        esi5 = esi5 + 4;
    }
    eax11 = esi5;
    *edx9 = reinterpret_cast<void**>(84);
    return *reinterpret_cast<int16_t*>(&eax11);
}

int16_t fun_18027cf0(void** ecx, void** a2, void** a3, void** a4) {
    void** edi5;
    void** esi6;
    void** ebx7;
    void** eax8;

    fun_18027b90(ecx, a3, a4, edi5, esi6, ebx7, __return_address());
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x1803526c);
    fun_18027620(ecx, a2, edi5, esi6, ebx7, __return_address(), a2);
    fun_18027690(ecx, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4 - 4 - 4 - 4 + 8 + 4 - 4 - 4 + 4 + 4 - 4 + 28, 1, a4, edi5, esi6, ebx7, __return_address(), a2);
    eax8 = ecx;
    return *reinterpret_cast<int16_t*>(&eax8);
}

void fun_18025740(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6);

int32_t fun_180268c0(void** ecx, void** a2, void** a3, void** a4);

int16_t fun_18026120(void** ecx, void** a2, void** a3);

int32_t CoUninitialize = 0x364d4;

void** g18045920 = reinterpret_cast<void**>(0);

int32_t CoFreeUnusedLibraries = 0x364f6;

int32_t fun_18025630(void** ecx, void** a2) {
    void** v3;
    void** ebx4;
    void** v5;
    void** esi6;
    void** v7;
    void** edi8;
    void** esi9;
    void** edi10;
    void** ebx11;
    void** edi12;
    void** ebx13;
    void** ecx14;
    void** v15;
    void** eax16;
    void** eax17;
    int1_t zf18;

    v3 = ebx4;
    v5 = esi6;
    v7 = edi8;
    esi9 = ecx;
    fun_18025740(ecx, v7, v5, v3, __return_address(), a2);
    edi10 = *reinterpret_cast<void***>(esi9 + 0xc4);
    ebx11 = esi9 + 0xc4;
    if (edi10 != ebx11) {
        do {
            ecx = *reinterpret_cast<void***>(edi10 + 8);
            fun_180268c0(ecx, v7, v5, v3);
            edi10 = *reinterpret_cast<void***>(edi10);
        } while (edi10 != ebx11);
    }
    edi12 = *reinterpret_cast<void***>(esi9 + 0xb0);
    ebx13 = esi9 + 0xb0;
    if (edi12 != ebx13) {
        do {
            ecx14 = *reinterpret_cast<void***>(esi9 + 92);
            v15 = *reinterpret_cast<void***>(esi9 + 0x94);
            ecx = *reinterpret_cast<void***>(edi12 + 8);
            fun_18026120(ecx, ecx14, v15);
            edi12 = *reinterpret_cast<void***>(edi12);
        } while (edi12 != ebx13);
    }
    if (*reinterpret_cast<void***>(esi9 + 4)) {
        *reinterpret_cast<void***>(esi9 + 4) = reinterpret_cast<void**>(0);
        CoUninitialize(ecx);
        eax16 = g18045920;
        eax17 = eax16 - 1;
        g18045920 = eax17;
        if (reinterpret_cast<signed char>(eax17) < reinterpret_cast<signed char>(0)) {
        }
        zf18 = g18045920 == 0;
        if (zf18) {
            CoFreeUnusedLibraries(ecx);
        }
    }
    *reinterpret_cast<void***>(esi9 + 0xa8) = reinterpret_cast<void**>(0);
    return 0;
}

void fun_180264a0(void** ecx) {
    if (*reinterpret_cast<void***>(ecx)) {
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx) + 20) = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx) + 20) - 1;
    }
    return;
}

void fun_18025e50(void** ecx) {
    void** ecx2;
    void** v3;

    if (*reinterpret_cast<void***>(ecx + 24)) {
        ecx2 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 24));
        v3 = *reinterpret_cast<void***>(ecx + 24);
        *reinterpret_cast<void***>(ecx2 + 8)(v3);
        *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(0);
    }
    return;
}

int32_t OutputDebugStringA = 0x36122;

void fun_180323c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16) {
    void** esp17;
    int32_t v18;

    esp17 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x100);
    fun_180327a0(esp17, 0x400, a2, esp17 + 0x108);
    OutputDebugStringA(reinterpret_cast<uint32_t>(esp17 - 4) - 4 - 4 - 4 - 4 + 16 + 4);
    goto v18;
}

void fun_18024990(void** ecx);

void fun_1802b110(struct s64* ecx);

void fun_18024920(void** ecx) {
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035194);
    fun_18024990(ecx);
    fun_1802b110(ecx + 44);
    return;
}

void** g18045910 = reinterpret_cast<void**>(0);

void** g18045914 = reinterpret_cast<void**>(0);

void** g18045918 = reinterpret_cast<void**>(0);

void** g1804591c = reinterpret_cast<void**>(0);

int16_t fun_18025d90(void** ecx, void** a2) {
    void** edx3;
    void** eax4;
    void** edx5;
    void** edx6;
    void** edx7;
    void** ecx8;

    edx3 = g18045910;
    eax4 = ecx;
    *reinterpret_cast<void***>(ecx) = edx3;
    edx5 = g18045914;
    *reinterpret_cast<void***>(ecx + 4) = edx5;
    edx6 = g18045918;
    *reinterpret_cast<void***>(ecx + 8) = edx6;
    edx7 = g1804591c;
    *reinterpret_cast<void***>(eax4 + 16) = reinterpret_cast<void**>(1);
    *reinterpret_cast<void***>(ecx + 12) = edx7;
    ecx8 = a2;
    *reinterpret_cast<void***>(eax4 + 20) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(eax4 + 24) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(eax4 + 28) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(eax4 + 32) = reinterpret_cast<void**>(0);
    if (!ecx8) {
        ecx8 = reinterpret_cast<void**>(0x18045910);
    }
    *reinterpret_cast<void***>(eax4) = *reinterpret_cast<void***>(ecx8);
    *reinterpret_cast<void***>(eax4 + 4) = *reinterpret_cast<void***>(ecx8 + 4);
    *reinterpret_cast<void***>(eax4 + 8) = *reinterpret_cast<void***>(ecx8 + 8);
    *reinterpret_cast<void***>(eax4 + 12) = *reinterpret_cast<void***>(ecx8 + 12);
    return *reinterpret_cast<int16_t*>(&eax4);
}

int16_t fun_18025e00(void** ecx, void** a2) {
    void** ecx3;
    void** edx4;
    void** ecx5;
    void** edx6;
    void** ecx7;
    int32_t esi8;

    ecx3 = g18045910;
    *reinterpret_cast<void***>(ecx) = ecx3;
    edx4 = g18045914;
    *reinterpret_cast<void***>(ecx + 4) = edx4;
    ecx5 = g18045918;
    *reinterpret_cast<void***>(ecx + 8) = ecx5;
    edx6 = g1804591c;
    *reinterpret_cast<void***>(ecx + 12) = edx6;
    *reinterpret_cast<void***>(ecx + 16) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 20) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 24) = a2;
    *reinterpret_cast<void***>(ecx + 28) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0);
    ecx7 = *reinterpret_cast<void***>(a2);
    *reinterpret_cast<void***>(ecx7 + 4)();
    goto esi8;
}

struct s174 {
    signed char[20] pad20;
    int32_t f20;
};

struct s174* g18034448 = reinterpret_cast<struct s174*>(0x31efac30);

struct s175 {
    signed char[8] pad8;
    int32_t f8;
};

struct s175* g18044008 = reinterpret_cast<struct s175*>(0x45ffaaa0);

int32_t g8;

unsigned char fun_18026380(void** ecx) {
    void* esp2;
    void** eax3;
    void** ecx4;
    int32_t eax5;
    int32_t v6;
    void** eax7;
    void** ecx8;
    void* v9;
    int32_t eax10;
    int32_t eax11;
    void* v12;
    struct s174* ecx13;
    int32_t eax14;
    struct s175* ecx15;

    esp2 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x6c - 4);
    if (!*reinterpret_cast<void***>(ecx + 32)) {
        eax3 = *reinterpret_cast<void***>(ecx + 24);
        if (!eax3 || ((*reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(1), ecx4 = *reinterpret_cast<void***>(eax3), eax5 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(ecx4 + 16)(eax3, reinterpret_cast<int32_t>(esp2) + 16)), esp2 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp2) - 4 - 4 - 4 + 4), eax5 < 0) || !v6)) {
            return 0;
        } else {
            eax7 = *reinterpret_cast<void***>(ecx + 24);
            ecx8 = *reinterpret_cast<void***>(eax7);
            v9 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp2) + 8);
            eax10 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(ecx8 + 12)(eax7, 0x18043d48));
            esp2 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp2) - 4 - 4 - 4 - 4 - 4 + 4);
            if (eax10 >= 0) {
                eax11 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(&g0)(v9));
                if (eax11 >= 0) {
                    v12 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp2) - 4 - 4 - 4 - 4 + 4 + 12);
                    ecx13 = g18034448;
                    eax14 = reinterpret_cast<int32_t>(ecx13->f20(0x18034448));
                    if (eax14 >= 0 && reinterpret_cast<unsigned char>(*reinterpret_cast<void**>(&v12)) & 2) {
                        *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(2);
                    }
                    ecx15 = g18044008;
                    ecx15->f8(0x18044008, 0x18034448);
                }
                g8(reinterpret_cast<int32_t>(esp2) + 4, v9);
            }
        }
    }
    return static_cast<unsigned char>(reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(ecx + 32) == 2));
}

int16_t fun_18026460(void** ecx, void** a2) {
    void** eax3;
    void** ecx4;

    eax3 = ecx;
    *reinterpret_cast<void***>(eax3) = a2;
    *reinterpret_cast<void***>(eax3 + 4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(eax3 + 8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(eax3 + 32) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(eax3 + 36) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(eax3 + 40) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(eax3 + 44) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(eax3 + 64) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(eax3 + 68) = reinterpret_cast<void**>(0);
    ecx4 = eax3 + 12;
    *reinterpret_cast<void***>(eax3 + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx4 + 4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx4 + 8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx4 + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx4 + 16) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax3) + 20) = *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax3) + 20) + 1;
    return *reinterpret_cast<int16_t*>(&eax3);
}

void fun_18027220(void** ecx, void** a2, void** a3) {
    if (a2) {
        *reinterpret_cast<void***>(a2) = a3;
    }
    return;
}

struct s176 {
    signed char[20] pad20;
    void** f20;
    signed char[11] pad32;
    void** f32;
};

void fun_18026540(struct s176* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17) {
    void** eax18;
    void** esi19;

    eax18 = ecx->f20;
    *reinterpret_cast<int16_t*>(&eax18) = fun_1800da70(a2, a2, eax18, 0x3e8, esi19, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
    *reinterpret_cast<unsigned char*>(&eax18) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax18) & 0xf0);
    ecx->f32 = eax18;
    return;
}

struct s178 {
    signed char[68] pad68;
    int32_t f68;
};

struct s177 {
    signed char[4] pad4;
    struct s178** f4;
    signed char[32] pad40;
    int32_t f40;
};

void fun_18026560(struct s177* ecx, int32_t a2) {
    struct s178** ecx3;
    struct s178* edx4;

    ecx->f40 = a2;
    ecx3 = ecx->f4;
    edx4 = *ecx3;
    edx4->f68();
    goto ecx3;
}

int32_t GetActiveWindow = 0x36676;

int32_t GetCurrentProcessId = 0x36636;

int32_t GetWindowThreadProcessId = 0x3665a;

int32_t EnumWindows = 0x3664c;

void** fun_18032400() {
    int32_t eax1;
    int32_t eax2;
    int32_t edi3;
    int32_t v4;

    eax1 = reinterpret_cast<int32_t>(GetActiveWindow());
    eax2 = reinterpret_cast<int32_t>(GetCurrentProcessId());
    if (!eax1 || (GetWindowThreadProcessId(), edi3 != eax2)) {
        EnumWindows();
        goto eax2;
    } else {
        goto v4;
    }
}

int32_t CoCreateInstance = 0x3650e;

int16_t fun_18032490(int32_t a1, void** a2, void* a3);

int32_t fun_18025e70(void** ecx) {
    void** esi2;
    int32_t eax3;
    void** eax4;
    void** ecx5;
    int32_t eax6;
    void*** esp7;
    void** edx8;
    void** v9;
    void** ecx10;
    void** edi11;
    void** esi12;
    void** v13;
    void** v14;
    void** v15;
    void** v16;
    int32_t v17;
    int32_t v18;

    if (*reinterpret_cast<void***>(ecx + 20) && (esi2 = ecx + 24, !*reinterpret_cast<void***>(ecx + 24))) {
        eax3 = reinterpret_cast<int32_t>(CoCreateInstance());
        if (eax3 >= 0) {
            eax4 = *reinterpret_cast<void***>(esi2);
            ecx5 = *reinterpret_cast<void***>(eax4);
            eax6 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(ecx5 + 40)());
            esp7 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x100 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 + 4);
            if (eax6 < 0) {
                if (*reinterpret_cast<void***>(esi2)) {
                    edx8 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi2));
                    v9 = *reinterpret_cast<void***>(esi2);
                    *reinterpret_cast<void***>(edx8 + 8)(v9);
                    esp7 = esp7 - 4 - 4 + 4;
                    *reinterpret_cast<void***>(esi2) = reinterpret_cast<void**>(0);
                }
                fun_18032490(eax6, esp7 + 8, 0x100);
                ecx10 = reinterpret_cast<void**>(esp7 - 4 - 4 - 4 - 4 + 12 + 4 + 8);
                fun_180323c0(ecx10, 0x18043f34, ecx10, eax4, ecx, 0x180343b8, 0, 1, 0x180343d8, esi2, edi11, esi12, v13, v14, v15, v16);
                goto v17;
            }
        } else {
            goto v18;
        }
    }
    return 0;
}

void fun_18025f30(void** ecx, void** a2, void** a3) {
    void** eax4;
    uint32_t esi5;
    void** ecx6;
    uint32_t edx7;
    int32_t eax8;
    void* esp9;
    int32_t v10;
    void** ecx11;
    void** esi12;
    void** v13;
    void** v14;
    void** v15;
    void** v16;
    void** v17;
    void** v18;
    void** v19;
    void** v20;
    void** v21;
    int32_t v22;
    int32_t v23;

    eax4 = *reinterpret_cast<void***>(ecx + 24);
    esi5 = reinterpret_cast<unsigned char>(a2) & 0x100;
    ecx6 = *reinterpret_cast<void***>(eax4);
    edx7 = -esi5;
    eax8 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(ecx6 + 24)());
    esp9 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x100 - 4 - 4 - 4 - 4 - 4 + 4);
    if (eax8 >= 0) {
        goto v10;
    } else {
        if (!esi5) {
            ecx11 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp9) + 4);
            fun_18032490(eax8, ecx11, 0x100);
            fun_180323c0(ecx11, 0x18043f64, reinterpret_cast<int32_t>(esp9) - 4 - 4 - 4 - 4 + 12 + 4 + 4, eax4, a3, (edx7 - (edx7 + reinterpret_cast<uint1_t>(edx7 < edx7 + reinterpret_cast<uint1_t>(!!esi5))) & 2) + 2, esi12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
            goto v22;
        } else {
            goto v23;
        }
    }
}

uint32_t fun_18026350(void** ecx);

void fun_18025fc0(void** ecx, void** a2) {
    void** v3;
    void** ebx4;
    void*** esp5;
    void** v6;
    void** edi7;
    void** ebx8;
    void* esp9;
    void** edx10;
    void** eax11;
    void** ecx12;
    int32_t eax13;
    void** v14;
    void** ebp15;
    void** ebp16;
    void** v17;
    void** esi18;
    void** esi19;
    uint32_t eax20;
    void* esp21;
    uint32_t eax22;
    void*** edi23;
    void*** ecx24;
    void** eax25;
    void** ecx26;
    void** v27;
    void** eax28;
    void** ecx29;
    int32_t eax30;
    void* esp31;
    int32_t v32;
    void** ecx33;
    void** v34;
    void** v35;
    int32_t v36;
    void** ecx37;
    void** v38;
    void** v39;
    int32_t v40;

    v3 = ebx4;
    esp5 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x130 - 4 - 4);
    v6 = edi7;
    ebx8 = ecx + 28;
    if (*reinterpret_cast<void***>(ecx + 28) || (esp9 = reinterpret_cast<void*>(esp5 - 4), edx10 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp9) + 20), eax11 = *reinterpret_cast<void***>(ecx + 24), ecx12 = *reinterpret_cast<void***>(eax11), eax13 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(ecx12 + 12)()), esp5 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp9) - 4 - 4 - 4 - 4 + 4), eax13 >= 0)) {
        v14 = ebp15;
        ebp16 = a2;
        v17 = esi18;
        esi19 = *reinterpret_cast<void***>(ebp16 + 4);
        eax20 = fun_18026350(ecx);
        esp21 = reinterpret_cast<void*>(esp5 - 4 - 4 - 4 + 4);
        eax22 = eax20 >> 4;
        if (!(*reinterpret_cast<unsigned char*>(&eax22) & 1)) {
            edi23 = reinterpret_cast<void***>(0x18043d10);
            ecx24 = reinterpret_cast<void***>(0x18043d14);
            do {
                __asm__("cdq ");
                __asm__("cdq ");
                if (reinterpret_cast<int32_t>((reinterpret_cast<unsigned char>(*ecx24) - reinterpret_cast<unsigned char>(esi19) ^ reinterpret_cast<unsigned char>(edx10)) - reinterpret_cast<unsigned char>(edx10)) < reinterpret_cast<int32_t>((reinterpret_cast<unsigned char>(*edi23) - reinterpret_cast<unsigned char>(esi19) ^ reinterpret_cast<unsigned char>(edx10)) - reinterpret_cast<unsigned char>(edx10))) {
                    edi23 = ecx24;
                }
                ecx24 = ecx24 + 4;
            } while (!reinterpret_cast<int1_t>(ecx24 == 0x18043d30));
            esi19 = *edi23;
            ebp16 = a2;
        }
        eax25 = reinterpret_cast<void**>(0);
        eax25 = *reinterpret_cast<void***>(ebp16 + 2);
        if (reinterpret_cast<signed char>(eax25) > reinterpret_cast<signed char>(2)) {
        }
        ecx26 = reinterpret_cast<void**>(0);
        ecx26 = *reinterpret_cast<void***>(ebp16 + 14);
        fun_18027240(reinterpret_cast<int32_t>(esp21) + 44, eax25, esi19, ecx26, v17, v14, v6, v3, 2, eax25, 20, 17, 0, 0, 0, v27);
        eax28 = *reinterpret_cast<void***>(ebx8);
        ecx29 = *reinterpret_cast<void***>(eax28);
        eax30 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(ecx29 + 56)());
        esp31 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp21) - 4 - 4 - 4 - 4 - 4 + 16 + 4 - 4 - 4 - 4 + 4 + 4 + 4);
        if (eax30 >= 0) {
            goto v32;
        } else {
            ecx33 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp31) + 56);
            fun_18032490(eax30, ecx33, 0x100);
            fun_180323c0(ecx33, 0x18043f90, reinterpret_cast<int32_t>(esp31) - 4 - 4 - 4 - 4 + 12 + 4 + 56, v17, v14, v6, v3, 2, eax25, 20, 17, 0, 0, 0, v34, v35);
            goto v36;
        }
    } else {
        ecx37 = reinterpret_cast<void**>(esp5 + 56);
        fun_18032490(eax13, ecx37, 0x100);
        fun_180323c0(ecx37, 0x18043fcc, esp5 - 4 - 4 - 4 - 4 + 12 + 4 + 56, eax11, edx10, ebx8, 0, v6, v3, v38, v39, 20, 17, 0, 0, 0);
        goto v40;
    }
}

uint32_t fun_18026350(void** ecx) {
    void** eax2;
    void** ecx3;
    int32_t v4;

    eax2 = *reinterpret_cast<void***>(ecx + 24);
    ecx3 = *reinterpret_cast<void***>(eax2);
    *reinterpret_cast<void***>(ecx3 + 16)(eax2);
    goto v4;
}

int32_t Sleep = 0x36100;

int16_t fun_18026190(void** ecx, void* a2, void* a3) {
    void** v4;
    void** ebp5;
    void*** esp6;
    void** eax7;
    void* esp8;
    void** esi9;
    void** v10;
    void** v11;
    void** v12;
    void** v13;
    void** v14;
    void** v15;
    void** v16;
    void** v17;
    void** v18;
    void** v19;
    void* esp20;
    void** ecx21;
    void* esp22;
    void** eax23;
    void* esp24;
    void** ecx25;
    void** v26;
    void** eax27;
    void* esp28;
    void** v29;
    void** v30;
    void** v31;
    void** v32;
    void** v33;
    int32_t eax34;
    int32_t eax35;
    void** v36;
    void** ebx37;
    void** edx38;
    uint32_t eax39;
    signed char* edi40;
    int32_t ebx41;
    void* esp42;
    signed char eax43;
    uint32_t ecx44;
    void* ecx45;
    void** v46;
    void** ecx47;
    void** v48;
    void** ecx49;
    void* esp50;
    void*** esp51;
    void** v52;
    void** edx53;
    void** edx54;
    void** eax55;
    void** eax56;
    void** edx57;

    v4 = ebp5;
    esp6 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 72 - 4 - 4);
    eax7 = *reinterpret_cast<void***>(ecx + 28);
    if (!eax7) {
        esp8 = reinterpret_cast<void*>(esp6 - 4 - 4);
        fun_18027240(reinterpret_cast<int32_t>(esp8) + 48, 2, 0x5622, 16, esi9, v4, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
        esp20 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp8) - 4 - 4 - 4 + 16 + 4);
    } else {
        ecx21 = *reinterpret_cast<void***>(eax7);
        esp22 = reinterpret_cast<void*>(esp6 - 4);
        *reinterpret_cast<void***>(ecx21 + 20)(eax7, reinterpret_cast<int32_t>(esp22) + 44, 18, 0, esi9);
        esp20 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp22) - 4 - 4 - 4 - 4 + 4);
    }
    eax23 = *reinterpret_cast<void***>(ecx + 24);
    esp24 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp20) - 4);
    ecx25 = *reinterpret_cast<void***>(eax23);
    v26 = eax23;
    eax27 = reinterpret_cast<void**>(*reinterpret_cast<void***>(ecx25 + 12)());
    if (reinterpret_cast<signed char>(eax27) >= reinterpret_cast<signed char>(0)) {
        esp28 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp24) - 4 - 4 - 4 - 4 + 4 - 4 - 4);
        v29 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp28) + 24);
        v30 = v31;
        v32 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp24) + 12);
        eax34 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(v33 + 44)(v32, 0));
        if (eax34 >= 0) {
            eax35 = 0;
            v36 = ebx37;
            *reinterpret_cast<unsigned char*>(&eax35) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(*reinterpret_cast<int16_t*>(&v4 + 2) != 8));
            edx38 = v29;
            eax39 = reinterpret_cast<uint32_t>(eax35 - 1) & 0x80;
            edi40 = reinterpret_cast<signed char*>(0);
            *reinterpret_cast<signed char*>(&ebx41) = *reinterpret_cast<signed char*>(&eax39);
            *reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(&ebx41) + 1) = *reinterpret_cast<signed char*>(&ebx41);
            esp42 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp28) - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 - 4);
            eax43 = reinterpret_cast<signed char>(ebx41 << 16);
            *reinterpret_cast<int16_t*>(&eax43) = *reinterpret_cast<int16_t*>(&ebx41);
            ecx44 = reinterpret_cast<unsigned char>(v29) >> 2;
            while (ecx44) {
                --ecx44;
                *edi40 = eax43;
                edi40 = edi40 + 4;
            }
            ecx45 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(edx38) & 3);
            while (ecx45) {
                ecx45 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx45) - 1);
                *edi40 = eax43;
                ++edi40;
            }
            v46 = v29;
            ecx47 = *reinterpret_cast<void***>(v30);
            v48 = v30;
            *reinterpret_cast<void***>(ecx47 + 76)();
            ecx49 = *reinterpret_cast<void***>(&g0);
            *reinterpret_cast<void***>(ecx49 + 48)();
            esp50 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp42) - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 - 4 - 4 + 4);
            do {
                esp51 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp50) - 4);
                v52 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp50) + 44);
                edx53 = *reinterpret_cast<void***>(v48);
                *reinterpret_cast<void***>(edx53 + 16)(v48, esp51 + 44, v52);
                if (!1) {
                    if (0) {
                    }
                }
                if (!1) {
                    if (!v46) {
                        v46 = reinterpret_cast<void**>(0);
                    }
                }
                Sleep();
                esp50 = reinterpret_cast<void*>(esp51 - 4 - 4 - 4 + 4 - 4 - 4 + 4);
            } while (1 || 1);
            edx54 = *reinterpret_cast<void***>(&g0);
            *reinterpret_cast<void***>(edx54 + 72)();
            eax55 = reinterpret_cast<void**>(0);
            *reinterpret_cast<int16_t*>(&eax55) = fun_1800da70(0, 0, 0x3e8, 0, 0, 10, v48, esp51 + 44, v52, 0, 0, 0, 0, v48, 0, v46, 0, 0, 0, v36, v32, 0);
            *reinterpret_cast<void***>(&g0) = eax55;
            eax56 = reinterpret_cast<void**>(0);
            *reinterpret_cast<int16_t*>(&eax56) = fun_1800da70(0, 0, 0x3e8, 0, 0, 10, v48, esp51 + 44, v52, 0, 0, 0, 0, v48, 0, v46, 0, 0, 0, v36, v32, 0);
            *reinterpret_cast<void***>(v26) = eax56;
        }
        edx57 = *reinterpret_cast<void***>(v30);
        *reinterpret_cast<void***>(edx57 + 8)(v30, v32, 0);
    }
    goto 0x10008;
}

void fun_18026e90(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6);

int32_t fun_180268c0(void** ecx, void** a2, void** a3, void** a4) {
    void** esi5;
    void** ecx6;
    void** v7;

    fun_18026e90(ecx, esi5, __return_address(), a2, a3, a4);
    if (*reinterpret_cast<void***>(ecx + 4)) {
        ecx6 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 4));
        v7 = *reinterpret_cast<void***>(ecx + 4);
        *reinterpret_cast<void***>(ecx6 + 8)(v7);
        *reinterpret_cast<void***>(ecx + 4) = reinterpret_cast<void**>(0);
    }
    return 0;
}

int16_t fun_18026120(void** ecx, void** a2, void** a3) {
    void** ecx4;
    void** v5;
    void** eax6;
    void** esi7;
    void** eax8;
    void** edx9;
    int32_t esi10;

    if (*reinterpret_cast<void***>(ecx + 24)) {
        if (*reinterpret_cast<void***>(ecx + 28)) {
            ecx4 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 28));
            v5 = *reinterpret_cast<void***>(ecx + 28);
            *reinterpret_cast<void***>(ecx4 + 8)(v5);
            *reinterpret_cast<void***>(ecx + 28) = reinterpret_cast<void**>(0);
        }
        if (!*reinterpret_cast<void***>(ecx + 16)) {
            eax6 = a2;
            if (*reinterpret_cast<unsigned char*>(&eax6 + 1) & 1 && *reinterpret_cast<unsigned char*>(&eax6 + 1) & 4) {
                esi7 = *reinterpret_cast<void***>(ecx + 24);
                eax8 = *reinterpret_cast<void***>(esi7);
                *reinterpret_cast<void***>(eax8 + 24)(esi7, a3, 2);
            }
        } else {
            if (*reinterpret_cast<void***>(ecx + 24)) {
                edx9 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 24));
                *reinterpret_cast<void***>(edx9 + 8)();
                *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(0);
                goto esi10;
            }
        }
    }
    return 0;
}

void fun_18025740(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** ecx7;
    void** v8;

    if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 92)) & 1) && *reinterpret_cast<void***>(ecx + 0xa0)) {
        ecx7 = *reinterpret_cast<void***>(ecx + 0x9c);
        v8 = *reinterpret_cast<void***>(ecx + 0xa0);
        fun_1800d690(ecx7, v8);
        *reinterpret_cast<void***>(ecx + 0xa0) = reinterpret_cast<void**>(0);
    }
    return;
}

void fun_180268e0(void** ecx, void** a2) {
    *reinterpret_cast<void***>(ecx + 44) = a2;
    return;
}

struct s179 {
    signed char[15] pad15;
    void** f15;
};

void fun_18027430(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9);

int16_t fun_180268f0(void** ecx, void** a2, void** a3, void** a4) {
    void* esp5;
    void** v6;
    void** ebx7;
    void** eax8;
    void** edi9;
    void** v10;
    void** ecx11;
    int32_t eax12;
    void* esp13;
    void** eax14;
    void** ecx15;
    int32_t eax16;
    void** eax17;
    void** v18;
    void** edx19;
    void** v20;
    int32_t eax21;
    void** ecx22;
    void** eax23;
    void** eax24;
    struct s179* v25;
    void** v26;
    void** edi27;
    void** esi28;
    void** eax29;
    void** ecx30;
    void** v31;
    void** v32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** edx38;
    void** ecx39;
    void* eax40;
    void** eax41;
    void* eax42;
    void** esi43;
    void** ecx44;
    int32_t v45;
    int32_t v46;
    void** v47;
    void** v48;
    int32_t v49;
    void** v50;
    void** v51;
    void** v52;
    int32_t v53;

    esp5 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 24);
    v6 = ebx7;
    *reinterpret_cast<void***>(a3) = reinterpret_cast<void**>(0);
    eax8 = *reinterpret_cast<void***>(ecx + 4);
    edi9 = *reinterpret_cast<void***>(ecx + 44);
    v10 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp5) + 4);
    ecx11 = *reinterpret_cast<void***>(eax8);
    eax12 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(ecx11 + 36)());
    esp13 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp5) - 4 - 4 - 4 - 4 - 4 - 4 + 4);
    if (eax12 >= 0) {
        if (!(*reinterpret_cast<unsigned char*>(&v6) & 2) || (eax14 = *reinterpret_cast<void***>(ecx + 4), ecx15 = *reinterpret_cast<void***>(eax14), eax16 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(ecx15 + 80)()), esp13 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp13) - 4 - 4 + 4), eax16 != 0x88780096)) {
            eax17 = *reinterpret_cast<void***>(ecx + 4);
            v18 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp13) + 44);
            edx19 = *reinterpret_cast<void***>(eax17);
            v20 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp13) - 4 + 16);
            eax21 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(edx19 + 16)());
            if (eax21 >= 0) {
                ecx22 = *reinterpret_cast<void***>(ecx + 32);
                eax23 = eax8 + 15;
                if (reinterpret_cast<signed char>(eax23) >= reinterpret_cast<signed char>(ecx22)) {
                    eax23 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax23) - reinterpret_cast<unsigned char>(ecx22));
                }
                *reinterpret_cast<unsigned char*>(&eax23) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax23) & 0xf0);
                eax24 = reinterpret_cast<void**>(&v25->f15);
                if (reinterpret_cast<signed char>(eax24) >= reinterpret_cast<signed char>(ecx22)) {
                    eax24 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax24) - reinterpret_cast<unsigned char>(ecx22));
                }
                *reinterpret_cast<unsigned char*>(&eax24) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax24) & 0xf0);
                v26 = eax24;
                if (edi9) {
                    fun_18027430(edi9, eax17, v20, v18, eax23, v10, edi27, esi28, v6);
                }
                if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void**>(&v10)) & 1)) {
                    *reinterpret_cast<void***>(ecx + 36) = v26;
                }
                eax29 = *reinterpret_cast<void***>(ecx + 40);
                ecx30 = *reinterpret_cast<void***>(ecx + 16);
                if (eax29 == ecx30) {
                    eax29 = v31;
                } else {
                    *reinterpret_cast<int16_t*>(&eax29) = fun_1800da70(ecx30, v32, eax29, ecx30, eax17, v20, v18, eax23, v10, edi27, esi28, v6, v33, v34, v35, v26, v36, v37, __return_address(), a2, a3, a4);
                }
                edx38 = ecx + 48;
                ecx39 = *reinterpret_cast<void***>(edx38 + 12);
                if (!ecx39) {
                    eax40 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(edx38 + 8)) * reinterpret_cast<unsigned char>(eax29));
                } else {
                    eax40 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(eax29) << *reinterpret_cast<unsigned char*>(&ecx39));
                }
                eax41 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(eax40) + reinterpret_cast<unsigned char>(v26));
                if (reinterpret_cast<signed char>(eax41) >= reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 32))) {
                    eax41 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax41) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 32)));
                }
                eax42 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(eax41) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 36)));
                if (reinterpret_cast<int32_t>(eax42) < reinterpret_cast<int32_t>(0)) {
                    eax42 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(eax42) + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 32)));
                }
                esi43 = *reinterpret_cast<void***>(edx38 + 8);
                ecx44 = *reinterpret_cast<void***>(edx38 + 12);
                if (!ecx44) {
                    __asm__("cdq ");
                    *reinterpret_cast<void***>(a3) = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax42) / reinterpret_cast<signed char>(esi43));
                } else {
                    *reinterpret_cast<void***>(a3) = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax42) >> *reinterpret_cast<signed char*>(&ecx44));
                    goto v45;
                }
            } else {
                if (edi9) {
                    fun_18027430(edi9, eax17, v20, v18, eax8, v10, edi27, esi28, v6);
                }
                goto v46;
            }
        } else {
            if (edi9) {
                fun_18027430(edi9, eax14, eax8, v10, edi27, esi28, v6, v47, v48);
                goto v49;
            }
        }
        goto v26;
    } else {
        if (edi9) {
            fun_18027430(edi9, eax8, v10, edi27, esi28, v6, v50, v51, v52);
        }
        goto v53;
    }
}

void fun_18026dd0(void** ecx, void** a2, void* a3);

void fun_18026ca0(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** eax6;
    void** ecx7;
    int32_t eax8;
    void** ebp9;
    void** ebx10;
    void** eax11;
    void** ecx12;
    void** eax13;
    void** edi14;
    void** esi15;
    void** v16;
    void** v17;
    void** v18;
    void** v19;
    void** v20;
    void** v21;
    void** v22;
    void** eax23;
    uint32_t v24;
    void** v25;
    void** v26;
    void** v27;
    void** v28;
    void** v29;
    void** v30;
    void** eax31;
    void** edx32;
    uint32_t edi33;
    void** ecx34;
    uint32_t eax35;
    void** ecx36;
    void** eax37;
    int32_t v38;
    void** edx39;
    void** ecx40;
    void* edi41;
    void** edx42;
    int32_t v43;
    int32_t v44;

    eax6 = *reinterpret_cast<void***>(ecx + 4);
    ecx7 = *reinterpret_cast<void***>(eax6);
    eax8 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(ecx7 + 32)());
    if (eax8 >= 0) {
        eax11 = reinterpret_cast<void**>(timeGetTime(ebp9, ebx10));
        ecx12 = *reinterpret_cast<void***>(ecx + 16);
        eax13 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax11) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 64)));
        *reinterpret_cast<int16_t*>(&eax13) = fun_1800da70(ecx12, eax13, ecx12, 0x3e8, ebp9, ebx10, eax6, reinterpret_cast<int32_t>(__zero_stack_offset()) - 28, edi14, esi15, v16, v17, v18, v19, v20, v21, v22, __return_address(), a2, a3, a4, a5);
        eax23 = edi14;
        *reinterpret_cast<int16_t*>(&eax23) = fun_1800da70(ecx12, eax23, -v24, eax13, ebp9, ebx10, eax6, reinterpret_cast<int32_t>(__zero_stack_offset()) - 28, edi14, 0x3e8, 0xfffffc18, v25, v26, v27, v28, v29, v30, __return_address(), a2, a3, a4, a5);
        if (reinterpret_cast<signed char>(eax23) > reinterpret_cast<signed char>(0x3e8)) {
        }
        if (reinterpret_cast<signed char>(eax23) < reinterpret_cast<signed char>(0xfffffc18)) {
        }
        eax31 = *reinterpret_cast<void***>(ecx + 4);
        edx32 = *reinterpret_cast<void***>(eax31);
        *reinterpret_cast<void***>(edx32 + 68)();
        *reinterpret_cast<void***>(ecx + 64) = eax11;
    }
    if (reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(v24) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(v24 == 0)) {
        edi33 = -v24;
        ecx34 = *reinterpret_cast<void***>(ecx + 48 + 12);
        if (!ecx34) {
            eax35 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 48 + 8)) * edi33;
        } else {
            eax35 = edi33 << *reinterpret_cast<unsigned char*>(&ecx34);
        }
        ecx36 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 36)) - eax35);
        if (reinterpret_cast<signed char>(ecx36) >= reinterpret_cast<signed char>(0)) {
            eax37 = ecx36;
        } else {
            *reinterpret_cast<void***>(ecx + 36) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 32)) + reinterpret_cast<unsigned char>(ecx36));
            goto v38;
        }
    } else {
        edx39 = ecx + 48;
        ecx40 = *reinterpret_cast<void***>(edx39 + 12);
        if (!ecx40) {
            edi41 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(edx39 + 8)) * v24);
        } else {
            edi41 = reinterpret_cast<void*>(v24 << *reinterpret_cast<unsigned char*>(&ecx40));
        }
        edx42 = *reinterpret_cast<void***>(ecx + 36);
        fun_18026dd0(ecx, edx42, edi41);
        eax37 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 36)) + reinterpret_cast<uint32_t>(edi41));
        if (reinterpret_cast<signed char>(eax37) >= reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 32))) {
            *reinterpret_cast<void***>(ecx + 36) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax37) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 32)));
            goto v43;
        }
    }
    *reinterpret_cast<void***>(ecx + 36) = eax37;
    goto v44;
}

void fun_18026a60(void** ecx, uint32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    void** esi7;
    void** v8;
    void** v9;
    void** v10;
    void*** esp11;
    void*** esp12;
    void** eax13;
    void** ecx14;
    void** eax15;
    void** eax16;
    void** ecx17;
    void** edx18;
    void** v19;
    void** ebx20;
    void** eax21;
    void** ecx22;
    void** edx23;
    void** v24;
    void** ebx25;
    void** ecx26;
    void** eax27;
    int32_t v28;
    void** eax29;
    void** v30;
    void** ecx31;
    void** esi32;
    int32_t eax33;
    void** ecx34;
    int32_t* v35;
    void** edi36;
    void** eax37;
    void** ebp38;
    void** esi39;
    int32_t v40;

    esi7 = ecx + 48;
    v8 = *reinterpret_cast<void***>(ecx + 44);
    v9 = *reinterpret_cast<void***>(esi7);
    v10 = *reinterpret_cast<void***>(esi7 + 4);
    if (!*reinterpret_cast<void***>(esi7 + 12)) {
    }
    esp11 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 40 - 4 - 4 - 4 - 4);
    esp12 = esp11 - 4 - 4;
    eax13 = *reinterpret_cast<void***>(ecx + 4);
    ecx14 = *reinterpret_cast<void***>(eax13);
    eax15 = reinterpret_cast<void**>(*reinterpret_cast<void***>(ecx14 + 44)());
    eax16 = *reinterpret_cast<void***>(esi7);
    ecx17 = *reinterpret_cast<void***>(esi7 + 4);
    edx18 = *reinterpret_cast<void***>(esi7 + 8);
    v19 = *reinterpret_cast<void***>(esi7 + 12);
    *reinterpret_cast<void***>(v8) = reinterpret_cast<void**>(esp12 + 32);
    ebx20 = v8 + 4;
    *reinterpret_cast<void***>(ebx20) = eax16;
    *reinterpret_cast<void***>(ebx20 + 4) = ecx17;
    *reinterpret_cast<void***>(ebx20 + 8) = edx18;
    *reinterpret_cast<void***>(ebx20 + 12) = v19;
    eax21 = *reinterpret_cast<void***>(esi7);
    ecx22 = *reinterpret_cast<void***>(esi7 + 4);
    edx23 = *reinterpret_cast<void***>(esi7 + 8);
    v24 = *reinterpret_cast<void***>(esi7 + 12);
    *reinterpret_cast<void***>(v10) = reinterpret_cast<void**>(esp11 + 16);
    ebx25 = v10 + 4;
    *reinterpret_cast<void***>(ebx25) = eax21;
    *reinterpret_cast<void***>(ebx25 + 4) = ecx22;
    *reinterpret_cast<void***>(ebx25 + 8) = edx23;
    *reinterpret_cast<void***>(ebx25 + 12) = v24;
    ecx26 = *reinterpret_cast<void***>(esi7 + 12);
    if (!ecx26) {
        __asm__("cdq ");
        eax27 = reinterpret_cast<void**>(v28 / reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi7 + 8)));
    } else {
        eax27 = reinterpret_cast<void**>(v28 >> *reinterpret_cast<signed char*>(&ecx26));
    }
    *reinterpret_cast<void***>(v9) = eax27;
    eax29 = *reinterpret_cast<void***>(esi7);
    v30 = *reinterpret_cast<void***>(esi7 + 4);
    ecx31 = *reinterpret_cast<void***>(esi7 + 8);
    esi32 = *reinterpret_cast<void***>(esi7 + 12);
    if (!esi32) {
        __asm__("cdq ");
        eax33 = reinterpret_cast<signed char>(esp12 - 4 + 72) / reinterpret_cast<signed char>(ecx31);
    } else {
        ecx34 = esi32;
        eax33 = reinterpret_cast<signed char>(esp12 - 4 + 72) >> *reinterpret_cast<signed char*>(&ecx34);
    }
    *v35 = eax33;
    if (reinterpret_cast<int1_t>(eax15 == 0x88780096)) {
        edi36 = *reinterpret_cast<void***>(ecx + 4);
        eax37 = *reinterpret_cast<void***>(edi36);
        *reinterpret_cast<void***>(eax37 + 80)(edi36);
    }
    if (ebp38) {
        fun_18027430(ebp38, esp12 - 4 + 72, esp12 + 32, esp11 + 16, eax15, ebp38, eax29, v30, esi39);
    }
    goto v40;
}

void fun_18026ba0(void** ecx, int32_t a2, uint32_t a3, int32_t a4, uint32_t a5, void** a6, void** a7, void** a8, void** a9, void** a10) {
    void** edi11;
    void** v12;
    void** ecx13;
    void** ebx14;
    void** ecx15;
    void** v16;
    void** eax17;
    void** ecx18;
    void** eax19;
    void** ecx20;
    void** eax21;
    void** v22;
    void** ecx23;
    uint32_t eax24;
    int32_t v25;
    void** v26;
    void* eax27;
    void** eax28;
    void** ebp29;
    void** ebx30;

    edi11 = ecx + 48;
    v12 = *reinterpret_cast<void***>(ecx + 44);
    ecx13 = *reinterpret_cast<void***>(edi11 + 12);
    if (!ecx13) {
        ebx14 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(edi11 + 8)) * a5);
    } else {
        ebx14 = reinterpret_cast<void**>(a5 << *reinterpret_cast<unsigned char*>(&ecx13));
    }
    ecx15 = *reinterpret_cast<void***>(edi11);
    v16 = *reinterpret_cast<void***>(edi11 + 4);
    if (!*reinterpret_cast<void***>(edi11 + 12)) {
    }
    eax17 = *reinterpret_cast<void***>(ecx + 4);
    ecx18 = *reinterpret_cast<void***>(eax17);
    *reinterpret_cast<void***>(ecx18 + 76)();
    if (!*reinterpret_cast<void***>(ecx + 68)) {
        eax19 = *reinterpret_cast<void***>(ecx + 4);
        ecx20 = *reinterpret_cast<void***>(eax19);
        *reinterpret_cast<void***>(ecx20 + 48)(eax19, 0, 0, 1);
        eax21 = reinterpret_cast<void**>(timeGetTime(eax19, 0, 0, 1));
        *reinterpret_cast<void***>(ecx + 64) = eax21;
        *reinterpret_cast<void***>(ecx + 68) = reinterpret_cast<void**>(1);
    }
    v22 = *reinterpret_cast<void***>(edi11);
    ecx23 = *reinterpret_cast<void***>(edi11 + 12);
    eax24 = v25 + a3;
    v26 = *reinterpret_cast<void***>(edi11 + 4);
    if (!ecx23) {
        eax27 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(edi11 + 8)) * eax24);
    } else {
        eax27 = reinterpret_cast<void*>(eax24 << *reinterpret_cast<unsigned char*>(&ecx23));
    }
    eax28 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(eax27) + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 36)));
    if (reinterpret_cast<signed char>(eax28) >= reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 32))) {
        eax28 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax28) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 32)));
    }
    *reinterpret_cast<void***>(ecx + 36) = eax28;
    if (ebx14) {
        fun_18027430(ebx14, ebx14, v22, v26, ebp29, ebx30, v12, ecx15, v16);
    }
    goto v12;
}

void fun_18026e90(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** ecx7;
    void** v8;

    if (*reinterpret_cast<void***>(ecx + 4)) {
        ecx7 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 4));
        v8 = *reinterpret_cast<void***>(ecx + 4);
        *reinterpret_cast<void***>(ecx7 + 72)(v8);
    }
    *reinterpret_cast<void***>(ecx + 68) = reinterpret_cast<void**>(0);
    return;
}

void fun_180256f0(void** a1, void** a2);

void fun_180256c0(void** ecx) {
    void** eax2;
    void** ecx3;

    if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 92)) & 1) && !*reinterpret_cast<void***>(ecx + 0xa0)) {
        eax2 = *reinterpret_cast<void***>(ecx + 0x68);
        ecx3 = *reinterpret_cast<void***>(ecx + 0x9c);
        *reinterpret_cast<int16_t*>(&eax2) = fun_1800d5f0(ecx3, eax2, fun_180256f0, ecx);
        *reinterpret_cast<void***>(ecx + 0xa0) = eax2;
    }
    return;
}

int32_t g1804526c = 17;

int32_t fun_18032fea(void** a1, void* a2, void** a3, int32_t a4, int32_t a5);

int16_t fun_18032490(int32_t a1, void** a2, void* a3) {
    int32_t edx4;
    int32_t eax5;
    int32_t esi6;
    void** eax7;
    int32_t* ecx8;
    void*** esi9;
    uint32_t ecx10;
    void*** edi11;
    void* ebx12;
    void** edx13;
    void** eax14;
    void** edi15;
    uint32_t ecx16;
    uint32_t ecx17;
    void*** edi18;
    uint32_t ecx19;
    void** eax20;
    uint32_t ecx21;
    uint32_t edx22;
    void*** esi23;
    void** edi24;
    uint32_t ecx25;
    uint32_t ecx26;

    edx4 = g1804526c;
    eax5 = 0;
    esi6 = a1;
    if (reinterpret_cast<uint1_t>(edx4 < 0) | reinterpret_cast<uint1_t>(edx4 == 0)) {
        addr_0x180324b3_2:
        fun_18032fea(a2, a3, 0x1804562c, esi6, esi6);
        eax7 = a2;
        return *reinterpret_cast<int16_t*>(&eax7);
    } else {
        ecx8 = reinterpret_cast<int32_t*>(0x18035b10);
        do {
            if (*ecx8 == esi6) 
                break;
            ++eax5;
            ecx8 = ecx8 + 2;
        } while (eax5 < edx4);
        goto addr_0x180324b3_2;
    }
    esi9 = *reinterpret_cast<void****>(eax5 * 8 + 0x18035b14);
    ecx10 = 0xffffffff;
    edi11 = esi9;
    do {
        if (!ecx10) 
            break;
        --ecx10;
        ++edi11;
        ++esi9;
    } while (*edi11);
    ebx12 = a3;
    edx13 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(ebx12) + 0xffffffff);
    if (reinterpret_cast<signed char>(~ecx10 - 1) >= reinterpret_cast<signed char>(edx13)) {
        eax14 = a2;
        edi15 = eax14;
        ecx16 = reinterpret_cast<unsigned char>(edx13) >> 2;
        while (ecx16) {
            --ecx16;
            *reinterpret_cast<void***>(edi15) = *esi9;
            edi15 = edi15 + 4;
            esi9 = esi9 + 4;
        }
        ecx17 = reinterpret_cast<unsigned char>(edx13) & 3;
        while (ecx17) {
            --ecx17;
            *reinterpret_cast<void***>(edi15) = *esi9;
            ++edi15;
            ++esi9;
        }
        *reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(eax14) + reinterpret_cast<uint32_t>(ebx12) + 0xffffffff) = 0;
        return *reinterpret_cast<int16_t*>(&eax14);
    } else {
        edi18 = esi9;
        ecx19 = 0xffffffff;
        do {
            if (!ecx19) 
                break;
            --ecx19;
            ++edi18;
        } while (*edi18);
        eax20 = a2;
        ecx21 = ~ecx19;
        edx22 = ecx21;
        esi23 = reinterpret_cast<void***>(reinterpret_cast<uint32_t>(edi18) - ecx21);
        edi24 = eax20;
        ecx25 = ecx21 >> 2;
        while (ecx25) {
            --ecx25;
            *reinterpret_cast<void***>(edi24) = *esi23;
            edi24 = edi24 + 4;
            esi23 = esi23 + 4;
        }
        ecx26 = edx22 & 3;
        while (ecx26) {
            --ecx26;
            *reinterpret_cast<void***>(edi24) = *esi23;
            ++edi24;
            ++esi23;
        }
        return *reinterpret_cast<int16_t*>(&eax20);
    }
}

int32_t g14;

struct s180 {
    signed char[8] pad8;
    int32_t f8;
    signed char[4] pad16;
    int32_t f16;
};

signed char fun_18026eb0(void** ecx, void** a2) {
    int32_t ebx3;
    void** ecx4;
    unsigned char al5;
    void* esp6;
    void** eax7;
    void* v8;
    void** ecx9;
    int32_t eax10;
    void* v11;
    int32_t eax12;
    struct s180* ecx13;
    int32_t eax14;
    struct s180* edx15;

    ebx3 = 0;
    ecx4 = *reinterpret_cast<void***>(ecx);
    al5 = fun_18026380(ecx4);
    esp6 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 8 - 4 - 4 - 4 + 4);
    if (al5 && (eax7 = *reinterpret_cast<void***>(ecx + 4), v8 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp6) + 8), ecx9 = *reinterpret_cast<void***>(eax7), eax10 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(ecx9)(eax7, 0x18034448)), esp6 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp6) - 4 - 4 - 4 - 4 + 4), eax10 >= 0)) {
        v11 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp6) + 12);
        eax12 = reinterpret_cast<int32_t>(g14(v8, 0x18044008));
        if (eax12 >= 0 && (reinterpret_cast<unsigned char>(*reinterpret_cast<void**>(&v11)) & 2 && (ecx13 = *reinterpret_cast<struct s180**>(reinterpret_cast<int32_t>(&g0) + 3), eax14 = reinterpret_cast<int32_t>(ecx13->f16(3, 0x18044008, 3, 0, 0, ecx + 8, 4, v8, 0x18044008)), eax14 >= 0))) {
            *reinterpret_cast<signed char*>(&ebx3) = 1;
        }
        edx15 = *reinterpret_cast<struct s180**>(reinterpret_cast<int32_t>(&g0) + 3);
        edx15->f8(3, v8, 0x18044008);
    }
    return *reinterpret_cast<signed char*>(&ebx3);
}

struct s181 {
    signed char[72] pad72;
    int32_t f72;
};

struct s181* g18034408 = reinterpret_cast<struct s181*>(0x279afa86);

unsigned char g18045908 = 0;

int32_t g18043d78 = 0;

int32_t g18043d80 = 0;

int32_t g18043d88 = 0;

int32_t g18043d90 = 0;

int32_t g18043d98 = 0;

int32_t g18043da0 = 0;

int32_t g18043da8 = 0;

int32_t g18043dac = 0;

struct s182 {
    void** f0;
    signed char[3] pad4;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

void fun_18026f40(void** ecx, void** a2) {
    void** eax3;
    void** ecx4;
    int32_t eax5;
    int32_t esi6;
    struct s181* ecx7;
    unsigned char al8;
    void** esi9;
    struct s182* eax10;
    int32_t esi11;
    int32_t eax12;
    struct s47* edx13;
    int32_t v14;
    struct s47* ecx15;

    eax3 = *reinterpret_cast<void***>(ecx + 4);
    ecx4 = *reinterpret_cast<void***>(eax3);
    eax5 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(ecx4)());
    if (eax5 < 0) {
        goto esi6;
    }
    ecx7 = g18034408;
    ecx7->f72(0x18034408);
    al8 = g18045908;
    if (!(al8 & 1)) {
        __asm__("fld qword [0x180346f8]");
        __asm__("fld st0");
        __asm__("fchs ");
        __asm__("fst dword [esp+0x8]");
        __asm__("fst dword [0x18043d74]");
        __asm__("fld st1");
        __asm__("fstp dword [0x18043d7c]");
        __asm__("fld st1");
        g18045908 = reinterpret_cast<unsigned char>(al8 | 1);
        g18043d78 = 0;
        __asm__("fstp dword [0x18043d84]");
        __asm__("fld st1");
        g18043d80 = 2;
        g18043d88 = 0;
        __asm__("fstp dword [0x18043d8c]");
        g18043d90 = 16;
        g18043d98 = 0;
        __asm__("fst dword [0x18043d94]");
        __asm__("fstp dword [0x18043d9c]");
        g18043da0 = 32;
        g18043da8 = 0;
        __asm__("fstp dword [0x18043da4]");
        g18043dac = 0;
    }
    esi9 = *reinterpret_cast<void***>(ecx + 8);
    eax10 = reinterpret_cast<struct s182*>(0x18043d70);
    do {
        if (eax10->f0 == esi9) 
            break;
        ++eax10;
    } while (!reinterpret_cast<int1_t>(eax10 == 0x18043db0));
    goto addr_0x18027031_8;
    addr_0x18027036_9:
    if (reinterpret_cast<uint1_t>(!reinterpret_cast<int1_t>(eax10 == 0x18043db0))) {
        esi11 = eax10->f12;
        eax12 = eax10->f4;
        edx13 = *reinterpret_cast<struct s47**>(reinterpret_cast<int32_t>(&g0) + 1);
        v14 = eax10->f8;
        edx13->f76(1, eax12, v14, esi11, 0);
    }
    ecx15 = *reinterpret_cast<struct s47**>(reinterpret_cast<int32_t>(&g0) + 1);
    ecx15->f8();
    goto 0;
    addr_0x18027031_8:
    eax10 = reinterpret_cast<struct s182*>(0x18043db0);
    goto addr_0x18027036_9;
}

void fun_18027430(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9) {
    void** eax10;
    void** edx11;

    if (*reinterpret_cast<void***>(ecx + 24)) {
        eax10 = reinterpret_cast<void**>(*reinterpret_cast<void***>(ecx + 20)());
        edx11 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 8)) + (reinterpret_cast<unsigned char>(eax10) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 36))));
        *reinterpret_cast<void***>(ecx + 36) = eax10;
        *reinterpret_cast<void***>(ecx + 8) = edx11;
    }
    return;
}

void** fun_180248d0(void** ecx);

int16_t fun_180249f0(void** ecx, void** a2, void** a3, void** a4) {
    void** ecx5;
    void** eax6;
    void** eax7;

    fun_180248d0(ecx);
    *reinterpret_cast<void***>(ecx + 92) = a2;
    *reinterpret_cast<void***>(ecx + 96) = a4;
    *reinterpret_cast<void***>(ecx + 100) = reinterpret_cast<void**>(0x3e8);
    *reinterpret_cast<void***>(ecx + 0x68) = a4;
    *reinterpret_cast<void***>(ecx + 0x6c) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x70) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x80) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x84) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a4) + reinterpret_cast<unsigned char>(a4));
    *reinterpret_cast<void***>(ecx + 0x88) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a4) << 2);
    *reinterpret_cast<void***>(ecx + 0x8c) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x90) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x94) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x98) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x9c) = a3;
    *reinterpret_cast<void***>(ecx + 0xa0) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0xa4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0xa8) = reinterpret_cast<void**>(0);
    ecx5 = ecx + 0xb0;
    *reinterpret_cast<void***>(ecx + 0xac) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0xbc) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx5) = ecx5;
    *reinterpret_cast<void***>(ecx + 0xb4) = ecx5;
    *reinterpret_cast<void***>(ecx + 0xc0) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0xd0) = reinterpret_cast<void**>(0);
    eax6 = ecx + 0xc4;
    *reinterpret_cast<void***>(ecx + 0xc8) = eax6;
    *reinterpret_cast<void***>(eax6) = eax6;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180351c4);
    eax7 = ecx;
    return *reinterpret_cast<int16_t*>(&eax7);
}

struct s183 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[7] pad12;
    int32_t f12;
    int32_t f16;
    signed char[268] pad288;
    void** f288;
    signed char[135] pad424;
    signed char f424;
};

struct s184 {
    void** f0;
    signed char[3] pad4;
    void** f4;
};

int16_t fun_180171d0(struct s183* ecx, struct s183* a2, struct s184* a3) {
    void* eax4;
    int32_t ecx5;
    int32_t eax6;
    int32_t eax7;

    eax4 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a2->f0) - reinterpret_cast<unsigned char>(a3->f0));
    if (eax4) {
        ecx5 = a2->f16;
        if (ecx5 < 0) {
            __asm__("cdq ");
            eax6 = reinterpret_cast<int32_t>(eax4) / a2->f12;
            return *reinterpret_cast<int16_t*>(&eax6);
        } else {
            eax7 = reinterpret_cast<int32_t>(eax4) >> *reinterpret_cast<signed char*>(&ecx5);
            return *reinterpret_cast<int16_t*>(&eax7);
        }
    } else {
        return 0;
    }
}

void fun_18027a90(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42) {
    void** v43;
    void** v44;
    void** esi45;
    void** esi46;
    void** v47;
    void** edi48;
    void** edi49;
    void** v50;
    void** ebx51;
    void*** ebx52;
    void** v53;

    v43 = reinterpret_cast<void**>(__return_address());
    v44 = esi45;
    esi46 = ecx;
    v47 = edi48;
    edi49 = reinterpret_cast<void**>(0);
    if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi46 + 44)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(esi46 + 44) == 0)) {
        *reinterpret_cast<void***>(esi46 + 44) = reinterpret_cast<void**>(0);
        return;
    } else {
        v50 = ebx51;
        ebx52 = reinterpret_cast<void***>(esi46 + 0x1a0);
        do {
            v53 = *ebx52;
            fun_1802b2b0(ecx, v53, v50, v47, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
            ++edi49;
            ebx52 = ebx52 + 4;
        } while (reinterpret_cast<signed char>(edi49) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi46 + 44)));
        *reinterpret_cast<void***>(esi46 + 44) = reinterpret_cast<void**>(0);
        return;
    }
}

struct s185 {
    void** f0;
    signed char[3] pad4;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

struct s186 {
    void** f0;
    signed char[3] pad4;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

void fun_180279c0(void** ecx) {
    void** edx2;
    struct s185* eax3;
    struct s185* edi4;
    struct s186* esi5;

    edx2 = reinterpret_cast<void**>(0);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 44)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(ecx + 44) == 0))) {
        eax3 = reinterpret_cast<struct s185*>(ecx + 0x124);
        do {
            edi4 = eax3;
            *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(eax3) - 4) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(eax3) - 0x7c);
            esi5 = reinterpret_cast<struct s186*>(reinterpret_cast<uint32_t>(eax3) - 0x78);
            ++edx2;
            eax3 = reinterpret_cast<struct s185*>(reinterpret_cast<uint32_t>(eax3) + 20);
            edi4->f0 = esi5->f0;
            edi4->f4 = esi5->f4;
            edi4->f8 = esi5->f8;
            edi4->f12 = esi5->f12;
        } while (reinterpret_cast<signed char>(edx2) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 44)));
    }
    return;
}

void** fun_18027880(struct s183* ecx) {
    struct s184* edi2;
    struct s183* ebx3;
    void** eax4;

    edi2 = reinterpret_cast<struct s184*>(&ecx->f288);
    ebx3 = reinterpret_cast<struct s183*>(reinterpret_cast<uint32_t>(ecx) + 0xa8);
    *reinterpret_cast<int16_t*>(&eax4) = fun_180171d0(ecx, ebx3, edi2);
    if (!1) {
        eax4 = ecx->f0;
        *reinterpret_cast<void***>(eax4 + 20)(ecx);
        *reinterpret_cast<int16_t*>(&eax4) = fun_180171d0(ecx, ebx3, edi2);
    }
    return eax4;
}

int16_t fun_18027a10(void** ecx, void** a2);

void fun_18027ad0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34);

int16_t fun_18027d40(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26) {
    void** ecx27;
    void** edx28;
    void*** esp29;
    void** esi30;
    void** v31;
    void** v32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** eax45;

    fun_18027a10(ecx, a4);
    ecx27 = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1b8) = a3;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035298);
    *reinterpret_cast<int16_t*>(&ecx27) = *reinterpret_cast<int16_t*>(a3 + 22);
    edx28 = *reinterpret_cast<void***>(a3 + 12);
    esp29 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 - 4 - 4 + 4 + 4 - 4 - 4);
    fun_18027240(esp29 + 12, 1, edx28, ecx27, esi30, v31, v32, v33, v34, v35, __return_address(), a2, a3, a4, a5, a6);
    fun_18027620(ecx, esp29 - 4 - 4 - 4 + 16 + 4 + 4, esi30, v36, v37, v38, v39);
    fun_18027ad0(ecx, 1, esi30, v40, v41, v42, v43, v44, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
    eax45 = ecx;
    return *reinterpret_cast<int16_t*>(&eax45);
}

int16_t fun_18027e90(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26) {
    void** edx27;
    void** eax28;
    void*** esp29;
    void** esi30;
    void** v31;
    void** v32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** ecx40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** eax46;

    fun_18027a10(ecx, a4);
    edx27 = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1b8) = a2;
    *reinterpret_cast<void***>(ecx + 0x1bc) = a3;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180352c0);
    *reinterpret_cast<int16_t*>(&edx27) = *reinterpret_cast<int16_t*>(a3 + 22);
    eax28 = *reinterpret_cast<void***>(a3 + 12);
    esp29 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 - 4 - 4 + 4 + 4 - 4 - 4);
    fun_18027240(esp29 + 12, 1, eax28, edx27, esi30, v31, v32, v33, v34, v35, __return_address(), a2, a3, a4, a5, a6);
    fun_18027620(ecx, esp29 - 4 - 4 - 4 + 16 + 4 + 4, esi30, v36, v37, v38, v39);
    ecx40 = reinterpret_cast<void**>(0);
    ecx40 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x1bc) + 10);
    fun_18027ad0(ecx, ecx40, esi30, v41, v42, v43, v44, v45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

void fun_18027ad0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34) {
    void** v35;
    void** ebp36;
    void** ebp37;
    void** v38;
    void** esi39;
    void** esi40;
    void** v41;
    void** ebx42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** eax47;
    void** v48;
    void** v49;
    void** ecx50;
    void** ebx51;
    void** v52;
    void** edi53;
    void*** edi54;
    void** v55;
    void** eax56;

    v35 = ebp36;
    ebp37 = a2;
    v38 = esi39;
    esi40 = ecx;
    if (ebp37 != *reinterpret_cast<void***>(esi40 + 44)) {
        v41 = ebx42;
        fun_18027a90(ecx, v41, v38, v35, v43, v44, v45, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34);
        eax47 = esi40 + 28;
        v48 = *reinterpret_cast<void***>(esi40 + 28);
        v49 = *reinterpret_cast<void***>(eax47 + 4);
        ecx50 = *reinterpret_cast<void***>(eax47 + 12);
        if (!ecx50) {
            ebx51 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax47 + 8)) * reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi40 + 0x19c)));
        } else {
            ebx51 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi40 + 0x19c)) << *reinterpret_cast<unsigned char*>(&ecx50));
        }
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(ebp37) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(ebp37 == 0))) {
            v52 = edi53;
            edi54 = reinterpret_cast<void***>(esi40 + 0x1a0);
            do {
                eax56 = fun_1802b2bb(ecx50, ebx51, v52, v41, v38, v35, v48, v49, v55);
                *edi54 = eax56;
                edi54 = edi54 + 4;
                --ebp37;
            } while (ebp37);
            ebp37 = a2;
        }
        fun_18027690(esi40, esi40 + 0x1a0, ebp37, ebx51, v41, v38, v35, v48, v49);
        fun_180279c0(esi40);
    }
    return;
}

unsigned char fun_18028200(void** ecx) {
    struct s184* eax2;
    struct s183* ecx3;

    if (*reinterpret_cast<void***>(ecx + 0x1c8) == 0x10000) {
        if (!*reinterpret_cast<void***>(ecx + 0x1d0)) {
            eax2 = reinterpret_cast<struct s184*>(ecx + 0x120);
            ecx3 = reinterpret_cast<struct s183*>(ecx + 0xa8);
            *reinterpret_cast<int16_t*>(&eax2) = fun_180171d0(ecx3, ecx3, eax2);
            return static_cast<unsigned char>(reinterpret_cast<uint1_t>(eax2 == 0));
        } else {
            return 0;
        }
    } else {
        return 0;
    }
}

struct s188 {
    signed char[12] pad12;
    int32_t f12;
};

struct s189 {
    signed char[16] pad16;
    int32_t f16;
};

struct s187 {
    struct s188* f0;
    signed char[40] pad44;
    int32_t f44;
    signed char[256] pad304;
    int32_t f304;
    signed char[112] pad420;
    int32_t f420;
    signed char[16] pad440;
    struct s189** f440;
    signed char[4] pad448;
    signed char f448;
    signed char f449;
};

struct s190 {
    int32_t f0;
    int32_t f4;
};

struct s191 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

struct s192 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

int16_t fun_180278b0(struct s187* ecx, struct s190* a2, int32_t* a3, int32_t a4) {
    struct s187* ebp5;
    struct s188* eax6;
    int32_t eax7;
    int32_t ecx8;
    int32_t eax9;
    int32_t ebx10;
    int32_t v11;
    struct s190* edi12;
    int32_t* edx13;
    struct s191* eax14;
    struct s192* ecx15;
    int32_t ecx16;
    int32_t esi17;

    ebp5 = ecx;
    eax6 = ebp5->f0;
    eax7 = reinterpret_cast<int32_t>(eax6->f12());
    if (a4 > eax7) {
    }
    ecx8 = ebp5->f44;
    eax9 = a4;
    ebx10 = 0;
    v11 = eax9;
    if (!(reinterpret_cast<uint1_t>(ecx8 < 0) | reinterpret_cast<uint1_t>(ecx8 == 0))) {
        edi12 = a2;
        edx13 = &ebp5->f304;
        do {
            eax14 = reinterpret_cast<struct s191*>(edx13 - 3);
            edi12->f0 = *(edx13 - 4);
            ecx15 = reinterpret_cast<struct s192*>(&edi12->f4);
            ecx15->f0 = eax14->f0;
            ecx15->f4 = eax14->f4;
            ecx15->f8 = eax14->f8;
            ecx15->f12 = eax14->f12;
            ecx16 = *edx13;
            if (ecx16 < 0) {
                eax9 = v11;
                esi17 = *(edx13 - 1) * eax9;
            } else {
                eax9 = v11;
                esi17 = eax9 << *reinterpret_cast<unsigned char*>(&ecx16);
            }
            edi12 = reinterpret_cast<struct s190*>(reinterpret_cast<int32_t>(edi12) + 20);
            ++ebx10;
            *(edx13 - 4) = *(edx13 - 4) + esi17;
            edx13 = edx13 + 5;
        } while (ebx10 < ebp5->f44);
    }
    if (a3) {
        *a3 = ebp5->f44;
    }
    return *reinterpret_cast<int16_t*>(&eax9);
}

int16_t fun_18028000(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26);

int16_t fun_18028240(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21) {
    void** esi22;
    void** eax23;

    fun_18028000(ecx, a2, a3, a4, esi22, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035364);
    eax23 = ecx;
    return *reinterpret_cast<int16_t*>(&eax23);
}

int16_t fun_18027fe0(void** ecx, void** a2);

int16_t fun_18028800(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24) {
    void** edx25;
    void** eax26;
    void*** esp27;
    void** edi28;
    void** esi29;
    void** ebx30;
    void** v31;
    void** v32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** eax38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** eax45;

    fun_18027fe0(ecx, a2);
    edx25 = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1b8) = a3;
    *reinterpret_cast<void***>(ecx + 0x1bc) = a4;
    *reinterpret_cast<void***>(ecx + 0x1c0) = reinterpret_cast<void**>(1);
    *reinterpret_cast<signed char*>(ecx + 0x1c1) = *reinterpret_cast<signed char*>(&a5);
    *reinterpret_cast<signed char*>(ecx + 0x1c2) = 0;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180353e8);
    *reinterpret_cast<int16_t*>(&edx25) = *reinterpret_cast<int16_t*>(a3 + 22);
    eax26 = *reinterpret_cast<void***>(a3 + 12);
    esp27 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4);
    fun_18027240(esp27 + 20, 1, eax26, edx25, edi28, esi29, ebx30, v31, v32, v33, v34, v35, __return_address(), a2, a3, a4);
    fun_18027620(ecx, esp27 - 4 - 4 - 4 + 16 + 4 + 12, edi28, esi29, ebx30, v36, v37);
    if (!*reinterpret_cast<signed char*>(&a5)) {
        eax38 = ecx;
        *reinterpret_cast<void***>(ecx + 44) = *reinterpret_cast<void***>(a3 + 44);
        return *reinterpret_cast<int16_t*>(&eax38);
    } else {
        v39 = *reinterpret_cast<void***>(a3 + 44);
        fun_18027ad0(ecx, v39, edi28, esi29, ebx30, v40, v41, v42, v43, v44, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24);
        eax45 = ecx;
        return *reinterpret_cast<int16_t*>(&eax45);
    }
}

int16_t fun_180283c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14) {
    void** v15;
    void** v16;
    void** ebx17;
    void** v18;
    void** ebp19;
    void** ebx20;
    void** v21;
    void** esi22;
    void** v23;
    void** edi24;
    void** v25;
    void** v26;
    void** v27;
    void** v28;
    void** v29;
    void** esi30;
    int32_t edx31;
    void** eax32;
    void** ecx33;
    void** ebp34;
    void** edi35;
    void** ebp36;
    void** ebp37;
    void** ebp38;
    void** eax39;
    void** v40;
    void** edi41;
    void** eax42;
    void** ecx43;
    void** edx44;
    void** ebp45;
    void** ebp46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** eax51;
    int1_t less52;
    void** eax53;

    v15 = reinterpret_cast<void**>(__return_address());
    v16 = ebx17;
    v18 = ebp19;
    ebx20 = ecx;
    v21 = esi22;
    v23 = edi24;
    fun_18028000(ebx20, a2, a3, a4, v23, v21, v18, v16, v25, v26, v27, v28, v29, v15, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
    esi30 = ebx20 + 0x210;
    edx31 = 6;
    eax32 = esi30;
    ecx33 = eax32 + 4;
    do {
        *reinterpret_cast<void***>(eax32) = reinterpret_cast<void**>(0);
        ebp34 = g180458c8;
        edi35 = ecx33;
        eax32 = eax32 + 20;
        ecx33 = ecx33 + 20;
        --edx31;
        *reinterpret_cast<void***>(edi35) = ebp34;
        ebp36 = g180458cc;
        *reinterpret_cast<void***>(edi35 + 4) = ebp36;
        ebp37 = g180458d0;
        *reinterpret_cast<void***>(edi35 + 8) = ebp37;
        ebp38 = g180458d4;
        *reinterpret_cast<void***>(edi35 + 12) = ebp38;
    } while (edx31);
    eax39 = *reinterpret_cast<void***>(ebx20 + 44);
    *reinterpret_cast<void***>(ebx20) = reinterpret_cast<void**>(0x180353a0);
    v40 = reinterpret_cast<void**>(0);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax39) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax39 == 0))) {
        edi41 = ebx20 + 0x1e0;
        do {
            eax42 = *reinterpret_cast<void***>(ebx20 + 28);
            ecx43 = *reinterpret_cast<void***>(ebx20 + 28 + 4);
            edx44 = *reinterpret_cast<void***>(ebx20 + 28 + 8);
            ebp45 = *reinterpret_cast<void***>(ebx20 + 28 + 12);
            *reinterpret_cast<void***>(esi30) = edi41;
            ebp46 = esi30 + 4;
            *reinterpret_cast<void***>(esi30 + 4) = eax42;
            *reinterpret_cast<void***>(ebp46 + 4) = ecx43;
            *reinterpret_cast<void***>(ebp46 + 8) = edx44;
            *reinterpret_cast<void***>(ebp46 + 12) = ebp45;
            fun_18017250(esi30, 2, v23, v21, v18, v16, v47, v48, v49, v50, ebp45, v15, a2, a3, v40, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
            eax51 = v40 + 1;
            edi41 = edi41 + 8;
            esi30 = esi30 + 20;
            less52 = reinterpret_cast<signed char>(eax51) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(ebx20 + 44));
            v40 = eax51;
        } while (less52);
    }
    eax53 = ebx20;
    return *reinterpret_cast<int16_t*>(&eax53);
}

void fun_18029120(void** ecx, void** a2, void** a3, int32_t a4) {
    int32_t eax5;

    *reinterpret_cast<void***>(ecx + 0x350) = a3;
    *reinterpret_cast<void***>(ecx + 0x354) = a2;
    *reinterpret_cast<int32_t*>(ecx + 0x348) = 2;
    __asm__("cdq ");
    eax5 = reinterpret_cast<int32_t>(a4 - reinterpret_cast<unsigned char>(a2)) >> 1;
    *reinterpret_cast<int32_t*>(ecx + 0x3d0) = eax5;
    *reinterpret_cast<int32_t*>(ecx + 0x3d4) = a4 - eax5;
    *reinterpret_cast<int32_t*>(ecx + 0x344) = 0;
    *reinterpret_cast<int32_t*>(ecx + 0x34c) = 0;
    return;
}

int16_t fun_18028d60(void** ecx, void** a2, void** a3);

int16_t fun_18028f00(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** edi6;
    void** edi7;
    void** esi8;
    void** ebx9;
    void** eax10;
    void** edx11;

    fun_180274d0(ecx);
    edi6 = ecx + 0x19c;
    *reinterpret_cast<void***>(ecx + 0x198) = a3;
    fun_18028d60(edi6, a3, a4);
    *reinterpret_cast<void***>(ecx + 0x340) = reinterpret_cast<void**>(0);
    *reinterpret_cast<int32_t*>(ecx + 0x34c) = 0;
    *reinterpret_cast<int32_t*>(ecx + 0x450) = 0;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035444);
    fun_18027620(ecx, a4, edi7, esi8, ebx9, __return_address(), a2);
    eax10 = a5;
    *reinterpret_cast<int16_t*>(&eax10) = fun_18028cf0(a2, a2, edi6, eax10, 0, 0, edi7);
    *reinterpret_cast<void***>(ecx + 0x340) = eax10;
    edx11 = *reinterpret_cast<void***>(eax10);
    *reinterpret_cast<void***>(edx11 + 40)(eax10);
    fun_18029120(ecx, 0, 0, 0x400);
    goto ebx9;
}

void fun_18027a70(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40) {
    void** esi41;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035218);
    fun_18027a90(ecx, esi41, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    fun_180275f0(ecx);
    return;
}

struct s194 {
    signed char[8] pad8;
    int32_t f8;
};

struct s193 {
    void** f0;
    signed char[407] pad408;
    struct s194** f408;
    uint32_t f412;
};

void* fun_18028eb0(struct s193* ecx, void** a2);

void* fun_18029280(void** ecx, void** a2, void** a3) {
    void* ax4;

    ax4 = fun_18028eb0(ecx + 0x19c, a2);
    return ax4;
}

struct s196 {
    signed char[8] pad8;
    int32_t f8;
    signed char[8] pad20;
    int32_t f20;
};

struct s195 {
    signed char[44] pad44;
    void* f44;
    void** f48;
    signed char[3] pad52;
    int32_t f52;
    signed char[356] pad412;
    void** f412;
    signed char[27] pad440;
    void** f440;
    signed char[3] pad444;
    void** f444;
    signed char[3] pad448;
    struct s196** f448;
    void** f452;
    signed char[3] pad456;
    void** f456;
    signed char[3] pad460;
    void** f460;
    signed char[3] pad464;
    void** f464;
    signed char[7] pad472;
    void** f472;
    signed char[3] pad476;
    signed char f476;
    signed char[7] pad484;
    int32_t f484;
    int32_t f488;
    signed char[8] pad500;
    void** f500;
    signed char[23] pad524;
    int32_t f524;
    void** f528;
    signed char[11] pad540;
    void** f540;
    signed char[23] pad564;
    int32_t f564;
    signed char[12] pad580;
    void** f580;
    signed char[23] pad604;
    int32_t f604;
};

struct s197 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
    signed char[100] pad116;
    uint32_t f116;
    int32_t f120;
    signed char[112] pad236;
    int32_t f236;
    int32_t f240;
};

struct s198 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

struct s199 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

void fun_18027770(struct s195* ecx, void** a2) {
    void* ebp3;
    struct s195* v4;
    struct s197* eax5;
    int32_t edx6;
    int32_t ecx7;
    uint32_t esi8;
    int32_t ecx9;
    int32_t esi10;
    int32_t edi11;
    int32_t ebx12;
    struct s198* edx13;
    struct s197* ecx14;
    struct s199* edx15;

    ebp3 = reinterpret_cast<void*>(0);
    v4 = ecx;
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(ecx->f44) < 0) | reinterpret_cast<uint1_t>(ecx->f44 == 0))) {
        eax5 = reinterpret_cast<struct s197*>(&ecx->f52);
        do {
            edx6 = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(eax5) - 4);
            ecx7 = eax5->f12;
            if (ecx7 < 0) {
                esi8 = eax5->f8 * reinterpret_cast<unsigned char>(a2);
            } else {
                esi8 = reinterpret_cast<unsigned char>(a2) << *reinterpret_cast<unsigned char*>(&ecx7);
            }
            ebp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(ebp3) + 1);
            ecx9 = eax5->f0;
            esi10 = eax5->f4;
            edi11 = eax5->f8;
            ebx12 = eax5->f12;
            eax5->f116 = edx6 + esi8;
            edx13 = reinterpret_cast<struct s198*>(&eax5->f120);
            eax5->f120 = ecx9;
            edx13->f4 = esi10;
            edx13->f8 = edi11;
            edx13->f12 = ebx12;
            eax5->f236 = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(eax5) - 4);
            ecx14 = eax5;
            edx15 = reinterpret_cast<struct s199*>(&eax5->f240);
            eax5 = reinterpret_cast<struct s197*>(reinterpret_cast<int32_t>(eax5) + 20);
            edx15->f0 = ecx14->f0;
            edx15->f4 = ecx14->f4;
            edx15->f8 = ecx14->f8;
            edx15->f12 = ecx14->f12;
        } while (reinterpret_cast<int32_t>(ebp3) < reinterpret_cast<int32_t>(v4->f44));
    }
    return;
}

int16_t fun_180292a0(void** ecx, void** a2);

struct s200 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

struct s201 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

int16_t fun_180292c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78) {
    void** v79;
    void** v80;
    void** ebx81;
    void** ebx82;
    void** v83;
    void** ebp84;
    void** v85;
    void** esi86;
    void** v87;
    void** edi88;
    void** esi89;
    void* esp90;
    void** edi91;
    int32_t ebp92;
    void** edx93;
    struct s200* eax94;
    void* esp95;
    void** ebp96;
    void** v97;
    void** v98;
    void** edx99;
    struct s201* eax100;
    void** v101;
    void** v102;
    void** v103;
    void** eax104;
    void** v105;
    void*** esp106;
    void** v107;
    void* esp108;
    void** v109;
    void** v110;
    void** v111;
    void** v112;
    void** v113;
    void** v114;
    void** v115;
    void** v116;
    void** v117;
    void** v118;
    void** v119;
    void** v120;
    void** v121;
    void** v122;
    void** v123;
    void** v124;
    void** v125;
    void** v126;
    void** v127;
    void** v128;
    void** v129;
    void** v130;
    void** v131;
    void** v132;
    void** v133;
    void** v134;
    void** v135;
    void** v136;
    void** v137;
    void** v138;
    void** v139;
    void** v140;
    void** v141;
    void** v142;
    void** v143;
    void** v144;
    void** v145;
    void** v146;
    void** edx147;
    void** v148;
    void** v149;
    void** v150;
    void** v151;
    void** v152;
    void** v153;
    void** v154;
    void** v155;
    void** v156;
    void** v157;
    void** v158;
    void** v159;
    void** edx160;
    void** v161;
    void** v162;
    void** v163;
    void** v164;
    void** v165;
    void** v166;
    void** v167;
    void** v168;
    void** v169;
    void** v170;
    void** v171;
    void** v172;
    void** edx173;
    void** eax174;
    void** edx175;
    void** eax176;
    int32_t v177;
    void** edx178;
    int32_t v179;

    v79 = reinterpret_cast<void**>(__return_address());
    v80 = ebx81;
    ebx82 = a4;
    v83 = ebp84;
    v85 = esi86;
    v87 = edi88;
    esi89 = ecx;
    fun_180292a0(ecx, ebx82);
    *reinterpret_cast<void***>(esi89 + 0x1b8) = reinterpret_cast<void**>(0x3f000000);
    *reinterpret_cast<void***>(esi89 + 0x1bc) = reinterpret_cast<void**>(0x3f000000);
    *reinterpret_cast<void***>(esi89 + 0x1c4) = a3;
    *reinterpret_cast<void***>(esi89 + 0x1c0) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi89 + 0x1c8) = reinterpret_cast<void**>(0);
    fun_18019180(esi89 + 0x1cc);
    fun_18019180(esi89 + 0x1f4);
    esp90 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 68 - 4 - 4 - 4 - 4 - 4 - 4 + 4 + 4 - 4 + 4 - 4 + 4);
    edi91 = esi89 + 0x21c;
    ebp92 = 2;
    do {
        fun_18019180(edi91);
        esp90 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp90) - 4 + 4);
        edi91 = edi91 + 40;
        --ebp92;
    } while (ebp92);
    *reinterpret_cast<void***>(esi89) = reinterpret_cast<void**>(0x180354a4);
    edx93 = *reinterpret_cast<void***>(a2);
    eax94 = reinterpret_cast<struct s200*>(*reinterpret_cast<void***>(edx93)(a2));
    esp95 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp90) - 4 - 4 + 4);
    ebp96 = eax94->f0;
    v97 = eax94->f4;
    v98 = eax94->f8;
    edx99 = *reinterpret_cast<void***>(a2);
    eax100 = reinterpret_cast<struct s201*>(*reinterpret_cast<void***>(edx99)(a2));
    v101 = eax100->f0;
    v102 = eax100->f4;
    v103 = eax100->f8;
    eax104 = *reinterpret_cast<void***>(v79 + 12);
    v105 = eax100->f12;
    esp106 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp95) - 4 - 4 + 4 - 4 - 4);
    fun_18027240(esp106 + 72, 1, eax104, v102, reinterpret_cast<int32_t>(esp95) + 48, reinterpret_cast<int32_t>(esp90) + 32, v87, v85, v83, v80, v97, v98, v101, v107, v103, v105);
    esp108 = reinterpret_cast<void*>(esp106 - 4 - 4 - 4 + 16 + 4);
    fun_18027620(esi89, reinterpret_cast<int32_t>(esp108) + 64, reinterpret_cast<int32_t>(esp95) + 48, reinterpret_cast<int32_t>(esp90) + 32, v87, v85, v83);
    fun_18027ad0(esi89, 2, reinterpret_cast<int32_t>(esp95) + 48, reinterpret_cast<int32_t>(esp90) + 32, v87, v85, v83, v80, v97, v98, v101, v109, v103, v105, v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, v79, a2, a3, a4, a5, a6, a7, a8, a9);
    v121 = *reinterpret_cast<void***>(esi89 + 0x198);
    fun_180190d0(a2, esi89 + 0x1cc, v121, reinterpret_cast<int32_t>(esp95) + 48, reinterpret_cast<int32_t>(esp90) + 32, v87, v85, v83, v80, v97, v98, v101, v122, v103, v105, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v79, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78);
    v134 = *reinterpret_cast<void***>(esi89 + 0x198);
    fun_180190d0(a2, esi89 + 0x1f4, v134, reinterpret_cast<int32_t>(esp95) + 48, reinterpret_cast<int32_t>(esp90) + 32, v87, v85, v83, v80, v97, v98, v101, v135, v103, v105, v136, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v79, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78);
    edx147 = *reinterpret_cast<void***>(esi89 + 48);
    fun_18019220(esi89 + 0x21c, a2, ebp96, v80, v97, v98, ebx82, edx147, 0, 0, reinterpret_cast<int32_t>(esp95) + 48, reinterpret_cast<int32_t>(esp90) + 32, v87, v85, v83, v80, v97, v98, v101, v148, v103, v105, v149, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v79, a2, a3, a4, a5, a6, a7, a8, a9);
    edx160 = *reinterpret_cast<void***>(esi89 + 68);
    fun_18019220(esi89 + 0x244, a2, ebp96, v80, v97, v98, ebx82, edx160, 0, 0, reinterpret_cast<int32_t>(esp95) + 48, reinterpret_cast<int32_t>(esp90) + 32, v87, v85, v83, v80, v97, v98, v101, v161, v103, v105, v162, v163, v164, v165, v166, v167, v168, v169, v170, v171, v172, v79, a2, a3, a4, a5, a6, a7, a8, a9);
    edx173 = *reinterpret_cast<void***>(a2);
    eax174 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx173 + 4)(a2));
    *reinterpret_cast<void***>(esi89 + 0x1c0) = eax174;
    edx175 = *reinterpret_cast<void***>(eax174);
    *reinterpret_cast<void***>(edx175 + 4)(eax174);
    eax176 = fun_1802b2bb(eax174, 0x454, ebx82, reinterpret_cast<int32_t>(esp95) + 48, reinterpret_cast<int32_t>(esp90) + 32, v87, v85, v83, v80);
    if (!eax176) {
        *reinterpret_cast<void***>(esi89 + 0x1c8) = reinterpret_cast<void**>(0);
        goto v177;
    } else {
        edx178 = *reinterpret_cast<void***>(esi89 + 0x1c0);
        *reinterpret_cast<int16_t*>(&eax176) = fun_18028f00(eax176, a2, edx178, reinterpret_cast<int32_t>(esp108) - 4 - 4 + 4 + 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 + 8 + 4 - 4 - 4 - 4 + 8 + 4 - 4 - 4 - 4 - 4 - 16 - 4 - 4 + 36 + 4 - 4 - 4 - 4 - 4 - 16 - 4 - 4 + 36 + 4 - 4 + 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4 + 64, ebx82);
        *reinterpret_cast<void***>(esi89 + 0x1c8) = eax176;
        goto v179;
    }
}

struct s202 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

struct s203 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

int16_t fun_180298b0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9) {
    void** ebp10;
    void* esp11;
    void** edx12;
    struct s202* eax13;
    void* esp14;
    void** v15;
    void** v16;
    void** v17;
    void** eax18;
    struct s203* eax19;
    void** v20;
    void** v21;
    void** v22;
    void** edx23;
    void*** esp24;
    void** v25;
    void** edi26;
    void** esi27;
    void** ebp28;
    void** v29;
    void* esp30;
    void** v31;
    void** v32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** ecx43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** edx56;
    void** eax57;
    void** edx58;
    void** eax59;
    int32_t v60;
    void** edx61;
    int32_t v62;

    fun_180292a0(ecx, a4);
    *reinterpret_cast<void***>(ecx + 0x1b8) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 0x1bc) = reinterpret_cast<void**>(0x3f800000);
    ebp10 = ecx + 0x1d0;
    *reinterpret_cast<void***>(ecx + 0x1c8) = a3;
    *reinterpret_cast<void***>(ecx + 0x1c0) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1c4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1cc) = reinterpret_cast<void**>(0);
    fun_18019180(ebp10);
    esp11 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 68 - 4 - 4 - 4 - 4 - 4 - 4 + 4 + 4 - 4 + 4);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180354e0);
    edx12 = *reinterpret_cast<void***>(a2);
    eax13 = reinterpret_cast<struct s202*>(*reinterpret_cast<void***>(edx12)(a2));
    esp14 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp11) - 4 - 4 + 4);
    v15 = eax13->f0;
    v16 = eax13->f4;
    v17 = eax13->f8;
    eax18 = *reinterpret_cast<void***>(a2);
    eax19 = reinterpret_cast<struct s203*>(*reinterpret_cast<void***>(eax18)(a2));
    v20 = eax19->f0;
    v21 = eax19->f4;
    v22 = eax19->f8;
    edx23 = eax19->f12;
    esp24 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp14) - 4 - 4 + 4 - 4 - 4);
    v25 = *reinterpret_cast<void***>(reinterpret_cast<unsigned char>(__return_address()) + 12);
    fun_18027240(esp24 + 72, 1, v25, v21, reinterpret_cast<int32_t>(esp14) + 48, reinterpret_cast<int32_t>(esp11) + 32, edi26, esi27, ebp28, v15, v16, v17, v20, v29, v22, edx23);
    esp30 = reinterpret_cast<void*>(esp24 - 4 - 4 - 4 + 16 + 4);
    fun_18027620(ecx, reinterpret_cast<int32_t>(esp30) + 64, reinterpret_cast<int32_t>(esp14) + 48, reinterpret_cast<int32_t>(esp11) + 32, edi26, esi27, ebp28);
    fun_18027ad0(ecx, 1, reinterpret_cast<int32_t>(esp14) + 48, reinterpret_cast<int32_t>(esp11) + 32, edi26, esi27, ebp28, v15, v16, v17, v20, v31, v22, edx23, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
    ecx43 = *reinterpret_cast<void***>(ecx + 48);
    fun_18019220(ebp10, a2, ebp28, v15, v16, v17, a4, ecx43, 0, 0, reinterpret_cast<int32_t>(esp14) + 48, reinterpret_cast<int32_t>(esp11) + 32, edi26, esi27, ebp28, v15, v16, v17, v20, v44, v22, edx23, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
    edx56 = *reinterpret_cast<void***>(a2);
    eax57 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx56 + 4)(a2));
    *reinterpret_cast<void***>(ecx + 0x1c4) = eax57;
    edx58 = *reinterpret_cast<void***>(eax57);
    *reinterpret_cast<void***>(edx58 + 4)(eax57);
    eax59 = fun_1802b2bb(eax57, 0x454, a4, reinterpret_cast<int32_t>(esp14) + 48, reinterpret_cast<int32_t>(esp11) + 32, edi26, esi27, ebp28, v15);
    if (!eax59) {
        *reinterpret_cast<void***>(ecx + 0x1cc) = reinterpret_cast<void**>(0);
        goto v60;
    } else {
        edx61 = *reinterpret_cast<void***>(ecx + 0x1c4);
        *reinterpret_cast<int16_t*>(&eax59) = fun_18028f00(eax59, a2, edx61, reinterpret_cast<int32_t>(esp30) - 4 - 4 + 4 + 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 - 4 - 16 - 4 - 4 + 36 + 4 - 4 + 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4 + 64, a4);
        *reinterpret_cast<void***>(ecx + 0x1cc) = eax59;
        goto v62;
    }
}

unsigned char fun_18024820(int32_t* a1, int32_t a2, int32_t a3);

signed char g180458e0 = 0;

unsigned char fun_18024850(void** ecx) {
    void** eax2;
    int32_t esi3;
    unsigned char al4;
    unsigned char al5;
    signed char cl6;

    eax2 = *reinterpret_cast<void***>(ecx + 28);
    if (eax2) {
        esi3 = 0;
        *reinterpret_cast<void***>(&esi3) = *reinterpret_cast<void***>(eax2);
        al4 = fun_18024820(0x18043948, 2, esi3);
        if (!al4) {
            al5 = fun_18024820(0x18043950, 3, esi3);
            if (al5) {
                cl6 = g180458e0;
                return static_cast<unsigned char>(reinterpret_cast<uint1_t>(cl6 == 0));
            } else {
                return 1;
            }
        } else {
            return 0;
        }
    } else {
        return 1;
    }
}

int32_t waveOutOpen = 0x36544;

int32_t waveOutReset = 0x3657c;

int32_t waveOutUnprepareHeader = 0x36562;

int32_t waveOutClose = 0x36552;

int32_t waveOutPause = 0x365ae;

int32_t waveOutWrite = 0x3659e;

int32_t waveOutRestart = 0x3658c;

struct s204 {
    signed char[12] pad12;
    int16_t f12;
};

int32_t wsprintfA = 0x364c8;

int32_t waveOutPrepareHeader = 0x3652c;

int16_t fun_1802a600(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16) {
    void** v17;
    void** v18;
    void** ebx19;
    void** v20;
    void** ebp21;
    void** v22;
    void** esi23;
    void** v24;
    void** edi25;
    void** edi26;
    void** eax27;
    void** v28;
    void** v29;
    void** v30;
    void** v31;
    void** v32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void* esi42;
    uint32_t edx43;
    void** ebp44;
    void** v45;
    void** eax46;
    void** ebx47;
    void** v48;
    void** eax49;
    void** edx50;
    void** v51;
    void** v52;
    void** edx53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    int32_t ecx63;
    int32_t eax64;
    int1_t zf65;
    void** edi66;
    void*** esp67;
    void** v68;
    uint32_t eax69;
    void** eax70;
    void** edi71;
    uint32_t ecx72;
    void** edx73;
    uint32_t ecx74;
    void** v75;
    void** v76;
    void** v77;
    void* esp78;
    void* ebp79;
    void** v80;
    void** edi81;
    int32_t ebx82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** v92;
    void** v93;
    void** v94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** v103;
    void** v104;
    void** v105;
    void** v106;
    void** v107;
    void** v108;
    void** v109;
    void** v110;
    void** v111;
    void** v112;
    void** v113;
    void** v114;
    void** v115;
    void** v116;
    void** v117;
    void** v118;
    void** v119;
    void** v120;
    void** v121;
    void** v122;
    int32_t v123;
    void* ebp124;
    void** edi125;
    void** v126;
    void** eax127;
    void* ecx128;
    void** v129;
    int32_t edi130;
    void** v131;
    void** v132;
    int32_t ecx133;
    struct s204* v134;
    void*** esp135;
    void** edi136;

    v17 = reinterpret_cast<void**>(__return_address());
    v18 = ebx19;
    v20 = ebp21;
    v22 = esi23;
    v24 = edi25;
    edi26 = a3;
    eax27 = *reinterpret_cast<void***>(edi26 + 8);
    *reinterpret_cast<int16_t*>(&eax27) = fun_1800da70(ecx, 0xfa, eax27, 0x3e8, v24, v22, v20, v18, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41);
    __asm__("cdq ");
    esi42 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax27) + (edx43 & 31)) >> 5);
    ebp44 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esi42) << 5);
    eax46 = fun_1802b2bb(ecx, ebp44, v24, v22, v20, v18, 0, 0, v45);
    ebx47 = eax46;
    v48 = ebx47;
    eax49 = fun_1802b2bb(ecx, 32, ebp44, v24, v22, v20, v18, 0, 0);
    edx50 = eax49;
    v51 = edx50;
    if (!ebx47 || !edx50) {
        addr_0x1802a7c2_2:
        v52 = reinterpret_cast<void**>(0x18044050);
        OutputDebugStringA();
        edx53 = *reinterpret_cast<void***>(edi26 + 4);
        fun_1800da70(ecx, 63, edx53, 0x3e8, 0x18044050, v24, v22, v20, v18, 0, 0, v51, v48, v54, v55, v56, v57, v58, v59, v60, v61, v62);
    } else {
        ecx63 = 8;
        eax64 = 0;
        zf65 = reinterpret_cast<int1_t>(*reinterpret_cast<void***>(edi26 + 14) == 8);
        edi66 = edx50;
        v52 = reinterpret_cast<void**>(0);
        *reinterpret_cast<unsigned char*>(&eax64) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(!zf65));
        esp67 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 96 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 12 + 4 - 4 - 4 + 4 - 4 - 4 + 4 + 8 - 4 - 4 - 4);
        v68 = reinterpret_cast<void**>(0);
        eax69 = reinterpret_cast<uint32_t>(eax64 - 1) & 0x80;
        *reinterpret_cast<signed char*>(&edx50) = *reinterpret_cast<signed char*>(&eax69);
        *reinterpret_cast<signed char*>(&edx50 + 1) = *reinterpret_cast<signed char*>(&edx50);
        eax70 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx50) << 16);
        *reinterpret_cast<int16_t*>(&eax70) = *reinterpret_cast<int16_t*>(&edx50);
        while (ecx63) {
            --ecx63;
            *reinterpret_cast<void***>(edi66) = eax70;
            edi66 = edi66 + 4;
            esi42 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esi42) + 4);
        }
        edi71 = ebx47;
        ecx72 = reinterpret_cast<unsigned char>(ebp44) >> 2;
        while (ecx72) {
            --ecx72;
            *reinterpret_cast<void***>(edi71) = reinterpret_cast<void**>(0);
            edi71 = edi71 + 4;
            esi42 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esi42) + 4);
        }
        edx73 = reinterpret_cast<void**>(esp67 + 28);
        ecx74 = 0;
        while (ecx74) {
            --ecx74;
            *reinterpret_cast<void***>(edi71) = reinterpret_cast<void**>(0);
            ++edi71;
            esi42 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esi42) + 1);
        }
        ecx = a2;
        v75 = a3;
        v76 = ecx;
        v77 = edx73;
        eax49 = reinterpret_cast<void**>(waveOutOpen(v77, v76, v75));
        esp78 = reinterpret_cast<void*>(esp67 - 4 - 4 - 4 - 4 + 4);
        if (eax49) 
            goto addr_0x1802a7be_13;
        ebp79 = reinterpret_cast<void*>(0);
        if (reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(esi42) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(esi42 == 0)) 
            goto addr_0x1802a6f8_15; else 
            goto addr_0x1802a6cb_16;
    }
    addr_0x1802a7df_17:
    if (v18) {
        v80 = v18;
        waveOutReset(v80);
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(esi42) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(esi42 == 0))) {
            edi81 = ebx47;
            ebx82 = waveOutUnprepareHeader;
            do {
                ebx82(v20, edi81, 32, v80);
                edi81 = edi81 + 32;
                esi42 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esi42) - 1);
            } while (esi42);
            ebx47 = v20;
        }
        ecx = v20;
        waveOutClose(ecx, v80);
    }
    fun_1802b2b0(ecx, 0, v52, v24, v22, v20, v18, 0, 0, v51, v48, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v17, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
    fun_1802b2b0(ecx, ebx47, 0, v52, v24, v22, v20, v18, 0, 0, v51, v48, v103, v104, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, v121, v122, v17, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
    goto v123;
    addr_0x1802a6f8_15:
    eax49 = reinterpret_cast<void**>(waveOutPause(0, v77, v76, v75));
    esp78 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp78) - 4 - 4 + 4);
    if (eax49) 
        goto addr_0x1802a7be_13;
    ebp124 = reinterpret_cast<void*>(0);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(esi42) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(esi42 == 0))) {
        edi125 = ebx47;
        do {
            eax49 = reinterpret_cast<void**>(waveOutWrite(0, edi125, 32, 0, v77, v76, v75));
            esp78 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp78) - 4 - 4 - 4 - 4 + 4);
            if (eax49) 
                goto addr_0x1802a7be_13;
            ebp124 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebp124) + 1);
            edi125 = edi125 + 32;
        } while (reinterpret_cast<int32_t>(ebp124) < reinterpret_cast<int32_t>(esi42));
    }
    ecx = reinterpret_cast<void**>(0);
    eax49 = reinterpret_cast<void**>(waveOutRestart(0, 0, v77, v76, v75));
    esp78 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp78) - 4 - 4 + 4);
    if (eax49) {
        addr_0x1802a7be_13:
        edi26 = v126;
        goto addr_0x1802a7c2_2;
    } else {
        eax127 = ebx47 + 16;
        if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax127)) & 1)) {
            do {
            } while (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax127)) & 1));
        }
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(esi42) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(esi42 == 0))) {
            ecx128 = esi42;
            do {
                if (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax127)) & 1) {
                    ++v68;
                }
                eax127 = eax127 + 32;
                ecx128 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx128) - 1);
            } while (ecx128);
        }
        ecx = v129;
        edi130 = 0;
        *reinterpret_cast<void***>(&edi130) = *reinterpret_cast<void***>(ecx + 12);
        __asm__("cdq ");
        eax49 = *reinterpret_cast<void***>(ecx + 4);
        *reinterpret_cast<int16_t*>(&eax49) = fun_1800da70(ecx, reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(v68 + 1) << 5) / edi130, 0x3e8, eax49, 0, 0, v77, v76, v75, v68, 0, 0, v24, v22, v20, v18, 0, 0, v51, v48, v131, v132);
        esp78 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp78) - 4 - 4 - 4 - 4 + 12 + 4);
        if (reinterpret_cast<signed char>(eax49) < reinterpret_cast<signed char>(20)) 
            goto addr_0x1802a7be_13;
    }
    ecx133 = 0;
    *reinterpret_cast<int16_t*>(&ecx133) = v134->f12;
    esp135 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp78) - 4 - 4);
    wsprintfA(esp135 + 40, "QMixer: using waveOut mode, detected DMA buffer size = %d ms (%d bytes)\n", eax49, ecx133 * reinterpret_cast<unsigned char>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(v68 + 1) << 5) / edi130), 0, 0, v77, v76, v75);
    ecx = reinterpret_cast<void**>(esp135 - 4 - 4 - 4 + 4 + 16 + 32);
    OutputDebugStringA(ecx, 0, 0, v77, v76, v75);
    goto addr_0x1802a7df_17;
    addr_0x1802a6cb_16:
    edi136 = ebx47;
    do {
        *reinterpret_cast<void***>(edi136) = v24;
        *reinterpret_cast<void***>(edi136 + 4) = reinterpret_cast<void**>(32);
        ecx = reinterpret_cast<void**>(0);
        eax49 = reinterpret_cast<void**>(waveOutPrepareHeader(0, edi136, 32, v77, v76, v75));
        esp78 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp78) - 4 - 4 - 4 - 4 + 4);
        if (eax49) 
            goto addr_0x1802a7be_13;
        ebp79 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebp79) + 1);
        edi136 = edi136 + 32;
    } while (reinterpret_cast<int32_t>(ebp79) < reinterpret_cast<int32_t>(esi42));
    goto addr_0x1802a6f8_15;
}

int32_t mmioWrite = 0x36618;

void fun_1802b1e0(struct s64* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8) {
    mmioWrite();
    goto a2;
}

void fun_180249a0(void** ecx) {
    void** ecx2;
    void** v3;

    if (*reinterpret_cast<void***>(ecx + 8)) {
        ecx2 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 8));
        v3 = *reinterpret_cast<void***>(ecx + 8);
        *reinterpret_cast<void***>(ecx2 + 12)(v3);
    }
    return;
}

void fun_180249b0(void** ecx) {
    void** ecx2;
    void** v3;

    if (*reinterpret_cast<void***>(ecx + 8)) {
        ecx2 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 8));
        v3 = *reinterpret_cast<void***>(ecx + 8);
        *reinterpret_cast<void***>(ecx2 + 16)(v3);
    }
    return;
}

void** fun_1802a0e0(void** ecx) {
    fun_180248d0(ecx);
    *reinterpret_cast<void***>(ecx + 96) = reinterpret_cast<void**>(0xffffffff);
    *reinterpret_cast<void***>(ecx + 92) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 100) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x68) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x6c) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x70) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x74) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x1803551c);
    return ecx;
}

int32_t mmioAscend = 0x365f0;

void fun_1802ab70(void** ecx, void* a2, int32_t a3) {
    void** eax4;

    eax4 = *reinterpret_cast<void***>(ecx);
    mmioAscend();
    goto eax4;
}

int32_t mmioRead = 0x365e4;

int16_t fun_1802ab40(void** ecx, void** a2, int32_t a3, void** a4, void** a5, void** a6, void** a7, void** a8) {
    mmioRead();
    goto a2;
}

void fun_1802ecf5(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6);

uint32_t fun_1802c409(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6);

void** fun_1802ed47(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6);

uint32_t fun_1802c3d8(void** ecx, void** a2, void** a3) {
    uint32_t edi4;
    void** edi5;
    void** esi6;
    uint32_t eax7;

    edi4 = 0xffffffff;
    if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 12)) & 64)) {
        fun_1802ecf5(a2, edi5, esi6, __return_address(), a2, a3);
        eax7 = fun_1802c409(ecx, a2, a2, edi5, esi6, __return_address());
        edi4 = eax7;
        fun_1802ed47(a2, a2, a2, edi5, esi6, __return_address());
    } else {
        *reinterpret_cast<void***>(a2 + 12) = reinterpret_cast<void**>(0);
    }
    return edi4;
}

void** fun_1802c455(void** ecx, void** a2, void** a3, void** a4, void** a5);

void fun_1802adf0(struct s172* ecx) {
    void* eax2;
    void* edx3;
    void** v4;
    void** ecx5;
    void** ecx6;
    void** eax7;

    eax2 = ecx->f12;
    edx3 = ecx->f8;
    v4 = ecx->f0;
    ecx5 = ecx->f4;
    ecx6 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx5) + reinterpret_cast<uint32_t>(eax2));
    eax7 = fun_1802c455(ecx6, ecx6, 1, reinterpret_cast<int32_t>(edx3) - reinterpret_cast<uint32_t>(eax2), v4);
    ecx->f12 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx->f12) + reinterpret_cast<unsigned char>(eax7));
    ecx->f28 = static_cast<unsigned char>(reinterpret_cast<uint1_t>(eax7 == 0));
    return;
}

int16_t fun_1802ae30(struct s172* ecx, void** a2, void** a3, void** a4) {
    void** v5;
    void** v6;
    void** ebx7;
    void** ebx8;
    void** v9;
    void** esi10;
    struct s172* esi11;
    void** eax12;
    void** v13;
    void* edx14;
    void** v15;
    void** v16;
    void** ebp17;
    void*** esp18;
    void** v19;
    void** edi20;
    void*** edi21;
    void* ecx22;
    void** edx23;
    void** v24;
    void*** eax25;
    void** eax26;
    void** edx27;
    uint32_t ecx28;
    void** ecx29;
    uint32_t ebp30;
    void** ecx31;
    void** ecx32;

    v5 = reinterpret_cast<void**>(__return_address());
    v6 = ebx7;
    ebx8 = a2;
    v9 = esi10;
    esi11 = ecx;
    eax12 = reinterpret_cast<void**>(0);
    v13 = ebx8;
    edx14 = esi11->f24;
    v15 = reinterpret_cast<void**>(0);
    esi11->f24 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(edx14) + reinterpret_cast<unsigned char>(ebx8));
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(ebx8) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(ebx8 == 0))) {
        v16 = ebp17;
        esp18 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4 - 4 - 4);
        v19 = edi20;
        edi21 = &esi11->f20;
        do {
            if (!*edi21) {
                ecx22 = esi11->f16;
                if (reinterpret_cast<int32_t>(ecx22) < reinterpret_cast<int32_t>(reinterpret_cast<uint32_t>(esi11->f12) + 0xfffffffc)) {
                    esi11->f16 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx22) + 1);
                } else {
                    edx23 = esi11->f4;
                    v24 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esi11->f12) - reinterpret_cast<uint32_t>(ecx22));
                    fun_1802b920(edx23, reinterpret_cast<unsigned char>(edx23) + reinterpret_cast<uint32_t>(ecx22), v24, v19, v16, v9, v6, v13, v5, v15, a3, a4);
                    esi11->f12 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esi11->f12) - reinterpret_cast<uint32_t>(esi11->f16));
                    esi11->f16 = reinterpret_cast<void*>(0);
                    fun_1802adf0(esi11);
                    esp18 = esp18 - 4 - 4 - 4 - 4 + 4 + 12 - 4 + 4;
                }
                edi21 = &esi11->f20;
                *edi21 = reinterpret_cast<void**>(8);
            }
            eax25 = esp18 + 16;
            if (reinterpret_cast<signed char>(ebx8) > reinterpret_cast<signed char>(*edi21)) {
                eax25 = edi21;
            }
            eax26 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*edi21) - reinterpret_cast<unsigned char>(*eax25));
            edx27 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx8) - reinterpret_cast<unsigned char>(*eax25));
            ecx28 = 0;
            *reinterpret_cast<signed char*>(&ecx28) = *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esi11->f16) + reinterpret_cast<unsigned char>(esi11->f4));
            ecx29 = eax26;
            ebx8 = edx27;
            ebp30 = reinterpret_cast<uint32_t>(reinterpret_cast<int32_t>(*reinterpret_cast<uint32_t*>(reinterpret_cast<unsigned char>(*edi21) * 4 + 0x180440c8) & ecx28) >> *reinterpret_cast<signed char*>(&ecx29));
            ecx31 = edx27;
            *edi21 = eax26;
            v13 = ebx8;
            ecx32 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v15) | ebp30 << *reinterpret_cast<unsigned char*>(&ecx31));
            v15 = ecx32;
        } while (!reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(ebx8) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(ebx8 == 0)));
        eax12 = ecx32;
    }
    return *reinterpret_cast<int16_t*>(&eax12);
}

int16_t fun_1802ad70(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** v45;
    void** esi46;
    void** v47;
    int16_t ax48;

    if (*reinterpret_cast<void***>(ecx)) {
        v45 = *reinterpret_cast<void***>(ecx);
        fun_1802c3d8(ecx, v45, esi46);
    }
    v47 = *reinterpret_cast<void***>(ecx + 4);
    ax48 = fun_1802b2b0(ecx, v47, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    *reinterpret_cast<void***>(ecx + 4) = reinterpret_cast<void**>(0);
    return ax48;
}

void fun_1802b4c6(void** ecx, void** a2, void** a3, void** a4);

void fun_1802b478(void** a1, void** a2, void** a3, void** a4) {
    void** edi5;
    void** ecx6;
    void** v7;
    void** ebx8;
    void** esi9;
    int32_t eax10;

    edi5 = a2;
    if (reinterpret_cast<unsigned char>(edi5) > reinterpret_cast<unsigned char>(a1)) {
        ecx6 = a3;
        v7 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a1) + reinterpret_cast<unsigned char>(ecx6));
        do {
            ebx8 = a1;
            esi9 = v7;
            while (reinterpret_cast<unsigned char>(esi9) <= reinterpret_cast<unsigned char>(edi5)) {
                eax10 = reinterpret_cast<int32_t>(a4(ecx6));
                ecx6 = ebx8;
                if (!(reinterpret_cast<uint1_t>(eax10 < 0) | reinterpret_cast<uint1_t>(eax10 == 0))) {
                    ebx8 = esi9;
                }
                esi9 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi9) + reinterpret_cast<unsigned char>(a3));
            }
            fun_1802b4c6(ecx6, ebx8, edi5, a3);
            edi5 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi5) - reinterpret_cast<unsigned char>(a3));
        } while (reinterpret_cast<unsigned char>(edi5) > reinterpret_cast<unsigned char>(a1));
    }
    return;
}

void fun_1802b4c6(void** ecx, void** a2, void** a3, void** a4) {
    void** eax5;
    void** ecx6;
    void** esi7;
    void** dl8;

    eax5 = a2;
    ecx6 = a3;
    if (eax5 != ecx6 && a4) {
        esi7 = a4 - 1 + 1;
        do {
            dl8 = *reinterpret_cast<void***>(eax5);
            *reinterpret_cast<void***>(eax5) = *reinterpret_cast<void***>(ecx6);
            ++eax5;
            *reinterpret_cast<void***>(ecx6) = dl8;
            ++ecx6;
            --esi7;
        } while (esi7);
    }
    return;
}

void fun_1802d60b(void** ecx, void** a2, void** a3, void** a4);

void** g18045930 = reinterpret_cast<void**>(0);

void** g18045980 = reinterpret_cast<void**>(0);

void** fun_1802d43f(void** ecx);

void** fun_1802d867();

void fun_1802d573();

void fun_1802dd2f();

int32_t GetVersion = 0x3614a;

uint32_t g18045948 = 0;

int32_t fun_1802dcf3(int32_t a1);

uint32_t g18045950 = 0;

void** g18045954 = reinterpret_cast<void**>(0);

void*** g1804594c = reinterpret_cast<void***>(0);

int32_t fun_1802d51f(void** ecx);

int32_t GetCommandLineA = 0x36138;

void** g18047034;

void** fun_1802dbc1(void** ecx, void** a2, void** a3, void** a4, void** a5);

void** g18045934 = reinterpret_cast<void**>(0);

void fun_1802d6ab(void** ecx);

void fun_1802d974(void** ecx);

void** fun_1802d8bb(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8);

void fun_1802d401(void** ecx, void** a2);

int16_t fun_1802b62e(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6) {
    int1_t less_or_equal7;
    int32_t eax8;
    int1_t zf9;
    uint32_t eax10;
    int32_t eax11;
    uint32_t eax12;
    void** ecx13;
    uint32_t eax14;
    int32_t eax15;
    void** eax16;
    void** eax17;

    if (!reinterpret_cast<int1_t>(a2 == 1)) {
        if (a2) {
            if (reinterpret_cast<int1_t>(a2 == 3)) {
                fun_1802d60b(0, 0, __return_address(), a1);
            }
        } else {
            less_or_equal7 = reinterpret_cast<signed char>(g18045930) <= reinterpret_cast<signed char>(0);
            if (less_or_equal7) {
                addr_0x1802b68e_6:
                eax8 = 0;
                goto addr_0x1802b704_7;
            } else {
                --g18045930;
                zf9 = g18045980 == 0;
                if (zf9) {
                    fun_1802d43f(0);
                }
                fun_1802d867();
                fun_1802d573();
                fun_1802dd2f();
            }
        }
    } else {
        eax10 = reinterpret_cast<uint32_t>(GetVersion());
        g18045948 = eax10;
        eax11 = fun_1802dcf3(1);
        if (!eax11) 
            goto addr_0x1802b68e_6;
        eax12 = g18045948;
        ecx13 = reinterpret_cast<void**>(0);
        *reinterpret_cast<signed char*>(&ecx13) = *reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(&g18045948) + 1);
        eax14 = eax12 & 0xff;
        g18045948 = g18045948 >> 16;
        g18045950 = eax14;
        g18045954 = ecx13;
        g1804594c = reinterpret_cast<void***>((eax14 << 8) + reinterpret_cast<unsigned char>(ecx13));
        eax15 = fun_1802d51f(ecx13);
        if (eax15) 
            goto addr_0x1802b692_13; else 
            goto addr_0x1802b689_14;
    }
    addr_0x1802b701_15:
    eax8 = 1;
    addr_0x1802b704_7:
    return *reinterpret_cast<int16_t*>(&eax8);
    addr_0x1802b692_13:
    eax16 = reinterpret_cast<void**>(GetCommandLineA());
    g18047034 = eax16;
    eax17 = fun_1802dbc1(ecx13, __return_address(), a1, a2, a3);
    g18045934 = eax17;
    fun_1802d6ab(ecx13);
    fun_1802d974(ecx13);
    fun_1802d8bb(ecx13, __return_address(), a1, a2, a3, a4, a5, a6);
    fun_1802d401(ecx13, __return_address());
    ++g18045930;
    goto addr_0x1802b701_15;
    addr_0x1802b689_14:
    fun_1802dd2f();
    goto addr_0x1802b68e_6;
}

int32_t HeapCreate = 0x36358;

void** g18046f0c;

int32_t fun_1802ff34();

int32_t HeapDestroy = 0x3634a;

int32_t fun_1802dcf3(int32_t a1) {
    int32_t eax2;
    void** eax3;
    int32_t eax4;
    void** v5;

    eax2 = 0;
    *reinterpret_cast<unsigned char*>(&eax2) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(a1 == 0));
    eax3 = reinterpret_cast<void**>(HeapCreate());
    g18046f0c = eax3;
    if (eax3) {
        eax4 = fun_1802ff34();
        if (eax4) {
            goto eax2;
        } else {
            v5 = g18046f0c;
            HeapDestroy(v5);
        }
    }
    goto eax2;
}

void fun_1802e86a();

int32_t TlsAlloc = 0x36266;

void** g18044200 = reinterpret_cast<void**>(0xff);

void** fun_1802dfb5(void** ecx, void** a2, void** a3, void** a4);

int32_t TlsSetValue = 0x36188;

void fun_1802d591(void** ecx, void** a2, void** a3, void** a4);

int32_t GetCurrentThreadId = 0x36250;

int32_t fun_1802d51f(void** ecx) {
    void** eax2;
    void** esi3;
    void** eax4;
    void** v5;
    int32_t eax6;
    void** eax7;

    fun_1802e86a();
    eax2 = reinterpret_cast<void**>(TlsAlloc());
    g18044200 = eax2;
    if (eax2 == 0xffffffff || ((eax4 = fun_1802dfb5(ecx, 1, 0x74, esi3), eax4 == 0) || (v5 = g18044200, eax6 = reinterpret_cast<int32_t>(TlsSetValue(0x74)), eax6 == 0))) {
        return 0;
    } else {
        fun_1802d591(0x74, eax4, v5, eax4);
        eax7 = reinterpret_cast<void**>(GetCurrentThreadId(eax4));
        *reinterpret_cast<void***>(eax4 + 4) = reinterpret_cast<void**>(0xffffffff);
        *reinterpret_cast<void***>(eax4) = eax7;
        goto eax4;
    }
}

uint32_t g18045ed8 = 0;

int32_t HeapFree = 0x36202;

void** g18045edc = reinterpret_cast<void**>(0);

int32_t VirtualFree = 0x36366;

void fun_1802dd2f() {
    int32_t v1;
    int32_t v2;
    int32_t ebx3;
    uint32_t ebx4;
    int1_t less_or_equal5;
    int32_t v6;
    int32_t ebp7;
    int32_t ebp8;
    void** eax9;
    int32_t v10;
    int32_t esi11;
    int32_t v12;
    int32_t edi13;
    int32_t edi14;
    void** esi15;
    void** v16;
    void** v17;
    int1_t less18;

    v1 = reinterpret_cast<int32_t>(__return_address());
    v2 = ebx3;
    ebx4 = 0;
    less_or_equal5 = reinterpret_cast<int32_t>(g18045ed8) <= reinterpret_cast<int32_t>(0);
    v6 = ebp7;
    ebp8 = HeapFree;
    if (!less_or_equal5) {
        eax9 = g18045edc;
        v10 = esi11;
        v12 = edi13;
        edi14 = VirtualFree;
        esi15 = eax9 + 12;
        do {
            v16 = *reinterpret_cast<void***>(esi15);
            edi14(v16, 0x100000, 0x4000, v12, v10, v6, v2, v1);
            v17 = *reinterpret_cast<void***>(esi15);
            edi14(v17, 0, 0x8000, v16, 0x100000, 0x4000, v12, v10, v6, v2, v1);
            ebp8();
            esi15 = esi15 + 20;
            ++ebx4;
            less18 = reinterpret_cast<int32_t>(ebx4) < reinterpret_cast<int32_t>(g18045ed8);
        } while (less18);
    }
    ebp8();
    HeapDestroy();
    goto 0;
}

void** fun_1802d44e(void** ecx, void** a2, void** a3, void** a4, void** a5);

void** fun_1802d43f(void** ecx) {
    void** eax2;

    eax2 = fun_1802d44e(ecx, 0, 0, 1, __return_address());
    return eax2;
}

int32_t TlsGetValue = 0x3628c;

void fun_1802d60b(void** ecx, void** a2, void** a3, void** a4) {
    void** eax5;
    void** esi6;
    void** esi7;
    void** eax8;
    void** v9;
    void** v10;
    void** v11;
    void** v12;
    void** v13;
    void** v14;
    void** v15;

    eax5 = g18044200;
    if (eax5 != 0xffffffff) {
        esi6 = a2;
        if (esi6 || (eax8 = reinterpret_cast<void**>(TlsGetValue(eax5, esi7)), esi6 = eax8, !!esi6)) {
            if (*reinterpret_cast<void***>(esi6 + 36)) {
                v9 = *reinterpret_cast<void***>(esi6 + 36);
                fun_1802ca0b(ecx, v9, esi7, __return_address(), a2, a3);
                ecx = v9;
            }
            if (*reinterpret_cast<void***>(esi6 + 40)) {
                v10 = *reinterpret_cast<void***>(esi6 + 40);
                fun_1802ca0b(ecx, v10, esi7, __return_address(), a2, a3);
                ecx = v10;
            }
            if (*reinterpret_cast<void***>(esi6 + 48)) {
                v11 = *reinterpret_cast<void***>(esi6 + 48);
                fun_1802ca0b(ecx, v11, esi7, __return_address(), a2, a3);
                ecx = v11;
            }
            if (*reinterpret_cast<void***>(esi6 + 56)) {
                v12 = *reinterpret_cast<void***>(esi6 + 56);
                fun_1802ca0b(ecx, v12, esi7, __return_address(), a2, a3);
                ecx = v12;
            }
            if (*reinterpret_cast<void***>(esi6 + 64)) {
                v13 = *reinterpret_cast<void***>(esi6 + 64);
                fun_1802ca0b(ecx, v13, esi7, __return_address(), a2, a3);
                ecx = v13;
            }
            if (*reinterpret_cast<void***>(esi6 + 68)) {
                v14 = *reinterpret_cast<void***>(esi6 + 68);
                fun_1802ca0b(ecx, v14, esi7, __return_address(), a2, a3);
                ecx = v14;
            }
            if (*reinterpret_cast<void***>(esi6 + 80) != 0x18044428) {
                v15 = *reinterpret_cast<void***>(esi6 + 80);
                fun_1802ca0b(ecx, v15, esi7, __return_address(), a2, a3);
                ecx = v15;
            }
            fun_1802ca0b(ecx, esi6, esi7, __return_address(), a2, a3);
            ecx = esi6;
        }
        TlsSetValue(ecx);
    }
    return;
}

int32_t g1804593c = 0;

int32_t g18045940 = 0;

void fun_1802dddd(void** ecx, int32_t a2);

int32_t g18045a90 = 0;

void fun_1802dda4(void** ecx) {
    int32_t eax2;
    int1_t zf3;
    int32_t eax4;

    eax2 = g1804593c;
    if (eax2 == 1 || !eax2 && (zf3 = g18045940 == 1, zf3)) {
        fun_1802dddd(ecx, 0xfc);
        eax4 = g18045a90;
        if (eax4) {
            eax4(0xfc);
        }
        fun_1802dddd(0xfc, 0xff);
    }
    return;
}

void fun_1802d591(void** ecx, void** a2, void** a3, void** a4) {
    *reinterpret_cast<void***>(a2 + 80) = reinterpret_cast<void**>(0x18044428);
    *reinterpret_cast<void***>(a2 + 20) = reinterpret_cast<void**>(1);
    return;
}

void** fun_1802ff72(void** a1);

void fun_1802ff9d(void** ecx, void** a2, void** a3);

void** fun_1802ca0b(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** esi7;
    void** eax8;
    void** v9;
    void** eax10;
    void** eax11;

    if (a2) {
        fun_1802e8ff(ecx, 9, esi7, __return_address(), a2, a3, a4, a5, a6);
        eax8 = fun_1802ff72(a2);
        if (!eax8) {
            fun_1802e960(9, 9, esi7, __return_address(), a2, a3);
            v9 = g18046f0c;
            eax10 = reinterpret_cast<void**>(HeapFree(9, v9, 0, a2));
        } else {
            fun_1802ff9d(9, eax8, a2);
            eax11 = fun_1802e960(9, 9, eax8, a2, esi7, __return_address());
            return eax11;
        }
    }
    return eax10;
}

void** fun_1802df30(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9) {
    void** v10;
    void** v11;
    void** esi12;
    void** eax13;
    void** ecx14;
    int32_t esi15;
    void*** eax16;
    void** eax17;
    void** eax18;
    void** eax19;
    void** eax20;

    v10 = reinterpret_cast<void**>(__return_address());
    v11 = esi12;
    eax13 = fun_1802dfac(ecx, v11, v10, a2, a3, a4, a5, a6, a7);
    ecx14 = a2;
    esi15 = 0;
    *reinterpret_cast<void***>(eax13) = ecx14;
    eax16 = reinterpret_cast<void***>(0x180442c0);
    do {
        if (ecx14 == *eax16) 
            break;
        eax16 = eax16 + 8;
        ++esi15;
    } while (reinterpret_cast<int32_t>(eax16) < 0x18044428);
    goto addr_0x1802df52_4;
    eax17 = fun_1802dfa3(ecx14, v11, v10, a2, a3, a4, a5);
    *reinterpret_cast<void***>(eax17) = *reinterpret_cast<void***>(esi15 * 8 + 0x180442c4);
    return eax17;
    addr_0x1802df52_4:
    if (reinterpret_cast<unsigned char>(ecx14) < reinterpret_cast<unsigned char>(19) || reinterpret_cast<unsigned char>(ecx14) > reinterpret_cast<unsigned char>(36)) {
        if (reinterpret_cast<unsigned char>(ecx14) < reinterpret_cast<unsigned char>(0xbc) || reinterpret_cast<unsigned char>(ecx14) > reinterpret_cast<unsigned char>(0xca)) {
            eax18 = fun_1802dfa3(ecx14, v11, v10, a2, a3, a4, a5);
            *reinterpret_cast<void***>(eax18) = reinterpret_cast<void**>(22);
            return eax18;
        } else {
            eax19 = fun_1802dfa3(ecx14, v11, v10, a2, a3, a4, a5);
            *reinterpret_cast<void***>(eax19) = reinterpret_cast<void**>(8);
            return eax19;
        }
    } else {
        eax20 = fun_1802dfa3(ecx14, v11, v10, a2, a3, a4, a5);
        *reinterpret_cast<void***>(eax20) = reinterpret_cast<void**>(13);
        return eax20;
    }
}

int32_t __image_base = 0x1802d42e;

void fun_1802b7a4(void** ecx) {
    int32_t eax2;
    int1_t zf3;

    eax2 = g1804593c;
    if (eax2 == 1 || !eax2 && (zf3 = g18045940 == 1, zf3)) {
        fun_1802dda4(ecx);
    }
    fun_1802dddd(ecx, __return_address());
    __image_base();
    return;
}

int32_t GetLastError = 0x36158;

int32_t SetLastError = 0x3627c;

void** fun_1802d5a4(void** ecx) {
    void** v2;
    void** eax3;
    void** eax4;
    void** v5;
    int32_t eax6;
    void** eax7;
    int32_t edi8;

    GetLastError();
    v2 = g18044200;
    eax3 = reinterpret_cast<void**>(TlsGetValue());
    if (!eax3) {
        eax4 = fun_1802dfb5(ecx, 1, 0x74, v2);
        if (!eax4 || (v5 = g18044200, eax6 = reinterpret_cast<int32_t>(TlsSetValue(0x74, v5, eax4)), eax6 == 0)) {
            fun_1802b7a4(0x74);
            ecx = reinterpret_cast<void**>(16);
        } else {
            fun_1802d591(0x74, eax4, v5, eax4);
            ecx = eax4;
            eax7 = reinterpret_cast<void**>(GetCurrentThreadId(ecx, v5, eax4));
            *reinterpret_cast<void***>(eax4 + 4) = reinterpret_cast<void**>(0xffffffff);
            *reinterpret_cast<void***>(eax4) = eax7;
        }
    }
    SetLastError(ecx);
    goto edi8;
}

struct s205 {
    signed char[8] pad8;
    int32_t f8;
};

int32_t EnterCriticalSection = 0x360e8;

void fun_1802e5ec(void** a1, void** a2, void** a3) {
    uint32_t eax4;
    void** ecx5;
    struct s205* esi6;
    void** edi7;
    void** esi8;
    void** ebx9;

    eax4 = reinterpret_cast<unsigned char>(a1) & 31;
    ecx5 = reinterpret_cast<void**>(reinterpret_cast<signed char>(a1) >> 5);
    esi6 = reinterpret_cast<struct s205*>(reinterpret_cast<int32_t>(*reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx5) * 4 + 0x18046f20)) + (eax4 + eax4 * 8 << 2));
    if (!esi6->f8) {
        fun_1802e8ff(ecx5, 17, edi7, esi8, ebx9, __return_address(), a1, a2, a3);
        if (!esi6->f8) {
            InitializeCriticalSection(17, esi6 + 1);
            esi6->f8 = esi6->f8 + 1;
        }
        fun_1802e960(17, 17, edi7, esi8, ebx9, __return_address());
        ecx5 = reinterpret_cast<void**>(17);
    }
    EnterCriticalSection(ecx5);
    goto ebx9;
}

void** fun_1802e5aa(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8);

uint32_t fun_1802e52b(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6);

uint32_t fun_1802bcb2(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** edi6;
    void** esi7;
    void** eax8;
    void** ecx9;
    void** eax10;
    void** eax11;
    void** eax12;
    int32_t eax13;
    void** edi14;
    void** eax15;
    void*** esi16;
    void** ecx17;
    uint32_t eax18;

    eax8 = fun_1802e5aa(ecx, a2, edi6, esi7, __return_address(), a2, a3, a4);
    ecx9 = a2;
    if (eax8 == 0xffffffff || ((a2 == 1 || reinterpret_cast<int1_t>(a2 == 2)) && (eax10 = fun_1802e5aa(ecx9, 2, edi6, esi7, __return_address(), a2, a3, a4), eax11 = fun_1802e5aa(ecx9, 1, 2, edi6, esi7, __return_address(), a2, a3), ecx9 = reinterpret_cast<void**>(2), eax11 == eax10) || (eax12 = fun_1802e5aa(ecx9, a2, edi6, esi7, __return_address(), a2, a3, a4), ecx9 = a2, eax13 = reinterpret_cast<int32_t>(CloseHandle(ecx9, eax12)), !!eax13))) {
        edi14 = reinterpret_cast<void**>(0);
    } else {
        eax15 = reinterpret_cast<void**>(GetLastError(ecx9, eax12));
        edi14 = eax15;
    }
    fun_1802e52b(ecx9, a2, edi6, esi7, __return_address(), a2);
    esi16 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(a2) & 31);
    ecx17 = reinterpret_cast<void**>(esi16 + reinterpret_cast<uint32_t>(esi16) * 8);
    *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(*reinterpret_cast<void**>((reinterpret_cast<signed char>(a2) >> 5) * 4 + 0x18046f20)) + reinterpret_cast<unsigned char>(ecx17) * 4 + 4) = 0;
    if (!edi14) {
        eax18 = 0;
    } else {
        fun_1802df30(ecx17, edi14, edi6, esi7, __return_address(), a2, a3, a4, a5);
        eax18 = 0xffffffff;
    }
    return eax18;
}

int32_t LeaveCriticalSection = 0x360d0;

void fun_1802e64b(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9) {
    uint32_t eax10;
    uint32_t v11;

    eax10 = reinterpret_cast<unsigned char>(a2) & 31;
    v11 = *reinterpret_cast<int32_t*>((reinterpret_cast<signed char>(a2) >> 5) * 4 + 0x18046f20) + (eax10 + eax10 * 8) * 4 + 12;
    LeaveCriticalSection();
    goto v11;
}

void** fun_1802e5aa(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8) {
    int1_t cf9;
    uint32_t eax10;
    uint32_t eax11;
    void** eax12;
    void** eax13;

    cf9 = reinterpret_cast<unsigned char>(a2) < reinterpret_cast<unsigned char>(g18047020);
    if (!cf9 || (eax10 = reinterpret_cast<unsigned char>(a2) & 31, eax11 = eax10 + eax10 * 8, ecx = *reinterpret_cast<void***>((reinterpret_cast<signed char>(a2) >> 5) * 4 + 0x18046f20), (*reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(ecx + eax11 * 4) + 4) & 1) == 0)) {
        eax12 = fun_1802dfa3(ecx, __return_address(), a2, a3, a4, a5, a6);
        *reinterpret_cast<void***>(eax12) = reinterpret_cast<void**>(9);
        eax13 = fun_1802dfac(ecx, __return_address(), a2, a3, a4, a5, a6, a7, a8);
        *reinterpret_cast<void***>(eax13) = reinterpret_cast<void**>(0);
        return 0xffffffff;
    } else {
        return *reinterpret_cast<void***>(ecx + eax11 * 4);
    }
}

struct s206 {
    signed char[4] pad4;
    unsigned char f4;
    void** f5;
};

int32_t ReadFile = 0x361a4;

void** fun_1802bd9a(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11) {
    void* ebp12;
    void* v13;
    void** ebx14;
    void** edx15;
    uint32_t eax16;
    void** ecx17;
    void**** edi18;
    uint32_t esi19;
    struct s206* eax20;
    void** al21;
    void*** eax22;
    void** v23;
    void*** eax24;
    void** v25;
    void** v26;
    void** v27;
    int32_t eax28;
    void*** eax29;
    void** v30;
    void* v31;
    void** eax32;
    unsigned char al33;
    void** v34;
    void** ecx35;
    void** v36;
    void** ecx37;
    void** eax38;
    void** v39;
    int32_t eax40;
    int32_t eax41;
    int32_t v42;
    signed char v43;
    signed char v44;
    signed char v45;
    unsigned char* esi46;
    void** eax47;
    void** edi48;
    void** esi49;
    void** eax50;
    void** ebx51;
    void** eax52;

    ebp12 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    v13 = reinterpret_cast<void*>(0);
    ebx14 = a2;
    edx15 = ebx14;
    if (!a3) 
        goto addr_0x1802bf6c_2;
    eax16 = reinterpret_cast<unsigned char>(a1) & 31;
    ecx17 = reinterpret_cast<void**>(reinterpret_cast<signed char>(a1) >> 5);
    edi18 = reinterpret_cast<void****>(reinterpret_cast<unsigned char>(ecx17) * 4 + 0x18046f20);
    esi19 = eax16 + eax16 * 8 << 2;
    eax20 = reinterpret_cast<struct s206*>(reinterpret_cast<int32_t>(*reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx17) * 4 + 0x18046f20)) + esi19);
    *reinterpret_cast<unsigned char*>(&ecx17) = eax20->f4;
    if (*reinterpret_cast<unsigned char*>(&ecx17) & 2) 
        goto addr_0x1802bf6c_2;
    if (*reinterpret_cast<unsigned char*>(&ecx17) & 72 && (al21 = eax20->f5, al21 != 10)) {
        --a3;
        *reinterpret_cast<void***>(ebx14) = al21;
        eax22 = *edi18;
        edx15 = ebx14 + 1;
        v13 = reinterpret_cast<void*>(1);
        *reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(eax22) + esi19 + 5) = 10;
    }
    v23 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp12) + 0xfffffff4);
    eax24 = *edi18;
    v25 = a3;
    v26 = edx15;
    v27 = *reinterpret_cast<void***>(reinterpret_cast<int32_t>(eax24) + esi19);
    eax28 = reinterpret_cast<int32_t>(ReadFile(v27, v26, v25, v23, 0));
    if (!eax28) 
        goto addr_0x1802be1e_7;
    eax29 = *edi18;
    v30 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(v13) + reinterpret_cast<uint32_t>(v31));
    if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(eax29) + esi19 + 4) & 0x80)) {
        addr_0x1802bf67_9:
        eax32 = v30;
    } else {
        if (!v31 || !reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ebx14) == 10)) {
            al33 = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(eax29) + esi19 + 4) & 0xfb);
        } else {
            al33 = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(eax29) + esi19 + 4) | 4);
        }
        *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(eax29) + esi19 + 4) = al33;
        v34 = a2;
        ecx35 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v30) + reinterpret_cast<unsigned char>(a2));
        v36 = ecx35;
        if (reinterpret_cast<unsigned char>(a2) >= reinterpret_cast<unsigned char>(ecx35)) 
            goto addr_0x1802bf61_14; else 
            goto addr_0x1802be96_15;
    }
    addr_0x1802bf6e_16:
    return eax32;
    addr_0x1802bf61_14:
    v30 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx14) - reinterpret_cast<unsigned char>(a2));
    goto addr_0x1802bf67_9;
    addr_0x1802be96_15:
    while (*reinterpret_cast<void***>(v34) != 26) {
        if (*reinterpret_cast<void***>(v34) != 13) {
            *reinterpret_cast<void***>(ebx14) = *reinterpret_cast<void***>(v34);
            ++ebx14;
            ++v34;
            goto addr_0x1802bf43_19;
        }
        ecx37 = ecx35 - 1;
        if (reinterpret_cast<unsigned char>(v34) < reinterpret_cast<unsigned char>(ecx37)) {
            eax38 = v34 + 1;
            if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax38) == 10)) {
                *reinterpret_cast<void***>(ebx14) = reinterpret_cast<void**>(13);
                ++ebx14;
                v34 = eax38;
                goto addr_0x1802bf43_19;
            } else {
                v34 = v34 + 2;
                goto addr_0x1802bf25_24;
            }
        }
        ++v34;
        v39 = *reinterpret_cast<void***>(reinterpret_cast<int32_t>(*edi18) + esi19);
        eax40 = reinterpret_cast<int32_t>(ReadFile(v39, reinterpret_cast<int32_t>(ebp12) + 0xffffffff, 1, reinterpret_cast<int32_t>(ebp12) + 0xfffffff4, 0, v27, v26, v25, v23, 0));
        if (eax40) 
            goto addr_0x1802bef8_26;
        eax41 = reinterpret_cast<int32_t>(GetLastError(v39, reinterpret_cast<int32_t>(ebp12) + 0xffffffff, 1, reinterpret_cast<int32_t>(ebp12) + 0xfffffff4, 0, v27, v26, v25, v23, 0));
        if (eax41) 
            goto addr_0x1802bf3f_28;
        addr_0x1802bef8_26:
        if (!v42) 
            goto addr_0x1802bf3f_28;
        if (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(*edi18) + esi19 + 4) & 72) 
            goto addr_0x1802bf07_30;
        if (ebx14 != a2 || v43 != 10) {
            fun_1802e6d2(ecx37, a1, 0xff, 1, v39, reinterpret_cast<int32_t>(ebp12) + 0xffffffff, 1, reinterpret_cast<int32_t>(ebp12) + 0xfffffff4, 0, v27, v26, v25, v23, 0);
            if (v44 == 10) {
                addr_0x1802bf43_19:
                ecx35 = v36;
                if (reinterpret_cast<unsigned char>(v34) < reinterpret_cast<unsigned char>(ecx35)) 
                    continue; else 
                    goto addr_0x1802bf4f_33;
            } else {
                addr_0x1802bf3f_28:
                *reinterpret_cast<void***>(ebx14) = reinterpret_cast<void**>(13);
            }
        } else {
            addr_0x1802bf25_24:
            *reinterpret_cast<void***>(ebx14) = reinterpret_cast<void**>(10);
        }
        ++ebx14;
        goto addr_0x1802bf43_19;
        addr_0x1802bf07_30:
        if (v45 != 10) {
            *reinterpret_cast<void***>(ebx14) = reinterpret_cast<void**>(13);
            ++ebx14;
            *reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(*edi18) + esi19 + 5) = v45;
            goto addr_0x1802bf43_19;
        }
    }
    esi46 = reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(*edi18) + esi19 + 4);
    if (!(*esi46 & 64)) {
        *esi46 = reinterpret_cast<unsigned char>(*esi46 | 2);
        goto addr_0x1802bf61_14;
    }
    addr_0x1802bf4f_33:
    goto addr_0x1802bf61_14;
    addr_0x1802be1e_7:
    eax47 = reinterpret_cast<void**>(GetLastError(v27, v26, v25, v23, 0));
    if (!reinterpret_cast<int1_t>(eax47 == 5)) {
        if (eax47 == 0x6d) {
            addr_0x1802bf6c_2:
            eax32 = reinterpret_cast<void**>(0);
            goto addr_0x1802bf6e_16;
        } else {
            fun_1802df30(ecx17, eax47, v27, v26, v25, v23, 0, edi48, esi49);
        }
    } else {
        eax50 = fun_1802dfa3(ecx17, v27, v26, v25, v23, 0, edi48);
        *reinterpret_cast<void***>(eax50) = reinterpret_cast<void**>(9);
        eax52 = fun_1802dfac(ecx17, v27, v26, v25, v23, 0, edi48, esi49, ebx51);
        *reinterpret_cast<void***>(eax52) = reinterpret_cast<void**>(5);
    }
    eax32 = reinterpret_cast<void**>(0xffffffff);
    goto addr_0x1802bf6e_16;
}

void** fun_1802dfa3(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** eax8;

    eax8 = fun_1802d5a4(ecx);
    return eax8 + 8;
}

void** fun_1802dfac(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, ...) {
    void** eax10;

    eax10 = fun_1802d5a4(ecx);
    return eax10 + 12;
}

int32_t SetFilePointer = 0x363b8;

void** fun_1802e6d2(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, ...) {
    void** edi15;
    void** esi16;
    void** eax17;
    int32_t eax18;
    void** eax19;
    void** eax20;
    uint32_t eax21;

    eax17 = fun_1802e5aa(ecx, a2, edi15, esi16, __return_address(), a2, a3, a4);
    if (!reinterpret_cast<int1_t>(eax17 == 0xffffffff)) {
        eax18 = reinterpret_cast<int32_t>(SetFilePointer(a2, eax17, a2, 0, a3));
        if (eax18 != -1) {
            eax19 = reinterpret_cast<void**>(0);
        } else {
            eax19 = reinterpret_cast<void**>(GetLastError(a2, eax17, a2, 0, a3));
        }
        if (eax19) 
            goto addr_0x1802e717_6;
    } else {
        eax20 = fun_1802dfa3(a2, edi15, esi16, __return_address(), a2, a3, a4);
        *reinterpret_cast<void***>(eax20) = reinterpret_cast<void**>(9);
        goto addr_0x1802e71e_8;
    }
    eax21 = (reinterpret_cast<unsigned char>(a2) & 31) + (reinterpret_cast<unsigned char>(a2) & 31) * 8;
    *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(*reinterpret_cast<void**>((reinterpret_cast<signed char>(a2) >> 5) * 4 + 0x18046f20)) + eax21 * 4 + 4) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(*reinterpret_cast<void**>((reinterpret_cast<signed char>(a2) >> 5) * 4 + 0x18046f20)) + eax21 * 4 + 4) & 0xfd);
    addr_0x1802e742_10:
    goto __return_address();
    addr_0x1802e717_6:
    fun_1802df30(a2, eax19, eax17, a2, 0, a3, edi15, esi16, __return_address());
    addr_0x1802e71e_8:
    goto addr_0x1802e742_10;
}

void fun_18031090(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20);

int32_t SetEndOfFile = 0x363ca;

void** fun_1802fe50(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10);

void** fun_18031022(void** a1, void** a2, void** a3, void** a4, void** a5);

void** fun_180307fd(void** ecx, void** a2, void** a3, void** a4, void** a5);

void** fun_1802e745(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18) {
    void** v19;
    void** v20;
    void** ebp21;
    void*** ebp22;
    void** v23;
    void** esi24;
    void** esi25;
    void** ebx26;
    void** eax27;
    void** v28;
    void** eax29;
    void** eax30;
    void** v31;
    void** edi32;
    void** edi33;
    uint1_t less34;
    void** eax35;
    int32_t eax36;
    uint32_t esi37;
    void** eax38;
    void** eax39;
    void** eax40;
    void** eax41;
    void** eax42;
    void** eax43;
    void** eax44;
    void** eax45;

    v19 = reinterpret_cast<void**>(__return_address());
    v20 = ebp21;
    ebp22 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    fun_18031090(ecx, v20, v19, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
    v23 = esi24;
    esi25 = reinterpret_cast<void**>(0);
    eax27 = fun_1802e6d2(ecx, a2, 0, 1, v23, ebx26, v20, v19, a2, a3, a4, a5, a6, a7);
    v28 = eax27;
    if (eax27 == 0xffffffff || (eax29 = fun_1802e6d2(ecx, a2, 0, 2, v23, v28, v20, v19, a2, a3, a4, a5, a6, a7), eax29 == 0xffffffff)) {
        eax30 = reinterpret_cast<void**>(0xffffffff);
    } else {
        v31 = edi32;
        edi33 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a3) - reinterpret_cast<unsigned char>(eax29));
        less34 = reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(edi33) < reinterpret_cast<signed char>(0));
        if (less34 | reinterpret_cast<uint1_t>(edi33 == 0)) {
            if (less34 && (fun_1802e6d2(ecx, a2, a3, 0, v31, v23, v28, v20, v19, a2, a3, a4, a5, a6), eax35 = fun_1802e5aa(ecx, a2, a2, a3, 0, v31, v23, v28), eax36 = reinterpret_cast<int32_t>(SetEndOfFile(eax35)), esi37 = reinterpret_cast<uint32_t>(-eax36), esi25 = reinterpret_cast<void**>(-(esi37 - (esi37 + reinterpret_cast<uint1_t>(esi37 < esi37 + reinterpret_cast<uint1_t>(!!eax36)))) - 1), reinterpret_cast<int1_t>(esi25 == 0xffffffff))) {
                eax38 = fun_1802dfa3(ecx, eax35, v31, v23, v28, v20, v19);
                *reinterpret_cast<void***>(eax38) = reinterpret_cast<void**>(13);
                eax39 = reinterpret_cast<void**>(GetLastError(eax35));
                eax40 = fun_1802dfac(ecx, eax35, v31, v23, v28, v20, v19, a2, a3);
                *reinterpret_cast<void***>(eax40) = eax39;
                goto addr_0x1802e84f_6;
            }
        } else {
            fun_1802fe50(ecx, ebp22 + 0xffffeffc, 0, 0x1000, v31, v23, v28, v20, v19, a2);
            eax41 = fun_18031022(a2, 0x8000, ebp22 + 0xffffeffc, 0, 0x1000);
            a3 = eax41;
            while (1) {
                eax42 = reinterpret_cast<void**>(0x1000);
                if (reinterpret_cast<signed char>(edi33) < reinterpret_cast<signed char>(0x1000)) {
                    eax42 = edi33;
                }
                eax43 = fun_180307fd(ecx, a2, ebp22 + 0xffffeffc, eax42, v31);
                if (eax43 == 0xffffffff) 
                    goto addr_0x1802e7e0_11;
                edi33 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi33) - reinterpret_cast<unsigned char>(eax43));
                if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(edi33) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(edi33 == 0)) 
                    goto addr_0x1802e7f8_13;
            }
        }
    }
    addr_0x1802e866_15:
    return eax30;
    addr_0x1802e84f_6:
    fun_1802e6d2(ecx, a2, v28, 0, v31, v23, v28, v20, v19, a2, a3, a4, a5, a6, a2, v28, 0, v31, v23, v28, v20, v19, a2, a3, a4, a5, a6);
    eax30 = esi25;
    goto addr_0x1802e866_15;
    addr_0x1802e7e0_11:
    eax44 = fun_1802dfac(ecx, v31, v23, v28, v20, v19, a2, a3, a4);
    if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax44) == 5)) {
        eax45 = fun_1802dfa3(ecx, v31, v23, v28, v20, v19, a2);
        *reinterpret_cast<void***>(eax45) = reinterpret_cast<void**>(13);
    }
    esi25 = reinterpret_cast<void**>(0xffffffff);
    addr_0x1802e7f8_13:
    fun_18031022(a2, a3, v31, v23, v28);
    ecx = a3;
    goto addr_0x1802e84f_6;
}

void** fun_1802ca53(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13);

void fun_1802e8ff(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9) {
    void*** esi10;
    void** edi11;
    void** esi12;
    void** ebp13;
    void** eax14;
    void** ecx15;
    int1_t zf16;
    void** ecx17;

    esi10 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(a2) * 4 + 0x180444c0);
    if (!*reinterpret_cast<int32_t*>(reinterpret_cast<unsigned char>(a2) * 4 + 0x180444c0)) {
        eax14 = fun_1802ca53(ecx, 24, edi11, esi12, ebp13, __return_address(), a2, a3, a4, a5, a6, a7, a8);
        ecx15 = reinterpret_cast<void**>(24);
        if (!eax14) {
            fun_1802b7a4(24);
            ecx15 = reinterpret_cast<void**>(17);
        }
        fun_1802e8ff(ecx15, 17, edi11, esi12, ebp13, __return_address(), a2, a3, a4);
        zf16 = *esi10 == 0;
        ecx17 = reinterpret_cast<void**>(17);
        if (!zf16) {
            fun_1802ca0b(17, eax14, edi11, esi12, ebp13, __return_address());
            ecx17 = eax14;
        } else {
            InitializeCriticalSection(17);
            *esi10 = eax14;
        }
        fun_1802e960(ecx17, 17, edi11, esi12, ebp13, __return_address());
        ecx = reinterpret_cast<void**>(17);
    }
    EnterCriticalSection(ecx);
    goto ebp13;
}

void** g18044898 = reinterpret_cast<void**>(1);

void** __image_base = reinterpret_cast<void**>(0x96);

uint32_t fun_1802ebc4(void** ecx, void** a2, void** a3);

void** fun_1802e975(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, int32_t a8, void** a9, void** a10, void** a11, void** a12, ...);

void** fun_1802c2c8(void** ecx, void** a2) {
    void** v3;
    int1_t zf4;
    int1_t less_or_equal5;
    void** eax6;
    uint32_t eax7;
    void** edx8;
    int32_t eax9;
    void** v10;
    void** v11;
    void** ebx12;
    void** ebp13;
    void** eax14;
    void** eax15;

    v3 = ecx;
    zf4 = g18045b0c == 0;
    if (!zf4) {
        if (reinterpret_cast<signed char>(a2) < reinterpret_cast<signed char>(0x100)) {
            less_or_equal5 = reinterpret_cast<signed char>(g18044898) <= reinterpret_cast<signed char>(1);
            if (less_or_equal5) {
                eax6 = __image_base;
                eax6 = *reinterpret_cast<void***>(eax6 + reinterpret_cast<unsigned char>(a2) * 2);
                eax7 = reinterpret_cast<unsigned char>(eax6) & 2;
            } else {
                eax7 = fun_1802ebc4(ecx, a2, 2);
            }
            if (!eax7) 
                goto addr_0x1802c322_7;
        }
        edx8 = __image_base;
        eax9 = reinterpret_cast<signed char>(a2) >> 8;
        if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(edx8 + *reinterpret_cast<unsigned char*>(&eax9) * 2) + 1) & 0x80)) {
            v10 = reinterpret_cast<void**>(1);
        } else {
            v10 = reinterpret_cast<void**>(2);
        }
        v11 = g18045b0c;
        eax14 = fun_1802e975(v11, 0x200, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 8, v10, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffffc, 3, 0, 1, ebx12, v3, ebp13, __return_address(), v11, 0x200, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 8, v10, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffffc, 3, 0, 1, ebx12, v3, ebp13, __return_address());
        if (!eax14) {
            addr_0x1802c322_7:
            eax15 = a2;
        } else {
            if (!reinterpret_cast<int1_t>(eax14 == 1)) {
                eax15 = reinterpret_cast<void**>(static_cast<uint32_t>(*reinterpret_cast<unsigned char*>(&v3 + 1)) << 8 | static_cast<uint32_t>(*reinterpret_cast<unsigned char*>(&v3)));
            } else {
                eax15 = reinterpret_cast<void**>(static_cast<uint32_t>(*reinterpret_cast<unsigned char*>(&v3)));
            }
        }
    } else {
        eax15 = a2;
        if (reinterpret_cast<signed char>(eax15) >= reinterpret_cast<signed char>(97) && reinterpret_cast<signed char>(eax15) <= reinterpret_cast<signed char>(0x7a)) {
            eax15 = eax15 - 32;
        }
    }
    return eax15;
}

void** fun_1802e960(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    int32_t ebp7;

    LeaveCriticalSection();
    goto ebp7;
}

uint32_t fun_1803120a(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, int32_t a8, int16_t a9, void* a10, int32_t a11);

uint32_t fun_1802ebc4(void** ecx, void** a2, void** a3) {
    void** eax4;
    void** esi5;
    int32_t ecx6;
    int16_t v7;
    void** v8;
    void** ecx9;
    void* ebp10;
    uint32_t eax11;
    uint32_t eax12;
    void** ecx13;

    eax4 = a2;
    if (reinterpret_cast<unsigned char>(eax4 + 1) > reinterpret_cast<unsigned char>(0x100)) {
        esi5 = __image_base;
        ecx6 = reinterpret_cast<signed char>(eax4) >> 8;
        if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(esi5 + *reinterpret_cast<unsigned char*>(&ecx6) * 2) + 1) & 0x80)) {
            *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&v7) + 1) = 0;
            *reinterpret_cast<unsigned char*>(&v7) = *reinterpret_cast<unsigned char*>(&eax4);
            v8 = reinterpret_cast<void**>(1);
        } else {
            *reinterpret_cast<unsigned char*>(&v7) = *reinterpret_cast<unsigned char*>(&ecx6);
            *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&v7) + 1) = *reinterpret_cast<unsigned char*>(&eax4);
            v8 = reinterpret_cast<void**>(2);
        }
        ecx9 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 10);
        eax11 = fun_1803120a(ecx9, 1, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffffc, v8, ecx9, 0, 0, 1, v7, ebp10, __return_address());
        if (eax11) {
            eax12 = static_cast<uint32_t>(*reinterpret_cast<uint16_t*>(&a2 + 2));
        } else {
            return eax11;
        }
    } else {
        ecx13 = __image_base;
        eax12 = static_cast<uint32_t>(reinterpret_cast<uint16_t>(*reinterpret_cast<void***>(ecx13 + reinterpret_cast<unsigned char>(eax4) * 2)));
    }
    return eax12 & reinterpret_cast<unsigned char>(a3);
}

uint32_t fun_1802f02a(void** a1) {
    uint32_t ebx2;
    void** eax3;
    void** ecx4;
    void** eax5;
    void** edi6;
    void** v7;
    void** edi8;
    void** esi9;
    void** ebx10;
    void** eax11;
    void** eax12;
    void** eax13;

    ebx2 = 0;
    eax3 = *reinterpret_cast<void***>(a1 + 12);
    ecx4 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax3) & 3);
    if (*reinterpret_cast<signed char*>(&ecx4) == 2 && (*reinterpret_cast<uint16_t*>(&eax3) & 0x108 && (eax5 = *reinterpret_cast<void***>(a1 + 8), edi6 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a1)) - reinterpret_cast<unsigned char>(eax5)), !(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(edi6) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(edi6 == 0))))) {
        v7 = *reinterpret_cast<void***>(a1 + 16);
        eax11 = fun_18030798(ecx4, v7, eax5, edi6, edi8, esi9, ebx10);
        if (eax11 != edi6) {
            *reinterpret_cast<void***>(a1 + 12) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a1 + 12)) | 32);
            ebx2 = 0xffffffff;
        } else {
            eax12 = *reinterpret_cast<void***>(a1 + 12);
            if (*reinterpret_cast<unsigned char*>(&eax12) & 0x80) {
                *reinterpret_cast<unsigned char*>(&eax12) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax12) & 0xfd);
                *reinterpret_cast<void***>(a1 + 12) = eax12;
            }
        }
    }
    eax13 = *reinterpret_cast<void***>(a1 + 8);
    *reinterpret_cast<void***>(a1 + 4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(a1) = eax13;
    return ebx2;
}

void fun_1802efd1(void** ecx, void** a2, void** a3) {
    void** eax4;
    void** v5;
    void** esi6;

    eax4 = *reinterpret_cast<void***>(a2 + 12);
    if (*reinterpret_cast<unsigned char*>(&eax4) & 0x83 && *reinterpret_cast<unsigned char*>(&eax4) & 8) {
        v5 = *reinterpret_cast<void***>(a2 + 8);
        fun_1802ca0b(ecx, v5, esi6, __return_address(), a2, a3);
        *reinterpret_cast<void***>(a2 + 12) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 12)) & 0xfbf7);
        *reinterpret_cast<void***>(a2) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(a2 + 8) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(a2 + 4) = reinterpret_cast<void**>(0);
    }
    return;
}

struct s207 {
    int16_t f0;
    void** f2;
    signed char[3] pad6;
    void** f6;
    signed char[3] pad10;
    int16_t f10;
};

void** fun_18031608(struct s207* a1, void*** a2, void** a3, void* a4, void* a5, uint32_t a6, int32_t a7);

struct s208 {
    int32_t* f0;
    int32_t* f4;
};

int32_t fun_1802fb4b(struct s208* a1, void* a2, struct s207* a3, void*** a4, void** a5, void* a6, void* a7, uint32_t a8, int32_t a9);

int32_t fun_1802fb77(void* a1, void** a2) {
    int32_t eax3;

    fun_18031608(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, a2, 0, 0, 0, 0);
    eax3 = fun_1802fb4b(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 12, a1, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, a2, 0, 0, 0, 0);
    return eax3;
}

void** fun_1802feb0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6);

void** fun_1802c9e6(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** esi7;
    void** edi8;
    void** eax9;
    void** eax10;

    if (a3) {
        eax9 = fun_1802feb0(ecx, a2, esi7, edi8, __return_address(), a2);
        eax10 = fun_1802b920(reinterpret_cast<unsigned char>(a2) + reinterpret_cast<unsigned char>(a3), a2, eax9 + 1, a2, esi7, edi8, __return_address(), a2, a3, a4, a5, a6);
    }
    return eax10;
}

void** fun_1802fd60(void** ecx, void** a2, void** a3, void** a4, void** a5, ...) {
    void** edi6;
    void** ecx7;
    void** edx8;

    edi6 = a2;
    ecx7 = a3;
    if (!(reinterpret_cast<unsigned char>(ecx7) & 3)) {
        while (1) {
            addr_0x1802fdf6_3:
            edx8 = *reinterpret_cast<void***>(ecx7);
            ecx7 = ecx7 + 4;
            if ((reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx7)) ^ 0xffffffff ^ reinterpret_cast<uint32_t>(*reinterpret_cast<void***>(ecx7) + 0x7efefeff)) & 0x81010100) {
                if (!edx8) 
                    break;
                if (!*reinterpret_cast<signed char*>(&edx8 + 1)) 
                    goto addr_0x1802fe3f_6;
                if (!(reinterpret_cast<unsigned char>(edx8) & 0xff0000)) 
                    goto addr_0x1802fe32_8;
                if (!(reinterpret_cast<unsigned char>(edx8) & 0xff000000)) 
                    goto addr_0x1802fe2a_10;
            }
            *reinterpret_cast<void***>(edi6) = edx8;
            edi6 = edi6 + 4;
        }
    } else {
        do {
            edx8 = *reinterpret_cast<void***>(ecx7);
            ++ecx7;
            if (!edx8) 
                break;
            *reinterpret_cast<void***>(edi6) = edx8;
            ++edi6;
        } while (reinterpret_cast<unsigned char>(ecx7) & 3);
        goto addr_0x1802fdef_15;
    }
    *reinterpret_cast<void***>(edi6) = edx8;
    return a2;
    addr_0x1802fe3f_6:
    *reinterpret_cast<void***>(edi6) = edx8;
    return a2;
    addr_0x1802fe32_8:
    *reinterpret_cast<void***>(edi6) = edx8;
    *reinterpret_cast<void***>(edi6 + 2) = reinterpret_cast<void**>(0);
    return a2;
    addr_0x1802fe2a_10:
    *reinterpret_cast<void***>(edi6) = edx8;
    return a2;
    addr_0x1802fdef_15:
    goto addr_0x1802fdf6_3;
}

void** fun_1802fe50(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10) {
    void** edx11;
    void** eax12;
    void** edi13;
    uint32_t ecx14;
    void*** eax15;
    void** ecx16;
    uint32_t ecx17;

    edx11 = a4;
    if (!edx11) {
        return a2;
    }
    eax12 = reinterpret_cast<void**>(0);
    eax12 = a3;
    edi13 = a2;
    if (reinterpret_cast<unsigned char>(edx11) < reinterpret_cast<unsigned char>(4)) {
        do {
            addr_0x1802fe97_4:
            *reinterpret_cast<void***>(edi13) = eax12;
            ++edi13;
            --edx11;
        } while (edx11);
    } else {
        ecx14 = reinterpret_cast<uint32_t>(-reinterpret_cast<unsigned char>(a2)) & 3;
        if (ecx14) {
            edx11 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx11) - ecx14);
            do {
                *reinterpret_cast<void***>(edi13) = eax12;
                ++edi13;
                --ecx14;
            } while (ecx14);
        }
        eax15 = reinterpret_cast<void***>((reinterpret_cast<unsigned char>(eax12) << 8) + reinterpret_cast<unsigned char>(eax12));
        eax12 = reinterpret_cast<void**>((reinterpret_cast<uint32_t>(eax15) << 16) + reinterpret_cast<uint32_t>(eax15));
        ecx16 = edx11;
        edx11 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx11) & 3);
        ecx17 = reinterpret_cast<unsigned char>(ecx16) >> 2;
        if (!ecx17) 
            goto addr_0x1802fe97_4; else 
            goto addr_0x1802fe91_9;
    }
    addr_0x1802fe9d_10:
    return a2;
    addr_0x1802fe91_9:
    while (ecx17) {
        --ecx17;
        *reinterpret_cast<void***>(edi13) = eax12;
        edi13 = edi13 + 4;
    }
    if (!edx11) 
        goto addr_0x1802fe9d_10; else 
        goto addr_0x1802fe97_4;
}

struct s209 {
    int32_t f0;
    int32_t f4;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

struct s209* fun_1802fc48(void** ecx, void** a2, void** a3, struct s209* a4, void** a5);

void** fun_1802fbd1(void** a1, void** a2, void** a3, void** a4, void** a5, struct s209* a6, void** a7);

struct s210 {
    int32_t f0;
    void* f4;
};

void** fun_1802c85b(void** a1, void** a2, struct s210* a3, signed char a4, void** a5, void** a6, void** a7, void** a8, void** a9, struct s209* a10, void** a11);

void** fun_1802c806(void** ecx, int32_t a2, void** a3, void** a4) {
    void* eax5;
    int32_t v6;
    void* v7;

    __asm__("fld qword [eax]");
    __asm__("fstp qword [esp]");
    fun_1802fc48(ecx, ecx, ecx, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 16, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffd8);
    eax5 = reinterpret_cast<void*>(0);
    *reinterpret_cast<unsigned char*>(&eax5) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(v6 == 45));
    fun_1802fbd1(reinterpret_cast<int32_t>(eax5) + reinterpret_cast<unsigned char>(a3), reinterpret_cast<int32_t>(v7) + reinterpret_cast<unsigned char>(a4), reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff0, ecx, ecx, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 16, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffd8);
    fun_1802c85b(a3, a4, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 16, 0, reinterpret_cast<int32_t>(eax5) + reinterpret_cast<unsigned char>(a3), reinterpret_cast<int32_t>(v7) + reinterpret_cast<unsigned char>(a4), reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff0, ecx, ecx, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 16, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffd8);
    return a3;
}

void** fun_1802feb0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** ecx7;
    void** eax8;

    ecx7 = a2;
    if (!(reinterpret_cast<unsigned char>(ecx7) & 3)) {
        while (1) {
            addr_0x1802fed0_2:
            ecx7 = ecx7 + 4;
            if (!((reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx7)) ^ 0xffffffff ^ reinterpret_cast<uint32_t>(*reinterpret_cast<void***>(ecx7) + 0x7efefeff)) & 0x81010100)) 
                continue;
            eax8 = *reinterpret_cast<void***>(ecx7 + 0xfffffffc);
            if (!*reinterpret_cast<signed char*>(&eax8)) 
                break;
            if (!*reinterpret_cast<signed char*>(&eax8 + 1)) 
                goto addr_0x1802ff17_5;
            if (!(reinterpret_cast<unsigned char>(eax8) & 0xff0000)) 
                goto addr_0x1802ff0d_7;
            if (!(reinterpret_cast<unsigned char>(eax8) & 0xff000000)) 
                goto addr_0x1802ff03_9;
        }
    } else {
        do {
            ++ecx7;
            if (!*reinterpret_cast<void***>(ecx7)) 
                goto addr_0x1802ff03_9;
        } while (reinterpret_cast<unsigned char>(ecx7) & 3);
        goto addr_0x1802fecb_13;
    }
    return reinterpret_cast<unsigned char>(ecx7 + 0xfffffffc) - reinterpret_cast<unsigned char>(a2);
    addr_0x1802ff17_5:
    return reinterpret_cast<uint32_t>(ecx7 + 0xfffffffd) - reinterpret_cast<unsigned char>(a2);
    addr_0x1802ff0d_7:
    return reinterpret_cast<uint32_t>(ecx7 + 0xfffffffe) - reinterpret_cast<unsigned char>(a2);
    addr_0x1802ff03_9:
    return reinterpret_cast<unsigned char>(ecx7 + 0xffffffff) - reinterpret_cast<unsigned char>(a2);
    addr_0x1802fecb_13:
    goto addr_0x1802fed0_2;
}

void** fun_1802ff72(void** a1) {
    uint32_t eax2;
    void** eax3;
    void** ecx4;

    eax2 = g18045ed8;
    eax3 = g18045edc;
    ecx4 = eax3 + (eax2 + eax2 * 4) * 4;
    while (reinterpret_cast<unsigned char>(eax3) < reinterpret_cast<unsigned char>(ecx4)) {
        if (reinterpret_cast<unsigned char>(a1) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax3 + 12)) < 0x100000) 
            goto addr_0x1802ff9c_4;
        eax3 = eax3 + 20;
    }
    eax3 = reinterpret_cast<void**>(0);
    addr_0x1802ff9c_4:
    return eax3;
}

struct s211 {
    signed char[4] pad4;
    int32_t f4;
};

struct s212 {
    signed char[8] pad8;
    int32_t f8;
};

void** g18045ed4 = reinterpret_cast<void**>(0);

void** g18045ecc = reinterpret_cast<void**>(0);

void** g18045ed0 = reinterpret_cast<void**>(0);

void fun_1802ff9d(void** ecx, void** a2, void** a3) {
    void** eax4;
    void* esi5;
    void** ebx6;
    void** edx7;
    void** esi8;
    void** ebx9;
    void** v10;
    void** v11;
    void* ecx12;
    void** ecx13;
    void** ecx14;
    uint32_t ecx15;
    signed char* ecx16;
    uint32_t edi17;
    signed char* ecx18;
    uint32_t edi19;
    void** edi20;
    uint32_t ecx21;
    void** ecx22;
    void** ecx23;
    uint32_t ecx24;
    signed char* ecx25;
    uint32_t edx26;
    signed char* ecx27;
    uint32_t edx28;
    void** ecx29;
    signed char cl30;
    uint32_t ecx31;
    uint32_t ecx32;
    uint32_t* eax33;
    void** ecx34;
    void** ecx35;
    uint32_t* eax36;
    void** eax37;
    void** eax38;
    void** ecx39;
    int32_t edi40;
    void** ecx41;
    void** ecx42;
    void** eax43;
    void** eax44;
    void** ecx45;
    void** eax46;
    void** eax47;
    void** v48;
    void** eax49;
    void** v50;
    void** v51;
    uint32_t eax52;
    void** edx53;
    void** eax54;
    int1_t below_or_equal55;
    void** ecx56;

    eax4 = *reinterpret_cast<void***>(a2 + 16);
    esi5 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a3) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 12)));
    ebx6 = *reinterpret_cast<void***>(a3 + 0xfffffffc);
    edx7 = a3 + 0xfffffffc;
    esi8 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esi5) >> 15);
    ebx9 = ebx6 - 1;
    v10 = *reinterpret_cast<void***>(edx7 + 0xfffffffc);
    v11 = ebx9;
    ecx12 = *reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx9) + reinterpret_cast<unsigned char>(edx7));
    if (!(*reinterpret_cast<unsigned char*>(&ecx12) & 1)) {
        ecx13 = reinterpret_cast<void**>((reinterpret_cast<int32_t>(ecx12) >> 4) - 1);
        a3 = ecx13;
        if (reinterpret_cast<unsigned char>(ecx13) > reinterpret_cast<unsigned char>(63)) {
            a3 = reinterpret_cast<void**>(63);
        }
        if (*reinterpret_cast<int32_t*>(reinterpret_cast<unsigned char>(ebx9) + reinterpret_cast<unsigned char>(edx7) + 4) == *reinterpret_cast<int32_t*>(reinterpret_cast<unsigned char>(ebx9) + reinterpret_cast<unsigned char>(edx7) + 8)) {
            ecx14 = a3;
            if (reinterpret_cast<unsigned char>(ecx14) >= reinterpret_cast<unsigned char>(32)) {
                ecx15 = reinterpret_cast<uint32_t>(ecx14 + 0xffffffe0);
                ecx16 = reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(eax4) + 4);
                edi17 = ~(0x80000000 >> *reinterpret_cast<signed char*>(&ecx15));
                *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax4 + reinterpret_cast<unsigned char>(esi8) * 4) + 0xc4) = *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax4 + reinterpret_cast<unsigned char>(esi8) * 4) + 0xc4) & edi17;
                *ecx16 = reinterpret_cast<signed char>(*ecx16 - 1);
                if (!*ecx16) {
                    *reinterpret_cast<void***>(a2 + 4) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 4)) & edi17);
                }
            } else {
                ecx18 = reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(ecx14) + reinterpret_cast<unsigned char>(eax4) + 4);
                edi19 = ~(0x80000000 >> *reinterpret_cast<signed char*>(&ecx14));
                *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax4 + reinterpret_cast<unsigned char>(esi8) * 4) + 68) = *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax4 + reinterpret_cast<unsigned char>(esi8) * 4) + 68) & edi19;
                *ecx18 = reinterpret_cast<signed char>(*ecx18 - 1);
                if (!*ecx18) {
                    *reinterpret_cast<void***>(a2) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2)) & edi19);
                }
            }
        }
        (*reinterpret_cast<struct s211**>(reinterpret_cast<unsigned char>(ebx9) + reinterpret_cast<unsigned char>(edx7) + 8))->f4 = *reinterpret_cast<int32_t*>(reinterpret_cast<unsigned char>(ebx9) + reinterpret_cast<unsigned char>(edx7) + 4);
        ebx9 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx9) + reinterpret_cast<uint32_t>(ecx12));
        (*reinterpret_cast<struct s212**>(reinterpret_cast<unsigned char>(ebx9) + reinterpret_cast<unsigned char>(edx7) + 4))->f8 = *reinterpret_cast<int32_t*>(reinterpret_cast<unsigned char>(ebx9) + reinterpret_cast<unsigned char>(edx7) + 8);
        v11 = ebx9;
    }
    edi20 = reinterpret_cast<void**>((reinterpret_cast<signed char>(ebx9) >> 4) - 1);
    if (reinterpret_cast<unsigned char>(edi20) > reinterpret_cast<unsigned char>(63)) {
        edi20 = reinterpret_cast<void**>(63);
    }
    ecx21 = reinterpret_cast<unsigned char>(v10) & 1;
    if (!ecx21) {
        ecx22 = reinterpret_cast<void**>((reinterpret_cast<signed char>(v10) >> 4) - 1);
        a3 = ecx22;
        if (reinterpret_cast<unsigned char>(ecx22) > reinterpret_cast<unsigned char>(63)) {
            a3 = reinterpret_cast<void**>(63);
            ecx22 = reinterpret_cast<void**>(63);
        }
        ebx9 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx9) + reinterpret_cast<unsigned char>(v10));
        v11 = ebx9;
        edi20 = reinterpret_cast<void**>((reinterpret_cast<signed char>(ebx9) >> 4) - 1);
        if (reinterpret_cast<unsigned char>(edi20) > reinterpret_cast<unsigned char>(63)) {
            edi20 = reinterpret_cast<void**>(63);
        }
        if (ecx22 != edi20) {
            if (*reinterpret_cast<void***>(reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(edx7) - reinterpret_cast<unsigned char>(v10)) + 4) == *reinterpret_cast<void***>(reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(edx7) - reinterpret_cast<unsigned char>(v10)) + 8)) {
                ecx23 = a3;
                if (reinterpret_cast<unsigned char>(ecx23) >= reinterpret_cast<unsigned char>(32)) {
                    ecx24 = reinterpret_cast<uint32_t>(ecx23 + 0xffffffe0);
                    ecx25 = reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(eax4) + 4);
                    edx26 = ~(0x80000000 >> *reinterpret_cast<signed char*>(&ecx24));
                    *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax4 + reinterpret_cast<unsigned char>(esi8) * 4) + 0xc4) = *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax4 + reinterpret_cast<unsigned char>(esi8) * 4) + 0xc4) & edx26;
                    *ecx25 = reinterpret_cast<signed char>(*ecx25 - 1);
                    if (!*ecx25) {
                        *reinterpret_cast<void***>(a2 + 4) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 4)) & edx26);
                    }
                } else {
                    ecx27 = reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(ecx23) + reinterpret_cast<unsigned char>(eax4) + 4);
                    edx28 = ~(0x80000000 >> *reinterpret_cast<signed char*>(&ecx23));
                    *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax4 + reinterpret_cast<unsigned char>(esi8) * 4) + 68) = *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax4 + reinterpret_cast<unsigned char>(esi8) * 4) + 68) & edx28;
                    *ecx27 = reinterpret_cast<signed char>(*ecx27 - 1);
                    if (!*ecx27) {
                        *reinterpret_cast<void***>(a2) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2)) & edx28);
                    }
                }
            }
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(edx7) - reinterpret_cast<unsigned char>(v10)) + 8) + 4) = *reinterpret_cast<void***>(reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(edx7) - reinterpret_cast<unsigned char>(v10)) + 4);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(edx7) - reinterpret_cast<unsigned char>(v10)) + 4) + 8) = *reinterpret_cast<void***>(reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(edx7) - reinterpret_cast<unsigned char>(v10)) + 8);
        }
        edx7 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx7) - reinterpret_cast<unsigned char>(v10));
    }
    if ((ecx21 || a3 != edi20) && (*reinterpret_cast<void***>(edx7 + 4) = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(eax4 + reinterpret_cast<unsigned char>(esi8) * 0x204) + 0x144 + reinterpret_cast<unsigned char>(edi20) * 8 + 4), ecx29 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(eax4 + reinterpret_cast<unsigned char>(esi8) * 0x204) + 0x144 + reinterpret_cast<unsigned char>(edi20) * 8), *reinterpret_cast<void***>(edx7 + 8) = ecx29, *reinterpret_cast<void***>(ecx29 + 4) = edx7, *reinterpret_cast<void***>(*reinterpret_cast<void***>(edx7 + 4) + 8) = edx7, *reinterpret_cast<void***>(edx7 + 4) == *reinterpret_cast<void***>(edx7 + 8))) {
        cl30 = *reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(edi20) + reinterpret_cast<unsigned char>(eax4) + 4);
        *reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(edi20) + reinterpret_cast<unsigned char>(eax4) + 4) = reinterpret_cast<signed char>(cl30 + 1);
        if (reinterpret_cast<unsigned char>(edi20) >= reinterpret_cast<unsigned char>(32)) {
            if (!cl30) {
                ecx31 = reinterpret_cast<uint32_t>(edi20 + 0xffffffe0);
                *reinterpret_cast<void***>(a2 + 4) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 4)) | 0x80000000 >> *reinterpret_cast<signed char*>(&ecx31));
            }
            ecx32 = reinterpret_cast<uint32_t>(edi20 + 0xffffffe0);
            eax33 = reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax4 + reinterpret_cast<unsigned char>(esi8) * 4) + 0xc4);
            *eax33 = *eax33 | 0x80000000 >> *reinterpret_cast<signed char*>(&ecx32);
        } else {
            if (!cl30) {
                ecx34 = edi20;
                *reinterpret_cast<void***>(a2) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2)) | 0x80000000 >> *reinterpret_cast<signed char*>(&ecx34));
            }
            ecx35 = edi20;
            eax36 = reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax4 + reinterpret_cast<unsigned char>(esi8) * 4) + 68);
            *eax36 = *eax36 | 0x80000000 >> *reinterpret_cast<signed char*>(&ecx35);
        }
        ebx9 = v11;
    }
    *reinterpret_cast<void***>(edx7) = ebx9;
    *reinterpret_cast<void***>(reinterpret_cast<unsigned char>(ebx9) + reinterpret_cast<unsigned char>(edx7) + 0xfffffffc) = ebx9;
    *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(eax4 + reinterpret_cast<unsigned char>(esi8) * 0x204) + 0x144) = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(eax4 + reinterpret_cast<unsigned char>(esi8) * 0x204) + 0x144) - 1;
    if (*reinterpret_cast<void***>(reinterpret_cast<uint32_t>(eax4 + reinterpret_cast<unsigned char>(esi8) * 0x204) + 0x144)) {
        addr_0x180302c3_37:
        return;
    } else {
        eax37 = g18045ed4;
        if (!eax37) {
            addr_0x180302b5_39:
            eax38 = a2;
        } else {
            ecx39 = g18045ecc;
            edi40 = VirtualFree;
            ecx41 = reinterpret_cast<void**>((reinterpret_cast<unsigned char>(ecx39) << 15) + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax37 + 12)));
            edi40(ecx41, 0x8000, 0x4000);
            ecx42 = g18045ecc;
            eax43 = g18045ed4;
            *reinterpret_cast<void***>(eax43 + 8) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax43 + 8)) | 0x80000000 >> *reinterpret_cast<signed char*>(&ecx42));
            eax44 = g18045ed4;
            ecx45 = g18045ecc;
            *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(*reinterpret_cast<void***>(eax44 + 16) + reinterpret_cast<unsigned char>(ecx45) * 4) + 0xc4) = 0;
            eax46 = g18045ed4;
            *reinterpret_cast<signed char*>(*reinterpret_cast<void***>(eax46 + 16) + 67) = reinterpret_cast<signed char>(*reinterpret_cast<signed char*>(*reinterpret_cast<void***>(eax46 + 16) + 67) - 1);
            eax47 = g18045ed4;
            if (!*reinterpret_cast<signed char*>(*reinterpret_cast<void***>(eax47 + 16) + 67)) {
                *reinterpret_cast<void***>(eax47 + 4) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax47 + 4)) & 0xfffffffe);
                eax47 = g18045ed4;
            }
            if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax47 + 8) == 0xffffffff)) 
                goto addr_0x180302b5_39; else 
                goto addr_0x18030249_43;
        }
    }
    addr_0x180302b8_44:
    g18045ed4 = eax38;
    g18045ecc = esi8;
    goto addr_0x180302c3_37;
    addr_0x18030249_43:
    v48 = *reinterpret_cast<void***>(eax47 + 12);
    edi40(v48, 0, 0x8000, ecx41, 0x8000, 0x4000);
    eax49 = g18045ed4;
    v50 = *reinterpret_cast<void***>(eax49 + 16);
    v51 = g18046f0c;
    HeapFree(v51, 0, v50, v48, 0, 0x8000, ecx41, 0x8000, 0x4000);
    eax52 = g18045ed8;
    edx53 = g18045edc;
    eax54 = g18045ed4;
    fun_1802b920(eax54, eax54 + 20, (eax52 + eax52 * 4 << 2) - reinterpret_cast<unsigned char>(eax54) + reinterpret_cast<unsigned char>(edx53) + 0xffffffec, v51, 0, v50, v48, 0, 0x8000, ecx41, 0x8000, 0x4000);
    eax38 = a2;
    --g18045ed8;
    below_or_equal55 = reinterpret_cast<unsigned char>(eax38) <= reinterpret_cast<unsigned char>(g18045ed4);
    if (!below_or_equal55) {
        eax38 = eax38 - 20;
    }
    ecx56 = g18045edc;
    g18045ed0 = ecx56;
    goto addr_0x180302b8_44;
}

void** g18044b60 = reinterpret_cast<void**>(0xf8);

void** fun_180302c8(void** ecx, void** a2, void** a3);

int32_t HeapAlloc = 0x3620e;

void** fun_1802ca91(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** esi6;
    int1_t below_or_equal7;
    void** edi8;
    void** esi9;
    void** eax10;
    void** v11;

    esi6 = a2;
    below_or_equal7 = reinterpret_cast<unsigned char>(esi6) <= reinterpret_cast<unsigned char>(g18044b60);
    if (!below_or_equal7 || (fun_1802e8ff(ecx, 9, edi8, esi9, __return_address(), a2, a3, a4, a5), eax10 = fun_180302c8(ecx, esi6, 9), fun_1802e960(ecx, 9, esi6, 9, edi8, esi9), eax10 == 0)) {
        if (!esi6) {
            esi6 = reinterpret_cast<void**>(1);
        }
        v11 = g18046f0c;
        HeapAlloc(v11, 0, reinterpret_cast<uint32_t>(esi6 + 15) & 0xfffffff0);
    }
    goto __return_address();
}

int32_t g18045b30 = 0;

int32_t fun_1803077d(void** ecx) {
    int32_t eax2;
    int32_t eax3;

    eax2 = g18045b30;
    if (!eax2 || (eax3 = reinterpret_cast<int32_t>(eax2()), eax3 == 0)) {
        return 0;
    } else {
        return 1;
    }
}

void** fun_18030682(uint32_t ecx, void** a2);

struct s213 {
    void** f0;
    signed char[131] pad132;
    uint32_t f132;
};

struct s214 {
    void* f0;
    struct s214* f4;
    struct s214* f8;
};

struct s215 {
    uint32_t f0;
    void** f4;
};

void** fun_180305d1();

void** fun_180302c8(void** ecx, void** a2, void** a3) {
    uint32_t eax4;
    void** edx5;
    void** edi6;
    void** v7;
    void* ecx8;
    void* v9;
    uint32_t ecx10;
    uint32_t esi11;
    uint32_t v12;
    uint32_t v13;
    void** eax14;
    void** ebx15;
    void** v16;
    int1_t zf17;
    int1_t zf18;
    void** eax19;
    void** eax20;
    void** edx21;
    void** v22;
    uint32_t edx23;
    uint32_t esi24;
    struct s213* ecx25;
    uint32_t edx26;
    void** eax27;
    int1_t zf28;
    void* edi29;
    void** v30;
    uint32_t ecx31;
    uint32_t ecx32;
    struct s214* edx33;
    void* ecx34;
    void* esi35;
    uint32_t ecx36;
    signed char* edi37;
    uint32_t* ecx38;
    uint32_t ebx39;
    int1_t zf40;
    void* ecx41;
    signed char* edi42;
    uint32_t ebx43;
    struct s214* ecx44;
    signed char cl45;
    uint32_t ecx46;
    uint32_t* edi47;
    uint32_t ecx48;
    void* ecx49;
    void* ecx50;
    struct s215* edx51;
    uint32_t ecx52;
    int1_t zf53;
    int1_t zf54;
    int1_t zf55;
    void** eax56;

    eax4 = g18045ed8;
    edx5 = g18045edc;
    edi6 = edx5 + (eax4 + eax4 * 4) * 4;
    v7 = edi6;
    ecx8 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(a2 + 23) & 0xfffffff0);
    v9 = ecx8;
    ecx10 = (reinterpret_cast<int32_t>(ecx8) >> 4) - 1;
    if (reinterpret_cast<int32_t>(ecx10) >= reinterpret_cast<int32_t>(32)) {
        ecx10 = ecx10 + 0xffffffe0;
        esi11 = 0;
        v12 = 0;
        v13 = 0xffffffff >> *reinterpret_cast<signed char*>(&ecx10);
    } else {
        esi11 = 0xffffffff >> *reinterpret_cast<signed char*>(&ecx10);
        v13 = 0xffffffff;
        v12 = esi11;
    }
    eax14 = g18045ed0;
    ebx15 = eax14;
    v16 = ebx15;
    if (reinterpret_cast<unsigned char>(ebx15) < reinterpret_cast<unsigned char>(edi6)) {
        do {
            ecx10 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx15 + 4)) & v13 | reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx15)) & esi11;
            if (ecx10) 
                break;
            ebx15 = ebx15 + 20;
            v16 = ebx15;
        } while (reinterpret_cast<unsigned char>(ebx15) < reinterpret_cast<unsigned char>(v7));
    }
    if (ebx15 != v7) 
        goto addr_0x180303bd_8;
    ebx15 = edx5;
    while (zf17 = ebx15 == eax14, v16 = ebx15, reinterpret_cast<unsigned char>(ebx15) < reinterpret_cast<unsigned char>(eax14)) {
        ecx10 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx15 + 4)) & v13 | reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx15)) & esi11;
        if (ecx10) 
            goto addr_0x18030360_12;
        ebx15 = ebx15 + 20;
    }
    addr_0x18030362_14:
    if (!zf17) 
        goto addr_0x180303bd_8;
    while (zf18 = ebx15 == v7, reinterpret_cast<unsigned char>(ebx15) < reinterpret_cast<unsigned char>(v7)) {
        if (*reinterpret_cast<void***>(ebx15 + 8)) 
            goto addr_0x18030377_17;
        ebx15 = ebx15 + 20;
        v16 = ebx15;
    }
    addr_0x1803037a_19:
    if (!zf18) {
        addr_0x180303a2_20:
        eax19 = fun_18030682(ecx10, ebx15);
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx15 + 16)) = eax19;
        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx15 + 16)) == 0xffffffff)) {
            addr_0x180303bd_8:
            g18045ed0 = ebx15;
            eax20 = *reinterpret_cast<void***>(ebx15 + 16);
            edx21 = *reinterpret_cast<void***>(eax20);
            v22 = edx21;
            if (edx21 == 0xffffffff || !(*reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax20 + reinterpret_cast<unsigned char>(edx21) * 4) + 0xc4) & v13 | *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax20 + reinterpret_cast<unsigned char>(edx21) * 4) + 68) & esi11)) {
                edx23 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax20 + 0xc4)) & v13;
                esi24 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax20 + 68)) & v12;
                v22 = reinterpret_cast<void**>(0);
                ecx25 = reinterpret_cast<struct s213*>(eax20 + 68);
                esi11 = v12;
                if (!(edx23 | esi24)) {
                    do {
                        edx26 = ecx25->f132;
                        ++v22;
                        ecx25 = reinterpret_cast<struct s213*>(reinterpret_cast<uint32_t>(ecx25) + 4);
                    } while (!(edx26 & v13 | esi11 & reinterpret_cast<unsigned char>(ecx25->f0)));
                }
                edx21 = v22;
            }
        } else {
            addr_0x180303b6_24:
            eax27 = reinterpret_cast<void**>(0);
            goto addr_0x180305cc_25;
        }
    } else {
        ebx15 = edx5;
        while (zf28 = ebx15 == eax14, v16 = ebx15, reinterpret_cast<unsigned char>(ebx15) < reinterpret_cast<unsigned char>(eax14)) {
            if (*reinterpret_cast<void***>(ebx15 + 8)) 
                goto addr_0x18030390_29;
            ebx15 = ebx15 + 20;
        }
        goto addr_0x18030392_31;
    }
    edi29 = reinterpret_cast<void*>(0);
    v30 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(eax20 + reinterpret_cast<unsigned char>(edx21) * 0x204) + 0x144);
    ecx31 = *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax20 + reinterpret_cast<unsigned char>(edx21) * 4) + 68) & esi11;
    if (!ecx31) {
        ecx32 = *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax20 + reinterpret_cast<unsigned char>(edx21) * 4) + 0xc4);
        ecx31 = ecx32 & v13;
        edi29 = reinterpret_cast<void*>(32);
    }
    while (reinterpret_cast<int32_t>(ecx31) >= reinterpret_cast<int32_t>(0)) {
        ecx31 = ecx31 << 1;
        edi29 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(edi29) + 1);
    }
    edx33 = *reinterpret_cast<struct s214**>(v30 + reinterpret_cast<uint32_t>(edi29) * 2 + 1);
    ecx34 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(edx33->f0) - reinterpret_cast<uint32_t>(v9));
    esi35 = reinterpret_cast<void*>((reinterpret_cast<int32_t>(ecx34) >> 4) - 1);
    if (reinterpret_cast<int32_t>(esi35) > reinterpret_cast<int32_t>(63)) {
        esi35 = reinterpret_cast<void*>(63);
    }
    if (esi35 == edi29) {
        addr_0x1803057f_39:
        if (ecx34) {
            edx33->f0 = ecx34;
            *reinterpret_cast<void**>(reinterpret_cast<uint32_t>(ecx34) + reinterpret_cast<uint32_t>(edx33) + 0xfffffffc) = ecx34;
        }
    } else {
        if (edx33->f4 == edx33->f8) {
            if (reinterpret_cast<int32_t>(edi29) >= reinterpret_cast<int32_t>(32)) {
                ecx36 = reinterpret_cast<uint32_t>(edi29) + 0xffffffe0;
                edi37 = reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(eax20) + reinterpret_cast<uint32_t>(edi29) + 4);
                ecx38 = reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax20 + reinterpret_cast<unsigned char>(v22) * 4) + 0xc4);
                ebx39 = ~(0x80000000 >> *reinterpret_cast<signed char*>(&ecx36));
                *ecx38 = *ecx38 & ebx39;
                *edi37 = reinterpret_cast<signed char>(*edi37 - 1);
                zf40 = *edi37 == 0;
                if (!zf40) {
                    addr_0x180304d8_44:
                    ebx15 = v16;
                } else {
                    ebx15 = v16;
                    *reinterpret_cast<void***>(ebx15 + 4) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx15 + 4)) & ebx39);
                }
            } else {
                ecx41 = edi29;
                edi42 = reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(eax20) + reinterpret_cast<uint32_t>(edi29) + 4);
                ebx43 = ~(0x80000000 >> *reinterpret_cast<signed char*>(&ecx41));
                *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax20 + reinterpret_cast<unsigned char>(v22) * 4) + 68) = ebx43 & *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax20 + reinterpret_cast<unsigned char>(v22) * 4) + 68);
                *edi42 = reinterpret_cast<signed char>(*edi42 - 1);
                if (*edi42) 
                    goto addr_0x180304d8_44;
                ebx15 = v16;
                *reinterpret_cast<void***>(ebx15) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx15)) & ebx43);
            }
        }
        edx33->f8->f4 = edx33->f4;
        edx33->f4->f8 = edx33->f8;
        if (!ecx34) {
            ecx34 = ecx34;
        } else {
            ecx44 = reinterpret_cast<struct s214*>(v30 + reinterpret_cast<uint32_t>(esi35) * 2);
            edx33->f4 = *reinterpret_cast<struct s214**>(v30 + reinterpret_cast<uint32_t>(esi35) * 2 + 1);
            edx33->f8 = ecx44;
            ecx44->f4 = edx33;
            edx33->f4->f8 = edx33;
            if (edx33->f4 == edx33->f8) {
                cl45 = *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esi35) + reinterpret_cast<unsigned char>(eax20) + 4);
                if (reinterpret_cast<int32_t>(esi35) >= reinterpret_cast<int32_t>(32)) {
                    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esi35) + reinterpret_cast<unsigned char>(eax20) + 4) = reinterpret_cast<signed char>(cl45 + 1);
                    if (!cl45) {
                        ecx46 = reinterpret_cast<uint32_t>(esi35) + 0xffffffe0;
                        *reinterpret_cast<void***>(ebx15 + 4) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx15 + 4)) | 0x80000000 >> *reinterpret_cast<signed char*>(&ecx46));
                    }
                    edi47 = reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax20 + reinterpret_cast<unsigned char>(v22) * 4) + 0xc4);
                    ecx48 = reinterpret_cast<uint32_t>(esi35) + 0xffffffe0;
                    *edi47 = *edi47 | 0x80000000 >> *reinterpret_cast<signed char*>(&ecx48);
                } else {
                    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esi35) + reinterpret_cast<unsigned char>(eax20) + 4) = reinterpret_cast<signed char>(cl45 + 1);
                    if (!cl45) {
                        ecx49 = esi35;
                        *reinterpret_cast<void***>(ebx15) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx15)) | 0x80000000 >> *reinterpret_cast<signed char*>(&ecx49));
                    }
                    ecx50 = esi35;
                    *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax20 + reinterpret_cast<unsigned char>(v22) * 4) + 68) = *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax20 + reinterpret_cast<unsigned char>(v22) * 4) + 68) | 0x80000000 >> *reinterpret_cast<signed char*>(&ecx50);
                }
            }
            ecx34 = ecx34;
            goto addr_0x1803057f_39;
        }
    }
    edx51 = reinterpret_cast<struct s215*>(reinterpret_cast<uint32_t>(edx33) + reinterpret_cast<uint32_t>(ecx34));
    ecx52 = reinterpret_cast<uint32_t>(v9) + 1;
    edx51->f0 = ecx52;
    *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(edx51) + reinterpret_cast<uint32_t>(v9) + 0xfffffffc) = ecx52;
    zf53 = *v30 == 0;
    *v30 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(*v30) + 1);
    if (zf53 && ((zf54 = ebx15 == g18045ed4, zf54) && (zf55 = v22 == g18045ecc, zf55))) {
        g18045ed4 = reinterpret_cast<void**>(0);
    }
    *reinterpret_cast<void***>(eax20) = v22;
    eax27 = reinterpret_cast<void**>(&edx51->f4);
    addr_0x180305cc_25:
    return eax27;
    addr_0x18030392_31:
    if (!zf28) 
        goto addr_0x180303a2_20;
    eax56 = fun_180305d1();
    ebx15 = eax56;
    v16 = ebx15;
    if (!ebx15) 
        goto addr_0x180303b6_24; else 
        goto addr_0x180303a2_20;
    addr_0x18030390_29:
    zf28 = ebx15 == eax14;
    goto addr_0x18030392_31;
    addr_0x18030377_17:
    zf18 = ebx15 == v7;
    goto addr_0x1803037a_19;
    addr_0x18030360_12:
    zf17 = ebx15 == eax14;
    goto addr_0x18030362_14;
}

uint32_t fun_180309cc(void** a1) {
    int1_t cf2;
    uint32_t eax3;
    uint32_t eax4;

    cf2 = reinterpret_cast<unsigned char>(a1) < reinterpret_cast<unsigned char>(g18047020);
    if (cf2) {
        eax3 = reinterpret_cast<unsigned char>(a1) & 31;
        eax4 = eax3 + eax3 * 8;
        *reinterpret_cast<signed char*>(&eax4) = *reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(*reinterpret_cast<void**>((reinterpret_cast<signed char>(a1) >> 5) * 4 + 0x18046f20)) + eax4 * 4 + 4);
        return eax4 & 64;
    } else {
        return 0;
    }
}

int32_t g18045b28 = 0;

void fun_18030988(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11) {
    void** eax12;
    void** eax13;

    ++g18045b28;
    eax12 = fun_1802ca53(ecx, 0x1000, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    *reinterpret_cast<void***>(a2 + 8) = eax12;
    if (!eax12) {
        *reinterpret_cast<void***>(a2 + 12) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 12)) | 4);
        *reinterpret_cast<void***>(a2 + 8) = a2 + 20;
        *reinterpret_cast<void***>(a2 + 24) = reinterpret_cast<void**>(2);
    } else {
        *reinterpret_cast<void***>(a2 + 12) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 12)) | 8);
        *reinterpret_cast<void***>(a2 + 24) = reinterpret_cast<void**>(0x1000);
    }
    eax13 = *reinterpret_cast<void***>(a2 + 8);
    *reinterpret_cast<void***>(a2 + 4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(a2) = eax13;
    return;
}

void** fun_18030798(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    int1_t cf8;
    uint32_t eax9;
    void** esi10;
    void** eax11;
    void** eax12;
    void** edi13;
    void** eax14;

    cf8 = reinterpret_cast<unsigned char>(a2) < reinterpret_cast<unsigned char>(g18047020);
    if (!cf8 || (eax9 = reinterpret_cast<unsigned char>(a2) & 31, ecx = *reinterpret_cast<void***>((reinterpret_cast<signed char>(a2) >> 5) * 4 + 0x18046f20), (*reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(ecx + (eax9 + eax9 * 8) * 4) + 4) & 1) == 0)) {
        eax11 = fun_1802dfa3(ecx, esi10, __return_address(), a2, a3, a4, a5);
        *reinterpret_cast<void***>(eax11) = reinterpret_cast<void**>(9);
        eax12 = fun_1802dfac(ecx, esi10, __return_address(), a2, a3, a4, a5, a6, a7);
        *reinterpret_cast<void***>(eax12) = reinterpret_cast<void**>(0);
        return 0xffffffff;
    } else {
        fun_1802e5ec(a2, edi13, esi10);
        eax14 = fun_180307fd(ecx, a2, a2, a3, a2);
        fun_1802e64b(ecx, a2, a2, a2, a3, a2, edi13, esi10, __return_address());
        return eax14;
    }
}

void** fun_1802e66d(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6) {
    int1_t cf7;
    uint32_t eax8;
    void** ecx9;
    void** esi10;
    void** eax11;
    void** eax12;
    void** edi13;
    void** eax14;

    cf7 = reinterpret_cast<unsigned char>(a1) < reinterpret_cast<unsigned char>(g18047020);
    if (!cf7 || (eax8 = reinterpret_cast<unsigned char>(a1) & 31, ecx9 = *reinterpret_cast<void***>((reinterpret_cast<signed char>(a1) >> 5) * 4 + 0x18046f20), (*reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(ecx9 + (eax8 + eax8 * 8) * 4) + 4) & 1) == 0)) {
        eax11 = fun_1802dfa3(ecx9, esi10, __return_address(), a1, a2, a3, a4);
        *reinterpret_cast<void***>(eax11) = reinterpret_cast<void**>(9);
        eax12 = fun_1802dfac(ecx9, esi10, __return_address(), a1, a2, a3, a4, a5, a6);
        *reinterpret_cast<void***>(eax12) = reinterpret_cast<void**>(0);
        return 0xffffffff;
    } else {
        fun_1802e5ec(a1, edi13, esi10);
        eax14 = fun_1802e6d2(ecx9, a1, a1, a2, a1, edi13, esi10, __return_address(), a1, a2, a3, a4, a5, a6);
        fun_1802e64b(ecx9, a1, a1, a1, a2, a1, edi13, esi10, __return_address());
        return eax14;
    }
}

void** fun_1802d3d6(void** a1) {
    *reinterpret_cast<void***>(a1) = *reinterpret_cast<void***>(a1) + 4;
    return *reinterpret_cast<void***>(*reinterpret_cast<void***>(a1) + 0xfffffffc);
}

void** fun_1802d3f3(void** a1) {
    void** eax2;

    *reinterpret_cast<void***>(a1) = *reinterpret_cast<void***>(a1) + 4;
    eax2 = *reinterpret_cast<void***>(a1);
    eax2 = *reinterpret_cast<void***>(eax2 + 0xfffffffc);
    return eax2;
}

void** fun_18030a4e(void** ecx, void** a2, void** a3, void** a4, void** a5);

void** fun_180309f5(void** ecx, void** a2, void** a3) {
    int32_t edi4;
    void** ebx5;
    int1_t zf6;
    void** edi7;
    void** esi8;
    void** ebx9;
    void** ebp10;

    InterlockedIncrement();
    edi4 = InterlockedDecrement;
    ebx5 = reinterpret_cast<void**>(0);
    zf6 = g18046f04 == 0;
    if (!zf6) {
        edi4(0x18046f08);
        fun_1802e8ff(ecx, 19, 0x18046f08, 0x18046f08, edi7, esi8, ebx9, ebp10, __return_address());
        ecx = reinterpret_cast<void**>(19);
        ebx5 = reinterpret_cast<void**>(1);
    }
    fun_18030a4e(ecx, a2, a3, 0x18046f08, edi7);
    if (!ebx5) {
        edi4(a3, 0x18046f08);
    } else {
        fun_1802e960(a3, 19, 0x18046f08, edi7, esi8, ebx9);
    }
    goto ebp10;
}

void** fun_1802d3e3(void** a1) {
    *reinterpret_cast<void***>(a1) = *reinterpret_cast<void***>(a1) + 8;
    return *reinterpret_cast<void***>(*reinterpret_cast<void***>(a1) + 0xfffffff8);
}

int16_t fun_18030b30(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** ecx6;
    void** ebx7;
    void** eax8;
    uint32_t eax9;
    void** eax10;
    void** edx11;
    uint32_t eax12;

    if (a5) {
        ecx6 = a5;
        ebx7 = a4;
        eax8 = a2;
        do {
            __asm__("rcr ebx, 1");
            __asm__("rcr eax, 1");
            ecx6 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx6) >> 1);
        } while (ecx6);
        eax9 = reinterpret_cast<unsigned char>(eax8) / reinterpret_cast<unsigned char>(ebx7);
        eax10 = reinterpret_cast<void**>(eax9 * reinterpret_cast<unsigned char>(a4));
        edx11 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__intrinsic()) + eax9 * reinterpret_cast<unsigned char>(a5));
        if (__intrinsic()) 
            goto addr_0x18030b8a_5;
        if (reinterpret_cast<unsigned char>(edx11) > reinterpret_cast<unsigned char>(a3)) 
            goto addr_0x18030b8a_5;
        if (reinterpret_cast<unsigned char>(edx11) < reinterpret_cast<unsigned char>(a3)) 
            goto addr_0x18030b92_8;
        if (reinterpret_cast<unsigned char>(eax10) <= reinterpret_cast<unsigned char>(a2)) 
            goto addr_0x18030b92_8;
    } else {
        eax12 = reinterpret_cast<unsigned char>(a2) % reinterpret_cast<unsigned char>(a4);
        goto addr_0x18030ba1_11;
    }
    addr_0x18030b8a_5:
    eax10 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax10) - reinterpret_cast<unsigned char>(a4));
    addr_0x18030b92_8:
    eax12 = -(reinterpret_cast<unsigned char>(eax10) - reinterpret_cast<unsigned char>(a2));
    addr_0x18030ba1_11:
    return *reinterpret_cast<int16_t*>(&eax12);
}

int16_t fun_18030ac0(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** ecx6;
    void** ebx7;
    void** eax8;
    uint32_t eax9;
    uint32_t esi10;
    void** edx11;
    uint32_t eax12;

    if (a5) {
        ecx6 = a5;
        ebx7 = a4;
        eax8 = a2;
        do {
            __asm__("rcr ebx, 1");
            __asm__("rcr eax, 1");
            ecx6 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx6) >> 1);
        } while (ecx6);
        eax9 = reinterpret_cast<unsigned char>(eax8) / reinterpret_cast<unsigned char>(ebx7);
        esi10 = eax9;
        edx11 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__intrinsic()) + eax9 * reinterpret_cast<unsigned char>(a5));
        if (__intrinsic()) 
            goto addr_0x18030b1e_5;
        if (reinterpret_cast<unsigned char>(edx11) > reinterpret_cast<unsigned char>(a3)) 
            goto addr_0x18030b1e_5;
        if (reinterpret_cast<unsigned char>(edx11) < reinterpret_cast<unsigned char>(a3)) 
            goto addr_0x18030b1f_8;
        if (reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(a4) * esi10) <= reinterpret_cast<unsigned char>(a2)) 
            goto addr_0x18030b1f_8;
    } else {
        eax12 = reinterpret_cast<unsigned char>(a2) / reinterpret_cast<unsigned char>(a4);
        goto addr_0x18030b23_11;
    }
    addr_0x18030b1e_5:
    --esi10;
    addr_0x18030b1f_8:
    eax12 = esi10;
    addr_0x18030b23_11:
    return *reinterpret_cast<int16_t*>(&eax12);
}

void fun_1802d36d(void** ecx, int32_t a2, void** a3, void** a4, void** a5) {
    void** v6;
    void** edi7;
    void** esi8;
    void** eax9;

    v6 = reinterpret_cast<void**>(__return_address());
    edi7 = a3 - 1;
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(a3) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(a3 == 0))) {
        esi8 = a5;
        do {
            fun_1802d338(v6, a3, esi8);
            if (*reinterpret_cast<void***>(esi8) == 0xffffffff) 
                break;
            eax9 = edi7;
            --edi7;
        } while (!reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax9) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax9 == 0)));
    }
    return;
}

void fun_1802d39e(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** ebx6;
    void** edi7;
    void** esi8;
    void** eax9;
    void** eax10;

    ebx6 = a3 - 1;
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(a3) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(a3 == 0))) {
        edi7 = a5;
        esi8 = a2;
        do {
            eax9 = reinterpret_cast<void**>(static_cast<int32_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi8))));
            ++esi8;
            fun_1802d338(eax9, a3, edi7);
            if (*reinterpret_cast<void***>(edi7) == 0xffffffff) 
                break;
            eax10 = ebx6;
            --ebx6;
        } while (!reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax10) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax10 == 0)));
    }
    return;
}

void fun_1802d505(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** esi6;
    void** eax7;

    esi6 = a2;
    while (reinterpret_cast<unsigned char>(esi6) < reinterpret_cast<unsigned char>(a3)) {
        eax7 = *reinterpret_cast<void***>(esi6);
        if (eax7) {
            eax7();
        }
        esi6 = esi6 + 4;
    }
    return;
}

void** fun_1802d42e(void** ecx) {
    void** eax2;

    eax2 = fun_1802d44e(ecx, __return_address(), 1, 0, __return_address());
    return eax2;
}

void** fun_1802d4fc(void** ecx, void** a2, void** a3, void** a4) {
    void** eax5;

    eax5 = fun_1802e960(ecx, 13, __return_address(), a2, a3, a4);
    return eax5;
}

void** g18045b2c = reinterpret_cast<void**>(0);

void** fun_1802dfb5(void** ecx, void** a2, void** a3, void** a4) {
    void** v5;
    void** v6;
    void** ebx7;
    void** v8;
    void** esi9;
    void** v10;
    void** edi11;
    void** esi12;
    void** ebx13;
    void** edi14;
    int1_t below_or_equal15;
    void** eax16;
    void** v17;
    void** eax18;
    int1_t zf19;
    int32_t eax20;
    void** eax21;

    v5 = reinterpret_cast<void**>(__return_address());
    v6 = ebx7;
    v8 = esi9;
    v10 = edi11;
    esi12 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a2) * reinterpret_cast<unsigned char>(a3));
    ebx13 = esi12;
    if (reinterpret_cast<unsigned char>(esi12) <= reinterpret_cast<unsigned char>(0xffffffe0)) {
        if (!esi12) {
            esi12 = reinterpret_cast<void**>(1);
        }
        esi12 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esi12 + 15) & 0xfffffff0);
    }
    while (1) {
        edi14 = reinterpret_cast<void**>(0);
        if (reinterpret_cast<unsigned char>(esi12) <= reinterpret_cast<unsigned char>(0xffffffe0)) {
            below_or_equal15 = reinterpret_cast<unsigned char>(ebx13) <= reinterpret_cast<unsigned char>(g18044b60);
            if (!below_or_equal15) 
                goto addr_0x1802e001_7;
            fun_1802e8ff(ecx, 9, v10, v8, v6, v5, a2, a3, a4);
            eax16 = fun_180302c8(ecx, ebx13, 9);
            edi14 = eax16;
            fun_1802e960(ecx, 9, ebx13, 9, v10, v8);
            if (edi14) 
                goto addr_0x1802e02c_9;
            addr_0x1802e001_7:
            v17 = g18046f0c;
            eax18 = reinterpret_cast<void**>(HeapAlloc(ecx, v17, 8, esi12));
            edi14 = eax18;
            if (edi14) 
                break;
        }
        zf19 = g18045b2c == 0;
        if (zf19) 
            break;
        eax20 = fun_1803077d(ecx);
        ecx = esi12;
        if (!eax20) 
            goto addr_0x1802e03e_12;
    }
    addr_0x1802e038_14:
    eax21 = edi14;
    addr_0x1802e03a_15:
    return eax21;
    addr_0x1802e03e_12:
    eax21 = reinterpret_cast<void**>(0);
    goto addr_0x1802e03a_15;
    addr_0x1802e02c_9:
    fun_1802fe50(ecx, edi14, 0, ebx13, v10, v8, v6, v5, a2, a3);
    goto addr_0x1802e038_14;
}

void** fun_1802ca53(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13) {
    void** v14;
    void** eax15;

    v14 = g18045b2c;
    eax15 = fun_1802ca65(__return_address(), v14);
    return eax15;
}

void** fun_1802d867() {
    void** v1;
    void** v2;
    void** ebx3;
    void** v4;
    void** esi5;
    void** v6;
    void** edi7;
    void*** esi8;
    void** eax9;
    void** edi10;
    void** ebx11;
    void** ecx12;
    void** v13;

    v1 = reinterpret_cast<void**>(__return_address());
    v2 = ebx3;
    v4 = esi5;
    v6 = edi7;
    esi8 = reinterpret_cast<void***>(0x18046f20);
    do {
        eax9 = *esi8;
        if (eax9) {
            edi10 = eax9;
            if (reinterpret_cast<unsigned char>(edi10) < reinterpret_cast<unsigned char>(eax9 + 0x480)) {
                ebx11 = edi10 + 12;
                do {
                    if (*reinterpret_cast<void***>(ebx11 + 0xfffffffc)) {
                        DeleteCriticalSection(ecx12, ebx11);
                    }
                    edi10 = edi10 + 36;
                    ebx11 = ebx11 + 36;
                } while (reinterpret_cast<unsigned char>(edi10) < reinterpret_cast<unsigned char>(*esi8 + 0x480));
            }
            v13 = *esi8;
            eax9 = fun_1802ca0b(ecx12, v13, v6, v4, v2, v1);
            *esi8 = reinterpret_cast<void**>(0);
            ecx12 = v13;
        }
        esi8 = esi8 + 4;
    } while (reinterpret_cast<int32_t>(esi8) < 0x18047020);
    return eax9;
}

void** g18047028;

uint32_t fun_18030f7d(void** ecx, void** a2, void** a3, void** a4);

void** g18045964 = reinterpret_cast<void**>(0);

int32_t g18047024;

void** fun_1802d8bb(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8) {
    void** v9;
    void** v10;
    void** ebx11;
    int1_t zf12;
    void** v13;
    void** esi14;
    void** v15;
    void** edi16;
    void** esi17;
    int32_t edi18;
    void** eax19;
    void** eax20;
    void** esi21;
    void** ecx22;
    void** edi23;
    void** v24;
    void** ebp25;
    void** eax26;
    void** ebp27;
    void** eax28;
    void** ecx29;
    void** v30;
    void** v31;
    void** eax32;

    v9 = reinterpret_cast<void**>(__return_address());
    v10 = ebx11;
    zf12 = g18047028 == 0;
    v13 = esi14;
    v15 = edi16;
    if (zf12) {
        fun_18030f7d(ecx, v15, v13, v10);
    }
    esi17 = g18045934;
    edi18 = 0;
    while (*reinterpret_cast<void***>(esi17)) {
        if (*reinterpret_cast<void***>(esi17) != 61) {
            ++edi18;
        }
        eax19 = fun_1802feb0(ecx, esi17, v15, v13, v10, v9);
        ecx = esi17;
        esi17 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi17) + reinterpret_cast<unsigned char>(eax19) + 1);
    }
    eax20 = fun_1802ca53(ecx, edi18 * 4 + 4, v15, v13, v10, v9, a2, a3, a4, a5, a6, a7, a8);
    esi21 = eax20;
    ecx22 = reinterpret_cast<void**>(edi18 * 4 + 4);
    g18045964 = esi21;
    if (!esi21) {
        fun_1802b7a4(ecx22);
        ecx22 = reinterpret_cast<void**>(9);
    }
    edi23 = g18045934;
    if (*reinterpret_cast<void***>(edi23)) {
        v24 = ebp25;
        do {
            eax26 = fun_1802feb0(ecx22, edi23, v24, v15, v13, v10);
            ecx22 = edi23;
            ebp27 = eax26 + 1;
            if (*reinterpret_cast<void***>(edi23) != 61) {
                eax28 = fun_1802ca53(ecx22, ebp27, v24, v15, v13, v10, v9, a2, a3, a4, a5, a6, a7);
                ecx29 = ebp27;
                *reinterpret_cast<void***>(esi21) = eax28;
                if (!eax28) {
                    fun_1802b7a4(ecx29);
                    ecx29 = reinterpret_cast<void**>(9);
                }
                v30 = *reinterpret_cast<void***>(esi21);
                fun_1802fd60(ecx29, v30, edi23, v24, v15);
                esi21 = esi21 + 4;
                ecx22 = edi23;
            }
            edi23 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi23) + reinterpret_cast<unsigned char>(ebp27));
        } while (*reinterpret_cast<void***>(edi23));
    }
    v31 = g18045934;
    eax32 = fun_1802ca0b(ecx22, v31, v15, v13, v10, v9);
    g18045934 = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi21) = reinterpret_cast<void**>(0);
    g18047024 = 1;
    return eax32;
}

uint32_t fun_18030ba5(void** ecx, void** a2);

uint32_t fun_18030f7d(void** ecx, void** a2, void** a3, void** a4) {
    int1_t zf5;
    uint32_t eax6;

    zf5 = g18047028 == 0;
    if (zf5) {
        eax6 = fun_18030ba5(ecx, 0xfd);
        g18047028 = reinterpret_cast<void**>(1);
    }
    return eax6;
}

void fun_1802da0d(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** ecx7;
    void** esi8;
    void** edi9;
    void** eax10;
    void** dl11;
    uint32_t v12;
    uint32_t v13;
    uint32_t ebx14;
    uint32_t edx15;
    uint32_t ebx16;

    ecx7 = a6;
    *reinterpret_cast<void***>(ecx7) = reinterpret_cast<void**>(0);
    esi8 = a4;
    edi9 = a3;
    *reinterpret_cast<void***>(a5) = reinterpret_cast<void**>(1);
    eax10 = a2;
    if (edi9) {
        *reinterpret_cast<void***>(edi9) = esi8;
        edi9 = edi9 + 4;
        a3 = edi9;
    }
    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax10) == 34)) {
        do {
            *reinterpret_cast<void***>(ecx7) = *reinterpret_cast<void***>(ecx7) + 1;
            if (esi8) {
                *reinterpret_cast<void***>(esi8) = *reinterpret_cast<void***>(eax10);
                ++esi8;
            }
            dl11 = *reinterpret_cast<void***>(eax10);
            ++eax10;
            if (*reinterpret_cast<unsigned char*>(dl11 + 0x18045dc1) & 4) {
                *reinterpret_cast<void***>(ecx7) = *reinterpret_cast<void***>(ecx7) + 1;
                if (esi8) {
                    *reinterpret_cast<void***>(esi8) = *reinterpret_cast<void***>(eax10);
                    ++esi8;
                }
                ++eax10;
            }
            if (dl11 == 32) 
                break;
            if (!dl11) 
                goto addr_0x1802dab8_12;
        } while (!reinterpret_cast<int1_t>(dl11 == 9));
        if (dl11) {
            if (esi8) {
                *reinterpret_cast<void***>(esi8 + 0xffffffff) = reinterpret_cast<void**>(0);
            }
        } else {
            addr_0x1802dab8_12:
            --eax10;
        }
    } else {
        while ((++eax10, *reinterpret_cast<void***>(eax10 + 1) != 34) && *reinterpret_cast<void***>(eax10 + 1)) {
            if (*reinterpret_cast<unsigned char*>(*reinterpret_cast<void***>(eax10 + 1) + 0x18045dc1) & 4 && (*reinterpret_cast<void***>(ecx7) = *reinterpret_cast<void***>(ecx7) + 1, !!esi8)) {
                *reinterpret_cast<void***>(esi8) = *reinterpret_cast<void***>(eax10);
                ++esi8;
                ++eax10;
            }
            *reinterpret_cast<void***>(ecx7) = *reinterpret_cast<void***>(ecx7) + 1;
            if (!esi8) 
                continue;
            *reinterpret_cast<void***>(esi8) = *reinterpret_cast<void***>(eax10);
            ++esi8;
        }
        *reinterpret_cast<void***>(ecx7) = *reinterpret_cast<void***>(ecx7) + 1;
        if (!esi8) 
            goto addr_0x1802da78_23; else 
            goto addr_0x1802da74_24;
    }
    addr_0x1802dac3_25:
    v12 = 0;
    while (*reinterpret_cast<void***>(eax10)) {
        while (*reinterpret_cast<void***>(eax10) == 32 || reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax10) == 9)) {
            ++eax10;
        }
        if (!*reinterpret_cast<void***>(eax10)) 
            break;
        if (edi9) {
            *reinterpret_cast<void***>(edi9) = esi8;
            edi9 = edi9 + 4;
            a3 = edi9;
        }
        *reinterpret_cast<void***>(a5) = *reinterpret_cast<void***>(a5) + 1;
        while (1) {
            v13 = 1;
            ebx14 = 0;
            while (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax10) == 92)) {
                ++eax10;
                ++ebx14;
            }
            if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax10) == 34)) {
                if (!(*reinterpret_cast<unsigned char*>(&ebx14) & 1)) {
                    if (!v12 || !reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax10 + 1) == 34)) {
                        v13 = 0;
                    } else {
                        ++eax10;
                    }
                    edi9 = a3;
                    edx15 = 0;
                    *reinterpret_cast<unsigned char*>(&edx15) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(v12 == 0));
                    v12 = edx15;
                }
                ebx14 = ebx14 >> 1;
            }
            if (ebx14) {
                ebx16 = ebx14 - 1 + 1;
                do {
                    if (esi8) {
                        *reinterpret_cast<void***>(esi8) = reinterpret_cast<void**>(92);
                        ++esi8;
                    }
                    *reinterpret_cast<void***>(ecx7) = *reinterpret_cast<void***>(ecx7) + 1;
                    --ebx16;
                } while (ebx16);
            }
            if (!*reinterpret_cast<void***>(eax10)) 
                break;
            if (v12) 
                goto addr_0x1802db67_50;
            if (*reinterpret_cast<void***>(eax10) == 32) 
                break;
            if (*reinterpret_cast<void***>(eax10) == 9) 
                break;
            addr_0x1802db67_50:
            if (v13) {
                if (!esi8) {
                    if (*reinterpret_cast<unsigned char*>(*reinterpret_cast<void***>(eax10) + 0x18045dc1) & 4) {
                        ++eax10;
                        *reinterpret_cast<void***>(ecx7) = *reinterpret_cast<void***>(ecx7) + 1;
                    }
                } else {
                    if (*reinterpret_cast<unsigned char*>(*reinterpret_cast<void***>(eax10) + 0x18045dc1) & 4) {
                        *reinterpret_cast<void***>(esi8) = *reinterpret_cast<void***>(eax10);
                        ++esi8;
                        ++eax10;
                        *reinterpret_cast<void***>(ecx7) = *reinterpret_cast<void***>(ecx7) + 1;
                    }
                    *reinterpret_cast<void***>(esi8) = *reinterpret_cast<void***>(eax10);
                    ++esi8;
                }
                *reinterpret_cast<void***>(ecx7) = *reinterpret_cast<void***>(ecx7) + 1;
            }
            ++eax10;
        }
        if (esi8) {
            *reinterpret_cast<void***>(esi8) = reinterpret_cast<void**>(0);
            ++esi8;
        }
        *reinterpret_cast<void***>(ecx7) = *reinterpret_cast<void***>(ecx7) + 1;
    }
    if (edi9) {
        *reinterpret_cast<void***>(edi9) = reinterpret_cast<void**>(0);
    }
    *reinterpret_cast<void***>(a5) = *reinterpret_cast<void***>(a5) + 1;
    return;
    addr_0x1802da78_23:
    if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax10) == 34)) {
        ++eax10;
        goto addr_0x1802dac3_25;
    }
    addr_0x1802da74_24:
    *reinterpret_cast<void***>(esi8) = reinterpret_cast<void**>(0);
    ++esi8;
    goto addr_0x1802da78_23;
}

void** g18045a8c = reinterpret_cast<void**>(0);

int32_t GetEnvironmentStringsW = 0x36330;

int32_t GetEnvironmentStrings = 0x36318;

void** fun_1802f210(void** ecx, void** a2, void** a3, void** a4);

int32_t FreeEnvironmentStringsA = 0x362ce;

int32_t WideCharToMultiByte = 0x36302;

int32_t FreeEnvironmentStringsW = 0x362e8;

void** fun_1802dbc1(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** v6;
    void** v7;
    void** v8;
    void** eax9;
    void** v10;
    void** ebx11;
    void** v12;
    void** ebp13;
    int32_t ebp14;
    void** v15;
    void** esi16;
    void** v17;
    void** edi18;
    void** ebx19;
    void** esi20;
    void** edi21;
    void** eax22;
    void** eax23;
    void** eax24;
    void** eax25;
    void** eax26;
    void** eax27;
    void** esi28;
    void** eax29;
    void** eax30;
    int32_t edi31;
    void** v32;
    void** eax33;
    void** eax34;
    void** v35;
    int32_t eax36;

    v6 = reinterpret_cast<void**>(__return_address());
    v7 = ecx;
    v8 = ecx;
    eax9 = g18045a8c;
    v10 = ebx11;
    v12 = ebp13;
    ebp14 = GetEnvironmentStringsW;
    v15 = esi16;
    v17 = edi18;
    ebx19 = reinterpret_cast<void**>(0);
    esi20 = reinterpret_cast<void**>(0);
    edi21 = reinterpret_cast<void**>(0);
    if (eax9) {
        if (!reinterpret_cast<int1_t>(eax9 == 1)) {
            if (!reinterpret_cast<int1_t>(eax9 == 2)) 
                goto addr_0x1802dcea_4;
        } else {
            addr_0x1802dc18_5:
            if (esi20) 
                goto addr_0x1802dc28_6;
            eax22 = reinterpret_cast<void**>(ebp14());
            esi20 = eax22;
            if (!esi20) 
                goto addr_0x1802dcea_4; else 
                goto addr_0x1802dc28_6;
        }
    } else {
        eax23 = reinterpret_cast<void**>(ebp14());
        esi20 = eax23;
        if (!esi20) {
            eax24 = reinterpret_cast<void**>(GetEnvironmentStrings());
            edi21 = eax24;
            if (!edi21) 
                goto addr_0x1802dcea_4;
            g18045a8c = reinterpret_cast<void**>(2);
        } else {
            g18045a8c = reinterpret_cast<void**>(1);
            goto addr_0x1802dc18_5;
        }
    }
    if (edi21 || (eax25 = reinterpret_cast<void**>(GetEnvironmentStrings()), edi21 = eax25, !!edi21)) {
        eax26 = edi21;
        if (*reinterpret_cast<void***>(edi21)) {
            addr_0x1802dcb4_14:
            ++eax26;
            if (*reinterpret_cast<void***>(eax26)) 
                goto addr_0x1802dcb4_14;
            ++eax26;
            if (*reinterpret_cast<void***>(eax26)) 
                goto addr_0x1802dcb4_14;
        }
        eax27 = fun_1802ca53(ecx, reinterpret_cast<unsigned char>(eax26) - reinterpret_cast<unsigned char>(edi21) + 1, v17, v15, v12, v10, v8, v7, v6, a2, a3, a4, a5);
        esi28 = eax27;
        if (esi28) {
            fun_1802f210(reinterpret_cast<unsigned char>(eax26) - reinterpret_cast<unsigned char>(edi21) + 1, esi28, edi21, reinterpret_cast<unsigned char>(eax26) - reinterpret_cast<unsigned char>(edi21) + 1);
        } else {
            esi28 = reinterpret_cast<void**>(0);
        }
        FreeEnvironmentStringsA(reinterpret_cast<unsigned char>(eax26) - reinterpret_cast<unsigned char>(edi21) + 1, edi21);
        eax29 = esi28;
    } else {
        addr_0x1802dcea_4:
        eax29 = reinterpret_cast<void**>(0);
    }
    addr_0x1802dcec_20:
    return eax29;
    addr_0x1802dc28_6:
    eax30 = esi20;
    if (*reinterpret_cast<void***>(esi20)) {
        addr_0x1802dc2f_21:
        eax30 = eax30 + 1 + 1;
        if (*reinterpret_cast<void***>(eax30)) 
            goto addr_0x1802dc2f_21;
        eax30 = eax30 + 1 + 1;
        if (*reinterpret_cast<void***>(eax30)) 
            goto addr_0x1802dc2f_21;
    }
    edi31 = WideCharToMultiByte;
    v32 = reinterpret_cast<void**>(0);
    eax33 = reinterpret_cast<void**>(edi31(0, 0, esi20, (reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax30) - reinterpret_cast<unsigned char>(esi20)) >> 1) + 1, 0, 0, 0, 0));
    if (eax33 && (eax34 = fun_1802ca53(ecx, eax33, 0, 0, esi20, (reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax30) - reinterpret_cast<unsigned char>(esi20)) >> 1) + 1, 0, 0, 0, 0, v17, v15, v12), ecx = eax33, v32 = eax34, !!eax34)) {
        v35 = eax34;
        eax36 = reinterpret_cast<int32_t>(edi31(ecx, 0, 0, esi20));
        if (!eax36) {
            fun_1802ca0b(ecx, v32, 0, 0, esi20, v32);
            ecx = v32;
            v35 = reinterpret_cast<void**>(0);
        }
        ebx19 = v35;
    }
    FreeEnvironmentStringsW(ecx, esi20, 0, 0, esi20, (reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax30) - reinterpret_cast<unsigned char>(esi20)) >> 1) + 1, v32, 0, 0, 0);
    eax29 = ebx19;
    goto addr_0x1802dcec_20;
}

uint32_t g18045ec8 = 0;

int32_t fun_1802ff34() {
    void** v1;
    void** eax2;

    v1 = g18046f0c;
    eax2 = reinterpret_cast<void**>(HeapAlloc());
    g18045edc = eax2;
    if (eax2) {
        g18045ed4 = reinterpret_cast<void**>(0);
        g18045ed8 = 0;
        g18045ed0 = eax2;
        g18045ec8 = 16;
        goto v1;
    } else {
        goto v1;
    }
}

int32_t GetStdHandle = 0x362ac;

int32_t WriteFile = 0x36374;

void** fun_1802fd70(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13);

void fun_18030f99(void** ecx, void* a2, int32_t a3, int32_t a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12);

void fun_1802dddd(void** ecx, int32_t a2) {
    void* ebp3;
    int32_t edx4;
    void** ecx5;
    int32_t* eax6;
    uint32_t esi7;
    int32_t eax8;
    int1_t zf9;
    void*** esi10;
    void** v11;
    void** esi12;
    void** v13;
    void** eax14;
    void** v15;
    int32_t eax16;
    int32_t eax17;
    void** edi18;
    void** edi19;
    void** eax20;
    void** eax21;
    void** v22;
    void** v23;
    void** v24;
    void** v25;
    void** v26;

    ebp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    edx4 = a2;
    ecx5 = reinterpret_cast<void**>(0);
    eax6 = reinterpret_cast<int32_t*>(0x18044230);
    do {
        if (edx4 == *eax6) 
            break;
        eax6 = eax6 + 2;
        ++ecx5;
    } while (reinterpret_cast<int32_t>(eax6) < 0x180442c0);
    esi7 = reinterpret_cast<unsigned char>(ecx5) << 3;
    if (edx4 == *reinterpret_cast<int32_t*>(esi7 + 0x18044230)) {
        eax8 = g1804593c;
        if (eax8 == 1 || !eax8 && (zf9 = g18045940 == 1, zf9)) {
            esi10 = reinterpret_cast<void***>(esi7 + 0x18044234);
            v11 = *esi10;
            eax14 = fun_1802feb0(ecx5, v11, reinterpret_cast<int32_t>(ebp3) + 8, 0, esi12, v13);
            v15 = *esi10;
            eax16 = reinterpret_cast<int32_t>(GetStdHandle(v11, 0xf4, v15, eax14, reinterpret_cast<int32_t>(ebp3) + 8, 0));
            WriteFile(v11, eax16, 0xf4, v15, eax14, reinterpret_cast<int32_t>(ebp3) + 8, 0);
        } else {
            if (edx4 != 0xfc) {
                eax17 = reinterpret_cast<int32_t>(GetModuleFileNameA(0, reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, 0x104));
                if (!eax17) {
                    fun_1802fd60(ecx5, reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, 0x18035904, 0, reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, ecx5, reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, 0x18035904, 0, reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c);
                    ecx5 = reinterpret_cast<void**>(0x18035904);
                }
                edi18 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c);
                eax20 = fun_1802feb0(ecx5, reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, edi19, 0, reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, 0x104);
                if (reinterpret_cast<unsigned char>(eax20 + 1) > reinterpret_cast<unsigned char>(60)) {
                    eax21 = fun_1802feb0(reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, edi19, 0, reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, 0x104);
                    edi18 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax21) + (reinterpret_cast<int32_t>(ebp3) - 0x1a4 - 59));
                    fun_1802b530(reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, edi18, 0x18035900, 3, reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c);
                }
                fun_1802fd60(reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, reinterpret_cast<int32_t>(ebp3) + 0xffffff60, 0x180358e4, edi19, 0, reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, reinterpret_cast<int32_t>(ebp3) + 0xffffff60, 0x180358e4, edi19, 0);
                fun_1802fd70(reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, reinterpret_cast<int32_t>(ebp3) + 0xffffff60, edi18, reinterpret_cast<int32_t>(ebp3) + 0xffffff60, 0x180358e4, edi19, 0, reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, 0x104, esi12, v22, v23, v24);
                fun_1802fd70(reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, reinterpret_cast<int32_t>(ebp3) + 0xffffff60, 0x180358e0, reinterpret_cast<int32_t>(ebp3) + 0xffffff60, edi18, reinterpret_cast<int32_t>(ebp3) + 0xffffff60, 0x180358e4, edi19, 0, reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, 0x104, esi12, v25);
                v26 = *reinterpret_cast<void***>(esi7 + 0x18044234);
                fun_1802fd70(reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, reinterpret_cast<int32_t>(ebp3) + 0xffffff60, v26, reinterpret_cast<int32_t>(ebp3) + 0xffffff60, 0x180358e0, reinterpret_cast<int32_t>(ebp3) + 0xffffff60, edi18, reinterpret_cast<int32_t>(ebp3) + 0xffffff60, 0x180358e4, edi19, 0, reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, 0x104);
                fun_18030f99(reinterpret_cast<int32_t>(ebp3) + 0xfffffe5c, reinterpret_cast<int32_t>(ebp3) - 0xa0, "Microsoft Visual C++ Runtime Library", 0x12010, reinterpret_cast<int32_t>(ebp3) + 0xffffff60, v26, reinterpret_cast<int32_t>(ebp3) + 0xffffff60, 0x180358e0, reinterpret_cast<int32_t>(ebp3) + 0xffffff60, edi18, reinterpret_cast<int32_t>(ebp3) + 0xffffff60, 0x180358e4);
            }
        }
    }
    return;
}

void** fun_1802fd70(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13) {
    void** ecx14;
    void** eax15;
    void** edi16;
    void** ecx17;
    void** edx18;

    ecx14 = a2;
    if (!(reinterpret_cast<unsigned char>(ecx14) & 3)) {
        while (1) {
            addr_0x1802fd8c_2:
            ecx14 = ecx14 + 4;
            if (!((reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx14)) ^ 0xffffffff ^ reinterpret_cast<uint32_t>(*reinterpret_cast<void***>(ecx14) + 0x7efefeff)) & 0x81010100)) 
                continue;
            eax15 = *reinterpret_cast<void***>(ecx14 + 0xfffffffc);
            if (!*reinterpret_cast<signed char*>(&eax15)) 
                break;
            if (!*reinterpret_cast<signed char*>(&eax15 + 1)) 
                goto addr_0x1802fdc9_5;
            if (!(reinterpret_cast<unsigned char>(eax15) & 0xff0000)) 
                goto addr_0x1802fdc4_7;
            if (!(reinterpret_cast<unsigned char>(eax15) & 0xff000000)) 
                goto addr_0x1802fdbf_9;
        }
    } else {
        do {
            ++ecx14;
            if (!*reinterpret_cast<void***>(ecx14)) 
                goto addr_0x1802fdbf_9;
        } while (reinterpret_cast<unsigned char>(ecx14) & 3);
        goto addr_0x1802fd8c_2;
    }
    edi16 = ecx14 + 0xfffffffc;
    addr_0x1802fdd1_14:
    ecx17 = a3;
    if (!(reinterpret_cast<unsigned char>(ecx17) & 3)) {
        while (1) {
            addr_0x1802fdf6_15:
            edx18 = *reinterpret_cast<void***>(ecx17);
            ecx17 = ecx17 + 4;
            if ((reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx17)) ^ 0xffffffff ^ reinterpret_cast<uint32_t>(*reinterpret_cast<void***>(ecx17) + 0x7efefeff)) & 0x81010100) {
                if (!edx18) 
                    break;
                if (!*reinterpret_cast<signed char*>(&edx18 + 1)) 
                    goto addr_0x1802fe3f_18;
                if (!(reinterpret_cast<unsigned char>(edx18) & 0xff0000)) 
                    goto addr_0x1802fe32_20;
                if (!(reinterpret_cast<unsigned char>(edx18) & 0xff000000)) 
                    goto addr_0x1802fe2a_22;
            }
            *reinterpret_cast<void***>(edi16) = edx18;
            edi16 = edi16 + 4;
        }
    } else {
        do {
            edx18 = *reinterpret_cast<void***>(ecx17);
            ++ecx17;
            if (!edx18) 
                break;
            *reinterpret_cast<void***>(edi16) = edx18;
            ++edi16;
        } while (reinterpret_cast<unsigned char>(ecx17) & 3);
        goto addr_0x1802fdef_27;
    }
    *reinterpret_cast<void***>(edi16) = edx18;
    return a2;
    addr_0x1802fe3f_18:
    *reinterpret_cast<void***>(edi16) = edx18;
    return a2;
    addr_0x1802fe32_20:
    *reinterpret_cast<void***>(edi16) = edx18;
    *reinterpret_cast<void***>(edi16 + 2) = reinterpret_cast<void**>(0);
    return a2;
    addr_0x1802fe2a_22:
    *reinterpret_cast<void***>(edi16) = edx18;
    return a2;
    addr_0x1802fdef_27:
    goto addr_0x1802fdf6_15;
    addr_0x1802fdc9_5:
    edi16 = ecx14 + 0xfffffffd;
    goto addr_0x1802fdd1_14;
    addr_0x1802fdc4_7:
    edi16 = ecx14 + 0xfffffffe;
    goto addr_0x1802fdd1_14;
    addr_0x1802fdbf_9:
    edi16 = ecx14 + 0xffffffff;
    goto addr_0x1802fdd1_14;
}

int32_t g18045b38 = 0;

int32_t g18045b3c = 0;

int32_t g18045b40 = 0;

int32_t LoadLibraryA = 0x35fbc;

int32_t GetProcAddress = 0x35faa;

void fun_18030f99(void** ecx, void* a2, int32_t a3, int32_t a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12) {
    int32_t ebx13;
    int1_t zf14;
    int32_t eax15;
    int32_t eax16;
    int32_t eax17;
    int32_t eax18;
    int32_t eax19;
    int32_t esi20;
    int32_t eax21;
    int32_t eax22;
    int32_t eax23;
    int32_t ebx24;

    ebx13 = 0;
    zf14 = g18045b38 == 0;
    if (!zf14) {
        addr_0x18030fe8_2:
        eax15 = g18045b3c;
        if (eax15 && ((eax16 = reinterpret_cast<int32_t>(eax15()), ebx13 = eax16, !!ebx13) && (eax17 = g18045b40, !!eax17))) {
            eax18 = reinterpret_cast<int32_t>(eax17(ebx13));
            ebx13 = eax18;
        }
    } else {
        eax19 = reinterpret_cast<int32_t>(LoadLibraryA());
        if (!eax19 || (esi20 = GetProcAddress, eax21 = reinterpret_cast<int32_t>(esi20(eax19, "MessageBoxA")), g18045b38 = eax21, eax21 == 0)) {
            goto addr_0x1803101a_6;
        } else {
            eax22 = reinterpret_cast<int32_t>(esi20(eax19, "GetActiveWindow", eax19, "MessageBoxA"));
            g18045b3c = eax22;
            eax23 = reinterpret_cast<int32_t>(esi20(eax19, "GetLastActivePopup", eax19, "GetActiveWindow", eax19, "MessageBoxA"));
            g18045b40 = eax23;
            goto addr_0x18030fe8_2;
        }
    }
    g18045b38(ebx13, __return_address(), a2);
    addr_0x1803101a_6:
    goto ebx24;
}

struct s216 {
    signed char[4] pad4;
    int32_t f4;
    int32_t* f8;
    int32_t f12;
};

void fun_1802e292(int32_t ecx, int32_t a2);

void fun_1802e1fe(struct s216* a1, int32_t a2) {
    void** v3;
    int32_t* ebx4;
    int32_t esi5;
    int32_t ecx6;

    v3 = *reinterpret_cast<void***>(&g0);
    *reinterpret_cast<void***>(&g0) = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4 - 4 - 4 - 4 - 4);
    while ((ebx4 = a1->f8, a1->f12 != -1) && a1->f12 != a2) {
        esi5 = a1->f12 + a1->f12 * 2;
        ecx6 = ebx4[esi5];
        a1->f12 = ecx6;
        if (!(ebx4 + esi5)[1]) {
            fun_1802e292(ecx6, 0x101);
            (ebx4 + esi5)[2]();
        }
    }
    *reinterpret_cast<void***>(&g0) = v3;
    return;
}

int32_t g180444b8 = 0;

struct s217 {
    signed char[8] pad8;
    int32_t f8;
};

int32_t g180444b4 = 0;

int32_t g180444bc = 0;

void fun_1802e292(int32_t ecx, int32_t a2) {
    struct s217* ebp3;
    int32_t eax4;
    int32_t ebp5;

    g180444b8 = ebp3->f8;
    g180444b4 = eax4;
    g180444bc = ebp5;
    return;
}

void fun_180322f0();

void fun_1802e1bc(struct s216* a1) {
    fun_180322f0();
    goto a1->f4;
}

struct s218 {
    signed char[32768] pad32768;
    void** f32768;
};

void** fun_18031022(void** a1, void** a2, void** a3, void** a4, void** a5) {
    uint32_t eax6;
    uint32_t eax7;
    void** ecx8;
    unsigned char* edx9;
    uint32_t eax10;
    void** esi11;
    void** eax12;
    unsigned char cl13;
    void* eax14;
    struct s218* eax15;

    eax6 = reinterpret_cast<unsigned char>(a1) & 31;
    eax7 = eax6 + eax6 * 8;
    ecx8 = *reinterpret_cast<void***>((reinterpret_cast<signed char>(a1) >> 5) * 4 + 0x18046f20);
    edx9 = reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(ecx8 + eax7 * 4) + 4);
    *reinterpret_cast<unsigned char*>(&ecx8) = *reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(ecx8 + eax7 * 4) + 4);
    *reinterpret_cast<unsigned char*>(&eax7) = *reinterpret_cast<unsigned char*>(&ecx8);
    eax10 = eax7 & 0x80;
    if (!reinterpret_cast<int1_t>(a2 == 0x8000)) {
        if (!reinterpret_cast<int1_t>(a2 == 0x4000)) {
            eax12 = fun_1802dfa3(ecx8, esi11, __return_address(), a1, a2, a3, a4);
            *reinterpret_cast<void***>(eax12) = reinterpret_cast<void**>(22);
            return 0xffffffff;
        } else {
            cl13 = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&ecx8) | 0x80);
        }
    } else {
        cl13 = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&ecx8) & 0x7f);
    }
    eax14 = reinterpret_cast<void*>(-eax10);
    eax15 = reinterpret_cast<struct s218*>(reinterpret_cast<uint32_t>(eax14) - (reinterpret_cast<uint32_t>(eax14) + reinterpret_cast<uint1_t>(reinterpret_cast<uint32_t>(eax14) < reinterpret_cast<uint32_t>(eax14) + reinterpret_cast<uint1_t>(!!eax10))));
    *edx9 = cl13;
    *reinterpret_cast<uint16_t*>(&eax15) = reinterpret_cast<uint16_t>(*reinterpret_cast<uint16_t*>(&eax15) & 0xc000);
    return reinterpret_cast<uint32_t>(eax15) + reinterpret_cast<unsigned char>(0x8000);
}

void** fun_1802eb99(void** a1, void** a2) {
    void** edx3;
    void** eax4;
    void** ecx5;
    void** esi6;

    edx3 = a2;
    eax4 = a1;
    ecx5 = edx3 + 0xffffffff;
    if (edx3) {
        do {
            if (!*reinterpret_cast<void***>(eax4)) 
                break;
            ++eax4;
            esi6 = ecx5;
            --ecx5;
        } while (esi6);
    }
    if (*reinterpret_cast<void***>(eax4)) {
        return edx3;
    } else {
        return reinterpret_cast<unsigned char>(eax4) - reinterpret_cast<unsigned char>(a1);
    }
}

void fun_18031090(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20) {
    int32_t v21;
    void* ecx22;
    uint32_t eax23;
    uint32_t eax24;
    int32_t* esp25;

    v21 = reinterpret_cast<int32_t>(__return_address());
    ecx22 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 8);
    if (eax23 >= 0x1000) {
        do {
            ecx22 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(ecx22) - 0x1000);
            eax24 = eax24 - 0x1000;
        } while (eax24 >= 0x1000);
    }
    esp25 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(ecx22) - eax24 - 4);
    *esp25 = v21;
    goto *esp25;
}

void fun_1802ed24(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    if (reinterpret_cast<signed char>(a2) >= reinterpret_cast<signed char>(20)) {
        EnterCriticalSection();
        goto a3 + 32;
    } else {
        fun_1802e8ff(ecx, a2 + 28, __return_address(), a2, a3, a4, a5, a6, a7);
        return;
    }
}

void** fun_1802ed76(void** ecx, void** a2, void** a3, void** a4) {
    void** eax5;

    if (reinterpret_cast<signed char>(a2) >= reinterpret_cast<signed char>(20)) {
        LeaveCriticalSection();
        goto a3 + 32;
    } else {
        eax5 = fun_1802e960(ecx, a2 + 28, __return_address(), a2, a3, a4);
        return eax5;
    }
}

int32_t FlushFileBuffers = 0x3645e;

void** fun_180313d4(void** ecx, void** a2, void** a3, void** a4) {
    int1_t cf5;
    void** edi6;
    uint32_t eax7;
    void** esi8;
    void** edi9;
    void** esi10;
    void** ebx11;
    void** eax12;
    void** eax13;
    void** ecx14;
    void** eax15;
    void** eax16;
    int32_t eax17;
    void** eax18;
    void** eax19;

    cf5 = reinterpret_cast<unsigned char>(a2) < reinterpret_cast<unsigned char>(g18047020);
    if (!cf5 || (edi6 = reinterpret_cast<void**>((reinterpret_cast<signed char>(a2) >> 5) * 4 + 0x18046f20), eax7 = reinterpret_cast<unsigned char>(a2) & 31, esi8 = reinterpret_cast<void**>(eax7 + eax7 * 8 << 2), (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(*edi6) + reinterpret_cast<unsigned char>(esi8) + 4) & 1) == 0)) {
        eax12 = fun_1802dfa3(ecx, edi9, esi10, ebx11, __return_address(), a2, a3);
        *reinterpret_cast<void***>(eax12) = reinterpret_cast<void**>(9);
        eax13 = reinterpret_cast<void**>(0xffffffff);
    } else {
        fun_1802e5ec(a2, edi9, esi10);
        ecx14 = a2;
        if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(*edi6) + reinterpret_cast<unsigned char>(esi8) + 4) & 1)) {
            addr_0x1803143c_4:
            eax15 = fun_1802dfa3(ecx14, edi9, esi10, ebx11, __return_address(), a2, a3);
            *reinterpret_cast<void***>(eax15) = reinterpret_cast<void**>(9);
            esi8 = reinterpret_cast<void**>(0xffffffff);
            goto addr_0x1803144a_5;
        } else {
            eax16 = fun_1802e5aa(ecx14, a2, edi9, esi10, ebx11, __return_address(), a2, a3);
            ecx14 = a2;
            eax17 = reinterpret_cast<int32_t>(FlushFileBuffers(ecx14, eax16));
            if (eax17) {
                esi8 = reinterpret_cast<void**>(0);
            } else {
                eax18 = reinterpret_cast<void**>(GetLastError(ecx14, eax16));
                esi8 = eax18;
            }
            if (!esi8) 
                goto addr_0x1803144a_5; else 
                goto addr_0x18031435_10;
        }
    }
    addr_0x18031463_11:
    return eax13;
    addr_0x1803144a_5:
    fun_1802e64b(ecx14, a2, edi9, esi10, ebx11, __return_address(), a2, a3, a4);
    eax13 = esi8;
    goto addr_0x18031463_11;
    addr_0x18031435_10:
    eax19 = fun_1802dfac(ecx14, eax16, edi9, esi10, ebx11, __return_address(), a2, a3, a4, eax16, edi9, esi10, ebx11, __return_address(), a2, a3, a4);
    *reinterpret_cast<void***>(eax19) = esi8;
    goto addr_0x1803143c_4;
}

uint32_t fun_1802effc(void** a1) {
    uint32_t eax2;
    void** v3;
    void** esi4;
    void** eax5;
    uint32_t eax6;

    eax2 = fun_1802f02a(a1);
    if (!eax2) {
        if (!(*reinterpret_cast<unsigned char*>(a1 + 13) & 64)) {
            return 0;
        } else {
            v3 = *reinterpret_cast<void***>(a1 + 16);
            eax5 = fun_180313d4(a1, v3, esi4, __return_address());
            eax6 = reinterpret_cast<uint32_t>(-reinterpret_cast<unsigned char>(eax5));
            return eax6 - (eax6 + reinterpret_cast<uint1_t>(eax6 < eax6 + reinterpret_cast<uint1_t>(!!eax5)));
        }
    } else {
        return 0xffffffff;
    }
}

uint32_t fun_1802f622(uint32_t a1) {
    uint32_t ebx2;
    uint32_t eax3;
    uint32_t ecx4;
    uint32_t ecx5;

    ebx2 = a1;
    eax3 = 0;
    if (*reinterpret_cast<unsigned char*>(&ebx2) & 16) {
        eax3 = 1;
    }
    if (*reinterpret_cast<unsigned char*>(&ebx2) & 8) {
        *reinterpret_cast<unsigned char*>(&eax3) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax3) | 4);
    }
    if (*reinterpret_cast<unsigned char*>(&ebx2) & 4) {
        *reinterpret_cast<unsigned char*>(&eax3) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax3) | 8);
    }
    if (*reinterpret_cast<unsigned char*>(&ebx2) & 2) {
        *reinterpret_cast<unsigned char*>(&eax3) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax3) | 16);
    }
    if (*reinterpret_cast<unsigned char*>(&ebx2) & 1) {
        *reinterpret_cast<unsigned char*>(&eax3) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax3) | 32);
    }
    if (ebx2 & 0x80000) {
        *reinterpret_cast<unsigned char*>(&eax3) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax3) | 2);
    }
    ecx4 = ebx2 & 0x300;
    if (ecx4) {
        if (ecx4 == 0x100) {
            *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax3) + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax3) + 1) | 4);
        } else {
            if (ecx4 == 0x200) {
                *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax3) + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax3) + 1) | 8);
            } else {
                if (ecx4 == 0x300) {
                    *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax3) + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax3) + 1) | 12);
                }
            }
        }
    }
    ecx5 = ebx2 & 0x30000;
    if (!ecx5) {
        eax3 = eax3 | 0x300;
    } else {
        if (ecx5 == 0x10000) {
            eax3 = eax3 | 0x200;
        }
    }
    if (ebx2 & 0x40000) {
        *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax3) + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax3) + 1) | 16);
    }
    return eax3;
}

void** fun_1802f6ab(void** ecx, void** a2) {
    void** v3;
    void** ebx4;
    int1_t zf5;
    int1_t zf6;
    int32_t edi7;
    void** edi8;
    void** esi9;
    void** ebx10;
    void** eax11;

    v3 = reinterpret_cast<void**>(__return_address());
    ebx4 = reinterpret_cast<void**>(0);
    zf5 = g18045b0c == 0;
    if (!zf5) {
        InterlockedIncrement();
        zf6 = g18046f04 == 0;
        edi7 = InterlockedDecrement;
        if (!zf6) {
            edi7(0x18046f08);
            fun_1802e8ff(ecx, 19, 0x18046f08, 0x18046f08, edi8, esi9, ebx10, v3, a2);
            ecx = reinterpret_cast<void**>(19);
            ebx4 = reinterpret_cast<void**>(1);
        }
        eax11 = fun_1802f71a(ecx, ebx10, 0x18046f08);
        v3 = eax11;
        if (!ebx4) {
            edi7(ebx10, 0x18046f08);
        } else {
            fun_1802e960(ebx10, 19, 0x18046f08, edi8, esi9, ebx10);
        }
    } else {
        if (reinterpret_cast<signed char>(a2) >= reinterpret_cast<signed char>(65) && reinterpret_cast<signed char>(a2) <= reinterpret_cast<signed char>(90)) {
            return a2 + 32;
        }
    }
    goto v3;
}

void** fun_1802f71a(void** ecx, void** a2, void** a3) {
    void** v4;
    int1_t zf5;
    int1_t less_or_equal6;
    void** eax7;
    uint32_t eax8;
    void** edx9;
    int32_t eax10;
    void** eax11;
    void** v12;
    void** edi13;
    void** esi14;
    void** ebx15;
    void** eax16;
    void** eax17;

    v4 = ecx;
    zf5 = g18045b0c == 0;
    if (!zf5) {
        if (reinterpret_cast<signed char>(a2) < reinterpret_cast<signed char>(0x100)) {
            less_or_equal6 = reinterpret_cast<signed char>(g18044898) <= reinterpret_cast<signed char>(1);
            if (less_or_equal6) {
                eax7 = __image_base;
                eax7 = *reinterpret_cast<void***>(eax7 + reinterpret_cast<unsigned char>(a2) * 2);
                eax8 = reinterpret_cast<unsigned char>(eax7) & reinterpret_cast<unsigned char>(1);
            } else {
                eax8 = fun_1802ebc4(ecx, a2, 1);
            }
            if (!eax8) 
                goto addr_0x1802f777_7;
        }
        edx9 = __image_base;
        eax10 = reinterpret_cast<signed char>(a2) >> 8;
        if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(edx9 + *reinterpret_cast<unsigned char*>(&eax10) * 2) + 1) & 0x80)) {
            eax11 = reinterpret_cast<void**>(1);
        } else {
            eax11 = reinterpret_cast<void**>(2);
        }
        v12 = g18045b0c;
        eax16 = fun_1802e975(v12, 0x100, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 8, eax11, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffffc, 3, 0, 1, edi13, esi14, ebx15, v4, v12, 0x100, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 8, eax11, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffffc, 3, 0, 1, edi13, esi14, ebx15, v4);
        if (!eax16) {
            addr_0x1802f777_7:
            eax17 = a2;
        } else {
            if (!reinterpret_cast<int1_t>(eax16 == 1)) {
                eax17 = reinterpret_cast<void**>(static_cast<uint32_t>(*reinterpret_cast<unsigned char*>(&v4 + 1)) << 8 | static_cast<uint32_t>(*reinterpret_cast<unsigned char*>(&v4)));
            } else {
                eax17 = reinterpret_cast<void**>(static_cast<uint32_t>(*reinterpret_cast<unsigned char*>(&v4)));
            }
        }
    } else {
        eax17 = a2;
        if (reinterpret_cast<signed char>(eax17) >= reinterpret_cast<signed char>(65) && reinterpret_cast<signed char>(eax17) <= reinterpret_cast<signed char>(90)) {
            eax17 = eax17 + 32;
        }
    }
    return eax17;
}

uint32_t fun_18031467(void** a1, void** a2, void** a3) {
    uint32_t eax4;
    void** ecx5;

    eax4 = 0;
    ecx5 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a1) + reinterpret_cast<unsigned char>(a2));
    if (reinterpret_cast<unsigned char>(ecx5) < reinterpret_cast<unsigned char>(a1) || reinterpret_cast<unsigned char>(ecx5) < reinterpret_cast<unsigned char>(a2)) {
        eax4 = 1;
    }
    *reinterpret_cast<void***>(a3) = ecx5;
    return eax4;
}

int32_t fun_1802f7e5(void*** a1, void* a2);

uint32_t fun_1802f82e(void* ecx, void*** a2, void* a3);

uint32_t fun_1802f884(int32_t* ecx, void*** a2, void*** a3, void*** a4, void*** a5, void*** a6, void*** a7) {
    void* edi8;
    uint32_t v9;
    void* ebx10;
    void*** eax11;
    int32_t esi12;
    int32_t ecx13;
    int32_t eax14;
    uint32_t eax15;
    int32_t ecx16;
    int32_t eax17;
    int32_t ecx18;
    void*** edi19;

    edi8 = reinterpret_cast<void*>(a3 + 0xffffffff);
    v9 = 0;
    ebx10 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(edi8) + 1);
    __asm__("cdq ");
    __asm__("cdq ");
    eax11 = a2 + reinterpret_cast<int32_t>(ebx10) / 32 * 4;
    esi12 = 31 - reinterpret_cast<int32_t>(ebx10) % 32;
    ecx13 = esi12;
    if (reinterpret_cast<unsigned char>(*eax11) & 1 << *reinterpret_cast<unsigned char*>(&ecx13)) {
        eax14 = fun_1802f7e5(a2, reinterpret_cast<uint32_t>(ebx10) + 1);
        if (!eax14) {
            eax15 = fun_1802f82e(reinterpret_cast<uint32_t>(ebx10) + 1, a2, edi8);
            v9 = eax15;
        }
        eax11 = eax11;
    }
    ecx16 = esi12;
    *eax11 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*eax11) & 0xffffffff << *reinterpret_cast<unsigned char*>(&ecx16));
    eax17 = reinterpret_cast<int32_t>(ebx10) / 32 + 1;
    if (eax17 < 3) {
        ecx18 = 3 - eax17;
        edi19 = a2 + eax17 * 4;
        while (ecx18) {
            --ecx18;
            *edi19 = reinterpret_cast<void**>(0);
            edi19 = edi19 + 4;
        }
    }
    return v9;
}

int32_t fun_1802f7e5(void*** a1, void* a2) {
    int32_t ecx3;
    int32_t esi4;
    void*** eax5;

    __asm__("cdq ");
    __asm__("cdq ");
    ecx3 = 31 - reinterpret_cast<int32_t>(a2) % 32;
    if (!(reinterpret_cast<unsigned char>(a1[reinterpret_cast<int32_t>(a2) / 32 * 4]) & reinterpret_cast<uint32_t>(~(-1 << *reinterpret_cast<unsigned char*>(&ecx3))))) {
        esi4 = reinterpret_cast<int32_t>(a2) / 32 + 1;
        if (esi4 >= 3) {
            addr_0x1802f825_3:
            return 1;
        } else {
            eax5 = a1 + esi4 * 4;
            do {
                if (*eax5) 
                    break;
                ++esi4;
                eax5 = eax5 + 4;
            } while (esi4 < 3);
            goto addr_0x1802f825_3;
        }
    }
    return 0;
}

uint32_t fun_1802f82e(void* ecx, void*** a2, void* a3) {
    void** edi4;
    int32_t ecx5;
    void** v6;
    uint32_t eax7;
    int32_t esi8;
    void** edi9;
    void** v10;

    __asm__("cdq ");
    __asm__("cdq ");
    edi4 = reinterpret_cast<void**>(a2 + reinterpret_cast<int32_t>(a3) / 32 * 4);
    ecx5 = 31 - reinterpret_cast<int32_t>(a3) % 32;
    v6 = *reinterpret_cast<void***>(edi4);
    eax7 = fun_18031467(v6, 1 << *reinterpret_cast<unsigned char*>(&ecx5), edi4);
    esi8 = reinterpret_cast<int32_t>(a3) / 32 - 1;
    if (esi8 >= 0) {
        edi9 = reinterpret_cast<void**>(a2 + esi8 * 4);
        do {
            if (!eax7) 
                break;
            v10 = *reinterpret_cast<void***>(edi9);
            eax7 = fun_18031467(v10, 1, edi9);
            --esi8;
            edi9 = edi9 - 4;
        } while (esi8 >= 0);
    }
    return eax7;
}

void fun_1802f910(void*** a1, void*** a2) {
    void*** eax3;
    void* ecx4;
    int32_t edx5;

    eax3 = a2;
    ecx4 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(a1) - reinterpret_cast<uint32_t>(eax3));
    edx5 = 3;
    do {
        *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(ecx4) + reinterpret_cast<uint32_t>(eax3)) = *eax3;
        eax3 = eax3 + 4;
        --edx5;
    } while (edx5);
    return;
}

struct s219 {
    void** f0;
    signed char[3] pad4;
    void** f4;
};

void fun_1802f92b(int32_t* ecx, void*** a2) {
    struct s219* edi3;

    *a2 = reinterpret_cast<void**>(0);
    edi3 = reinterpret_cast<struct s219*>(a2 + 4);
    edi3->f0 = reinterpret_cast<void**>(0);
    edi3->f4 = reinterpret_cast<void**>(0);
    return;
}

int32_t fun_1802f937(int32_t* a1) {
    int32_t* eax2;
    int32_t ecx3;

    eax2 = a1;
    ecx3 = 0;
    do {
        if (*eax2) 
            break;
        ++ecx3;
        ++eax2;
    } while (ecx3 < 3);
    goto addr_0x1802f94b_4;
    return 0;
    addr_0x1802f94b_4:
    return 1;
}

struct s220 {
    signed char[2] pad2;
    int32_t* f2;
    uint32_t f6;
    uint16_t f10;
};

struct s221 {
    int32_t* f0;
    int32_t* f4;
    void*** f8;
    void*** f12;
    int32_t f16;
    void* f20;
};

void fun_1802f952(void*** a1, void*** a2, void*** a3, void*** a4, void*** a5, void*** a6, void*** a7, void*** a8);

int32_t fun_1802f9df(struct s220* a1, struct s208* a2, struct s221* a3) {
    uint32_t ecx4;
    uint32_t v5;
    int32_t* ecx6;
    int32_t* ebx7;
    void*** v8;
    void*** edi9;
    void*** esi10;
    uint32_t eax11;
    int32_t* ecx12;
    void* esi13;
    int32_t eax14;
    int32_t eax15;
    void*** v16;
    void* esi17;
    void*** ebx18;
    void*** v19;
    void*** v20;
    void*** v21;
    void*** v22;
    void*** v23;
    void*** v24;
    int32_t v25;
    void*** esi26;
    void*** v27;
    void*** v28;
    void*** v29;
    uint32_t ecx30;
    uint32_t ecx31;
    int32_t* esi32;

    ecx4 = static_cast<uint32_t>(a1->f10);
    v5 = a1->f6;
    ecx6 = a1->f2;
    ebx7 = reinterpret_cast<int32_t*>((ecx4 & 0x7fff) - 0x3fff);
    if (!reinterpret_cast<int1_t>(ebx7 == 0xffffc001)) {
        fun_1802f910(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe8, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4);
        v8 = a3->f8;
        eax11 = fun_1802f884(ecx6, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4, v8, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe8, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4, edi9, esi10);
        if (eax11) {
            ebx7 = reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(ebx7) + 1);
        }
        ecx12 = reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(a3->f4) - reinterpret_cast<uint32_t>(a3->f8));
        if (reinterpret_cast<int32_t>(ebx7) < reinterpret_cast<int32_t>(ecx12)) 
            goto addr_0x1802fa79_5;
    } else {
        esi13 = reinterpret_cast<void*>(0);
        eax14 = fun_1802f937(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4);
        if (eax14) {
            addr_0x1802fb0b_7:
            eax15 = 0;
            goto addr_0x1802fb0d_8;
        } else {
            fun_1802f92b(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4);
            goto addr_0x1802fa44_10;
        }
    }
    if (reinterpret_cast<int32_t>(ebx7) > reinterpret_cast<int32_t>(a3->f4)) {
        if (reinterpret_cast<int32_t>(ebx7) < reinterpret_cast<int32_t>(a3->f0)) {
            v16 = a3->f12;
            esi17 = a3->f20;
            *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&v5) + 3) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&v5) + 3) & 0x7f);
            esi13 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esi17) + reinterpret_cast<uint32_t>(ebx7));
            fun_1802f952(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4, v16, edi9, esi10, ebx18, v19, v20, v21);
            goto addr_0x1802fb0b_7;
        } else {
            fun_1802f92b(ecx12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4);
            v22 = a3->f12;
            *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&v5) + 3) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&v5) + 3) | 0x80);
            fun_1802f952(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4, v22, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4, edi9, esi10, ebx18, v23, v24);
            esi13 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(a3->f20) + reinterpret_cast<uint32_t>(a3->f0));
            v25 = 1;
        }
    } else {
        esi26 = reinterpret_cast<void***>(reinterpret_cast<uint32_t>(a3->f4) - reinterpret_cast<uint32_t>(ebx7));
        fun_1802f910(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe8);
        fun_1802f952(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4, esi26, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe8, edi9, esi10, ebx18, v27);
        v28 = a3->f8;
        fun_1802f884(ecx12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4, v28, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4, esi26, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe8);
        v29 = a3->f12 + 1;
        fun_1802f952(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4, v29, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4, v28, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4, esi26, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe8);
        goto addr_0x1802fac1_16;
    }
    addr_0x1802fa46_17:
    eax15 = v25;
    addr_0x1802fb0d_8:
    ecx30 = 31 - reinterpret_cast<uint32_t>(a3->f12);
    ecx31 = -(ecx4 & 0x8000);
    esi32 = reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(esi13) << *reinterpret_cast<unsigned char*>(&ecx30) | ecx31 - (ecx31 + reinterpret_cast<uint1_t>(ecx31 < ecx31 + reinterpret_cast<uint1_t>(!!(ecx4 & 0x8000)))) & 0x80000000 | v5);
    if (a3->f16 != 64) {
        if (a3->f16 == 32) {
            a2->f0 = esi32;
        }
    } else {
        a2->f4 = esi32;
        a2->f0 = ecx6;
    }
    return eax15;
    addr_0x1802fac1_16:
    esi13 = reinterpret_cast<void*>(0);
    addr_0x1802fa44_10:
    v25 = 2;
    goto addr_0x1802fa46_17;
    addr_0x1802fa79_5:
    fun_1802f92b(ecx12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff4);
    goto addr_0x1802fac1_16;
}

void fun_1802f952(void*** a1, void*** a2, void*** a3, void*** a4, void*** a5, void*** a6, void*** a7, void*** a8) {
    void*** edi9;
    int32_t v10;
    int32_t v11;
    int32_t edx12;
    uint32_t v13;
    int32_t ecx14;
    int32_t ebx15;
    uint32_t esi16;
    void** eax17;
    int32_t ecx18;
    int32_t ecx19;
    int32_t edi20;
    int32_t ebx21;
    void* ecx22;
    int32_t esi23;

    edi9 = a1;
    __asm__("cdq ");
    v10 = 3;
    v11 = reinterpret_cast<int32_t>(a2) / 32;
    __asm__("cdq ");
    edx12 = reinterpret_cast<int32_t>(a2) % 32;
    v13 = 0;
    ecx14 = edx12;
    ebx15 = 32 - edx12;
    esi16 = reinterpret_cast<uint32_t>(~(-1 << *reinterpret_cast<unsigned char*>(&ecx14)));
    do {
        eax17 = *edi9;
        ecx18 = edx12;
        *edi9 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax17) >> *reinterpret_cast<signed char*>(&ecx18) | v13);
        ecx19 = ebx15;
        edi9 = edi9 + 4;
        --v10;
        v13 = (reinterpret_cast<unsigned char>(eax17) & esi16) << *reinterpret_cast<unsigned char*>(&ecx19);
    } while (v10);
    edi20 = v11;
    ebx21 = 2;
    ecx22 = reinterpret_cast<void*>(8);
    esi23 = edi20 << 2;
    do {
        if (ebx21 < edi20) {
            *reinterpret_cast<uint32_t*>(reinterpret_cast<int32_t>(ecx22) + reinterpret_cast<uint32_t>(a1)) = 0;
        } else {
            *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(ecx22) + reinterpret_cast<uint32_t>(a1)) = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(ecx22) - esi23 + reinterpret_cast<uint32_t>(a1));
        }
        --ebx21;
        ecx22 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(ecx22) - 4);
    } while (reinterpret_cast<int32_t>(ecx22) >= 0);
    return;
}

struct s222 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    int16_t f8;
};

void fun_1802fca4(void** ecx, struct s222* a2, void** a3) {
    uint32_t eax4;
    uint32_t ecx5;
    uint32_t v6;
    void** edx7;
    uint32_t ebx8;
    void** eax9;
    void** v10;
    uint32_t edi11;
    struct s222* eax12;
    void** ecx13;
    void** ebx14;
    uint32_t ecx15;

    *reinterpret_cast<void***>(&eax4) = *reinterpret_cast<void***>(a3 + 6);
    ecx5 = eax4 >> 4 & 0x7ff;
    v6 = eax4 & 0x8000;
    edx7 = *reinterpret_cast<void***>(a3);
    ebx8 = static_cast<uint32_t>(*reinterpret_cast<uint16_t*>(&ecx5));
    eax9 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a3 + 4)) & 0xfffff);
    v10 = reinterpret_cast<void**>(0x80000000);
    if (!ebx8) {
        if (eax9 || edx7) {
            edi11 = ecx5 + 0x3c01;
            v10 = reinterpret_cast<void**>(0);
        } else {
            a2->f4 = reinterpret_cast<void**>(0);
            a2->f0 = reinterpret_cast<void**>(0);
            a2->f8 = 0;
            goto addr_0x1802fd55_5;
        }
    } else {
        if (ebx8 == 0x7ff) {
            edi11 = 0x7fff;
        } else {
            edi11 = ecx5 + 0x3c00;
        }
    }
    eax12 = a2;
    ecx13 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx7) >> 21 | reinterpret_cast<unsigned char>(eax9) << 11 | reinterpret_cast<unsigned char>(v10));
    eax12->f4 = ecx13;
    eax12->f0 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx7) << 11);
    while (!(reinterpret_cast<unsigned char>(0x80000000) & reinterpret_cast<unsigned char>(ecx13))) {
        ebx14 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax12->f0) >> 31 | reinterpret_cast<unsigned char>(ecx13) + reinterpret_cast<unsigned char>(ecx13));
        eax12->f0 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax12->f0) + reinterpret_cast<unsigned char>(eax12->f0));
        eax12->f4 = ebx14;
        edi11 = edi11 + 0xffff;
        ecx13 = ebx14;
    }
    ecx15 = v6 | edi11;
    eax12->f8 = *reinterpret_cast<int16_t*>(&ecx15);
    addr_0x1802fd55_5:
    return;
}

int32_t HeapReAlloc = 0x3640a;

struct s223 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    uint32_t f8;
    void** f12;
    signed char[3] pad16;
    void** f16;
};

int32_t VirtualAlloc = 0x363fa;

void** fun_180305d1() {
    uint32_t eax1;
    uint32_t ecx2;
    uint32_t v3;
    void** v4;
    void** eax5;
    void** ecx6;
    struct s223* esi7;
    void** eax8;
    void** eax9;
    void** v10;
    void** v11;

    eax1 = g18045ed8;
    ecx2 = g18045ec8;
    if (eax1 == ecx2) {
        v3 = ecx2 + ecx2 * 4 + 80 << 2;
        v4 = g18046f0c;
        eax5 = reinterpret_cast<void**>(HeapReAlloc(v4));
        if (!eax5) 
            goto addr_0x18030664_3;
        g18045ec8 = g18045ec8 + 16;
        g18045edc = eax5;
        eax1 = g18045ed8;
    }
    ecx6 = g18045edc;
    v3 = 0x41c4;
    esi7 = reinterpret_cast<struct s223*>(ecx6 + (eax1 + eax1 * 4) * 4);
    eax8 = reinterpret_cast<void**>(HeapAlloc());
    esi7->f16 = eax8;
    if (!eax8) {
        addr_0x18030664_3:
    } else {
        eax9 = reinterpret_cast<void**>(VirtualAlloc(0, 0x100000, 0x2000, 4));
        esi7->f12 = eax9;
        if (eax9) {
            esi7->f8 = 0xffffffff;
            esi7->f0 = reinterpret_cast<void**>(0);
            esi7->f4 = reinterpret_cast<void**>(0);
            ++g18045ed8;
            *reinterpret_cast<void***>(esi7->f16) = reinterpret_cast<void**>(0xffffffff);
        } else {
            v10 = esi7->f16;
            v11 = g18046f0c;
            HeapFree(v11, 0, v10, 0, 0x100000, 0x2000, 4);
            goto addr_0x18030664_3;
        }
    }
    goto v3;
}

struct s224 {
    signed char[4] pad4;
    struct s224* f4;
    struct s224* f8;
};

struct s225 {
    void** f0;
    signed char[15] pad16;
    uint32_t f16;
};

struct s226 {
    uint32_t f0;
    uint32_t f4;
    signed char[4064] pad4072;
    int32_t f4072;
    uint32_t f4076;
};

struct s228 {
    signed char[4] pad4;
    struct s227* f4;
    struct s227* f8;
};

struct s227 {
    signed char[4] pad4;
    struct s228* f4;
    struct s228* f8;
};

void** fun_18030682(uint32_t ecx, void** a2) {
    void** ecx3;
    void** esi4;
    void** eax5;
    void** ebx6;
    int32_t edx7;
    struct s224* eax8;
    struct s224* v9;
    struct s225* edi10;
    uint32_t eax11;
    struct s225* edx12;
    struct s226* eax13;
    struct s227* ecx14;
    struct s228* eax15;
    struct s227* ecx16;
    int1_t zf17;
    void** ecx18;
    void** eax19;

    ecx3 = a2;
    esi4 = *reinterpret_cast<void***>(ecx3 + 16);
    eax5 = *reinterpret_cast<void***>(ecx3 + 8);
    ebx6 = reinterpret_cast<void**>(0);
    while (reinterpret_cast<signed char>(eax5) >= reinterpret_cast<signed char>(0)) {
        eax5 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax5) << 1);
        ++ebx6;
    }
    edx7 = 63;
    eax8 = reinterpret_cast<struct s224*>(reinterpret_cast<uint32_t>(esi4 + reinterpret_cast<unsigned char>(ebx6) * 0x204) + 0x144);
    v9 = eax8;
    do {
        eax8->f8 = eax8;
        eax8->f4 = eax8;
        eax8 = reinterpret_cast<struct s224*>(&eax8->f8);
        --edx7;
    } while (edx7);
    edi10 = reinterpret_cast<struct s225*>((reinterpret_cast<unsigned char>(ebx6) << 15) + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx3 + 12)));
    eax11 = reinterpret_cast<uint32_t>(VirtualAlloc());
    if (eax11) {
        edx12 = reinterpret_cast<struct s225*>(reinterpret_cast<uint32_t>(edi10) + 0x7000);
        if (reinterpret_cast<uint32_t>(edi10) <= reinterpret_cast<uint32_t>(edx12)) {
            eax13 = reinterpret_cast<struct s226*>(&edi10->f16);
            do {
                *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(eax13) + 0xfffffff8) = 0xffffffff;
                eax13->f4076 = 0xffffffff;
                *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(eax13) + 0xfffffffc) = 0xff0;
                eax13->f0 = reinterpret_cast<uint32_t>(eax13) + 0xffc;
                eax13->f4 = reinterpret_cast<uint32_t>(eax13) + 0xffffeffc;
                eax13->f4072 = 0xff0;
                eax13 = reinterpret_cast<struct s226*>(reinterpret_cast<uint32_t>(eax13) + 0x1000);
            } while (reinterpret_cast<uint32_t>(eax13) + 0xfffffff0 <= reinterpret_cast<uint32_t>(edx12));
        }
        ecx14 = reinterpret_cast<struct s227*>(reinterpret_cast<uint32_t>(edi10) + 12);
        eax15 = reinterpret_cast<struct s228*>(v9 + 42);
        eax15->f4 = ecx14;
        ecx14->f8 = eax15;
        ecx16 = reinterpret_cast<struct s227*>(reinterpret_cast<uint32_t>(edx12) + 12);
        eax15->f8 = ecx16;
        ecx16->f4 = eax15;
        *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(esi4 + reinterpret_cast<unsigned char>(ebx6) * 4) + 68) = 0;
        *reinterpret_cast<uint32_t*>(reinterpret_cast<uint32_t>(esi4 + reinterpret_cast<unsigned char>(ebx6) * 4) + 0xc4) = 1;
        zf17 = *reinterpret_cast<signed char*>(esi4 + 67) == 0;
        *reinterpret_cast<signed char*>(esi4 + 67) = reinterpret_cast<signed char>(*reinterpret_cast<signed char*>(esi4 + 67) + 1);
        if (zf17) {
            *reinterpret_cast<void***>(a2 + 4) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 4)) | 1);
        }
        ecx18 = ebx6;
        *reinterpret_cast<void***>(a2 + 8) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 8)) & ~(0x80000000 >> *reinterpret_cast<signed char*>(&ecx18)));
        eax19 = ebx6;
    } else {
        eax19 = reinterpret_cast<void**>(0xffffffff);
    }
    return eax19;
}

struct s229 {
    void** f0;
    signed char[3] pad4;
    unsigned char f4;
};

void** fun_180307fd(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void* ebp6;
    void** v7;
    void** ebx8;
    void** v9;
    void** esi10;
    void** v11;
    void** edi12;
    void** v13;
    void** v14;
    void**** ebx15;
    uint32_t eax16;
    uint32_t esi17;
    void** v18;
    void** v19;
    void** v20;
    void** v21;
    void** v22;
    void** v23;
    void** v24;
    struct s229* eax25;
    void** v26;
    void** v27;
    void** v28;
    void** v29;
    int32_t eax30;
    void** eax31;
    void** v32;
    void** v33;
    void** eax34;
    void** v35;
    void** v36;
    void** eax37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** eax42;
    void** eax43;
    void** v44;
    void* eax45;
    void** ecx46;
    void** edi47;
    int32_t eax48;
    void** v49;
    void** eax50;

    ebp6 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    v7 = ebx8;
    v9 = esi10;
    v11 = edi12;
    v13 = reinterpret_cast<void**>(0);
    v14 = reinterpret_cast<void**>(0);
    if (!a4) 
        goto addr_0x18030816_2;
    ebx15 = reinterpret_cast<void****>((reinterpret_cast<signed char>(a2) >> 5) * 4 + 0x18046f20);
    eax16 = reinterpret_cast<unsigned char>(a2) & 31;
    esi17 = eax16 + eax16 * 8 << 2;
    if (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(*ebx15) + esi17 + 4) & 32) {
        fun_1802e6d2(ecx, a2, 0, 2, v11, v9, v7, v18, v19, v20, v21, v22, v23, v24);
    }
    eax25 = reinterpret_cast<struct s229*>(reinterpret_cast<int32_t>(*ebx15) + esi17);
    if (eax25->f4 & 0x80) 
        goto addr_0x1803085b_6;
    ecx = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp6) + 0xfffffff4);
    v26 = ecx;
    v27 = a4;
    v28 = a3;
    v29 = eax25->f0;
    eax30 = reinterpret_cast<int32_t>(WriteFile(v29, v28, v27, v26, 0));
    if (!eax30) {
        eax31 = reinterpret_cast<void**>(GetLastError(v29, v28, v27, v26, 0));
        v32 = eax31;
    } else {
        v32 = reinterpret_cast<void**>(0);
        v13 = v33;
    }
    addr_0x180308e5_10:
    if (v13) {
        eax34 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v13) - reinterpret_cast<unsigned char>(v14));
    } else {
        if (!v32) {
            addr_0x18030957_13:
            if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(*ebx15) + esi17 + 4) & 64) || *reinterpret_cast<void***>(a3) != 26) {
                eax37 = fun_1802dfa3(ecx, v11, v9, v7, v35, 0, v36);
                *reinterpret_cast<void***>(eax37) = reinterpret_cast<void**>(28);
                eax42 = fun_1802dfac(ecx, v11, v9, v7, v38, 0, v39, v40, v41);
                *reinterpret_cast<void***>(eax42) = reinterpret_cast<void**>(0);
                goto addr_0x18030952_15;
            } else {
                addr_0x18030816_2:
                eax34 = reinterpret_cast<void**>(0);
            }
        } else {
            if (!reinterpret_cast<int1_t>(v32 == 5)) {
                fun_1802df30(ecx, v32, v29, v28, v27, v26, 0, v11, v9);
                goto addr_0x18030952_15;
            } else {
                eax43 = fun_1802dfa3(ecx, v29, v28, v27, v26, 0, v11);
                *reinterpret_cast<void***>(eax43) = reinterpret_cast<void**>(9);
                eax42 = fun_1802dfac(ecx, v29, v28, v27, v26, 0, v11, v9, v7);
                *reinterpret_cast<void***>(eax42) = reinterpret_cast<void**>(5);
                goto addr_0x18030952_15;
            }
        }
    }
    addr_0x18030983_19:
    return eax34;
    addr_0x18030952_15:
    eax34 = reinterpret_cast<void**>(0xffffffff);
    goto addr_0x18030983_19;
    addr_0x1803085b_6:
    v44 = a3;
    v32 = reinterpret_cast<void**>(0);
    if (reinterpret_cast<unsigned char>(a4) <= reinterpret_cast<unsigned char>(0)) 
        goto addr_0x18030957_13;
    do {
        eax45 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(ebp6) - 0x414);
        do {
            ecx = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v44) - reinterpret_cast<unsigned char>(a3));
            if (reinterpret_cast<unsigned char>(ecx) >= reinterpret_cast<unsigned char>(a4)) 
                break;
            ecx46 = v44;
            ++v44;
            if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx46) == 10)) {
                ++v14;
                eax45 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(eax45) + 1);
            }
            eax45 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(eax45) + 1);
            ecx = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax45) - (reinterpret_cast<int32_t>(ebp6) + 0xfffffbec));
        } while (reinterpret_cast<signed char>(ecx) < reinterpret_cast<signed char>(0x400));
        edi47 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax45) - (reinterpret_cast<int32_t>(ebp6) + 0xfffffbec));
        v26 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp6) + 0xfffffff4);
        v27 = edi47;
        v28 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp6) + 0xfffffbec);
        v29 = *reinterpret_cast<void***>(reinterpret_cast<int32_t>(*ebx15) + esi17);
        eax48 = reinterpret_cast<int32_t>(WriteFile(v29, v28, v27, v26, 0));
        if (!eax48) 
            break;
        v13 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v13) + reinterpret_cast<unsigned char>(v49));
    } while (reinterpret_cast<signed char>(v49) >= reinterpret_cast<signed char>(edi47) && reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(v44) - reinterpret_cast<unsigned char>(a3)) < reinterpret_cast<unsigned char>(a4));
    goto addr_0x180308e3_27;
    eax50 = reinterpret_cast<void**>(GetLastError(v29, v28, v27, v26, 0));
    v32 = eax50;
    addr_0x180308e3_27:
    goto addr_0x180308e5_10;
}

void** g18045b1c = reinterpret_cast<void**>(0);

void** fun_18030a4e(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** eax6;
    int1_t zf7;
    void** v8;
    void** v9;
    int32_t eax10;
    void** ebp11;
    void** eax12;

    eax6 = a2;
    if (!eax6) {
        return eax6;
    }
    zf7 = g18045b0c == 0;
    if (!zf7) {
        ecx = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 8);
        a2 = reinterpret_cast<void**>(0);
        v8 = g18044898;
        v9 = g18045b1c;
        eax10 = reinterpret_cast<int32_t>(WideCharToMultiByte(v9, 0x220, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, 1, eax6, v8, 0, ecx));
        if (!eax10 || !1) {
            eax12 = fun_1802dfa3(ecx, ebp11, __return_address(), a2, a3, a4, a5);
            *reinterpret_cast<void***>(eax12) = reinterpret_cast<void**>(42);
            goto addr_0x18030ab5_6;
        } else {
            addr_0x18030ab5_6:
            goto __return_address();
        }
    } else {
        *reinterpret_cast<uint16_t*>(&ecx) = *reinterpret_cast<uint16_t*>(&a3);
        if (*reinterpret_cast<uint16_t*>(&ecx) <= 0xff) {
            *reinterpret_cast<void***>(eax6) = ecx;
            return 1;
        }
    }
}

void** fun_18030d9c(void** a1, void** a2, void** a3) {
    uint32_t eax4;
    uint32_t eax5;
    uint32_t eax6;

    eax4 = reinterpret_cast<uint32_t>(a1 - 0x3a4);
    if (!eax4) {
        return 0x411;
    } else {
        eax5 = eax4 - 4;
        if (!eax5) {
            return 0x804;
        } else {
            eax6 = eax5 - 13;
            if (!eax6) {
                return 0x412;
            } else {
                if (!(eax6 - 1)) {
                    return 0x404;
                } else {
                    return 0;
                }
            }
        }
    }
}

void** g18045ca4 = reinterpret_cast<void**>(0);

void** g18045cbc = reinterpret_cast<void**>(0);

void** g18045ec4 = reinterpret_cast<void**>(0);

void** g18045cb0 = reinterpret_cast<void**>(0);

void** g18045cb4 = reinterpret_cast<void**>(0);

void** g18045cb8 = reinterpret_cast<void**>(0);

void fun_18030dcf(void** ecx) {
    int32_t ecx2;
    signed char* edi3;

    ecx2 = 64;
    edi3 = reinterpret_cast<signed char*>(0x18045dc0);
    while (ecx2) {
        --ecx2;
        *edi3 = reinterpret_cast<signed char>(0);
        edi3 = edi3 + 4;
    }
    *edi3 = 0;
    g18045ca4 = reinterpret_cast<void**>(0);
    g18045cbc = reinterpret_cast<void**>(0);
    g18045ec4 = reinterpret_cast<void**>(0);
    g18045cb0 = reinterpret_cast<void**>(0);
    g18045cb4 = reinterpret_cast<void**>(0);
    g18045cb8 = reinterpret_cast<void**>(0);
    return;
}

int32_t GetCPInfo = 0x36418;

void fun_18030df8(void** ecx) {
    int32_t v2;
    int32_t ebp3;
    int32_t* ebp4;
    int32_t v5;
    int32_t esi6;
    void* v7;
    void** v8;
    int32_t eax9;
    uint32_t eax10;
    unsigned char cl11;
    void** eax12;
    void** esi13;
    unsigned char al14;
    unsigned char v15;
    void** v16;
    void** v17;
    void** v18;
    void** v19;
    void** v20;
    void** v21;
    void** eax22;
    int16_t dx23;
    int16_t v24;
    unsigned char dl25;
    unsigned char v26;
    void** eax27;
    signed char* edi28;
    void* ecx29;
    void* ebx30;
    uint32_t ecx31;

    v2 = ebp3;
    ebp4 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    v5 = esi6;
    v7 = reinterpret_cast<void*>(ebp4 - 5);
    v8 = g18045ca4;
    eax9 = reinterpret_cast<int32_t>(GetCPInfo());
    if (eax9 != 1) {
        eax10 = 0;
        do {
            if (eax10 < 65 || eax10 > 90) {
                if (eax10 < 97 || eax10 > 0x7a) {
                    *reinterpret_cast<unsigned char*>(eax10 + 0x18045cc0) = 0;
                    continue;
                } else {
                    *reinterpret_cast<unsigned char*>(eax10 + 0x18045dc1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(eax10 + 0x18045dc1) | 32);
                    cl11 = reinterpret_cast<unsigned char>(*reinterpret_cast<signed char*>(&eax10) - 32);
                }
            } else {
                *reinterpret_cast<unsigned char*>(eax10 + 0x18045dc1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(eax10 + 0x18045dc1) | 16);
                cl11 = reinterpret_cast<unsigned char>(*reinterpret_cast<signed char*>(&eax10) + 32);
            }
            *reinterpret_cast<unsigned char*>(eax10 + 0x18045cc0) = cl11;
            ++eax10;
        } while (eax10 < 0x100);
    } else {
        eax12 = reinterpret_cast<void**>(0);
        esi13 = reinterpret_cast<void**>(0x100);
        do {
            *reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(ebp4) + reinterpret_cast<unsigned char>(eax12) + 0xfffffeec) = *reinterpret_cast<signed char*>(&eax12);
            ++eax12;
        } while (reinterpret_cast<unsigned char>(eax12) < reinterpret_cast<unsigned char>(0x100));
        al14 = v15;
        if (!al14) 
            goto addr_0x18030e73_13; else 
            goto addr_0x18030e3c_14;
    }
    addr_0x18030f7a_15:
    return;
    addr_0x18030e73_13:
    v16 = g18045ec4;
    v17 = g18045ca4;
    fun_1803120a(ecx, 1, ebp4 + 0xffffffbb, esi13, ebp4 + 0xfffffebb, v17, v16, 0, *reinterpret_cast<int16_t*>(&v8), v7, v5);
    v18 = g18045ca4;
    v19 = g18045ec4;
    fun_1802e975(v19, esi13, ebp4 + 0xffffffbb, esi13, ebp4 + 0xffffff7b, esi13, v18, 0, 1, ebp4 + 0xffffffbb, esi13, ebp4 + 0xfffffebb, v19, esi13, ebp4 + 0xffffffbb, esi13, ebp4 + 0xffffff7b, esi13, v18, 0, 1, ebp4 + 0xffffffbb, esi13, ebp4 + 0xfffffebb);
    v20 = g18045ca4;
    v21 = g18045ec4;
    fun_1802e975(v21, 0x200, ebp4 + 0xffffffbb, esi13, ebp4 + 0xffffff3b, esi13, v20, 0, v19, esi13, ebp4 + 0xffffffbb, esi13, v21, 0x200, ebp4 + 0xffffffbb, esi13, ebp4 + 0xffffff3b, esi13, v20, 0, v19, esi13, ebp4 + 0xffffffbb, esi13);
    eax22 = reinterpret_cast<void**>(0);
    do {
        dx23 = v24;
        if (!(*reinterpret_cast<unsigned char*>(&dx23) & 1)) {
            if (!(*reinterpret_cast<unsigned char*>(&dx23) & 2)) {
                *reinterpret_cast<unsigned char*>(eax22 + 0x18045cc0) = 0;
                continue;
            } else {
                *reinterpret_cast<unsigned char*>(eax22 + 0x18045dc1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(eax22 + 0x18045dc1) | 32);
                dl25 = *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(ebp4) + reinterpret_cast<unsigned char>(eax22) + 0xfffffcec);
            }
        } else {
            *reinterpret_cast<unsigned char*>(eax22 + 0x18045dc1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(eax22 + 0x18045dc1) | 16);
            dl25 = *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(ebp4) + reinterpret_cast<unsigned char>(eax22) + 0xfffffdec);
        }
        *reinterpret_cast<unsigned char*>(eax22 + 0x18045cc0) = dl25;
        ++eax22;
    } while (reinterpret_cast<unsigned char>(eax22) < reinterpret_cast<unsigned char>(esi13));
    goto addr_0x18030f7a_15;
    addr_0x18030e3c_14:
    do {
        ecx = reinterpret_cast<void**>(static_cast<uint32_t>(v26));
        eax27 = reinterpret_cast<void**>(static_cast<uint32_t>(al14));
        if (reinterpret_cast<unsigned char>(eax27) <= reinterpret_cast<unsigned char>(ecx)) {
            edi28 = reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(ebp4) + reinterpret_cast<unsigned char>(eax27) + 0xfffffeec);
            ecx29 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ecx) - reinterpret_cast<unsigned char>(eax27) + 1);
            ebx30 = ecx29;
            ecx31 = reinterpret_cast<uint32_t>(ecx29) >> 2;
            while (ecx31) {
                --ecx31;
                *edi28 = reinterpret_cast<signed char>(0x20202020);
                edi28 = edi28 + 4;
                esi13 = esi13 + 4;
            }
            ecx = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(ebx30) & 3);
            while (ecx) {
                --ecx;
                *edi28 = 32;
                ++edi28;
                ++esi13;
            }
        }
        al14 = *reinterpret_cast<unsigned char*>(&v2);
    } while (al14);
    goto addr_0x18030e73_13;
}

void** fun_18030d52(void** a1);

struct s230 {
    unsigned char f0;
    unsigned char f1;
};

struct s231 {
    void** f0;
    signed char[3] pad4;
    void** f4;
};

struct s232 {
    void** f0;
    signed char[3] pad4;
    void** f4;
};

struct s233 {
    signed char[1] pad1;
    void** f1;
};

uint32_t g18045b34 = 0;

uint32_t fun_18030ba5(void** ecx, void** a2) {
    void* ebp3;
    void** v4;
    void** ebx5;
    void** v6;
    void** esi7;
    void** v8;
    void** edi9;
    void** v10;
    void** v11;
    void** v12;
    void** v13;
    void** eax14;
    void** ebx15;
    int1_t zf16;
    void** ecx17;
    void** v18;
    int32_t edx19;
    void*** eax20;
    uint32_t esi21;
    uint32_t v22;
    int32_t ecx23;
    signed char* edi24;
    int32_t esi25;
    int32_t esi26;
    struct s230* ebx27;
    struct s230* ecx28;
    uint32_t eax29;
    uint32_t edi30;
    unsigned char dl31;
    void** eax32;
    struct s231* esi33;
    struct s232* esi34;
    void** v35;
    void** v36;
    struct s233* eax37;
    struct s233* esi38;
    int1_t zf39;
    signed char* edi40;
    int1_t below_or_equal41;
    struct s233* v42;
    void** esi43;
    void** v44;
    signed char v45;
    unsigned char v46;
    uint32_t eax47;
    unsigned char v48;
    uint32_t edx49;
    signed char v50;
    void** eax51;
    void** eax52;

    ebp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    v4 = ebx5;
    v6 = esi7;
    v8 = edi9;
    fun_1802e8ff(ecx, 25, v8, v6, v4, v10, v11, v12, v13);
    eax14 = fun_18030d52(a2);
    ebx15 = eax14;
    zf16 = ebx15 == g18045ca4;
    ecx17 = reinterpret_cast<void**>(25);
    v18 = ebx15;
    if (!zf16) {
        if (!ebx15) 
            goto addr_0x18030d31_3;
        edx19 = 0;
        eax20 = reinterpret_cast<void***>(0x18044b78);
        do {
            if (*eax20 == ebx15) 
                break;
            eax20 = eax20 + 48;
            ++edx19;
        } while (reinterpret_cast<int32_t>(eax20) < 0x18044c68);
        goto addr_0x18030bf1_7;
    } else {
        addr_0x18030bcc_8:
        esi21 = 0;
        goto addr_0x18030d43_9;
    }
    v22 = 0;
    ecx23 = 64;
    edi24 = reinterpret_cast<signed char*>(0x18045dc0);
    esi25 = edx19 + edx19 * 2;
    while (ecx23) {
        --ecx23;
        *edi24 = reinterpret_cast<signed char>(0);
        edi24 = edi24 + 4;
        esi25 = esi25 + 4;
    }
    *edi24 = 0;
    esi26 = (esi25 << 4) + 1;
    ebx27 = reinterpret_cast<struct s230*>(esi26 + 0x18044b88);
    do {
        ecx28 = ebx27;
        if (ebx27->f0) {
            do {
                if (!ecx28->f1) 
                    break;
                eax29 = static_cast<uint32_t>(ecx28->f0);
                edi30 = static_cast<uint32_t>(ecx28->f1);
                if (eax29 <= edi30) {
                    dl31 = *reinterpret_cast<unsigned char*>(v22 + 0x18044b70);
                    do {
                        *reinterpret_cast<unsigned char*>(eax29 + 0x18045dc1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(eax29 + 0x18045dc1) | dl31);
                        ++eax29;
                    } while (eax29 <= edi30);
                }
                ecx28 = reinterpret_cast<struct s230*>(&ecx28->f1 + 1);
            } while (ecx28->f0);
        }
        ++v22;
        ebx27 = ebx27 + 4;
    } while (v22 < 4);
    g18045cbc = reinterpret_cast<void**>(1);
    g18045ca4 = v18;
    eax32 = fun_18030d9c(v18, v8, v6);
    esi33 = reinterpret_cast<struct s231*>(esi26 + 0x18044b7c);
    g18045cb0 = esi33->f0;
    esi34 = reinterpret_cast<struct s232*>(&esi33->f4);
    g18045cb4 = esi34->f0;
    ecx17 = v18;
    g18045ec4 = eax32;
    g18045cb8 = esi34->f4;
    addr_0x18030d36_34:
    fun_18030df8(ecx17);
    goto addr_0x18030bcc_8;
    addr_0x18030bf1_7:
    v35 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp3) + 0xffffffe8);
    v36 = ebx15;
    eax37 = reinterpret_cast<struct s233*>(GetCPInfo(25, v36, v35));
    esi38 = reinterpret_cast<struct s233*>(1);
    if (!reinterpret_cast<int1_t>(eax37 == 1)) {
        zf39 = g18045b34 == 0;
        if (zf39) {
            esi21 = 0xffffffff;
        } else {
            addr_0x18030d31_3:
            fun_18030dcf(25);
            goto addr_0x18030d36_34;
        }
    } else {
        g18045ec4 = reinterpret_cast<void**>(0);
        ecx17 = reinterpret_cast<void**>(64);
        edi40 = reinterpret_cast<signed char*>(0x18045dc0);
        below_or_equal41 = reinterpret_cast<uint32_t>(v42) <= 1;
        while (ecx17) {
            --ecx17;
            *edi40 = reinterpret_cast<signed char>(0);
            edi40 = edi40 + 4;
            esi38 = esi38 + 2;
        }
        *edi40 = 0;
        esi43 = reinterpret_cast<void**>(&esi38->f1);
        g18045ca4 = ebx15;
        if (below_or_equal41) 
            goto addr_0x18030d15_44; else 
            goto addr_0x18030c2a_45;
    }
    addr_0x18030d43_9:
    fun_1802e960(ecx17, 25, v8, v6, v4, v44);
    return esi21;
    addr_0x18030d15_44:
    g18045cbc = reinterpret_cast<void**>(0);
    addr_0x18030d1c_46:
    g18045cb0 = reinterpret_cast<void**>(0);
    g18045cb4 = reinterpret_cast<void**>(0);
    g18045cb8 = reinterpret_cast<void**>(0);
    goto addr_0x18030d36_34;
    addr_0x18030c2a_45:
    if (v45) {
        do {
            if (!v46) 
                break;
            eax47 = static_cast<uint32_t>(v48);
            edx49 = static_cast<uint32_t>(v46);
            while (eax47 <= edx49) {
                *reinterpret_cast<unsigned char*>(eax47 + 0x18045dc1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(eax47 + 0x18045dc1) | 4);
                ++eax47;
            }
        } while (v50);
    }
    eax51 = esi43;
    do {
        *reinterpret_cast<unsigned char*>(eax51 + 0x18045dc1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(eax51 + 0x18045dc1) | 8);
        ++eax51;
    } while (reinterpret_cast<unsigned char>(eax51) < reinterpret_cast<unsigned char>(0xff));
    eax52 = fun_18030d9c(ebx15, v36, v35);
    ecx17 = ebx15;
    g18045ec4 = eax52;
    g18045cbc = esi43;
    goto addr_0x18030d1c_46;
}

void** g18045ba8 = reinterpret_cast<void**>(0);

int32_t GetStringTypeW = 0x3644c;

int32_t GetStringTypeA = 0x3643a;

uint32_t fun_1803120a(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, int32_t a8, int16_t a9, void* a10, int32_t a11) {
    void* esp12;
    void** eax13;
    void** esp14;
    void** esp15;
    void** v16;
    void** eax17;
    int32_t eax18;
    int32_t eax19;
    uint32_t eax20;
    void** eax21;
    uint32_t eax22;
    void** eax23;
    void** eax24;
    void** edi25;
    void** esi26;
    void** ebx27;
    void** v28;
    void** v29;
    void** v30;
    void** v31;
    void** eax32;

    esp12 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    eax13 = *reinterpret_cast<void***>(&g0);
    esp14 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp12) - 4 - 4 - 4 - 4);
    *reinterpret_cast<void***>(&g0) = esp14;
    esp15 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp14 - 24) - 4 - 4 - 4);
    v16 = esp15;
    eax17 = g18045ba8;
    if (!eax17) {
        eax18 = reinterpret_cast<int32_t>(GetStringTypeW(1, 0x18035920, 1, reinterpret_cast<int32_t>(esp12) - 28));
        esp15 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp15 - 4) - 4 + 4 - 4 - 4 - 4 - 4 + 4);
        if (!eax18) {
            eax19 = reinterpret_cast<int32_t>(GetStringTypeA(0, 1, 0x1803591c, 1, reinterpret_cast<int32_t>(esp12) - 28, 1, 0x18035920, 1, reinterpret_cast<int32_t>(esp12) - 28));
            if (!eax19) 
                goto addr_0x1803133f_4;
            eax17 = reinterpret_cast<void**>(2);
            esp15 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp15 - 4) - 4 - 4 - 4 - 4 - 4 + 4 - 4 + 4);
        } else {
            eax17 = reinterpret_cast<void**>(1);
        }
        g18045ba8 = eax17;
    }
    if (!reinterpret_cast<int1_t>(eax17 == 2)) {
        if (!reinterpret_cast<int1_t>(eax17 == 1)) {
            addr_0x1803133f_4:
            eax20 = 0;
        } else {
            if (!a6) {
                eax21 = g18045b1c;
                a6 = eax21;
            }
            eax22 = reinterpret_cast<uint32_t>(-a8);
            eax23 = reinterpret_cast<void**>(MultiByteToWideChar(a6, (eax22 - (eax22 + reinterpret_cast<uint1_t>(eax22 < eax22 + reinterpret_cast<uint1_t>(!!a8))) & 8) + 1, a3, a4, 0, 0));
            if (!eax23) 
                goto addr_0x1803133f_4; else 
                goto addr_0x180312dc_13;
        }
    } else {
        eax24 = a7;
        if (!eax24) {
            eax24 = g18045b0c;
        }
        eax20 = reinterpret_cast<uint32_t>(GetStringTypeA(eax24, a2, a3, a4, a5));
    }
    addr_0x18031341_17:
    *reinterpret_cast<void***>(&g0) = eax13;
    return eax20;
    addr_0x180312dc_13:
    fun_18031090(ecx, a6, (eax22 - (eax22 + reinterpret_cast<uint1_t>(eax22 < eax22 + reinterpret_cast<uint1_t>(!!a8))) & 8) + 1, a3, a4, 0, 0, edi25, esi26, ebx27, v28, v29, eax23, v30, v16, v31, eax13, 0x1802e2b4, 0x18035980, 0);
    fun_1802fe50(ecx, reinterpret_cast<uint32_t>(esp15 - 4) - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 + 4, 0, reinterpret_cast<unsigned char>(eax23) + reinterpret_cast<unsigned char>(eax23), a6, (eax22 - (eax22 + reinterpret_cast<uint1_t>(eax22 < eax22 + reinterpret_cast<uint1_t>(!!a8))) & 8) + 1, a3, a4, 0, 0);
    if (!(reinterpret_cast<uint32_t>(esp15 - 4) - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 + 4)) 
        goto addr_0x1803133f_4;
    eax32 = reinterpret_cast<void**>(MultiByteToWideChar(a6, 1, a3, a4, reinterpret_cast<uint32_t>(esp15 - 4) - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 + 4, eax23, a6, (eax22 - (eax22 + reinterpret_cast<uint1_t>(eax22 < eax22 + reinterpret_cast<uint1_t>(!!a8))) & 8) + 1, a3, a4, 0, 0));
    if (!eax32) 
        goto addr_0x1803133f_4;
    eax20 = reinterpret_cast<uint32_t>(GetStringTypeW(a2, reinterpret_cast<uint32_t>(esp15 - 4) - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 + 4, eax32, a5, a6, 1, a3, a4, reinterpret_cast<uint32_t>(esp15 - 4) - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 + 4, eax23, a6, (eax22 - (eax22 + reinterpret_cast<uint1_t>(eax22 < eax22 + reinterpret_cast<uint1_t>(!!a8))) & 8) + 1, a3, a4, 0, 0));
    goto addr_0x18031341_17;
}

void fun_180314e6(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12) {
    void** edi13;
    void** ecx14;
    void** ecx15;

    edi13 = *reinterpret_cast<void***>(a2 + 4);
    ecx14 = *reinterpret_cast<void***>(a2);
    *reinterpret_cast<void***>(a2) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2)) + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2)));
    ecx15 = *reinterpret_cast<void***>(a2 + 8);
    *reinterpret_cast<void***>(a2 + 4) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi13) + reinterpret_cast<unsigned char>(edi13) | reinterpret_cast<unsigned char>(ecx14) >> 31);
    *reinterpret_cast<void***>(a2 + 8) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx15) << 1 | reinterpret_cast<unsigned char>(edi13) >> 31);
    return;
}

uint32_t fun_18031488(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11) {
    void** v12;
    void** v13;
    uint32_t eax14;
    void** eax15;
    void** v16;
    uint32_t eax17;
    void** eax18;
    void** v19;
    void** v20;
    uint32_t eax21;
    void** eax22;
    void** v23;
    void** v24;
    uint32_t eax25;

    v12 = *reinterpret_cast<void***>(a2);
    v13 = *reinterpret_cast<void***>(a1);
    eax14 = fun_18031467(v13, v12, a1);
    if (eax14 && (eax15 = a1 + 4, v16 = *reinterpret_cast<void***>(eax15), eax17 = fun_18031467(v16, 1, eax15), !!eax17)) {
        *reinterpret_cast<void***>(a1 + 8) = *reinterpret_cast<void***>(a1 + 8) + 1;
    }
    eax18 = a1 + 4;
    v19 = *reinterpret_cast<void***>(a2 + 4);
    v20 = *reinterpret_cast<void***>(eax18);
    eax21 = fun_18031467(v20, v19, eax18);
    if (eax21) {
        *reinterpret_cast<void***>(a1 + 8) = *reinterpret_cast<void***>(a1 + 8) + 1;
    }
    eax22 = a1 + 8;
    v23 = *reinterpret_cast<void***>(a2 + 8);
    v24 = *reinterpret_cast<void***>(eax22);
    eax25 = fun_18031467(v24, v23, eax22);
    return eax25;
}

void fun_18031f41(struct s7* a1, void** a2) {
    void* ebp3;
    void** v4;
    void** ebx5;
    void** ebx6;
    void** v7;
    void** esi8;
    struct s7* esi9;
    uint32_t ecx10;
    void** eax11;
    void** v12;
    void** edi13;
    void** v14;
    uint96_t v15;
    void* eax16;
    void** ecx17;
    uint32_t edi18;
    void* edx19;
    void* v20;
    void** eax21;
    void** v22;
    void* v23;
    void** v24;
    uint16_t* v25;
    void** v26;
    void** v27;
    void** eax28;
    void** v29;
    uint32_t eax30;
    void* v31;
    void* eax32;
    void* ebx33;
    void* eax34;
    uint1_t cf35;

    ebp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    v4 = ebx5;
    ebx6 = a2;
    v7 = esi8;
    esi9 = a1;
    *reinterpret_cast<void***>(&ecx10) = *reinterpret_cast<void***>(ebx6 + 10);
    eax11 = reinterpret_cast<void**>(0);
    v12 = edi13;
    v14 = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(&v15) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v15) + 4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v15) + 8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<uint16_t*>(&eax11) = esi9->f10;
    eax16 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(eax11) & 0x7fff);
    ecx17 = reinterpret_cast<void**>(ecx10 & 0x7fff);
    edi18 = (ecx10 ^ reinterpret_cast<unsigned char>(eax11)) & 0x8000;
    edx19 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ecx17) + reinterpret_cast<uint32_t>(eax16));
    v20 = edx19;
    if (*reinterpret_cast<uint16_t*>(&eax16) >= 0x7fff) 
        goto addr_0x18032141_2;
    if (*reinterpret_cast<uint16_t*>(&ecx17) >= 0x7fff) 
        goto addr_0x18032141_2;
    if (*reinterpret_cast<uint16_t*>(&edx19) > 0xbffd) 
        goto addr_0x18032141_2;
    if (*reinterpret_cast<uint16_t*>(&edx19) <= 0x3fbf) {
        goto addr_0x18031fe4_7;
    }
    if (*reinterpret_cast<uint16_t*>(&eax16) || (v20 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(v20) + 1), !!(reinterpret_cast<unsigned char>(esi9->f8) & 0x7fffffff))) {
        goto addr_0x18031fce_10;
    }
    eax21 = reinterpret_cast<void**>(0);
    if (esi9->f4 || esi9->f0) {
        addr_0x18031fce_10:
        if (*reinterpret_cast<uint16_t*>(&ecx17) || ((v20 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(v20) + 1), !!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx6 + 8)) & 0x7fffffff)) || (*reinterpret_cast<void***>(ebx6 + 4) || *reinterpret_cast<void***>(ebx6)))) {
            v22 = reinterpret_cast<void**>(0);
            v23 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(ebp3) - 32);
            v24 = reinterpret_cast<void**>(5);
            do {
                if (reinterpret_cast<signed char>(v24) > reinterpret_cast<signed char>(0)) {
                    v25 = reinterpret_cast<uint16_t*>(reinterpret_cast<unsigned char>(v22) + reinterpret_cast<unsigned char>(v22) + reinterpret_cast<uint32_t>(esi9));
                    v26 = ebx6 + 8;
                    v27 = v24;
                    do {
                        eax28 = reinterpret_cast<void**>(*v25 * reinterpret_cast<uint16_t>(*reinterpret_cast<void***>(v26)));
                        ecx17 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(v23) + 0xfffffffc);
                        eax30 = fun_18031467(v29, eax28, ecx17);
                        if (eax30) {
                        }
                        ++v25;
                        v26 = v26 - 2;
                        --v27;
                    } while (v27);
                }
                v23 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(v23) + 2);
                ++v22;
                --v24;
            } while (reinterpret_cast<signed char>(v24) > reinterpret_cast<signed char>(0));
            v31 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(v20) + 0xc002);
            if (*reinterpret_cast<int16_t*>(&v31) > 0) 
                goto addr_0x18032073_20;
        } else {
            addr_0x18031fe4_7:
            esi9->f8 = reinterpret_cast<void**>(0);
            esi9->f4 = reinterpret_cast<void**>(0);
            esi9->f0 = reinterpret_cast<void**>(0);
            goto addr_0x1803215c_21;
        }
    } else {
        goto addr_0x1803213b_23;
    }
    addr_0x18032098_24:
    v31 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(v31) + 0xffff);
    if (*reinterpret_cast<int16_t*>(&v31) >= 0) {
        addr_0x180320d1_25:
        if (*reinterpret_cast<uint16_t*>(&v15) > 0x8000 || !1) {
            if (1) {
                *reinterpret_cast<uint32_t*>(reinterpret_cast<int32_t>(&v15) + 2) = *reinterpret_cast<uint32_t*>(reinterpret_cast<int32_t>(&v15) + 2) + 1;
            } else {
                *reinterpret_cast<uint32_t*>(reinterpret_cast<int32_t>(&v15) + 2) = 0;
                if (1) {
                    *reinterpret_cast<uint32_t*>(reinterpret_cast<int32_t>(&v15) + 6) = *reinterpret_cast<uint32_t*>(reinterpret_cast<int32_t>(&v15) + 6) + 1;
                } else {
                    *reinterpret_cast<uint32_t*>(reinterpret_cast<int32_t>(&v15) + 6) = 0;
                    if (*reinterpret_cast<int16_t*>(reinterpret_cast<int32_t>(&v15) + 10) != -1) {
                        *reinterpret_cast<int16_t*>(reinterpret_cast<int32_t>(&v15) + 10) = reinterpret_cast<int16_t>(*reinterpret_cast<int16_t*>(reinterpret_cast<int32_t>(&v15) + 10) + 1);
                    } else {
                        v31 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(v31) + 1);
                        *reinterpret_cast<int16_t*>(reinterpret_cast<int32_t>(&v15) + 10) = 0x8000;
                    }
                }
            }
        }
    } else {
        eax32 = reinterpret_cast<void*>(-static_cast<int32_t>(*reinterpret_cast<int16_t*>(&v31)));
        v31 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(v31) + reinterpret_cast<uint32_t>(eax32));
        ebx33 = eax32;
        do {
            if (!1) {
                ++v14;
            }
            fun_18031514(ecx17, reinterpret_cast<int32_t>(ebp3) + 0xffffffdc);
            ebx33 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebx33) - 1);
            ecx17 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp3) + 0xffffffdc);
        } while (ebx33);
        if (!v14) 
            goto addr_0x180320d1_25; else 
            goto addr_0x180320cd_38;
    }
    eax34 = v31;
    if (*reinterpret_cast<uint16_t*>(&eax34) >= 0x7fff) {
        addr_0x18032141_2:
        cf35 = reinterpret_cast<uint1_t>(!!*reinterpret_cast<int16_t*>(&edi18));
        *reinterpret_cast<int16_t*>(&edi18) = -*reinterpret_cast<int16_t*>(&edi18);
        esi9->f4 = reinterpret_cast<void**>(0);
        esi9->f0 = reinterpret_cast<void**>(0);
        esi9->f8 = reinterpret_cast<void**>((edi18 - (edi18 + reinterpret_cast<uint1_t>(edi18 < edi18 + cf35)) & 0x80000000) + 0x7fff8000);
    } else {
        eax21 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(eax34) | edi18);
        esi9->f0 = *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v15) + 2);
        esi9->f2 = *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v15) + 4);
        esi9->f6 = *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v15) + 8);
        goto addr_0x1803213b_23;
    }
    addr_0x1803215c_21:
    return;
    addr_0x1803213b_23:
    esi9->f10 = *reinterpret_cast<uint16_t*>(&eax21);
    goto addr_0x1803215c_21;
    addr_0x180320cd_38:
    *reinterpret_cast<unsigned char*>(&v15) = 1;
    goto addr_0x180320d1_25;
    do {
        addr_0x18032073_20:
        if (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&v15) + 11) & 0x80) 
            break;
        fun_180314e6(ecx17, reinterpret_cast<int32_t>(ebp3) + 0xffffffdc, v12, v7, v4, 0, 0, 0, v27, 0, v22, v26);
        v31 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(v31) + 0xffff);
        ecx17 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp3) + 0xffffffdc);
    } while (*reinterpret_cast<int16_t*>(&v31) > 0);
    if (*reinterpret_cast<int16_t*>(&v31) > 0) 
        goto addr_0x180320d1_25; else 
        goto addr_0x18032098_24;
}

void fun_18031514(void** ecx, void** a2) {
    void** edx3;
    void** edi4;
    void** ecx5;

    edx3 = *reinterpret_cast<void***>(a2 + 8);
    edi4 = *reinterpret_cast<void***>(a2 + 4);
    *reinterpret_cast<void***>(a2 + 4) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 4)) >> 1 | reinterpret_cast<unsigned char>(edx3) << 31);
    ecx5 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2)) >> 1 | reinterpret_cast<unsigned char>(edi4) << 31);
    *reinterpret_cast<void***>(a2 + 8) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx3) >> 1);
    *reinterpret_cast<void***>(a2) = ecx5;
    return;
}

struct s234 {
    signed char[4] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

void fun_18032800(struct s234* a1, void** a2, void*** a3);

int16_t fun_180327a0(void** a1, void* a2, void** a3, void*** a4) {
    void* eax5;

    fun_18032800(reinterpret_cast<int32_t>(__zero_stack_offset()) - 12 - 4 - 4 + 8, a3, a4);
    eax5 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a1) - reinterpret_cast<unsigned char>(a1));
    if (eax5 != a2) {
        if (reinterpret_cast<unsigned char>(a1) < reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(a1) + reinterpret_cast<uint32_t>(a2))) {
            *reinterpret_cast<void***>(a1) = reinterpret_cast<void**>(0);
        }
        return *reinterpret_cast<int16_t*>(&eax5);
    } else {
        return -1;
    }
}

int32_t fun_1802cbf7(void** a1, void** a2, void* a3);

int32_t fun_18032fea(void** a1, void* a2, void** a3, int32_t a4, int32_t a5) {
    int32_t eax6;
    void** v7;
    void** esi8;

    eax6 = fun_1802cbf7(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe0, a3, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 20);
    v7 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(a2) - 1);
    if (reinterpret_cast<signed char>(v7) < reinterpret_cast<signed char>(0)) {
        fun_1802cadf(0, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe0, esi8, a1, v7, a1, 66);
    } else {
        *reinterpret_cast<void***>(a1) = reinterpret_cast<void**>(0);
    }
    return eax6;
}

signed char* __image_base = reinterpret_cast<signed char*>(0x1804563e);

int16_t fun_180325a0(uint32_t a1) {
    uint32_t eax2;
    signed char* ecx3;
    uint32_t eax4;

    eax2 = a1;
    ecx3 = __image_base;
    *reinterpret_cast<signed char*>(&eax2) = ecx3[eax2 * 2];
    eax4 = eax2 & 2;
    return *reinterpret_cast<int16_t*>(&eax4);
}

int16_t fun_18032540(uint32_t a1) {
    uint32_t eax2;
    signed char* ecx3;
    uint32_t eax4;

    eax2 = a1;
    ecx3 = __image_base;
    *reinterpret_cast<signed char*>(&eax2) = ecx3[eax2 * 2];
    eax4 = eax2 & 8;
    return *reinterpret_cast<int16_t*>(&eax4);
}

int16_t fun_18032580(uint32_t a1);

int16_t fun_180325c0(uint32_t a1) {
    uint32_t eax2;

    fun_18032580(a1);
    eax2 = a1 + 32;
    if (!1) {
        eax2 = a1;
    }
    return *reinterpret_cast<int16_t*>(&eax2);
}

int16_t fun_180326e0(void** a1, void** a2, uint32_t a3) {
    void** esi4;
    void** ebp5;
    void** ecx6;
    uint32_t edi7;
    void** eax8;
    void** ecx9;
    void** eax10;
    void** eax11;
    void** esi12;
    void** edi13;
    void** dl14;
    void** eax15;
    void** eax16;

    esi4 = a1;
    if (esi4) {
        ebp5 = a2;
        ecx6 = ebp5;
        if (esi4) {
            edi7 = a3;
            do {
                eax8 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi4) / edi7);
                ++ecx6;
                esi4 = eax8;
                *reinterpret_cast<void***>(ecx6 + 0xffffffff) = *reinterpret_cast<void***>(reinterpret_cast<unsigned char>(esi4) - reinterpret_cast<unsigned char>(eax8) * edi7 + reinterpret_cast<int32_t>("0123456789abcdefghijklmnopqrstuvwxyz"));
            } while (!reinterpret_cast<uint1_t>(static_cast<uint32_t>(reinterpret_cast<uint1_t>(eax8 == 0))));
        }
        *reinterpret_cast<void***>(ecx6) = reinterpret_cast<void**>(0);
        ecx9 = ecx6 - 1;
        eax10 = ebp5;
        if (reinterpret_cast<unsigned char>(ebp5) >= reinterpret_cast<unsigned char>(ecx9)) {
            eax11 = ebp5;
            return *reinterpret_cast<int16_t*>(&eax11);
        } else {
            do {
                esi12 = ecx9;
                edi13 = eax10;
                ++eax10;
                --ecx9;
                dl14 = *reinterpret_cast<void***>(edi13);
                *reinterpret_cast<void***>(edi13) = *reinterpret_cast<void***>(esi12);
                *reinterpret_cast<void***>(esi12) = dl14;
            } while (reinterpret_cast<unsigned char>(eax10) < reinterpret_cast<unsigned char>(ecx9));
            eax15 = ebp5;
            return *reinterpret_cast<int16_t*>(&eax15);
        }
    } else {
        eax16 = a2;
        *reinterpret_cast<void***>(eax16) = reinterpret_cast<void**>(48);
        *reinterpret_cast<void***>(eax16 + 1) = reinterpret_cast<void**>(0);
        return *reinterpret_cast<int16_t*>(&eax16);
    }
}

int16_t fun_180325e0(signed char* a1) {
    signed char* edi2;
    signed char* esi3;
    signed char bl4;
    uint32_t eax5;
    signed char* eax6;

    edi2 = a1;
    esi3 = edi2;
    while (bl4 = *esi3, !!bl4) {
        eax5 = reinterpret_cast<uint32_t>(static_cast<int32_t>(bl4));
        *reinterpret_cast<int16_t*>(&eax5) = fun_180325a0(eax5);
        if (eax5) {
            *esi3 = reinterpret_cast<signed char>(bl4 - 32);
        }
        ++esi3;
    }
    eax6 = edi2;
    return *reinterpret_cast<int16_t*>(&eax6);
}

int16_t fun_1800da40(void** a1) {
    int32_t eax2;
    int32_t v3;

    __asm__("fnstcw word [ebp-0x4]");
    __asm__("fldcw word [ebp-0x2]");
    __asm__("fld dword [ebp+0x8]");
    __asm__("fistp dword [ebp-0x8]");
    __asm__("fldcw word [ebp-0x4]");
    eax2 = v3;
    return *reinterpret_cast<int16_t*>(&eax2);
}

void fun_18032e90(struct s234* a1, void** a2, void** a3, signed char a4, void** a5, void** a6) {
    void** ebp7;
    void** edi8;
    struct s234* eax9;
    void** dl10;
    uint32_t esi11;
    void** esi12;
    void** edi13;
    void** esi14;
    struct s234* eax15;
    void** ebx16;
    void* edi17;
    void** dl18;
    uint32_t esi19;

    ebp7 = a3;
    edi8 = a5;
    if (reinterpret_cast<signed char>(edi8) < reinterpret_cast<signed char>(ebp7)) {
        edi8 = ebp7;
    }
    if (!a4) {
        eax9 = a1;
        if (reinterpret_cast<unsigned char>(edi8) - reinterpret_cast<unsigned char>(ebp7)) {
            dl10 = a6;
            esi11 = reinterpret_cast<unsigned char>(edi8) - reinterpret_cast<unsigned char>(ebp7) - 1 + 1;
            do {
                if (reinterpret_cast<unsigned char>(eax9->f8) < reinterpret_cast<unsigned char>(eax9->f4)) {
                    *reinterpret_cast<void***>(eax9->f8) = dl10;
                    eax9->f8 = eax9->f8 + 1;
                }
                --esi11;
            } while (esi11);
        }
        esi12 = a2;
        if (ebp7) {
            edi13 = ebp7;
            do {
                ++esi12;
                if (reinterpret_cast<unsigned char>(eax9->f8) < reinterpret_cast<unsigned char>(eax9->f4)) {
                    *reinterpret_cast<void***>(eax9->f8) = *reinterpret_cast<void***>(esi12);
                    eax9->f8 = eax9->f8 + 1;
                }
                --edi13;
            } while (edi13);
        }
    } else {
        esi14 = a2;
        eax15 = a1;
        if (ebp7) {
            ebx16 = ebp7;
            do {
                ++esi14;
                if (reinterpret_cast<unsigned char>(eax15->f8) < reinterpret_cast<unsigned char>(eax15->f4)) {
                    *reinterpret_cast<void***>(eax15->f8) = *reinterpret_cast<void***>(esi14);
                    eax15->f8 = eax15->f8 + 1;
                }
                --ebx16;
            } while (ebx16);
        }
        edi17 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(edi8) - reinterpret_cast<unsigned char>(ebp7));
        if (edi17) {
            dl18 = a6;
            esi19 = reinterpret_cast<uint32_t>(edi17) - 1 + 1;
            do {
                if (reinterpret_cast<unsigned char>(eax15->f8) < reinterpret_cast<unsigned char>(eax15->f4)) {
                    *reinterpret_cast<void***>(eax15->f8) = dl18;
                    eax15->f8 = eax15->f8 + 1;
                }
                --esi19;
            } while (esi19);
            return;
        }
    }
    return;
}

void** g18045878 = reinterpret_cast<void**>(0);

void fun_1800a890(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14);

int16_t fun_18009f20(void** ecx, void** a2, void** a3) {
    void** esi4;
    void** ecx5;
    void** v6;
    int1_t zf7;
    void** ecx8;
    void** ecx9;
    void** ecx10;
    void** eax11;
    void** eax12;
    void** edx13;
    void** edi14;
    void** eax15;
    void** ecx16;
    void** eax17;
    void** v18;
    void** eax19;
    void** edx20;
    int32_t esi21;
    void** eax22;
    void** edi23;
    void** ecx24;
    uint32_t ecx25;
    void** edi26;
    void** edx27;
    void** ecx28;
    void** ecx29;

    esi4 = ecx;
    if (a2 != *reinterpret_cast<void***>(esi4 + 2)) {
        if (!a2) {
            if (*reinterpret_cast<void***>(esi4 + 0x14c)) {
                ecx5 = *reinterpret_cast<void***>(esi4 + 0x154);
                v6 = *reinterpret_cast<void***>(esi4 + 0x14c);
                fun_1800d690(ecx5, v6);
                *reinterpret_cast<void***>(esi4 + 0x14c) = reinterpret_cast<void**>(0);
            }
            zf7 = esi4 == g18045878;
            if (zf7) {
                g18045878 = reinterpret_cast<void**>(0);
            }
            ecx8 = *reinterpret_cast<void***>(esi4 + 0x110);
            if (ecx8) {
                fun_1800cb00(ecx8, 0x7fff0000, 0, 1);
            }
            ecx9 = *reinterpret_cast<void***>(esi4 + 0x10c);
            if (ecx9) {
                fun_1800cb00(ecx9, 0x7fff0000, 0, 1);
            }
            ecx10 = *reinterpret_cast<void***>(esi4 + 0x110);
            if (ecx10 && (eax11 = *reinterpret_cast<void***>(ecx10), eax12 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax11 + 12)()), !!eax12) || (ecx10 = *reinterpret_cast<void***>(esi4 + 0x10c), !!ecx10) && (edx13 = *reinterpret_cast<void***>(ecx10), eax12 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx13 + 12)()), !!eax12)) {
                fun_18009260(ecx10, eax12, edi14);
                return 1;
            } else {
                *reinterpret_cast<void***>(esi4 + 2) = reinterpret_cast<void**>(0);
            }
        } else {
            *reinterpret_cast<void***>(esi4 + 2) = reinterpret_cast<void**>(1);
            eax15 = g18045878;
            if (!eax15) {
                g18045878 = esi4;
            } else {
                ecx = *reinterpret_cast<void***>(esi4 + 3);
                if (!ecx && esi4 != eax15) {
                    fun_18009260(ecx, 9, edi14);
                    return 4;
                }
            }
            ecx16 = *reinterpret_cast<void***>(esi4 + 0x10c);
            if (ecx16 && (eax17 = *reinterpret_cast<void***>(ecx16), v18 = a3, eax19 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax17 + 8)()), !!eax19) || (ecx16 = *reinterpret_cast<void***>(esi4 + 0x110), !!ecx16) && (edx20 = *reinterpret_cast<void***>(ecx16), v18 = a3, eax19 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx20 + 8)()), !!eax19)) {
                fun_18009260(ecx16, eax19, v18);
                goto esi21;
            } else {
                eax22 = *reinterpret_cast<void***>(esi4 + 8);
                edi23 = reinterpret_cast<void**>(0);
                if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax22) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax22 == 0))) {
                    do {
                        ecx24 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi4 + 12) + reinterpret_cast<unsigned char>(edi23) * 4);
                        if (*reinterpret_cast<void***>(ecx24 + 0x2c4) && ((!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx24 + 0x288) == 0x7fff0000) || *reinterpret_cast<void***>(ecx24 + 0x1ac)) && !*reinterpret_cast<void***>(ecx24 + 0x284))) {
                            fun_18007240(ecx24, 1);
                        }
                        eax22 = *reinterpret_cast<void***>(esi4 + 8);
                        ++edi23;
                    } while (reinterpret_cast<signed char>(edi23) < reinterpret_cast<signed char>(eax22));
                }
                fun_1800a0f0(esi4);
                ecx25 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi4 + 80)) & 15;
                if (*reinterpret_cast<signed char*>(&ecx25) == 15) {
                    eax22 = *reinterpret_cast<void***>(esi4 + 8);
                    edi26 = reinterpret_cast<void**>(0);
                    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax22) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax22 == 0))) {
                        do {
                            edx27 = *reinterpret_cast<void***>(esi4 + 12);
                            ecx28 = *reinterpret_cast<void***>(edx27 + reinterpret_cast<unsigned char>(edi26) * 4);
                            fun_18007240(ecx28, 1);
                            eax22 = *reinterpret_cast<void***>(esi4 + 8);
                            ++edi26;
                        } while (reinterpret_cast<signed char>(edi26) < reinterpret_cast<signed char>(eax22));
                    }
                } else {
                    *reinterpret_cast<void***>(esi4 + 76) = reinterpret_cast<void**>(1);
                }
                fun_1800a220(esi4);
                ecx29 = *reinterpret_cast<void***>(esi4 + 0x154);
                *reinterpret_cast<int16_t*>(&eax22) = fun_1800d5f0(ecx29, 50, fun_1800a890, esi4);
                *reinterpret_cast<void***>(esi4 + 0x14c) = eax22;
                return 0;
            }
        }
    }
    return 0;
}

int16_t QSWaveMixActivate(void** a1, int32_t a2) {
    int32_t eax3;
    int32_t v4;
    int32_t eax5;
    int32_t eax6;

    *reinterpret_cast<int16_t*>(&eax3) = fun_180010c0(a1);
    if (!*reinterpret_cast<unsigned char*>(&eax3)) {
        fun_1800a1e0(a1);
        *reinterpret_cast<unsigned char*>(&eax3) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(!!a2));
        v4 = eax3;
        *reinterpret_cast<int16_t*>(&eax5) = fun_18009f20(a1, *reinterpret_cast<void***>(&v4), 0);
        fun_1800a200(a1);
        eax6 = eax5;
        return *reinterpret_cast<int16_t*>(&eax6);
    } else {
        return 5;
    }
}

int32_t IsBadReadPtr = 0x35e96;

signed char fun_18001350(void** ecx, void** a2) {
    int32_t edi3;
    int32_t eax4;
    int32_t eax5;
    int32_t eax6;
    int32_t edi7;

    if (a2) {
        edi3 = IsBadReadPtr;
        eax4 = reinterpret_cast<int32_t>(edi3());
        if (eax4 || (*reinterpret_cast<void***>(a2) != 1 && (*reinterpret_cast<void***>(a2) != 3 && (eax5 = 0, *reinterpret_cast<void***>(&eax5) = *reinterpret_cast<void***>(a2 + 16), eax6 = reinterpret_cast<int32_t>(edi3(a2, eax5 + 18)), !!eax6)) || *reinterpret_cast<void***>(a2 + 2) != 1 && !reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a2 + 2) == 2))) {
            fun_18009260(ecx, 50, a2);
            goto edi7;
        } else {
            goto edi7;
        }
    } else {
        return 0;
    }
}

signed char fun_18027310(void** a1, void** a2);

void fun_18007140(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41) {
    void** ebp42;
    void** v43;
    signed char al44;
    void** eax45;
    void** eax46;
    void** edi47;
    void** esi48;
    void** ebp49;
    void** ebx50;
    signed char bl51;
    uint32_t ecx52;
    uint32_t edx53;

    ebp42 = a3;
    v43 = *reinterpret_cast<void***>(ecx + 0x1ac);
    al44 = fun_18027310(ebp42, v43);
    if (*reinterpret_cast<void***>(ecx + 0x288) != a2 || (!al44 || *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x198) + 2) != static_cast<unsigned char>(reinterpret_cast<uint1_t>(!!*reinterpret_cast<void***>(ecx + 0x284))))) {
        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx + 0x288) == 0x7fff0000) || (eax45 = *reinterpret_cast<void***>(ecx + 0x1ac), *reinterpret_cast<signed char*>(&a3) = 0, !!eax45)) {
            *reinterpret_cast<signed char*>(&a3) = 1;
        }
        fun_18007240(ecx, 0);
        *reinterpret_cast<void***>(ecx + 0x288) = a2;
        if (!al44) {
            eax46 = *reinterpret_cast<void***>(ecx + 0x1ac);
            fun_1802b2b0(ecx, eax46, edi47, esi48, ebp49, ebx50, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41);
            *reinterpret_cast<int16_t*>(&eax46) = fun_18027290(ecx, ebp42, edi47, esi48, ebp49);
            *reinterpret_cast<void***>(ecx + 0x1ac) = eax46;
        }
        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx + 0x288) == 0x7fff0000) || *reinterpret_cast<void***>(ecx + 0x1ac)) {
            bl51 = 1;
        } else {
            bl51 = 0;
        }
        if (*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x198) + 2)) {
            if (bl51 || (ecx52 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x198) + 80)) & 15, *reinterpret_cast<signed char*>(&ecx52) == 15)) {
                fun_18007240(ecx, 1);
            }
            edx53 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x198) + 80)) & 15;
            if (*reinterpret_cast<signed char*>(&edx53) != 15 && *reinterpret_cast<signed char*>(&a3) != bl51) {
                *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x198) + 76) = reinterpret_cast<void**>(1);
            }
        }
    }
    return;
}

int16_t QSWaveMixEnableChannel(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31) {
    int16_t ax32;
    void* esp33;
    void** v34;
    void* esp35;
    void** ecx36;
    void** eax37;
    void** esi38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** eax57;

    ax32 = fun_180010c0(a1);
    esp33 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 + 4 + 4);
    if (!*reinterpret_cast<signed char*>(&ax32)) {
        *reinterpret_cast<signed char*>(&v34) = 0;
        fun_1800c750(reinterpret_cast<int32_t>(esp33) + 4, a4);
        esp35 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp33) - 4 - 4 + 4 + 4);
        ecx36 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp35) + 4);
        eax37 = a2;
        *reinterpret_cast<int16_t*>(&eax37) = fun_18001520(ecx36, a1, eax37, a3, ecx36, esi38, 0, v39, v40, v41, v42, v43, v44, v45, v46, v47, v34, __return_address(), a1, a2, a3, a4, a5);
        fun_1800c670(reinterpret_cast<int32_t>(esp35) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 4, esi38, 0, v48, v49, v50, v51, v52, v53, v54, v55, v56, v34, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31);
        eax57 = eax37;
        return *reinterpret_cast<int16_t*>(&eax57);
    } else {
        return 5;
    }
}

int16_t fun_180065f0(void** ecx, uint32_t a2, void** a3) {
    int32_t eax4;
    void** ecx5;
    void** eax6;
    int16_t ax7;

    *reinterpret_cast<int16_t*>(&eax4) = fun_180063b0(a2);
    ecx5 = *reinterpret_cast<void***>(ecx + 12);
    eax6 = *reinterpret_cast<void***>(ecx + 8);
    ax7 = fun_18006580(ecx5, ecx5, eax6, a2, a3, eax4, reinterpret_cast<int32_t>(__zero_stack_offset()) - 16 - 4 - 4 - 4 - 4 + 4 + 4 + 8);
    return ax7;
}

int16_t fun_180066a0(void** ecx, uint32_t a2, void** a3) {
    int32_t eax4;
    void** edx5;
    void** ecx6;
    int16_t ax7;

    *reinterpret_cast<int16_t*>(&eax4) = fun_180063b0(a2);
    edx5 = *reinterpret_cast<void***>(ecx + 12);
    ecx6 = *reinterpret_cast<void***>(ecx + 8);
    ax7 = fun_18006580(ecx6, edx5, ecx6, a2, a3, eax4, reinterpret_cast<int32_t>(__zero_stack_offset()) - 16 - 4 - 4 - 4 - 4 + 4 + 4 + 8);
    return ax7;
}

int16_t fun_18006640(void** ecx, uint32_t a2, void** a3) {
    int32_t eax4;
    void** edx5;
    void** ecx6;
    int16_t ax7;

    *reinterpret_cast<int16_t*>(&eax4) = fun_180063b0(a2);
    edx5 = *reinterpret_cast<void***>(ecx + 12);
    ecx6 = *reinterpret_cast<void***>(ecx + 8);
    ax7 = fun_18006580(ecx6, edx5, ecx6, a2, a3, eax4, reinterpret_cast<int32_t>(__zero_stack_offset()) - 16 - 4 - 4 - 4 - 4 + 4 + 4 + 8);
    return ax7;
}

int16_t fun_18006700(void** ecx, uint32_t a2, void** a3) {
    int32_t eax4;
    void** edx5;
    void** ecx6;
    int16_t ax7;

    *reinterpret_cast<int16_t*>(&eax4) = fun_180063b0(a2);
    edx5 = *reinterpret_cast<void***>(ecx + 12);
    ecx6 = *reinterpret_cast<void***>(ecx + 8);
    ax7 = fun_18006580(ecx6, edx5, ecx6, a2, a3, eax4, reinterpret_cast<int32_t>(__zero_stack_offset()) - 16 - 4 - 4 - 4 - 4 + 4 + 4 + 8);
    return ax7;
}

void fun_180061a0(void** ecx, void** a2) {
    void** v3;
    void** ebx4;
    void** v5;
    void** esi6;
    void** esi7;
    void** ebx8;
    void** v9;
    void** ebp10;
    void** v11;
    void** edi12;
    void** eax13;
    void** edx14;
    void** v15;
    void** ecx16;
    void** edi17;
    void** eax18;

    v3 = ebx4;
    v5 = esi6;
    esi7 = ecx;
    ebx8 = *reinterpret_cast<void***>(esi7 + 28);
    if (ebx8 != esi7 + 28) {
        v9 = ebp10;
        v11 = edi12;
        do {
            eax13 = ebx8;
            ebx8 = *reinterpret_cast<void***>(ebx8);
            edx14 = *reinterpret_cast<void***>(eax13 + 8);
            v15 = ebx8;
            if (*reinterpret_cast<void***>(edx14 + 0x19c) == a2) {
                ecx16 = *reinterpret_cast<void***>(esi7 + 28);
                edi17 = esi7 + 28;
                if (ecx16 != edi17) {
                    do {
                        if (*reinterpret_cast<void***>(ecx16 + 8) != edx14) {
                            ecx16 = *reinterpret_cast<void***>(ecx16);
                        } else {
                            eax18 = ecx16;
                            ecx16 = *reinterpret_cast<void***>(ecx16);
                            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax18 + 4)) = *reinterpret_cast<void***>(eax18);
                            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax18) + 4) = *reinterpret_cast<void***>(eax18 + 4);
                            *reinterpret_cast<void***>(eax18) = *reinterpret_cast<void***>(esi7 + 40);
                            ebx8 = v15;
                            *reinterpret_cast<void***>(esi7 + 40) = eax18;
                            *reinterpret_cast<void***>(esi7 + 24) = *reinterpret_cast<void***>(esi7 + 24) - 1;
                        }
                    } while (ecx16 != edi17);
                }
                fun_1800a290(esi7, edx14, 1, v11, v9, v5, v3, v15);
            }
        } while (ebx8 != esi7 + 28);
    }
    fun_18006760(esi7);
    return;
}

void fun_1800ce00(void** ecx) {
    void** eax2;
    void** ecx3;

    eax2 = *reinterpret_cast<void***>(ecx + 68);
    ecx3 = *reinterpret_cast<void***>(eax2);
    *reinterpret_cast<void***>(ecx3 + 8)();
    goto eax2;
}

void fun_180088a0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** ecx7;
    unsigned char al8;
    void** esi9;
    void** eax10;

    if (!*reinterpret_cast<void***>(ecx + 0x2cc) || (ecx7 = (*reinterpret_cast<struct s11**>(ecx + 0x2d0))->f8, al8 = fun_1800c3e0(ecx7), al8 == 0)) {
        *reinterpret_cast<void***>(ecx + 0x248) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(ecx + 0x394) = a2;
        *reinterpret_cast<void***>(ecx + 0x244) = reinterpret_cast<void**>(0);
        return;
    } else {
        *reinterpret_cast<void***>(ecx + 0x244) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a2) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 0x394)));
        eax10 = fun_18008970(ecx, esi9, __return_address(), a2, a3, a4, a5, a6);
        if (!reinterpret_cast<int1_t>(eax10 == 0xffffffff)) {
            *reinterpret_cast<void***>(ecx + 0x248) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax10) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 0x394)));
            return;
        } else {
            *reinterpret_cast<void***>(ecx + 0x248) = eax10;
            return;
        }
    }
}

void** fun_18009c30(void** ecx) {
    if (!*reinterpret_cast<void***>(ecx + 0x108)) {
        return 0;
    } else {
        goto *reinterpret_cast<void***>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x108)) + 36);
    }
}

void** fun_18008860(void** ecx) {
    if (!*reinterpret_cast<void***>(ecx + 0x284)) {
        return 0;
    } else {
        goto *reinterpret_cast<void***>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x284)) + 28);
    }
}

struct s235 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

void fun_1800a750(void** ecx, struct s235* a2, void** a3) {
    void** eax4;
    void** ecx5;

    eax4 = ecx + 0x70;
    ecx5 = ecx + 0x7c;
    a2->f0 = *reinterpret_cast<void***>(eax4);
    a2->f4 = *reinterpret_cast<void***>(eax4 + 4);
    a2->f8 = *reinterpret_cast<void***>(eax4 + 8);
    *reinterpret_cast<void***>(a3) = *reinterpret_cast<void***>(ecx5);
    *reinterpret_cast<void***>(a3 + 4) = *reinterpret_cast<void***>(ecx5 + 4);
    *reinterpret_cast<void***>(a3 + 8) = *reinterpret_cast<void***>(ecx5 + 8);
    return;
}

struct s236 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

void fun_1800a790(void** ecx, struct s236* a2) {
    void** ecx3;

    ecx3 = ecx + 88;
    a2->f0 = *reinterpret_cast<void***>(ecx3);
    a2->f4 = *reinterpret_cast<void***>(ecx3 + 4);
    a2->f8 = *reinterpret_cast<void***>(ecx3 + 8);
    return;
}

struct s237 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

void fun_1800a7b0(void** ecx, struct s237* a2) {
    void** ecx3;

    ecx3 = ecx + 100;
    a2->f0 = *reinterpret_cast<void***>(ecx3);
    a2->f4 = *reinterpret_cast<void***>(ecx3 + 4);
    a2->f8 = *reinterpret_cast<void***>(ecx3 + 8);
    return;
}

void fun_1800a7e0(void** ecx) {
    __asm__("fld dword [0x18034718]");
    __asm__("fmul dword [ecx+0x90]");
    return;
}

void fun_1800c330(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18);

void fun_18008920(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14) {
    struct s11* ecx15;
    void** ecx16;

    if (*reinterpret_cast<void***>(ecx + 0x2cc)) {
        ecx15 = *reinterpret_cast<struct s11**>(ecx + 0x2d0);
        ecx16 = ecx15->f8;
        fun_1800c330(ecx16, a2, a3, a4, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
        return;
    } else {
        *reinterpret_cast<void***>(a2) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(a3) = reinterpret_cast<void**>(0);
        return;
    }
}

void** fun_1802ca65(void** a1, void** a2) {
    void** v3;
    void** eax4;
    void** ecx5;
    int32_t eax6;

    v3 = reinterpret_cast<void**>(__return_address());
    if (reinterpret_cast<unsigned char>(a1) > reinterpret_cast<unsigned char>(0xffffffe0)) {
        addr_0x1802ca8e_2:
        eax4 = reinterpret_cast<void**>(0);
    } else {
        do {
            eax4 = fun_1802ca91(ecx5, v3, v3, a1, a2);
            if (eax4) 
                break;
            if (a2 == eax4) 
                break;
            eax6 = fun_1803077d(v3);
            ecx5 = v3;
        } while (eax6);
        goto addr_0x1802ca8e_2;
    }
    return eax4;
}

int32_t fun_1802b2c9(void** a1, void** a2, void** a3) {
    int32_t eax4;
    void** esi5;

    eax4 = fun_1802cbf7(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe0, a2, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 16);
    if (0) {
        fun_1802cadf(0, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe0, esi5, a1, 0x7ffffffe, a1, 66);
    } else {
        *reinterpret_cast<void***>(a1) = reinterpret_cast<void**>(0);
    }
    return eax4;
}

void** fun_18009250(void** ecx) {
    void** eax2;

    eax2 = g1804587c;
    g1804587c = reinterpret_cast<void**>(0);
    return eax2;
}

void fun_180073a0(void** ecx) {
    void** eax2;
    uint32_t ebx3;
    void** ecx4;

    eax2 = *reinterpret_cast<void***>(ecx + 0x198);
    *reinterpret_cast<void***>(ecx + 0x2c4) = reinterpret_cast<void**>(1);
    if (*reinterpret_cast<void***>(eax2 + 2)) {
        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx + 0x288) == 0x7fff0000) || (*reinterpret_cast<void***>(ecx + 0x1ac) || (ebx3 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax2 + 80)) & 15, *reinterpret_cast<signed char*>(&ebx3) == 15))) {
            fun_18007240(ecx, 1);
        } else {
            *reinterpret_cast<void***>(eax2 + 76) = reinterpret_cast<void**>(1);
            ecx4 = *reinterpret_cast<void***>(ecx + 0x198);
            fun_18006760(ecx4);
            return;
        }
    }
    return;
}

int32_t FindResourceA = 0x36076;

int32_t LoadResource = 0x36066;

int32_t SizeofResource = 0x36054;

int32_t LockResource = 0x36044;

void fun_1802ab90(void** ecx, void* a2);

int16_t fun_18023870(void** a1, void** a2, void** a3) {
    void** eax4;
    int32_t eax5;
    int32_t eax6;
    void** eax7;
    void*** esp8;
    void* esp9;
    void* esp10;
    void*** esp11;
    void* esp12;
    void* esp13;
    void** eax14;
    void*** esp15;
    void** esi16;
    void** ebx17;
    void** v18;
    void** v19;
    void** v20;
    void** v21;
    void** v22;
    void** v23;
    void** v24;
    void** v25;
    void** v26;
    void** v27;
    void** v28;
    void** v29;
    void** v30;
    void** v31;
    void** v32;
    void** v33;
    void* esp34;
    void* esp35;
    void** eax36;
    void*** esp37;
    void** ecx38;
    void* esp39;
    void** esp40;
    void** ecx41;
    void** eax42;
    void* esp43;
    void* v44;
    void* v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void*** esp51;
    void*** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** v74;
    void** v75;
    void** v76;
    void** v77;
    void** v78;
    void** v79;
    void** v80;
    void** v81;
    void** v82;
    int32_t v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** v92;
    void** v93;
    void** v94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** v103;
    void** v104;
    void** v105;
    void** v106;
    void** v107;
    void** v108;
    void** v109;
    void** v110;
    void** v111;
    void** v112;
    void** v113;
    int32_t v114;
    void** v115;
    void** v116;
    void** v117;
    void** v118;
    void** v119;
    void** v120;
    void** v121;
    void** v122;
    void** v123;
    void** v124;
    void** v125;
    void** v126;
    void** v127;
    void** v128;
    void** v129;
    void** v130;
    void** v131;
    void** v132;
    void** v133;
    void** v134;
    void** v135;
    void** v136;
    void** v137;
    void** v138;
    void** v139;
    void** v140;
    void** v141;
    void** v142;
    void** v143;
    void** v144;
    int32_t v145;
    int32_t v146;
    int32_t v147;
    int32_t v148;

    eax4 = reinterpret_cast<void**>(FindResourceA());
    if (eax4 && (eax5 = reinterpret_cast<int32_t>(LoadResource()), !!eax5)) {
        eax6 = reinterpret_cast<int32_t>(SizeofResource());
        eax7 = reinterpret_cast<void**>(LockResource(eax5, eax6));
        esp8 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x7c - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 + 4 - 4);
        *reinterpret_cast<int16_t*>(&eax7) = fun_1802aa60(esp8 + 28, eax7, eax5, eax6);
        esp9 = reinterpret_cast<void*>(esp8 - 4 + 12 + 4);
        if (!eax7) {
            esp10 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp9) - 4);
            esp11 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp10) - 4 - 4);
            *reinterpret_cast<int16_t*>(&eax7) = fun_1802ab10(esp11 + 28, reinterpret_cast<int32_t>(esp10) + 28, 0, 32);
            esp12 = reinterpret_cast<void*>(esp11 - 4 + 12 + 4);
            if (!eax7) {
                *reinterpret_cast<int16_t*>(&eax7) = fun_1802acb0(reinterpret_cast<int32_t>(esp12) + 16, reinterpret_cast<int32_t>(esp12) + 24);
                esp13 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp12) - 4 - 4 + 4 + 4);
                eax14 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp13) + 12);
                esp15 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp13) - 4 - 4);
                *reinterpret_cast<int16_t*>(&eax14) = fun_1802ac90(esp15 + 24, reinterpret_cast<int32_t>(esp13) + 24, eax14, a2, eax4, 0, a2, eax4, a2, a1, 0, 0x45564157, esi16, ebx17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33);
                esp34 = reinterpret_cast<void*>(esp15 - 4 + 8 + 4);
                if (!eax14) {
                    esp35 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp34) - 4);
                    eax36 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp35) + 48);
                    esp37 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp35) - 4 - 4);
                    ecx38 = reinterpret_cast<void**>(esp37 + 28);
                    *reinterpret_cast<int16_t*>(&eax36) = fun_1802ab10(ecx38, eax36, reinterpret_cast<int32_t>(esp34) + 24, 16);
                    esp39 = reinterpret_cast<void*>(esp37 - 4 + 12 + 4);
                    if (!eax36) {
                        esp40 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp39) - 4);
                        ecx41 = reinterpret_cast<void**>(esp40 + 5);
                        fun_1802ab90(ecx41, reinterpret_cast<int32_t>(esp39) + 64);
                        eax42 = fun_1802b2bb(ecx41, 36, a2, eax4, 0, a2, eax4, a2, a1);
                        esp43 = reinterpret_cast<void*>(esp40 - 1 + 1 + 1 - 1 - 1 + 1 + 1);
                        if (!eax42) {
                            eax42 = reinterpret_cast<void**>(0);
                        } else {
                            ecx41 = eax42;
                            *reinterpret_cast<int16_t*>(&eax42) = fun_18022dd0(ecx41, a2, reinterpret_cast<int32_t>(v44) + reinterpret_cast<uint32_t>(v45), v46, 0, eax7, a2, eax4, 0, a2, eax4, a2, a1, 0, 0x45564157, esi16, ebx17, 0x61746164, v47, v48, v49, v50);
                            esp43 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp43) - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
                        }
                        esp51 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp43) - 4);
                        *v52 = eax42;
                        if (eax42) {
                            fun_1802b2b0(ecx41, a2, a2, eax4, 0, a2, eax4, a2, a1, 0, 0x45564157, esi16, ebx17, 0x61746164, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, __return_address(), a1, a2);
                            fun_1802aaf0(esp51 - 4 + 4 + 4 + 16);
                            goto v83;
                        } else {
                            fun_1802b2b0(ecx41, a2, a2, eax4, 0, a2, eax4, a2, a1, 0, 0x45564157, esi16, ebx17, 0x61746164, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v111, v112, v113, __return_address(), a1, a2);
                            fun_1802aaf0(esp51 - 4 + 4 + 4 + 16);
                            goto v114;
                        }
                    } else {
                        fun_1802b2b0(ecx38, a2, a2, eax4, 0, a2, eax4, a2, a1, 0, 0x45564157, esi16, ebx17, 0x61746164, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142, v143, v144, __return_address(), a1, a2);
                        fun_1802aaf0(reinterpret_cast<int32_t>(esp39) - 4 - 4 + 4 + 4 + 16);
                        goto v145;
                    }
                } else {
                    fun_1802aaf0(reinterpret_cast<int32_t>(esp34) + 16);
                    goto v146;
                }
            } else {
                fun_1802aaf0(reinterpret_cast<int32_t>(esp12) + 16);
                goto v147;
            }
        } else {
            fun_1802aaf0(reinterpret_cast<int32_t>(esp9) + 16);
        }
    }
    goto v148;
}

int16_t fun_1802ad20(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30);

int16_t fun_18023a90(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void*** esp7;
    int32_t eax8;
    void* esp9;
    int32_t eax10;
    void* esp11;
    void** eax12;
    void*** esp13;
    void* esp14;
    void** eax15;
    void*** esp16;
    void* esp17;
    void** eax18;
    void*** esp19;
    void** edi20;
    void** esi21;
    void** ebx22;
    void** v23;
    void** v24;
    void** v25;
    void** v26;
    void** v27;
    void** v28;
    void** v29;
    void** v30;
    void** v31;
    void** v32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void* esp44;
    void** eax45;
    int1_t zf46;
    void*** esp47;
    void*** esp48;
    void** eax49;
    void*** esp50;
    void** ecx51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void* esp71;
    void** v72;
    void** v73;
    void** v74;
    void** v75;
    void** v76;
    void** v77;
    void** v78;
    void** v79;
    void** v80;
    void** v81;
    void** v82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** v92;
    void** v93;
    void** v94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** eax103;
    void** v104;
    void** eax105;
    void* esp106;
    void** v107;
    void** v108;
    void** v109;
    void** v110;
    void** v111;
    void** v112;
    void** v113;
    void** v114;
    void** v115;
    void** v116;
    void** v117;
    void** v118;
    void** v119;
    void** v120;
    void** v121;
    void** v122;
    void** v123;
    void** v124;
    void** v125;
    void** v126;
    void** v127;
    void** v128;
    void** v129;
    void** v130;
    void** v131;
    void** v132;
    void** v133;
    void** v134;
    void** v135;
    void** v136;
    void** v137;
    void** v138;
    void** v139;
    void** v140;
    void** v141;
    void** v142;
    void** v143;
    void** v144;
    void** v145;
    void** v146;
    void** v147;
    void** v148;
    void** v149;
    void** v150;
    void* esp151;
    void** v152;
    void** v153;
    void** v154;
    void** v155;
    void** v156;
    void** v157;
    void** v158;
    void** v159;
    void** v160;
    void** v161;
    void** v162;
    void** v163;
    void** v164;
    void** v165;
    void** v166;
    void** v167;
    void** v168;
    void** v169;
    void** v170;
    void** v171;
    void** v172;
    void** v173;
    void** v174;
    void** v175;
    void** v176;
    void** v177;
    void** v178;
    void** v179;
    void** v180;
    void** v181;
    void** v182;
    void** v183;
    void** v184;
    void** v185;
    void** v186;
    void** v187;
    void** v188;
    void** v189;
    void** v190;
    void** v191;
    void** v192;
    void** v193;
    void** v194;
    void** v195;
    void** v196;
    void** v197;
    void** v198;
    void** v199;
    void** v200;
    void** v201;
    void** v202;
    void** v203;
    void** v204;
    void** v205;
    void** v206;
    void** v207;
    void** v208;
    void** v209;
    void** v210;
    void** v211;
    void** v212;
    void** v213;
    void** v214;
    void** v215;
    void** v216;
    void** v217;
    void** v218;
    void** v219;
    void** v220;
    void** v221;
    void** v222;
    void** v223;
    void** v224;
    void** v225;
    void** v226;
    void** v227;
    void** v228;
    void** v229;
    void** v230;
    void** v231;
    void** v232;
    void** v233;
    void** v234;
    void** v235;
    void** v236;
    void** v237;
    void** v238;
    void** v239;
    void** v240;
    void** v241;
    void** v242;
    void** v243;
    void** v244;
    void* esp245;
    void* esp246;
    void** eax247;
    void*** esp248;
    void* esp249;
    void** v250;
    void** v251;
    void** v252;
    void** v253;
    void** v254;
    void** v255;
    void** v256;
    void** v257;
    void** v258;
    void** v259;
    void** v260;
    void** v261;
    void** v262;
    void** v263;
    void** v264;
    void** v265;
    void** v266;
    void** v267;
    void** v268;
    void** v269;
    void** v270;
    void** v271;
    void** v272;
    void** v273;
    void** v274;
    void** v275;
    void** v276;
    void** v277;
    void** v278;
    void** v279;
    void** eax280;
    void** ecx281;
    void** v282;
    void** eax283;
    void** v284;
    void* v285;
    void* v286;
    void** v287;
    void** v288;
    void** v289;
    void** v290;
    void** v291;
    void** v292;
    void** v293;
    void** v294;
    void** v295;
    void** v296;
    void** v297;
    void** v298;
    void** v299;
    void** v300;
    void** v301;
    void** v302;
    void** v303;
    void** v304;
    void** v305;
    void** v306;
    void** v307;
    void** v308;
    void** v309;
    void** v310;
    void** v311;
    void** v312;
    void** v313;
    void** v314;
    void** v315;
    void** v316;
    void** v317;
    void** v318;
    void** v319;
    void** v320;
    void** v321;
    void** v322;
    void** v323;
    void** v324;
    void** v325;

    esp7 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x8c - 4 - 4 - 4 - 4 - 4);
    *reinterpret_cast<int16_t*>(&eax8) = fun_1802aac0(esp7 + 20, a1, 0);
    esp9 = reinterpret_cast<void*>(esp7 - 4 + 8 + 4);
    if (!0) {
        fun_1802aaf0(reinterpret_cast<int32_t>(esp9) + 12);
        eax10 = eax8;
        return *reinterpret_cast<int16_t*>(&eax10);
    }
    esp11 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp9) - 4);
    eax12 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp11) + 44);
    esp13 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp11) - 4 - 4);
    *reinterpret_cast<int16_t*>(&eax12) = fun_1802ab10(esp13 + 24, eax12, 0, 32);
    esp14 = reinterpret_cast<void*>(esp13 - 4 + 12 + 4);
    if (eax12) {
        fun_1802aaf0(reinterpret_cast<int32_t>(esp14) + 12);
        eax15 = eax12;
        return *reinterpret_cast<int16_t*>(&eax15);
    }
    esp16 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp14) - 4);
    *reinterpret_cast<int16_t*>(&eax12) = fun_1802acb0(esp16 + 16, reinterpret_cast<int32_t>(esp14) + 40);
    esp17 = reinterpret_cast<void*>(esp16 - 4 + 4 + 4);
    eax18 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp17) + 40);
    esp19 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp17) - 4 - 4);
    *reinterpret_cast<int16_t*>(&eax18) = fun_1802ac90(esp19 + 20, eax18, reinterpret_cast<int32_t>(esp17) + 24, edi20, esi21, ebx22, 0, 0, v23, v24, v25, v26, v27, v28, v29, 0x45564157, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43);
    esp44 = reinterpret_cast<void*>(esp19 - 4 + 8 + 4);
    if (eax18) {
        fun_1802aaf0(reinterpret_cast<int32_t>(esp44) + 12);
        eax45 = eax18;
        return *reinterpret_cast<int16_t*>(&eax45);
    }
    zf46 = reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a1 + 4) == 0x204d454d);
    if (zf46) 
        goto addr_0x18023b66_8;
    esp47 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp44) - 4);
    esp48 = esp47 - 4;
    eax49 = reinterpret_cast<void**>(esp48 + 48);
    esp50 = esp48 - 4 - 4;
    ecx51 = reinterpret_cast<void**>(esp50 + 28);
    *reinterpret_cast<int16_t*>(&eax49) = fun_1802ad20(ecx51, eax49, esp47 + 32, reinterpret_cast<int32_t>(esp44) + 36, reinterpret_cast<int32_t>(esp44) + 32, edi20, esi21, ebx22, 0, 0, v52, v53, v54, v55, v56, v57, v58, 0x45564157, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70);
    esp71 = reinterpret_cast<void*>(esp50 - 4 + 16 + 4);
    if (eax49) {
        fun_1802b2b0(v52, v52, edi20, esi21, ebx22, 0, 0, v52, v72, v73, v74, v75, v76, v77, 0x45564157, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, __return_address(), a1, a2, a3, a4, a5, a6);
        fun_1802aaf0(reinterpret_cast<int32_t>(esp71) - 4 - 4 + 4 + 4 + 12);
        eax103 = eax49;
        return *reinterpret_cast<int16_t*>(&eax103);
    }
    eax105 = fun_1802b2bb(ecx51, 36, edi20, esi21, ebx22, 0, 0, v52, v104);
    esp106 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp71) - 4 - 4 + 4 + 4);
    if (!eax105) {
        eax105 = reinterpret_cast<void**>(0);
    } else {
        ecx51 = eax105;
        *reinterpret_cast<int16_t*>(&eax105) = fun_18022dd0(ecx51, v107, v108, v109, v110, eax12, edi20, esi21, ebx22, 0, 0, v52, v111, v112, v113, v114, v115, v116, 0x45564157, v117, v118, v119);
        esp106 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp106) - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
    }
    *reinterpret_cast<void***>(a2) = eax105;
    if (!eax105) 
        goto addr_0x18023c95_15;
    fun_1802b2b0(ecx51, 0, edi20, esi21, ebx22, 0, 0, v52, v120, v121, v122, v123, v124, v125, 0x45564157, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v150, __return_address(), a1, a2, a3, a4, a5, a6);
    esp151 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp106) - 4 - 4 + 4 + 4);
    addr_0x18023ccc_17:
    fun_1802b2b0(v52, v52, edi20, esi21, ebx22, 0, 0, v52, v152, v153, v154, v155, v156, v157, 0x45564157, v158, v159, 0x61746164, v160, v161, v162, v163, v164, v165, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, __return_address(), a1, a2, a3, a4, a5, a6);
    fun_1802aaf0(reinterpret_cast<int32_t>(esp151) - 4 - 4 + 4 + 4 + 12);
    return 0;
    addr_0x18023c95_15:
    fun_1802b2b0(ecx51, v182, edi20, esi21, ebx22, 0, 0, v52, v183, v184, v185, v186, v187, v188, 0x45564157, v189, v190, v191, v192, v193, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, __return_address(), a1, a2, a3, a4, a5, a6);
    fun_1802b2b0(ecx51, v52, v182, edi20, esi21, ebx22, 0, 0, v52, v214, v215, v216, v217, v218, v219, 0x45564157, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, __return_address(), a1, a2, a3, a4, a5);
    esp245 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp106) - 4 - 4 + 4 - 4 - 4 + 4 + 8);
    addr_0x18023ca8_18:
    fun_1802aaf0(reinterpret_cast<int32_t>(esp245) + 12);
    return 4;
    addr_0x18023b66_8:
    esp246 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp44) - 4);
    eax247 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp246) + 64);
    esp248 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp246) - 4 - 4);
    *reinterpret_cast<int16_t*>(&eax247) = fun_1802ab10(esp248 + 24, eax247, reinterpret_cast<int32_t>(esp44) + 40, 16);
    esp249 = reinterpret_cast<void*>(esp248 - 4 + 12 + 4);
    if (eax247) {
        fun_1802b2b0(v52, v52, edi20, esi21, ebx22, 0, 0, v52, v250, v251, v252, v253, v254, v255, 0x45564157, v256, v257, 0x61746164, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, __return_address(), a1, a2, a3, a4, a5, a6);
        fun_1802aaf0(reinterpret_cast<int32_t>(esp249) - 4 - 4 + 4 + 4 + 12);
        eax280 = eax247;
        return *reinterpret_cast<int16_t*>(&eax280);
    }
    ecx281 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp249) + 12);
    fun_1802ab90(ecx281, reinterpret_cast<int32_t>(esp249) + 80);
    eax283 = fun_1802b2bb(ecx281, 36, edi20, esi21, ebx22, 0, 0, v52, v282);
    esp151 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp249) - 4 - 4 + 4 + 4 - 4 - 4 + 4 + 4);
    if (!eax283) {
        eax283 = reinterpret_cast<void**>(0);
    } else {
        *reinterpret_cast<int16_t*>(&eax283) = fun_18022dd0(eax283, v284, reinterpret_cast<int32_t>(v285) + reinterpret_cast<uint32_t>(v286), v287, 0, eax12, edi20, esi21, ebx22, 0, 0, v52, v288, v289, v290, v291, v292, v293, 0x45564157, v294, v295, 0x61746164);
        esp151 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp151) - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
    }
    *reinterpret_cast<void***>(a2) = eax283;
    if (eax283) 
        goto addr_0x18023ccc_17;
    fun_1802b2b0(a2, v52, edi20, esi21, ebx22, 0, 0, v52, v296, v297, v298, v299, v300, v301, 0x45564157, v302, v303, 0x61746164, v304, v305, v306, v307, v308, v309, v310, v311, v312, v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, v325, __return_address(), a1, a2, a3, a4, a5, a6);
    esp245 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp151) - 4 - 4 + 4 + 4);
    goto addr_0x18023ca8_18;
}

signed char g180458e1 = 0;

int32_t g180458e4 = 0;

int16_t fun_1802a9c0(int32_t* ecx, void** a2, int32_t a3);

int16_t fun_18022e60(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22) {
    void** edi23;
    void** esi24;
    void** eax25;
    void** eax26;
    void* esp27;
    signed char al28;
    int32_t eax29;
    void** eax30;
    void** ebp31;
    void** ebx32;
    void** v33;
    void** v34;
    void** v35;
    void** eax36;
    void* esp37;
    void** esi38;
    void* esp39;
    void*** esp40;
    void* esp41;
    void** v42;
    void* esp43;
    void** eax44;
    void*** esp45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void* esp61;
    void** eax62;
    void** eax63;
    void*** esp64;
    void*** esp65;
    void*** esp66;
    void** ecx67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** v74;
    void** v75;
    void** v76;
    void** v77;
    void** v78;
    void** v79;
    void** v80;
    void** v81;
    void** v82;
    void* esp83;
    void** ecx84;
    void** eax85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** v92;
    void** v93;
    void** v94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    signed char al101;
    void** eax102;
    void** eax103;
    void** v104;
    void** eax105;
    void** ecx106;
    void** v107;
    void** eax108;
    void* esp109;
    void** v110;
    void** v111;
    void** v112;
    void* esp113;
    void** esi114;
    void** v115;
    void** v116;
    void** eax117;
    void* esp118;
    void*** esp119;
    void** v120;
    void** v121;
    void** v122;
    void** v123;
    void** v124;
    void** v125;
    void** v126;
    void** v127;
    void** v128;
    void** v129;
    void** eax130;
    void* esp131;
    void** v132;
    void** v133;
    void** v134;
    void** v135;
    void** v136;
    void** v137;
    void** v138;
    void** v139;
    void** v140;
    void** v141;
    void** v142;
    void** v143;
    void** v144;
    void** v145;
    void** v146;
    void** v147;
    void** v148;
    void** v149;
    void** v150;
    void** v151;
    void** v152;
    void** v153;
    void** v154;
    void** v155;
    void** v156;
    void** v157;
    void** v158;
    void** v159;
    void** v160;
    void** v161;
    void** v162;
    void** v163;
    void** v164;
    void** v165;
    void** v166;
    void** v167;
    void** v168;
    void** v169;
    void** v170;
    void** v171;
    void** v172;
    void** v173;
    void** v174;
    void** v175;
    void** v176;
    void** v177;
    void** v178;
    void** v179;
    void** v180;
    void** v181;
    void** v182;
    void** v183;
    void** v184;
    void** v185;
    void** v186;
    void** v187;
    void** v188;
    void** v189;
    void** v190;
    void** v191;
    void** v192;
    void** v193;
    void** v194;
    void** v195;
    void** v196;
    void** v197;
    void** v198;
    void** v199;
    void** v200;
    void** v201;
    void** v202;
    void** v203;
    void** v204;
    void** v205;
    void** v206;
    void** v207;
    void** v208;
    void** v209;
    void** v210;
    void** v211;
    void** v212;
    void** v213;
    void** v214;
    void** v215;
    void** v216;
    void** v217;
    void** v218;
    void** v219;
    void** v220;
    void** v221;
    void** v222;
    void** v223;
    void** v224;
    void** v225;
    void** v226;
    void** v227;
    void** v228;
    void** v229;
    void** v230;
    void** v231;
    void** v232;
    void** v233;

    eax25 = fun_1802b500(ecx, a2, 46, edi23, esi24);
    eax26 = fun_18031d70(ecx, eax25, 0x18043b3c, a2, 46);
    esp27 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 76 - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 + 4 + 16);
    if (!eax26) {
        al28 = g180458e1;
        if (!al28 && (g180458e1 = 1, eax29 = reinterpret_cast<int32_t>(LoadLibraryA("wmaudsdk")), esp27 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp27) - 4 - 4 + 4), g180458e4 = eax29, !!eax29)) {
            eax30 = reinterpret_cast<void**>(GetProcAddress(eax29, "WMAudioCreateReader", "wmaudsdk"));
            esp27 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp27) - 4 - 4 - 4 + 4);
            g180458e8 = eax30;
        }
        eax26 = g180458e8;
        if (eax26) {
            eax36 = fun_1802b2bb(ecx, 36, edi23, esi24, ebp31, ebx32, v33, v34, v35);
            if (!eax36) {
                *reinterpret_cast<void***>(a3) = reinterpret_cast<void**>(0);
                return 0;
            } else {
                *reinterpret_cast<int16_t*>(&eax36) = fun_180241a0(eax36, a2, edi23, esi24);
                *reinterpret_cast<void***>(a3) = eax36;
                return 0;
            }
        }
    }
    *reinterpret_cast<int16_t*>(&eax26) = fun_1802a9c0(reinterpret_cast<int32_t>(esp27) + 32, a2, 0);
    esp37 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp27) - 4 - 4 - 4 + 8 + 4);
    esi38 = eax26;
    if (esi38) 
        goto addr_0x18023071_9;
    esp39 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp37) - 4);
    esp40 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp39) - 4 - 4);
    *reinterpret_cast<int16_t*>(&eax26) = fun_1802ab10(esp40 + 44, reinterpret_cast<int32_t>(esp39) + 44, 0, 32);
    esp41 = reinterpret_cast<void*>(esp40 - 4 + 12 + 4);
    esi38 = eax26;
    v42 = esi38;
    if (!esi38) {
        *reinterpret_cast<int16_t*>(&eax26) = fun_1802acb0(reinterpret_cast<int32_t>(esp41) + 32, reinterpret_cast<int32_t>(esp41) + 40);
        esp43 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp41) - 4 - 4 + 4 + 4);
        eax44 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp43) + 16);
        esp45 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp43) - 4 - 4);
        *reinterpret_cast<int16_t*>(&eax44) = fun_1802ac90(esp45 + 40, reinterpret_cast<int32_t>(esp43) + 40, eax44, edi23, esi24, ebp31, ebx32, v46, v42, v47, v48, 0, 0, v49, v50, 0x45564157, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, __return_address(), a2, a3, a4);
        esp61 = reinterpret_cast<void*>(esp45 - 4 + 8 + 4);
        if (eax44) {
            fun_1802aaf0(reinterpret_cast<int32_t>(esp61) + 32);
            eax62 = eax44;
            return *reinterpret_cast<int16_t*>(&eax62);
        }
        eax63 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp61) + 96);
        esp64 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp61) - 4);
        esp65 = esp64 - 4;
        esp66 = esp65 - 4 - 4;
        ecx67 = reinterpret_cast<void**>(esp66 + 48);
        *reinterpret_cast<int16_t*>(&eax63) = fun_1802ad20(ecx67, esp65 + 48, esp64 + 32, eax63, reinterpret_cast<int32_t>(esp61) + 24, edi23, esi24, ebp31, ebx32, v68, v42, v69, v70, 0, 0, v71, v72, 0x45564157, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, __return_address(), a2);
        esp83 = reinterpret_cast<void*>(esp66 - 4 + 16 + 4);
        esi38 = eax63;
        if (esi38) 
            goto addr_0x18023068_14;
    } else {
        ecx84 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp41) + 32);
        fun_1802aaf0(ecx84);
        eax85 = fun_18031d70(ecx84, eax25, 0x18043b14, edi23, esi24);
        esp37 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp41) - 4 + 4 - 4 - 4 - 4 + 4 + 8);
        if (eax85 || ((al101 = fun_1802af70(ecx84, reinterpret_cast<int32_t>(esp37) + 60, a2, edi23, esi24, ebp31, ebx32, v86, v42, v87, v88, 0, 0, v89, v90, 0x45564157, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9), esp37 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp37) - 4 - 4 - 4 + 8 + 4), al101 == 0) || (eax102 = fun_1802bf73(ecx84, a2, 0x8000, edi23), esp37 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp37) - 4 - 4 - 4 + 4 + 8), reinterpret_cast<signed char>(eax102) < reinterpret_cast<signed char>(0)))) {
            addr_0x18023071_9:
            fun_1802aaf0(reinterpret_cast<int32_t>(esp37) + 32);
            eax103 = esi38;
            return *reinterpret_cast<int16_t*>(&eax103);
        } else {
            eax105 = fun_18032f60(ecx84, eax102, edi23, esi24, ebp31, ebx32, v104);
            ecx106 = eax105 + 7;
            eax108 = fun_1802b2bb(ecx106, ecx106, eax102, edi23, esi24, ebp31, ebx32, v107, v42);
            esp109 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp37) - 4 - 4 + 4 - 4 - 4 + 4 + 8);
            if (!eax108) {
                addr_0x18022ffb_17:
                fun_1802bc55(ecx106, eax102, edi23, esi24, ebp31, ebx32, v110, v42, v111, v112, 0, 0);
                esp113 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp109) - 4 - 4 + 4);
                goto addr_0x1802306e_18;
            } else {
                esi114 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(eax108 + 7) & 0xfffffff8);
                fun_1802bd35(ecx106, eax102, esi114, eax105, edi23, esi24, ebp31);
                fun_1802bc55(ecx106, eax102, eax102, esi114, eax105, edi23, esi24, ebp31, ebx32, v115, v42, v116);
                eax117 = fun_1802b2bb(ecx106, 36, eax102, eax102, esi114, eax105, edi23, esi24, ebp31);
                esp118 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp109) - 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4 - 4 - 4 + 4 + 20);
                if (!eax117) {
                    eax117 = reinterpret_cast<void**>(0);
                } else {
                    esp119 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp118) - 4 - 4 - 4);
                    *reinterpret_cast<int16_t*>(&eax117) = fun_18022dd0(eax117, esp119 + 72, esi114, eax105, eax108, 0, edi23, esi24, ebp31, ebx32, v120, v42, v121, v122, 0, 0, v123, v124, 0x45564157, v125, v126, v127);
                    esp118 = reinterpret_cast<void*>(esp119 - 4 - 4 - 4 + 20 + 4);
                }
                ecx106 = a3;
                *reinterpret_cast<void***>(ecx106) = eax117;
                if (eax117) 
                    goto addr_0x180230f8_23; else 
                    goto addr_0x18022fee_24;
            }
        }
    }
    eax130 = fun_1802b2bb(ecx67, 36, edi23, esi24, ebp31, ebx32, v128, v42, v129);
    esp131 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp83) - 4 - 4 + 4 + 4);
    if (!eax130) {
        eax130 = reinterpret_cast<void**>(0);
    } else {
        *reinterpret_cast<int16_t*>(&eax130) = fun_18022dd0(eax130, v132, v133, v134, a2, eax26, edi23, esi24, ebp31, ebx32, v135, v42, v136, v137, 0, 0, v138, v139, 0x45564157, v140, v141, v142);
        esp131 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp131) - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
    }
    *reinterpret_cast<void***>(a3) = eax130;
    if (eax130) {
        fun_1802b2b0(a3, 0, edi23, esi24, ebp31, ebx32, v143, v42, v144, v145, 0, 0, v146, v147, 0x45564157, v148, v149, v150, v151, v152, v153, v154, v155, v156, v157, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
        fun_1802b2b0(a3, v158, 0, edi23, esi24, ebp31, ebx32, v159, v42, v160, v161, 0, 0, v162, v163, 0x45564157, v164, v165, v166, v167, v168, v169, v170, v171, v172, v173, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
        esp118 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp131) - 4 - 4 + 4 - 4 - 4 + 4 + 8);
    } else {
        fun_1802b2b0(a3, a2, edi23, esi24, ebp31, ebx32, v174, v42, v175, v176, 0, 0, v177, v178, 0x45564157, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
        fun_1802b2b0(a3, v158, a2, edi23, esi24, ebp31, ebx32, v189, v42, v190, v191, 0, 0, v192, v193, 0x45564157, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
        fun_1802aaf0(reinterpret_cast<int32_t>(esp131) - 4 - 4 + 4 - 4 - 4 + 4 + 8 + 32);
        return 4;
    }
    addr_0x180230f8_23:
    fun_1802aaf0(reinterpret_cast<int32_t>(esp118) + 32);
    return 0;
    addr_0x18023068_14:
    fun_1802b2b0(ecx67, v158, edi23, esi24, ebp31, ebx32, v204, v42, v205, v206, 0, 0, v207, v208, 0x45564157, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
    esp113 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp83) - 4 - 4 + 4);
    addr_0x1802306e_18:
    esp37 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp113) + 4);
    goto addr_0x18023071_9;
    addr_0x18022fee_24:
    fun_1802b2b0(ecx106, eax108, edi23, esi24, ebp31, ebx32, v219, v42, v220, v221, 0, 0, v222, v223, 0x45564157, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
    esi38 = v42;
    esp109 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp118) - 4 - 4 + 4 + 4);
    goto addr_0x18022ffb_17;
}

void fun_18003370(void** ecx, void** a2, void** a3, void* a4) {
    void** edx5;
    void** edi6;
    uint32_t ecx7;
    void* ecx8;
    void** edi9;
    uint32_t ecx10;
    uint32_t ecx11;
    uint32_t eax12;
    void*** esi13;
    void** edi14;
    uint32_t ecx15;
    uint32_t ecx16;

    edx5 = a3;
    edi6 = edx5;
    ecx7 = 0xffffffff;
    do {
        if (!ecx7) 
            break;
        --ecx7;
        ++edi6;
    } while (*reinterpret_cast<void***>(edi6));
    ecx8 = reinterpret_cast<void*>(~ecx7 - 1);
    if (reinterpret_cast<int32_t>(ecx8) >= reinterpret_cast<int32_t>(a4)) {
        ecx8 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx8) - reinterpret_cast<uint32_t>(a4));
        edx5 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(ecx8) + reinterpret_cast<unsigned char>(edx5) + 1);
    }
    edi9 = edx5;
    ecx10 = 0xffffffff;
    do {
        if (!ecx10) 
            break;
        --ecx10;
        ++edi9;
    } while (*reinterpret_cast<void***>(edi9));
    ecx11 = ~ecx10;
    eax12 = ecx11;
    esi13 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(edi9) - ecx11);
    edi14 = a2;
    ecx15 = ecx11 >> 2;
    while (ecx15) {
        --ecx15;
        *reinterpret_cast<void***>(edi14) = *esi13;
        edi14 = edi14 + 4;
        esi13 = esi13 + 4;
    }
    ecx16 = eax12 & 3;
    while (ecx16) {
        --ecx16;
        *reinterpret_cast<void***>(edi14) = *esi13;
        ++edi14;
        ++esi13;
    }
    return;
}

int32_t GetSystemInfo = 0x36034;

int16_t fun_18023570(void** a1, void** a2, void** a3, void** a4, void* a5) {
    void* esp6;
    void** v7;
    void** ebx8;
    void** v9;
    void** ebp10;
    void** v11;
    void** esi12;
    void** v13;
    void** edi14;
    void* esp15;
    void* esi16;
    void* v17;
    void** ebx18;
    void** v19;
    uint32_t eax20;
    void** eax21;
    void** v22;
    int32_t v23;
    void** v24;
    void** v25;
    void** v26;
    void** eax27;
    void* esp28;
    void** ebp29;
    int32_t v30;
    int32_t ecx31;
    void*** esp32;
    void** eax33;
    void** v34;
    void** v35;
    void* esp36;
    void* esp37;
    void*** esp38;
    void* esp39;
    void** eax40;
    void* esp41;
    void*** esp42;
    void** ebx43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void* v49;
    void* esp50;
    void** eax51;
    void* esp52;
    void*** esp53;
    void** ecx54;
    void* esp55;
    void** eax56;
    void** esi57;
    void* esp58;
    void* v59;
    void*** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** v74;
    void** v75;
    void** v76;
    void** v77;
    void** v78;
    void** v79;
    void** v80;
    void** v81;
    void** v82;
    void** v83;
    int32_t v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** v92;
    void** v93;
    void** v94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** v103;
    void** v104;
    void** v105;
    void** v106;
    void** v107;
    void** ecx108;
    int32_t v109;
    void** v110;
    void** v111;
    void** v112;
    void** v113;
    void** v114;
    void** v115;
    void** v116;
    void** v117;
    void** v118;
    void** v119;
    void** v120;
    void** v121;
    void** v122;
    void** v123;
    void** v124;
    void** v125;
    void** v126;
    void** v127;
    void** v128;
    void** v129;
    void** v130;
    void** v131;
    void** v132;
    void** ecx133;
    int32_t v134;
    void** ecx135;
    int32_t v136;
    void** ecx137;
    int32_t v138;
    void** ecx139;
    int32_t v140;

    esp6 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0xac);
    v7 = ebx8;
    v9 = ebp10;
    v11 = esi12;
    v13 = edi14;
    GetSystemInfo(reinterpret_cast<int32_t>(esp6) + 0x88, v13, v11);
    esp15 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp6) - 4 - 4 - 4 - 4 - 4 - 4 + 4);
    esi16 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(v17) - 1);
    ebx18 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(~reinterpret_cast<int32_t>(esi16)) & reinterpret_cast<unsigned char>(a1));
    v19 = reinterpret_cast<void**>(__return_address());
    eax20 = reinterpret_cast<uint32_t>(GetFileSize(v19, reinterpret_cast<int32_t>(esp15) + 36, reinterpret_cast<int32_t>(esp6) + 0x88, v13, v11));
    if (!0 && (reinterpret_cast<int32_t>(esi16) + reinterpret_cast<unsigned char>(a1) & reinterpret_cast<uint32_t>(~reinterpret_cast<int32_t>(esi16))) > eax20) {
    }
    eax21 = reinterpret_cast<void**>(CreateFileMappingA());
    v22 = eax21;
    if (!eax21) {
        goto v23;
    }
    v24 = ebx18;
    v25 = reinterpret_cast<void**>(0xffffffff & reinterpret_cast<unsigned char>(a2));
    v26 = eax21;
    eax27 = reinterpret_cast<void**>(MapViewOfFile());
    esp28 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp15) - 4 - 4 - 4 + 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 - 4 - 4 - 4 + 4);
    ebp29 = eax27;
    if (!ebp29) {
        CloseHandle();
        goto v30;
    }
    ecx31 = 17;
    while (ecx31) {
        --ecx31;
    }
    esp32 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp28) - 4 - 4);
    eax33 = v34;
    v35 = eax33;
    *reinterpret_cast<int16_t*>(&eax33) = fun_1802aac0(esp32 + 24, reinterpret_cast<int32_t>(esp28) + 80, 0);
    esp36 = reinterpret_cast<void*>(esp32 - 4 + 8 + 4);
    if (eax33) 
        goto addr_0x1802369c_11;
    esp37 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp36) - 4);
    esp38 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp37) - 4 - 4);
    *reinterpret_cast<int16_t*>(&eax33) = fun_1802ab10(esp38 + 28, reinterpret_cast<int32_t>(esp37) + 44, 0, 32);
    esp39 = reinterpret_cast<void*>(esp38 - 4 + 12 + 4);
    if (!eax33) {
        eax40 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp39) + 40);
        *reinterpret_cast<int16_t*>(&eax40) = fun_1802acb0(reinterpret_cast<int32_t>(esp39) + 16, eax40);
        esp41 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp39) - 4 - 4 + 4 + 4);
        esp42 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp41) - 4 - 4);
        ebx43 = eax40;
        *reinterpret_cast<int16_t*>(&eax40) = fun_1802ac90(esp42 + 24, reinterpret_cast<int32_t>(esp41) + 40, reinterpret_cast<int32_t>(esp41) + 28, v26, 4, v25, v24, 0, 0, 0, 2, 0, 0, 0, v19, 0x45564157, v22, v13, v11, v9, v7, v44, v45, 0, 0x204d454d, v46, v47, v48, v35, reinterpret_cast<int32_t>(v49) - reinterpret_cast<unsigned char>(ebx18) + reinterpret_cast<unsigned char>(ebp29));
        esp50 = reinterpret_cast<void*>(esp42 - 4 + 8 + 4);
        if (!eax40) {
            eax51 = reinterpret_cast<void**>(2);
            esp52 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp50) - 4);
            esp53 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp52) - 4 - 4);
            ecx54 = reinterpret_cast<void**>(esp53 + 28);
            *reinterpret_cast<int16_t*>(&eax51) = fun_1802ab10(ecx54, reinterpret_cast<int32_t>(esp52) + 64, reinterpret_cast<int32_t>(esp50) + 40, 16);
            esp55 = reinterpret_cast<void*>(esp53 - 4 + 12 + 4);
            if (!eax51) {
                eax56 = fun_1802b2bb(ecx54, 48, v26, 4, v25, v24, 0, 0, 2);
                esi57 = eax56;
                esp58 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp55) - 4 - 4 + 4 + 4);
                if (!esi57) {
                    esi57 = reinterpret_cast<void**>(0);
                } else {
                    ecx54 = esi57;
                    fun_18022dd0(ecx54, 2, reinterpret_cast<int32_t>(v59) + reinterpret_cast<unsigned char>(reinterpret_cast<int32_t>(v49) - reinterpret_cast<unsigned char>(ebx18) + reinterpret_cast<unsigned char>(ebp29)), v9, 0, ebx43, v26, 4, v25, v24, 0, 0, 2, 2, 0, 0, 0, v19, 0x45564157, v22, v13, 0x61746164);
                    esp58 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp58) - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
                    *reinterpret_cast<void***>(esi57 + 36) = reinterpret_cast<void**>(0);
                    *reinterpret_cast<void***>(esi57 + 44) = ebp29;
                    *reinterpret_cast<void***>(esi57) = reinterpret_cast<void**>(0x180350f8);
                    *reinterpret_cast<void***>(esi57 + 40) = reinterpret_cast<void**>(0);
                }
                *v60 = esi57;
                if (esi57) {
                    fun_1802b2b0(ecx54, 2, v26, 4, v25, v24, 0, 0, 2, 2, 0, 0, 0, v19, 0x45564157, v22, v13, 0x61746164, v9, v7, v61, v62, 0, 0x204d454d, v63, v64, v65, v35, reinterpret_cast<int32_t>(v49) - reinterpret_cast<unsigned char>(ebx18) + reinterpret_cast<unsigned char>(ebp29), v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83);
                    fun_1802aaf0(reinterpret_cast<int32_t>(esp58) - 4 - 4 + 4 + 4 + 16);
                    goto v84;
                } else {
                    fun_1802b2b0(2, 2, v26, 4, v25, v24, 0, 0, 2, 2, 0, 0, 0, v19, 0x45564157, v22, v13, 0x61746164, v9, v7, v85, v86, 0, 0x204d454d, v87, v88, v89, v35, reinterpret_cast<int32_t>(v49) - reinterpret_cast<unsigned char>(ebx18) + reinterpret_cast<unsigned char>(ebp29), v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107);
                    ecx108 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp58) - 4 - 4 + 4 + 4 + 16);
                    fun_1802aaf0(ecx108);
                    UnmapViewOfFile(ecx108);
                    CloseHandle(ecx108);
                    goto v109;
                }
            } else {
                fun_1802b2b0(ecx54, 2, v26, 4, v25, v24, 0, 0, 2, 2, 0, 0, 0, v19, 0x45564157, v22, v13, 0x61746164, v9, v7, v110, v111, 0, 0x204d454d, v112, v113, v114, v35, reinterpret_cast<int32_t>(v49) - reinterpret_cast<unsigned char>(ebx18) + reinterpret_cast<unsigned char>(ebp29), v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132);
                ecx133 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp55) - 4 - 4 + 4 + 4 + 16);
                fun_1802aaf0(ecx133);
                UnmapViewOfFile(ecx133);
                CloseHandle(ecx133);
                goto v134;
            }
        } else {
            ecx135 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp50) + 16);
            fun_1802aaf0(ecx135);
            UnmapViewOfFile(ecx135);
            CloseHandle(ecx135);
            goto v136;
        }
    } else {
        ecx137 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp39) + 16);
        fun_1802aaf0(ecx137);
        UnmapViewOfFile(ecx137);
        CloseHandle(ecx137);
        goto v138;
    }
    addr_0x1802369c_11:
    ecx139 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp36) + 16);
    fun_1802aaf0(ecx139);
    UnmapViewOfFile(ecx139);
    CloseHandle(ecx139);
    goto v140;
}

int16_t fun_1800bed0(void** ecx, void** a2);

int16_t fun_18005dd0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    void** ebp30;
    void** edi31;
    void** esi32;
    void** ebp33;
    void** ebx34;
    void** v35;
    void** v36;
    void** v37;
    void** eax38;
    void** edx39;
    void** v40;
    void** ecx41;
    void** edx42;
    void* esp43;
    void** eax44;
    void*** esp45;
    void** v46;
    void* esp47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void* esp57;
    void** ecx58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** v74;
    void** v75;
    void** v76;
    void** ecx77;
    void*** esp78;
    void* esp79;
    void** v80;
    void** v81;
    void** v82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** ecx89;
    void** v90;
    void** v91;
    void** v92;
    void** v93;
    void** v94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void*** esp99;
    struct s19* ecx100;
    void* esp101;
    void** v102;
    void** v103;
    void** v104;
    void** v105;
    void** v106;
    void** v107;
    void** v108;
    void** v109;
    void** v110;

    ebp30 = ecx;
    eax38 = fun_1802b2bb(ecx, 0x24c, edi31, esi32, ebp33, ebx34, v35, v36, v37);
    if (!eax38 || (edx39 = *reinterpret_cast<void***>(a2 + 10), v40 = reinterpret_cast<void**>(static_cast<int32_t>(*reinterpret_cast<int16_t*>(a2 + 22))), ecx41 = *reinterpret_cast<void***>(a2 + 18), edx42 = *reinterpret_cast<void***>(a2 + 6), ecx = eax38, *reinterpret_cast<int16_t*>(&eax38) = fun_1800bd00(ecx, ebp30, edx42, ecx41, edx39, v40), !eax38)) {
        fun_18009260(ecx, 4, edi31);
        return 7;
    }
    fun_1800bed0(eax38, a2);
    esp43 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4 - 4 - 4 + 4 + 4);
    eax44 = *reinterpret_cast<void***>(a2 + 24);
    if (eax44 != 0xffffffff) {
        esp45 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp43) - 4);
        *reinterpret_cast<signed char*>(&v46) = 0;
        fun_1800c760(esp45 + 20, eax44);
        esp47 = reinterpret_cast<void*>(esp45 - 4 + 4 + 4);
        eax44 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp47) + 16);
        fun_1800c060(eax38, eax44, edi31, esi32, ebp33, ebx34, 0, v48, v49, v50, v51, v52, v53, v54, v55, v56, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10);
        esp57 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp47) - 4 - 4 + 4 + 4);
        ecx58 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp57) + 16);
        fun_1800c670(ecx58, edi31, esi32, ebp33, ebx34, 0, v59, v60, v61, v62, v63, v64, v65, v66, v67, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, ecx58);
        esp43 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp57) - 4 + 4);
    }
    if (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 18)) & 16) 
        goto addr_0x18005e62_6;
    eax44 = *reinterpret_cast<void***>(a2 + 28);
    if (eax44 == 0xffffffff) {
        addr_0x18005eb8_8:
        *reinterpret_cast<int16_t*>(&eax44) = fun_18005f60(ebp30, eax38, edi31, esi32, ebp33, ebx34, 0, v68, v69, v70, v71, v72, v73, v74, v75, v76, v46, __return_address(), a2);
        if (!eax44 && ((ecx77 = *reinterpret_cast<void***>(a2 + 18), !!(*reinterpret_cast<unsigned char*>(&ecx77) & 2)) && !(*reinterpret_cast<unsigned char*>(&ecx77) & 8))) {
            *reinterpret_cast<void***>(a2 + 6) = *reinterpret_cast<void***>(eax38 + 0x19c);
        }
    } else {
        esp78 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp43) - 4);
        *reinterpret_cast<signed char*>(&v46) = 0;
        fun_1800c790(esp78 + 20, eax44);
        esp79 = reinterpret_cast<void*>(esp78 - 4 + 4 + 4);
        eax44 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp79) + 16);
        fun_1800c060(eax38, eax44, edi31, esi32, ebp33, ebx34, 0, v80, v81, v82, v83, v84, v85, v86, v87, v88, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10);
        ecx89 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp79) - 4 - 4 + 4 + 4 + 16);
        goto addr_0x18005eb3_11;
    }
    return *reinterpret_cast<int16_t*>(&eax44);
    addr_0x18005eb3_11:
    fun_1800c670(ecx89, edi31, esi32, ebp33, ebx34, 0, v90, v91, v92, v93, v94, v95, v96, v97, v98, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, ecx89);
    goto addr_0x18005eb8_8;
    addr_0x18005e62_6:
    esp99 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp43) - 4);
    ecx100 = reinterpret_cast<struct s19*>(esp99 + 20);
    *reinterpret_cast<signed char*>(&v46) = 0;
    fun_1800c7a0(ecx100, a2 + 36, ecx100, a2 + 36);
    esp101 = reinterpret_cast<void*>(esp99 - 4 + 4 + 4);
    fun_1800c060(eax38, reinterpret_cast<int32_t>(esp101) + 16, edi31, esi32, ebp33, ebx34, 0, v102, v103, v104, v105, v106, v107, v108, v109, v110, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10);
    ecx89 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp101) - 4 - 4 + 4 + 4 + 16);
    goto addr_0x18005eb3_11;
}

int16_t fun_18005ef0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27) {
    void** edi28;
    void** edi29;
    void** esi30;
    void** eax31;
    int16_t ax32;

    edi28 = ecx;
    eax31 = fun_1802b2bb(ecx, 0x24c, edi29, esi30, __return_address(), a2, a3, a4, a5);
    if (!eax31 || (ecx = eax31, *reinterpret_cast<int16_t*>(&eax31) = fun_1800bd00(ecx, edi28, a2, a3, a4, a5), !eax31)) {
        fun_18009260(ecx, 4, edi29);
        return 7;
    } else {
        if (a6) {
            fun_1800bef0(eax31, a6, edi29, esi30, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27);
        }
        ax32 = fun_18005f60(edi28, eax31, edi29, esi30, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
        return ax32;
    }
}

void fun_18009b50(void** ecx, struct s30* a2, void** a3, int32_t a4) {
    void** v5;
    void** v6;
    void** ebx7;
    struct s30* ebx8;
    void** v9;
    void** esi10;
    void** esi11;
    void** ecx12;
    void** edx13;
    void** v14;
    void** ebp15;
    void** v16;
    void** edi17;
    void** eax18;
    void** edi19;
    void** eax20;
    void** eax21;
    void** ecx22;
    void** ebp23;
    void** edi24;
    void** v25;
    void** ecx26;

    v5 = reinterpret_cast<void**>(__return_address());
    v6 = ebx7;
    ebx8 = a2;
    v9 = esi10;
    esi11 = ecx;
    if (!ebx8) {
        *reinterpret_cast<void***>(esi11 + 80) = a3;
        return;
    } else {
        ecx12 = *reinterpret_cast<void***>(esi11 + 56);
        edx13 = esi11 + 56;
        v14 = ebp15;
        v16 = edi17;
        if (ecx12 != edx13) {
            do {
                eax18 = ecx12;
                ecx12 = *reinterpret_cast<void***>(ecx12);
                *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax18 + 4)) = *reinterpret_cast<void***>(eax18);
                *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax18) + 4) = *reinterpret_cast<void***>(eax18 + 4);
                *reinterpret_cast<void***>(eax18) = *reinterpret_cast<void***>(esi11 + 72);
                *reinterpret_cast<void***>(esi11 + 72) = eax18;
                *reinterpret_cast<void***>(esi11 + 52) = *reinterpret_cast<void***>(esi11 + 52) - 1;
            } while (ecx12 != edx13);
        }
        while (edi19 = ebx8->f0, !!edi19) {
            eax20 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi19) & 0xff0000);
            *reinterpret_cast<int16_t*>(&eax20) = fun_1800dcc0(eax20);
            if (reinterpret_cast<int1_t>(eax20 == 1) && (*reinterpret_cast<int16_t*>(&eax20) = fun_1800dcc0(reinterpret_cast<unsigned char>(edi19) & 0x7f000000), reinterpret_cast<int1_t>(eax20 == 1))) {
                eax21 = *reinterpret_cast<void***>(esi11 + 72);
                ecx22 = ebx8->f4;
                ebp23 = ebx8->f0;
                edi24 = esi11 + 56;
                if (!eax21) {
                    eax21 = fun_1802b2bb(ecx22, 16, v16, v14, v9, v6, v25, ecx22, v5);
                } else {
                    *reinterpret_cast<void***>(esi11 + 72) = *reinterpret_cast<void***>(eax21);
                }
                if (eax21) {
                    ecx26 = eax21 + 8;
                    if (ecx26) {
                        *reinterpret_cast<void***>(ecx26) = ebp23;
                        *reinterpret_cast<void***>(ecx26 + 4) = ecx22;
                    }
                    *reinterpret_cast<void***>(eax21) = edi24;
                    *reinterpret_cast<void***>(eax21 + 4) = *reinterpret_cast<void***>(edi24 + 4);
                    *reinterpret_cast<void***>(*reinterpret_cast<void***>(edi24 + 4)) = eax21;
                    *reinterpret_cast<void***>(edi24 + 4) = eax21;
                    *reinterpret_cast<void***>(esi11 + 52) = *reinterpret_cast<void***>(esi11 + 52) + 1;
                }
            }
            ebx8 = reinterpret_cast<struct s30*>(reinterpret_cast<int32_t>(ebx8) + 8);
        }
        *reinterpret_cast<void***>(esi11 + 80) = a3;
        return;
    }
}

void fun_1800c920(struct s25* ecx, void** a2) {
    void** esi3;
    struct s25* ebx4;
    void** eax5;
    void** edx6;
    void*** edi7;
    void** eax8;
    uint32_t ecx9;
    uint32_t ecx10;
    signed char* edi11;
    uint32_t ecx12;
    uint32_t edx13;
    uint32_t ecx14;
    uint32_t ecx15;

    esi3 = a2;
    ebx4 = ecx;
    ebx4->f0 = 16;
    eax5 = *reinterpret_cast<void***>(esi3);
    if (reinterpret_cast<unsigned char>(eax5) > reinterpret_cast<unsigned char>(36)) {
    }
    edx6 = eax5;
    edi7 = &ebx4->f4;
    eax8 = edx6;
    ecx9 = reinterpret_cast<unsigned char>(edx6) >> 2;
    while (ecx9) {
        --ecx9;
        *edi7 = *reinterpret_cast<void***>(esi3);
        edi7 = edi7 + 4;
        esi3 = esi3 + 4;
    }
    ecx10 = reinterpret_cast<unsigned char>(eax8) & 3;
    while (ecx10) {
        --ecx10;
        *edi7 = *reinterpret_cast<void***>(esi3);
        ++edi7;
        ++esi3;
    }
    edi11 = reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(edx6) + reinterpret_cast<uint32_t>(ebx4) + 4);
    ecx12 = 36 - reinterpret_cast<unsigned char>(edx6);
    edx13 = ecx12;
    ecx14 = ecx12 >> 2;
    while (ecx14) {
        --ecx14;
        *edi11 = reinterpret_cast<signed char>(0);
        edi11 = edi11 + 4;
    }
    ecx15 = edx13 & 3;
    while (ecx15) {
        --ecx15;
        *edi11 = 0;
        ++edi11;
    }
    return;
}

void fun_1800c990(struct s26* ecx, void** a2) {
    void** esi3;
    struct s26* ebx4;
    void** eax5;
    void** edx6;
    void*** edi7;
    void** eax8;
    uint32_t ecx9;
    uint32_t ecx10;
    signed char* edi11;
    uint32_t ecx12;
    uint32_t edx13;
    uint32_t ecx14;
    uint32_t ecx15;

    esi3 = a2;
    ebx4 = ecx;
    ebx4->f0 = 17;
    eax5 = *reinterpret_cast<void***>(esi3);
    if (reinterpret_cast<unsigned char>(eax5) > reinterpret_cast<unsigned char>(36)) {
    }
    edx6 = eax5;
    edi7 = &ebx4->f4;
    eax8 = edx6;
    ecx9 = reinterpret_cast<unsigned char>(edx6) >> 2;
    while (ecx9) {
        --ecx9;
        *edi7 = *reinterpret_cast<void***>(esi3);
        edi7 = edi7 + 4;
        esi3 = esi3 + 4;
    }
    ecx10 = reinterpret_cast<unsigned char>(eax8) & 3;
    while (ecx10) {
        --ecx10;
        *edi7 = *reinterpret_cast<void***>(esi3);
        ++edi7;
        ++esi3;
    }
    edi11 = reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(edx6) + reinterpret_cast<uint32_t>(ebx4) + 4);
    ecx12 = 36 - reinterpret_cast<unsigned char>(edx6);
    edx13 = ecx12;
    ecx14 = ecx12 >> 2;
    while (ecx14) {
        --ecx14;
        *edi11 = reinterpret_cast<signed char>(0);
        edi11 = edi11 + 4;
    }
    ecx15 = edx13 & 3;
    while (ecx15) {
        --ecx15;
        *edi11 = 0;
        ++edi11;
    }
    return;
}

void fun_1800a340(void** ecx, void** a2, void** a3) {
    void** edi4;
    int16_t ax5;
    int16_t ax6;
    void** edx7;
    void** edi8;
    void** esi9;
    void** ebp10;
    void** ebx11;
    void** edx12;
    void** eax13;

    edi4 = ecx + 0x70;
    ax5 = fun_1800d0d0(edi4, a2);
    if (*reinterpret_cast<signed char*>(&ax5) || (ax6 = fun_1800d0d0(ecx + 0x7c, a3), !!*reinterpret_cast<signed char*>(&ax6))) {
        *reinterpret_cast<void***>(edi4) = *reinterpret_cast<void***>(a2);
        edx7 = ecx + 0x7c;
        *reinterpret_cast<void***>(edi4 + 4) = *reinterpret_cast<void***>(a2 + 4);
        *reinterpret_cast<void***>(edi4 + 8) = *reinterpret_cast<void***>(a2 + 8);
        *reinterpret_cast<void***>(edx7) = *reinterpret_cast<void***>(a3);
        *reinterpret_cast<void***>(edx7 + 4) = *reinterpret_cast<void***>(a3 + 4);
        *reinterpret_cast<void***>(edx7 + 8) = *reinterpret_cast<void***>(a3 + 8);
        fun_1800d390(ecx + 0x94, a2, a3, edi8, esi9, ebp10, ebx11);
        if (*reinterpret_cast<void***>(ecx + 0x10c)) {
            edx12 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x10c));
            *reinterpret_cast<void***>(edx12 + 40)(a2, a3);
        }
        if (*reinterpret_cast<void***>(ecx + 0x110)) {
            eax13 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x110));
            *reinterpret_cast<void***>(eax13 + 40)(a2, a3);
        }
        *reinterpret_cast<void***>(ecx + 5) = reinterpret_cast<void**>(1);
        *reinterpret_cast<void***>(ecx + 76) = reinterpret_cast<void**>(1);
    }
    return;
}

void fun_1800a2d0(void** ecx, void** a2, uint32_t a3) {
    void** edi4;
    int16_t ax5;
    void** edx6;
    uint32_t v7;
    void** edx8;
    void** eax9;

    edi4 = ecx + 88;
    ax5 = fun_1800d0d0(edi4, a2);
    if (*reinterpret_cast<signed char*>(&ax5)) {
        *reinterpret_cast<void***>(edi4) = *reinterpret_cast<void***>(a2);
        edx6 = *reinterpret_cast<void***>(a2 + 4);
        v7 = a3;
        *reinterpret_cast<void***>(edi4 + 4) = edx6;
        *reinterpret_cast<void***>(edi4 + 8) = *reinterpret_cast<void***>(a2 + 8);
        fun_1800aeb0(ecx + 0xd4, a2, *reinterpret_cast<signed char*>(&v7));
        if (*reinterpret_cast<void***>(ecx + 0x10c)) {
            edx8 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x10c));
            *reinterpret_cast<void***>(edx8 + 32)(a2);
        }
        if (*reinterpret_cast<void***>(ecx + 0x110)) {
            eax9 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x110));
            *reinterpret_cast<void***>(eax9 + 32)(a2);
        }
        *reinterpret_cast<void***>(ecx + 5) = reinterpret_cast<void**>(1);
        *reinterpret_cast<void***>(ecx + 76) = reinterpret_cast<void**>(1);
    }
    return;
}

void fun_1800a3d0(void** ecx, void** a2) {
    void** esi3;
    unsigned char ah4;
    void** ebx5;
    void** eax6;
    void** edi7;
    void** ecx8;
    void** ecx9;
    void** edx10;
    void** eax11;

    esi3 = ecx;
    if (*reinterpret_cast<void***>(esi3 + 0xb8) && !(ah4 & 64)) {
        ebx5 = a2;
        *reinterpret_cast<void***>(esi3 + 0x8c) = a2;
        eax6 = *reinterpret_cast<void***>(esi3 + 8);
        edi7 = reinterpret_cast<void**>(0);
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax6) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax6 == 0))) {
            do {
                ecx8 = *reinterpret_cast<void***>(esi3 + 12);
                ecx9 = *reinterpret_cast<void***>(ecx8 + reinterpret_cast<unsigned char>(edi7) * 4);
                fun_18008590(ecx9, ebx5);
                ++edi7;
            } while (reinterpret_cast<signed char>(edi7) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi3 + 8)));
        }
        if (*reinterpret_cast<void***>(esi3 + 0x10c)) {
            edx10 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi3 + 0x10c));
            *reinterpret_cast<void***>(edx10 + 44)(ebx5);
        }
        if (*reinterpret_cast<void***>(esi3 + 0x110)) {
            eax11 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi3 + 0x110));
            *reinterpret_cast<void***>(eax11 + 44)(ebx5);
        }
        *reinterpret_cast<void***>(esi3 + 5) = reinterpret_cast<void**>(1);
        *reinterpret_cast<void***>(esi3 + 76) = reinterpret_cast<void**>(1);
    }
    return;
}

void fun_18009db0(void** ecx, int32_t a2, int32_t a3) {
    void** eax4;
    void** edx5;

    if (*reinterpret_cast<void***>(ecx + 0x10c)) {
        eax4 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x10c));
        *reinterpret_cast<void***>(eax4 + 24)(a2, a3);
    }
    if (*reinterpret_cast<void***>(ecx + 0x110)) {
        edx5 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x110));
        *reinterpret_cast<void***>(edx5 + 24)(a2, a3);
    }
    return;
}

void fun_18009df0(void** ecx, uint32_t a2, uint32_t a3) {
    void** ecx4;
    void** edx5;
    void** eax6;

    ecx4 = *reinterpret_cast<void***>(ecx + 0x10c);
    *reinterpret_cast<void***>(ecx + 0x148) = reinterpret_cast<void**>(~a3 & reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 0x148)) | a2 & a3);
    if (ecx4) {
        edx5 = *reinterpret_cast<void***>(ecx4);
        *reinterpret_cast<void***>(edx5 + 28)(a2, a3);
    }
    if (*reinterpret_cast<void***>(ecx + 0x110)) {
        eax6 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x110));
        *reinterpret_cast<void***>(eax6 + 28)(a2, a3);
    }
    return;
}

struct s238 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

void fun_1800c7c0(struct s20* ecx, void** a2, ...) {
    struct s238* ecx3;

    ecx->f0 = 7;
    ecx3 = reinterpret_cast<struct s238*>(&ecx->f4);
    ecx3->f0 = *reinterpret_cast<void***>(a2);
    ecx3->f4 = *reinterpret_cast<void***>(a2 + 4);
    ecx3->f8 = *reinterpret_cast<void***>(a2 + 8);
    return;
}

void fun_1800a5a0(void** ecx, void** a2) {
    unsigned char ah3;
    void** ecx4;
    void** edx5;
    void** v6;
    void** edx7;
    void** v8;

    __asm__("fld dword [esi+0xcc]");
    __asm__("fcomp dword [esp+0x8]");
    __asm__("fnstsw ax");
    if (!(ah3 & 64)) {
        ecx4 = *reinterpret_cast<void***>(ecx + 0x10c);
        *reinterpret_cast<void***>(ecx + 0xcc) = a2;
        if (ecx4) {
            edx5 = *reinterpret_cast<void***>(ecx4);
            v6 = *reinterpret_cast<void***>(ecx + 0xbc);
            *reinterpret_cast<void***>(edx5 + 56)(v6, ecx + 0xc0);
        }
        if (*reinterpret_cast<void***>(ecx + 0x110)) {
            edx7 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x110));
            v8 = *reinterpret_cast<void***>(ecx + 0xbc);
            *reinterpret_cast<void***>(edx7 + 56)(v8, ecx + 0xc0);
        }
    }
    return;
}

void fun_1800a600(void** ecx, void** a2) {
    unsigned char ah3;
    void** ecx4;
    void** edx5;
    void** v6;
    void** edx7;
    void** v8;

    __asm__("fld dword [esi+0xc8]");
    __asm__("fcomp dword [esp+0x8]");
    __asm__("fnstsw ax");
    if (!(ah3 & 64)) {
        ecx4 = *reinterpret_cast<void***>(ecx + 0x10c);
        *reinterpret_cast<void***>(ecx + 0xc8) = a2;
        if (ecx4) {
            edx5 = *reinterpret_cast<void***>(ecx4);
            v6 = *reinterpret_cast<void***>(ecx + 0xbc);
            *reinterpret_cast<void***>(edx5 + 56)(v6, ecx + 0xc0);
        }
        if (*reinterpret_cast<void***>(ecx + 0x110)) {
            edx7 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x110));
            v8 = *reinterpret_cast<void***>(ecx + 0xbc);
            *reinterpret_cast<void***>(edx7 + 56)(v8, ecx + 0xc0);
        }
    }
    return;
}

struct s239 {
    void** f0;
    signed char[3] pad4;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

void fun_1800a660(void** ecx, void** a2, void** a3) {
    void*** eax4;
    struct s44* edi5;
    struct s239* ecx6;
    void** eax7;
    void** eax8;
    void** edx9;

    if (*reinterpret_cast<void***>(ecx + 0xbc) != a2 || *reinterpret_cast<void***>(ecx + 0xc0) != a3) {
        *reinterpret_cast<void***>(ecx + 0xbc) = a2;
        eax4 = reinterpret_cast<void***>(0x180382c0);
        if (a2) {
            eax4 = reinterpret_cast<void***>(0x18038470);
        }
        edi5 = reinterpret_cast<struct s44*>(ecx + 0xc0);
        ecx6 = reinterpret_cast<struct s239*>((reinterpret_cast<unsigned char>(a3 + 1) << 4) + reinterpret_cast<uint32_t>(eax4));
        edi5->f0 = ecx6->f0;
        edi5->f4 = ecx6->f4;
        edi5->f8 = ecx6->f8;
        edi5->f12 = ecx6->f12;
        if (*reinterpret_cast<void***>(ecx + 0x10c)) {
            eax7 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x10c));
            *reinterpret_cast<void***>(eax7 + 56)(a2, edi5);
        }
        if (*reinterpret_cast<void***>(ecx + 0x110)) {
            eax8 = *reinterpret_cast<void***>(ecx + 0xbc);
            edx9 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x110));
            *reinterpret_cast<void***>(edx9 + 56)(eax8, edi5);
        }
    }
    return;
}

void fun_1800a6f0(void** ecx, void** a2) {
    unsigned char ah3;
    void** ecx4;
    void** edx5;
    void** v6;
    void** edx7;
    void** v8;

    __asm__("fld dword [esi+0xc4]");
    __asm__("fcomp dword [esp+0x8]");
    __asm__("fnstsw ax");
    if (!(ah3 & 64)) {
        ecx4 = *reinterpret_cast<void***>(ecx + 0x10c);
        *reinterpret_cast<void***>(ecx + 0xc4) = a2;
        if (ecx4) {
            edx5 = *reinterpret_cast<void***>(ecx4);
            v6 = *reinterpret_cast<void***>(ecx + 0xbc);
            *reinterpret_cast<void***>(edx5 + 56)(v6, ecx + 0xc0);
        }
        if (*reinterpret_cast<void***>(ecx + 0x110)) {
            edx7 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x110));
            v8 = *reinterpret_cast<void***>(ecx + 0xbc);
            *reinterpret_cast<void***>(edx7 + 56)(v8, ecx + 0xc0);
        }
    }
    return;
}

void fun_1800a550(void** ecx, void** a2) {
    unsigned char ah3;
    void** ecx4;
    void** edx5;
    void** eax6;

    __asm__("fld dword [esi+0xd0]");
    __asm__("fcomp dword [esp+0x8]");
    __asm__("fnstsw ax");
    if (!(ah3 & 64)) {
        ecx4 = *reinterpret_cast<void***>(ecx + 0x10c);
        *reinterpret_cast<void***>(ecx + 0xd0) = a2;
        if (ecx4) {
            edx5 = *reinterpret_cast<void***>(ecx4);
            *reinterpret_cast<void***>(edx5 + 48)(a2);
        }
        if (*reinterpret_cast<void***>(ecx + 0x110)) {
            eax6 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x110));
            *reinterpret_cast<void***>(eax6 + 48)(a2);
        }
        *reinterpret_cast<void***>(ecx + 5) = reinterpret_cast<void**>(1);
    }
    return;
}

struct s240 {
    signed char[4] pad4;
    void** f4;
};

void fun_18009d60(void** ecx);

int16_t fun_18009c70(void** ecx, void** a2, void** a3) {
    void** eax4;
    void*** esp5;
    void*** esi6;
    uint32_t esi7;
    void*** eax8;
    signed char bl9;
    void** esi10;
    void* eax11;
    struct s240* eax12;
    void** eax13;
    void** ecx14;
    void** eax15;
    void** edx16;
    void*** esp17;
    void** esi18;
    void** ebx19;
    void** edi20;
    void** ebp21;
    void** v22;
    void** v23;
    void** v24;
    void** v25;
    void** v26;
    void** ecx27;
    void** edx28;
    void** ecx29;
    void** edx30;
    void** eax31;
    void** v32;
    void** eax33;
    void** v34;
    void** eax35;

    eax4 = *reinterpret_cast<void***>(ecx + 0x150);
    if (a2 != eax4) {
        esp5 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 - 4 - 4 - 4);
        esi6 = reinterpret_cast<void***>(a2 - 3);
        esi7 = -reinterpret_cast<uint32_t>(esi6);
        eax8 = reinterpret_cast<void***>(eax4 - 3);
        bl9 = 0;
        esi10 = reinterpret_cast<void**>((esi7 - (esi7 + reinterpret_cast<uint1_t>(esi7 < esi7 + reinterpret_cast<uint1_t>(!!esi6))) & 0xfffffffe) + 4);
        eax11 = reinterpret_cast<void*>(-reinterpret_cast<uint32_t>(eax8));
        eax12 = reinterpret_cast<struct s240*>(reinterpret_cast<uint32_t>(eax11) - (reinterpret_cast<uint32_t>(eax11) + reinterpret_cast<uint1_t>(reinterpret_cast<uint32_t>(eax11) < reinterpret_cast<uint32_t>(eax11) + reinterpret_cast<uint1_t>(!!eax8))));
        *reinterpret_cast<unsigned char*>(&eax12) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax12) & 0xfe);
        if (&eax12->f4 != esi10 && *reinterpret_cast<void***>(ecx + 0x108)) {
            if (*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x108) + 4)) {
                eax13 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x108));
                *reinterpret_cast<void***>(eax13 + 12)();
                esp5 = esp5 - 4 + 4;
                bl9 = 1;
            }
            ecx14 = reinterpret_cast<void**>(0);
            eax15 = *reinterpret_cast<void***>(ecx + 0x108) + 20;
            ecx14 = *reinterpret_cast<void***>(eax15 + 14);
            edx16 = *reinterpret_cast<void***>(eax15 + 4);
            esp17 = esp5 - 4 - 4;
            fun_18027240(esp17 + 24, esi10, edx16, ecx14, esi18, ebx19, edi20, ebp21, v22, v23, v24, v25, v26, __return_address(), a2, a3);
            ecx27 = *reinterpret_cast<void***>(ecx + 0x108);
            edx28 = *reinterpret_cast<void***>(ecx27);
            *reinterpret_cast<void***>(edx28 + 4)(esp17 - 4 - 4 - 4 + 16 + 4 + 16);
        }
        *reinterpret_cast<void***>(ecx + 0x150) = a2;
        fun_18009d60(ecx);
        if (bl9) {
            ecx29 = *reinterpret_cast<void***>(ecx + 0x108);
            edx30 = *reinterpret_cast<void***>(ecx29);
            *reinterpret_cast<void***>(edx30 + 8)(0);
        }
        if (*reinterpret_cast<void***>(ecx + 0x10c)) {
            eax31 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x10c));
            v32 = *reinterpret_cast<void***>(ecx + 0x150);
            *reinterpret_cast<void***>(eax31 + 20)(v32);
        }
        if (*reinterpret_cast<void***>(ecx + 0x110)) {
            eax33 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x110));
            v34 = *reinterpret_cast<void***>(ecx + 0x150);
            *reinterpret_cast<void***>(eax33 + 20)(v34);
        }
        if (bl9) {
            eax35 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x108));
            *reinterpret_cast<void***>(eax35 + 16)();
        }
    }
    return 0;
}

void fun_1800a4b0(void** ecx, int32_t a2) {
    void* esp3;
    unsigned char ah4;
    void* eax5;
    unsigned char ah6;
    void** ecx7;
    void** eax8;
    void** edx9;

    __asm__("fld dword [esp+0x4]");
    __asm__("fcomp dword [0x1803422c]");
    esp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 8 - 4);
    __asm__("fnstsw ax");
    if (!(ah4 & 65)) {
        __asm__("fld dword [0x18034718]");
        __asm__("fdiv dword [esp+0x10]");
        __asm__("fst dword [esp+0x4]");
        __asm__("fcomp dword [0x18034554]");
        __asm__("fnstsw ax");
        eax5 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp3) + 4);
        if (!(ah6 & 65)) {
            eax5 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp3) + 8);
        }
        __asm__("fld dword [eax]");
    } else {
        __asm__("fld dword [0x1803422c]");
    }
    __asm__("fcom dword [esi+0x90]");
    __asm__("fnstsw ax");
    if (reinterpret_cast<unsigned char>(*reinterpret_cast<void**>(reinterpret_cast<int32_t>(&eax5) + 1)) & 64) {
        __asm__("fstp st0");
        return;
    } else {
        ecx7 = *reinterpret_cast<void***>(ecx + 0x10c);
        __asm__("fstp dword [esi+0x90]");
        if (ecx7) {
            eax8 = *reinterpret_cast<void***>(ecx7);
            *reinterpret_cast<void***>(eax8 + 52)(a2);
        }
        if (*reinterpret_cast<void***>(ecx + 0x110)) {
            edx9 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x110));
            *reinterpret_cast<void***>(edx9 + 52)(a2);
        }
        *reinterpret_cast<void***>(ecx + 5) = reinterpret_cast<void**>(1);
        return;
    }
}

void fun_1800a810(void** ecx) {
    void** eax2;

    eax2 = reinterpret_cast<void**>(*reinterpret_cast<void***>(ecx + 0x118 + 20)());
    *reinterpret_cast<void***>(ecx + 0x118 + 28) = eax2;
    *reinterpret_cast<void***>(ecx + 0x118) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x118 + 4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x118 + 8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x118 + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x118 + 24) = reinterpret_cast<void**>(1);
    return;
}

void fun_180274b0(void** ecx);

void fun_1800a820(void** ecx, void** a2) {
    void** edi3;

    edi3 = ecx + 0x118;
    fun_180274b0(edi3);
    *reinterpret_cast<void***>(a2) = *reinterpret_cast<void***>(edi3);
    *reinterpret_cast<void***>(a2 + 4) = *reinterpret_cast<void***>(ecx + 0x11c);
    *reinterpret_cast<void***>(a2 + 8) = *reinterpret_cast<void***>(ecx + 0x120);
    *reinterpret_cast<void***>(a2 + 12) = *reinterpret_cast<void***>(ecx + 0x124);
    *reinterpret_cast<void***>(a2 + 16) = *reinterpret_cast<void***>(ecx + 0x128);
    return;
}

int32_t fun_18004e10(void** ecx) {
    void** ecx2;
    void** v3;
    void** edx4;
    void** v5;

    if (*reinterpret_cast<void***>(ecx + 56)) {
        ecx2 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 56));
        v3 = *reinterpret_cast<void***>(ecx + 56);
        *reinterpret_cast<void***>(ecx2 + 8)(v3);
        *reinterpret_cast<void***>(ecx + 56) = reinterpret_cast<void**>(0);
    }
    if (*reinterpret_cast<void***>(ecx + 52)) {
        edx4 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 52));
        v5 = *reinterpret_cast<void***>(ecx + 52);
        *reinterpret_cast<void***>(edx4 + 8)(v5);
        *reinterpret_cast<void***>(ecx + 52) = reinterpret_cast<void**>(0);
    }
    return 0;
}

void fun_1800cc80(void** ecx, void** a2, void** a3) {
    *reinterpret_cast<void***>(ecx + 4) = a2;
    *reinterpret_cast<void***>(ecx + 8) = a3;
    *reinterpret_cast<void***>(ecx + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 16) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x1803464c);
    return;
}

struct s242 {
    struct s242* f0;
    signed char[4] pad8;
    void** f8;
};

struct s243 {
    struct s243* f0;
    signed char[4] pad8;
    void** f8;
};

struct s244 {
    signed char[40] pad40;
    int32_t f40;
};

struct s241 {
    signed char[4] pad4;
    void** f4;
    signed char[11] pad16;
    struct s242* f16;
    signed char[16] pad36;
    struct s243* f36;
    signed char[12] pad52;
    void** f52;
    signed char[3] pad56;
    struct s244** f56;
    void** f60;
};

void fun_18004ee0(struct s241* ecx) {
    void** v2;
    void** ebx3;
    void** v4;
    void** ebp5;
    struct s241* ebp6;
    void** v7;
    void** esi8;
    void*** esp9;
    void** v10;
    void** edi11;
    struct s242* esi12;
    struct s242* edi13;
    struct s44* ebx14;
    struct s243* esi15;
    struct s243* edi16;
    void* esp17;
    void** v18;
    void** v19;
    void** v20;
    void** v21;
    void** v22;
    void** v23;
    void** v24;
    void** v25;
    void* esp26;
    void** eax27;
    void** ecx28;
    void** edx29;
    int32_t eax30;
    void** ecx31;
    void** ecx32;
    void** edx33;
    void** eax34;
    signed char al35;
    void** ecx36;
    void** eax37;
    void** eax38;
    signed char al39;

    v2 = ebx3;
    v4 = ebp5;
    ebp6 = ecx;
    v7 = esi8;
    esp9 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4);
    v10 = edi11;
    esi12 = ebp6->f16;
    edi13 = reinterpret_cast<struct s242*>(&ebp6->f16);
    ebx14 = reinterpret_cast<struct s44*>(ebp6->f4 + 0xc0);
    if (esi12 == edi13) {
        addr_0x18004f1d_2:
        esi15 = ebp6->f36;
        edi16 = reinterpret_cast<struct s243*>(&ebp6->f36);
        if (esi15 == edi16) {
            addr_0x18004f44_3:
            if (ebp6->f52 && (esp17 = reinterpret_cast<void*>(esp9 - 4 - 4), fun_18027240(reinterpret_cast<int32_t>(esp17) + 28, 2, 0x5622, 16, v10, v7, v4, v2, v18, v19, v20, v21, v22, v23, v24, v25), esp26 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp17) - 4 - 4 - 4 + 16 + 4), eax27 = ebp6->f52, ecx28 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp26) - 4 - 4 + 48), edx29 = *reinterpret_cast<void***>(eax27), eax30 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(edx29 + 12)(eax27, ecx28, reinterpret_cast<int32_t>(esp26) + 16, 0)), eax30 >= 0)) {
                fun_18004fc0(ecx28, v10, ebx14, eax27, ecx28, reinterpret_cast<int32_t>(esp26) + 16, 0);
                ecx31 = *reinterpret_cast<void***>(v10);
                *reinterpret_cast<void***>(ecx31 + 8)(v10, eax27, ecx28, reinterpret_cast<int32_t>(esp26) + 16, 0);
            }
        } else {
            do {
                ecx32 = esi15->f8;
                edx33 = *reinterpret_cast<void***>(ecx32);
                eax34 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx33 + 28)());
                esp9 = esp9 - 4 + 4;
                if (!eax34) 
                    continue;
                al35 = fun_18004fc0(ecx32, eax34, ebx14, v10, v7, v4, v2);
                esp9 = esp9 - 4 - 4 - 4 + 8 + 4;
                if (al35) 
                    break;
                esi15 = esi15->f0;
            } while (esi15 != edi16);
            goto addr_0x18004f44_3;
        }
    } else {
        do {
            ecx36 = esi12->f8;
            eax37 = *reinterpret_cast<void***>(ecx36);
            eax38 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax37 + 28)());
            esp9 = esp9 - 4 + 4;
            if (!eax38) 
                continue;
            al39 = fun_18004fc0(ecx36, eax38, ebx14, v10, v7, v4, v2);
            esp9 = esp9 - 4 - 4 - 4 + 8 + 4;
            if (al39) 
                break;
            esi12 = esi12->f0;
        } while (esi12 != edi13);
        goto addr_0x18004f1d_2;
    }
    return;
}

void fun_1800ca00(void** ecx, void** a2, void** a3) {
    void** ecx4;
    void** ecx5;

    *reinterpret_cast<void***>(ecx + 8) = a3;
    *reinterpret_cast<void***>(ecx + 4) = a2;
    ecx4 = ecx + 16;
    *reinterpret_cast<void***>(ecx + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 28) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx4) = ecx4;
    *reinterpret_cast<void***>(ecx + 20) = ecx4;
    ecx5 = ecx + 36;
    *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 48) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 40) = ecx5;
    *reinterpret_cast<void***>(ecx5) = ecx5;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034610);
    return;
}

void* fun_1800a7f0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17) {
    void* ax18;

    ax18 = fun_1800d430(ecx + 0x94, a2, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
    return ax18;
}

int16_t fun_1800cf60(void** a1) {
    unsigned char ah2;
    unsigned char ah3;
    int32_t eax4;
    int32_t v5;

    __asm__("fld dword [ebp+0x8]");
    __asm__("fcomp dword [0x18034238]");
    __asm__("fnstsw ax");
    if (!(ah2 & 64)) {
        __asm__("fld dword [ebp+0x8]");
        __asm__("fcomp dword [0x1803422c]");
        __asm__("fnstsw ax");
        if (!(ah3 & 65)) {
            __asm__("fld qword [0x180346a8]");
            __asm__("fstp dword [ebp-0x4]");
            __asm__("fld dword [ebp-0x4]");
            __asm__("fld dword [ebp+0x8]");
            __asm__("fyl2x ");
            __asm__("fstp dword [ebp-0x8]");
            __asm__("fld dword [ebp+0x8]");
            __asm__("fistp dword [ebp-0x8]");
            eax4 = v5;
            return *reinterpret_cast<int16_t*>(&eax4);
        } else {
            return 0xd8f0;
        }
    } else {
        return 0;
    }
}

struct s245 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

struct s246 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

void fun_180274d0(void** ecx) {
    void** eax2;
    void** edx3;
    void** ecx4;
    int32_t esi5;
    void** edx6;
    void** edx7;
    void** edx8;
    void** edx9;
    void** ecx10;
    void** ebx11;
    void** edi12;
    void** ebx13;
    void** ebx14;
    void** ebx15;
    struct s183* edx16;
    int32_t esi17;
    struct s245* ecx18;
    void** ebx19;
    struct s245* edi20;
    void** ebx21;
    void** ebx22;
    void** ebx23;
    struct s184* edx24;
    int32_t esi25;
    struct s246* ecx26;
    void** ebx27;
    struct s246* edi28;
    void** ebx29;
    void** ebx30;
    void** ebx31;
    void** edx32;

    eax2 = ecx;
    *reinterpret_cast<void***>(eax2 + 4) = reinterpret_cast<void**>(1);
    edx3 = g180458c8;
    ecx4 = eax2 + 28;
    esi5 = 6;
    *reinterpret_cast<void***>(ecx4) = edx3;
    edx6 = g180458cc;
    *reinterpret_cast<void***>(ecx4 + 4) = edx6;
    edx7 = g180458d0;
    *reinterpret_cast<void***>(ecx4 + 8) = edx7;
    edx8 = g180458d4;
    *reinterpret_cast<void***>(eax2 + 44) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx4 + 12) = edx8;
    edx9 = eax2 + 48;
    ecx10 = edx9 + 4;
    do {
        *reinterpret_cast<void***>(edx9) = reinterpret_cast<void**>(0);
        ebx11 = g180458c8;
        edi12 = ecx10;
        edx9 = edx9 + 20;
        ecx10 = ecx10 + 20;
        --esi5;
        *reinterpret_cast<void***>(edi12) = ebx11;
        ebx13 = g180458cc;
        *reinterpret_cast<void***>(edi12 + 4) = ebx13;
        ebx14 = g180458d0;
        *reinterpret_cast<void***>(edi12 + 8) = ebx14;
        ebx15 = g180458d4;
        *reinterpret_cast<void***>(edi12 + 12) = ebx15;
    } while (esi5);
    edx16 = reinterpret_cast<struct s183*>(eax2 + 0xa8);
    esi17 = 6;
    ecx18 = reinterpret_cast<struct s245*>(&edx16->f4);
    do {
        edx16->f0 = reinterpret_cast<void**>(0);
        ebx19 = g180458c8;
        edi20 = ecx18;
        edx16 = reinterpret_cast<struct s183*>(&edx16->pad288);
        ecx18 = reinterpret_cast<struct s245*>(reinterpret_cast<uint32_t>(ecx18) + 20);
        --esi17;
        edi20->f0 = ebx19;
        ebx21 = g180458cc;
        edi20->f4 = ebx21;
        ebx22 = g180458d0;
        edi20->f8 = ebx22;
        ebx23 = g180458d4;
        edi20->f12 = ebx23;
    } while (esi17);
    edx24 = reinterpret_cast<struct s184*>(eax2 + 0x120);
    esi25 = 6;
    ecx26 = reinterpret_cast<struct s246*>(&edx24->f4);
    do {
        edx24->f0 = reinterpret_cast<void**>(0);
        ebx27 = g180458c8;
        edi28 = ecx26;
        edx24 = edx24 + 4;
        ecx26 = reinterpret_cast<struct s246*>(reinterpret_cast<uint32_t>(ecx26) + 20);
        --esi25;
        edi28->f0 = ebx27;
        ebx29 = g180458cc;
        edi28->f4 = ebx29;
        ebx30 = g180458d0;
        edi28->f8 = ebx30;
        ebx31 = g180458d4;
        edi28->f12 = ebx31;
    } while (esi25);
    edx32 = eax2 + 8;
    *reinterpret_cast<void***>(eax2) = reinterpret_cast<void**>(0x180351f4);
    *reinterpret_cast<void***>(edx32) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(edx32 + 4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(edx32 + 8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(edx32 + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(edx32 + 16) = reinterpret_cast<void**>(0);
    return;
}

int16_t fun_1800bed0(void** ecx, void** a2) {
    *reinterpret_cast<void***>(ecx + 0x1bc) = *reinterpret_cast<void***>(a2 + 14);
    return 0;
}

void fun_18029f00(void** ecx, void** a2, void** a3, void** a4, void*** a5, void** a6);

int16_t fun_1800bf90(void** ecx, void** a2) {
    void** ecx3;
    signed char al4;
    void** ecx5;
    void** edi6;
    void** ecx7;
    void** edx8;
    void** ecx9;
    void** edi10;

    ecx3 = *reinterpret_cast<void***>(ecx + 0x1a4);
    if (!ecx3 || (al4 = fun_1800ce10(ecx3, ~reinterpret_cast<unsigned char>(a2)), al4 == 0)) {
        ecx5 = *reinterpret_cast<void***>(ecx + 0x1a4);
        edi6 = *reinterpret_cast<void***>(ecx5 + 68);
        ecx7 = *reinterpret_cast<void***>(ecx + 0x1ac);
        edx8 = *reinterpret_cast<void***>(ecx + 0x198);
        ecx9 = *reinterpret_cast<void***>(edx8 + 0x158);
        fun_18029f00(ecx9, edi6, ecx7, ecx + 0x248, ecx + 0x240, ecx);
        edi10 = *reinterpret_cast<void***>(edi6 + 16);
        *reinterpret_cast<void***>(ecx + 0x1b4) = edi10;
        *reinterpret_cast<void***>(ecx + 0x1b8) = edi10;
        return 0;
    } else {
        return 37;
    }
}

int16_t fun_180063b0(uint32_t a1) {
    uint32_t eax2;

    eax2 = a1 & 0x70;
    if (eax2 == 16) {
        return 0x6330;
    } else {
        if (eax2 == 32) {
            return 0x6370;
        } else {
            return 0x62f0;
        }
    }
}

int16_t fun_18006580(void** ecx, void** a2, void** a3, uint32_t a4, void** a5, int32_t a6, struct s52* a7) {
    int32_t v8;
    int32_t v9;
    int32_t ebx10;
    int32_t v11;
    int32_t ebp12;
    int32_t eax13;
    void** edi14;
    int32_t ebx15;
    void** esi16;
    int32_t eax17;
    void** edx18;
    int32_t eax19;

    v8 = reinterpret_cast<int32_t>(__return_address());
    v9 = ebx10;
    v11 = ebp12;
    if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(a3) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(a3 == 0)) {
        addr_0x180065d4_2:
        eax13 = a7->f4;
        return *reinterpret_cast<int16_t*>(&eax13);
    } else {
        edi14 = a2;
        ebx15 = a6;
        do {
            esi16 = *reinterpret_cast<void***>(edi14);
            eax17 = reinterpret_cast<int32_t>(ebx15(esi16));
            if (eax17 == 2) 
                break;
            if (eax17 == 1) {
                edx18 = *reinterpret_cast<void***>(a5);
                *reinterpret_cast<void***>(edx18)(esi16);
            }
            eax19 = v11 + 1;
            edi14 = edi14 + 4;
            v11 = eax19;
        } while (eax19 < v8);
        goto addr_0x180065d4_2;
    }
    goto v9;
}

void fun_18007600(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30) {
    void** v31;
    void** v32;
    void** ebx33;
    void** v34;
    void** esi35;
    void** esi36;
    void** ebx37;
    void*** esp38;
    void** v39;
    void** edi40;
    struct s53* edi41;
    void** v42;
    void*** esp43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void* esp56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void* esp68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** v74;
    void** v75;
    void** v76;
    void** v77;
    void** v78;
    void** v79;
    void** v80;
    void** edi81;
    void** v82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** v92;
    void* esp93;
    void** edi94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** v103;
    void** v104;
    void** v105;
    void* esp106;
    void** v107;
    void** v108;
    void** v109;
    void** v110;
    void** v111;
    void** v112;
    void** v113;
    void** v114;
    void** v115;
    void** v116;
    void** v117;
    void** eax118;
    void** edi119;
    void** v120;
    void** v121;
    void** v122;
    void** v123;
    void** ecx124;
    void** eax125;

    v31 = reinterpret_cast<void**>(__return_address());
    v32 = ebx33;
    v34 = esi35;
    esi36 = ecx;
    ebx37 = a2;
    esp38 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4);
    v39 = edi40;
    edi41 = reinterpret_cast<struct s53*>(esi36 + 0x2e0);
    if (*reinterpret_cast<void***>(esi36 + 0x2e0)) {
        do {
            v42 = reinterpret_cast<void**>(&(*reinterpret_cast<struct s65**>(esi36 + 0x2e4))->f8);
            fun_1800c650(esp38 + 12, v42);
            esp43 = esp38 - 4 - 4 + 4 + 4 - 4;
            v44 = *reinterpret_cast<void***>(&edi41->f4);
            fun_18009170(edi41, esp43 + 64, v44, v39, v34, v32, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v31, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25);
            esp56 = reinterpret_cast<void*>(esp43 - 4 - 4 + 8 + 4);
            fun_1800c060(ebx37, reinterpret_cast<int32_t>(esp56) + 12, v39, v34, v32, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v31, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
            esp68 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp56) - 4 - 4 + 4 + 4);
            ecx = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp68) + 12);
            fun_1800c670(ecx, v39, v34, v32, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v31, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30);
            esp38 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp68) - 4 + 4);
        } while (edi41->f0);
    }
    if (*reinterpret_cast<void***>(esi36 + 0x31c)) {
        do {
            v80 = *reinterpret_cast<void***>(esi36 + 0x320) + 8;
            fun_1800c650(esp38 + 12, v80);
            edi81 = *reinterpret_cast<void***>(esi36 + 0x320);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(edi81 + 4)) = *reinterpret_cast<void***>(edi81);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(edi81) + 4) = *reinterpret_cast<void***>(edi81 + 4);
            fun_18007a00(edi81 + 8, 0, v39, v34, v32, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v31, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28);
            esp93 = reinterpret_cast<void*>(esp38 - 4 - 4 + 4 + 4 - 4 - 4 + 4 + 4);
            *reinterpret_cast<void***>(edi81) = *reinterpret_cast<void***>(esi36 + 0x354);
            *reinterpret_cast<void***>(esi36 + 0x354) = edi81;
            edi94 = *reinterpret_cast<void***>(esi36 + 0x31c);
            *reinterpret_cast<void***>(esi36 + 0x31c) = edi94 - 1;
            fun_1800c090(ebx37, reinterpret_cast<int32_t>(esp93) + 12, v39, v34, v32, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v31, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
            esp106 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp93) - 4 - 4 + 4 + 4);
            ecx = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp106) + 12);
            fun_1800c670(ecx, v39, v34, v32, v107, v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, v31, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30);
            esp38 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp106) - 4 + 4);
        } while (*reinterpret_cast<void***>(esi36 + 0x31c));
    }
    eax118 = *reinterpret_cast<void***>(esi36 + 0x2dc);
    edi119 = esi36 + 0x2d0;
    if (!eax118) {
        eax118 = fun_1802b2bb(ecx, 12, v39, v34, v32, v120, v121, v122, v123);
    } else {
        *reinterpret_cast<void***>(esi36 + 0x2dc) = *reinterpret_cast<void***>(eax118);
    }
    if (eax118) {
        ecx124 = eax118 + 8;
        if (ecx124) {
            *reinterpret_cast<void***>(ecx124) = ebx37;
        }
        *reinterpret_cast<void***>(eax118) = edi119;
        *reinterpret_cast<void***>(eax118 + 4) = *reinterpret_cast<void***>(edi119 + 4);
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(edi119 + 4)) = eax118;
        *reinterpret_cast<void***>(edi119 + 4) = eax118;
        *reinterpret_cast<void***>(esi36 + 0x2cc) = *reinterpret_cast<void***>(esi36 + 0x2cc) + 1;
    }
    eax125 = *reinterpret_cast<void***>(esi36 + 0x198);
    *reinterpret_cast<void***>(esi36 + 0x2c5) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(eax125 + 76) = reinterpret_cast<void**>(1);
    return;
}

void** fun_18008460(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void*** esp8;
    void** eax9;
    void** eax10;
    void** eax11;
    void** v12;
    void** ecx13;
    void** esi14;
    void** v15;
    void** v16;
    void*** esp17;
    void** eax18;
    void* esp19;
    void** ecx20;
    void** edx21;
    void** v22;
    void** v23;
    void** v24;
    void** v25;
    void** v26;
    void** v27;
    void** v28;

    esp8 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 36 - 4);
    eax9 = *reinterpret_cast<void***>(ecx + 0x2bc);
    if (eax9) {
        eax10 = *reinterpret_cast<void***>(ecx + 0x2c8);
        *reinterpret_cast<void***>(ecx + 0x2bc) = reinterpret_cast<void**>(0);
        if (!eax10) {
            eax11 = reinterpret_cast<void**>(&(*reinterpret_cast<struct s27**>(ecx + 0x280))->f4);
            v12 = eax11;
            ecx13 = *reinterpret_cast<void***>(ecx + 0x198);
            *reinterpret_cast<int16_t*>(&eax11) = fun_18001020(ecx13, esp8 + 16, ecx + 0x1b4, v12, esi14, v15, v16);
            esp17 = esp8 - 4 - 4 - 4 - 4 + 8 + 4 - 4;
            eax18 = reinterpret_cast<void**>(esp17 + 36);
            *reinterpret_cast<int16_t*>(&eax18) = fun_1800d1a0(ecx13, eax18, eax11, v12);
            esp19 = reinterpret_cast<void*>(esp17 - 4 - 4 + 12 + 4);
            ecx20 = *reinterpret_cast<void***>(eax18 + 4);
            edx21 = *reinterpret_cast<void***>(eax18 + 8);
            v22 = *reinterpret_cast<void***>(eax18);
            eax9 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp19) + 4);
            *reinterpret_cast<void**>(&eax9) = fun_1800d240(reinterpret_cast<int32_t>(esp19) + 4, eax9, esi14, v22, ecx20, edx21, v23, v24, v25, v26, v27, v28, __return_address(), a2, a3, a4, a5, a6, a7);
            __asm__("fstp dword [esi+0x2c0]");
        } else {
            __asm__("fld dword [esi+0x24c]");
            __asm__("fld st0");
            __asm__("fmul st0, st1");
            __asm__("fstp dword [esi+0x2c0]");
            __asm__("fstp st0");
            return eax10;
        }
    }
    return eax9;
}

void fun_1802b324(void** a1, uint32_t a2, void** a3, void** a4) {
    uint32_t v5;
    void** ebx6;
    void** v7;
    void** esi8;
    void** v9;
    uint32_t eax10;
    void** ecx11;
    void** v12;
    void** edi13;
    void** eax14;
    int32_t eax15;
    int32_t eax16;
    void** v17;
    void** edx18;

    if (a2 >= 2 && a3) {
        v5 = 0;
        ebx6 = a1;
        v7 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff80);
        esi8 = reinterpret_cast<void**>((a2 - 1) * reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(ebx6));
        v9 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffff08);
        while (1) {
            eax10 = (reinterpret_cast<unsigned char>(esi8) - reinterpret_cast<unsigned char>(ebx6)) / reinterpret_cast<unsigned char>(a3) + 1;
            if (eax10 > 8) {
                fun_1802b4c6(ecx11, (eax10 >> 1) * reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(ebx6), ebx6, a3);
                v12 = ebx6;
                edi13 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(esi8));
                while (1) {
                    eax14 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v12) + reinterpret_cast<unsigned char>(a3));
                    v12 = eax14;
                    if (reinterpret_cast<unsigned char>(eax14) <= reinterpret_cast<unsigned char>(esi8)) {
                        eax15 = reinterpret_cast<int32_t>(a4(ecx11));
                        ecx11 = ebx6;
                        if (reinterpret_cast<uint1_t>(eax15 < 0) | reinterpret_cast<uint1_t>(eax15 == 0)) 
                            continue;
                    }
                    do {
                        edi13 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi13) - reinterpret_cast<unsigned char>(a3));
                        if (reinterpret_cast<unsigned char>(edi13) <= reinterpret_cast<unsigned char>(ebx6)) 
                            break;
                        eax16 = reinterpret_cast<int32_t>(a4(ecx11));
                        ecx11 = ebx6;
                    } while (eax16 >= 0);
                    if (reinterpret_cast<unsigned char>(edi13) < reinterpret_cast<unsigned char>(v12)) 
                        break;
                    fun_1802b4c6(ecx11, v12, edi13, a3);
                }
                fun_1802b4c6(ecx11, ebx6, edi13, a3);
                ecx11 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi13) - reinterpret_cast<unsigned char>(ebx6) - 1);
                if (reinterpret_cast<signed char>(ecx11) >= reinterpret_cast<signed char>(reinterpret_cast<unsigned char>(esi8) - reinterpret_cast<unsigned char>(v12))) 
                    goto addr_0x1802b413_12;
            } else {
                fun_1802b478(ebx6, esi8, a3, a4);
                goto addr_0x1802b382_14;
            }
            if (reinterpret_cast<unsigned char>(v12) < reinterpret_cast<unsigned char>(esi8)) {
                ecx11 = v9;
                ++v5;
                v9 = v9 + 4;
                *reinterpret_cast<void***>(ecx11) = v12;
                v7 = v7 + 4;
            }
            if (reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(ebx6)) < reinterpret_cast<unsigned char>(edi13)) {
                esi8 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi13) - reinterpret_cast<unsigned char>(a3));
                continue;
            }
            addr_0x1802b382_14:
            --v5;
            v9 = v9 - 4;
            v7 = v7 - 4;
            if (reinterpret_cast<int32_t>(v5) < reinterpret_cast<int32_t>(0)) 
                break;
            ebx6 = *reinterpret_cast<void***>(v9);
            esi8 = v17;
            continue;
            addr_0x1802b413_12:
            ecx11 = a3;
            if (reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(ebx6) + reinterpret_cast<unsigned char>(ecx11)) < reinterpret_cast<unsigned char>(edi13)) {
                edx18 = v9;
                v9 = v9 + 4;
                ecx11 = v7;
                ++v5;
                v7 = v7 + 4;
                *reinterpret_cast<void***>(edx18) = ebx6;
            }
            if (reinterpret_cast<unsigned char>(v12) < reinterpret_cast<unsigned char>(esi8)) {
                ebx6 = v12;
            }
        }
    }
    return;
}

int16_t fun_18009e40(void** ecx, uint32_t a2) {
    void** ebx3;
    void** ebp4;
    void** edi5;
    uint32_t eax6;
    void** esi7;
    void** ecx8;
    void** ecx9;

    ebx3 = ecx;
    ebp4 = ebx3 + 56;
    edi5 = *reinterpret_cast<void***>(ebp4);
    if (edi5 == ebp4) {
        addr_0x18009e89_2:
        eax6 = 0;
    } else {
        do {
            eax6 = a2;
            esi7 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(edi5 + 8)) & eax6);
            if (!esi7) 
                continue;
            ecx8 = *reinterpret_cast<void***>(ebx3 + 0x110);
            if (!ecx8) 
                goto addr_0x18009e6f_5;
            *reinterpret_cast<int16_t*>(&eax6) = fun_1800cc30(ecx8, esi7);
            if (eax6) 
                break;
            addr_0x18009e6f_5:
            ecx9 = *reinterpret_cast<void***>(ebx3 + 0x10c);
            if (!ecx9) 
                continue;
            *reinterpret_cast<int16_t*>(&eax6) = fun_1800cc30(ecx9, esi7);
            if (eax6) 
                break;
            edi5 = *reinterpret_cast<void***>(edi5);
        } while (edi5 != ebp4);
        goto addr_0x18009e89_2;
    }
    return *reinterpret_cast<int16_t*>(&eax6);
}

int16_t fun_18008fa0(void** ecx, void** a2) {
    void** eax3;
    int16_t ax4;

    if (*reinterpret_cast<void***>(ecx + 0x3f8)) {
        eax3 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x3f8));
        ax4 = reinterpret_cast<int16_t>(*reinterpret_cast<void***>(eax3 + 40)(a2));
    }
    return ax4;
}

void fun_1800c330(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18) {
    uint32_t eax19;
    uint32_t eax20;
    int32_t eax21;
    void** ecx22;
    void** eax23;
    void** ecx24;

    *reinterpret_cast<void***>(a2) = *reinterpret_cast<void***>(ecx + 0x1a4);
    eax19 = reinterpret_cast<unsigned char>(a4) & 3;
    if (!eax19) {
        *reinterpret_cast<void***>(a3) = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x248) + 0x1a4);
        return;
    } else {
        eax20 = eax19 - 1;
        if (!eax20) {
            eax21 = 0;
            *reinterpret_cast<void***>(&eax21) = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x248) + 20);
            *reinterpret_cast<void***>(a3) = reinterpret_cast<void**>(eax21 * reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x248) + 0x1a4)));
            return;
        } else {
            if (!(eax20 - 1)) {
                ecx22 = *reinterpret_cast<void***>(ecx + 0x248);
                eax23 = *reinterpret_cast<void***>(ecx22 + 0x1a4);
                ecx24 = *reinterpret_cast<void***>(ecx22 + 12);
                *reinterpret_cast<int16_t*>(&eax23) = fun_1800da70(ecx24, eax23, ecx24, 0x3e8, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
                *reinterpret_cast<void***>(a3) = eax23;
                return;
            } else {
                *reinterpret_cast<void***>(a3) = reinterpret_cast<void**>(0);
                return;
            }
        }
    }
}

int16_t fun_18028cf0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** edi8;
    void** esi9;
    void** ebx10;
    void** eax11;
    void** esi12;
    void** eax13;
    void** v14;
    void** v15;
    void** v16;
    void** v17;
    void** v18;
    void** v19;
    void** v20;
    void** v21;
    void** v22;
    int16_t ax23;
    void** eax24;

    eax11 = fun_1802b2bb(ecx, 0x288, edi8, esi9, ebx10, __return_address(), a2, a3, a4);
    if (!eax11) {
        esi12 = reinterpret_cast<void**>(0);
    } else {
        ecx = eax11;
        *reinterpret_cast<int16_t*>(&eax11) = fun_180283c0(ecx, a2, a3, a4, edi8, esi9, ebx10, __return_address(), a2, a3, a4, a5, a6, a7);
        esi12 = eax11;
    }
    if (*reinterpret_cast<signed char*>(&a5)) {
        eax13 = fun_1802b2bb(ecx, 0x1c4, edi8, esi9, ebx10, __return_address(), a2, a3, a4);
        if (!eax13) {
            return 0;
        } else {
            ax23 = fun_18028800(eax13, a4, a3, esi12, a6, edi8, esi9, ebx10, __return_address(), a2, a3, a4, a5, a6, a7, v14, v15, v16, v17, v18, v19, v20, v21, v22);
            return ax23;
        }
    } else {
        eax24 = esi12;
        return *reinterpret_cast<int16_t*>(&eax24);
    }
}

int16_t fun_18027fb0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22) {
    void** eax23;
    int16_t ax24;

    eax23 = fun_1802b2bb(ecx, 0x1c0, __return_address(), a2, a3, a4, a5, a6, a7);
    if (!eax23) {
        return 0;
    } else {
        ax24 = fun_18027e90(eax23, a2, a3, a4, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
        return ax24;
    }
}

int16_t fun_18006dd0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** eax8;
    int16_t ax9;

    eax8 = fun_1802b2bb(ecx, 0x210, __return_address(), a2, a3, a4, a5, a6, a7);
    if (!eax8) {
        return 0;
    } else {
        ax9 = fun_18006c80(eax8, a2, a3);
        return ax9;
    }
}

int32_t CreateMutexA = 0x35f8a;

void** fun_1800d850(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** esi7;
    void** eax8;
    void** eax9;
    void** eax10;
    void** eax11;

    eax8 = fun_1802b2bb(ecx, 12, esi7, __return_address(), a2, a3, a4, a5, a6);
    if (!eax8) {
        eax9 = *reinterpret_cast<void***>(&g0);
        *reinterpret_cast<void***>(eax9 + 4)();
        goto esi7;
    } else {
        *reinterpret_cast<void***>(eax8 + 8) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8) = reinterpret_cast<void**>(0x180346b8);
        eax10 = reinterpret_cast<void**>(CreateMutexA());
        *reinterpret_cast<void***>(eax8 + 4) = eax10;
        eax11 = *reinterpret_cast<void***>(eax8);
        *reinterpret_cast<void***>(eax11 + 4)();
        goto 0;
    }
}

int32_t CreateThread = 0x36178;

struct s247 {
    signed char[72] pad72;
    int32_t f72;
    void** f76;
};

int16_t fun_1802b84e(void** ecx, struct s247* a2);

int32_t ResumeThread = 0x36168;

void** fun_1802b7d7(void** ecx, void** a2, void** a3, void** a4, void** a5, int32_t a6, int32_t a7, int32_t a8, void** a9, int32_t a10, int32_t a11) {
    void** edi12;
    void** edi13;
    void** eax14;
    void** ecx15;
    void** esi16;
    void** eax17;
    int32_t eax18;
    void** eax19;
    void** eax20;

    edi12 = reinterpret_cast<void**>(0);
    eax14 = fun_1802dfb5(ecx, 1, 0x74, edi13);
    ecx15 = reinterpret_cast<void**>(0x74);
    if (!eax14) {
        addr_0x1802b832_2:
        fun_1802ca0b(ecx15, eax14, edi13, esi16, __return_address(), a2);
        if (edi12) {
            fun_1802df30(eax14, edi12, edi13, esi16, __return_address(), a2, a3, a4, a5);
        }
    } else {
        fun_1802d591(0x74, eax14, edi13, esi16);
        ecx15 = eax14;
        *reinterpret_cast<void***>(eax14 + 72) = a2;
        *reinterpret_cast<void***>(eax14 + 76) = a4;
        eax17 = reinterpret_cast<void**>(CreateThread(ecx15, 0, a2, fun_1802b84e, eax14, 4, eax14));
        *reinterpret_cast<void***>(eax14 + 4) = eax17;
        if (!eax17 || (eax18 = reinterpret_cast<int32_t>(ResumeThread(ecx15, eax17, 0, a2, fun_1802b84e, eax14, 4, eax14)), eax18 == -1)) {
            eax19 = reinterpret_cast<void**>(GetLastError(ecx15, 0, a2, fun_1802b84e, eax14, 4, eax14));
            edi12 = eax19;
            goto addr_0x1802b832_2;
        } else {
            eax20 = eax17;
            goto addr_0x1802b84b_7;
        }
    }
    eax20 = reinterpret_cast<void**>(0xffffffff);
    addr_0x1802b84b_7:
    return eax20;
}

void fun_1802b210(struct s64* ecx, int32_t a2);

int32_t mmioCreateChunk = 0x36624;

struct s248 {
    signed char[16] pad16;
    int16_t f16;
};

void fun_1802b120(struct s64* ecx, void* a2, void** a3) {
    int32_t esi4;
    void** eax5;
    int32_t edi6;
    int32_t edi7;
    int32_t ebx8;
    void* esp9;
    void** ecx10;
    int32_t edx11;
    struct s248* v12;
    void** eax13;
    int32_t edx14;
    void** edx15;
    int32_t v16;

    fun_1802b210(ecx, esi4);
    eax5 = reinterpret_cast<void**>(mmioOpenA());
    ecx->f0 = eax5;
    if (eax5) {
        edi6 = mmioCreateChunk;
        ecx->f12 = 0x45564157;
        ecx->f8 = reinterpret_cast<void**>(0);
        edi6(eax5, &ecx->f4, 32, edi7, ebx8);
        esp9 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 - 4 + 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 - 4 - 4 - 4 + 4);
        ecx10 = ecx->f0;
        edx11 = 0;
        *reinterpret_cast<int16_t*>(&edx11) = v12->f16;
        edi6(ecx10, reinterpret_cast<int32_t>(esp9) + 12, 0, eax5, &ecx->f4, 32, 0x20746d66, edx11 + 18);
        eax13 = ecx->f0;
        edx14 = 0;
        *reinterpret_cast<int16_t*>(&edx14) = v12->f16;
        mmioWrite(eax13, v12);
        edx15 = ecx->f0;
        mmioAscend(edx15, reinterpret_cast<int32_t>(esp9) - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 - 4 + 4 + 12, 0, eax13, v12);
        ecx->f28 = 0;
        ecx->f24 = 0x61746164;
        edi6();
        ecx->f44 = 1;
        goto edx14 + 18;
    } else {
        goto v16;
    }
}

int16_t fun_18005070(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** eax8;
    int16_t ax9;

    eax8 = fun_1802b2bb(ecx, 92, __return_address(), a2, a3, a4, a5, a6, a7);
    if (!eax8) {
        return 0;
    } else {
        ax9 = fun_18004b80(eax8, a2, a3, a4, a5);
        return ax9;
    }
}

void fun_18024ca0(void** ecx, void** a2, void** a3, void** a4);

int16_t fun_18027070(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9) {
    void** edi10;
    void** esi11;
    void** eax12;
    void** edx13;
    int32_t eax14;
    void** edx15;
    int32_t eax16;
    void** eax17;

    eax12 = fun_1802b2bb(ecx, 0xd4, edi10, esi11, __return_address(), a2, a3, a4, a5);
    if (!eax12 || (*reinterpret_cast<int16_t*>(&eax12) = fun_180249f0(eax12, a4, a9, a5), !eax12)) {
        return 4;
    } else {
        fun_18024ca0(eax12, a6, a7, edi10);
        edx13 = *reinterpret_cast<void***>(eax12);
        eax14 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(edx13 + 4)(eax12));
        if (eax14 || (edx15 = *reinterpret_cast<void***>(eax12), eax16 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(edx15 + 8)(eax12)), !!eax16)) {
            *reinterpret_cast<void***>(__return_address()) = reinterpret_cast<void**>(0);
            eax17 = *reinterpret_cast<void***>(eax12);
            *reinterpret_cast<void***>(eax17)(eax12);
            goto edi10;
        } else {
            *reinterpret_cast<void***>(esi11) = eax12;
            goto edi10;
        }
    }
}

int16_t fun_1802a1a0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6);

int16_t fun_1802a840(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** esi8;
    void** eax9;
    void** eax10;
    void** eax11;
    void** eax12;

    eax9 = fun_1802b2bb(ecx, 0x78, esi8, __return_address(), a2, a3, a4, a5, a6);
    if (!eax9 || (eax10 = fun_1802a0e0(eax9), !eax10)) {
        return 4;
    } else {
        eax11 = a4;
        *reinterpret_cast<int16_t*>(&eax11) = fun_1802a1a0(eax10, a3, eax11, a5, a6, a7);
        if (eax11) {
            eax12 = *reinterpret_cast<void***>(eax10);
            *reinterpret_cast<void***>(eax12)(eax10);
            goto esi8;
        } else {
            *reinterpret_cast<void***>(a2) = eax10;
            return *reinterpret_cast<int16_t*>(&eax11);
        }
    }
}

void fun_18009d60(void** ecx) {
    void** eax2;
    void** edx3;
    void** eax4;
    void** edx5;
    void** edx6;
    void** edx7;

    if (*reinterpret_cast<void***>(ecx + 0x108)) {
        eax2 = *reinterpret_cast<void***>(ecx + 0x150) - 1;
        if (!eax2) {
            edx3 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x108));
            *reinterpret_cast<void***>(edx3 + 32)(1);
        } else {
            eax4 = eax2 - 1;
            if (!eax4) {
                edx5 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x108));
                *reinterpret_cast<void***>(edx5 + 32)();
                goto 2;
            } else {
                if (!(eax4 - 1)) {
                    edx6 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x108));
                    *reinterpret_cast<void***>(edx6 + 32)();
                    goto 3;
                } else {
                    edx7 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x108));
                    *reinterpret_cast<void***>(edx7 + 32)();
                    goto 4;
                }
            }
        }
    }
    return;
}

void* fun_1800d2c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16) {
    void** esi17;
    void* ax18;

    ax18 = fun_1800d300(ecx, a2, esi17, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
    __asm__("fcom dword [0x1803422c]");
    __asm__("fst dword [esp+0x8]");
    __asm__("fnstsw ax");
    if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&ax18) + 1) & 64)) {
        __asm__("fld dword [0x18034238]");
        __asm__("fdiv st0, st1");
        __asm__("fstp dword [esp]");
        __asm__("fstp st0");
        ax18 = fun_1800d110(a2, ecx);
        __asm__("fld dword [esp+0x8]");
    }
    return ax18;
}

int16_t fun_1800d260(struct s69* a1, void** a2, void** a3) {
    struct s69* eax4;
    void** v5;
    void** v6;
    void** v7;

    __asm__("fld dword [ecx+0x8]");
    __asm__("fmul dword [eax+0x4]");
    __asm__("fld dword [eax+0x8]");
    __asm__("fmul dword [ecx+0x4]");
    __asm__("fsubp st1, st0");
    __asm__("fstp dword [esp+0x0]");
    __asm__("fld dword [eax+0x8]");
    __asm__("fmul dword [ecx]");
    __asm__("fld dword [ecx+0x8]");
    __asm__("fmul dword [eax]");
    __asm__("fsubp st1, st0");
    __asm__("fstp dword [esp+0x4]");
    __asm__("fld dword [eax]");
    __asm__("fmul dword [ecx+0x4]");
    __asm__("fld dword [ecx]");
    __asm__("fmul dword [eax+0x4]");
    eax4 = a1;
    __asm__("fsubp st1, st0");
    eax4->f0 = v5;
    __asm__("fstp dword [esp+0x8]");
    eax4->f4 = v6;
    eax4->f8 = v7;
    return *reinterpret_cast<int16_t*>(&eax4);
}

struct s249 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
};

void fun_1800a8a0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17) {
    void** v18;
    void** v19;
    void** ebx20;
    void** v21;
    void** esi22;
    void** esi23;
    void** v24;
    void** edi25;
    void** eax26;
    void** v27;
    void** ecx28;
    void** ebx29;
    struct s249* edx30;
    void** ecx31;
    void** v32;
    void** v33;
    void** edi34;
    void** ecx35;
    void** ecx36;
    void** v37;
    void** esi38;
    void** edx39;

    v18 = reinterpret_cast<void**>(__return_address());
    v19 = ebx20;
    v21 = esi22;
    esi23 = ecx;
    v24 = edi25;
    eax26 = *reinterpret_cast<void***>(esi23 + 0x114);
    v27 = eax26;
    ecx28 = *reinterpret_cast<void***>(eax26);
    *reinterpret_cast<void***>(ecx28 + 12)();
    ebx29 = v18;
    if (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi23 + 0x148)) & 8 && (*reinterpret_cast<int16_t*>(&eax26) = fun_1800af10(esi23 + 0xd4, ebx29), !!eax26)) {
        edx30 = reinterpret_cast<struct s249*>(esi23 + 0xec);
        v19 = *reinterpret_cast<void***>(esi23 + 0xec);
        ecx31 = edx30->f4;
        v32 = ecx31;
        v33 = edx30->f8;
        fun_1800a450(esi23, reinterpret_cast<int32_t>(__zero_stack_offset()) - 12 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4 + 12);
    }
    edi34 = reinterpret_cast<void**>(0);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi23 + 8)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(esi23 + 8) == 0))) {
        do {
            ecx35 = *reinterpret_cast<void***>(esi23 + 12);
            ecx36 = *reinterpret_cast<void***>(ecx35 + reinterpret_cast<unsigned char>(edi34) * 4);
            fun_18008500(ecx36, ebx29, v27, v24, v21, v19, v32, v33, v37, v18, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
            ++edi34;
        } while (reinterpret_cast<signed char>(edi34) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi23 + 8)));
    }
    if (*reinterpret_cast<void***>(esi23 + 5)) {
        fun_1800a950(esi23);
    }
    fun_18006760(esi23);
    esi38 = *reinterpret_cast<void***>(esi23 + 0x114);
    edx39 = *reinterpret_cast<void***>(esi38);
    *reinterpret_cast<void***>(edx39 + 16)(esi23);
    goto v33;
}

void* fun_1800d430(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19) {
    void** edi20;
    void** esi21;
    void** v22;
    void** v23;
    void** v24;
    void** v25;
    void** v26;
    void** v27;
    void** v28;
    void** v29;
    void** v30;
    void** eax31;
    void** v32;
    void** v33;
    void** v34;

    fun_1800d240(a2, ecx, edi20, esi21, v22, v23, v24, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
    __asm__("fstp dword [esp+0x8]");
    fun_1800d240(a2, ecx + 12, edi20, esi21, v25, v26, v27, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
    __asm__("fstp dword [esp+0xc]");
    fun_1800d240(a2, ecx + 24, edi20, esi21, v28, v29, v30, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
    __asm__("fstp dword [esp+0x10]");
    eax31 = v32;
    *reinterpret_cast<void***>(a2) = v33;
    *reinterpret_cast<void***>(a2 + 4) = v34;
    *reinterpret_cast<void***>(a2 + 8) = eax31;
    return *reinterpret_cast<void**>(&eax31);
}

void* fun_1800d300(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19) {
    void** ebp20;
    void* ax21;

    ax21 = fun_1800d240(a2, a2, ecx, ebp20, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
    __asm__("fstp dword [ebp+0x8]");
    __asm__("fld dword [ebp+0x8]");
    __asm__("fsqrt ");
    __asm__("fstp dword [ebp-0x4]");
    __asm__("fld dword [ebp-0x4]");
    return ax21;
}

void fun_1800daa0(void** ecx, void** a2, void** a3);

void fun_1800d030(void** a1, void** a2) {
    void** ecx3;
    void** v4;
    void** eax5;
    void** eax6;
    void** v7;

    ecx3 = *reinterpret_cast<void***>(a1);
    v4 = *reinterpret_cast<void***>(a1 + 8);
    fun_1800daa0(ecx3, ecx3, v4);
    eax5 = *reinterpret_cast<void***>(a1 + 4);
    __asm__("fstp dword [esp+0x8]");
    fun_1800dac0(ecx3, eax5, a1);
    __asm__("fld qword [0x180346d0]");
    __asm__("fdivr dword [0x18034310]");
    __asm__("fmul st0, st1");
    __asm__("fstp dword [ecx]");
    eax6 = *reinterpret_cast<void***>(a1);
    v7 = *reinterpret_cast<void***>(a1 + 8);
    __asm__("fstp st0");
    fun_1800dac0(a2, eax6, v7);
    __asm__("fld qword [0x180346d0]");
    __asm__("fdivr dword [0x18034310]");
    __asm__("fmulp st1, st0");
    return;
}

void fun_1800de40(void** ecx, void** a2) {
    __asm__("fld dword [ebp+0x8]");
    __asm__("fld st0");
    __asm__("frndint ");
    __asm__("fxch st0, st1");
    __asm__("fsub st0, st1");
    __asm__("f2xm1 ");
    __asm__("fxch st0, st1");
    __asm__("fld1 ");
    __asm__("fscale ");
    __asm__("fld1 ");
    __asm__("faddp st3, st0");
    __asm__("fmulp st2, st0");
    __asm__("fstp st0");
    __asm__("fstp dword [ebp-0x4]");
    __asm__("fld dword [ebp-0x4]");
    return;
}

struct s251 {
    signed char[56] pad56;
    int32_t f56;
};

struct s252 {
    struct s252* f0;
    signed char[4] pad8;
    void** f8;
};

struct s253 {
    struct s253* f0;
    signed char[4] pad8;
    void** f8;
};

struct s250 {
    struct s251* f0;
    void** f4;
    signed char[11] pad16;
    struct s252* f16;
    signed char[16] pad36;
    struct s253* f36;
    signed char[20] pad60;
    void* f60;
    void** f64;
};

struct s254 {
    signed char[2] pad2;
    int16_t f2;
};

int16_t fun_1800b2c0(struct s250* ecx, int32_t a2) {
    struct s250* esi3;
    int32_t* esp4;
    int32_t v5;
    int32_t edi6;
    void*** ebx7;
    void** eax8;
    struct s254* edi9;
    void** eax10;
    void** ecx11;
    void** v12;
    void** ebp13;
    void** v14;
    void** edx15;
    void** v16;
    void* esp17;
    struct s252* edi18;
    struct s252* ebp19;
    void** ecx20;
    void** v21;
    struct s253* edi22;
    struct s253* ebp23;
    void** ecx24;
    void** v25;
    void** ecx26;
    void** edx27;
    void** edx28;
    void** v29;
    struct s251* edx30;

    esi3 = ecx;
    esp4 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4 - 4);
    v5 = edi6;
    ebx7 = &esi3->f64;
    if (esi3->f64) {
        eax8 = *reinterpret_cast<void***>(esi3->f64);
        *reinterpret_cast<void***>(eax8)(1);
        esp4 = esp4 - 1 - 1 + 1;
    }
    edi9 = reinterpret_cast<struct s254*>(reinterpret_cast<int32_t>(esi3->f60) + 20);
    eax10 = reinterpret_cast<void**>(__return_address()());
    if (!eax10) {
        ecx11 = *ebx7;
        v12 = ebp13;
        v14 = eax10;
        *reinterpret_cast<int16_t*>(&eax10) = edi9->f2;
        edx15 = *reinterpret_cast<void***>(ecx11);
        v16 = eax10;
        *reinterpret_cast<void***>(edx15 + 40)(v16, v14, v12);
        esp17 = reinterpret_cast<void*>(esp4 - 1 - 1 - 1 - 1 - 1 + 1 - 1 - 1 - 1 - 1 + 1);
        edi18 = esi3->f16;
        ebp19 = reinterpret_cast<struct s252*>(&esi3->f16);
        if (edi18 != ebp19) {
            do {
                ecx20 = edi18->f8;
                v21 = *ebx7;
                fun_1800b880(ecx20, v21, v16, v14, v12);
                fun_1800b9c0(ecx20, v16, v14, v12);
                esp17 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp17) - 4 - 4 + 4 + 4 - 4 + 4);
                edi18 = edi18->f0;
            } while (edi18 != ebp19);
        }
        edi22 = esi3->f36;
        ebp23 = reinterpret_cast<struct s253*>(&esi3->f36);
        if (edi22 != ebp23) {
            do {
                ecx24 = edi22->f8;
                v25 = *ebx7;
                fun_1800b880(ecx24, v25, v16, v14, v12);
                esp17 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp17) - 4 - 4 + 4 + 4);
                edi22 = edi22->f0;
            } while (edi22 != ebp23);
        }
        ecx26 = esi3->f4;
        fun_1800a7d0(ecx26, v16, v14, v12);
        __asm__("fstp dword [esp+0x10]");
        edx27 = *reinterpret_cast<void***>(*ebx7);
        *reinterpret_cast<void***>(edx27 + 4)(1, reinterpret_cast<int32_t>(esp17) - 4 + 4 + 16, 4, v16, v14, v12);
        edx28 = *reinterpret_cast<void***>(*ebx7);
        v29 = *reinterpret_cast<void***>(esi3->f4 + 0x148);
        *reinterpret_cast<void***>(edx28 + 36)(v29, 1, reinterpret_cast<int32_t>(esp17) - 4 + 4 + 16, 4, v16, v14, v12);
        edx30 = esi3->f0;
        edx30->f56(esi3);
    }
    goto v5;
}

void** fun_18017200(struct s77* a1, void** a2, void** a3) {
    void** esi4;
    void** edi5;
    void** eax6;
    void** ecx7;
    void** edx8;
    struct s77* eax9;

    esi4 = a2;
    edi5 = a3;
    eax6 = reinterpret_cast<void**>(1);
    ecx7 = reinterpret_cast<void**>(0);
    edx8 = reinterpret_cast<void**>((reinterpret_cast<signed char>(edi5) >> 3) * reinterpret_cast<unsigned char>(esi4));
    if (reinterpret_cast<signed char>(edx8) > reinterpret_cast<signed char>(1)) {
        do {
            ++ecx7;
            eax6 = reinterpret_cast<void**>(1 << *reinterpret_cast<unsigned char*>(&ecx7));
        } while (reinterpret_cast<signed char>(eax6) < reinterpret_cast<signed char>(edx8));
    }
    if (reinterpret_cast<signed char>(eax6) > reinterpret_cast<signed char>(edx8)) {
        ecx7 = reinterpret_cast<void**>(0xffffffff);
    }
    eax9 = a1;
    eax9->f0 = esi4;
    eax9->f4 = edi5;
    eax9->f8 = edx8;
    eax9->f12 = ecx7;
    return *reinterpret_cast<void***>(&eax9);
}

void fun_1800be10(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42) {
    void** v43;
    void** v44;
    void** v45;
    void** ebp46;
    void** ebp47;
    void*** esp48;
    void** v49;
    void** edi50;
    void** eax51;
    void** ecx52;
    struct s53* edi53;
    void** v54;
    void** ebx55;
    void*** esp56;
    void** v57;
    void** esi58;
    void** esi59;
    void** ebx60;
    void** eax61;
    void** eax62;
    void** ecx63;
    void* esp64;
    struct s53* edi65;
    void** esi66;
    void** ebx67;
    void** eax68;
    void** eax69;
    void** ecx70;

    v43 = reinterpret_cast<void**>(__return_address());
    v44 = ecx;
    v45 = ebp46;
    ebp47 = ecx;
    esp48 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4);
    v49 = edi50;
    eax51 = *reinterpret_cast<void***>(ebp47 + 0x248);
    *reinterpret_cast<void***>(ebp47) = reinterpret_cast<void**>(0x180345ec);
    if (eax51) {
        ecx52 = *reinterpret_cast<void***>(eax51);
        *reinterpret_cast<void***>(ecx52 + 8)(eax51);
        esp48 = esp48 - 4 - 4 + 4;
    }
    edi53 = reinterpret_cast<struct s53*>(ebp47 + 0x204);
    v54 = ebx55;
    esp56 = esp48 - 4 - 4;
    v57 = esi58;
    esi59 = *reinterpret_cast<void***>(&edi53->f4);
    ebx60 = reinterpret_cast<void**>(&edi53->f4);
    if (esi59 != ebx60) {
        do {
            eax61 = esi59;
            esi59 = *reinterpret_cast<void***>(esi59);
            fun_18009170(edi53, esp56 + 16, eax61, v57, v54, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34);
            esp56 = esp56 - 4 - 4 - 4 + 8 + 4;
        } while (esi59 != ebx60);
    }
    eax62 = edi53->f56;
    if (eax62) {
        do {
            ecx63 = *reinterpret_cast<void***>(eax62);
            edi53->f56 = ecx63;
            fun_1802b2b0(ecx63, eax62, v57, v54, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
            eax62 = edi53->f56;
            esp56 = esp56 - 4 - 4 + 4 + 4;
        } while (eax62);
    }
    fun_1800c670(&edi53->f12, v57, v54, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39);
    esp64 = reinterpret_cast<void*>(esp56 - 4 + 4);
    edi65 = reinterpret_cast<struct s53*>(ebp47 + 0x1c8);
    esi66 = *reinterpret_cast<void***>(&edi65->f4);
    ebx67 = reinterpret_cast<void**>(&edi65->f4);
    if (esi66 != ebx67) {
        do {
            eax68 = esi66;
            esi66 = *reinterpret_cast<void***>(esi66);
            fun_18009170(edi65, reinterpret_cast<int32_t>(esp64) + 16, eax68, v57, v54, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34);
            esp64 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp64) - 4 - 4 - 4 + 8 + 4);
        } while (esi66 != ebx67);
    }
    eax69 = edi65->f56;
    if (eax69) {
        do {
            ecx70 = *reinterpret_cast<void***>(eax69);
            edi65->f56 = ecx70;
            fun_1802b2b0(ecx70, eax69, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
            eax69 = edi65->f56;
        } while (eax69);
    }
    fun_1800c670(&edi65->f12, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41);
    fun_180275f0(ebp47);
    return;
}

void fun_18029f00(void** ecx, void** a2, void** a3, void** a4, void*** a5, void** a6) {
    void** ebx7;
    void** eax8;
    unsigned char al9;
    void** eax10;
    void** ecx11;
    void** edx12;
    void** eax13;
    uint1_t zf14;
    void** ecx15;
    void** edx16;
    void** eax17;
    void** v18;
    void** ebp19;
    void** ebp20;
    void** v21;
    void** edi22;
    int32_t ecx23;
    void** v24;
    int32_t v25;
    int32_t v26;

    ebx7 = ecx;
    eax8 = *reinterpret_cast<void***>(ebx7 + 24);
    if (eax8 == 0xffffffff || (al9 = fun_18024850(a2), al9 == 0)) {
        eax10 = *reinterpret_cast<void***>(a2);
        *reinterpret_cast<void***>(eax10 + 16)(a2);
        ecx11 = *reinterpret_cast<void***>(a4);
        edx12 = *reinterpret_cast<void***>(ecx11);
        *reinterpret_cast<void***>(edx12 + 24)();
        *reinterpret_cast<void***>(a3) = reinterpret_cast<void**>(1);
    } else {
        EnterCriticalSection(a2);
        eax13 = reinterpret_cast<void**>(0);
        zf14 = reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(ebx7 + 36) == 0);
        ecx15 = *reinterpret_cast<void***>(a2);
        *reinterpret_cast<unsigned char*>(&eax13) = static_cast<unsigned char>(zf14);
        *reinterpret_cast<void***>(ecx15 + 4)();
        edx16 = *reinterpret_cast<void***>(a4);
        *reinterpret_cast<void***>(edx16 + 4)();
        eax17 = *reinterpret_cast<void***>(ebx7 + 68);
        v18 = a2;
        ebp19 = ebx7 + 40;
        if (!eax17) {
            eax17 = fun_1802b2bb(eax13, 28, a4, a2, ebx7, ebp20, a2, v21, eax13);
        } else {
            *reinterpret_cast<void***>(ebx7 + 68) = *reinterpret_cast<void***>(eax17);
        }
        if (eax17) {
            edi22 = eax17 + 8;
            if (edi22) {
                ecx23 = 5;
                while (ecx23) {
                    --ecx23;
                    *reinterpret_cast<void***>(edi22) = v24;
                    edi22 = edi22 + 4;
                }
            }
            *reinterpret_cast<void***>(eax17) = ebp19;
            *reinterpret_cast<void***>(eax17 + 4) = *reinterpret_cast<void***>(ebp19 + 4);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebp19 + 4)) = eax17;
            *reinterpret_cast<void***>(ebp19 + 4) = eax17;
            *reinterpret_cast<void***>(ebx7 + 36) = *reinterpret_cast<void***>(ebx7 + 36) + 1;
        }
        LeaveCriticalSection();
        if (v25) {
            SetEvent();
            goto v18;
        }
    }
    goto v26;
}

int16_t fun_1800c680(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42) {
    void** edi43;
    void** esi44;
    void** eax45;

    if (ecx != a2) {
        fun_1800c740(ecx, edi43, esi44, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
        fun_1800c6a0(ecx, a2, edi43);
    }
    eax45 = ecx;
    return *reinterpret_cast<int16_t*>(&eax45);
}

void** fun_1800da10(int32_t a1, int32_t a2, int32_t a3) {
    int32_t ecx4;
    int32_t eax5;

    ecx4 = a3;
    __asm__("fild dword [ebp+0x10]");
    __asm__("fld qword [ebp+0x8]");
    __asm__("fmulp st1, st0");
    __asm__("fistp dword [ebp+0x10]");
    eax5 = 1 << *reinterpret_cast<unsigned char*>(&ecx4);
    return *reinterpret_cast<void***>(&eax5);
}

int16_t fun_1800e030(void** ecx, void** a2);

int16_t fun_1800e050(void** ecx, void** a2) {
    int16_t ax3;

    fun_1800dd30(a2);
    __asm__("fstp dword [esp]");
    ax3 = fun_1800e030(ecx, ecx);
    return ax3;
}

void fun_1800e000(void** ecx) {
    void** ecx2;
    void** eax3;

    ecx2 = *reinterpret_cast<void***>(ecx + 0x2b0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034720);
    if (ecx2) {
        eax3 = *reinterpret_cast<void***>(ecx2);
        *reinterpret_cast<void***>(eax3)(1);
    }
    fun_18012700(ecx);
    return;
}

int16_t fun_1800dbe0(void** ecx, void** a2, void** a3, void** a4) {
    int16_t ax5;

    __asm__("fld dword [ebp+0x8]");
    __asm__("fmul dword [0x18034308]");
    __asm__("fstp dword [ebp+0x8]");
    __asm__("fld dword [ebp+0x8]");
    __asm__("fistp dword [ebp-0x4]");
    fun_1800db30(ecx, ecx + 90);
    __asm__("fstp dword [ecx]");
    ax5 = fun_1800db30(a3, ecx);
    __asm__("fstp dword [edx]");
    return ax5;
}

void fun_18019010(void** ecx, void** a2, void** a3) {
    fun_18018ba0(ecx, a2, a3);
    fun_18018ba0(ecx + 40, a2, a3);
    return;
}

int16_t fun_1800e070(void** ecx, void** a2) {
    int16_t ax3;

    __asm__("fild dword [esp+0x4]");
    __asm__("fmul dword [0x1803471c]");
    __asm__("fmul dword [0x18034764]");
    __asm__("fstp dword [esp]");
    ax3 = fun_1800e050(ecx, ecx);
    return ax3;
}

void fun_180190a0(void** ecx, void** a2, void** a3, void** a4) {
    void** edi5;
    void** esi6;

    fun_18018d50(ecx, a2, a4, edi5, esi6, __return_address());
    fun_18018d50(ecx + 40, a3, a4, edi5, esi6, __return_address());
    return;
}

int16_t fun_18019270(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** eax45;
    void** ecx46;
    void** esi47;

    eax45 = *reinterpret_cast<void***>(ecx + 36);
    if (eax45 && (*reinterpret_cast<void***>(eax45) = *reinterpret_cast<void***>(eax45) - 1, eax45 = *reinterpret_cast<void***>(ecx + 36), !*reinterpret_cast<void***>(eax45))) {
        ecx46 = *reinterpret_cast<void***>(ecx + 32);
        *reinterpret_cast<int16_t*>(&eax45) = fun_1802b2b0(ecx46, ecx46, esi47, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
        *reinterpret_cast<void***>(ecx + 36) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0);
    }
    return *reinterpret_cast<int16_t*>(&eax45);
}

int16_t fun_180131a0(struct s131* ecx, void* a2, void** a3, uint32_t a4) {
    void** eax5;
    struct s131* ebx6;
    struct s132* edx7;
    int16_t ax8;
    void** eax9;
    void** ecx10;
    void** eax11;
    struct s130* esi12;
    void** v13;
    struct s133* esi14;
    struct s133* edi15;
    void** ecx16;
    void** v17;
    struct s132* eax18;
    int16_t ax19;
    void** esi20;
    struct s132* edx21;
    int16_t ax22;
    struct s133* esi23;
    struct s133* edi24;
    void** v25;
    void** ecx26;
    int16_t ax27;
    struct s132* edx28;
    int16_t ax29;
    struct s132* edx30;
    int16_t ax31;
    struct s133* edi32;
    struct s133* esi33;
    void** ecx34;
    void** v35;
    int16_t ax36;
    struct s133* edi37;
    struct s133* esi38;
    int32_t edx39;
    void** ecx40;
    int32_t v41;
    int16_t ax42;
    void** esi43;
    uint32_t eax44;
    struct s130* edi45;
    uint32_t ecx46;
    uint32_t ecx47;
    struct s132* edx48;
    int16_t ax49;
    void** eax50;
    struct s130* edi51;
    void** v52;
    int1_t zf53;
    struct s133* esi54;
    struct s133* edi55;
    void** ecx56;
    void** v57;
    struct s132* eax58;
    int16_t ax59;

    eax5 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(a2) - 1);
    ebx6 = ecx;
    switch (eax5) {
    case 0:
        edx7 = ebx6->f0;
        __asm__("fld dword [ecx]");
        __asm__("fst dword [ebx+0x44]");
        __asm__("fld st0");
        __asm__("fmul dword [0x180348f4]");
        __asm__("fstp dword [ebx+0x48]");
        __asm__("fmul dword [0x180348f0]");
        __asm__("fstp dword [ebx+0x4c]");
        ax8 = reinterpret_cast<int16_t>(edx7->f44(ebx6));
        return ax8;
    case 2:
        eax9 = a3;
        ecx10 = *reinterpret_cast<void***>(eax9);
        ebx6->f40 = 0;
        ebx6->f44 = ecx10;
        return *reinterpret_cast<int16_t*>(&eax9);
    case 3:
        eax11 = *reinterpret_cast<void***>(a3);
        if (ebx6->f40) {
            ebx6->f44 = reinterpret_cast<void**>(0);
        }
        esi12 = reinterpret_cast<struct s130*>(&ebx6->f48);
        v13 = ebx6->f44;
        ebx6->f40 = 1;
        *reinterpret_cast<int16_t*>(&eax5) = fun_180135f0(esi12, eax11, v13);
        if (*reinterpret_cast<signed char*>(&eax5)) {
            if (ebx6->f64) {
                fun_18013660(ebx6, esi12);
            }
            esi14 = ebx6->f24;
            edi15 = reinterpret_cast<struct s133*>(&ebx6->f24);
            if (esi14 != edi15) {
                do {
                    ecx16 = esi14->f8;
                    v17 = ebx6->f52;
                    fun_18012bf0(ecx16, v17);
                    esi14 = esi14->f0;
                } while (esi14 != edi15);
            }
            eax18 = ebx6->f0;
            ax19 = reinterpret_cast<int16_t>(eax18->f44(ebx6));
            return ax19;
        }
    case 4:
        esi20 = reinterpret_cast<void**>(&ebx6->f68);
        *reinterpret_cast<int16_t*>(&eax5) = fun_1800d0d0(a3, esi20);
        if (*reinterpret_cast<signed char*>(&eax5)) {
            *reinterpret_cast<void***>(esi20) = *reinterpret_cast<void***>(a3);
            *reinterpret_cast<void***>(esi20 + 4) = *reinterpret_cast<void***>(a3 + 4);
            edx21 = ebx6->f0;
            *reinterpret_cast<void***>(esi20 + 8) = *reinterpret_cast<void***>(a3 + 8);
            ax22 = reinterpret_cast<int16_t>(edx21->f44(ebx6));
            return ax22;
        }
    case 5:
        eax5 = a3;
        __asm__("fld dword [eax]");
        __asm__("fcom dword [ebx+0x34]");
        __asm__("fnstsw ax");
        if (*reinterpret_cast<unsigned char*>(&eax5 + 1) & 64) {
            __asm__("fstp st0");
            break;
        } else {
            __asm__("fstp dword [ebx+0x34]");
            esi23 = ebx6->f24;
            edi24 = reinterpret_cast<struct s133*>(&ebx6->f24);
            if (esi23 != edi24) {
                do {
                    v25 = ebx6->f52;
                    ecx26 = esi23->f8;
                    ax27 = fun_18012bf0(ecx26, v25);
                    esi23 = esi23->f0;
                } while (esi23 != edi24);
                return ax27;
            }
        }
    case 6:
        __asm__("fld dword [edx]");
        __asm__("fcom dword [ebx+0x38]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax5 + 1) & 64)) {
            __asm__("fstp dword [ebx+0x38]");
            if (ebx6->f64) {
                fun_18013660(ebx6, &ebx6->f48);
            }
            edx28 = ebx6->f0;
            ax29 = reinterpret_cast<int16_t>(edx28->f44(ebx6));
            return ax29;
        }
    case 7:
        eax5 = a3;
        __asm__("fld dword [eax]");
        __asm__("fcom dword [ebx+0x3c]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(&eax5 + 1) & 64)) {
            __asm__("fstp dword [ebx+0x3c]");
            if (ebx6->f64) {
                fun_18013660(ebx6, &ebx6->f48);
            }
            edx30 = ebx6->f0;
            ax31 = reinterpret_cast<int16_t>(edx30->f44(ebx6));
            return ax31;
        }
    case 9:
        eax5 = a3;
        edi32 = reinterpret_cast<struct s133*>(&ebx6->f24);
        ebx6->f800 = *reinterpret_cast<void***>(eax5);
        esi33 = edi32->f0;
        if (esi33 != edi32) {
            do {
                ecx34 = esi33->f8;
                v35 = ebx6->f800;
                ax36 = fun_18012bc0(ecx34, v35);
                esi33 = esi33->f0;
            } while (esi33 != edi32);
            return ax36;
        }
    case 12:
        eax5 = a3;
        edi37 = reinterpret_cast<struct s133*>(&ebx6->f24);
        ebx6->f804 = static_cast<unsigned char>(reinterpret_cast<uint1_t>(!!*reinterpret_cast<void***>(eax5)));
        esi38 = edi37->f0;
        if (esi38 != edi37) {
            do {
                *reinterpret_cast<unsigned char*>(&edx39) = ebx6->f804;
                ecx40 = esi38->f8;
                v41 = edx39;
                ax42 = fun_18012c10(ecx40, *reinterpret_cast<void***>(&v41));
                esi38 = esi38->f0;
            } while (esi38 != edi37);
            return ax42;
        }
    case 13:
        if (a4 > 0x2f0) {
        }
        esi43 = a3;
        eax44 = a4;
        edi45 = reinterpret_cast<struct s130*>(&ebx6->f48);
        ecx46 = a4 >> 2;
        while (ecx46) {
            --ecx46;
            edi45->f0 = *reinterpret_cast<void***>(esi43);
            edi45 = reinterpret_cast<struct s130*>(reinterpret_cast<uint32_t>(edi45) + 4);
            esi43 = esi43 + 4;
        }
        ecx47 = eax44 & 3;
        while (ecx47) {
            --ecx47;
            edi45->f0 = *reinterpret_cast<void***>(esi43);
            edi45 = reinterpret_cast<struct s130*>(&edi45->pad32);
            ++esi43;
        }
        edx48 = ebx6->f0;
        ax49 = reinterpret_cast<int16_t>(edx48->f44(ebx6));
        return ax49;
    case 14:
        eax50 = *reinterpret_cast<void***>(a3);
        if (ebx6->f40) {
            ebx6->f44 = reinterpret_cast<void**>(0);
        }
        edi51 = reinterpret_cast<struct s130*>(&ebx6->f48);
        v52 = ebx6->f44;
        ebx6->f40 = 1;
        *reinterpret_cast<int16_t*>(&eax5) = fun_180135f0(edi51, eax50, v52);
        if (*reinterpret_cast<signed char*>(&eax5)) {
            ebx6->f52 = *reinterpret_cast<void***>(a3 + 4);
            ebx6->f56 = *reinterpret_cast<void***>(a3 + 8);
            zf53 = ebx6->f64 == 0;
            ebx6->f60 = *reinterpret_cast<void***>(a3 + 12);
            if (!zf53) {
                fun_18013660(ebx6, edi51);
            }
            esi54 = ebx6->f24;
            edi55 = reinterpret_cast<struct s133*>(&ebx6->f24);
            if (esi54 != edi55) {
                do {
                    ecx56 = esi54->f8;
                    v57 = ebx6->f52;
                    fun_18012bf0(ecx56, v57);
                    esi54 = esi54->f0;
                } while (esi54 != edi55);
            }
            eax58 = ebx6->f0;
            ax59 = reinterpret_cast<int16_t>(eax58->f44(ebx6));
            return ax59;
        }
    case 1:
    case 8:
    case 10:
    case 11:
        goto 0x1801346a;
    }
    return *reinterpret_cast<int16_t*>(&eax5);
}

void fun_18013170(struct s103* ecx, void** a2) {
    void** ebx3;
    struct s104* edi4;
    struct s104* esi5;
    void** ecx6;

    ebx3 = a2;
    edi4 = reinterpret_cast<struct s104*>(&ecx->f24);
    ecx->f8 = ebx3;
    esi5 = edi4->f0;
    if (esi5 != edi4) {
        do {
            ecx6 = esi5->f8;
            fun_18012bb0(ecx6, ebx3);
            esi5 = esi5->f0;
        } while (esi5 != edi4);
    }
    return;
}

void fun_18012b10(void** ecx, void** a2, void** a3);

void fun_18013000(void** ecx);

int16_t fun_18012620(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16) {
    void** eax17;
    void** esi18;
    void** ebx19;
    void** eax20;

    eax17 = a2;
    *reinterpret_cast<void***>(ecx + 4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 12) = eax17;
    *reinterpret_cast<int16_t*>(&eax17) = fun_1800da70(ecx, 30, eax17, 0x3e8, esi18, ebx19, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
    *reinterpret_cast<void***>(ecx + 16) = eax17;
    *reinterpret_cast<void***>(ecx + 53) = reinterpret_cast<void**>(1);
    *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(1);
    *reinterpret_cast<void***>(ecx + 0x7d) = reinterpret_cast<void**>(1);
    *reinterpret_cast<void***>(ecx + 20) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 36) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 40) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 44) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 48) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 52) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 56) = reinterpret_cast<void**>(0xbf800000);
    *reinterpret_cast<void***>(ecx + 60) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 64) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 68) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 72) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 76) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x80) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x84) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x1803483c);
    *reinterpret_cast<void***>(ecx + 28) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 80) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 84) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 92) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 88) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 100) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 96) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 0x68) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 0x6c) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x70) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 0x74) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x78) = reinterpret_cast<void**>(0);
    fun_18012b10(ecx, 0x3f800000, 0x3f800000);
    fun_18012ca0(ecx);
    fun_18013000(ecx);
    eax20 = ecx;
    return *reinterpret_cast<int16_t*>(&eax20);
}

void fun_18005d20(void** a1, void* a2, int32_t a3, int32_t a4) {
    int32_t eax5;
    int32_t ebx6;
    void* ebp7;
    void** esi8;
    int32_t edi9;

    eax5 = a3 - 1;
    if (eax5 >= 0) {
        ebx6 = a4;
        ebp7 = a2;
        esi8 = a1;
        edi9 = eax5 + 1;
        do {
            ebx6(esi8);
            esi8 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi8) + reinterpret_cast<uint32_t>(ebp7));
            --edi9;
        } while (edi9);
    }
    return;
}

struct s255 {
    void** f0;
    signed char[79] pad80;
    void** f80;
    signed char[79] pad160;
    void** f160;
    signed char[79] pad240;
    void** f240;
    signed char[79] pad320;
    void** f320;
};

void fun_1800f3c0(void** ecx, void** a2) {
    void** esi3;
    struct s255* eax4;
    int32_t edx5;

    esi3 = ecx;
    fun_18013cb0(ecx, a2);
    eax4 = reinterpret_cast<struct s255*>(esi3 + 0x394);
    edx5 = 2;
    do {
        *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(eax4) - 80) = reinterpret_cast<void**>(0);
        eax4->f0 = reinterpret_cast<void**>(0);
        eax4->f80 = reinterpret_cast<void**>(0);
        eax4->f160 = reinterpret_cast<void**>(0);
        eax4->f240 = reinterpret_cast<void**>(0);
        eax4->f320 = reinterpret_cast<void**>(0);
        eax4 = reinterpret_cast<struct s255*>(reinterpret_cast<uint32_t>(eax4) + 40);
        --edx5;
    } while (edx5);
    *reinterpret_cast<void***>(esi3 + 0x524) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi3 + 0x54c) = reinterpret_cast<void**>(0);
    return;
}

void fun_18019a60(void** ecx, void** a2, void** a3, void** a4) {
    void** edi5;
    void** esi6;
    void** ebx7;
    void** v8;
    void** v9;
    void** v10;
    void** v11;
    void** v12;
    void** v13;
    void** v14;
    void** v15;
    void** v16;
    void** v17;
    void** v18;
    void** v19;
    void** v20;
    void** v21;
    void** v22;
    void** v23;
    void** v24;
    void** v25;
    void** v26;
    void** ecx27;
    void** eax28;

    fun_18019310(ecx, a4, edi5, esi6, ebx7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
    fun_18019310(a3, a4, edi5, esi6, ebx7, v17, v18, v19, v20, v21, v22, v23, v24, v25);
    v26 = *reinterpret_cast<void***>(a3);
    ecx27 = *reinterpret_cast<void***>(ecx + 20);
    eax28 = *reinterpret_cast<void***>(ecx27);
    *reinterpret_cast<void***>(eax28 + 0x6c)();
    *reinterpret_cast<void***>(ecx + 28) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 28)) + reinterpret_cast<unsigned char>(a4));
    *reinterpret_cast<void***>(a3 + 28) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a3 + 28)) + (reinterpret_cast<int32_t>(__zero_stack_offset()) - 48 - 4 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 + 4 + 4 + 12));
    goto v26;
}

void fun_18013010(void** ecx, void** a2) {
    void** ecx3;
    void** edi4;
    int32_t ecx5;
    void*** esi6;

    *reinterpret_cast<void***>(ecx + 4) = a2;
    *reinterpret_cast<void***>(ecx + 8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 16) = reinterpret_cast<void**>(0);
    ecx3 = ecx + 24;
    *reinterpret_cast<void***>(ecx + 20) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 36) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx3) = ecx3;
    *reinterpret_cast<void***>(ecx + 28) = ecx3;
    edi4 = ecx + 48;
    ecx5 = 0xbc;
    esi6 = reinterpret_cast<void***>(0x18038ca0);
    *reinterpret_cast<void***>(ecx + 40) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 44) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x320) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 0x324) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348a0);
    while (ecx5) {
        --ecx5;
        *reinterpret_cast<void***>(edi4) = *esi6;
        edi4 = edi4 + 4;
        esi6 = esi6 + 4;
    }
    return;
}

struct s256 {
    void** f0;
    signed char[11] pad12;
    void** f12;
    signed char[3] pad16;
    void** f16;
};

struct s257 {
    void** f0;
    signed char[11] pad12;
    void** f12;
    signed char[7] pad20;
    void** f20;
    signed char[7] pad28;
    void** f28;
};

int16_t fun_1800ea10(void** ecx, void** a2, void** a3) {
    void** v4;
    void** v5;
    void** ebx6;
    void** v7;
    void** ebp8;
    void** v9;
    void** esi10;
    void** esi11;
    void*** esp12;
    void** v13;
    void** edi14;
    int32_t* edi15;
    int32_t* ecx16;
    uint32_t edx17;
    uint32_t edx18;
    uint32_t edx19;
    uint32_t edx20;
    void** eax21;
    int32_t ebp22;
    struct s256* ebx23;
    struct s257* edi24;
    void** eax25;
    void** v26;
    void** edx27;
    void** eax28;
    void** edx29;
    void** v30;
    void** eax31;
    void** eax32;
    void** ecx33;
    void** edx34;
    void** v35;
    void** eax36;
    void** ecx37;
    void** v38;
    void** edx39;
    void** v40;
    void* esp41;
    void** ecx42;
    void** eax43;
    void* esp44;
    void** ecx45;
    void** eax46;
    void* esp47;
    void** ecx48;
    void** eax49;
    void** ecx50;
    void** v51;
    void** v52;
    void** edi53;
    void** ecx54;
    void** ebp55;
    void** v56;
    void** ecx57;
    void** v58;
    void** ecx59;
    void** v60;
    void** ecx61;
    void** v62;
    void** ecx63;
    void** v64;
    void** ecx65;
    void** v66;
    void** eax67;
    void** ecx68;
    void** v69;
    void** ecx70;
    void** v71;

    v4 = reinterpret_cast<void**>(__return_address());
    v5 = ebx6;
    v7 = ebp8;
    v9 = esi10;
    esi11 = ecx;
    esp12 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x184 - 4 - 4 - 4 - 4);
    v13 = edi14;
    edi15 = reinterpret_cast<int32_t*>(0x18038708);
    ecx16 = reinterpret_cast<int32_t*>(0x1803870c);
    do {
        __asm__("cdq ");
        __asm__("cdq ");
        if (reinterpret_cast<int32_t>((*ecx16 - reinterpret_cast<unsigned char>(a2) ^ edx17) - edx18) < reinterpret_cast<int32_t>((*edi15 - reinterpret_cast<unsigned char>(a2) ^ edx19) - edx20)) {
            edi15 = ecx16;
        }
        ++ecx16;
    } while (!reinterpret_cast<int1_t>(ecx16 == 0x18038718));
    eax21 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(edi15 - 0x600e1c2) >> 2);
    *reinterpret_cast<void***>(esi11 + 0x328) = eax21;
    *reinterpret_cast<void***>(esi11 + 12) = *reinterpret_cast<void***>(reinterpret_cast<unsigned char>(eax21) * 4 + 0x18038708);
    ebp22 = 0;
    ebx23 = reinterpret_cast<struct s256*>(0x18038c5c);
    edi24 = reinterpret_cast<struct s257*>(esi11 + 0x564);
    do {
        eax25 = *reinterpret_cast<void***>(esi11 + 4);
        v26 = a2;
        edx27 = *reinterpret_cast<void***>(eax25);
        eax28 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx27 + 84)(eax25, v26, v13, v9, v7, v5));
        *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(edi24) - 8) = eax28;
        edx29 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi11 + 4));
        v30 = v4;
        eax31 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx29 + 84)(v30, v26, v13, v9, v7, v5));
        edi24->f0 = eax31;
        eax32 = *reinterpret_cast<void***>(reinterpret_cast<int32_t>(ebx23) - 4);
        ecx33 = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(edi24) - 8);
        edx34 = *reinterpret_cast<void***>(ecx33);
        v35 = ebx23->f0;
        *reinterpret_cast<void***>(edx34 + 32)();
        eax36 = ebx23->f12;
        ecx37 = edi24->f0;
        v38 = eax36;
        edx39 = *reinterpret_cast<void***>(ecx37);
        v40 = ebx23->f16;
        *reinterpret_cast<void***>(edx39 + 32)();
        esp41 = reinterpret_cast<void*>(esp12 - 4 - 4 + 4 - 4 - 4 + 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 - 4 + 4);
        ecx42 = *reinterpret_cast<void***>(esi11 + 4);
        eax43 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp41) + (ebp22 + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi11 + 0x328)) * 2 << 4) + 20);
        *reinterpret_cast<int16_t*>(&eax43) = fun_18019f50(ecx42, eax43);
        esp44 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp41) - 4 - 4 + 4 + 4);
        edi24->f28 = eax43;
        ecx45 = *reinterpret_cast<void***>(esi11 + 4);
        eax46 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp44) + (ebp22 + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi11 + 0x328)) * 2 << 4) + 0x94);
        *reinterpret_cast<int16_t*>(&eax46) = fun_18019f50(ecx45, eax46);
        esp47 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp44) - 4 - 4 + 4 + 4);
        edi24->f12 = eax46;
        ecx48 = *reinterpret_cast<void***>(esi11 + 4);
        eax49 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp47) + (ebp22 + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi11 + 0x328)) * 2 << 4) + 0x114);
        *reinterpret_cast<int16_t*>(&eax49) = fun_18019f50(ecx48, eax49);
        esp12 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp47) - 4 - 4 + 4 + 4);
        edi24->f20 = eax49;
        if (!edi24->f28) 
            goto addr_0x1800ee98_7;
        if (!edi24->f12) 
            goto addr_0x1800ee98_7;
        if (!eax49) 
            goto addr_0x1800ee98_7;
        ebx23 = reinterpret_cast<struct s256*>(reinterpret_cast<int32_t>(ebx23) + 8);
        ++ebp22;
        edi24 = reinterpret_cast<struct s257*>(reinterpret_cast<uint32_t>(edi24) + 4);
    } while (reinterpret_cast<int32_t>(ebx23) < 0x18038c6c);
    ecx50 = *reinterpret_cast<void***>(esi11 + 4);
    *reinterpret_cast<int16_t*>(&eax49) = fun_18014440(ecx50, 0x3e7d821d, 6, 0, v40, v38, 0, v35, eax32, 0, v30, v26, v13, v9, v7, v5, v51, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0xac44, 0x3f333333, 2, 0x18038898, 0xac44, 0x3f333333, 2, 0x18038898, 0x1f40, 0x3f18b439, 3, 0x180388b8, 0x1f40, 0x3ebced91, 5, 0x180388e8, 0x2b11, 0x3f18b439, 3, 0x180388b8, 0x2b11, 0x3ebced91, 5, 0x180388e8, 0x5622, 0x3f0e3531, 4, 0x18038938, 0x5622, 0x3fa2c424, 5, 0x18038978, 0xac44, 0x3ed3f7cf, 5, 0x180389c8, 0xac44, 0x3f4147ae, 5, 0x18038a18, 0x1f40, 0x3ee8b439, 4, 0x18038a68, 0x1f40, 0x3ea48e8a, 5, 0x18038aa8, 0x2b11, 0x3ee8b439, 4, 0x18038a68, 0x2b11, 0x3ea48e8a, 5, 0x18038aa8, 0x5622, 0x3f3555df, 6, 0x18038af8, 0x5622, 0x3f689c99, 5, 0x18038b58);
    *reinterpret_cast<void***>(esi11 + 0x56c) = eax49;
    if (eax49) {
        v52 = reinterpret_cast<void**>(0);
        edi53 = esi11 + 0x37c;
        do {
            ecx54 = *reinterpret_cast<void***>(esi11 + 4);
            ebp55 = edi53 + 0xffffffb0;
            fun_180190d0(ecx54, ebp55, 6, v40, v38, 0, v35, v52, 0, v30, v26, v13, v9, v7, v5, v56, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0xac44, 0x3f333333, 2, 0x18038898, 0xac44, 0x3f333333, 2, 0x18038898, 0x1f40, 0x3f18b439, 3, 0x180388b8, 0x1f40, 0x3ebced91, 5, 0x180388e8, 0x2b11, 0x3f18b439, 3, 0x180388b8, 0x2b11, 0x3ebced91, 5, 0x180388e8, 0x5622, 0x3f0e3531, 4, 0x18038938, 0x5622, 0x3fa2c424, 5, 0x18038978, 0xac44, 0x3ed3f7cf, 5, 0x180389c8, 0xac44, 0x3f4147ae, 5, 0x18038a18, 0x1f40, 0x3ee8b439, 4, 0x18038a68, 0x1f40, 0x3ea48e8a, 5, 0x18038aa8, 0x2b11, 0x3ee8b439, 4, 0x18038a68, 0x2b11, 0x3ea48e8a, 5, 0x18038aa8, 0x5622, 0x3f3555df, 6, 0x18038af8, 0x5622, 0x3f689c99, 5, 0x18038b58);
            ecx57 = *reinterpret_cast<void***>(esi11 + 4);
            fun_180190d0(ecx57, edi53, 6, v40, v38, 0, v35, v52, 0, v30, v26, v13, v9, v7, v5, v58, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0xac44, 0x3f333333, 2, 0x18038898, 0xac44, 0x3f333333, 2, 0x18038898, 0x1f40, 0x3f18b439, 3, 0x180388b8, 0x1f40, 0x3ebced91, 5, 0x180388e8, 0x2b11, 0x3f18b439, 3, 0x180388b8, 0x2b11, 0x3ebced91, 5, 0x180388e8, 0x5622, 0x3f0e3531, 4, 0x18038938, 0x5622, 0x3fa2c424, 5, 0x18038978, 0xac44, 0x3ed3f7cf, 5, 0x180389c8, 0xac44, 0x3f4147ae, 5, 0x18038a18, 0x1f40, 0x3ee8b439, 4, 0x18038a68, 0x1f40, 0x3ea48e8a, 5, 0x18038aa8, 0x2b11, 0x3ee8b439, 4, 0x18038a68, 0x2b11, 0x3ea48e8a, 5, 0x18038aa8, 0x5622, 0x3f3555df, 6, 0x18038af8, 0x5622, 0x3f689c99, 5, 0x18038b58);
            ecx59 = *reinterpret_cast<void***>(esi11 + 4);
            fun_180190d0(ecx59, edi53 + 80, 6, v40, v38, 0, v35, v52, 0, v30, v26, v13, v9, v7, v5, v60, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0xac44, 0x3f333333, 2, 0x18038898, 0xac44, 0x3f333333, 2, 0x18038898, 0x1f40, 0x3f18b439, 3, 0x180388b8, 0x1f40, 0x3ebced91, 5, 0x180388e8, 0x2b11, 0x3f18b439, 3, 0x180388b8, 0x2b11, 0x3ebced91, 5, 0x180388e8, 0x5622, 0x3f0e3531, 4, 0x18038938, 0x5622, 0x3fa2c424, 5, 0x18038978, 0xac44, 0x3ed3f7cf, 5, 0x180389c8, 0xac44, 0x3f4147ae, 5, 0x18038a18, 0x1f40, 0x3ee8b439, 4, 0x18038a68, 0x1f40, 0x3ea48e8a, 5, 0x18038aa8, 0x2b11, 0x3ee8b439, 4, 0x18038a68, 0x2b11, 0x3ea48e8a, 5, 0x18038aa8, 0x5622, 0x3f3555df, 6, 0x18038af8, 0x5622, 0x3f689c99, 5, 0x18038b58);
            ecx61 = *reinterpret_cast<void***>(esi11 + 4);
            fun_180190d0(ecx61, edi53 + 0xa0, 6, v40, v38, 0, v35, v52, 0, v30, v26, v13, v9, v7, v5, v62, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0xac44, 0x3f333333, 2, 0x18038898, 0xac44, 0x3f333333, 2, 0x18038898, 0x1f40, 0x3f18b439, 3, 0x180388b8, 0x1f40, 0x3ebced91, 5, 0x180388e8, 0x2b11, 0x3f18b439, 3, 0x180388b8, 0x2b11, 0x3ebced91, 5, 0x180388e8, 0x5622, 0x3f0e3531, 4, 0x18038938, 0x5622, 0x3fa2c424, 5, 0x18038978, 0xac44, 0x3ed3f7cf, 5, 0x180389c8, 0xac44, 0x3f4147ae, 5, 0x18038a18, 0x1f40, 0x3ee8b439, 4, 0x18038a68, 0x1f40, 0x3ea48e8a, 5, 0x18038aa8, 0x2b11, 0x3ee8b439, 4, 0x18038a68, 0x2b11, 0x3ea48e8a, 5, 0x18038aa8, 0x5622, 0x3f3555df, 6, 0x18038af8, 0x5622, 0x3f689c99, 5, 0x18038b58);
            ecx63 = *reinterpret_cast<void***>(esi11 + 4);
            fun_180190d0(ecx63, edi53 + 0xf0, 6, v40, v38, 0, v35, v52, 0, v30, v26, v13, v9, v7, v5, v64, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0xac44, 0x3f333333, 2, 0x18038898, 0xac44, 0x3f333333, 2, 0x18038898, 0x1f40, 0x3f18b439, 3, 0x180388b8, 0x1f40, 0x3ebced91, 5, 0x180388e8, 0x2b11, 0x3f18b439, 3, 0x180388b8, 0x2b11, 0x3ebced91, 5, 0x180388e8, 0x5622, 0x3f0e3531, 4, 0x18038938, 0x5622, 0x3fa2c424, 5, 0x18038978, 0xac44, 0x3ed3f7cf, 5, 0x180389c8, 0xac44, 0x3f4147ae, 5, 0x18038a18, 0x1f40, 0x3ee8b439, 4, 0x18038a68, 0x1f40, 0x3ea48e8a, 5, 0x18038aa8, 0x2b11, 0x3ee8b439, 4, 0x18038a68, 0x2b11, 0x3ea48e8a, 5, 0x18038aa8, 0x5622, 0x3f3555df, 6, 0x18038af8, 0x5622, 0x3f689c99, 5, 0x18038b58);
            ecx65 = *reinterpret_cast<void***>(esi11 + 4);
            fun_180190d0(ecx65, edi53 + 0x140, 6, v40, v38, 0, v35, v52, 0, v30, v26, v13, v9, v7, v5, v66, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0xac44, 0x3f333333, 2, 0x18038898, 0xac44, 0x3f333333, 2, 0x18038898, 0x1f40, 0x3f18b439, 3, 0x180388b8, 0x1f40, 0x3ebced91, 5, 0x180388e8, 0x2b11, 0x3f18b439, 3, 0x180388b8, 0x2b11, 0x3ebced91, 5, 0x180388e8, 0x5622, 0x3f0e3531, 4, 0x18038938, 0x5622, 0x3fa2c424, 5, 0x18038978, 0xac44, 0x3ed3f7cf, 5, 0x180389c8, 0xac44, 0x3f4147ae, 5, 0x18038a18, 0x1f40, 0x3ee8b439, 4, 0x18038a68, 0x1f40, 0x3ea48e8a, 5, 0x18038aa8, 0x2b11, 0x3ee8b439, 4, 0x18038a68, 0x2b11, 0x3ea48e8a, 5, 0x18038aa8, 0x5622, 0x3f3555df, 6, 0x18038af8, 0x5622, 0x3f689c99, 5, 0x18038b58);
            if (!*reinterpret_cast<void***>(ebp55)) 
                goto addr_0x1800ee98_7;
            if (!*reinterpret_cast<void***>(edi53)) 
                goto addr_0x1800ee98_7;
            if (!*reinterpret_cast<void***>(edi53 + 80)) 
                goto addr_0x1800ee98_7;
            if (!*reinterpret_cast<void***>(edi53 + 0xa0)) 
                goto addr_0x1800ee98_7;
            if (!*reinterpret_cast<int32_t*>(edi53 + 0xf0)) 
                goto addr_0x1800ee98_7;
            if (!*reinterpret_cast<void***>(edi53 + 0x140)) 
                goto addr_0x1800ee98_7;
            edi53 = edi53 + 40;
            eax67 = v52 + 1;
            v52 = eax67;
        } while (reinterpret_cast<signed char>(eax67) < reinterpret_cast<signed char>(2));
    } else {
        addr_0x1800ee98_7:
        goto 0xac44;
    }
    ecx68 = *reinterpret_cast<void***>(esi11 + 4);
    fun_180190d0(ecx68, esi11 + 0x50c, 6, v40, v38, 0, v35, v52, 0, v30, v26, v13, v9, v7, v5, v69, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0xac44, 0x3f333333, 2, 0x18038898, 0xac44, 0x3f333333, 2, 0x18038898, 0x1f40, 0x3f18b439, 3, 0x180388b8, 0x1f40, 0x3ebced91, 5, 0x180388e8, 0x2b11, 0x3f18b439, 3, 0x180388b8, 0x2b11, 0x3ebced91, 5, 0x180388e8, 0x5622, 0x3f0e3531, 4, 0x18038938, 0x5622, 0x3fa2c424, 5, 0x18038978, 0xac44, 0x3ed3f7cf, 5, 0x180389c8, 0xac44, 0x3f4147ae, 5, 0x18038a18, 0x1f40, 0x3ee8b439, 4, 0x18038a68, 0x1f40, 0x3ea48e8a, 5, 0x18038aa8, 0x2b11, 0x3ee8b439, 4, 0x18038a68, 0x2b11, 0x3ea48e8a, 5, 0x18038aa8, 0x5622, 0x3f3555df, 6, 0x18038af8, 0x5622, 0x3f689c99, 5, 0x18038b58);
    ecx70 = *reinterpret_cast<void***>(esi11 + 4);
    fun_180190d0(ecx70, esi11 + 0x534, 6, v40, v38, 0, v35, v52, 0, v30, v26, v13, v9, v7, v5, v71, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x1f40, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x2b11, 0x3f4e2079, 1, 0x18038868, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0x5dc0, 0x3f40ff5e, 2, 0x18038878, 0xac44, 0x3f333333, 2, 0x18038898, 0xac44, 0x3f333333, 2, 0x18038898, 0x1f40, 0x3f18b439, 3, 0x180388b8, 0x1f40, 0x3ebced91, 5, 0x180388e8, 0x2b11, 0x3f18b439, 3, 0x180388b8, 0x2b11, 0x3ebced91, 5, 0x180388e8, 0x5622, 0x3f0e3531, 4, 0x18038938, 0x5622, 0x3fa2c424, 5, 0x18038978, 0xac44, 0x3ed3f7cf, 5, 0x180389c8, 0xac44, 0x3f4147ae, 5, 0x18038a18, 0x1f40, 0x3ee8b439, 4, 0x18038a68, 0x1f40, 0x3ea48e8a, 5, 0x18038aa8, 0x2b11, 0x3ee8b439, 4, 0x18038a68, 0x2b11, 0x3ea48e8a, 5, 0x18038aa8, 0x5622, 0x3f3555df, 6, 0x18038af8, 0x5622, 0x3f689c99, 5, 0x18038b58);
    goto 0xac44;
}

void fun_1800f750(void** ecx) {
    void** ecx2;
    void** eax3;
    void** edx4;
    void** eax5;
    void** edx6;
    void** eax7;
    void** edx8;

    ecx2 = *reinterpret_cast<void***>(ecx + 0x5b8);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180347b0);
    if (ecx2) {
        eax3 = *reinterpret_cast<void***>(ecx2);
        *reinterpret_cast<void***>(eax3)(1);
    }
    if (*reinterpret_cast<void***>(ecx + 0x5c0)) {
        edx4 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5c0));
        *reinterpret_cast<void***>(edx4)(1);
    }
    if (*reinterpret_cast<void***>(ecx + 0x5c4)) {
        eax5 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5c4));
        *reinterpret_cast<void***>(eax5)(1);
    }
    if (*reinterpret_cast<void***>(ecx + 0x5c8)) {
        edx6 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5c8));
        *reinterpret_cast<void***>(edx6)(1);
    }
    if (*reinterpret_cast<void***>(ecx + 0x5cc)) {
        eax7 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5cc));
        *reinterpret_cast<void***>(eax7)(1);
    }
    if (*reinterpret_cast<void***>(ecx + 0x5d0)) {
        edx8 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5d0));
        *reinterpret_cast<void***>(edx8)(1);
    }
    fun_18012700(ecx);
    return;
}

void fun_1800fcd0(void** ecx) {
    *reinterpret_cast<void***>(ecx + 0x5dc) = reinterpret_cast<void**>(0);
    return;
}

void fun_1800fce0(void** ecx) {
    void** eax2;
    signed char* edx3;

    eax2 = reinterpret_cast<void**>(0);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 0x5dc)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(ecx + 0x5dc) == 0))) {
        edx3 = reinterpret_cast<signed char*>(ecx + 0x5f0);
        do {
            *edx3 = 0;
            ++eax2;
            edx3 = edx3 + 12;
        } while (reinterpret_cast<signed char>(eax2) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 0x5dc)));
    }
    return;
}

void fun_1800fe10(void** ecx, void** a2, void** a3, void** a4) {
    void** edx5;
    void** edx6;

    edx5 = *reinterpret_cast<void***>(ecx + 0x5e0);
    if (reinterpret_cast<signed char>(edx5) < reinterpret_cast<signed char>(4)) {
        *reinterpret_cast<void***>(ecx + 0x5e0) = edx5 + 1;
        *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(ecx + reinterpret_cast<unsigned char>(edx5) * 8) + 0x6a8) = a2;
        *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(ecx + reinterpret_cast<unsigned char>(edx5) * 8) + 0x6ac) = a3;
        edx6 = *reinterpret_cast<void***>(a3);
        *reinterpret_cast<void***>(edx6 + 4)(3, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 16, 4);
    }
    return;
}

void fun_1800fc30(void** ecx, void** a2, int32_t a3) {
    int32_t* esp4;
    void** edx5;
    int32_t esi6;
    void** eax7;
    void** ecx8;
    void** eax9;
    void** ecx10;
    void** eax11;

    esp4 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    if (!*reinterpret_cast<void***>(ecx + 0x5c4)) {
        edx5 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5bc)));
        eax7 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx5 + 28)(esi6, __return_address()));
        esp4 = esp4 - 1 + 1;
        *reinterpret_cast<void***>(ecx + 0x5c4) = eax7;
    }
    ecx8 = *reinterpret_cast<void***>(ecx + 0x5c4);
    eax9 = *reinterpret_cast<void***>(ecx8);
    *reinterpret_cast<void***>(eax9 + 4)(1, esp4 + 2, 4, esi6, __return_address());
    ecx10 = *reinterpret_cast<void***>(ecx + 0x5c4);
    eax11 = *reinterpret_cast<void***>(ecx10);
    *reinterpret_cast<void***>(eax11 + 4)();
    goto esp4 - 1 - 1 - 1 - 1 + 1 + 3;
}

void** fun_18016d30(void** ecx, void** a2, void** a3, void** a4) {
    void** v5;
    void** v6;
    void** ebx7;
    void** v8;
    void** esi9;
    void** esi10;
    void** v11;
    void** edi12;
    int32_t ebx13;
    void** edi14;

    v5 = reinterpret_cast<void**>(__return_address());
    v6 = ebx7;
    v8 = esi9;
    esi10 = ecx;
    v11 = edi12;
    ebx13 = 4;
    *reinterpret_cast<void***>(esi10) = reinterpret_cast<void**>(0x18034a1c);
    *reinterpret_cast<void***>(esi10 + 4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi10 + 8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi10 + 12) = reinterpret_cast<void**>(0x3f800000);
    edi14 = esi10 + 16;
    do {
        fun_18018d20(edi14);
        edi14 = edi14 + 40;
        --ebx13;
    } while (ebx13);
    *reinterpret_cast<void***>(esi10 + 0xb0) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi10) = reinterpret_cast<void**>(0x18034b24);
    fun_18016ed0(esi10, v11, v8, v6, v5, a2, a3, a4);
    return esi10;
}

int16_t fun_180144d0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42);

void fun_18011150(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40) {
    void** v41;
    void** v42;
    void** ebx43;
    void** v44;
    void** esi45;
    void** esi46;
    void** v47;
    void** edi48;
    void** ecx49;
    void** eax50;
    void** edx51;
    void** eax52;
    void** edx53;
    void** eax54;
    void** edx55;
    void** eax56;
    void** edx57;
    void** edi58;
    int32_t ebx59;
    void** edi60;
    int32_t ebx61;
    void** edi62;
    int32_t ebx63;
    void** edi64;
    int32_t ebx65;
    void** edi66;
    int32_t ebx67;
    void** edi68;
    int32_t ebx69;
    void** edi70;
    int32_t ebx71;

    v41 = reinterpret_cast<void**>(__return_address());
    v42 = ebx43;
    v44 = esi45;
    esi46 = ecx;
    v47 = edi48;
    ecx49 = *reinterpret_cast<void***>(esi46 + 0xc28);
    *reinterpret_cast<void***>(esi46) = reinterpret_cast<void**>(0x180347f8);
    if (ecx49) {
        eax50 = *reinterpret_cast<void***>(ecx49);
        *reinterpret_cast<void***>(eax50)(1);
    }
    if (*reinterpret_cast<void***>(esi46 + 0xc2c)) {
        edx51 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi46 + 0xc2c));
        *reinterpret_cast<void***>(edx51)(1);
    }
    if (*reinterpret_cast<void***>(esi46 + 0xc30)) {
        eax52 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi46 + 0xc30));
        *reinterpret_cast<void***>(eax52)(1);
    }
    if (*reinterpret_cast<void***>(esi46 + 0xc34)) {
        edx53 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi46 + 0xc34));
        *reinterpret_cast<void***>(edx53)(1);
    }
    if (*reinterpret_cast<void***>(esi46 + 0xc40)) {
        eax54 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi46 + 0xc40));
        *reinterpret_cast<void***>(eax54)(1);
    }
    if (*reinterpret_cast<void***>(esi46 + 0xc44)) {
        edx55 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi46 + 0xc44));
        *reinterpret_cast<void***>(edx55)(1);
    }
    if (*reinterpret_cast<void***>(esi46 + 0xc48)) {
        eax56 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi46 + 0xc48));
        *reinterpret_cast<void***>(eax56)(1);
    }
    if (*reinterpret_cast<void***>(esi46 + 0xc4c)) {
        edx57 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi46 + 0xc4c));
        *reinterpret_cast<void***>(edx57)(1);
    }
    edi58 = esi46 + 0xc28;
    ebx59 = 2;
    do {
        edi58 = edi58 - 76;
        fun_180144d0(edi58, v47, v44, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
        --ebx59;
    } while (ebx59);
    fun_180146c0(esi46 + 0xa84, v47, v44, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
    edi60 = esi46 + 0xa84;
    ebx61 = 8;
    do {
        edi60 = edi60 - 100;
        fun_18014900(edi60, v47, v44, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
        --ebx61;
    } while (ebx61);
    edi62 = esi46 + 0x764;
    ebx63 = 2;
    do {
        edi62 = edi62 - 0xe8;
        fun_18014b60(edi62, v47, v44, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
        --ebx63;
    } while (ebx63);
    fun_18019210(esi46 + 0x4bc, v47, v44, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    fun_18019210(esi46 + 0x470, v47, v44, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    edi64 = esi46 + 0x470;
    ebx65 = 2;
    do {
        edi64 = edi64 - 40;
        fun_18019210(edi64, v47, v44, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
        --ebx65;
    } while (ebx65);
    edi66 = esi46 + 0x420;
    ebx67 = 2;
    do {
        edi66 = edi66 - 40;
        fun_18019210(edi66, v47, v44, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
        --ebx67;
    } while (ebx67);
    edi68 = esi46 + 0x3d0;
    ebx69 = 2;
    do {
        edi68 = edi68 - 40;
        fun_18019210(edi68, v47, v44, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
        --ebx69;
    } while (ebx69);
    edi70 = esi46 + 0x380;
    ebx71 = 2;
    do {
        edi70 = edi70 - 40;
        fun_18019210(edi70, v47, v44, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
        --ebx71;
    } while (ebx71);
    fun_18013090(esi46, v47, v44, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    return;
}

int16_t fun_180144d0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42) {
    void** ecx43;
    void** eax44;
    void** esi45;
    int16_t ax46;

    ecx43 = *reinterpret_cast<void***>(ecx + 4);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034954);
    if (ecx43) {
        eax44 = *reinterpret_cast<void***>(ecx43);
        *reinterpret_cast<void***>(eax44)(1);
    }
    ax46 = fun_18019210(ecx + 8, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    return ax46;
}

int16_t fun_18014bd0(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6) {
    int32_t v7;
    int32_t ebx8;
    void* esp9;
    void** edi10;
    int32_t* esi11;
    int32_t* ecx12;
    uint32_t edx13;
    uint32_t edx14;
    uint32_t edx15;
    uint32_t edx16;
    void*** edx17;
    void** edx18;
    void** edx19;
    void** eax20;

    v7 = ebx8;
    esp9 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4);
    edi10 = a2;
    esi11 = reinterpret_cast<int32_t*>(0x180427e0);
    ecx12 = reinterpret_cast<int32_t*>(0x1804280c);
    do {
        __asm__("cdq ");
        __asm__("cdq ");
        if (reinterpret_cast<int32_t>((*ecx12 - reinterpret_cast<unsigned char>(edi10) ^ edx13) - edx14) < reinterpret_cast<int32_t>((*esi11 - reinterpret_cast<unsigned char>(edi10) ^ edx15) - edx16)) {
            esi11 = ecx12;
        }
        ecx12 = ecx12 + 11;
    } while (!reinterpret_cast<int1_t>(ecx12 == 0x1804296c));
    edx17 = reinterpret_cast<void***>(esi11 + reinterpret_cast<unsigned char>(a3) + 9);
    if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi11 + reinterpret_cast<unsigned char>(a3) + 9)) < reinterpret_cast<signed char>(0)) {
        edx17 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp9) + 20);
    }
    edx18 = *edx17;
    *reinterpret_cast<void***>(a4) = edx18;
    if (__intrinsic()) {
    }
    *reinterpret_cast<void***>(a5) = reinterpret_cast<void**>(0);
    edx19 = *reinterpret_cast<void***>(a1);
    eax20 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx19 + 68)());
    if (eax20) {
        *reinterpret_cast<void***>(a5) = eax20;
        goto v7;
    } else {
        goto v7;
    }
}

signed char fun_1800dc50(int32_t ecx, int32_t a2, void** a3, void** a4, void* a5, void* a6, int32_t a7) {
    unsigned char ah8;

    __asm__("fld dword [ebp+0xc]");
    __asm__("fmul dword [ebp+0xc]");
    __asm__("fld dword [ebp+0x8]");
    __asm__("fmul dword [ebp+0x10]");
    __asm__("fmul dword [0x18034710]");
    __asm__("fsubp st1, st0");
    __asm__("fst dword [ebp-0x4]");
    __asm__("fcomp dword [0x1803422c]");
    __asm__("fnstsw ax");
    if (!(ah8 & 1)) {
        __asm__("fld dword [ebp-0x4]");
        __asm__("fsqrt ");
        __asm__("fstp dword [ebp+0x10]");
        if (a5) {
            __asm__("fld dword [ebp+0x10]");
            __asm__("fsub dword [ebp+0xc]");
            __asm__("fld dword [ebp+0x8]");
            __asm__("fadd st0, st0");
            __asm__("fdivp st1, st0");
            __asm__("fstp dword [eax]");
        }
        if (a6) {
            __asm__("fld dword [ebp+0xc]");
            __asm__("fchs ");
            __asm__("fsub dword [ebp+0x10]");
            __asm__("fld dword [ebp+0x8]");
            __asm__("fadd st0, st0");
            __asm__("fdivp st1, st0");
            __asm__("fstp dword [eax]");
        }
        return 1;
    } else {
        return 0;
    }
}

void fun_18016e50(void** ecx, void** a2, void** a3, void** a4) {
    void** v5;
    void** v6;
    void** ebp7;
    void** ebp8;
    void** v9;
    void** esi10;
    void** esi11;
    void** edi12;
    void** ebx13;
    void** v14;

    v5 = reinterpret_cast<void**>(__return_address());
    v6 = ebp7;
    ebp8 = ecx;
    v9 = esi10;
    if (reinterpret_cast<signed char>(a3) > reinterpret_cast<signed char>(4)) {
    }
    esi11 = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebp8 + 4) = a3;
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(a3) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(a3 == 0))) {
        edi12 = a2;
        ebx13 = ebp8 + 16;
        do {
            v14 = *reinterpret_cast<void***>(edi12);
            fun_1801d290(ebx13, v14);
            ++esi11;
            edi12 = edi12 + 4;
            ebx13 = ebx13 + 40;
        } while (reinterpret_cast<signed char>(esi11) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(ebp8 + 4)));
    }
    fun_18016ed0(ebp8, v9, v6, 4, v5, a2, a3, a4);
    return;
}

void fun_18019e00(void** ecx, void** a2, void*** a3, void** a4, void** a5) {
    void** v6;
    void** esi7;
    void** v8;
    void** edi9;
    void** v10;
    int32_t edx11;
    void*** esi12;
    void** v13;
    void** ebx14;
    void** v15;
    void** ebp16;
    void** v17;
    void** ecx18;
    void** v19;
    void** v20;
    void** v21;
    void** v22;
    void** v23;
    void** v24;
    void** eax25;
    void** edx26;
    int32_t v27;

    v6 = esi7;
    v8 = edi9;
    v10 = ecx;
    edx11 = 8;
    do {
        --edx11;
    } while (edx11);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(a4) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(a4 == 0))) {
        esi12 = a3;
        v13 = ebx14;
        v15 = ebp16;
        v17 = a4;
        do {
            ecx18 = *esi12;
            fun_18019310(ecx18, a5, v15, v13, v8, v6, v17, v10, v19, v20, v21, v22, v23, v24);
            esi12 = esi12 + 4;
            eax25 = v17 - 1;
            v17 = eax25;
        } while (eax25);
        ecx = v10;
    }
    edx26 = *reinterpret_cast<void***>(ecx);
    *reinterpret_cast<void***>(edx26 + 0x6c)();
    goto v27;
}

int32_t g180347ac = 0x3f3504f3;

struct s258 {
    void** f0;
    signed char[3] pad4;
    struct s101* f4;
};

struct s259 {
    struct s101* f0;
    void** f4;
};

int16_t fun_180112c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85, void** a86, void** a87, void** a88, void** a89, void** a90, void** a91, void** a92, void** a93, void** a94, void** a95, void** a96, void** a97) {
    void** v98;
    void** v99;
    void** ebx100;
    void** v101;
    void** ebp102;
    void** v103;
    void** esi104;
    void** esi105;
    void** v106;
    void** edi107;
    void** edi108;
    void** ecx109;
    void** ecx110;
    void** ecx111;
    void** ebx112;
    void** ecx113;
    void** ecx114;
    void** ebp115;
    void** ecx116;
    void** ecx117;
    void** ecx118;
    void** ecx119;
    void** ecx120;
    int32_t ecx121;
    void** eax122;
    void** edx123;
    void** eax124;
    void** ebx125;
    void** v126;
    void** ebp127;
    void** ecx128;
    void** ecx129;
    int32_t ebp130;
    struct s99* ebx131;
    void** ecx132;
    void** edx133;
    void** ebx134;
    void** eax135;
    void** ecx136;
    void** ebp137;
    void** edx138;
    void** eax139;
    void** ecx140;
    void** edx141;
    void** eax142;
    void** ecx143;
    void** edx144;
    void** eax145;
    int32_t ecx146;
    void** ecx147;
    void** v148;
    void** edx149;
    void** eax150;
    void** ecx151;
    void** edx152;
    void** v153;
    void** eax154;
    void** ecx155;
    int32_t edx156;
    int32_t eax157;
    void** ecx158;
    void** ecx159;
    void** v160;
    void** edx161;
    void** eax162;
    void** edx163;
    int32_t eax164;
    struct s258* ecx165;
    struct s101* edi166;
    void** edx167;
    int32_t ebx168;
    struct s259* ecx169;
    int32_t edi170;
    struct s99** ecx171;
    struct s99* edx172;
    int32_t eax173;
    int32_t eax174;
    int32_t eax175;
    int32_t eax176;
    int32_t eax177;
    int32_t eax178;
    int32_t eax179;
    int32_t eax180;
    int32_t eax181;
    void** eax182;

    v98 = reinterpret_cast<void**>(__return_address());
    v99 = ebx100;
    v101 = ebp102;
    v103 = esi104;
    esi105 = ecx;
    v106 = edi107;
    edi108 = a3;
    ecx109 = *reinterpret_cast<void***>(esi105 + 4);
    *reinterpret_cast<void***>(esi105 + 12) = a2;
    *reinterpret_cast<void***>(esi105 + 0x328) = edi108;
    fun_180190d0(ecx109, esi105 + 0x330, edi108, v106, v103, v101, v99, v98, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97);
    ecx110 = *reinterpret_cast<void***>(esi105 + 4);
    fun_180190d0(ecx110, esi105 + 0x358, edi108, v106, v103, v101, v99, v98, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97);
    ecx111 = *reinterpret_cast<void***>(esi105 + 4);
    ebx112 = esi105 + 0x420;
    fun_180190d0(ecx111, ebx112, edi108, v106, v103, v101, v99, v98, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97);
    ecx113 = *reinterpret_cast<void***>(esi105 + 4);
    fun_180190d0(ecx113, esi105 + 0x448, edi108, v106, v103, v101, v99, v98, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97);
    ecx114 = *reinterpret_cast<void***>(esi105 + 4);
    ebp115 = esi105 + 0x470;
    fun_180190d0(ecx114, ebp115, edi108, v106, v103, v101, v99, v98, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97);
    ecx116 = *reinterpret_cast<void***>(esi105 + 4);
    fun_180190d0(ecx116, esi105 + 0x380, edi108, v106, v103, v101, v99, v98, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97);
    ecx117 = *reinterpret_cast<void***>(esi105 + 4);
    fun_180190d0(ecx117, esi105 + 0x3a8, edi108, v106, v103, v101, v99, v98, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97);
    ecx118 = *reinterpret_cast<void***>(esi105 + 4);
    fun_180190d0(ecx118, esi105 + 0x3d0, edi108, v106, v103, v101, v99, v98, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97);
    ecx119 = *reinterpret_cast<void***>(esi105 + 4);
    fun_180190d0(ecx119, esi105 + 0x3f8, edi108, v106, v103, v101, v99, v98, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97);
    ecx120 = *reinterpret_cast<void***>(esi105 + 4);
    fun_180190d0(ecx120, esi105 + 0x4bc, edi108, v106, v103, v101, v99, v98, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97);
    ecx121 = 0;
    eax122 = ebx112;
    do {
        if (!*reinterpret_cast<int32_t*>(eax122 + 0xffffff10)) 
            break;
        if (!*reinterpret_cast<void***>(eax122)) 
            break;
        if (!*reinterpret_cast<int32_t*>(eax122 + 0xffffff60)) 
            break;
        edx123 = *reinterpret_cast<void***>(eax122 + 0xffffffb0);
        if (!edx123) 
            break;
        ++ecx121;
        eax122 = eax122 + 40;
    } while (ecx121 < 2);
    goto addr_0x180113b4_7;
    eax124 = reinterpret_cast<void**>(4);
    goto addr_0x180116c4_9;
    addr_0x180113b4_7:
    if (*reinterpret_cast<void***>(ebp115) && *reinterpret_cast<int32_t*>(esi105 + 0x4bc)) {
        ebx125 = reinterpret_cast<void**>(0);
        v126 = esi105 + 0xb90;
        ebp127 = esi105 + 0x594;
        do {
            eax124 = a2;
            ecx128 = *reinterpret_cast<void***>(esi105 + 4);
            *reinterpret_cast<int16_t*>(&eax124) = fun_18014c80(ebp127, ecx128, eax124, edi108, ebx125, v106, v103, v101, v99, v98, a2, v126, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83);
            if (eax124) 
                goto addr_0x180116c4_9;
            eax124 = a2;
            ecx129 = *reinterpret_cast<void***>(esi105 + 4);
            *reinterpret_cast<unsigned char*>(&edx123) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(ebx125 == 0));
            *reinterpret_cast<int16_t*>(&eax124) = fun_18014500(v126, ecx129, eax124, edi108, edx123, v106, v103, v101, v99, v98, a2, v126, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90);
            if (eax124) 
                goto addr_0x180116c4_9;
            ++ebx125;
            ebp127 = ebp127 + 0xe8;
            v126 = v126 + 76;
        } while (reinterpret_cast<signed char>(ebx125) < reinterpret_cast<signed char>(2));
        ebp130 = 0;
        ebx131 = reinterpret_cast<struct s99*>(esi105 + 0x764);
        do {
            eax124 = *reinterpret_cast<void***>(esi105 + 4);
            *reinterpret_cast<int16_t*>(&eax124) = fun_18014940(ebx131, eax124, a2, edi108, v106, v103, v101, v99, v98, a2, v126, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87);
            if (eax124) 
                goto addr_0x180116c4_9;
            ++ebp130;
            ebx131 = reinterpret_cast<struct s99*>(reinterpret_cast<uint32_t>(ebx131) + 100);
        } while (ebp130 < 8);
        eax124 = *reinterpret_cast<void***>(esi105 + 4);
        *reinterpret_cast<int16_t*>(&eax124) = fun_18014700(esi105 + 0xa84, eax124, a2, edi108, v106, v103, v101, v99, v98, a2, v126, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89);
        if (eax124) {
            addr_0x180116c4_9:
            return *reinterpret_cast<int16_t*>(&eax124);
        } else {
            ecx132 = *reinterpret_cast<void***>(esi105 + 12);
            edx133 = *reinterpret_cast<void***>(esi105 + 4);
            ebx134 = esi105 + 0x330;
            *reinterpret_cast<int16_t*>(&eax124) = fun_18016770(ecx132, edx133, ebx134, ecx132, edi108, 0x40000000, v106, v103, v101, v99, v98, a2, v126, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80);
            *reinterpret_cast<void***>(esi105 + 0xc28) = eax124;
            if (eax124 && ((eax135 = *reinterpret_cast<void***>(esi105 + 12), ecx136 = *reinterpret_cast<void***>(esi105 + 4), ebp137 = esi105 + 0x380, *reinterpret_cast<int16_t*>(&eax135) = fun_18016770(ecx136, ecx136, ebp137, eax135, edi108, 0x80000000, v106, v103, v101, v99, v98, a2, v126, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80), *reinterpret_cast<void***>(esi105 + 0xc2c) = eax135, !!eax135) && ((edx138 = *reinterpret_cast<void***>(esi105 + 12), eax139 = *reinterpret_cast<void***>(esi105 + 4), *reinterpret_cast<int16_t*>(&eax139) = fun_180155f0(ecx136, eax139, ebx134, edx138, edi108, 8, v106, v103, v101, v99, v98, a2, v126, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75), *reinterpret_cast<void***>(esi105 + 0xc30) = eax139, !!eax139) && ((ecx140 = *reinterpret_cast<void***>(esi105 + 12), edx141 = *reinterpret_cast<void***>(esi105 + 4), *reinterpret_cast<int16_t*>(&eax139) = fun_180155f0(ecx140, edx141, ebp137, ecx140, edi108, 0, v106, v103, v101, v99, v98, a2, v126, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75), *reinterpret_cast<void***>(esi105 + 0xc34) = eax139, !!eax139) && ((*reinterpret_cast<void***>(esi105 + 0xc38) = *reinterpret_cast<void***>(esi105 + 0x59c), eax142 = *reinterpret_cast<void***>(esi105 + 12), *reinterpret_cast<void***>(esi105 + 0xc3c) = *reinterpret_cast<void***>(esi105 + 0x684), ecx143 = *reinterpret_cast<void***>(esi105 + 4), edx144 = *reinterpret_cast<void***>(ecx143), eax145 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx144 + 64)(eax142)), *reinterpret_cast<void***>(esi105 + 0xc40) = eax145, !!eax145) && ((ecx146 = g180347ac, fun_1801a0d0(eax145, 100, ecx146, eax142, v106, v103, v101), ecx147 = *reinterpret_cast<void***>(esi105 + 4), v148 = *reinterpret_cast<void***>(esi105 + 12), edx149 = *reinterpret_cast<void***>(ecx147), eax150 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx149 + 64)(v148, eax142)), ecx151 = *reinterpret_cast<void***>(esi105 + 4), *reinterpret_cast<void***>(esi105 + 0xc44) = eax150, edx152 = *reinterpret_cast<void***>(ecx151), v153 = *reinterpret_cast<void***>(esi105 + 12), eax154 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx152 + 64)(v153, v148, eax142)), ecx155 = *reinterpret_cast<void***>(esi105 + 0xc44), *reinterpret_cast<void***>(esi105 + 0xc48) = eax154, !!ecx155) && (eax154 && (edx156 = g180347ac, fun_1801a0d0(ecx155, 0x1388, edx156, v153, v148, eax142, v106), eax157 = g180347ac, ecx158 = *reinterpret_cast<void***>(esi105 + 0xc48), fun_1801a170(ecx158, 80, eax157, v153, v148, eax142), ecx159 = *reinterpret_cast<void***>(esi105 + 4), v160 = *reinterpret_cast<void***>(esi105 + 12), edx161 = *reinterpret_cast<void***>(ecx159), eax162 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx161 + 64)()), *reinterpret_cast<void***>(esi105 + 0xc4c) = eax162, !!eax162)))))))) {
                edx163 = *reinterpret_cast<void***>(eax162);
                *reinterpret_cast<void***>(edx163 + 32)(eax162);
                eax164 = 0;
                ecx165 = reinterpret_cast<struct s258*>(esi105 + 0xc50);
                edi166 = reinterpret_cast<struct s101*>(esi105 + 0xb90);
                edx167 = esi105 + 0x594;
                ebx168 = 2;
                do {
                    ecx165->f0 = edx167;
                    ecx169 = reinterpret_cast<struct s259*>(&ecx165->f4);
                    edx167 = edx167 + 0xe8;
                    ecx169->f0 = edi166;
                    eax164 = eax164 + 1 + 1;
                    ecx165 = reinterpret_cast<struct s258*>(&ecx169->f4);
                    ++edi166;
                    --ebx168;
                } while (ebx168);
                edi170 = 8;
                ecx171 = reinterpret_cast<struct s99**>(reinterpret_cast<uint32_t>(esi105 + eax164 * 4) + 0xc50);
                edx172 = reinterpret_cast<struct s99*>(esi105 + 0x764);
                eax173 = eax164 + 8;
                do {
                    *ecx171 = edx172;
                    ++ecx171;
                    edx172 = reinterpret_cast<struct s99*>(reinterpret_cast<uint32_t>(edx172) + 100);
                    --edi170;
                } while (edi170);
                *reinterpret_cast<struct s100**>(reinterpret_cast<uint32_t>(esi105 + eax173 * 4) + 0xc50) = reinterpret_cast<struct s100*>(esi105 + 0xa84);
                eax174 = eax173 + 1;
                *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi105 + eax174 * 4) + 0xc50) = *reinterpret_cast<void***>(esi105 + 0xc28);
                eax175 = eax174 + 1;
                *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi105 + eax175 * 4) + 0xc50) = *reinterpret_cast<void***>(esi105 + 0xc2c);
                eax176 = eax175 + 1;
                *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi105 + eax176 * 4) + 0xc50) = *reinterpret_cast<void***>(esi105 + 0xc30);
                eax177 = eax176 + 1;
                *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi105 + eax177 * 4) + 0xc50) = *reinterpret_cast<void***>(esi105 + 0xc34);
                eax178 = eax177 + 1;
                *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi105 + eax178 * 4) + 0xc50) = *reinterpret_cast<void***>(esi105 + 0xc40);
                eax179 = eax178 + 1;
                *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi105 + eax179 * 4) + 0xc50) = *reinterpret_cast<void***>(esi105 + 0xc44);
                eax180 = eax179 + 1;
                *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi105 + eax180 * 4) + 0xc50) = *reinterpret_cast<void***>(esi105 + 0xc48);
                eax181 = eax180 + 1;
                *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi105 + eax181 * 4) + 0xc50) = *reinterpret_cast<void***>(esi105 + 0xc4c);
                *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(esi105 + eax181 * 4) + 0xc54) = 0;
                eax182 = *reinterpret_cast<void***>(esi105);
                *reinterpret_cast<void***>(eax182 + 36)(esi105);
                goto v160;
            }
        }
    }
}

int16_t fun_18016a70(void** a1, void** a2, void** a3, void* a4, void** a5, void** a6, void** a7, void** a8, uint32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, void** a14, int32_t a15, void** a16, int32_t a17, int32_t a18, void** a19, int32_t a20, int32_t a21, int32_t a22);

int16_t fun_180167f0(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, uint32_t a7, int32_t a8) {
    void** edx9;
    void** v10;
    int16_t ax11;

    edx9 = *reinterpret_cast<void***>(a4 + 8);
    v10 = *reinterpret_cast<void***>(a4);
    ax11 = fun_18016a70(a1, a2, a3, reinterpret_cast<int32_t>(__zero_stack_offset()) - 48 - 4 - 4 - 4 - 4 - 4 + 20, 0x18042a88, 4, a5, a6, a7, a8, 0, 0, 0, v10, 0, 0, 0, 0, edx9, 0, 0, 0);
    return ax11;
}

void fun_1800dd40(void** a1, uint32_t a2) {
    uint32_t ecx3;
    uint32_t eax4;
    uint32_t eax5;

    ecx3 = a2;
    if (ecx3) {
        if (reinterpret_cast<int32_t>(ecx3) < reinterpret_cast<int32_t>(0)) {
            __asm__("fld dword [0x18034238]");
            __asm__("fdiv dword [esp+0x4]");
            ecx3 = -ecx3;
            __asm__("fstp dword [esp+0x4]");
        }
        if (ecx3 != 1) {
            if (ecx3 != 2) {
                eax4 = 1;
                if (reinterpret_cast<int32_t>(ecx3) >= reinterpret_cast<int32_t>(1)) {
                    do {
                        eax4 = eax4 << 1;
                    } while (reinterpret_cast<int32_t>(eax4) <= reinterpret_cast<int32_t>(ecx3));
                }
                __asm__("fld dword [esp+0x4]");
                eax5 = reinterpret_cast<uint32_t>(reinterpret_cast<int32_t>(eax4) >> 2);
                if (!(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(eax5) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(eax5 == 0))) {
                    do {
                        __asm__("fld st0");
                        if (!(ecx3 & eax5)) {
                            __asm__("fmulp st1, st0");
                        } else {
                            __asm__("fmulp st1, st0");
                            __asm__("fmul dword [esp+0x4]");
                        }
                        eax5 = reinterpret_cast<uint32_t>(reinterpret_cast<int32_t>(eax5) >> 1);
                    } while (!reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(eax5) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(eax5 == 0)));
                }
                return;
            } else {
                __asm__("fld dword [esp+0x4]");
                __asm__("fmul dword [esp+0x4]");
                return;
            }
        } else {
            __asm__("fld dword [esp+0x4]");
            return;
        }
    } else {
        __asm__("fld dword [0x18034238]");
        return;
    }
}

void fun_18013d30(void** ecx);

void fun_18013f40(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41) {
    void** v42;
    void** v43;
    void** esi44;
    void** v45;
    void** edi46;
    void** edi47;
    int32_t esi48;
    void** eax49;

    v42 = reinterpret_cast<void**>(__return_address());
    v43 = esi44;
    v45 = edi46;
    edi47 = ecx;
    esi48 = 0;
    *reinterpret_cast<void***>(edi47) = reinterpret_cast<void**>(0x18034928);
    do {
        fun_18013fb0(edi47, esi48);
        ++esi48;
    } while (esi48 < 20);
    if (*reinterpret_cast<void***>(edi47 + 0x27c)) {
        eax49 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(edi47 + 0x27c));
        *reinterpret_cast<void***>(eax49)(1);
    }
    fun_18019210(edi47 + 0x254, v45, v43, v42, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41);
    fun_18013d30(edi47);
    return;
}

void fun_18013d30(void** ecx) {
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    return;
}

void fun_18013cf0(void** ecx, void** a2, void** a3) {
    *reinterpret_cast<void***>(ecx + 4) = a2;
    *reinterpret_cast<void***>(ecx + 8) = a3;
    *reinterpret_cast<void***>(ecx + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 16) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 20) = reinterpret_cast<void**>(0x3f000000);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034900);
    *reinterpret_cast<void***>(ecx + 0x6c) = ecx + 24;
    return;
}

int16_t fun_1801a010(void** ecx, void*** a2, uint32_t a3, void** a4, uint32_t a5) {
    uint32_t ebp6;
    void** v7;
    uint32_t edi8;
    uint32_t esi9;
    int16_t ax10;
    void*** ebx11;
    uint32_t ecx12;
    uint32_t eax13;
    int16_t ax14;

    ebp6 = a3;
    v7 = ecx;
    if (reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(ebp6) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(ebp6 == 0))) {
        return 0;
    }
    edi8 = 0xffffffff;
    esi9 = 0;
    if (reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(ebp6) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(ebp6 == 0)) {
        addr_0x1801a068_4:
        if (!*reinterpret_cast<signed char*>(&a5)) {
            ax10 = fun_18019f50(v7, (edi8 << 4) + reinterpret_cast<uint32_t>(a2));
            return ax10;
        } else {
            return 0;
        }
    } else {
        ebx11 = a2;
        ecx12 = a5;
        do {
            __asm__("cdq ");
            eax13 = (reinterpret_cast<unsigned char>(*ebx11) - reinterpret_cast<unsigned char>(a4) ^ reinterpret_cast<unsigned char>(a4)) - reinterpret_cast<unsigned char>(a4);
            if (!eax13) 
                break;
            if (!*reinterpret_cast<signed char*>(&a5) && (edi8 == 0xffffffff || reinterpret_cast<int32_t>(eax13) < reinterpret_cast<int32_t>(ecx12))) {
                edi8 = esi9;
                ecx12 = eax13;
            }
            ++esi9;
            ebx11 = ebx11 + 16;
        } while (reinterpret_cast<int32_t>(esi9) < reinterpret_cast<int32_t>(ebp6));
        goto addr_0x1801a068_4;
    }
    ax14 = fun_18019f50(v7, (esi9 << 4) + reinterpret_cast<uint32_t>(a2));
    return ax14;
}

struct s260 {
    signed char[8] pad8;
    int32_t f8;
    signed char[8] pad20;
    int32_t f20;
    signed char[12] pad36;
    int32_t f36;
};

void fun_18019b50(struct s260** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9) {
    struct s260* eax10;
    void** ebx11;
    void* eax12;
    void** edi13;
    void** esi14;
    void** ebx15;
    struct s260* edx16;
    struct s260* eax17;

    eax10 = *ecx;
    ebx11 = *reinterpret_cast<void***>(a2 + 24);
    eax12 = reinterpret_cast<void*>(eax10->f8());
    if (reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(a3) - reinterpret_cast<unsigned char>(ebx11)) < reinterpret_cast<int32_t>(eax12)) {
        fun_18019310(a2, a3, edi13, esi14, ebx15, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
        edx16 = *ecx;
        edx16->f20(ecx);
        goto esi14;
    } else {
        eax17 = *ecx;
        eax17->f36(ecx);
        return;
    }
}

void fun_18015070(void** ecx) {
    void** ecx2;
    void** eax3;

    ecx2 = *reinterpret_cast<void***>(ecx + 0x74);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180349f8);
    if (ecx2) {
        eax3 = *reinterpret_cast<void***>(ecx2);
        *reinterpret_cast<void***>(eax3)(1);
    }
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    return;
}

void* fun_18018f60(struct s86* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15) {
    void** edi16;
    void** esi17;
    void** ebp18;
    void** ebx19;
    void* ax20;

    fun_18018bf0(ecx, a2, a3, a4, edi16, esi17, ebp18, ebx19, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
    ax20 = fun_18018bf0(&ecx->f20, a2, a3, a4, edi16, esi17, ebp18, ebx19, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
    return ax20;
}

void fun_180157d0(void** ecx) {
    void** ebx2;
    void** esi3;
    int32_t edi4;
    void** eax5;

    ebx2 = ecx;
    *reinterpret_cast<void***>(ebx2) = reinterpret_cast<void**>(0x18034a6c);
    esi3 = ebx2 + 40;
    edi4 = 2;
    do {
        if (*reinterpret_cast<void***>(esi3)) {
            eax5 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi3));
            *reinterpret_cast<void***>(eax5)(1);
        }
        esi3 = esi3 + 4;
        --edi4;
    } while (edi4);
    *reinterpret_cast<void***>(ebx2) = reinterpret_cast<void**>(0x180348d4);
    return;
}

int16_t fun_18017090(void** ecx, void** a2, void** a3, int32_t a4, void** a5) {
    int32_t* ecx6;
    void** ebx7;
    void** ebp8;
    uint32_t esi9;
    uint32_t edi10;
    void** eax11;
    uint32_t edx12;
    uint32_t edx13;
    uint32_t eax14;
    int32_t edx15;
    void** eax16;

    ecx6 = reinterpret_cast<int32_t*>(0x18043258);
    ebx7 = a3;
    ebp8 = a3;
    esi9 = 0xffffffff;
    edi10 = 0;
    do {
        __asm__("cdq ");
        eax11 = reinterpret_cast<void**>((*ecx6 - reinterpret_cast<unsigned char>(ebp8) ^ edx12) - edx13);
        if (!eax11) 
            break;
        if (esi9 == 0xffffffff || reinterpret_cast<signed char>(eax11) < reinterpret_cast<signed char>(ebx7)) {
            esi9 = edi10;
            ebx7 = eax11;
        }
        ecx6 = ecx6 + 5;
        ++edi10;
    } while (reinterpret_cast<uint32_t>(ecx6) < 0x1804330c);
    goto addr_0x180170cd_6;
    esi9 = edi10;
    addr_0x180170d1_8:
    eax14 = esi9 + esi9 * 4 << 2;
    *reinterpret_cast<void***>(a5) = *reinterpret_cast<void***>(eax14 + 0x18043268);
    __asm__("fld dword [esp+0x14]");
    edx15 = *reinterpret_cast<int32_t*>(eax14 + 0x18043258 + 12);
    __asm__("fmul dword [esp+0x2c]");
    eax16 = *reinterpret_cast<void***>(a2);
    __asm__("fstp dword [esp+0x18]");
    *reinterpret_cast<void***>(eax16 + 68)();
    goto edx15;
    addr_0x180170cd_6:
    goto addr_0x180170d1_8;
}

int16_t fun_18015c80(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40) {
    void** v41;
    void** v42;
    void** ebx43;
    void** ebx44;
    void** v45;
    void** esi46;
    void** v47;
    void** edi48;
    struct s29* esi49;
    int32_t edi50;
    void** eax51;
    void** edx52;
    void** eax53;
    void** esi54;
    int32_t edi55;
    void** esi56;
    int32_t edi57;
    void** esi58;
    int32_t edi59;
    int16_t ax60;

    v41 = reinterpret_cast<void**>(__return_address());
    v42 = ebx43;
    ebx44 = ecx;
    v45 = esi46;
    v47 = edi48;
    *reinterpret_cast<void***>(ebx44) = reinterpret_cast<void**>(0x18034a90);
    esi49 = reinterpret_cast<struct s29*>(ebx44 + 0x108);
    edi50 = 2;
    do {
        if (*reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi49) - 8)) {
            eax51 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi49) - 8));
            *reinterpret_cast<void***>(eax51)(1);
        }
        if (esi49->f0) {
            edx52 = *reinterpret_cast<void***>(esi49->f0);
            *reinterpret_cast<void***>(edx52)(1);
        }
        if (esi49->f8) {
            eax53 = *reinterpret_cast<void***>(esi49->f8);
            *reinterpret_cast<void***>(eax53)(1);
        }
        esi49 = reinterpret_cast<struct s29*>(reinterpret_cast<uint32_t>(esi49) + 4);
        --edi50;
    } while (edi50);
    esi54 = ebx44 + 0xfc;
    edi55 = 2;
    do {
        esi54 = esi54 - 40;
        fun_18019210(esi54, v47, v45, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
        --edi55;
    } while (edi55);
    esi56 = ebx44 + 0xac;
    edi57 = 2;
    do {
        esi56 = esi56 - 40;
        fun_18019210(esi56, v47, v45, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
        --edi57;
    } while (edi57);
    esi58 = ebx44 + 92;
    edi59 = 2;
    do {
        esi58 = esi58 - 40;
        ax60 = fun_18019210(esi58, v47, v45, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
        --edi59;
    } while (edi59);
    *reinterpret_cast<void***>(ebx44) = reinterpret_cast<void**>(0x180348d4);
    return ax60;
}

void fun_180160c0(void** ecx) {
    void** ecx2;
    void** eax3;
    void** edx4;

    ecx2 = *reinterpret_cast<void***>(ecx + 0xc8);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034ab4);
    if (ecx2) {
        eax3 = *reinterpret_cast<void***>(ecx2);
        *reinterpret_cast<void***>(eax3)(1);
    }
    if (*reinterpret_cast<void***>(ecx + 0xcc)) {
        edx4 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0xcc));
        *reinterpret_cast<void***>(edx4)(1);
    }
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    return;
}

int16_t fun_18016890(void** a1, void** a2, void** a3, void* a4, void** a5, void** a6) {
    void** edi7;
    void** eax8;
    void** esi9;
    void** v10;
    void** v11;
    void** ebp12;
    void** v13;
    void** ebx14;
    void** eax15;
    void** eax16;
    void** eax17;
    void** eax18;

    edi7 = a2;
    eax8 = reinterpret_cast<void**>(0);
    esi9 = reinterpret_cast<void**>(0);
    v10 = reinterpret_cast<void**>(1);
    v11 = reinterpret_cast<void**>(0);
    if (reinterpret_cast<signed char>(edi7) <= reinterpret_cast<signed char>(0)) {
        return 0;
    } else {
        ebp12 = a1;
        do {
            if (!reinterpret_cast<int1_t>(v10 == 1)) {
                v13 = eax8;
                if (reinterpret_cast<signed char>(eax8) < reinterpret_cast<signed char>(v11)) {
                    ebx14 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(ebp12 + reinterpret_cast<uint32_t>(eax8 + reinterpret_cast<unsigned char>(eax8) * 8) * 4) + 4);
                    do {
                        eax15 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi7) - reinterpret_cast<unsigned char>(esi9));
                        *reinterpret_cast<int16_t*>(&eax15) = fun_18016970(ebp12 + reinterpret_cast<uint32_t>(esi9 + reinterpret_cast<unsigned char>(esi9) * 8) * 4, eax15, v10, ebx14, a4, a5, a6);
                        esi9 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi9) + reinterpret_cast<unsigned char>(eax15));
                        if (reinterpret_cast<signed char>(esi9) >= reinterpret_cast<signed char>(edi7)) 
                            break;
                        eax16 = v13 + 1;
                        ebx14 = ebx14 + 36;
                        v13 = eax16;
                    } while (reinterpret_cast<signed char>(eax16) < reinterpret_cast<signed char>(v11));
                }
            } else {
                eax17 = a3;
                *reinterpret_cast<int16_t*>(&eax17) = fun_18016970(ebp12, edi7, 1, eax17, a4, a5, a6);
                esi9 = eax17;
            }
            eax8 = v11;
            v11 = esi9;
            ++v10;
        } while (reinterpret_cast<signed char>(esi9) < reinterpret_cast<signed char>(edi7));
        eax18 = esi9;
        return *reinterpret_cast<int16_t*>(&eax18);
    }
}

struct s261 {
    void** f0;
    signed char[3] pad4;
    void** f4;
};

int16_t fun_18017510(void** a1, void** a2, struct s261* a3, struct s261* a4, uint32_t a5) {
    void** esi6;
    int32_t ecx7;
    uint32_t eax8;
    uint32_t ecx9;

    esi6 = a2;
    __asm__("fld dword [ebp+0x14]");
    __asm__("fadd st0, st0");
    __asm__("fadd st0, st0");
    __asm__("fld dword [ebp+0x10]");
    ecx7 = reinterpret_cast<int32_t>(a5) >> 2;
    if (ecx7) {
        do {
            __asm__("fld dword [ebx+eax*4]");
            __asm__("fld dword [ebx+edx*4]");
            eax8 = static_cast<uint32_t>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi6 + 2)));
            __asm__("fld dword [ebx+eax*4]");
            __asm__("fxch st0, st1");
            __asm__("fld dword [ebx+edx*4]");
            __asm__("fxch st0, st3");
            __asm__("fld st4");
            __asm__("fmul st1, st0");
            __asm__("fmul st2, st0");
            __asm__("fmul st3, st0");
            __asm__("fmulp st4, st0");
            __asm__("fstp dword [edi]");
            __asm__("fstp dword [edi+0x4]");
            __asm__("fstp dword [edi+0x8]");
            __asm__("fstp dword [edi+0xc]");
            __asm__("fadd st0, st1");
            esi6 = esi6 + 4;
            --ecx7;
        } while (ecx7);
    }
    ecx9 = a5 & 3;
    if (ecx9) {
        __asm__("fxch st0, st1");
        __asm__("fstp st0");
        __asm__("fld dword [ebp+0x14]");
        __asm__("fxch st0, st1");
        do {
            eax8 = static_cast<uint32_t>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi6)));
            __asm__("fld dword [ebx+eax*4]");
            __asm__("fmul st0, st1");
            __asm__("fstp dword [edi]");
            __asm__("fadd st0, st1");
            ++esi6;
            --ecx9;
        } while (ecx9);
    }
    __asm__("fstp st0");
    __asm__("fstp st0");
    return *reinterpret_cast<int16_t*>(&eax8);
}

int16_t fun_180175b0(void** a1, void** a2, struct s261* a3, struct s261* a4, uint32_t a5) {
    int32_t ecx6;
    int32_t ecx7;
    uint32_t ecx8;
    int16_t ax9;

    __asm__("fld dword [ebp+0x14]");
    __asm__("fadd st0, st0");
    __asm__("fadd st0, st0");
    __asm__("fld dword [ebp+0x10]");
    ecx6 = reinterpret_cast<int32_t>(a5) >> 2;
    if (ecx6) {
        __asm__("fild word [esi]");
        __asm__("fild word [esi+0x2]");
        __asm__("fild word [esi+0x4]");
        __asm__("fild word [esi+0x6]");
        __asm__("fxch st0, st3");
        __asm__("fmul st0, st4");
        __asm__("fxch st0, st2");
        ecx7 = ecx6 - 1;
        if (ecx7) {
            do {
                __asm__("fmul st0, st4");
                __asm__("fxch st0, st2");
                __asm__("fstp dword [edi]");
                __asm__("fild word [esi]");
                __asm__("fxch st0, st1");
                __asm__("fmul st0, st4");
                __asm__("fxch st0, st2");
                __asm__("fstp dword [edi+0x4]");
                __asm__("fild word [esi+0x2]");
                __asm__("fxch st0, st3");
                __asm__("fmul st0, st4");
                __asm__("fxch st0, st2");
                __asm__("fstp dword [edi+0x8]");
                __asm__("fxch st0, st4");
                __asm__("fadd st3, st0");
                __asm__("fxch st0, st4");
                __asm__("fild word [esi+0x4]");
                __asm__("fxch st0, st1");
                __asm__("fmul st0, st4");
                __asm__("fxch st0, st2");
                __asm__("fstp dword [edi+0xc]");
                __asm__("fild word [esi+0x6]");
                __asm__("fxch st0, st3");
                --ecx7;
            } while (ecx7);
        }
        __asm__("fmul st0, st4");
        __asm__("fxch st0, st2");
        __asm__("fstp dword [edi]");
        __asm__("fmul st0, st3");
        __asm__("fxch st0, st1");
        __asm__("fstp dword [edi+0x4]");
        __asm__("fxch st0, st1");
        __asm__("fmul st0, st2");
        __asm__("fxch st0, st1");
        __asm__("fstp dword [edi+0x8]");
        __asm__("fstp dword [edi+0xc]");
        __asm__("fadd st0, st1");
    }
    ecx8 = a5 & 3;
    if (ecx8) {
        __asm__("fxch st0, st1");
        __asm__("fstp st0");
        __asm__("fld dword [ebp+0x14]");
        __asm__("fxch st0, st1");
        do {
            __asm__("fild word [esi]");
            __asm__("fmul st0, st1");
            __asm__("fstp dword [edi]");
            __asm__("fadd st0, st1");
            --ecx8;
        } while (ecx8);
    }
    __asm__("fstp st0");
    __asm__("fstp st0");
    return ax9;
}

struct s262 {
    struct s158* f0;
    int32_t f4;
    void** f8;
};

int16_t fun_180177a0(int32_t a1, struct s158* a2, struct s262* a3, struct s262* a4, uint32_t a5) {
    struct s158* esi6;
    int32_t ecx7;
    uint32_t eax8;
    uint32_t ecx9;

    esi6 = a2;
    __asm__("fld dword [ebp+0x14]");
    __asm__("fadd st0, st0");
    __asm__("fadd st0, st0");
    __asm__("fld dword [ebp+0x10]");
    ecx7 = reinterpret_cast<int32_t>(a5) >> 2;
    if (ecx7) {
        do {
            __asm__("fld dword [ebx+eax*4]");
            __asm__("fld dword [ebx+edx*4]");
            eax8 = static_cast<uint32_t>(esi6->f2);
            __asm__("fld dword [ebx+eax*4]");
            __asm__("fld dword [ebx+edx*4]");
            __asm__("fld st4");
            __asm__("fmul st4, st0");
            __asm__("fmul st3, st0");
            __asm__("fmul st2, st0");
            __asm__("fmulp st1, st0");
            __asm__("fxch st0, st3");
            __asm__("fadd dword [edi]");
            __asm__("fxch st0, st2");
            __asm__("fadd dword [edi+0x4]");
            __asm__("fxch st0, st1");
            __asm__("fadd dword [edi+0x8]");
            __asm__("fxch st0, st3");
            __asm__("fadd dword [edi+0xc]");
            __asm__("fxch st0, st2");
            __asm__("fstp dword [edi]");
            __asm__("fstp dword [edi+0x4]");
            __asm__("fxch st0, st1");
            __asm__("fstp dword [edi+0x8]");
            __asm__("fstp dword [edi+0xc]");
            __asm__("fadd st0, st1");
            esi6 = reinterpret_cast<struct s158*>(reinterpret_cast<int32_t>(esi6) + 4);
            --ecx7;
        } while (ecx7);
    }
    ecx9 = a5 & 3;
    if (ecx9) {
        __asm__("fxch st0, st1");
        __asm__("fstp st0");
        __asm__("fld dword [ebp+0x14]");
        __asm__("fxch st0, st1");
        do {
            eax8 = static_cast<uint32_t>(esi6->f0);
            __asm__("fld dword [ebx+eax*4]");
            __asm__("fmul st0, st1");
            __asm__("fadd dword [edi]");
            __asm__("fstp dword [edi]");
            __asm__("fadd st0, st1");
            esi6 = reinterpret_cast<struct s158*>(&esi6->pad2);
            --ecx9;
        } while (ecx9);
    }
    __asm__("fstp st0");
    __asm__("fstp st0");
    return *reinterpret_cast<int16_t*>(&eax8);
}

int16_t fun_18017850(int32_t a1, struct s158* a2, struct s262* a3, struct s262* a4, uint32_t a5) {
    int32_t ecx6;
    uint32_t ecx7;
    int16_t ax8;

    __asm__("fld dword [ebp+0x14]");
    __asm__("fadd st0, st0");
    __asm__("fadd st0, st0");
    __asm__("fld dword [ebp+0x10]");
    ecx6 = reinterpret_cast<int32_t>(a5) >> 2;
    if (ecx6) {
        do {
            __asm__("fild word [esi]");
            __asm__("fild word [esi+0x2]");
            __asm__("fxch st0, st1");
            __asm__("fmul st0, st2");
            __asm__("fild word [esi+0x4]");
            __asm__("fxch st0, st2");
            __asm__("fmul st0, st3");
            __asm__("fild word [esi+0x6]");
            __asm__("fxch st0, st3");
            __asm__("fmul st0, st4");
            __asm__("fxch st0, st2");
            __asm__("fadd dword [edi]");
            __asm__("fxch st0, st3");
            __asm__("fmul st0, st4");
            __asm__("fxch st0, st1");
            __asm__("fadd dword [edi+0x4]");
            __asm__("fxch st0, st2");
            __asm__("fadd dword [edi+0x8]");
            __asm__("fxch st0, st1");
            __asm__("fadd dword [edi+0xc]");
            __asm__("fxch st0, st3");
            __asm__("fstp dword [edi]");
            __asm__("fxch st0, st1");
            __asm__("fstp dword [edi+0x4]");
            __asm__("fstp dword [edi+0x8]");
            __asm__("fstp dword [edi+0xc]");
            __asm__("fadd st0, st1");
            --ecx6;
        } while (ecx6);
    }
    ecx7 = a5 & 3;
    if (ecx7) {
        __asm__("fxch st0, st1");
        __asm__("fstp st0");
        __asm__("fld dword [ebp+0x14]");
        __asm__("fxch st0, st1");
        do {
            __asm__("fild word [esi]");
            __asm__("fmul st0, st1");
            __asm__("fadd dword [edi]");
            __asm__("fstp dword [edi]");
            __asm__("fadd st0, st1");
            --ecx7;
        } while (ecx7);
    }
    __asm__("fstp st0");
    __asm__("fstp st0");
    return ax8;
}

int16_t fun_18017340(int32_t a1, struct s158* a2, int32_t a3, int32_t a4, uint32_t a5) {
    int32_t ecx6;
    int32_t ecx7;
    uint32_t ecx8;
    int16_t ax9;

    __asm__("fld dword [ebp+0x14]");
    __asm__("fadd st0, st0");
    __asm__("fadd st0, st0");
    __asm__("fld dword [ebp+0x10]");
    ecx6 = reinterpret_cast<int32_t>(a5) >> 2;
    if (ecx6) {
        ecx7 = -(ecx6 << 4);
        do {
            __asm__("fld dword [esi+ecx]");
            __asm__("fld dword [esi+ecx+0x4]");
            __asm__("fxch st0, st1");
            __asm__("fmul st0, st2");
            __asm__("fld dword [esi+ecx+0x8]");
            __asm__("fxch st0, st2");
            __asm__("fmul st0, st3");
            __asm__("fld dword [esi+ecx+0xc]");
            __asm__("fxch st0, st3");
            __asm__("fmul st0, st4");
            __asm__("fxch st0, st2");
            __asm__("fadd dword [edi+ecx]");
            __asm__("fxch st0, st3");
            __asm__("fmul st0, st4");
            __asm__("fxch st0, st1");
            __asm__("fadd dword [edi+ecx+0x4]");
            __asm__("fxch st0, st3");
            __asm__("fstp dword [edi+ecx]");
            __asm__("fxch st0, st1");
            __asm__("fadd dword [edi+ecx+0x8]");
            __asm__("fxch st0, st2");
            __asm__("fstp dword [edi+ecx+0x4]");
            __asm__("fadd dword [edi+ecx+0xc]");
            __asm__("fxch st0, st1");
            __asm__("fstp dword [edi+ecx+0x8]");
            __asm__("fstp dword [edi+ecx+0xc]");
            __asm__("fadd st0, st1");
            ecx7 = ecx7 + 16;
        } while (ecx7);
    }
    ecx8 = a5 & 3;
    if (ecx8) {
        __asm__("fxch st0, st1");
        __asm__("fstp st0");
        __asm__("fld dword [ebp+0x14]");
        __asm__("fxch st0, st1");
        do {
            __asm__("fld dword [esi]");
            __asm__("fmul st0, st1");
            __asm__("fld st2");
            __asm__("faddp st2, st0");
            __asm__("fadd dword [edi]");
            __asm__("fstp dword [edi]");
            --ecx8;
        } while (ecx8);
    }
    __asm__("fstp st0");
    __asm__("fstp st0");
    return ax9;
}

int16_t fun_18017a00(int32_t a1, int32_t a2, int32_t a3) {
    int32_t eax4;
    int32_t edx5;

    eax4 = a3 - 1;
    if (!(reinterpret_cast<uint1_t>(a3 < 0) | reinterpret_cast<uint1_t>(a3 == 0))) {
        edx5 = eax4 + 1;
        eax4 = a1;
        do {
            __asm__("fld dword [ecx]");
            __asm__("fchs ");
            __asm__("fstp dword [eax]");
            eax4 = eax4 + 4;
            --edx5;
        } while (edx5);
    }
    return *reinterpret_cast<int16_t*>(&eax4);
}

void fun_18017ad0(int32_t ecx, int32_t a2, int32_t a3) {
    int32_t ecx4;

    __asm__("fldz ");
    ecx4 = a3 - 1;
    if (ecx4 < 0 == __intrinsic()) {
        do {
            __asm__("fld dword [esi+ecx*4]");
            __asm__("fabs ");
            __asm__("faddp st1, st0");
            --ecx4;
        } while (ecx4 < 0 == __intrinsic());
    }
    __asm__("fstp dword [ebp-0x4]");
    __asm__("fld dword [ebp-0x4]");
    return;
}

int16_t fun_18017de0(unsigned char* a1, unsigned char* a2, int16_t a3, int16_t a4, void** a5) {
    unsigned char* esi6;
    unsigned char* edi7;
    int32_t ebx8;
    int32_t ecx9;
    int32_t eax10;
    int32_t ecx11;
    int32_t ecx12;
    uint32_t ecx13;
    int32_t eax14;

    esi6 = a2;
    edi7 = a1;
    ebx8 = static_cast<int32_t>(a3);
    ecx9 = reinterpret_cast<signed char>(a5) >> 4;
    if (ecx9) {
        __asm__("movd mm4, ebx");
        __asm__("movd mm6, edx");
        __asm__("punpcklwd mm4, mm4");
        __asm__("punpcklwd mm6, mm6");
        __asm__("punpckldq mm4, mm4");
        __asm__("punpckldq mm6, mm6");
        __asm__("psllw mm6, 0x3");
        __asm__("movq mm5, mm4");
        __asm__("paddsw mm5, mm6");
        __asm__("psllw mm6, 0x1");
        eax10 = 0x180438c0;
        __asm__("movq mm7, [eax]");
        ecx11 = ecx9 << 4;
        esi6 = reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(esi6) + ecx11);
        edi7 = edi7 + ecx11 * 2;
        ecx12 = -ecx11;
        __asm__("pxor mm0, mm0");
        do {
            __asm__("pxor mm1, mm1");
            __asm__("pxor mm2, mm2");
            __asm__("punpcklbw mm0, [esi+ecx]");
            __asm__("pxor mm3, mm3");
            __asm__("punpckhbw mm1, [esi+ecx]");
            __asm__("pxor mm0, mm7");
            __asm__("punpcklbw mm2, [esi+ecx+0x8]");
            __asm__("pxor mm1, mm7");
            __asm__("punpckhbw mm3, [esi+ecx+0x8]");
            __asm__("pmulhw mm0, mm4");
            __asm__("pmulhw mm1, mm4");
            __asm__("pxor mm2, mm7");
            __asm__("pmulhw mm2, mm5");
            __asm__("pxor mm3, mm7");
            __asm__("pmulhw mm3, mm5");
            __asm__("psllw mm0, 0x1");
            __asm__("movq [edi+ecx*2], mm0");
            __asm__("psllw mm1, 0x1");
            __asm__("movq [edi+ecx*2+0x8], mm1");
            __asm__("psllw mm2, 0x1");
            __asm__("movq [edi+ecx*2+0x10], mm2");
            __asm__("psllw mm3, 0x1");
            __asm__("movq [edi+ecx*2+0x18], mm3");
            __asm__("paddsw mm4, mm6");
            __asm__("paddsw mm5, mm6");
            __asm__("pxor mm0, mm0");
            ecx12 = ecx12 + 16;
        } while (ecx12);
        __asm__("movd ebx, mm4");
        ebx8 = static_cast<int32_t>(*reinterpret_cast<int16_t*>(&ebx8));
        __asm__("emms ");
    }
    ecx13 = reinterpret_cast<unsigned char>(a5) & 15;
    if (ecx13) {
        do {
            eax14 = static_cast<int16_t>(reinterpret_cast<signed char>(*esi6 ^ 0x80)) * ebx8 >> 7;
            *edi7 = *reinterpret_cast<unsigned char*>(&eax14);
            eax10 = static_cast<int32_t>(a4);
            ebx8 = ebx8 + eax10;
            ++esi6;
            edi7 = edi7 + 2;
            --ecx13;
        } while (ecx13);
    }
    return *reinterpret_cast<int16_t*>(&eax10);
}

int16_t fun_18017ed0(unsigned char* a1, unsigned char* a2, int32_t a3, int16_t a4, void** a5) {
    void** eax6;
    void** v7;
    unsigned char* esi8;
    unsigned char* edi9;
    int32_t ecx10;
    int16_t bx11;
    void** ecx12;
    void* ebx13;
    int32_t eax14;

    eax6 = a5;
    v7 = eax6;
    esi8 = a2;
    edi9 = a1;
    if (!1) {
        __asm__("movd mm3, dword [ebp+0x10]");
        __asm__("movd mm6, dword [ebp+0x14]");
        __asm__("punpcklwd mm3, mm3");
        __asm__("punpckldq mm3, mm3");
        __asm__("punpcklwd mm6, mm6");
        __asm__("punpckldq mm6, mm6");
        __asm__("movq mm7, mm6");
        __asm__("psllq mm7, 0x10");
        __asm__("paddsw mm3, mm7");
        __asm__("psllq mm7, 0x10");
        __asm__("paddsw mm3, mm7");
        __asm__("psllq mm7, 0x10");
        __asm__("paddsw mm3, mm7");
        __asm__("paddsw mm6, mm6");
        __asm__("paddsw mm6, mm6");
        __asm__("movq mm4, mm3");
        __asm__("paddsw mm4, mm6");
        __asm__("movq mm7, mm6");
        __asm__("movq mm5, mm4");
        __asm__("paddsw mm7, mm7");
        __asm__("paddsw mm5, mm6");
        __asm__("paddsw mm6, mm7");
        esi8 = esi8;
        edi9 = edi9;
        ecx10 = -0;
        __asm__("movq mm0, mm3");
        do {
            __asm__("pmulhw mm0, [esi+ecx]");
            __asm__("movq mm1, mm4");
            __asm__("pmulhw mm1, [esi+ecx+0x8]");
            __asm__("movq mm2, mm5");
            __asm__("pmulhw mm2, [esi+ecx+0x10]");
            __asm__("paddsw mm3, mm6");
            __asm__("psllw mm0, 0x1");
            __asm__("paddsw mm4, mm6");
            __asm__("psllw mm1, 0x1");
            __asm__("paddsw mm5, mm6");
            __asm__("movq [edi+ecx], mm0");
            __asm__("psllw mm2, 0x1");
            __asm__("movq [edi+ecx+0x8], mm1");
            __asm__("movq [edi+ecx+0x10], mm2");
            __asm__("movq mm0, mm3");
            ecx10 = ecx10 + 24;
        } while (ecx10);
        __asm__("movd ebx, mm3");
        *reinterpret_cast<int16_t*>(&a3) = bx11;
        __asm__("emms ");
    }
    ecx12 = v7;
    if (ecx12) {
        ebx13 = reinterpret_cast<void*>(static_cast<int32_t>(*reinterpret_cast<int16_t*>(&a3)));
        do {
            eax14 = reinterpret_cast<int32_t>(reinterpret_cast<int16_t>(*esi8) * reinterpret_cast<uint32_t>(ebx13)) >> 15;
            *edi9 = *reinterpret_cast<unsigned char*>(&eax14);
            eax6 = reinterpret_cast<void**>(static_cast<int32_t>(a4));
            ebx13 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebx13) + reinterpret_cast<unsigned char>(eax6));
            esi8 = esi8 + 2;
            edi9 = edi9 + 2;
            --ecx12;
        } while (ecx12);
    }
    return *reinterpret_cast<int16_t*>(&eax6);
}

int16_t fun_180181b0(int16_t* a1, unsigned char* a2, int16_t a3, int16_t a4, void** a5) {
    unsigned char* esi6;
    int16_t* edi7;
    int32_t ebx8;
    uint32_t ecx9;
    int32_t eax10;
    uint32_t ecx11;
    int32_t ecx12;
    uint32_t ecx13;
    int32_t eax14;

    esi6 = a2;
    edi7 = a1;
    ebx8 = static_cast<int32_t>(a3);
    ecx9 = reinterpret_cast<uint32_t>(reinterpret_cast<signed char>(a5) >> 4);
    if (ecx9) {
        __asm__("movd mm4, ebx");
        __asm__("movd mm6, edx");
        __asm__("punpcklwd mm4, mm4");
        __asm__("punpcklwd mm6, mm6");
        __asm__("punpckldq mm4, mm4");
        __asm__("punpckldq mm6, mm6");
        __asm__("psllw mm6, 0x3");
        __asm__("movq mm5, mm4");
        __asm__("paddsw mm5, mm6");
        __asm__("psllw mm6, 0x1");
        eax10 = 0x180438c0;
        __asm__("movq mm7, [eax]");
        ecx11 = ecx9 << 4;
        esi6 = reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(esi6) + ecx11);
        edi7 = edi7 + ecx11;
        ecx12 = reinterpret_cast<int32_t>(-ecx11);
        __asm__("pxor mm0, mm0");
        __asm__("pxor mm1, mm1");
        __asm__("pxor mm2, mm2");
        do {
            __asm__("punpcklbw mm0, [esi+ecx]");
            __asm__("pxor mm3, mm3");
            __asm__("punpckhbw mm1, [esi+ecx]");
            __asm__("pxor mm0, mm7");
            __asm__("punpcklbw mm2, [esi+ecx+0x8]");
            __asm__("pxor mm1, mm7");
            __asm__("punpckhbw mm3, [esi+ecx+0x8]");
            __asm__("pmulhw mm0, mm4");
            __asm__("pmulhw mm1, mm4");
            __asm__("pxor mm2, mm7");
            __asm__("pmulhw mm2, mm5");
            __asm__("pxor mm3, mm7");
            __asm__("pmulhw mm3, mm5");
            __asm__("psllw mm0, 0x1");
            __asm__("paddsw mm0, [edi+ecx*2]");
            __asm__("psllw mm1, 0x1");
            __asm__("paddsw mm1, [edi+ecx*2+0x8]");
            __asm__("psllw mm2, 0x1");
            __asm__("paddsw mm2, [edi+ecx*2+0x10]");
            __asm__("psllw mm3, 0x1");
            __asm__("paddsw mm3, [edi+ecx*2+0x18]");
            __asm__("paddsw mm4, mm6");
            __asm__("movq [edi+ecx*2], mm0");
            __asm__("paddsw mm5, mm6");
            __asm__("movq [edi+ecx*2+0x8], mm1");
            __asm__("pxor mm0, mm0");
            __asm__("movq [edi+ecx*2+0x10], mm2");
            __asm__("pxor mm1, mm1");
            __asm__("movq [edi+ecx*2+0x18], mm3");
            __asm__("pxor mm2, mm2");
            ecx12 = ecx12 + 16;
        } while (ecx12);
        __asm__("movd ebx, mm4");
        ebx8 = static_cast<int32_t>(*reinterpret_cast<int16_t*>(&ebx8));
        __asm__("emms ");
    }
    ecx13 = reinterpret_cast<unsigned char>(a5) & 15;
    if (ecx13) {
        do {
            eax14 = (static_cast<int16_t>(reinterpret_cast<signed char>(*esi6 ^ 0x80)) * ebx8 >> 7) + *edi7;
            if (eax14 <= 0x7fff) {
                if (eax14 < 0xffff8000) {
                    eax14 = 0xffff8000;
                }
            } else {
                eax14 = 0x7fff;
            }
            *edi7 = *reinterpret_cast<int16_t*>(&eax14);
            eax10 = static_cast<int32_t>(a4);
            ebx8 = ebx8 + eax10;
            ++esi6;
            ++edi7;
            --ecx13;
        } while (ecx13);
    }
    return *reinterpret_cast<int16_t*>(&eax10);
}

int16_t fun_180182e0(int16_t* a1, unsigned char* a2, int32_t a3, int16_t a4, void** a5) {
    uint32_t eax6;
    void*** v7;
    unsigned char* esi8;
    int16_t* edi9;
    uint32_t ecx10;
    int32_t ecx11;
    int16_t bx12;
    int16_t bx13;
    uint32_t ecx14;
    unsigned char* esi15;
    int16_t* edi16;
    uint32_t ecx17;

    __asm__("cdq ");
    eax6 = reinterpret_cast<signed char>(a5) / 12 * 12;
    v7 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(a5) - eax6);
    esi8 = a2;
    edi9 = a1;
    if (eax6) {
        __asm__("movd mm3, dword [ebp+0x10]");
        __asm__("movd mm6, dword [ebp+0x14]");
        __asm__("punpcklwd mm3, mm3");
        __asm__("punpckldq mm3, mm3");
        __asm__("punpcklwd mm6, mm6");
        __asm__("punpckldq mm6, mm6");
        __asm__("movq mm7, mm6");
        __asm__("psllq mm7, 0x10");
        __asm__("paddsw mm3, mm7");
        __asm__("psllq mm7, 0x10");
        __asm__("paddsw mm3, mm7");
        __asm__("psllq mm7, 0x10");
        __asm__("paddsw mm3, mm7");
        __asm__("paddsw mm6, mm6");
        __asm__("paddsw mm6, mm6");
        __asm__("movq mm4, mm3");
        __asm__("paddsw mm4, mm6");
        __asm__("movq mm7, mm6");
        __asm__("movq mm5, mm4");
        __asm__("paddsw mm7, mm7");
        __asm__("paddsw mm5, mm6");
        __asm__("paddsw mm6, mm7");
        ecx10 = eax6 << 1;
        esi8 = reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(esi8) + ecx10);
        edi9 = reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi9) + ecx10);
        ecx11 = reinterpret_cast<int32_t>(-ecx10);
        __asm__("movq mm0, mm3");
        do {
            __asm__("pmulhw mm0, [esi+ecx]");
            __asm__("movq mm1, mm4");
            __asm__("pmulhw mm1, [esi+ecx+0x8]");
            __asm__("movq mm2, mm5");
            __asm__("pmulhw mm2, [esi+ecx+0x10]");
            __asm__("paddsw mm3, mm6");
            __asm__("psllw mm0, 0x1");
            __asm__("paddsw mm4, mm6");
            __asm__("paddsw mm0, [edi+ecx]");
            __asm__("psllw mm1, 0x1");
            __asm__("paddsw mm1, [edi+ecx+0x8]");
            __asm__("psllw mm2, 0x1");
            __asm__("paddsw mm2, [edi+ecx+0x10]");
            __asm__("paddsw mm5, mm6");
            __asm__("movq [edi+ecx], mm0");
            __asm__("movq [edi+ecx+0x8], mm1");
            __asm__("movq [edi+ecx+0x10], mm2");
            __asm__("movq mm0, mm3");
            ecx11 = ecx11 + 24;
        } while (ecx11);
        __asm__("movd ebx, mm3");
        *reinterpret_cast<int16_t*>(&a3) = bx12;
        __asm__("emms ");
    }
    if (!v7) {
        addr_0x18018416_6:
        return *reinterpret_cast<int16_t*>(&eax6);
    } else {
        bx13 = *reinterpret_cast<int16_t*>(&a3);
        ecx14 = reinterpret_cast<uint32_t>(v7) << 1;
        esi15 = reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(esi8) + ecx14);
        edi16 = reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi9) + ecx14);
        ecx17 = -ecx14;
        while (1) {
            __asm__("shrd ax, dx, 0xf");
            *reinterpret_cast<int16_t*>(&eax6) = reinterpret_cast<int16_t>(reinterpret_cast<int16_t>(*reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(esi15) + ecx17) * bx13) + *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi16) + ecx17));
            if (__intrinsic()) {
                if (__intrinsic()) {
                    *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi16) + ecx17) = 0x8000;
                    bx13 = reinterpret_cast<int16_t>(bx13 + a4);
                    ecx17 = ecx17 + 2;
                    if (!ecx17) 
                        goto addr_0x18018416_6;
                } else {
                    *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi16) + ecx17) = 0x7fff;
                    bx13 = reinterpret_cast<int16_t>(bx13 + a4);
                    ecx17 = ecx17 + 2;
                    if (!ecx17) 
                        break;
                }
            } else {
                *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi16) + ecx17) = *reinterpret_cast<int16_t*>(&eax6);
                bx13 = reinterpret_cast<int16_t>(bx13 + a4);
                ecx17 = ecx17 + 2;
                if (!ecx17) 
                    goto addr_0x180183f2_13;
            }
        }
    }
    goto addr_0x18018416_6;
    addr_0x180183f2_13:
    goto addr_0x18018416_6;
}

void fun_18018660(void* a1, void* a2, uint32_t a3) {
    void* esi4;
    void* edi5;
    int32_t ecx6;
    int32_t ecx7;
    int32_t ecx8;
    uint32_t ecx9;
    uint32_t ecx10;
    void* esi11;
    void* edi12;
    uint32_t ecx13;

    esi4 = a2;
    edi5 = a1;
    ecx6 = reinterpret_cast<int32_t>(a3) >> 4;
    if (ecx6) {
        ecx7 = ecx6 << 5;
        esi4 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esi4) + ecx7);
        edi5 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(edi5) + ecx7);
        ecx8 = -ecx7;
        do {
            __asm__("pxor mm0, mm0");
            __asm__("pxor mm1, mm1");
            __asm__("pxor mm2, mm2");
            __asm__("pxor mm3, mm3");
            __asm__("psubsw mm0, [esi+ecx]");
            __asm__("psubsw mm1, [esi+ecx+0x8]");
            __asm__("psubsw mm2, [esi+ecx+0x10]");
            __asm__("psubsw mm3, [esi+ecx+0x18]");
            __asm__("movq [edi+ecx], mm0");
            __asm__("movq [edi+ecx+0x8], mm1");
            __asm__("movq [edi+ecx+0x10], mm2");
            __asm__("movq [edi+ecx+0x18], mm3");
            ecx8 = ecx8 + 32;
        } while (ecx8);
        __asm__("emms ");
    }
    ecx9 = a3 & 15;
    if (ecx9) {
        ecx10 = ecx9 << 1;
        esi11 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esi4) + ecx10);
        edi12 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(edi5) + ecx10);
        ecx13 = -ecx10;
        do {
            *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi12) + ecx13) = reinterpret_cast<int16_t>(~*reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(esi11) + ecx13));
            ecx13 = ecx13 + 2;
        } while (ecx13);
    }
    return;
}

void fun_18018750(int16_t* a1, int16_t a2, uint32_t a3, int32_t a4, int32_t a5) {
    int16_t* edi6;
    int32_t ebx7;
    int32_t ecx8;
    int32_t ecx9;
    int32_t ecx10;
    uint32_t ecx11;
    int32_t eax12;

    edi6 = a1;
    ebx7 = static_cast<int32_t>(a2);
    ecx8 = reinterpret_cast<int32_t>(a3) >> 4;
    if (ecx8) {
        __asm__("movd mm4, ebx");
        __asm__("punpcklwd mm4, mm4");
        __asm__("punpckldq mm4, mm4");
        ecx9 = ecx8 << 5;
        edi6 = reinterpret_cast<int16_t*>(reinterpret_cast<int32_t>(edi6) + ecx9);
        ecx10 = -ecx9;
        __asm__("movq mm0, mm4");
        do {
            __asm__("pmulhw mm0, [edi+ecx]");
            __asm__("movq mm1, mm4");
            __asm__("pmulhw mm1, [edi+ecx+0x8]");
            __asm__("movq mm2, mm4");
            __asm__("pmulhw mm2, [edi+ecx+0x10]");
            __asm__("movq mm3, mm4");
            __asm__("pmulhw mm3, [edi+ecx+0x18]");
            __asm__("psllw mm0, 0x1");
            __asm__("movq [edi+ecx], mm0");
            __asm__("psllw mm1, 0x1");
            __asm__("movq [edi+ecx+0x8], mm1");
            __asm__("psllw mm2, 0x1");
            __asm__("movq [edi+ecx+0x10], mm2");
            __asm__("psllw mm3, 0x1");
            __asm__("movq [edi+ecx+0x18], mm3");
            __asm__("movq mm0, mm4");
            ecx10 = ecx10 + 32;
        } while (ecx10);
        __asm__("emms ");
    }
    ecx11 = a3 & 15;
    if (ecx11) {
        do {
            eax12 = *edi6 * ebx7 >> 15;
            *edi6 = *reinterpret_cast<int16_t*>(&eax12);
            ++edi6;
            --ecx11;
        } while (ecx11);
    }
    return;
}

int16_t fun_180189d0(int16_t* a1, int16_t a2, int32_t a3) {
    int16_t v4;
    int16_t* esi5;
    int32_t eax6;
    int32_t edx7;
    uint32_t eax8;
    uint32_t v9;
    uint32_t v10;

    if (a3 > 0) {
        v4 = *(a1 + a3 - 1);
        *(a1 + a3 - 1) = a2;
        esi5 = a1;
        eax6 = static_cast<int32_t>(a2);
        edx7 = -eax6;
        while (*esi5 < *reinterpret_cast<int16_t*>(&eax6) && *esi5 > *reinterpret_cast<int16_t*>(&edx7)) {
            ++esi5;
        }
        *(a1 + a3 - 1) = v4;
        if (reinterpret_cast<int32_t>(esi5) - reinterpret_cast<int32_t>(a1) >> 1 < reinterpret_cast<int32_t>(a3 - 1)) 
            goto addr_0x18018a41_6;
    } else {
        eax8 = 0xffffffff;
        goto addr_0x18018a7e_8;
    }
    if (static_cast<int32_t>(v4) >= static_cast<int32_t>(a2) || -static_cast<int32_t>(v4) >= static_cast<int32_t>(a2)) {
        v9 = a3 - 1;
    } else {
        v9 = 0xffffffff;
    }
    v10 = v9;
    addr_0x18018a7b_13:
    eax8 = v10;
    addr_0x18018a7e_8:
    return *reinterpret_cast<int16_t*>(&eax8);
    addr_0x18018a41_6:
    v10 = reinterpret_cast<uint32_t>(reinterpret_cast<int32_t>(esi5) - reinterpret_cast<int32_t>(a1) >> 1);
    goto addr_0x18018a7b_13;
}

void** fun_18018b00(void** a1, void** a2, void** a3) {
    void*** esi4;
    void* edi5;
    void* ecx6;
    void** ax7;

    if (a3) {
        esi4 = reinterpret_cast<void***>(a2 + reinterpret_cast<unsigned char>(a3) * 2);
        edi5 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a1) + reinterpret_cast<unsigned char>(a3));
        ecx6 = reinterpret_cast<void*>(-reinterpret_cast<unsigned char>(a3));
        do {
            ax7 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi4[reinterpret_cast<uint32_t>(ecx6) * 2]) ^ 0x8000);
            *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi5) + reinterpret_cast<uint32_t>(ecx6)) = *reinterpret_cast<signed char*>(&ax7 + 1);
            ecx6 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx6) + 1);
        } while (ecx6);
    }
    return ax7;
}

void** fun_18021ba0(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20) {
    void** edx21;
    void** eax22;
    void** edi23;
    void** esi24;
    void** edx25;
    void** ecx26;
    void* esi27;
    void** edi28;
    void** esi29;
    void** edx30;
    void** ecx31;
    void* esi32;

    if (*reinterpret_cast<void***>(a2 + 8) != *reinterpret_cast<void***>(a1 + 8)) 
        goto addr_0x18021c2d_2;
    if (*reinterpret_cast<void***>(a2 + 8) == 8) {
        edx21 = *reinterpret_cast<void***>(a2);
        eax22 = *reinterpret_cast<void***>(a1);
        if (a4) {
            edi23 = a3;
            esi24 = a4;
            do {
                edx21 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx21) + reinterpret_cast<unsigned char>(edi23));
                *reinterpret_cast<void***>(eax22) = *reinterpret_cast<void***>(edx21);
                ++eax22;
                --esi24;
            } while (esi24);
            return eax22;
        }
    } else {
        if (*reinterpret_cast<void***>(a2 + 8) == 16) {
            edx25 = *reinterpret_cast<void***>(a2);
            eax22 = *reinterpret_cast<void***>(a1);
            ecx26 = a4;
            if (ecx26) {
                esi27 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(a3));
                do {
                    edx25 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx25) + reinterpret_cast<uint32_t>(esi27));
                    *reinterpret_cast<void***>(eax22) = *reinterpret_cast<void***>(edx25);
                    eax22 = eax22 + 2;
                    --ecx26;
                } while (ecx26);
                return eax22;
            }
        } else {
            if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a2 + 8) == 32)) {
                addr_0x18021c2d_2:
                eax22 = fun_18017250(a1, a4, edi28, esi29, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
            } else {
                edx30 = *reinterpret_cast<void***>(a2);
                eax22 = *reinterpret_cast<void***>(a1);
                ecx31 = a4;
                if (ecx31) {
                    esi32 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a3) << 2);
                    do {
                        edx30 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx30) + reinterpret_cast<uint32_t>(esi32));
                        *reinterpret_cast<void***>(eax22) = *reinterpret_cast<void***>(edx30);
                        eax22 = eax22 + 4;
                        --ecx31;
                    } while (ecx31);
                    return eax22;
                }
            }
        }
    }
    return eax22;
}

void** fun_180221a0(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23) {
    void** v24;
    void** v25;
    void** ebp26;
    void*** ebp27;
    void** v28;
    void** ebx29;
    void** v30;
    void** esi31;
    void** esi32;
    void** v33;
    void** edi34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** ax47;
    void** ecx48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** ax59;
    void** ecx60;
    int1_t zf61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** ax74;
    void** eax75;
    int1_t zf76;
    void** v77;
    void** v78;
    void** v79;
    void** edx80;
    void** v81;
    void** v82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** ax87;
    void** edx88;
    void** ebx89;
    void** eax90;
    void** edi91;
    void** ecx92;
    void*** ecx93;
    void** v94;
    void** edi95;
    void* v96;
    void** ebx97;
    void* v98;
    void** v99;
    void** ecx100;
    int32_t esi101;
    int32_t esi102;
    uint32_t eax103;
    int32_t ecx104;
    uint32_t ecx105;
    void** eax106;
    void** edi107;
    void* eax108;
    void** ecx109;
    void* ebx110;
    void* v111;
    void* v112;
    void** v113;
    int32_t edx114;
    int32_t esi115;
    int32_t esi116;
    void** edx117;
    void** v118;
    void** v119;
    void** v120;
    void** v121;
    void** v122;
    void** v123;
    void** v124;
    void** ecx125;
    void*** edi126;
    void** v127;
    void** edi128;
    void** esi129;
    void* v130;
    void** v131;
    void** ecx132;
    void** ecx133;
    void** ecx134;
    uint32_t eax135;
    int32_t ecx136;
    uint32_t ecx137;
    void** eax138;
    void** ecx139;
    void* edx140;
    void* esi141;
    void* ebx142;
    void** v143;
    void** edi144;
    void** v145;
    void** edi146;
    void** edi147;
    void** ecx148;
    void** v149;
    void** v150;
    uint32_t eax151;
    int32_t v152;
    int32_t ecx153;
    uint32_t ecx154;
    void** eax155;
    void** esi156;
    void* eax157;
    void** v158;
    void** edi159;
    void** edi160;
    void** edi161;
    void** esi162;
    void* eax163;
    void** v164;
    void** edi165;
    void** edi166;
    void** v167;
    void** ecx168;
    void** ecx169;
    uint32_t eax170;
    int32_t ecx171;
    uint32_t ecx172;
    uint32_t eax173;
    int32_t v174;
    int32_t ecx175;
    uint32_t ecx176;
    void** eax177;
    void** edi178;
    void** v179;
    int32_t eax180;
    int32_t v181;
    void** eax182;
    void** eax183;
    void** esi184;
    void* edx185;
    void* ecx186;
    void* ebx187;
    void** v188;
    void** edi189;

    v24 = reinterpret_cast<void**>(__return_address());
    v25 = ebp26;
    ebp27 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    v28 = ebx29;
    v30 = esi31;
    esi32 = a1;
    v33 = edi34;
    if (!reinterpret_cast<int1_t>(a3 == 4)) {
        if (!reinterpret_cast<int1_t>(a3 == 2)) {
            if (reinterpret_cast<int1_t>(a3 == 1)) {
                ax47 = fun_1801a210(a2, a1, a4, v33, v30, v28, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v25, v24, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23);
                return ax47;
            }
        } else {
            ecx48 = a2 + 20;
            ax59 = fun_18021c40(ecx48, a1, a2, ecx48, a4, v33, v30, v28, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58);
            return ax59;
        }
    }
    ecx60 = a2;
    zf61 = reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx60 + 4) == 1);
    v62 = *reinterpret_cast<void***>(ecx60 + 4 + 4);
    v63 = *reinterpret_cast<void***>(ecx60 + 4 + 8);
    v64 = *reinterpret_cast<void***>(ecx60 + 4 + 12);
    if (!zf61) {
        ax74 = fun_18017250(esi32, a4, v33, v30, v28, v65, v62, v63, v64, v66, v67, v68, v69, v70, v71, v72, v73, v25, v24, a1, a2, a3, a4, a5, a6);
        return ax74;
    }
    a2 = reinterpret_cast<void**>(1);
    eax75 = ecx60 + 24;
    while ((zf76 = reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax75) == 1), v77 = *reinterpret_cast<void***>(eax75 + 4), v78 = *reinterpret_cast<void***>(eax75 + 8), v79 = *reinterpret_cast<void***>(eax75 + 12), zf76) && v77 == v62) {
        eax75 = eax75 + 20;
        edx80 = a2 + 1;
        a2 = edx80;
        if (reinterpret_cast<signed char>(edx80) >= reinterpret_cast<signed char>(4)) 
            goto addr_0x18022242_11;
    }
    ax87 = fun_18017250(a1, a4, v33, v30, v28, v81, v62, v63, v64, v82, v83, v84, v77, v78, v79, v85, v86, v25, v24, a1, a2, a3, a4, a5, a6);
    return ax87;
    addr_0x18022242_11:
    if (v62 == 16) {
        edx88 = *reinterpret_cast<void***>(ecx60);
        ebx89 = *reinterpret_cast<void***>(ecx60 + 20);
        eax90 = *reinterpret_cast<void***>(ecx60 + 40);
        edi91 = *reinterpret_cast<void***>(ecx60 + 60);
        ecx92 = *reinterpret_cast<void***>(esi32 + 4);
        v79 = edi91;
        ecx93 = reinterpret_cast<void***>(ecx92 - 2);
        if (!ecx93) {
            if (*reinterpret_cast<void***>(esi32 + 8) == 8) {
                v94 = *reinterpret_cast<void***>(esi32);
                if (a4) {
                    edi95 = edx88;
                    v96 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ebx89) - reinterpret_cast<unsigned char>(edx88));
                    ebx97 = v94;
                    v98 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(v79) - reinterpret_cast<unsigned char>(edx88));
                    v99 = a4;
                    do {
                        ecx100 = reinterpret_cast<void**>(ebp27 + 16);
                        esi101 = *reinterpret_cast<int16_t*>(reinterpret_cast<unsigned char>(edi95) + reinterpret_cast<uint32_t>(v96)) + *reinterpret_cast<int16_t*>(reinterpret_cast<unsigned char>(edi95) + reinterpret_cast<uint32_t>(v98));
                        esi102 = esi101 >> 1;
                        fun_1801aba0(ecx100, ebx97, ecx100);
                        eax103 = reinterpret_cast<uint32_t>(*reinterpret_cast<int16_t*>(&esi102) + 0x8080 >> 8);
                        if (reinterpret_cast<int32_t>(eax103) <= reinterpret_cast<int32_t>(0xff)) {
                            ecx104 = 0;
                            *reinterpret_cast<unsigned char*>(&ecx104) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(eax103) < reinterpret_cast<int32_t>(0)));
                            ecx105 = reinterpret_cast<uint32_t>(ecx104 - 1) & eax103;
                        } else {
                            ecx105 = 0xff;
                        }
                        *reinterpret_cast<void***>(ebx97 + 1) = *reinterpret_cast<void***>(&ecx105);
                        edi95 = edi95 + 2;
                        ebx97 = ebx97 + 2;
                        eax106 = v99 - 1;
                        v99 = eax106;
                    } while (eax106);
                    return eax106;
                }
            } else {
                if (*reinterpret_cast<void***>(esi32 + 8) == 16) {
                    edi107 = *reinterpret_cast<void***>(esi32);
                    if (a4) {
                        eax108 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(eax90) - reinterpret_cast<unsigned char>(edx88));
                        ecx109 = edx88;
                        ebx110 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ebx89) - reinterpret_cast<unsigned char>(edx88));
                        v111 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(v79) - reinterpret_cast<unsigned char>(edx88));
                        v112 = ebx110;
                        v113 = a4;
                        while (edi107 = edi107 + 4, ecx109 = ecx109 + 2, edx114 = *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(eax108) + reinterpret_cast<unsigned char>(ecx109)) + reinterpret_cast<int16_t>(*reinterpret_cast<void***>(ecx109)) >> 1, esi115 = *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(ebx110) + reinterpret_cast<unsigned char>(ecx109)) + *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(v111) + reinterpret_cast<unsigned char>(ecx109) + 0xfffffffe), *reinterpret_cast<void***>(edi107 + 0xfffffffc) = *reinterpret_cast<void***>(&edx114), esi116 = esi115 >> 1, *reinterpret_cast<void***>(edi107 + 0xfffffffe) = *reinterpret_cast<void***>(&esi116), edx117 = v113 - 1, v113 = edx117, !!edx117) {
                            ebx110 = v112;
                        }
                        return *reinterpret_cast<void***>(&eax108);
                    }
                } else {
                    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(esi32 + 8) == 32)) {
                        addr_0x18022a2f_30:
                        eax90 = fun_18017250(esi32, a4, v33, v30, v28, v118, v62, v63, v64, v119, v120, v121, v77, v78, v79, v122, v123, v25, v24, a1, a2, a3, a4, a5, a6);
                    } else {
                        if (a4) {
                            v124 = a4;
                            while (eax90 = eax90 + 2, ecx125 = v124 - 1, v124 = ecx125, !!ecx125) {
                            }
                            return eax90;
                        }
                    }
                }
            }
        } else {
            if (ecx93 - 2) 
                goto addr_0x18022a2f_30;
            if (*reinterpret_cast<void***>(esi32 + 8) == 8) 
                goto addr_0x180227a9_38; else 
                goto addr_0x180226c2_39;
        }
    } else {
        if (!reinterpret_cast<int1_t>(v62 == 32)) 
            goto addr_0x18022a2f_30;
        eax90 = *reinterpret_cast<void***>(ecx60 + 40);
        edi126 = reinterpret_cast<void***>(*reinterpret_cast<void***>(esi32 + 4) - 2);
        if (!edi126) 
            goto addr_0x180224bf_42; else 
            goto addr_0x1802226b_43;
    }
    return eax90;
    addr_0x180227a9_38:
    v127 = *reinterpret_cast<void***>(esi32);
    if (a4) {
        edi128 = v127 + 2;
        esi129 = eax90;
        v130 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(v79) - reinterpret_cast<unsigned char>(eax90));
        v131 = a4;
        do {
            ecx132 = reinterpret_cast<void**>(ebp27 + 0xffffffdc);
            fun_1801aba0(ecx132, v127, ecx132);
            ecx133 = reinterpret_cast<void**>(ebp27 + 0xffffffdc);
            fun_1801aba0(ecx133, edi128 + 0xffffffff, ecx133);
            ecx134 = reinterpret_cast<void**>(ebp27 + 0xffffffdc);
            fun_1801aba0(ecx134, edi128, ecx134);
            eax135 = reinterpret_cast<uint32_t>(*reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(v130) + reinterpret_cast<unsigned char>(esi129)) + 0x8080 >> 8);
            if (reinterpret_cast<int32_t>(eax135) <= reinterpret_cast<int32_t>(0xff)) {
                ecx136 = 0;
                *reinterpret_cast<unsigned char*>(&ecx136) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(eax135) < reinterpret_cast<int32_t>(0)));
                ecx137 = reinterpret_cast<uint32_t>(ecx136 - 1) & eax135;
            } else {
                ecx137 = 0xff;
            }
            *reinterpret_cast<void***>(edi128 + 1) = *reinterpret_cast<void***>(&ecx137);
            esi129 = esi129 + 2;
            edi128 = edi128 + 4;
            eax138 = v131 - 1;
            v127 = v127 + 4;
            v131 = eax138;
        } while (eax138);
        return eax138;
    }
    addr_0x180226c2_39:
    if (*reinterpret_cast<void***>(esi32 + 8) == 16) {
        ecx139 = *reinterpret_cast<void***>(esi32);
        if (a4) {
            edx140 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(edx88) - reinterpret_cast<unsigned char>(eax90));
            esi141 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(edi91) - reinterpret_cast<unsigned char>(eax90));
            ebx142 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ebx89) - reinterpret_cast<unsigned char>(eax90));
            v143 = a4;
            do {
                eax90 = eax90 + 2;
                *reinterpret_cast<void***>(ecx139) = *reinterpret_cast<void***>(reinterpret_cast<unsigned char>(eax90) + reinterpret_cast<uint32_t>(edx140));
                *reinterpret_cast<void***>(ecx139 + 2) = *reinterpret_cast<void***>(reinterpret_cast<unsigned char>(eax90) + reinterpret_cast<uint32_t>(ebx142) + 0xfffffffe);
                *reinterpret_cast<void***>(ecx139 + 4) = *reinterpret_cast<void***>(eax90 + 0xfffffffe);
                *reinterpret_cast<void***>(ecx139 + 6) = *reinterpret_cast<void***>(reinterpret_cast<unsigned char>(eax90) + reinterpret_cast<uint32_t>(esi141) + 0xfffffffe);
                ecx139 = ecx139 + 8;
                edi144 = v143 - 1;
                v143 = edi144;
            } while (edi144);
            return eax90;
        }
    } else {
        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(esi32 + 8) == 32)) 
            goto addr_0x18022a2f_30;
        if (a4) {
            v145 = a4;
            do {
                eax90 = eax90 + 2;
                __asm__("fild dword [ebp+0x8]");
                __asm__("fmul dword [0x18035094]");
                __asm__("fstp dword [ecx-0x10]");
                __asm__("fild dword [ebp+0x8]");
                __asm__("fmul dword [0x18035094]");
                __asm__("fstp dword [ecx-0xc]");
                __asm__("fild dword [ebp+0x8]");
                __asm__("fmul dword [0x18035094]");
                __asm__("fstp dword [ecx-0x8]");
                __asm__("fild dword [ebp+0x8]");
                edi146 = v145 - 1;
                v145 = edi146;
                __asm__("fmul dword [0x18035094]");
                __asm__("fstp dword [ecx-0x4]");
            } while (edi146);
            return eax90;
        }
    }
    addr_0x180224bf_42:
    if (*reinterpret_cast<void***>(esi32 + 8) == 8) {
        edi147 = *reinterpret_cast<void***>(esi32);
        if (a4) {
            ecx148 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx60 + 60)) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx60)));
            v149 = ecx148;
            v150 = a4;
            do {
                __asm__("fld dword [esi+eax]");
                __asm__("fadd dword [esi]");
                __asm__("fmul dword [0x18034774]");
                __asm__("fld dword [esi+ecx]");
                __asm__("fadd dword [esi+ebx]");
                __asm__("fmul dword [0x18034774]");
                __asm__("fstp dword [ebp-0xc]");
                __asm__("fmul dword [0x18035098]");
                __asm__("fstp dword [ebp-0x24]");
                __asm__("fld dword [ebp-0x24]");
                __asm__("fistp dword [ebp-0x20]");
                fun_1801aba0(v149, edi147, ebp27 + 20);
                __asm__("fld dword [ebp-0xc]");
                __asm__("fmul dword [0x18035098]");
                __asm__("fstp dword [ebp-0x24]");
                __asm__("fld dword [ebp-0x24]");
                __asm__("fistp dword [ebp-0x1c]");
                eax151 = reinterpret_cast<uint32_t>(v152 + 0x8080 >> 8);
                if (reinterpret_cast<int32_t>(eax151) <= reinterpret_cast<int32_t>(0xff)) {
                    ecx153 = 0;
                    *reinterpret_cast<unsigned char*>(&ecx153) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(eax151) < reinterpret_cast<int32_t>(0)));
                    ecx154 = reinterpret_cast<uint32_t>(ecx153 - 1) & eax151;
                } else {
                    ecx154 = 0xff;
                }
                *reinterpret_cast<void***>(edi147 + 1) = *reinterpret_cast<void***>(&ecx154);
                edi147 = edi147 + 2;
                eax155 = v150 - 1;
                v150 = eax155;
            } while (eax155);
            return eax155;
        }
    } else {
        if (*reinterpret_cast<void***>(esi32 + 8) == 16) {
            esi156 = *reinterpret_cast<void***>(esi32);
            if (a4) {
                eax157 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(eax90) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx60)));
                v158 = a4;
                do {
                    __asm__("fld dword [eax+edx]");
                    __asm__("fadd dword [edx]");
                    __asm__("fmul dword [0x18034774]");
                    __asm__("fld dword [ebx+edx]");
                    __asm__("fadd dword [ecx+edx]");
                    __asm__("fmul dword [0x18034774]");
                    __asm__("fstp dword [ebp-0x24]");
                    __asm__("fmul dword [0x18035098]");
                    __asm__("fstp dword [ebp+0x8]");
                    __asm__("fld dword [ebp+0x8]");
                    __asm__("fistp dword [ebp+0xc]");
                    edi159 = a2;
                    if (reinterpret_cast<signed char>(edi159) < reinterpret_cast<signed char>(0x7fff)) {
                        if (reinterpret_cast<signed char>(edi159) < reinterpret_cast<signed char>(0xffff8000)) {
                            edi159 = reinterpret_cast<void**>(0xffff8000);
                        }
                    } else {
                        edi159 = reinterpret_cast<void**>(0x7fff);
                    }
                    __asm__("fld dword [ebp-0x24]");
                    *reinterpret_cast<void***>(esi156) = edi159;
                    __asm__("fmul dword [0x18035098]");
                    __asm__("fstp dword [ebp+0x8]");
                    __asm__("fld dword [ebp+0x8]");
                    __asm__("fistp dword [ebp+0x10]");
                    edi160 = a3;
                    if (reinterpret_cast<signed char>(edi160) < reinterpret_cast<signed char>(0x7fff)) {
                        if (reinterpret_cast<signed char>(edi160) < reinterpret_cast<signed char>(0xffff8000)) {
                            edi160 = reinterpret_cast<void**>(0xffff8000);
                        }
                    } else {
                        edi160 = reinterpret_cast<void**>(0x7fff);
                    }
                    *reinterpret_cast<void***>(esi156 + 2) = edi160;
                    esi156 = esi156 + 4;
                    edi161 = v158 - 1;
                    v158 = edi161;
                } while (edi161);
                return *reinterpret_cast<void***>(&eax157);
            }
        } else {
            if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(esi32 + 8) == 32)) 
                goto addr_0x18022a2f_30;
            esi162 = *reinterpret_cast<void***>(esi32);
            if (a4) {
                eax163 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(eax90) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx60 + 60)));
                v164 = a4;
                do {
                    __asm__("fld dword [edx+ecx]");
                    __asm__("fadd dword [ecx]");
                    esi162 = esi162 + 8;
                    __asm__("fmul dword [0x18034774]");
                    __asm__("fld dword [eax+ecx-0x4]");
                    __asm__("fadd dword [ebx+ecx-0x4]");
                    __asm__("fmul dword [0x18034774]");
                    __asm__("fstp dword [ebp-0x24]");
                    __asm__("fstp dword [esi-0x8]");
                    *reinterpret_cast<void***>(esi162 + 0xfffffffc) = v64;
                    edi165 = v164 - 1;
                    v164 = edi165;
                } while (edi165);
                return *reinterpret_cast<void***>(&eax163);
            }
        }
    }
    addr_0x1802226b_43:
    if (edi126 - 2) 
        goto addr_0x18022a2f_30;
    if (*reinterpret_cast<void***>(esi32 + 8) != 8) 
        goto addr_0x18022280_86;
    edi166 = *reinterpret_cast<void***>(esi32);
    if (a4) {
        v167 = a4;
        do {
            __asm__("fld dword [0x18035098]");
            __asm__("fmul dword [esi+edx]");
            __asm__("fstp dword [ebp-0x24]");
            __asm__("fld dword [ebp-0x24]");
            __asm__("fistp dword [ebp-0x20]");
            ecx168 = reinterpret_cast<void**>(ebp27 + 20);
            fun_1801aba0(ecx168, edi166, ecx168);
            __asm__("fld dword [0x18035098]");
            __asm__("fmul dword [esi+ebx]");
            __asm__("fstp dword [ebp-0x24]");
            __asm__("fld dword [ebp-0x24]");
            __asm__("fistp dword [ebp-0x1c]");
            ecx169 = edi166 + 1;
            fun_1801aba0(ecx169, ecx169, ebp27 + 8);
            __asm__("fld dword [0x18035098]");
            __asm__("fmul dword [esi]");
            __asm__("fstp dword [ebp-0x24]");
            __asm__("fld dword [ebp-0x24]");
            __asm__("fistp dword [ebp-0xc]");
            eax170 = reinterpret_cast<uint32_t>(reinterpret_cast<int32_t>(v79 + 0x8080) >> 8);
            if (reinterpret_cast<int32_t>(eax170) <= reinterpret_cast<int32_t>(0xff)) {
                ecx171 = 0;
                *reinterpret_cast<unsigned char*>(&ecx171) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(eax170) < reinterpret_cast<int32_t>(0)));
                ecx172 = reinterpret_cast<uint32_t>(ecx171 - 1) & eax170;
            } else {
                ecx172 = 0xff;
            }
            *reinterpret_cast<void***>(edi166 + 2) = *reinterpret_cast<void***>(&ecx172);
            __asm__("fld dword [0x18035098]");
            __asm__("fmul dword [esi+eax]");
            __asm__("fstp dword [ebp-0x24]");
            __asm__("fld dword [ebp-0x24]");
            __asm__("fistp dword [ebp-0x8]");
            eax173 = reinterpret_cast<uint32_t>(v174 + 0x8080 >> 8);
            if (reinterpret_cast<int32_t>(eax173) <= reinterpret_cast<int32_t>(0xff)) {
                ecx175 = 0;
                *reinterpret_cast<unsigned char*>(&ecx175) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(eax173) < reinterpret_cast<int32_t>(0)));
                ecx176 = reinterpret_cast<uint32_t>(ecx175 - 1) & eax173;
            } else {
                ecx176 = 0xff;
            }
            *reinterpret_cast<void***>(edi166 + 3) = *reinterpret_cast<void***>(&ecx176);
            edi166 = edi166 + 4;
            eax177 = v167 - 1;
            v167 = eax177;
        } while (eax177);
        return eax177;
    }
    addr_0x18022280_86:
    if (*reinterpret_cast<void***>(esi32 + 8) == 16) {
        edi178 = *reinterpret_cast<void***>(esi32);
        if (a4) {
            v179 = a4;
            do {
                __asm__("fld dword [0x18035098]");
                __asm__("fmul dword [esi+eax]");
                __asm__("fstp dword [ebp-0x8]");
                __asm__("fld dword [ebp-0x8]");
                __asm__("fistp dword [ebp-0xc]");
                fun_18022a50(edi178, ebp27 + 20);
                __asm__("fld dword [0x18035098]");
                __asm__("fmul dword [esi+ebx]");
                __asm__("fstp dword [ebp-0x8]");
                __asm__("fld dword [ebp-0x8]");
                __asm__("fistp dword [ebp-0x1c]");
                fun_18022a50(edi178 + 2, ebp27 + 8);
                __asm__("fld dword [0x18035098]");
                __asm__("fmul dword [esi]");
                __asm__("fstp dword [ebp-0x8]");
                __asm__("fld dword [ebp-0x8]");
                __asm__("fistp dword [ebp-0x20]");
                eax180 = v181;
                if (eax180 < 0x7fff) {
                    if (eax180 < 0xffff8000) {
                        eax180 = 0xffff8000;
                    }
                } else {
                    eax180 = 0x7fff;
                }
                *reinterpret_cast<void***>(edi178 + 4) = *reinterpret_cast<void***>(&eax180);
                __asm__("fld dword [0x18035098]");
                __asm__("fmul dword [esi+eax]");
                __asm__("fstp dword [ebp-0x8]");
                __asm__("fld dword [ebp-0x8]");
                __asm__("fistp dword [ebp-0x24]");
                eax182 = v64;
                if (reinterpret_cast<signed char>(eax182) < reinterpret_cast<signed char>(0x7fff)) {
                    if (reinterpret_cast<signed char>(eax182) < reinterpret_cast<signed char>(0xffff8000)) {
                        eax182 = reinterpret_cast<void**>(0xffff8000);
                    }
                } else {
                    eax182 = reinterpret_cast<void**>(0x7fff);
                }
                *reinterpret_cast<void***>(edi178 + 6) = eax182;
                edi178 = edi178 + 8;
                eax183 = v179 - 1;
                v179 = eax183;
            } while (eax183);
            return eax183;
        }
    } else {
        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(esi32 + 8) == 32)) 
            goto addr_0x18022a2f_30;
        esi184 = *reinterpret_cast<void***>(esi32);
        if (a4) {
            edx185 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx60)) - reinterpret_cast<unsigned char>(eax90));
            ecx186 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx60 + 60)) - reinterpret_cast<unsigned char>(eax90));
            ebx187 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx60 + 20)) - reinterpret_cast<unsigned char>(eax90));
            v188 = a4;
            do {
                eax90 = eax90 + 4;
                *reinterpret_cast<void***>(esi184) = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(edx185) + reinterpret_cast<unsigned char>(eax90));
                *reinterpret_cast<void***>(esi184 + 4) = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(ebx187) + reinterpret_cast<unsigned char>(eax90) + 0xfffffffc);
                *reinterpret_cast<void***>(esi184 + 8) = *reinterpret_cast<void***>(eax90 + 0xfffffffc);
                *reinterpret_cast<void***>(esi184 + 12) = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(ecx186) + reinterpret_cast<unsigned char>(eax90) + 0xfffffffc);
                esi184 = esi184 + 16;
                edi189 = v188 - 1;
                v188 = edi189;
            } while (edi189);
            return eax90;
        }
    }
}

void fun_1801a0b0(void** ecx, void** a2) {
    *reinterpret_cast<void***>(ecx + 4) = a2;
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034c78);
    return;
}

int16_t fun_1801acd0(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** edi6;
    void** esi7;
    void** edi8;
    void** esi9;
    void** eax10;
    void** ecx11;
    void** ecx12;
    void** eax13;
    int1_t zf14;
    void** eax15;
    void** ecx16;
    void** v17;
    void** edx18;

    edi6 = a3;
    esi7 = ecx;
    *reinterpret_cast<void***>(esi7 + 12) = edi6;
    eax10 = fun_1802b2bb(ecx, reinterpret_cast<unsigned char>(edi6) * 4, edi8, esi9, __return_address(), a2, a3, a4, a5);
    ecx11 = *reinterpret_cast<void***>(esi7 + 12);
    *reinterpret_cast<void***>(esi7 + 20) = eax10;
    ecx12 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx11) << 3);
    eax13 = fun_1802b2bb(ecx12, ecx12, reinterpret_cast<unsigned char>(edi6) * 4, edi8, esi9, __return_address(), a2, a3, a4);
    zf14 = *reinterpret_cast<void***>(esi7 + 20) == 0;
    *reinterpret_cast<void***>(esi7 + 24) = eax13;
    if (zf14 || !eax13) {
        return 1;
    } else {
        eax15 = reinterpret_cast<void**>(0);
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(edi6) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(edi6 == 0))) {
            ecx16 = a2;
            do {
                *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi7 + 20) + reinterpret_cast<unsigned char>(eax15) * 4) = *reinterpret_cast<void***>(ecx16 + reinterpret_cast<unsigned char>(eax15) * 4);
                ++eax15;
            } while (reinterpret_cast<signed char>(eax15) < reinterpret_cast<signed char>(edi6));
        }
        v17 = *reinterpret_cast<void***>(esi7 + 12);
        fun_18022aa0(esi7 + 4, v17);
        edx18 = *reinterpret_cast<void***>(esi7);
        *reinterpret_cast<void***>(edx18 + 24)(esi7);
        return 0;
    }
}

void fun_18022b10(void** ecx) {
    *reinterpret_cast<void***>(ecx + 4) = *reinterpret_cast<void***>(ecx);
    return;
}

void** fun_1801b0a0(void** a1, void** a2, void** a3, void** a4) {
    void* ecx5;
    void*** edi6;
    void* ecx7;
    int32_t eax8;
    int32_t v9;
    int32_t edx10;
    int32_t v11;

    ecx5 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a4) << 1);
    if (ecx5) {
        edi6 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(a1) + reinterpret_cast<uint32_t>(ecx5));
        ecx7 = reinterpret_cast<void*>(-reinterpret_cast<uint32_t>(ecx5));
        __asm__("fld dword [0x18034cec]");
        do {
            __asm__("fld dword [esi+ecx*2]");
            __asm__("fmul st0, st1");
            __asm__("fld dword [ebx+ecx*2]");
            __asm__("fmul st0, st2");
            __asm__("fxch st0, st1");
            __asm__("fistp dword [ebp-0x4]");
            __asm__("fistp dword [ebp-0x8]");
            eax8 = v9 + 0x8080;
            if (eax8 < 0 != __intrinsic()) {
                *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi6) + reinterpret_cast<uint32_t>(ecx7)) = 0;
            } else {
                if (eax8 > 0xffff) {
                    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi6) + reinterpret_cast<uint32_t>(ecx7)) = -1;
                } else {
                    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi6) + reinterpret_cast<uint32_t>(ecx7)) = *reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(&eax8) + 1);
                }
            }
            edx10 = v11 + 0x8080;
            if (edx10 < 0 != __intrinsic()) {
                *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi6) + reinterpret_cast<uint32_t>(ecx7) + 1) = 0;
            } else {
                if (edx10 > 0xffff) {
                    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi6) + reinterpret_cast<uint32_t>(ecx7) + 1) = -1;
                } else {
                    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi6) + reinterpret_cast<uint32_t>(ecx7) + 1) = *reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(&edx10) + 1);
                }
            }
            ecx7 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx7) + 2);
        } while (ecx7);
        __asm__("fstp st0");
    }
    return *reinterpret_cast<void***>(&eax8);
}

void** fun_1801afc0(void** a1, void** a2, void** a3, void** a4, void** a5) {
    void** v6;
    void** v7;
    void* ecx8;
    void*** edi9;
    void* ecx10;
    void** eax11;
    void** v12;
    int32_t edx13;
    int32_t v14;

    v6 = reinterpret_cast<void**>(0);
    v7 = reinterpret_cast<void**>(0);
    ecx8 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a4) << 2);
    if (ecx8) {
        edi9 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(a1) + reinterpret_cast<uint32_t>(ecx8));
        ecx10 = reinterpret_cast<void*>(-reinterpret_cast<uint32_t>(ecx8));
        __asm__("fld dword [0x18034cec]");
        do {
            __asm__("fld dword [esi+ecx]");
            __asm__("fmul st0, st1");
            __asm__("fld dword [ebx+ecx]");
            __asm__("fmul st0, st2");
            __asm__("fxch st0, st1");
            __asm__("fistp dword [ebp-0xc]");
            __asm__("fistp dword [ebp-0x10]");
            eax11 = v12;
            edx13 = v14;
            if (reinterpret_cast<signed char>(eax11) > reinterpret_cast<signed char>(0x7fff)) {
                *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi9) + reinterpret_cast<uint32_t>(ecx10)) = 0x7fff;
                ++v6;
            } else {
                if (reinterpret_cast<signed char>(eax11) < reinterpret_cast<signed char>(0xffff8000)) {
                    *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi9) + reinterpret_cast<uint32_t>(ecx10)) = 0x8000;
                    ++v6;
                } else {
                    *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(edi9) + reinterpret_cast<uint32_t>(ecx10)) = eax11;
                }
            }
            if (edx13 > 0x7fff) {
                *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi9) + reinterpret_cast<uint32_t>(ecx10) + 2) = 0x7fff;
                ++v7;
            } else {
                if (edx13 < 0xffff8000) {
                    *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi9) + reinterpret_cast<uint32_t>(ecx10) + 2) = 0x8000;
                    ++v7;
                } else {
                    *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi9) + reinterpret_cast<uint32_t>(ecx10) + 2) = *reinterpret_cast<int16_t*>(&edx13);
                }
            }
            ecx10 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx10) + 4);
        } while (ecx10);
        __asm__("fstp st0");
    }
    if (a5) {
        *reinterpret_cast<void***>(a5) = v6;
        eax11 = v7;
        *reinterpret_cast<void***>(a5 + 4) = eax11;
    }
    return eax11;
}

void** fun_1801b230(void** a1, void** a2, void** a3, void** a4) {
    void** v5;
    void* ecx6;
    void** eax7;
    void*** edi8;
    void* ecx9;
    void** v10;

    v5 = reinterpret_cast<void**>(0);
    ecx6 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a3) << 1);
    if (!ecx6) {
        addr_0x1801b29b_2:
        if (a4) {
            eax7 = a4;
            *reinterpret_cast<void***>(eax7) = v5;
        }
    } else {
        edi8 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(a1) + reinterpret_cast<uint32_t>(ecx6));
        ecx9 = reinterpret_cast<void*>(-reinterpret_cast<uint32_t>(ecx6));
        while (1) {
            __asm__("fld dword [esi+ecx*2]");
            __asm__("fmul dword [0x18034cec]");
            __asm__("fistp dword [ebp-0x8]");
            eax7 = v10;
            if (reinterpret_cast<signed char>(eax7) > reinterpret_cast<signed char>(0x7fff)) {
                *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi8) + reinterpret_cast<uint32_t>(ecx9)) = 0x7fff;
                ++v5;
                ecx9 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx9) + 2);
                if (!ecx9) 
                    goto addr_0x1801b28b_7;
            } else {
                if (reinterpret_cast<signed char>(eax7) < reinterpret_cast<signed char>(0xffff8000)) {
                    *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi8) + reinterpret_cast<uint32_t>(ecx9)) = 0x8000;
                    ++v5;
                    ecx9 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx9) + 2);
                    if (!ecx9) 
                        goto addr_0x1801b29b_2;
                } else {
                    *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(edi8) + reinterpret_cast<uint32_t>(ecx9)) = eax7;
                    ecx9 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx9) + 2);
                    if (!ecx9) 
                        goto addr_0x1801b27b_11;
                }
            }
        }
    }
    return eax7;
    addr_0x1801b28b_7:
    goto addr_0x1801b29b_2;
    addr_0x1801b27b_11:
    goto addr_0x1801b29b_2;
}

void** fun_18019ee0(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39) {
    void** ax40;

    ax40 = fun_1801a210(a2, a1, a3, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39);
    return ax40;
}

void** fun_1801b2c0(int32_t ecx, void** a2, void** a3, void** a4) {
    int32_t v5;
    int32_t eax6;
    void* edi7;
    void* ecx8;

    v5 = ecx;
    if (!a4) {
        addr_0x1801b313_2:
        return *reinterpret_cast<void***>(&eax6);
    } else {
        edi7 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a2) + reinterpret_cast<unsigned char>(a4));
        ecx8 = reinterpret_cast<void*>(-reinterpret_cast<unsigned char>(a4));
        while (1) {
            __asm__("fld dword [esi+ecx*4]");
            __asm__("fmul dword [0x18034cec]");
            __asm__("fistp dword [ebp-0x4]");
            eax6 = v5 + 0x8000;
            if (eax6 < 0 != __intrinsic()) {
                *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi7) + reinterpret_cast<uint32_t>(ecx8)) = 0;
                ecx8 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx8) + 1);
                if (!ecx8) 
                    break;
            } else {
                if (eax6 > 0xffff) {
                    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi7) + reinterpret_cast<uint32_t>(ecx8)) = -1;
                    ecx8 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx8) + 1);
                    if (!ecx8) 
                        goto addr_0x1801b308_8;
                } else {
                    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi7) + reinterpret_cast<uint32_t>(ecx8)) = *reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(&eax6) + 1);
                    ecx8 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx8) + 1);
                    if (!ecx8) 
                        goto addr_0x1801b2ff_10;
                }
            }
        }
    }
    goto addr_0x1801b313_2;
    addr_0x1801b308_8:
    goto addr_0x1801b313_2;
    addr_0x1801b2ff_10:
    goto addr_0x1801b313_2;
}

int16_t fun_1801b3e0(int16_t* a1, signed char* a2, void* a3, uint32_t a4, uint32_t* a5, uint32_t* a6, uint32_t a7, signed char a8) {
    uint32_t eax9;
    uint32_t v10;
    uint32_t v11;
    signed char* v12;
    int16_t* esi13;
    signed char* edi14;
    uint32_t ebx15;
    uint32_t ecx16;
    void* ecx17;
    int32_t ecx18;
    uint32_t eax19;
    int32_t eax20;
    uint32_t eax21;
    int32_t eax22;

    eax9 = *a6;
    v10 = *a5;
    v11 = eax9;
    v12 = a2 + a4 * 2;
    esi13 = a1;
    edi14 = a2;
    ebx15 = v10;
    ecx16 = ebx15;
    while ((ecx17 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(ecx16) >> 16), reinterpret_cast<int32_t>(edi14) < reinterpret_cast<int32_t>(v12)) && reinterpret_cast<int32_t>(ecx17) < reinterpret_cast<int32_t>(a3)) {
        ecx18 = static_cast<int32_t>(*(esi13 + static_cast<int32_t>(ecx17) - 1));
        eax19 = (esi13[static_cast<int32_t>(ecx17)] - ecx18) * (ebx15 & 0xffff);
        ebx15 = ebx15 + v11;
        v11 = v11 + a7;
        eax20 = (reinterpret_cast<int32_t>(eax19) >> 16) + ecx18;
        ecx16 = ebx15;
        *edi14 = *reinterpret_cast<signed char*>(&eax20);
        edi14 = edi14 + 2;
    }
    if (!a8) {
        eax21 = a4;
        return *reinterpret_cast<int16_t*>(&eax21);
    } else {
        *a5 = ebx15;
        *a6 = v11;
        eax22 = reinterpret_cast<int32_t>(reinterpret_cast<uint32_t>(edi14) - reinterpret_cast<uint32_t>(a2)) >> 1;
        return *reinterpret_cast<int16_t*>(&eax22);
    }
}

int16_t fun_1801b540(int16_t* a1, signed char* a2, void* a3, uint32_t a4, uint32_t* a5, uint32_t* a6, uint32_t a7, signed char a8) {
    uint32_t* ebx9;
    uint32_t edx10;
    uint32_t eax11;
    uint32_t v12;
    uint32_t v13;
    signed char* edi14;
    void* ecx15;
    signed char* edx16;
    void* v17;
    uint32_t eax18;
    int32_t eax19;

    ebx9 = a5;
    edx10 = *a6;
    eax11 = *ebx9;
    v12 = edx10;
    v13 = eax11;
    __asm__("fnstcw word [ebp+0x1a]");
    __asm__("fldcw word [ebp-0x2]");
    __asm__("fild dword [ebp+0x20]");
    __asm__("fild dword [ebp-0xc]");
    __asm__("fild dword [ebp-0x8]");
    __asm__("fld dword [0x18034cf0]");
    __asm__("fmul st1, st0");
    __asm__("fmul st2, st0");
    __asm__("fmulp st3, st0");
    edi14 = a2;
    ecx15 = a3;
    edx16 = a2 + a4 * 4;
    while (reinterpret_cast<int32_t>(edi14) < reinterpret_cast<int32_t>(edx16) && reinterpret_cast<int32_t>(v17) < reinterpret_cast<int32_t>(ecx15)) {
        __asm__("fld dword [esi+eax*4-0x4]");
        __asm__("fld dword [esi+eax*4]");
        __asm__("fsub st0, st1");
        __asm__("fild dword [ebp-0x10]");
        __asm__("fsubr st0, st3");
        __asm__("fmulp st1, st0");
        __asm__("fxch st0, st3");
        __asm__("fadd st2, st0");
        __asm__("fadd st0, st4");
        __asm__("fxch st0, st3");
        __asm__("faddp st1, st0");
        __asm__("fstp dword [edi]");
        edi14 = edi14 + 4;
    }
    __asm__("fld dword [0x18034cf4]");
    __asm__("fmul st1, st0");
    __asm__("fmulp st2, st0");
    __asm__("fistp dword [ebp-0x8]");
    __asm__("fistp dword [ebp-0xc]");
    __asm__("fstp st0");
    __asm__("fldcw word [ebp+0x1a]");
    if (!a8) {
        eax18 = a4;
        return *reinterpret_cast<int16_t*>(&eax18);
    } else {
        *ebx9 = v13;
        eax19 = reinterpret_cast<int32_t>(reinterpret_cast<uint32_t>(edi14) - reinterpret_cast<uint32_t>(a2)) >> 2;
        *a6 = v12;
        return *reinterpret_cast<int16_t*>(&eax19);
    }
}

int16_t fun_1801b6e0(signed char* a1, signed char* a2, int32_t a3, int32_t a4, int32_t* a5, int32_t* a6, int32_t a7, signed char a8) {
    int32_t eax9;
    int32_t v10;
    int32_t v11;
    signed char* v12;
    signed char* esi13;
    signed char* edi14;
    int32_t ebx15;
    int32_t ecx16;
    int32_t eax17;
    int32_t eax18;

    eax9 = *a6;
    v10 = *a5;
    v11 = eax9;
    v12 = a2 + a4 * 2;
    esi13 = a1;
    edi14 = a2;
    ebx15 = v10;
    while ((ecx16 = ebx15 >> 16, ecx16 < a3) && reinterpret_cast<int32_t>(edi14) < reinterpret_cast<int32_t>(v12)) {
        *edi14 = esi13[ecx16 * 2];
        ebx15 = ebx15 + v11;
        edi14 = edi14 + 2;
        v11 = v11 + a7;
    }
    if (!a8) {
        eax17 = a4;
        return *reinterpret_cast<int16_t*>(&eax17);
    } else {
        *a5 = ebx15;
        *a6 = v11;
        eax18 = reinterpret_cast<int32_t>(edi14) - reinterpret_cast<int32_t>(a2) >> 1;
        return *reinterpret_cast<int16_t*>(&eax18);
    }
}

int16_t fun_1801b800(signed char* a1, signed char* a2, int32_t a3, int32_t a4, int32_t* a5, int32_t* a6, int32_t a7, signed char a8) {
    int32_t eax9;
    int32_t v10;
    int32_t v11;
    signed char* v12;
    signed char* esi13;
    signed char* edi14;
    int32_t ebx15;
    int32_t ecx16;
    int32_t eax17;
    int32_t eax18;

    eax9 = *a6;
    v10 = *a5;
    v11 = eax9;
    v12 = a2 + a4 * 4;
    esi13 = a1;
    edi14 = a2;
    ebx15 = v10;
    while ((ecx16 = ebx15 >> 16, ecx16 < a3) && reinterpret_cast<int32_t>(edi14) < reinterpret_cast<int32_t>(v12)) {
        *edi14 = esi13[ecx16 * 4];
        ebx15 = ebx15 + v11;
        edi14 = edi14 + 4;
        v11 = v11 + a7;
    }
    if (!a8) {
        eax17 = a4;
        return *reinterpret_cast<int16_t*>(&eax17);
    } else {
        *a5 = ebx15;
        *a6 = v11;
        eax18 = reinterpret_cast<int32_t>(edi14) - reinterpret_cast<int32_t>(a2) >> 2;
        return *reinterpret_cast<int16_t*>(&eax18);
    }
}

struct s263 {
    int32_t f0;
    int32_t f4;
    signed char[12] pad20;
    int32_t f20;
    void** f24;
    signed char[3] pad28;
    int32_t f28;
    int32_t f32;
    int32_t f36;
};

struct s264 {
    int32_t f0;
    int32_t f4;
};

struct s265 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

struct s266 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

void fun_180191c0(struct s263* ecx, int32_t a2, struct s264* a3, void** a4) {
    struct s265* ecx5;
    struct s266* edx6;

    ecx5 = reinterpret_cast<struct s265*>(&a3->f4);
    ecx->f0 = a3->f0;
    edx6 = reinterpret_cast<struct s266*>(&ecx->f4);
    edx6->f0 = ecx5->f0;
    edx6->f4 = ecx5->f4;
    edx6->f8 = ecx5->f8;
    edx6->f12 = ecx5->f12;
    ecx->f24 = a4;
    ecx->f20 = a2;
    ecx->f28 = 0;
    ecx->f32 = 0;
    ecx->f36 = 0;
    return;
}

unsigned char fun_18022af0(void** ecx) {
    void** eax2;

    eax2 = *reinterpret_cast<void***>(ecx + 4);
    return static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax2) >= reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx))));
}

void fun_1801cce0(void** ecx) {
    void** esi2;

    fun_18022b10(ecx + 4);
    esi2 = ecx + 24;
    *reinterpret_cast<void***>(esi2) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi2 + 4) = reinterpret_cast<void**>(0);
    return;
}

struct s267 {
    int32_t f0;
    int32_t f4;
};

void fun_1801cea0(void** ecx) {
    void** esi2;
    void** eax3;
    void* ecx4;
    struct s267* edi5;

    esi2 = ecx;
    fun_18022b10(esi2 + 4);
    eax3 = reinterpret_cast<void**>(0);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi2 + 16)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(esi2 + 16) == 0))) {
        ecx4 = reinterpret_cast<void*>(0);
        do {
            ++eax3;
            edi5 = reinterpret_cast<struct s267*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi2 + 20)) + reinterpret_cast<uint32_t>(ecx4) + 16);
            ecx4 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx4) + 24);
            edi5->f0 = 0;
            edi5->f4 = 0;
        } while (reinterpret_cast<signed char>(eax3) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi2 + 16)));
    }
    return;
}

void fun_18019170(void** ecx) {
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034c48);
    return;
}

int16_t fun_1801dfa0(void** ecx, void** a2, void** a3) {
    void** v4;
    void** ebx5;
    void** v6;
    void** esi7;
    void** esi8;
    void** v9;
    void** edi10;
    void** v11;
    void** v12;
    void** v13;
    void** v14;
    void** eax15;
    void** edi16;
    void** ecx17;
    void** v18;
    void** v19;
    void** v20;
    void** eax21;
    void** edx22;
    void** v23;
    void** ecx24;
    void** v25;
    void** v26;
    void** ebx27;
    void*** edi28;
    uint32_t ecx29;
    uint32_t edx30;
    void** v31;
    uint32_t ecx32;
    void** edx33;
    uint32_t ecx34;
    void* ebx35;
    void** ecx36;
    void** esi37;
    void** v38;
    void** v39;
    void** v40;
    void** eax41;
    void** v42;
    void** eax43;
    void** edx44;
    void* esi45;
    void** edi46;
    uint32_t ecx47;
    void** esi48;
    uint32_t ecx49;
    void*** edi50;
    void* ecx51;
    void* eax52;
    uint32_t ecx53;
    void** eax54;
    uint32_t ecx55;
    void** esi56;
    signed char* edi57;
    uint32_t ecx58;
    uint32_t edx59;
    uint32_t ecx60;
    uint32_t ecx61;
    void** esi62;
    void** v63;
    void** edx64;

    v4 = ebx5;
    v6 = esi7;
    esi8 = a3;
    v9 = edi10;
    v11 = ecx;
    *reinterpret_cast<void***>(ecx + 12) = esi8;
    eax15 = fun_1802b2bb(ecx, reinterpret_cast<unsigned char>(esi8) * 4, v9, v6, v4, v12, v13, v11, v14);
    *reinterpret_cast<void***>(ecx + 52) = eax15;
    if (!eax15) {
        return 1;
    }
    edi16 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esi8 + 15) & 0xfffffff0);
    *reinterpret_cast<void***>(ecx + 36) = edi16;
    ecx17 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi16) + reinterpret_cast<unsigned char>(edi16));
    eax21 = fun_1802b2bb(ecx17, ecx17, v9, v6, v4, v18, v19, v11, v20);
    edx22 = eax21;
    v23 = edx22;
    *reinterpret_cast<void***>(ecx + 20) = edx22;
    if (edx22) {
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(esi8) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(esi8 == 0))) {
            ecx24 = edx22;
            v25 = esi8;
            do {
                __asm__("fld dword [eax]");
                __asm__("fmul dword [0x18034548]");
                __asm__("fstp dword [ebp+0x8]");
                __asm__("fld dword [ebp+0x8]");
                __asm__("fistp dword [ebp-0x8]");
                *reinterpret_cast<void***>(ecx24) = v26;
                ecx24 = ecx24 + 2;
                ebx27 = v25 - 1;
                v25 = ebx27;
            } while (ebx27);
        }
        edi28 = reinterpret_cast<void***>(edx22 + reinterpret_cast<unsigned char>(esi8) * 2);
        ecx29 = reinterpret_cast<unsigned char>(edi16) - reinterpret_cast<unsigned char>(esi8) << 1;
        edx30 = ecx29;
        v31 = reinterpret_cast<void**>(1);
        ecx32 = ecx29 >> 2;
        while (ecx32) {
            --ecx32;
            *edi28 = reinterpret_cast<void**>(0);
            edi28 = edi28 + 4;
            esi8 = esi8 + 4;
        }
        edx33 = v11;
        ecx34 = edx30 & 3;
        ebx35 = reinterpret_cast<void*>(2);
        while (ecx34) {
            --ecx34;
            *edi28 = reinterpret_cast<void**>(0);
            ++edi28;
            ++esi8;
        }
        ecx36 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi8) + reinterpret_cast<unsigned char>(esi8) + 2);
        esi37 = edx33 + 24;
        v38 = esi8 + 16;
        v39 = ecx36;
        v40 = esi37;
        while (eax41 = v38, *reinterpret_cast<unsigned char*>(&eax41) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax41) & 0xf0), v42 = eax41, *reinterpret_cast<void***>(esi37 + 16) = eax41, eax43 = fun_1802b2bb(ecx36, reinterpret_cast<unsigned char>(eax41) + reinterpret_cast<unsigned char>(eax41), v9, v6, v4, v42, v23, v11, v31), edx44 = eax43, *reinterpret_cast<void***>(esi37) = edx44, !!edx44) {
            esi45 = ebx35;
            edi46 = edx44;
            ecx47 = reinterpret_cast<uint32_t>(ebx35) >> 2;
            while (ecx47) {
                --ecx47;
                *reinterpret_cast<void***>(edi46) = reinterpret_cast<void**>(0);
                edi46 = edi46 + 4;
                esi45 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esi45) + 4);
            }
            esi48 = v23;
            ecx49 = reinterpret_cast<uint32_t>(esi45) & 3;
            while (ecx49) {
                --ecx49;
                *reinterpret_cast<void***>(edi46) = reinterpret_cast<void**>(0);
                ++edi46;
                ++esi48;
            }
            edi50 = reinterpret_cast<void***>(reinterpret_cast<uint32_t>(ebx35) + reinterpret_cast<unsigned char>(edx44));
            ecx51 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(a3));
            ebx35 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebx35) + 2);
            eax52 = ecx51;
            ecx53 = reinterpret_cast<uint32_t>(ecx51) >> 2;
            while (ecx53) {
                --ecx53;
                *edi50 = *reinterpret_cast<void***>(esi48);
                edi50 = edi50 + 4;
                esi48 = esi48 + 4;
            }
            eax54 = a3;
            ecx55 = reinterpret_cast<uint32_t>(eax52) & 3;
            while (ecx55) {
                --ecx55;
                *edi50 = *reinterpret_cast<void***>(esi48);
                ++edi50;
                ++esi48;
            }
            esi56 = v31;
            edi57 = reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(v39) + reinterpret_cast<unsigned char>(edx44));
            ecx58 = reinterpret_cast<unsigned char>(v42) - reinterpret_cast<unsigned char>(esi56) - reinterpret_cast<unsigned char>(eax54) << 1;
            edx59 = ecx58;
            ecx60 = ecx58 >> 2;
            while (ecx60) {
                --ecx60;
                *edi57 = reinterpret_cast<signed char>(0);
                edi57 = edi57 + 4;
                esi56 = esi56 + 4;
            }
            ecx61 = edx59 & 3;
            esi62 = esi56 + 1;
            while (ecx61) {
                --ecx61;
                *edi57 = 0;
                ++edi57;
                ++esi62;
            }
            v31 = esi62;
            ecx36 = v39 + 2;
            v40 = v40 + 4;
            ++v38;
            v39 = ecx36;
            if (reinterpret_cast<int32_t>(ebx35) >= reinterpret_cast<int32_t>(8)) 
                goto addr_0x1801e117_34;
            esi37 = v40;
        }
        goto addr_0x1801dffa_36;
    } else {
        addr_0x1801dffa_36:
        return 1;
    }
    addr_0x1801e117_34:
    v63 = *reinterpret_cast<void***>(v11 + 12);
    fun_18022aa0(v11 + 4, v63);
    edx64 = *reinterpret_cast<void***>(v11);
    *reinterpret_cast<void***>(edx64 + 24)(v11);
    return 0;
}

void** fun_1801e410(void** a1, void** a2, void** a3, void** a4) {
    void** esi5;
    void** ebx6;
    void** edi7;
    uint32_t ecx8;
    void* ecx9;
    int32_t ecx10;
    uint32_t ecx11;
    void* ecx12;
    void*** esi13;
    void*** ebx14;
    void*** edi15;
    void* ecx16;
    void** ax17;
    uint16_t dx18;

    esi5 = a2;
    ebx6 = a3;
    edi7 = a1;
    ecx8 = reinterpret_cast<uint32_t>(reinterpret_cast<signed char>(a4) >> 3);
    if (ecx8) {
        ecx9 = reinterpret_cast<void*>(ecx8 << 4);
        __asm__("movq mm6, [0x180438c8]");
        __asm__("movq mm7, [0x180438d0]");
        esi5 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi5) + reinterpret_cast<uint32_t>(ecx9));
        ebx6 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx6) + reinterpret_cast<uint32_t>(ecx9));
        edi7 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi7) + reinterpret_cast<uint32_t>(ecx9));
        ecx10 = reinterpret_cast<int32_t>(-reinterpret_cast<uint32_t>(ecx9));
        do {
            __asm__("movq mm0, [esi+ecx]");
            __asm__("movq mm1, [esi+ecx+0x8]");
            __asm__("paddsw mm0, mm7");
            __asm__("movq mm2, [ebx+ecx]");
            __asm__("paddsw mm1, mm7");
            __asm__("movq mm3, [ebx+ecx+0x8]");
            __asm__("paddsw mm2, mm7");
            __asm__("psraw mm0, 0x8");
            __asm__("paddsw mm3, mm7");
            __asm__("psraw mm1, 0x8");
            __asm__("psraw mm2, 0x8");
            __asm__("psraw mm3, 0x8");
            __asm__("packsswb mm0, mm1");
            __asm__("packsswb mm2, mm3");
            __asm__("movq mm1, mm0");
            __asm__("punpcklbw mm0, mm2");
            __asm__("punpckhbw mm1, mm2");
            __asm__("pxor mm0, mm6");
            __asm__("movq [edi+ecx], mm0");
            __asm__("pxor mm1, mm6");
            __asm__("movq [edi+ecx+0x8], mm1");
            ecx10 = ecx10 + 16;
        } while (ecx10);
        __asm__("emms ");
    }
    ecx11 = reinterpret_cast<unsigned char>(a4) & 7;
    if (ecx11) {
        ecx12 = reinterpret_cast<void*>(ecx11 << 1);
        esi13 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(esi5) + reinterpret_cast<uint32_t>(ecx12));
        ebx14 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(ebx6) + reinterpret_cast<uint32_t>(ecx12));
        edi15 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(edi7) + reinterpret_cast<uint32_t>(ecx12));
        ecx16 = reinterpret_cast<void*>(-reinterpret_cast<uint32_t>(ecx12));
        do {
            ax17 = reinterpret_cast<void**>(*reinterpret_cast<uint16_t*>(reinterpret_cast<uint32_t>(esi13) + reinterpret_cast<uint32_t>(ecx16)) ^ 0x8000);
            dx18 = reinterpret_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reinterpret_cast<uint32_t>(ebx14) + reinterpret_cast<uint32_t>(ecx16)) ^ 0x8000);
            *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi15) + reinterpret_cast<uint32_t>(ecx16)) = *reinterpret_cast<signed char*>(&ax17 + 1);
            *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi15) + reinterpret_cast<uint32_t>(ecx16) + 1) = *reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(&dx18) + 1);
            ecx16 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx16) + 2);
        } while (ecx16);
    }
    return ax17;
}

void** fun_18019ba0(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26) {
    void** v27;
    void** v28;
    void** ebx29;
    void** v30;
    void** esi31;
    void** v32;
    void** edi33;
    void** edi34;
    void** edx35;
    void*** esp36;
    void** v37;
    struct s77* eax38;
    void** v39;
    void** esi40;
    void** v41;
    void** v42;
    void** ebx43;
    void** ecx44;
    void** v45;
    void*** esp46;
    void** v47;
    void** ebp48;
    void** ebp49;
    void** v50;
    void** eax51;
    void*** esp52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** ax64;
    void** v65;
    void** ax66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** v74;
    void** v75;
    void** v76;
    void** ax77;

    v27 = reinterpret_cast<void**>(__return_address());
    v28 = ebx29;
    v30 = esi31;
    v32 = edi33;
    edi34 = a2;
    if (!reinterpret_cast<int1_t>(edi34 == 2)) {
        if (!reinterpret_cast<int1_t>(edi34 == 4)) {
            if (!reinterpret_cast<int1_t>(edi34 == 1)) {
                edx35 = *reinterpret_cast<void***>(a3);
                esp36 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 40 - 4 - 4 - 4 - 4);
                v37 = *reinterpret_cast<void***>(a3 + 8);
                eax38 = reinterpret_cast<struct s77*>(esp36 + 16);
                v39 = edx35;
                *reinterpret_cast<void***>(&eax38) = fun_18017200(eax38, 1, v37);
                esi40 = reinterpret_cast<void**>(0);
                v41 = eax38->f0;
                v42 = eax38->f4;
                ebx43 = eax38->f8;
                ecx44 = eax38->f12;
                v45 = ecx44;
                if (reinterpret_cast<signed char>(edi34) > reinterpret_cast<signed char>(0)) {
                    esp46 = esp36 - 4 - 4 - 4 + 12 + 4 - 4;
                    v47 = ebp48;
                    ebp49 = a1;
                    v50 = reinterpret_cast<void**>(0);
                    while (1) {
                        if (reinterpret_cast<signed char>(ecx44) < reinterpret_cast<signed char>(0)) {
                            eax51 = v50;
                        } else {
                            eax51 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi40) << *reinterpret_cast<unsigned char*>(&ecx44));
                        }
                        esp52 = esp46 - 4;
                        *reinterpret_cast<void***>(&eax38) = fun_18021ba0(ebp49, esp52 + 20, edi34, a4, v47, v32, v30, v28, reinterpret_cast<unsigned char>(eax51) + reinterpret_cast<unsigned char>(v39), v41, v42, ebx43, ecx44, v39, v41, v42, v53, v45, v27, a1);
                        esp46 = esp52 - 4 - 4 - 4 - 4 + 16 + 4;
                        ++esi40;
                        ebp49 = ebp49 + 20;
                        v50 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v50) + reinterpret_cast<unsigned char>(ebx43));
                        if (reinterpret_cast<signed char>(esi40) >= reinterpret_cast<signed char>(edi34)) 
                            break;
                        ecx44 = v45;
                    }
                }
                return *reinterpret_cast<void***>(&eax38);
            } else {
                ax64 = fun_1801a210(a3, a1, a4, v32, v30, v28, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v27, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
                return ax64;
            }
        } else {
            ax66 = fun_180218a0(a1, a1 + 20, a1 + 40, a1 + 60, a3, a4, v32, v30, v28, v65);
            return ax66;
        }
    } else {
        ax77 = fun_180216c0(a1, a1 + 20, a3, a4, v32, v30, v28, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v27, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
        return ax77;
    }
}

struct s268 {
    int16_t* f0;
    void** f4;
    signed char[3] pad8;
    int32_t f8;
};

int16_t fun_1801b490(int16_t* a1, signed char* a2, void* a3, uint32_t a4, uint32_t* a5, uint32_t* a6, uint32_t a7, signed char a8);

int16_t fun_1801b320(int32_t ecx, struct s268* a2, signed char** a3, void* a4, uint32_t a5, uint32_t* a6, uint32_t* a7, uint32_t a8, int32_t a9) {
    int32_t v10;
    signed char* edx11;
    int16_t* eax12;
    int16_t ax13;
    int32_t v14;
    signed char* edx15;
    int16_t* eax16;
    int16_t ax17;
    int32_t v18;
    signed char* edx19;
    int16_t* eax20;
    int16_t ax21;

    if (a5) {
        if (a2->f4 == 1) {
            if (a2->f8 == 8) {
                v10 = a9;
                edx11 = *a3;
                eax12 = a2->f0;
                ax13 = fun_1801b490(eax12, edx11, a4, a5, a6, a7, a8, *reinterpret_cast<signed char*>(&v10));
                return ax13;
            } else {
                if (a2->f8 == 16) {
                    v14 = a9;
                    edx15 = *a3;
                    eax16 = a2->f0;
                    ax17 = fun_1801b3e0(eax16, edx15, a4, a5, a6, a7, a8, *reinterpret_cast<signed char*>(&v14));
                    return ax17;
                } else {
                    if (a2->f8 == 32) {
                        v18 = a9;
                        edx19 = *a3;
                        eax20 = a2->f0;
                        ax21 = fun_1801b540(eax20, edx19, a4, a5, a6, a7, a8, *reinterpret_cast<signed char*>(&v18));
                        return ax21;
                    } else {
                        return 0;
                    }
                }
            }
        } else {
            return 0;
        }
    } else {
        return 0;
    }
}

void** g18043444 = reinterpret_cast<void**>(16);

void** g18043448 = reinterpret_cast<void**>(2);

void** g18043440 = reinterpret_cast<void**>(1);

void** g1804344c = reinterpret_cast<void**>(1);

void** fun_1801fbc0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26) {
    void** ebx27;
    void** ecx28;
    void** ebp29;
    void** eax30;
    void** ecx31;
    void** eax32;
    void** eax33;
    void** ebp34;
    void** ecx35;
    void** edx36;
    void** eax37;
    void** eax38;
    void*** esp39;
    void** edi40;
    void** esi41;
    void** ebp42;
    void** ebx43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** ax49;
    void* esp50;
    void** edx51;
    void** esi52;
    void* eax53;
    void** v54;
    void* eax55;
    void** ecx56;
    void** edx57;
    void** ebx58;
    void** eax59;
    void** ecx60;
    void* edi61;
    void** ecx62;
    void** edx63;
    void** v64;
    void** eax65;
    void** v66;
    void** ecx67;
    void** ecx68;
    void** eax69;

    ebx27 = a3;
    ecx28 = *reinterpret_cast<void***>(ecx + 8);
    ebp29 = *reinterpret_cast<void***>(ecx);
    eax30 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ecx28) - reinterpret_cast<unsigned char>(ebp29)) >> 1);
    if (reinterpret_cast<signed char>(ebx27) > reinterpret_cast<signed char>(eax30)) {
        ecx31 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(eax30));
        eax32 = *reinterpret_cast<void***>(ecx + 4);
        a3 = ecx31;
        eax33 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax32) - (reinterpret_cast<unsigned char>(ecx31) + reinterpret_cast<unsigned char>(ecx31)));
        if (reinterpret_cast<signed char>(a4) > reinterpret_cast<signed char>(ecx31)) {
        }
        ebp34 = a4;
    } else {
        ebp34 = a4;
        eax33 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx28) - (reinterpret_cast<unsigned char>(ebx27) + reinterpret_cast<unsigned char>(ebx27)));
    }
    ecx35 = g18043444;
    edx36 = g18043448;
    eax37 = g18043440;
    eax38 = g1804344c;
    esp39 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 40 - 4 - 4 - 4 - 4 - 4 - 4);
    ax49 = fun_1801a210(esp39 + 24, a2, ebp34, edi40, esi41, ebp42, ebx43, eax33, eax37, ecx35, edx36, eax38, v44, v45, v46, v47, v48, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
    esp50 = reinterpret_cast<void*>(esp39 - 4 + 8 + 4);
    if (reinterpret_cast<signed char>(ebp34) < reinterpret_cast<signed char>(a4)) {
        edx51 = *reinterpret_cast<void***>(ecx + 8);
        esi52 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a4) - reinterpret_cast<unsigned char>(ebp34));
        eax53 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(edx51) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx)));
        v54 = esi52;
        eax55 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(eax53) >> 1);
        if (reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(ebp34)) > reinterpret_cast<int32_t>(eax55)) {
            ecx56 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(ebp34) - reinterpret_cast<uint32_t>(eax55));
            a3 = ecx56;
            edx57 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 4)) - (reinterpret_cast<unsigned char>(ecx56) + reinterpret_cast<unsigned char>(ecx56)));
            if (reinterpret_cast<signed char>(esi52) > reinterpret_cast<signed char>(ecx56)) {
            }
            esi52 = v54;
        } else {
            edx57 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx51) - (reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(ebp34) + (reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(ebp34))));
        }
        ebx58 = *reinterpret_cast<void***>(a2);
        eax59 = a2 + 4;
        ecx60 = *reinterpret_cast<void***>(eax59 + 12);
        if (reinterpret_cast<signed char>(ecx60) < reinterpret_cast<signed char>(0)) {
            edi61 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax59 + 8)) * reinterpret_cast<unsigned char>(ebp34));
        } else {
            edi61 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ebp34) << *reinterpret_cast<unsigned char*>(&ecx60));
        }
        ecx62 = *reinterpret_cast<void***>(eax59);
        edx63 = g18043444;
        v64 = *reinterpret_cast<void***>(eax59 + 4);
        eax65 = *reinterpret_cast<void***>(eax59 + 12);
        v66 = *reinterpret_cast<void***>(eax59 + 8);
        ecx67 = g18043440;
        ecx68 = g1804344c;
        eax69 = g18043448;
        ax49 = fun_1801a210(reinterpret_cast<int32_t>(esp50) - 4 - 4 + 44, reinterpret_cast<int32_t>(esp50) + 16, esi52, edi40, esi41, ebp42, ebx43, reinterpret_cast<unsigned char>(ebx58) + reinterpret_cast<uint32_t>(edi61), ecx62, v64, v66, eax65, edx57, ecx67, edx63, eax69, ecx68, __return_address(), a2, a3, v54, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
    }
    return ax49;
}

void fun_1801ff30(void** ecx) {
    void** esi2;

    fun_18022b10(ecx + 4);
    esi2 = ecx + 20;
    *reinterpret_cast<void***>(esi2) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi2 + 4) = reinterpret_cast<void**>(0);
    return;
}

struct s269 {
    int32_t f0;
    int32_t f4;
};

void fun_18020450(void** ecx) {
    void** esi2;
    void** eax3;
    void* ecx4;
    struct s269* edi5;

    esi2 = ecx;
    fun_18022b10(esi2 + 4);
    eax3 = reinterpret_cast<void**>(0);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi2 + 12)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(esi2 + 12) == 0))) {
        ecx4 = reinterpret_cast<void*>(0);
        do {
            edi5 = reinterpret_cast<struct s269*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi2 + 16)) + reinterpret_cast<uint32_t>(ecx4));
            ++eax3;
            ecx4 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx4) + 52);
            edi5->f0 = 0;
            edi5->f4 = 0;
        } while (reinterpret_cast<signed char>(eax3) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi2 + 12)));
    }
    return;
}

int16_t fun_1802a920(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45) {
    void** eax46;
    int16_t ax47;

    eax46 = *reinterpret_cast<void***>(ecx + 28);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x1803554c);
    ax47 = fun_1802b2b0(ecx, eax46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45);
    return ax47;
}

int16_t fun_18027b90(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** eax8;

    fun_180274d0(ecx);
    *reinterpret_cast<void***>(ecx + 0x198) = a2;
    *reinterpret_cast<void***>(ecx + 0x1a0) = a2;
    *reinterpret_cast<void***>(ecx + 0x1a4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1a8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x19c) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a2) + reinterpret_cast<unsigned char>(a3));
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035240);
    eax8 = ecx;
    return *reinterpret_cast<int16_t*>(&eax8);
}

struct s270 {
    void** f0;
    signed char[3] pad4;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

void fun_18027c50(void** ecx) {
    void** edx2;
    struct s185* eax3;
    struct s185* edi4;
    struct s270* esi5;
    void** edx6;

    edx2 = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1a0) = *reinterpret_cast<void***>(ecx + 0x198);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 44)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(ecx + 44) == 0))) {
        eax3 = reinterpret_cast<struct s185*>(ecx + 0x124);
        do {
            edi4 = eax3;
            *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(eax3) - 4) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(eax3) - 0xf4);
            esi5 = reinterpret_cast<struct s270*>(eax3 - 15);
            ++edx2;
            eax3 = reinterpret_cast<struct s185*>(reinterpret_cast<uint32_t>(eax3) + 20);
            edi4->f0 = esi5->f0;
            edi4->f4 = esi5->f4;
            edi4->f8 = esi5->f8;
            edi4->f12 = esi5->f12;
        } while (reinterpret_cast<signed char>(edx2) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 44)));
    }
    edx6 = *reinterpret_cast<void***>(ecx);
    *reinterpret_cast<void***>(ecx + 0x1a4) = reinterpret_cast<void**>(0);
    goto *reinterpret_cast<void***>(edx6 + 20);
}

int16_t fun_1802a8b0(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** eax6;
    void** esi7;
    void** eax8;

    *reinterpret_cast<void***>(ecx + 8) = a3;
    eax6 = a2;
    *reinterpret_cast<void***>(ecx + 4) = reinterpret_cast<void**>(1);
    *reinterpret_cast<void***>(ecx + 12) = a4;
    *reinterpret_cast<void***>(ecx + 16) = a5;
    *reinterpret_cast<void***>(ecx + 20) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x1803554c);
    *reinterpret_cast<int16_t*>(&eax6) = fun_18027290(a4, eax6, esi7, __return_address(), a2);
    *reinterpret_cast<void***>(ecx + 28) = eax6;
    if (eax6) {
        *reinterpret_cast<void***>(ecx + 20) = *reinterpret_cast<void***>(eax6 + 4);
    }
    eax8 = ecx;
    return *reinterpret_cast<int16_t*>(&eax8);
}

int32_t mmioSeek = 0x3660c;

int16_t fun_1802acb0(void** ecx, void** a2) {
    void* esp3;
    void** ecx4;
    void** v5;
    int32_t eax6;
    void** edi7;
    int32_t esi8;

    esp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 24 - 4 - 4 - 4);
    ecx4 = *reinterpret_cast<void***>(ecx);
    v5 = ecx4;
    eax6 = reinterpret_cast<int32_t>(mmioDescend(v5, reinterpret_cast<int32_t>(esp3) + 16, a2, 16));
    if (!eax6 && reinterpret_cast<unsigned char>(edi7) >= reinterpret_cast<unsigned char>(4)) {
        ecx4 = ecx;
        fun_1802ab40(ecx4, reinterpret_cast<int32_t>(esp3) - 4 - 4 - 4 - 4 + 4 + 8, 4, v5, reinterpret_cast<int32_t>(esp3) + 16, a2, 16, edi7);
    }
    mmioSeek(ecx4);
    fun_1802ab10(ecx, a2, 0, 32);
    goto esi8;
}

int16_t fun_1802abb0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36);

int16_t fun_1802ac90(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30) {
    int16_t ax31;

    ax31 = fun_1802abb0(ecx, a2, 0x20746d66, a3, 0, 0, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30);
    return ax31;
}

void fun_1802ad50(struct s171* ecx) {
    ecx->f0 = 0;
    ecx->f4 = 0;
    ecx->f8 = 0;
    ecx->f12 = 0;
    ecx->f16 = 0;
    ecx->f20 = 0;
    ecx->f24 = 0;
    ecx->f28 = 0;
    return;
}

void** fun_1802c3c5(void** ecx, void** a2, int32_t a3, void** a4);

unsigned char fun_1802ad80(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** edi6;
    void** esi7;
    void** eax8;
    void** eax9;

    eax8 = fun_1802b2bb(ecx, a3, edi6, esi7, __return_address(), a2, a3, a4, a5);
    *reinterpret_cast<void***>(ecx + 4) = eax8;
    *reinterpret_cast<void***>(ecx + 8) = a3;
    eax9 = fun_1802c3c5(ecx, a2, "rb", a3);
    *reinterpret_cast<void***>(ecx) = eax9;
    return static_cast<unsigned char>(reinterpret_cast<uint1_t>(!!eax9));
}

uint32_t g18045a94 = 0;

int32_t g18045944 = 0;

void** fun_1802e38c(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7);

int32_t GetFileType = 0x361b0;

uint32_t fun_1802e4af(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10);

void** fun_1802bf8a(void** a1, void** a2, void** a3, uint32_t a4) {
    void** ecx5;
    unsigned char v6;
    void** v7;
    int1_t zf8;
    uint32_t eax9;
    void** v10;
    uint32_t eax11;
    void** v12;
    void** v13;
    void** edi14;
    void** esi15;
    void** ebx16;
    void** eax17;
    void** eax18;
    void** eax19;
    void** eax20;
    void** esi21;
    int32_t ecx22;
    void** eax23;
    void** eax24;
    int32_t eax25;
    void** ecx26;
    void** edi27;
    uint32_t eax28;
    void* eax29;
    uint32_t esi30;
    unsigned char v31;
    void** eax32;
    void** eax33;
    void** esi34;
    void** eax35;
    void** eax36;
    void** eax37;
    void** eax38;
    void** eax39;
    void** eax40;

    ecx5 = a2;
    if (!(*reinterpret_cast<unsigned char*>(&ecx5) & 0x80)) {
        v6 = 0;
        v7 = reinterpret_cast<void**>(1);
    } else {
        v7 = reinterpret_cast<void**>(0);
        v6 = 16;
    }
    if (!(0x8000 & reinterpret_cast<unsigned char>(ecx5)) && (*reinterpret_cast<unsigned char*>(&ecx5 + 1) & 64 || (zf8 = g18045a94 == 0x8000, !zf8))) {
        v6 = reinterpret_cast<unsigned char>(v6 | 0x80);
    }
    eax9 = reinterpret_cast<unsigned char>(ecx5) & reinterpret_cast<unsigned char>(3);
    if (!eax9) {
        v10 = reinterpret_cast<void**>(0x80000000);
    } else {
        eax11 = eax9 - 1;
        if (!eax11) {
            v10 = reinterpret_cast<void**>(0x40000000);
        } else {
            if (eax11 - 1) 
                goto addr_0x1802c08e_11;
            v10 = reinterpret_cast<void**>(0xc0000000);
        }
    }
    if (a3 == 16) {
        v12 = reinterpret_cast<void**>(0);
    } else {
        if (a3 == 32) {
            v12 = reinterpret_cast<void**>(1);
        } else {
            if (a3 == 48) {
                v12 = reinterpret_cast<void**>(2);
            } else {
                if (!reinterpret_cast<int1_t>(a3 == 64)) 
                    goto addr_0x1802c08e_11;
                v12 = reinterpret_cast<void**>(3);
            }
        }
    }
    ecx5 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx5) & reinterpret_cast<unsigned char>(0x700));
    if (reinterpret_cast<signed char>(ecx5) > reinterpret_cast<signed char>(0x400)) {
        if (ecx5 == 0x500) 
            goto addr_0x1802c0b1_23;
        if (ecx5 == 0x600) 
            goto addr_0x1802c0a8_25;
        if (ecx5 == 0x700) {
            addr_0x1802c0b1_23:
            v13 = reinterpret_cast<void**>(1);
        } else {
            addr_0x1802c08e_11:
            eax17 = fun_1802dfa3(ecx5, edi14, esi15, ebx16, 12, 0, v7);
            *reinterpret_cast<void***>(eax17) = reinterpret_cast<void**>(22);
            eax18 = fun_1802dfac(ecx5, edi14, esi15, ebx16, 12, 0, v7, v12, v10);
            *reinterpret_cast<void***>(eax18) = reinterpret_cast<void**>(0);
            eax19 = reinterpret_cast<void**>(0xffffffff);
            goto addr_0x1802c254_27;
        }
    } else {
        if (ecx5 == 0x400 || !ecx5) {
            v13 = reinterpret_cast<void**>(3);
        } else {
            if (ecx5 == 0x100) {
                v13 = reinterpret_cast<void**>(4);
            } else {
                if (ecx5 == 0x200) {
                    addr_0x1802c0a8_25:
                    v13 = reinterpret_cast<void**>(5);
                } else {
                    if (!reinterpret_cast<int1_t>(ecx5 == 0x300)) 
                        goto addr_0x1802c08e_11;
                    v13 = reinterpret_cast<void**>(2);
                }
            }
        }
    }
    eax20 = a2;
    esi21 = reinterpret_cast<void**>(0x80);
    if (reinterpret_cast<unsigned char>(0x100) & reinterpret_cast<unsigned char>(eax20) && (ecx22 = g18045944, ecx5 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(~ecx22) & a4), !(*reinterpret_cast<unsigned char*>(&ecx5) & 0x80))) {
        esi21 = reinterpret_cast<void**>(1);
    }
    if (*reinterpret_cast<unsigned char*>(&eax20) & 64) {
        esi21 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi21) | 0x4000000);
        *reinterpret_cast<unsigned char*>(&v10 + 2) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&v10 + 2) | 1);
    }
    if (*reinterpret_cast<unsigned char*>(&eax20 + 1) & 16) {
        esi21 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi21) | reinterpret_cast<unsigned char>(0x100));
    }
    if (!(*reinterpret_cast<unsigned char*>(&eax20) & 32)) {
        if (*reinterpret_cast<unsigned char*>(&eax20) & 16) {
            esi21 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi21) | 0x10000000);
        }
    } else {
        esi21 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi21) | 0x8000000);
    }
    eax23 = fun_1802e38c(ecx5, edi14, esi15, ebx16, 12, 0, v7);
    if (!reinterpret_cast<int1_t>(eax23 == 0xffffffff)) {
        eax24 = reinterpret_cast<void**>(CreateFileA(a1, v10, v12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe4, v13, esi21, 0));
        if (!reinterpret_cast<int1_t>(eax24 == 0xffffffff)) {
            eax25 = reinterpret_cast<int32_t>(GetFileType(eax24, a1, v10, v12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe4, v13, esi21, 0));
            if (eax25) {
                if (eax25 != 2) {
                    if (eax25 == 3) {
                        v6 = reinterpret_cast<unsigned char>(v6 | 8);
                    }
                } else {
                    v6 = reinterpret_cast<unsigned char>(v6 | 64);
                }
                fun_1802e4af(eax23, eax24, eax24, a1, v10, v12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe4, v13, esi21, 0);
                ecx26 = eax24;
                edi27 = reinterpret_cast<void**>((reinterpret_cast<signed char>(eax23) >> 5) * 4 + 0x18046f20);
                *reinterpret_cast<unsigned char*>(&ecx26) = reinterpret_cast<unsigned char>(v6 | 1);
                eax28 = reinterpret_cast<unsigned char>(eax23) & 31;
                eax29 = *edi27;
                esi30 = eax28 + eax28 * 8 << 2;
                v31 = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&ecx26) & 72);
                *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(eax29) + esi30 + 4) = *reinterpret_cast<unsigned char*>(&ecx26);
                if (v31) 
                    goto addr_0x1802c232_53;
                if (!(*reinterpret_cast<unsigned char*>(&ecx26) & 0x80)) 
                    goto addr_0x1802c232_53;
                if (!(*reinterpret_cast<unsigned char*>(&a2) & 2)) 
                    goto addr_0x1802c232_53;
                eax32 = fun_1802e6d2(ecx26, eax23, 0xff, 2, eax24, a1, v10, v12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe4, v13, esi21, 0, edi14, esi15);
                if (reinterpret_cast<int1_t>(eax32 == 0xffffffff)) 
                    goto addr_0x1802c1da_57;
            } else {
                CloseHandle(eax24, eax24, a1, v10, v12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe4, v13, esi21, 0);
                goto addr_0x1802c149_59;
            }
        } else {
            addr_0x1802c149_59:
            eax33 = reinterpret_cast<void**>(GetLastError(a1, v10, v12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe4, v13, esi21, 0));
            fun_1802df30(ecx5, eax33, a1, v10, v12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe4, v13, esi21, 0);
            ecx26 = eax33;
            esi34 = reinterpret_cast<void**>(0xffffffff);
            goto addr_0x1802c24b_60;
        }
    } else {
        eax35 = fun_1802dfa3(ecx5, edi14, esi15, ebx16, 12, 0, v7);
        *reinterpret_cast<void***>(eax35) = reinterpret_cast<void**>(24);
        eax36 = fun_1802dfac(ecx5, edi14, esi15, ebx16, 12, 0, v7, v12, v10);
        *reinterpret_cast<void***>(eax36) = reinterpret_cast<void**>(0);
        eax19 = reinterpret_cast<void**>(0xffffffff);
        goto addr_0x1802c254_27;
    }
    eax37 = fun_1802bd9a(eax23, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 19, 1, eax24, a1, v10, v12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe4, v13, esi21, 0);
    if (!eax37 && (!1 && (eax38 = fun_1802e745(ecx26, eax23, eax32, eax24, a1, v10, v12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe4, v13, esi21, 0, edi14, esi15, ebx16, 12, 0, v7, eax32), ecx26 = eax32, eax38 == 0xffffffff)) || (eax39 = fun_1802e6d2(ecx26, eax23, 0, 0, eax24, a1, v10, v12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe4, v13, esi21, 0, edi14, esi15, eax23, 0, 0, eax24, a1, v10, v12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe4, v13, esi21, 0, edi14, esi15), eax39 == 0xffffffff)) {
        addr_0x1802c1e7_63:
        fun_1802bc55(ecx26, eax23, eax24, a1, v10, v12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe4, v13, esi21, 0, edi14, esi15);
        ecx26 = eax23;
        esi34 = reinterpret_cast<void**>(0xffffffff);
    } else {
        addr_0x1802c232_53:
        if (!v31 && *reinterpret_cast<unsigned char*>(&a2) & 8) {
            *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(*edi27) + esi30 + 4) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(*edi27) + esi30 + 4) | 32);
            goto addr_0x1802c249_65;
        }
    }
    addr_0x1802c24b_60:
    fun_1802e64b(ecx26, eax23, a1, v10, v12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe4, v13, esi21, 0);
    eax19 = esi34;
    addr_0x1802c254_27:
    return eax19;
    addr_0x1802c249_65:
    esi34 = eax23;
    goto addr_0x1802c24b_60;
    addr_0x1802c1da_57:
    eax40 = fun_1802dfac(ecx26, eax24, a1, v10, v12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe4, v13, esi21, 0);
    if (*reinterpret_cast<void***>(eax40) == 0x83) 
        goto addr_0x1802c232_53; else 
        goto addr_0x1802c1e7_63;
}

int16_t fun_1802ad20(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30) {
    int16_t ax31;

    ax31 = fun_1802abb0(ecx, a2, 0x61746164, a3, a4, a5, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30);
    return ax31;
}

int16_t fun_1802a9f0(struct s31* ecx, void** a2, int32_t a3) {
    struct s31* esi4;
    int32_t ecx5;
    int32_t eax6;
    int32_t v7;

    esi4 = ecx;
    if (!reinterpret_cast<int1_t>(a2 == 0xffffffff)) {
        ecx5 = 18;
        while (ecx5) {
            --ecx5;
            esi4 = reinterpret_cast<struct s31*>(&esi4->f4);
        }
        esi4->f4 = 16;
        eax6 = reinterpret_cast<int32_t>(mmioOpenA());
        esi4->f0 = eax6;
        goto v7;
    } else {
        return 16;
    }
}

int32_t mmioGetInfo = 0x365fe;

void fun_1802ab90(void** ecx, void* a2) {
    void** ecx3;

    ecx3 = *reinterpret_cast<void***>(ecx);
    mmioGetInfo();
    goto ecx3;
}

int32_t g18045900 = 0;

int32_t g18045904 = 0;

void fun_18023d60(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;
    void** v47;
    void** esi48;
    void** v49;
    void** ecx50;

    esi45 = ecx;
    eax46 = *reinterpret_cast<void***>(esi45 + 0x1b4);
    *reinterpret_cast<void***>(esi45) = reinterpret_cast<void**>(0x18035110);
    if (eax46) {
        if (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi45 + 0x1bc)) & 0x20000) {
            ecx = esi45 + 0x1b8;
            g18045900(eax46, ecx, 0);
        }
        v47 = *reinterpret_cast<void***>(esi45 + 0x1c4);
        fun_1802b2b0(ecx, v47, esi48, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
        v49 = *reinterpret_cast<void***>(esi45 + 0x1d4);
        fun_1802b2b0(ecx, v49, v47, esi48, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43);
        ecx50 = *reinterpret_cast<void***>(esi45 + 0x1b4);
        g18045904(ecx50, 0);
        *reinterpret_cast<void***>(esi45 + 0x1b4) = reinterpret_cast<void**>(0);
    }
    fun_180275f0(esi45);
    return;
}

int16_t fun_18024220(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** eax45;
    void** esi46;
    int16_t ax47;

    eax45 = *reinterpret_cast<void***>(ecx + 32);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x1803513c);
    fun_1802b2b0(ecx, eax45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    ax47 = fun_1802a920(ecx, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43);
    return ax47;
}

void fun_18024390(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41) {
    void** v42;
    void** v43;
    void** v44;
    void** ebp45;
    void** ebp46;
    void*** esp47;
    void** v48;
    void** edi49;
    void** eax50;
    void** eax51;
    void** edx52;
    void** edi53;
    void** v54;
    void** ebx55;
    void*** esp56;
    void** v57;
    void** esi58;
    void** esi59;
    void** v60;
    void** ecx61;
    void* esp62;
    struct s173* edi63;
    void** esi64;
    void** ebx65;
    void** eax66;
    void*** esp67;
    void** eax68;
    void** ecx69;

    v42 = reinterpret_cast<void**>(__return_address());
    v43 = ecx;
    v44 = ebp45;
    ebp46 = ecx;
    esp47 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4);
    v48 = edi49;
    eax50 = *reinterpret_cast<void***>(ebp46 + 0x1b8);
    *reinterpret_cast<void***>(ebp46) = reinterpret_cast<void**>(0x18035154);
    if (eax50) {
        ecx = *reinterpret_cast<void***>(eax50);
        *reinterpret_cast<void***>(ecx + 32)(eax50);
        eax51 = *reinterpret_cast<void***>(ebp46 + 0x1b8);
        edx52 = *reinterpret_cast<void***>(eax51);
        *reinterpret_cast<void***>(edx52 + 8)(eax51, eax50);
        esp47 = esp47 - 4 - 4 + 4 - 4 - 4 + 4;
    }
    edi53 = ebp46 + 0x1c0;
    v54 = ebx55;
    esp56 = esp47 - 4 - 4;
    v57 = esi58;
    esi59 = *reinterpret_cast<void***>(edi53);
    if (esi59 != edi53) {
        do {
            v60 = *reinterpret_cast<void***>(esi59 + 8);
            fun_1802b2b0(ecx, v60, v57, v54, v48, v44, v43, v42, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
            esi59 = *reinterpret_cast<void***>(esi59);
            esp56 = esp56 - 4 - 4 + 4 + 4;
        } while (esi59 != edi53);
    }
    ecx61 = *reinterpret_cast<void***>(ebp46 + 0x1dc);
    fun_1802b2b0(ecx61, ecx61, v57, v54, v48, v44, v43, v42, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    DeleteCriticalSection();
    esp62 = reinterpret_cast<void*>(esp56 - 4 - 4 + 4 + 4 - 4 - 4 + 4);
    edi63 = reinterpret_cast<struct s173*>(ebp46 + 0x1bc);
    esi64 = *reinterpret_cast<void***>(&edi63->f4);
    ebx65 = reinterpret_cast<void**>(&edi63->f4);
    if (esi64 != ebx65) {
        do {
            eax66 = esi64;
            esi64 = *reinterpret_cast<void***>(esi64);
            esp67 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp62) - 4);
            fun_180248a0(edi63, esp67 + 20, eax66);
            esp62 = reinterpret_cast<void*>(esp67 - 4 - 4 + 8 + 4);
        } while (esi64 != ebx65);
    }
    eax68 = edi63->f28;
    if (eax68) {
        do {
            ecx69 = *reinterpret_cast<void***>(eax68);
            edi63->f28 = ecx69;
            fun_1802b2b0(ecx69, eax68, v54, v48, v44, v43, v42, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41);
            eax68 = edi63->f28;
        } while (eax68);
    }
    fun_180275f0(ebp46);
    goto v43;
}

int32_t g18043944 = 1;

int32_t g180458ec = 0;

int32_t g180458f0 = 0;

int32_t g180458f4 = 0;

int32_t g180458f8 = 0;

int32_t g180458fc = 0;

int32_t fun_18023dd0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17) {
    int32_t eax18;
    void*** esp19;
    signed char al20;
    int32_t eax21;
    int32_t ebp22;
    int32_t eax23;
    int32_t eax24;
    int32_t eax25;
    int32_t eax26;
    int32_t eax27;
    int32_t eax28;
    int32_t eax29;
    int32_t v30;
    void** edx31;
    uint160_t v32;
    void* esp33;
    void** eax34;
    void** edx35;
    void* esp36;
    void** ebx37;
    void** eax38;
    void** ecx39;
    void** eax40;
    void** edx41;
    void** ebp42;
    void** eax43;
    void** v44;
    void** eax45;
    void** v46;
    void** eax47;
    void** edi48;
    void** esi49;
    void** ebp50;
    void** ebx51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** ecx56;
    void** edx57;
    void** eax58;
    void** eax59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** ecx68;
    void** esi69;
    void** ecx70;
    void** edx71;
    void** v72;
    void** eax73;

    eax18 = g18043944;
    esp19 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 28 - 4 - 4 - 4 - 4);
    if (!eax18) {
        al20 = g180458e0;
        if (!al20) {
            return 18;
        }
    } else {
        g18043944 = 0;
        eax21 = reinterpret_cast<int32_t>(LoadLibraryA());
        esp19 = esp19 - 4 - 4 + 4;
        if (!eax21 || ((ebp22 = GetProcAddress, eax23 = reinterpret_cast<int32_t>(ebp22(eax21, "acmFormatSuggest")), esp19 = esp19 - 4 - 4 - 4 + 4, g180458ec = eax23, eax23 == 0) || ((eax24 = reinterpret_cast<int32_t>(ebp22(eax21, "acmStreamOpen", eax21, "acmFormatSuggest")), esp19 = esp19 - 4 - 4 - 4 + 4, g180458f0 = eax24, eax24 == 0) || ((eax25 = reinterpret_cast<int32_t>(ebp22(eax21, "acmStreamSize", eax21, "acmStreamOpen", eax21, "acmFormatSuggest")), esp19 = esp19 - 4 - 4 - 4 + 4, g180458f4 = eax25, eax25 == 0) || ((eax26 = reinterpret_cast<int32_t>(ebp22(eax21, "acmStreamPrepareHeader", eax21, "acmStreamSize", eax21, "acmStreamOpen", eax21, "acmFormatSuggest")), esp19 = esp19 - 4 - 4 - 4 + 4, g180458f8 = eax26, eax26 == 0) || ((eax27 = reinterpret_cast<int32_t>(ebp22(eax21, "acmStreamConvert", eax21, "acmStreamPrepareHeader", eax21, "acmStreamSize", eax21, "acmStreamOpen", eax21, "acmFormatSuggest")), esp19 = esp19 - 4 - 4 - 4 + 4, g180458fc = eax27, eax27 == 0) || ((eax28 = reinterpret_cast<int32_t>(ebp22(eax21, "acmStreamUnprepareHeader", eax21, "acmStreamConvert", eax21, "acmStreamPrepareHeader", eax21, "acmStreamSize", eax21, "acmStreamOpen", eax21, "acmFormatSuggest")), esp19 = esp19 - 4 - 4 - 4 + 4, g18045900 = eax28, eax28 == 0) || (eax29 = reinterpret_cast<int32_t>(ebp22(eax21, "acmStreamClose", eax21, "acmStreamUnprepareHeader", eax21, "acmStreamConvert", eax21, "acmStreamPrepareHeader", eax21, "acmStreamSize", eax21, "acmStreamOpen", eax21, "acmFormatSuggest")), esp19 = esp19 - 4 - 4 - 4 + 4, g18045904 = eax29, eax29 == 0)))))))) {
            g180458e0 = 0;
            goto v30;
        } else {
            g180458e0 = 1;
        }
    }
    edx31 = *reinterpret_cast<void***>(ecx + 0x1ac);
    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(&v32) + 2) = 0;
    esp33 = reinterpret_cast<void*>(esp19 - 4);
    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(&v32) + 6) = 0;
    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(&v32) + 10) = 0;
    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(&v32) + 14) = 0;
    eax34 = reinterpret_cast<void**>(g180458ec());
    if (!eax34) {
        edx35 = *reinterpret_cast<void***>(ecx + 0x1ac);
        esp36 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp33) - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4);
        ebx37 = ecx + 0x1b4;
        eax38 = reinterpret_cast<void**>(g180458f0());
        if (!eax38) {
            ecx39 = *reinterpret_cast<void***>(ecx + 0x1ac);
            eax40 = reinterpret_cast<void**>(0);
            eax40 = *reinterpret_cast<void***>(ecx39 + 12);
            if (reinterpret_cast<unsigned char>(eax40) < reinterpret_cast<unsigned char>(0x400)) {
            }
            edx41 = *reinterpret_cast<void***>(ebx37);
            ebp42 = ecx + 0x1d8;
            *reinterpret_cast<void***>(ecx + 0x1c8) = reinterpret_cast<void**>(0x400);
            eax43 = reinterpret_cast<void**>(g180458f4());
            if (!eax43) {
                v44 = *reinterpret_cast<void***>(ecx + 0x1c8);
                eax45 = fun_1802b2bb(ecx39, v44, edx41, 0x400, ebp42, 0, ebx37, 0, edx35);
                v46 = *reinterpret_cast<void***>(ebp42);
                eax47 = fun_1802b2bb(ecx39, v46, v44, edx41, 0x400, ebp42, 0, ebx37, 0);
                if (!eax45 || !eax47) {
                    fun_1802b2b0(ecx39, eax47, edx41, 0x400, ebp42, 0, ebx37, 0, edx35, reinterpret_cast<int32_t>(esp36) + 36, eax40, 0x400, 0, 0, 0, edx31, reinterpret_cast<int32_t>(esp33) + 28, 18, 0x10000, edi48, esi49, ebp50, ebx51, v52, v53, 1, *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 4), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 8), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 12), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 16), __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
                    fun_1802b2b0(ecx39, eax45, eax47, edx41, 0x400, ebp42, 0, ebx37, 0, edx35, reinterpret_cast<int32_t>(esp36) + 36, eax40, 0x400, 0, 0, 0, edx31, reinterpret_cast<int32_t>(esp33) + 28, 18, 0x10000, edi48, esi49, ebp50, ebx51, v54, v55, 1, *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 4), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 8), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 12), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 16), __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
                    goto 0;
                } else {
                    ecx56 = *reinterpret_cast<void***>(ebx37);
                    edx57 = *reinterpret_cast<void***>(ecx + 0x1c8);
                    *reinterpret_cast<void***>(ecx + 0x1d4) = eax47;
                    *reinterpret_cast<void***>(ecx + 0x1b0) = edx57;
                    *reinterpret_cast<void***>(ecx + 0x1c4) = eax45;
                    eax58 = reinterpret_cast<void**>(g180458f8());
                    if (!eax58) {
                        fun_18027620(ecx, reinterpret_cast<int32_t>(esp36) - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4 - 4 - 4 + 4 + 8 - 4 - 4 - 4 - 4 + 4 + 24, ecx56, ecx + 0x1b8, 0, edx41, 0x400);
                        eax59 = *reinterpret_cast<void***>(ecx);
                        *reinterpret_cast<void***>(eax59 + 36)(ecx);
                        fun_1802b2b0(ecx, 0, ecx56, ecx + 0x1b8, 0, edx41, 0x400, ebp42, 0, ebx37, 0, edx35, reinterpret_cast<int32_t>(esp36) + 36, eax40, 0x400, 0, 0, 0, edx31, reinterpret_cast<int32_t>(esp33) + 28, 18, 0x10000, edi48, esi49, ebp50, ebx51, v60, v61, 1, *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 4), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 8), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 12), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 16), __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
                        fun_1802b2b0(ecx, 0, 0, ecx56, ecx + 0x1b8, 0, edx41, 0x400, ebp42, 0, ebx37, 0, edx35, reinterpret_cast<int32_t>(esp36) + 36, eax40, 0x400, 0, 0, 0, edx31, reinterpret_cast<int32_t>(esp33) + 28, 18, 0x10000, edi48, esi49, ebp50, ebx51, v62, v63, 1, *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 4), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 8), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 12), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 16), __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
                        goto eax40;
                    } else {
                        fun_18032300(0, 0x18043b4c, eax58, ecx56, ecx + 0x1b8, 0, edx41, 0x400, ebp42, 0);
                        fun_1802b2b0(ecx56, 0, 0, 0x18043b4c, eax58, ecx56, ecx + 0x1b8, 0, edx41, 0x400, ebp42, 0, ebx37, 0, edx35, reinterpret_cast<int32_t>(esp36) + 36, eax40, 0x400, 0, 0, 0, edx31, reinterpret_cast<int32_t>(esp33) + 28, 18, 0x10000, edi48, esi49, ebp50, ebx51, v64, v65, 1, *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 4), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 8), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 12), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 16), __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
                        fun_1802b2b0(ecx56, 0, 0, 0, 0x18043b4c, eax58, ecx56, ecx + 0x1b8, 0, edx41, 0x400, ebp42, 0, ebx37, 0, edx35, reinterpret_cast<int32_t>(esp36) + 36, eax40, 0x400, 0, 0, 0, edx31, reinterpret_cast<int32_t>(esp33) + 28, 18, 0x10000, edi48, esi49, ebp50, ebx51, v66, v67, 1, *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 4), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 8), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 12), *reinterpret_cast<void***>(reinterpret_cast<int32_t>(&v32) + 16), __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10);
                        goto eax40;
                    }
                }
            } else {
                ecx68 = reinterpret_cast<void**>(0);
                ecx68 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x1ac) + 12);
                fun_18032300(0, 0x18043b88, ecx68, eax43, edx41, 0x400, ebp42, 0, ebx37, 0);
                goto 0;
            }
        } else {
            fun_18032300(0, 0x18043bc8, eax38, ebx37, 0, edx35, reinterpret_cast<int32_t>(esp36) + 36, 0, 0, 0);
            goto 18;
        }
    } else {
        esi69 = *reinterpret_cast<void***>(ecx + 0x1ac);
        ecx70 = reinterpret_cast<void**>(0);
        edx71 = reinterpret_cast<void**>(0);
        ecx70 = *reinterpret_cast<void***>(esi69 + 14);
        edx71 = *reinterpret_cast<void***>(esi69 + 2);
        v72 = *reinterpret_cast<void***>(esi69 + 4);
        eax73 = reinterpret_cast<void**>(0);
        eax73 = *reinterpret_cast<void***>(esi69);
        fun_18032300(0, 0x18043bec, eax73, edx71, ecx70, v72, eax34, 0, edx31, reinterpret_cast<int32_t>(esp33) + 28);
        goto 1;
    }
}

int16_t fun_18024800(int32_t* a1, int32_t* a2, int32_t a3) {
    int32_t* eax4;
    int32_t* ecx5;
    int32_t edx6;

    eax4 = a1;
    ecx5 = a2;
    if (eax4 != ecx5) {
        edx6 = a3;
        do {
            if (*eax4 == edx6) 
                break;
            ++eax4;
        } while (eax4 != ecx5);
    }
    return *reinterpret_cast<int16_t*>(&eax4);
}

unsigned char fun_18024820(int32_t* a1, int32_t a2, int32_t a3) {
    int32_t* eax4;
    int32_t* esi5;

    eax4 = a1;
    esi5 = eax4 + a2;
    *reinterpret_cast<int16_t*>(&eax4) = fun_18024800(eax4, esi5, a3);
    return static_cast<unsigned char>(reinterpret_cast<uint1_t>(eax4 != esi5));
}

void fun_18024990(void** ecx) {
    void** eax2;
    int32_t edi3;
    int32_t edi4;
    void** eax5;

    eax2 = *reinterpret_cast<void***>(ecx + 44);
    if (eax2) {
        if (*reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(ecx + 44) + 44)) {
            edi3 = mmioAscend;
            edi3(eax2, reinterpret_cast<uint32_t>(ecx + 44) + 24, 0, edi4);
            eax5 = *reinterpret_cast<void***>(ecx + 44);
            edi3(eax5, reinterpret_cast<uint32_t>(ecx + 44) + 4, 0, eax2, reinterpret_cast<uint32_t>(ecx + 44) + 24, 0, edi4);
            mmioClose();
            *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(ecx + 44) + 44) = 0;
        }
        *reinterpret_cast<void***>(ecx + 44) = reinterpret_cast<void**>(0);
    }
    return;
}

void fun_1802b110(struct s64* ecx) {
    void** eax2;
    int32_t edi3;
    int32_t edi4;
    void** eax5;

    eax2 = ecx->f0;
    if (eax2) {
        if (ecx->f44) {
            edi3 = mmioAscend;
            edi3(eax2, &ecx->f24, 0, edi4);
            eax5 = ecx->f0;
            edi3(eax5, &ecx->f4, 0, eax2, &ecx->f24, 0, edi4);
            mmioClose();
            ecx->f44 = 0;
        }
        ecx->f0 = reinterpret_cast<void**>(0);
    }
    return;
}

void fun_180264b0(void** ecx, void** a2, void** a3, void** a4) {
    void** eax5;
    void*** esp6;
    void** edi7;
    void** eax8;
    void** edi9;
    void** esi10;
    void** ebp11;
    void** ebx12;
    void** v13;
    void** v14;
    void** v15;
    void** v16;
    void** esi17;
    void** ecx18;
    void** edx19;
    void** edi20;

    eax5 = a2;
    esp6 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 16 - 4 - 4 - 4 - 4);
    *reinterpret_cast<void***>(ecx + 8) = eax5;
    *reinterpret_cast<void***>(ecx + 40) = a3;
    if (eax5) {
        *reinterpret_cast<int16_t*>(&eax5) = fun_1800dcc0(eax5);
        esp6 = esp6 - 4 - 4 + 4 + 4;
        edi7 = eax5;
    } else {
        edi7 = reinterpret_cast<void**>(1);
    }
    eax8 = ecx + 12;
    fun_18027240(eax8, edi7, a3, a4, edi9, esi10, ebp11, ebx12, v13, v14, v15, v16, __return_address(), a2, a3, a4);
    eax8 = fun_18017200(esp6 - 4 - 4 - 4 - 4 - 4 + 16 + 4 - 4 + 20, edi7, a4);
    esi17 = ecx + 48;
    ecx18 = *reinterpret_cast<void***>(eax8 + 4);
    edx19 = *reinterpret_cast<void***>(eax8 + 8);
    edi20 = *reinterpret_cast<void***>(eax8 + 12);
    *reinterpret_cast<void***>(esi17) = *reinterpret_cast<void***>(eax8);
    *reinterpret_cast<void***>(esi17 + 4) = ecx18;
    *reinterpret_cast<void***>(esi17 + 8) = edx19;
    *reinterpret_cast<void***>(esi17 + 12) = edi20;
    return;
}

int16_t fun_18027200(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** eax8;
    void** eax9;

    eax8 = *reinterpret_cast<void***>(ecx);
    if (!eax8) {
        eax9 = fun_1802b2bb(ecx, a2, __return_address(), a2, a3, a4, a5, a6, a7);
        return *reinterpret_cast<int16_t*>(&eax9);
    } else {
        *reinterpret_cast<void***>(ecx) = *reinterpret_cast<void***>(eax8);
        return *reinterpret_cast<int16_t*>(&eax8);
    }
}

int32_t g18043d68 = 3;

int32_t g24;

int16_t fun_18026580(void** ecx, void** a2) {
    void** ebp3;
    void*** esp4;
    void** ecx5;
    void** edi6;
    void** v7;
    void** eax8;
    void** ecx9;
    void** eax10;
    void** edx11;
    void** eax12;
    void** ecx13;
    void** edx14;
    void** eax15;
    int32_t v16;
    void** edi17;
    void** esi18;
    void** ebx19;
    void** v20;
    int32_t v21;
    unsigned char al22;
    unsigned char bl23;
    unsigned char al24;
    signed char al25;
    void** eax26;
    int32_t eax27;
    int32_t v28;
    int32_t eax29;
    int32_t v30;
    int32_t v31;
    int32_t edi32;
    int32_t v33;
    void* esp34;
    void** edx35;
    int32_t eax36;
    int1_t zf37;
    signed char al38;
    void** eax39;
    void** ecx40;
    int32_t eax41;
    void** ecx42;
    void** ecx43;
    void** ecx44;
    int32_t v45;
    int32_t v46;
    int32_t v47;
    int32_t v48;
    int32_t v49;
    int32_t v50;

    ebp3 = ecx;
    esp4 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x80 - 4 - 4 - 4 - 4);
    if (*reinterpret_cast<void***>(ebp3 + 4)) {
        addr_0x180268a3_2:
        return 0;
    } else {
        ecx5 = *reinterpret_cast<void***>(ebp3);
        edi6 = *reinterpret_cast<void***>(ecx5 + 24);
        v7 = edi6;
        if (reinterpret_cast<unsigned char>(a2) & 0x100) {
            eax8 = *reinterpret_cast<void***>(ecx5 + 28);
            *reinterpret_cast<void***>(ebp3 + 4) = eax8;
            if (eax8) {
                ecx9 = *reinterpret_cast<void***>(eax8);
                *reinterpret_cast<void***>(ecx9 + 4)(eax8);
                eax10 = *reinterpret_cast<void***>(ebp3 + 4);
                edx11 = *reinterpret_cast<void***>(eax10);
                *reinterpret_cast<void***>(edx11 + 20)();
                eax12 = *reinterpret_cast<void***>(ebp3 + 4);
                ecx13 = reinterpret_cast<void**>(esp4 - 4 - 4 + 4 - 4 - 4 - 4 - 4 - 4 + 4 + 28);
                edx14 = *reinterpret_cast<void***>(eax12);
                eax15 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx14 + 12)());
                if (reinterpret_cast<signed char>(eax15) >= reinterpret_cast<signed char>(0)) {
                    *reinterpret_cast<void***>(ebp3 + 32) = reinterpret_cast<void**>(20);
                    goto v16;
                } else {
                    fun_180323c0(ecx13, 0x18044018, eax15, eax12, ecx13, eax10, ebp3 + 12, 18, 0, eax8, edi17, esi18, 20, ebx19, v20, v7);
                    goto v21;
                }
            } else {
                return 53;
            }
        }
        if (reinterpret_cast<unsigned char>(a2) & 0x2000) {
        }
        if (reinterpret_cast<unsigned char>(a2) & 0x4000) {
        }
        if (reinterpret_cast<unsigned char>(a2) & 0x10000) {
        }
        if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ebp3 + 14) == 1)) 
            goto addr_0x1802669c_16;
    }
    if (*reinterpret_cast<void***>(ebp3 + 8)) {
        al22 = fun_18026380(ecx5);
        esp4 = esp4 - 4 + 4;
        if (!al22) {
            addr_0x180267b2_19:
        }
        goto addr_0x180267bc_22;
    }
    addr_0x1802669c_16:
    bl23 = static_cast<unsigned char>(reinterpret_cast<uint1_t>(!!*reinterpret_cast<void***>(ebp3 + 8)));
    if (!bl23 || (al24 = fun_18026380(ecx5), esp4 = esp4 - 4 + 4, !!al24)) {
        al25 = 0;
    } else {
        al25 = 1;
    }
    if (reinterpret_cast<unsigned char>(a2) & 0x8000 || al25) {
    }
    if (reinterpret_cast<unsigned char>(a2) & 0x1800) 
        goto addr_0x180266e5_29;
    if (!bl23) 
        goto addr_0x180267b2_19;
    addr_0x180266e5_29:
    eax26 = *reinterpret_cast<void***>(edi6);
    eax27 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(eax26 + 16)());
    esp4 = esp4 - 4 - 4 - 4 + 4;
    if (eax27 < 0) {
        goto v28;
    }
    eax29 = v30;
    *reinterpret_cast<unsigned char*>(&eax29) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax29) | 4);
    if (reinterpret_cast<unsigned char>(a2) & 0x800) 
        goto addr_0x18026720_33;
    *reinterpret_cast<unsigned char*>(&eax29) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax29) | 2);
    if (!(*reinterpret_cast<unsigned char*>(&eax29) & 16)) {
        if (v31) {
            addr_0x180267bc_22:
            edi32 = 0;
        } else {
            addr_0x18026788_36:
            goto v33;
        }
        while (esp34 = reinterpret_cast<void*>(esp4 - 4), edx35 = *reinterpret_cast<void***>(v7), eax36 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(edx35 + 12)(v7)), esp4 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp34) - 4 - 4 - 4 - 4 + 4), eax36 < 0) {
            if (eax36 == 0x88780032) 
                goto addr_0x18026788_36;
            zf37 = edi32 == g18043d68;
            if (zf37) 
                goto addr_0x18026788_36;
            ++edi32;
        }
        if (*reinterpret_cast<void***>(ebp3 + 8) && (al38 = fun_18026eb0(ebp3, v7), esp4 = esp4 - 4 + 4, !al38)) {
            fun_18026f40(ebp3, v7);
            esp4 = esp4 - 4 + 4;
        }
        eax39 = *reinterpret_cast<void***>(ebp3 + 4);
        if (eax39 && (ecx40 = *reinterpret_cast<void***>(eax39), eax41 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(ecx40)(eax39, 0x18034448, esp4 + 16, v7)), eax41 >= 0)) {
            g24(reinterpret_cast<int32_t>(esp34) + 32, 0x180344e8, 1, 0);
            ecx42 = *reinterpret_cast<void***>(&g0);
            *reinterpret_cast<void***>(ecx42 + 16)(0, 0x180344c8, 3, 0);
            ecx43 = *reinterpret_cast<void***>(&g0);
            *reinterpret_cast<void***>(ecx43 + 16)(0, 0x180344c8, 2, 0);
            ecx44 = *reinterpret_cast<void***>(&g0);
            *reinterpret_cast<void***>(ecx44 + 8)(0, 0, 0x180344c8, 2, 0);
            goto addr_0x180268a3_2;
        }
    } else {
        if (!v45) {
            goto v46;
        }
    }
    addr_0x18026720_33:
    if (!(*reinterpret_cast<unsigned char*>(&eax29) & 16)) {
        if (!v47) {
            goto v48;
        }
    } else {
        if (!v49) {
            goto v50;
        }
    }
}

void** fun_18026520(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18) {
    void** eax19;
    void** ecx20;

    eax19 = *reinterpret_cast<void***>(ecx + 32);
    ecx20 = *reinterpret_cast<void***>(ecx + 20);
    *reinterpret_cast<int16_t*>(&eax19) = fun_1800da70(ecx20, eax19, 0x3e8, ecx20, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
    return eax19;
}

struct s271 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

struct s272 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

int32_t fun_18025790(void** ecx) {
    void*** esp2;
    void** v3;
    void** ebp4;
    void** ebp5;
    void** al6;
    void** ecx7;
    void** v8;
    void** eax9;
    void** edx10;
    void* ecx11;
    void** v12;
    void** ebx13;
    void** v14;
    void** esi15;
    void*** esp16;
    void** v17;
    void** edi18;
    void* eax19;
    void** esi20;
    void** ebx21;
    void** ecx22;
    void** esi23;
    void** eax24;
    void** v25;
    void** edi26;
    void** ecx27;
    void** v28;
    void** ecx29;
    void** v30;
    void** v31;
    void** v32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** ecx42;
    void** edx43;
    void** ecx44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    uint32_t v53;
    uint32_t v54;
    void** esi55;
    void** v56;
    void** ecx57;
    void* v58;
    void** ecx59;
    int32_t ecx60;
    int32_t ecx61;
    void** esi62;
    int32_t ecx63;
    void** eax64;
    void** ebx65;
    uint32_t ecx66;
    uint32_t ecx67;
    uint32_t ecx68;
    uint32_t eax69;
    uint32_t ecx70;
    uint32_t ecx71;
    void** edx72;
    void** edx73;
    void** eax74;
    void* v75;
    void* v76;
    void* edi77;
    void* v78;
    void** ebx79;
    void** ecx80;
    void** ecx81;
    void** eax82;
    void** ecx83;
    void* v84;
    void** v85;
    void** edx86;
    void*** esp87;
    void** v88;
    void** v89;
    void** v90;
    void** eax91;
    void** v92;
    void** esi93;
    void* eax94;
    uint32_t ecx95;
    int32_t ecx96;
    uint32_t edx97;
    int32_t edx98;
    struct s271* ecx99;
    struct s272* edx100;
    struct s64* edi101;
    void** esi102;
    void** ecx103;
    void** eax104;
    uint32_t v105;
    uint32_t v106;
    uint32_t v107;
    void** edx108;
    void** esi109;
    void** eax110;
    void** ecx111;
    void** esi112;
    void* edi113;
    int32_t ebx114;
    uint32_t eax115;
    uint32_t v116;
    int32_t* esp117;
    void** ecx118;
    void** ecx119;
    void** esi120;
    void** esi121;
    void** edi122;
    void** ecx123;
    int32_t edi124;
    int32_t ebx125;
    int32_t* esp126;
    int32_t* esp127;
    void** ecx128;
    void** ecx129;
    void** eax130;
    void** v131;
    void** v132;
    void** v133;
    void** v134;
    void** v135;
    void** v136;
    void** v137;
    void** v138;
    void** v139;
    void** v140;
    void** v141;
    void** v142;
    void** v143;

    esp2 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x20c - 4);
    v3 = ebp4;
    ebp5 = ecx;
    al6 = *reinterpret_cast<void***>(ebp5 + 6);
    *reinterpret_cast<void***>(ebp5 + 5) = reinterpret_cast<void**>(1);
    if (al6 || (!*reinterpret_cast<void***>(ebp5 + 4) || !*reinterpret_cast<void***>(ebp5 + 12))) {
        addr_0x18025d7f_2:
        return 0;
    } else {
        *reinterpret_cast<void***>(ebp5 + 6) = reinterpret_cast<void**>(1);
        ecx7 = *reinterpret_cast<void***>(ebp5 + 16);
        v8 = ecx7;
        if (ecx7) {
            fun_18027410(ecx7);
            esp2 = esp2 - 4 + 4;
        }
        eax9 = reinterpret_cast<void**>(timeGetTime());
        edx10 = *reinterpret_cast<void***>(ebp5 + 0xa8);
        if (edx10) {
            ecx11 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(eax9) - reinterpret_cast<unsigned char>(edx10));
        } else {
            ecx11 = reinterpret_cast<void*>(0);
        }
        v12 = ebx13;
        v14 = esi15;
        esp16 = esp2 - 4 + 4 - 4 - 4 - 4;
        v17 = edi18;
        *reinterpret_cast<void***>(ebp5 + 0xa8) = eax9;
        if (reinterpret_cast<int32_t>(ecx11) <= reinterpret_cast<int32_t>(5)) 
            goto addr_0x18025838_9;
        edx10 = *reinterpret_cast<void***>(ebp5 + 0x88);
        eax19 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(edx10) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebp5 + 0x84)));
        if (eax19) 
            goto addr_0x1802580a_11;
    }
    addr_0x18025838_9:
    esi20 = *reinterpret_cast<void***>(ebp5 + 0xc4);
    ebx21 = ebp5 + 0xc4;
    if (esi20 != ebx21) {
        do {
            edx10 = *reinterpret_cast<void***>(ebp5 + 16);
            ecx22 = *reinterpret_cast<void***>(esi20 + 8);
            fun_180268e0(ecx22, edx10);
            esp16 = esp16 - 4 - 4 + 4 + 4;
            esi20 = *reinterpret_cast<void***>(esi20);
        } while (esi20 != ebx21);
    }
    esi23 = *reinterpret_cast<void***>(ebx21);
    eax24 = *reinterpret_cast<void***>(ebp5 + 0xc0);
    v25 = eax24;
    if (esi23 != ebx21) {
        edi26 = reinterpret_cast<void**>(esp16 + 0x84);
        do {
            edx10 = *reinterpret_cast<void***>(ebp5 + 0x8c);
            ecx27 = *reinterpret_cast<void***>(esi23 + 8);
            *reinterpret_cast<int16_t*>(&eax24) = fun_180268f0(ecx27, edx10, edi26, v17);
            esp16 = esp16 - 4 - 4 - 4 + 8 + 4;
            if (!eax24 && (edx10 = *reinterpret_cast<void***>(ebp5 + 0x8c), eax24 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v28) - reinterpret_cast<unsigned char>(edx10)), !(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax24) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax24 == 0)))) {
                ecx29 = *reinterpret_cast<void***>(ebp5 + 24);
                *reinterpret_cast<int16_t*>(&eax24) = fun_1800da70(ecx29, eax24, 0x3e8, ecx29, v17, v14, v12, v3, v30, v25, v31, v32, v33, v34, v8, v35, v36, v37, v38, v39, v40, v41);
                esp16 = esp16 - 4 - 4 - 4 - 4 + 12 + 4;
                ecx42 = *reinterpret_cast<void***>(ebp5 + 0x70);
                if (ecx42) {
                    if (reinterpret_cast<signed char>(eax24) <= reinterpret_cast<signed char>(*reinterpret_cast<void***>(ebp5 + 0x78))) {
                        if (reinterpret_cast<signed char>(eax24) >= reinterpret_cast<signed char>(*reinterpret_cast<void***>(ebp5 + 0x74))) {
                            addr_0x180258c4_19:
                            edx43 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebp5 + 0x7c)) + reinterpret_cast<unsigned char>(eax24));
                            *reinterpret_cast<void***>(ebp5 + 0x70) = ecx42 + 1;
                            *reinterpret_cast<void***>(ebp5 + 0x7c) = edx43;
                            edx10 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax24) * reinterpret_cast<unsigned char>(eax24));
                            ecx44 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebp5 + 0x80)) + reinterpret_cast<unsigned char>(edx10));
                            *reinterpret_cast<void***>(ebp5 + 0x80) = ecx44;
                            eax24 = *reinterpret_cast<void***>(ebp5 + 0x70);
                            if (reinterpret_cast<int1_t>(eax24 == 1)) {
                                fun_180323c0(ecx44, 0x18043f18, v17, v14, v12, v3, v45, v25, v46, v47, v48, v49, v8, v50, v51, v52);
                                esp16 = esp16 - 4 - 4 + 4 + 4;
                            }
                        } else {
                            addr_0x180258c1_21:
                            *reinterpret_cast<void***>(ebp5 + 0x74) = eax24;
                            goto addr_0x180258c4_19;
                        }
                    } else {
                        *reinterpret_cast<void***>(ebp5 + 0x78) = eax24;
                        goto addr_0x180258c4_19;
                    }
                } else {
                    *reinterpret_cast<void***>(ebp5 + 0x78) = eax24;
                    goto addr_0x180258c1_21;
                }
            }
            esi23 = *reinterpret_cast<void***>(esi23);
            edi26 = edi26 + 4;
        } while (esi23 != ebx21);
    }
    v53 = v54;
    if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(ebp5 + 0xac)) > reinterpret_cast<signed char>(1) && (esi55 = *reinterpret_cast<void***>(ebx21), v56 = reinterpret_cast<void**>(0), esi55 != ebx21)) {
        do {
            if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(v56) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(v56 == 0)) && (ecx57 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(v58) - v53), reinterpret_cast<signed char>((reinterpret_cast<unsigned char>(ecx57) ^ reinterpret_cast<unsigned char>(edx10)) - reinterpret_cast<unsigned char>(edx10)) > reinterpret_cast<signed char>(*reinterpret_cast<void***>(ebp5 + 0x90)))) {
                ecx59 = *reinterpret_cast<void***>(esi55 + 8);
                fun_18026ca0(ecx59, ecx57, v17, v14, v12);
                esp16 = esp16 - 4 - 4 + 4 + 4;
            }
            esi55 = *reinterpret_cast<void***>(esi55);
            edx10 = v56 + 1;
            v56 = edx10;
        } while (esi55 != ebx21);
    }
    if (!v53) {
        addr_0x18025d53_31:
        if (*reinterpret_cast<void***>(ebp5 + 5) && !*reinterpret_cast<void***>(ebp5 + 0xa0)) {
            fun_180256c0(ebp5);
        }
    } else {
        ecx60 = 6;
        do {
            --ecx60;
        } while (ecx60);
        ecx61 = 6;
        do {
            --ecx61;
        } while (ecx61);
        esi62 = *reinterpret_cast<void***>(ebp5 + 0xc4);
        if (esi62 == ebp5 + 0xc4) 
            goto addr_0x18025a49_38; else 
            goto addr_0x18025a0c_39;
    }
    if (v8) {
        fun_18027490(v8);
    }
    *reinterpret_cast<void***>(ebp5 + 6) = reinterpret_cast<void**>(0);
    goto addr_0x18025d7f_2;
    addr_0x18025a49_38:
    ecx63 = 6;
    do {
        --ecx63;
    } while (ecx63);
    eax64 = v25;
    ebx65 = v25;
    ecx66 = reinterpret_cast<uint32_t>(eax64 + reinterpret_cast<unsigned char>(eax64) * 4) << 2 >> 2;
    while (ecx66) {
        --ecx66;
    }
    ecx67 = 0;
    while (ecx67) {
        --ecx67;
    }
    ecx68 = reinterpret_cast<unsigned char>(eax64) * 4;
    eax69 = ecx68;
    ecx70 = ecx68 >> 2;
    while (ecx70) {
        --ecx70;
    }
    ecx71 = eax69 & 3;
    while (ecx71) {
        --ecx71;
    }
    while (1) {
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(ebx65) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(ebx65 == 0))) {
            edx72 = ebx65;
            do {
                --edx72;
            } while (edx72);
        }
        do {
            edx73 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp16) + (reinterpret_cast<unsigned char>(ebx65) << 2) + 60);
            if (esp16 + 60 != edx73 && (eax74 = reinterpret_cast<void**>(esp16 + 64), esp16 + 64 != edx73)) {
                do {
                    if (reinterpret_cast<int32_t>(v75) < reinterpret_cast<int32_t>(v76)) {
                    }
                    ++eax74;
                } while (eax74 != edx73);
            }
            edi77 = v78;
            ebx79 = ebp5 + 0xc4;
            ecx80 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebp5 + 0xc4) + 8) + 48;
            ecx81 = *reinterpret_cast<void***>(ecx80 + 12);
            if (!ecx81) {
                eax82 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx80 + 8)) * reinterpret_cast<uint32_t>(edi77));
            } else {
                eax82 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(edi77) << *reinterpret_cast<unsigned char*>(&ecx81));
            }
            ecx83 = *reinterpret_cast<void***>(ebp5 + 12);
            v84 = reinterpret_cast<void*>(esp16 + 36);
            v85 = eax82;
            edx86 = *reinterpret_cast<void***>(ecx83);
            esp87 = esp16 - 4 - 4 - 4;
            v88 = v25;
            v89 = reinterpret_cast<void**>(esp87 + 0xa8);
            v90 = ecx83;
            *reinterpret_cast<void***>(edx86 + 36)(v90, v89, v88, v85);
            esp16 = esp87 - 4 - 4 - 4 + 4;
            if (!0) {
                v12 = reinterpret_cast<void**>(0);
            }
            eax91 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(v84) + reinterpret_cast<uint32_t>(edi77));
            v92 = eax91;
            if (reinterpret_cast<signed char>(eax91) >= reinterpret_cast<signed char>(v14)) 
                goto addr_0x18025c2f_69;
            ebx65 = v17;
            esi93 = reinterpret_cast<void**>(0);
        } while (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(ebx65) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(ebx65 == 0));
        eax94 = reinterpret_cast<void*>(0);
        do {
            ecx95 = *reinterpret_cast<int32_t*>(esp16 + reinterpret_cast<unsigned char>(esi93) * 4 + 60) - reinterpret_cast<uint32_t>(edi77);
            *reinterpret_cast<uint32_t*>(esp16 + reinterpret_cast<unsigned char>(esi93) * 4 + 60) = ecx95;
            if (ecx95) {
                ecx96 = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esp16) + reinterpret_cast<int32_t>(eax94) + 0xc4);
                if (ecx96 < 0) {
                    edx97 = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esp16) + reinterpret_cast<int32_t>(eax94) + 0xc0) * reinterpret_cast<uint32_t>(edi77);
                } else {
                    edx97 = reinterpret_cast<uint32_t>(edi77) << *reinterpret_cast<unsigned char*>(&ecx96);
                }
                *reinterpret_cast<uint32_t*>(reinterpret_cast<int32_t>(esp16) + reinterpret_cast<int32_t>(eax94) + 0xb4) = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esp16) + reinterpret_cast<int32_t>(eax94) + 0xb4) + edx97;
            } else {
                edx98 = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esp16) + reinterpret_cast<int32_t>(eax94) + 0x12c);
                *reinterpret_cast<int32_t*>(esp16 + reinterpret_cast<unsigned char>(esi93) * 4 + 60) = *reinterpret_cast<int32_t*>(esp16 + reinterpret_cast<unsigned char>(esi93) * 4 + 0x6c);
                ecx99 = reinterpret_cast<struct s271*>(reinterpret_cast<int32_t>(esp16) + reinterpret_cast<int32_t>(eax94) + 0x130);
                *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esp16) + reinterpret_cast<int32_t>(eax94) + 0xb4) = edx98;
                edx100 = reinterpret_cast<struct s272*>(reinterpret_cast<int32_t>(esp16) + reinterpret_cast<int32_t>(eax94) + 0xb8);
                edx100->f0 = ecx99->f0;
                edx100->f4 = ecx99->f4;
                edx100->f8 = ecx99->f8;
                ebx65 = v17;
                edx100->f12 = ecx99->f12;
            }
            ++esi93;
            eax94 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(eax94) + 20);
        } while (reinterpret_cast<signed char>(esi93) < reinterpret_cast<signed char>(ebx65));
    }
    addr_0x18025c2f_69:
    if (v3) {
        fun_18027460(v3, v90, v89, v88, v85, v92);
        esp16 = esp16 - 4 + 4;
    }
    edi101 = reinterpret_cast<struct s64*>(ebp5 + 44);
    if (*reinterpret_cast<void***>(ebp5 + 44)) {
        esi102 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx79) + 8) + 48;
        ecx103 = *reinterpret_cast<void***>(esi102 + 12);
        if (!ecx103) {
            eax104 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi102 + 8)) * v105);
        } else {
            eax104 = reinterpret_cast<void**>(v106 << *reinterpret_cast<unsigned char*>(&ecx103));
        }
        fun_1802b1e0(edi101, 0, eax104, v90, v89, v88, v85, v92);
        esp16 = esp16 - 4 - 4 - 4 + 8 + 4;
        if (v107) {
            edx108 = *reinterpret_cast<void***>(esi102 + 8);
            esi109 = *reinterpret_cast<void***>(esi102 + 12);
            if (!esi109) {
                eax110 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx108) * v107);
            } else {
                ecx111 = esi109;
                eax110 = reinterpret_cast<void**>(v107 << *reinterpret_cast<unsigned char*>(&ecx111));
            }
            fun_1802b1e0(edi101, 0, eax110, v90, v89, v88, v85, v92);
            esp16 = esp16 - 4 - 4 - 4 + 8 + 4;
        }
    }
    esi112 = *reinterpret_cast<void***>(ebx79);
    if (esi112 != ebx79) {
        edi113 = reinterpret_cast<void*>(0);
        ebx114 = 0;
        do {
            eax115 = *reinterpret_cast<uint32_t*>(reinterpret_cast<int32_t>(esp16) + reinterpret_cast<int32_t>(edi113) + 84);
            v116 = *reinterpret_cast<uint32_t*>(reinterpret_cast<int32_t>(esp16) + reinterpret_cast<int32_t>(edi113) + 0x6c);
            esp117 = reinterpret_cast<int32_t*>(esp16 - 4 - 4);
            ecx118 = *reinterpret_cast<void***>(esi112 + 8);
            fun_18026ba0(ecx118, reinterpret_cast<int32_t>(esp117) + ebx114 + 0x1ac, eax115, reinterpret_cast<int32_t>(esp16) + ebx114 + 0x12c, v116, v90, v89, v88, v85, v92);
            esp16 = reinterpret_cast<void***>(esp117 - 1 - 1 - 1 + 4 + 1);
            esi112 = *reinterpret_cast<void***>(esi112);
            edi113 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(edi113) + 4);
            ebx114 = ebx114 + 20;
        } while (esi112 != ebp5 + 0xc4);
    }
    if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebp5 + 92)) & 2)) {
        if (!v12) {
            *reinterpret_cast<void***>(ebp5 + 0x6c) = reinterpret_cast<void**>(0);
            goto addr_0x18025d53_31;
        } else {
            ecx119 = *reinterpret_cast<void***>(ebp5 + 100);
            esi120 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebp5 + 0x6c)) + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebp5 + 0x88)));
            *reinterpret_cast<void***>(ebp5 + 0x6c) = esi120;
            if (reinterpret_cast<signed char>(esi120) >= reinterpret_cast<signed char>(ecx119)) {
                esi121 = *reinterpret_cast<void***>(ebp5 + 0xc4);
                edi122 = ebp5 + 0xc4;
                if (esi121 != edi122) {
                    do {
                        ecx123 = *reinterpret_cast<void***>(esi121 + 8);
                        fun_18026e90(ecx123, v90, v89, v88, v85, v92);
                        esi121 = *reinterpret_cast<void***>(esi121);
                    } while (esi121 != edi122);
                }
                fun_18025740(ebp5, v90, v89, v88, v85, v92);
                *reinterpret_cast<void***>(ebp5 + 5) = reinterpret_cast<void**>(0);
                goto addr_0x18025d53_31;
            }
        }
    }
    addr_0x18025a0c_39:
    edi124 = 0;
    ebx125 = 0;
    do {
        esp126 = reinterpret_cast<int32_t*>(esp16 - 4);
        esp127 = esp126 - 1;
        ecx128 = *reinterpret_cast<void***>(esi62 + 8);
        fun_18026a60(ecx128, v53, reinterpret_cast<int32_t>(esp127) + ebx125 + 0x1ac, reinterpret_cast<int32_t>(esp126) + edi124 + 88, reinterpret_cast<int32_t>(esp16) + ebx125 + 0x12c, reinterpret_cast<int32_t>(esp16) + edi124 + 0x6c);
        esp16 = reinterpret_cast<void***>(esp127 - 1 - 1 - 1 - 1 + 5 + 1);
        esi62 = *reinterpret_cast<void***>(esi62);
        edi124 = edi124 + 4;
        ebx125 = ebx125 + 20;
    } while (esi62 != ebp5 + 0xc4);
    goto addr_0x18025a49_38;
    addr_0x1802580a_11:
    if (reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(eax19) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(eax19 == 0)) {
        ++edx10;
    } else {
        if (reinterpret_cast<int32_t>(ecx11) <= reinterpret_cast<int32_t>(1)) {
            addr_0x1802581d_103:
            ecx129 = *reinterpret_cast<void***>(ebp5 + 24);
            eax130 = *reinterpret_cast<void***>(ebp5 + 0x88);
            *reinterpret_cast<int16_t*>(&eax130) = fun_1800da70(ecx129, eax130, ecx129, 0x3e8, v17, v14, v12, v3, v131, v132, v133, v134, v135, v136, v8, v137, v138, v139, v140, v141, v142, v143);
            esp16 = esp16 - 4 - 4 - 4 - 4 + 12 + 4;
            *reinterpret_cast<void***>(ebp5 + 0x8c) = eax130;
            goto addr_0x18025838_9;
        } else {
            --edx10;
        }
    }
    *reinterpret_cast<void***>(ebp5 + 0x88) = edx10;
    goto addr_0x1802581d_103;
}

void fun_18026dd0(void** ecx, void** a2, void* a3) {
    void* esp4;
    void** esp5;
    void* v6;
    void* v7;
    void** esi8;
    void* v9;
    void** eax10;
    void** ecx11;
    int32_t eax12;
    int32_t edx13;
    int1_t zf14;
    uint32_t edx15;
    void* ebp16;
    void** edi17;
    uint32_t ebx18;
    void** eax19;
    uint32_t ecx20;
    uint32_t ecx21;
    void** esi22;
    void** ecx23;
    void* edx24;
    uint32_t ecx25;
    void* ecx26;

    esp4 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 8 - 4 - 4 - 4);
    esp5 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp4) - 4);
    v6 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp4) + 28);
    v7 = reinterpret_cast<void*>(esp5 + 5);
    esi8 = ecx;
    v9 = reinterpret_cast<void*>(esp5 - 1 + 5);
    eax10 = *reinterpret_cast<void***>(esi8 + 4);
    ecx11 = *reinterpret_cast<void***>(eax10);
    eax12 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(ecx11 + 44)());
    if (eax12 < 0) {
        addr_0x18026e7b_2:
        goto v9;
    } else {
        edx13 = 0;
        zf14 = reinterpret_cast<int1_t>(*reinterpret_cast<void***>(esi8 + 26) == 8);
        *reinterpret_cast<unsigned char*>(&edx13) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(!zf14));
        edx15 = reinterpret_cast<uint32_t>(edx13 - 1) & 0x80;
        ebp16 = a3;
        edi17 = a2;
        *reinterpret_cast<signed char*>(&ebx18) = *reinterpret_cast<signed char*>(&edx15);
        *reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(&ebx18) + 1) = *reinterpret_cast<signed char*>(&ebx18);
        eax19 = reinterpret_cast<void**>(ebx18 << 16);
        *reinterpret_cast<int16_t*>(&eax19) = *reinterpret_cast<int16_t*>(&ebx18);
        ecx20 = reinterpret_cast<uint32_t>(a3) >> 2;
        while (ecx20) {
            --ecx20;
            *reinterpret_cast<void***>(edi17) = eax19;
            edi17 = edi17 + 4;
            esi8 = esi8 + 4;
        }
        ecx21 = reinterpret_cast<uint32_t>(ebp16) & 3;
        while (ecx21) {
            --ecx21;
            *reinterpret_cast<void***>(edi17) = eax19;
            ++edi17;
            ++esi8;
        }
        if (v6) 
            goto addr_0x18026e43_10;
    }
    addr_0x18026e63_11:
    esi22 = *reinterpret_cast<void***>(esi8 + 4);
    ecx23 = *reinterpret_cast<void***>(esi22);
    *reinterpret_cast<void***>(ecx23 + 76)();
    goto addr_0x18026e7b_2;
    addr_0x18026e43_10:
    edx24 = v7;
    ecx25 = reinterpret_cast<uint32_t>(v7) >> 2;
    while (ecx25) {
        --ecx25;
        esi8 = esi8 + 4;
    }
    ecx26 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(edx24) & 3);
    while (ecx26) {
        ecx26 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx26) - 1);
        ++esi8;
    }
    goto addr_0x18026e63_11;
}

void fun_1802b100(struct s64* ecx);

void** fun_180248d0(void** ecx) {
    *reinterpret_cast<void***>(ecx + 4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 5) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 6) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 16) = reinterpret_cast<void**>(0);
    fun_1802b100(ecx + 44);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035194);
    return ecx;
}

void fun_18024ca0(void** ecx, void** a2, void** a3, void** a4) {
    void** esi5;
    void** edi6;
    void** esi7;
    void** ebx8;
    void** eax9;
    void** ebx10;
    void** eax11;
    void** edi12;
    void** ecx13;
    void** eax14;
    void** ebx15;
    void** eax16;
    void** edi17;
    void** ecx18;

    esi5 = ecx;
    if (a3) {
        eax9 = fun_1802b2bb(ecx, 36, edi6, esi7, ebx8, __return_address(), a2, a3, a4);
        if (!eax9) {
            ebx10 = reinterpret_cast<void**>(0);
        } else {
            ecx = eax9;
            *reinterpret_cast<int16_t*>(&eax9) = fun_18025d90(ecx, a3);
            ebx10 = eax9;
        }
        eax11 = *reinterpret_cast<void***>(esi5 + 0xbc);
        edi12 = *reinterpret_cast<void***>(esi5 + 0xb0);
        if (!eax11) {
            eax11 = fun_1802b2bb(ecx, 12, edi6, esi7, ebx8, __return_address(), a2, a3, a4);
        } else {
            ecx = *reinterpret_cast<void***>(eax11);
            *reinterpret_cast<void***>(esi5 + 0xbc) = ecx;
        }
        if (eax11) {
            ecx13 = eax11 + 8;
            if (ecx13) {
                *reinterpret_cast<void***>(ecx13) = ebx10;
            }
            *reinterpret_cast<void***>(eax11) = edi12;
            *reinterpret_cast<void***>(eax11 + 4) = *reinterpret_cast<void***>(edi12 + 4);
            ecx = *reinterpret_cast<void***>(edi12 + 4);
            *reinterpret_cast<void***>(ecx) = eax11;
            *reinterpret_cast<void***>(edi12 + 4) = eax11;
            *reinterpret_cast<void***>(esi5 + 0xac) = *reinterpret_cast<void***>(esi5 + 0xac) + 1;
        }
    }
    eax14 = fun_1802b2bb(ecx, 36, edi6, esi7, ebx8, __return_address(), a2, a3, a4);
    if (!eax14) {
        ebx15 = reinterpret_cast<void**>(0);
    } else {
        ecx = eax14;
        *reinterpret_cast<int16_t*>(&eax14) = fun_18025d90(ecx, a2);
        ebx15 = eax14;
    }
    eax16 = *reinterpret_cast<void***>(esi5 + 0xbc);
    edi17 = *reinterpret_cast<void***>(esi5 + 0xb0);
    if (!eax16) {
        eax16 = fun_1802b2bb(ecx, 12, edi6, esi7, ebx8, __return_address(), a2, a3, a4);
    } else {
        *reinterpret_cast<void***>(esi5 + 0xbc) = *reinterpret_cast<void***>(eax16);
    }
    if (eax16) {
        ecx18 = eax16 + 8;
        if (ecx18) {
            *reinterpret_cast<void***>(ecx18) = ebx15;
        }
        *reinterpret_cast<void***>(eax16) = edi17;
        *reinterpret_cast<void***>(eax16 + 4) = *reinterpret_cast<void***>(edi17 + 4);
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(edi17 + 4)) = eax16;
        *reinterpret_cast<void***>(edi17 + 4) = eax16;
        *reinterpret_cast<void***>(esi5 + 0xac) = *reinterpret_cast<void***>(esi5 + 0xac) + 1;
    }
    return;
}

void fun_18024d80(void** ecx, void** a2, void** a3, void** a4) {
    void** esi5;
    void** edi6;
    void** esi7;
    void** ebx8;
    void** eax9;
    void** ebx10;
    void** eax11;
    void** edi12;
    void** ecx13;
    void** eax14;
    void** ebx15;
    void** eax16;
    void** eax17;
    void** edi18;
    void** ecx19;

    esi5 = ecx;
    if (a3) {
        eax9 = fun_1802b2bb(ecx, 36, edi6, esi7, ebx8, __return_address(), a2, a3, a4);
        if (!eax9) {
            ebx10 = reinterpret_cast<void**>(0);
        } else {
            ecx = eax9;
            *reinterpret_cast<int16_t*>(&eax9) = fun_18025e00(ecx, a3);
            ebx10 = eax9;
        }
        eax11 = *reinterpret_cast<void***>(esi5 + 0xbc);
        edi12 = *reinterpret_cast<void***>(esi5 + 0xb0);
        if (!eax11) {
            eax11 = fun_1802b2bb(ecx, 12, edi6, esi7, ebx8, __return_address(), a2, a3, a4);
        } else {
            ecx = *reinterpret_cast<void***>(eax11);
            *reinterpret_cast<void***>(esi5 + 0xbc) = ecx;
        }
        if (eax11) {
            ecx13 = eax11 + 8;
            if (ecx13) {
                *reinterpret_cast<void***>(ecx13) = ebx10;
            }
            *reinterpret_cast<void***>(eax11) = edi12;
            *reinterpret_cast<void***>(eax11 + 4) = *reinterpret_cast<void***>(edi12 + 4);
            ecx = *reinterpret_cast<void***>(edi12 + 4);
            *reinterpret_cast<void***>(ecx) = eax11;
            *reinterpret_cast<void***>(edi12 + 4) = eax11;
            *reinterpret_cast<void***>(esi5 + 0xac) = *reinterpret_cast<void***>(esi5 + 0xac) + 1;
        }
    }
    if (!a2) {
        eax14 = fun_1802b2bb(ecx, 36, edi6, esi7, ebx8, __return_address(), a2, a3, a4);
        if (!eax14) {
            addr_0x18024e2e_14:
            ebx15 = reinterpret_cast<void**>(0);
        } else {
            ecx = eax14;
            *reinterpret_cast<int16_t*>(&eax14) = fun_18025d90(ecx, 0x18045910);
            ebx15 = eax14;
        }
    } else {
        eax16 = fun_1802b2bb(ecx, 36, edi6, esi7, ebx8, __return_address(), a2, a3, a4);
        if (!eax16) 
            goto addr_0x18024e2e_14;
        ecx = eax16;
        *reinterpret_cast<int16_t*>(&eax16) = fun_18025e00(ecx, a2);
        ebx15 = eax16;
    }
    eax17 = *reinterpret_cast<void***>(esi5 + 0xbc);
    edi18 = *reinterpret_cast<void***>(esi5 + 0xb0);
    if (!eax17) {
        eax17 = fun_1802b2bb(ecx, 12, edi6, esi7, ebx8, __return_address(), a2, a3, a4);
    } else {
        *reinterpret_cast<void***>(esi5 + 0xbc) = *reinterpret_cast<void***>(eax17);
    }
    if (eax17) {
        ecx19 = eax17 + 8;
        if (ecx19) {
            *reinterpret_cast<void***>(ecx19) = ebx15;
        }
        *reinterpret_cast<void***>(eax17) = edi18;
        *reinterpret_cast<void***>(eax17 + 4) = *reinterpret_cast<void***>(edi18 + 4);
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(edi18 + 4)) = eax17;
        *reinterpret_cast<void***>(edi18 + 4) = eax17;
        *reinterpret_cast<void***>(esi5 + 0xac) = *reinterpret_cast<void***>(esi5 + 0xac) + 1;
    }
    return;
}

int16_t fun_18027a10(void** ecx, void** a2) {
    void** esi3;
    int32_t ecx4;
    void*** edi5;
    void** eax6;

    esi3 = ecx;
    fun_180274d0(ecx);
    ecx4 = 6;
    *reinterpret_cast<void***>(esi3 + 0x198) = a2;
    *reinterpret_cast<void***>(esi3 + 0x19c) = a2;
    edi5 = reinterpret_cast<void***>(esi3 + 0x1a0);
    *reinterpret_cast<void***>(esi3) = reinterpret_cast<void**>(0x18035218);
    while (ecx4) {
        --ecx4;
        *edi5 = reinterpret_cast<void**>(0);
        edi5 = edi5 + 4;
        esi3 = esi3 + 4;
    }
    eax6 = esi3;
    return *reinterpret_cast<int16_t*>(&eax6);
}

void fun_180281c0(struct s195* ecx, void** a2) {
    void** eax3;
    void** eax4;
    void** eax5;

    eax3 = ecx->f472;
    if (eax3 && (eax4 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax3) - reinterpret_cast<unsigned char>(a2)), ecx->f472 = eax4, !eax4)) {
        eax5 = *reinterpret_cast<void***>(&ecx->f460);
        *reinterpret_cast<void***>(&ecx->f464) = reinterpret_cast<void**>(0);
        ecx->f456 = eax5;
    }
    ecx->f476 = 0;
    return;
}

int16_t fun_18028000(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26) {
    void** ecx27;
    void** edx28;
    void*** esp29;
    void** esi30;
    void** v31;
    void** v32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** eax46;

    fun_18027fe0(ecx, a4);
    *reinterpret_cast<void***>(ecx + 0x1b8) = a2;
    ecx27 = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1bc) = a3;
    *reinterpret_cast<void***>(ecx + 0x1c4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1c8) = reinterpret_cast<void**>(0x10000);
    *reinterpret_cast<void***>(ecx + 0x1cc) = reinterpret_cast<void**>(0x10000);
    *reinterpret_cast<void***>(ecx + 0x1d0) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1d4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1d8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1dc) = reinterpret_cast<void**>(1);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035328);
    *reinterpret_cast<void***>(ecx + 0x1c0) = *reinterpret_cast<void***>(a3 + 12);
    *reinterpret_cast<int16_t*>(&ecx27) = *reinterpret_cast<int16_t*>(a3 + 22);
    edx28 = *reinterpret_cast<void***>(a3 + 12);
    esp29 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 - 4 - 4 + 4 + 4 - 4 - 4);
    fun_18027240(esp29 + 12, 1, edx28, ecx27, esi30, v31, v32, v33, v34, v35, __return_address(), a2, a3, a4, a5, a6);
    fun_18027620(ecx, esp29 - 4 - 4 - 4 + 16 + 4 + 4, esi30, v36, v37, v38, v39);
    v40 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x1bc) + 44);
    fun_18027ad0(ecx, v40, esi30, v41, v42, v43, v44, v45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_18027fe0(void** ecx, void** a2) {
    void** eax3;

    fun_18027a10(ecx, a2);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180352f0);
    eax3 = ecx;
    return *reinterpret_cast<int16_t*>(&eax3);
}

int16_t fun_18028d60(void** ecx, void** a2, void** a3) {
    void** edi4;
    void** esi5;
    void** ecx6;
    void** eax7;

    fun_180274d0(ecx);
    *reinterpret_cast<void***>(ecx + 0x198) = a2;
    *reinterpret_cast<void***>(ecx + 0x19c) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 0x1a0) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035420);
    fun_18027620(ecx, a3, edi4, esi5, __return_address(), a2, a3);
    ecx6 = reinterpret_cast<void**>(0);
    eax7 = ecx;
    ecx6 = *reinterpret_cast<void***>(a3 + 2);
    *reinterpret_cast<void***>(ecx + 44) = ecx6;
    return *reinterpret_cast<int16_t*>(&eax7);
}

struct s273 {
    void** f0;
    signed char[127] pad128;
    int32_t f128;
};

void fun_18029170(void** ecx, void** a2, void** a3, int32_t a4) {
    int32_t esi5;
    int32_t eax6;
    uint32_t edx7;
    int32_t eax8;
    struct s273* edx9;
    void** v10;

    if (a4 >= 100) {
        __asm__("cdq ");
        esi5 = 0;
        __asm__("cdq ");
        __asm__("cdq ");
        eax6 = reinterpret_cast<int32_t>(a4 + (edx7 & 63)) >> 6;
        if (eax6 < 32) {
        }
        eax8 = 0;
        __asm__("fild dword [ebp+0x10]");
        *reinterpret_cast<int32_t*>(ecx + 0x348) = eax6;
        __asm__("fild dword [ebp+0x8]");
        __asm__("fdivr st0, st1");
        __asm__("fstp dword [ebp+0xc]");
        __asm__("fld qword [0x180346d8]");
        __asm__("fdiv st0, st1");
        __asm__("fstp dword [ebp-0xc]");
        __asm__("fstp st0");
        if (!(reinterpret_cast<uint1_t>(eax6 < 0) | reinterpret_cast<uint1_t>(eax6 == 0))) {
            __asm__("fild dword [ebp-0x4]");
            edx9 = reinterpret_cast<struct s273*>(ecx + 0x350);
            __asm__("fstp dword [ebp-0x4]");
            __asm__("fild dword [ebp-0x8]");
            __asm__("fstp dword [ebp-0x10]");
            do {
                ++eax8;
                __asm__("fild dword [ebp+0x8]");
                __asm__("fmul dword [ebp+0xc]");
                __asm__("fstp dword [ebp+0x8]");
                __asm__("fld dword [ebp+0x8]");
                __asm__("fistp dword [ebp+0x10]");
                __asm__("fld dword [ebp+0x8]");
                __asm__("fmul dword [ebp-0xc]");
                edx9->f128 = a4 - esi5;
                __asm__("fstp dword [ebp+0x8]");
                __asm__("fld dword [ebp+0x8]");
                __asm__("fsin ");
                __asm__("fstp dword [ebp-0x8]");
                __asm__("fld dword [ebp-0x8]");
                __asm__("fmul dword [ebp-0x4]");
                __asm__("fadd dword [ebp-0x10]");
                __asm__("fstp dword [ebp+0x8]");
                __asm__("fld dword [ebp+0x8]");
                __asm__("fistp dword [ebp-0x14]");
                edx9->f0 = v10;
                esi5 = a4;
                edx9 = reinterpret_cast<struct s273*>(reinterpret_cast<uint32_t>(edx9) + 4);
            } while (eax8 < *reinterpret_cast<int32_t*>(ecx + 0x348));
        }
        *reinterpret_cast<int32_t*>(ecx + 0x344) = 0;
        *reinterpret_cast<int32_t*>(ecx + 0x34c) = 0;
        return;
    } else {
        fun_18029120(ecx, a2, a3, a4);
        return;
    }
}

void* fun_18028eb0(struct s193* ecx, void** a2) {
    struct s194* eax3;
    uint32_t eax4;
    void* esp5;
    uint32_t ecx6;
    uint32_t* eax7;
    uint32_t* eax8;

    eax3 = *ecx->f408;
    eax4 = reinterpret_cast<uint32_t>(eax3->f8());
    esp5 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4 + 4);
    ecx6 = reinterpret_cast<unsigned char>(a2) + ecx->f412;
    if (reinterpret_cast<int32_t>(ecx6) > reinterpret_cast<int32_t>(eax4)) {
        eax7 = reinterpret_cast<uint32_t*>(reinterpret_cast<int32_t>(esp5) + 4);
        ecx->f412 = eax4;
        return *reinterpret_cast<void**>(&eax7);
    } else {
        eax8 = reinterpret_cast<uint32_t*>(reinterpret_cast<int32_t>(esp5) + 12);
        ecx->f412 = ecx6;
        return *reinterpret_cast<void**>(&eax8);
    }
}

int16_t fun_180292a0(void** ecx, void** a2) {
    void** eax3;

    fun_18027a10(ecx, a2);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035468);
    eax3 = ecx;
    return *reinterpret_cast<int16_t*>(&eax3);
}

void fun_1802a3e0(void** ecx) {
    int32_t v2;
    int32_t ebx3;
    int32_t v4;
    int32_t ebp5;
    void** esi6;
    int32_t eax7;
    void** ebp8;
    int32_t ebx9;
    void* edi10;
    void* eax11;
    void** edx12;
    int32_t eax13;

    v2 = ebx3;
    v4 = ebp5;
    esi6 = ecx;
    eax7 = reinterpret_cast<int32_t>(waveOutReset());
    if (!eax7) {
        ebp8 = reinterpret_cast<void**>(0);
        if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi6 + 0x70)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(esi6 + 0x70) == 0)) {
            addr_0x1802a436_3:
            waveOutClose();
            *reinterpret_cast<void***>(esi6 + 0x68) = reinterpret_cast<void**>(0);
            *reinterpret_cast<void***>(esi6 + 4) = reinterpret_cast<void**>(0);
            goto v4;
        } else {
            ebx9 = waveOutUnprepareHeader;
            edi10 = reinterpret_cast<void*>(0);
            do {
                eax11 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(edi10) + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi6 + 0x74)));
                if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(edi10) + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi6 + 0x74)) + 16) & 2)) 
                    continue;
                edx12 = *reinterpret_cast<void***>(esi6 + 0x68);
                eax13 = reinterpret_cast<int32_t>(ebx9(edx12, eax11, 32));
                if (eax13) 
                    break;
                ++ebp8;
                edi10 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(edi10) + 32);
            } while (reinterpret_cast<signed char>(ebp8) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi6 + 0x70)));
            goto addr_0x1802a436_3;
        }
    }
    goto v2;
}

struct s274 {
    signed char[12] pad12;
    void** f12;
};

int16_t fun_1802a5b0(int32_t a1, int32_t a2, int32_t a3, struct s274* a4);

struct s275 {
    signed char[16] pad16;
    int32_t f16;
};

int16_t fun_1802a1a0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** v7;
    void** v8;
    void** esi9;
    void** esi10;
    void** v11;
    void** edi12;
    void** eax13;
    void** edi14;
    uint32_t ecx15;
    uint32_t ecx16;
    void** ecx17;
    void** eax18;
    void** edx19;
    void* edx20;
    void** eax21;
    struct s275* eax22;

    v7 = reinterpret_cast<void**>(__return_address());
    v8 = esi9;
    esi10 = ecx;
    v11 = edi12;
    *reinterpret_cast<void***>(esi10 + 100) = a4;
    *reinterpret_cast<void***>(esi10 + 92) = a3;
    *reinterpret_cast<void***>(esi10 + 0x70) = reinterpret_cast<void**>(3);
    *reinterpret_cast<void***>(esi10 + 96) = a5;
    eax13 = fun_1802b2bb(a3, 96, v11, v8, v7, a2, a3, a4, a5);
    edi14 = eax13;
    *reinterpret_cast<void***>(esi10 + 0x74) = edi14;
    if (!edi14) {
        return 4;
    }
    ecx15 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi10 + 0x70)) << 5 >> 2;
    while (ecx15) {
        --ecx15;
        *reinterpret_cast<void***>(edi14) = reinterpret_cast<void**>(0);
        edi14 = edi14 + 4;
        esi10 = esi10 + 4;
    }
    ecx16 = 0;
    while (ecx16) {
        --ecx16;
        *reinterpret_cast<void***>(edi14) = reinterpret_cast<void**>(0);
        ++edi14;
        ++esi10;
    }
    ecx17 = reinterpret_cast<void**>(0);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi10 + 0x70)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(esi10 + 0x70) == 0))) 
        goto addr_0x1802a1fc_10;
    addr_0x1802a219_11:
    if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi10 + 92)) & 1)) {
        eax18 = fun_1802b2bb(ecx17, 16, v11, v8, v7, a2, a3, a4, a5);
        if (!eax18) {
            eax18 = reinterpret_cast<void**>(0);
        } else {
            *reinterpret_cast<int16_t*>(&eax18) = fun_1800ce30(eax18, 0x18044040, fun_1802a5b0, a6, 0);
        }
        *reinterpret_cast<void***>(esi10 + 0x6c) = eax18;
        if (!eax18) {
            return 4;
        }
    } else {
        *reinterpret_cast<void***>(esi10 + 0x6c) = reinterpret_cast<void**>(0);
    }
    edx19 = *reinterpret_cast<void***>(esi10);
    *reinterpret_cast<void***>(edx19 + 4)(esi10);
    goto v8;
    addr_0x1802a1fc_10:
    edx20 = reinterpret_cast<void*>(0);
    do {
        eax21 = *reinterpret_cast<void***>(esi10 + 0x74);
        *reinterpret_cast<void***>(reinterpret_cast<unsigned char>(eax21) + reinterpret_cast<uint32_t>(edx20) + 12) = esi10;
        eax22 = reinterpret_cast<struct s275*>(reinterpret_cast<unsigned char>(eax21) + reinterpret_cast<uint32_t>(edx20));
        ++ecx17;
        edx20 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(edx20) + 32);
        eax22->f16 = 1;
    } while (reinterpret_cast<signed char>(ecx17) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi10 + 0x70)));
    goto addr_0x1802a219_11;
}

void** fun_1802c484(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6);

void** fun_1802c455(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** esi6;
    void** ebp7;
    void** eax8;

    fun_1802ecf5(a5, esi6, ebp7, __return_address(), a2, a3);
    eax8 = fun_1802c484(ecx, a2, a3, a4, a5, a5);
    fun_1802ed47(a5, a2, a3, a4, a5, a5);
    return eax8;
}

int16_t fun_1802adc0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** v45;
    void** esi46;
    void** v47;
    int16_t ax48;

    if (*reinterpret_cast<void***>(ecx)) {
        v45 = *reinterpret_cast<void***>(ecx);
        fun_1802c3d8(ecx, v45, esi46);
    }
    v47 = *reinterpret_cast<void***>(ecx + 4);
    ax48 = fun_1802b2b0(ecx, v47, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    *reinterpret_cast<void***>(ecx + 4) = reinterpret_cast<void**>(0);
    return ax48;
}

unsigned char fun_1802af00(struct s172* ecx, uint32_t a2, void** a3) {
    void** v4;
    void** esi5;
    void** v6;
    void** edi7;
    struct s172* edi8;
    void** ecx9;
    uint32_t ebx10;
    uint32_t eax11;
    uint32_t ebp12;
    uint32_t esi13;

    v4 = esi5;
    v6 = edi7;
    edi8 = ecx;
    ecx9 = a3;
    ebx10 = reinterpret_cast<uint32_t>((1 << *reinterpret_cast<unsigned char*>(&ecx9)) - 1);
    eax11 = reinterpret_cast<uint32_t>(edi8->f24) & 0xfffffff8;
    if (eax11) {
        fun_1802ae30(edi8, 8 - eax11, v6, v4);
    }
    *reinterpret_cast<int16_t*>(&eax11) = fun_1802ae30(edi8, a3, v6, v4);
    ebp12 = a2;
    esi13 = eax11;
    if ((esi13 & ebx10) != ebp12) {
        do {
            if (edi8->f28) 
                break;
            *reinterpret_cast<int16_t*>(&eax11) = fun_1802ae30(edi8, 8, v6, v4);
            esi13 = esi13 << 8 | eax11;
            eax11 = esi13 & ebx10;
        } while (eax11 != ebp12);
    }
    return static_cast<unsigned char>(reinterpret_cast<uint1_t>(edi8->f28 == 0));
}

struct s276 {
    signed char[4] pad4;
    unsigned char f4;
};

uint32_t fun_1802cadf(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** eax8;
    void** ebx9;
    void** eax10;
    void** v11;
    uint32_t eax12;
    void** ecx13;
    void** esi14;
    void** ebx15;
    void** ebp16;
    int1_t zf17;
    void** edi18;
    void** edi19;
    void** eax20;
    void** ecx21;
    struct s276* eax22;
    uint32_t eax23;
    void** eax24;
    uint32_t eax25;

    eax8 = *reinterpret_cast<void***>(a2 + 12);
    ebx9 = *reinterpret_cast<void***>(a2 + 16);
    if (!(*reinterpret_cast<unsigned char*>(&eax8) & 0x82)) 
        goto addr_0x1802cbeb_2;
    if (*reinterpret_cast<unsigned char*>(&eax8) & 64) 
        goto addr_0x1802cbeb_2;
    if (!(*reinterpret_cast<unsigned char*>(&eax8) & 1)) {
        addr_0x1802cb17_5:
        eax10 = *reinterpret_cast<void***>(a2 + 12);
        *reinterpret_cast<void***>(a2 + 4) = reinterpret_cast<void**>(0);
        v11 = reinterpret_cast<void**>(0);
        *reinterpret_cast<unsigned char*>(&eax10) = reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax10) & 0xef) | 2);
        *reinterpret_cast<void***>(a2 + 12) = eax10;
        if (!(*reinterpret_cast<uint16_t*>(&eax10) & 0x10c) && (a2 != 0x180448c8 && !reinterpret_cast<int1_t>(a2 == 0x180448e8) || (eax12 = fun_180309cc(ebx9), ecx13 = ebx9, !eax12))) {
            fun_18030988(ecx13, a2, esi14, ebx15, ebp16, __return_address(), a1, 0, a3, a4, a5);
            ecx13 = a2;
        }
    } else {
        *reinterpret_cast<void***>(a2 + 4) = reinterpret_cast<void**>(0);
        if (!(*reinterpret_cast<unsigned char*>(&eax8) & 16)) {
            addr_0x1802cbeb_2:
            *reinterpret_cast<unsigned char*>(&eax8) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax8) | 32);
            *reinterpret_cast<void***>(a2 + 12) = eax8;
            goto addr_0x1802cbf0_8;
        } else {
            ecx13 = *reinterpret_cast<void***>(a2 + 8);
            *reinterpret_cast<unsigned char*>(&eax8) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax8) & 0xfe);
            *reinterpret_cast<void***>(a2) = ecx13;
            *reinterpret_cast<void***>(a2 + 12) = eax8;
            goto addr_0x1802cb17_5;
        }
    }
    zf17 = (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 12)) & 0x108) == 0;
    if (zf17) {
        edi18 = reinterpret_cast<void**>(1);
        eax8 = fun_18030798(ecx13, ebx9, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 8, 1, edi19, esi14, ebx15);
        v11 = eax8;
    } else {
        eax20 = *reinterpret_cast<void***>(a2 + 8);
        edi18 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2)) - reinterpret_cast<unsigned char>(eax20));
        *reinterpret_cast<void***>(a2) = eax20 + 1;
        ecx21 = *reinterpret_cast<void***>(a2 + 24) - 1;
        *reinterpret_cast<void***>(a2 + 4) = ecx21;
        if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(edi18) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(edi18 == 0)) {
            if (ebx9 == 0xffffffff) {
                eax22 = reinterpret_cast<struct s276*>(0x18044208);
            } else {
                eax23 = reinterpret_cast<unsigned char>(ebx9) & 31;
                eax22 = reinterpret_cast<struct s276*>(reinterpret_cast<int32_t>(*reinterpret_cast<void**>((reinterpret_cast<signed char>(ebx9) >> 5) * 4 + 0x18046f20)) + (eax23 + eax23 * 8) * 4);
            }
            if (eax22->f4 & 32) {
                fun_1802e66d(ebx9, 0, 2, edi19, esi14, ebx15);
            }
        } else {
            eax24 = fun_18030798(ecx21, ebx9, eax20, edi18, edi19, esi14, ebx15);
            v11 = eax24;
        }
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(a2 + 8)) = a1;
    }
    if (v11 == edi18) {
        eax25 = reinterpret_cast<unsigned char>(a1) & 0xff;
    } else {
        *reinterpret_cast<void***>(a2 + 12) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 12)) | 32);
        goto addr_0x1802cbf0_8;
    }
    addr_0x1802cbf3_23:
    return eax25;
    addr_0x1802cbf0_8:
    eax25 = 0xffffffff;
    goto addr_0x1802cbf3_23;
}

int32_t __image_base = 0x18045ab0;

int32_t __image_base = 0x18045ae0;

int32_t __image_base = 0x18045ac8;

void fun_1802e86a() {
    int32_t esi1;
    int32_t v2;
    int32_t esi3;
    int32_t v4;
    int32_t v5;

    esi1 = InitializeCriticalSection;
    v2 = __image_base;
    esi1(v2, esi3, __return_address());
    v4 = __image_base;
    esi1(v4, v2, esi3, __return_address());
    v5 = __image_base;
    esi1();
    esi1();
    goto v5;
}

void** g18046f20;

int32_t GetStartupInfoA = 0x362bc;

struct s277 {
    void** f0;
    signed char[3] pad4;
    unsigned char f4;
};

struct s278 {
    void** f0;
    signed char[3] pad4;
    unsigned char f4;
};

int32_t SetHandleCount = 0x3629a;

struct s279 {
    int32_t f0;
    unsigned char f4;
};

void fun_1802d6ab(void** ecx) {
    void* ebp2;
    void** v3;
    void** ebx4;
    void** v5;
    void** esi6;
    void** v7;
    void** edi8;
    void** v9;
    void** v10;
    void** v11;
    void** v12;
    void** v13;
    void** v14;
    void** v15;
    void** v16;
    void** eax17;
    void** esi18;
    void** ecx19;
    void** eax20;
    void** eax21;
    void** v22;
    int16_t v23;
    struct s277* v24;
    int32_t ebx25;
    void** edi26;
    unsigned char* ebx27;
    int32_t* v28;
    int1_t less29;
    void** ecx30;
    int32_t eax31;
    struct s278* esi32;
    int32_t eax33;
    uint32_t eax34;
    uint32_t eax35;
    void** eax36;
    uint32_t eax37;
    uint32_t eax38;
    void** esi39;
    int32_t v40;
    int32_t eax41;
    uint32_t eax42;
    struct s279* eax43;
    void*** esi44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** eax52;
    int1_t less53;

    ebp2 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    v3 = ebx4;
    v5 = esi6;
    v7 = edi8;
    eax17 = fun_1802ca53(ecx, 0x480, v7, v5, v3, v9, v10, v11, v12, v13, v14, v15, v16);
    esi18 = eax17;
    ecx19 = reinterpret_cast<void**>(0x480);
    if (!esi18) {
        fun_1802b7a4(0x480);
        ecx19 = reinterpret_cast<void**>(27);
    }
    g18046f20 = esi18;
    g18047020 = reinterpret_cast<void**>(32);
    eax20 = esi18 + 0x480;
    while (reinterpret_cast<unsigned char>(esi18) < reinterpret_cast<unsigned char>(eax20)) {
        *reinterpret_cast<void***>(esi18 + 4) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(esi18) = reinterpret_cast<void**>(0xffffffff);
        *reinterpret_cast<void***>(esi18 + 8) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(esi18 + 5) = reinterpret_cast<void**>(10);
        eax21 = g18046f20;
        esi18 = esi18 + 36;
        eax20 = eax21 + 0x480;
    }
    v22 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp2) + 0xffffffb8);
    GetStartupInfoA(ecx19);
    if (!v23 || !v24) {
        addr_0x1802d7eb_7:
        ebx25 = 0;
    } else {
        edi26 = v24->f0;
        ebx27 = &v24->f4;
        v28 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(ebx27) + reinterpret_cast<unsigned char>(edi26));
        if (reinterpret_cast<signed char>(edi26) >= reinterpret_cast<signed char>(0x800)) {
            edi26 = reinterpret_cast<void**>(0x800);
        }
        less29 = reinterpret_cast<signed char>(g18047020) < reinterpret_cast<signed char>(edi26);
        if (!less29) 
            goto addr_0x1802d799_11; else 
            goto addr_0x1802d743_12;
    }
    do {
        ecx30 = g18046f20;
        eax31 = ebx25 + ebx25 * 8;
        esi32 = reinterpret_cast<struct s278*>(ecx30 + eax31 * 4);
        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx30 + eax31 * 4) == 0xffffffff)) {
            esi32->f4 = reinterpret_cast<unsigned char>(esi32->f4 | 0x80);
        } else {
            esi32->f4 = 0x81;
            if (ebx25) {
                eax33 = ebx25 - 1;
                eax34 = reinterpret_cast<uint32_t>(-eax33);
                eax35 = eax34 - (eax34 + reinterpret_cast<uint1_t>(eax34 < eax34 + reinterpret_cast<uint1_t>(!!eax33))) - 11;
            } else {
                eax35 = 0xf6;
            }
            eax36 = reinterpret_cast<void**>(GetStdHandle(eax35));
            if (eax36 == 0xffffffff || ((eax37 = reinterpret_cast<uint32_t>(GetFileType(eax36, eax35)), eax37 == 0) || (eax38 = eax37 & 0xff, esi32->f0 = eax36, eax38 == 2))) {
                esi32->f4 = reinterpret_cast<unsigned char>(esi32->f4 | 64);
            } else {
                if (eax38 == 3) {
                    esi32->f4 = reinterpret_cast<unsigned char>(esi32->f4 | 8);
                }
            }
        }
        ++ebx25;
    } while (ebx25 < 3);
    SetHandleCount();
    return;
    addr_0x1802d799_11:
    esi39 = reinterpret_cast<void**>(0);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(edi26) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(edi26 == 0))) {
        do {
            if (*v28 != -1 && (*ebx27 & 1 && (*ebx27 & 8 || (v40 = *v28, eax41 = reinterpret_cast<int32_t>(GetFileType(v40)), !!eax41)))) {
                eax42 = reinterpret_cast<unsigned char>(esi39) & 31;
                eax43 = reinterpret_cast<struct s279*>(*reinterpret_cast<int32_t**>((reinterpret_cast<signed char>(esi39) >> 5) * 4 + 0x18046f20) + (eax42 + eax42 * 8));
                eax43->f0 = *v28;
                eax43->f4 = *ebx27;
            }
            ++v28;
            ++esi39;
            ++ebx27;
        } while (reinterpret_cast<signed char>(esi39) < reinterpret_cast<signed char>(edi26));
        goto addr_0x1802d7eb_7;
    }
    addr_0x1802d743_12:
    esi44 = reinterpret_cast<void***>(0x18046f24);
    do {
        eax52 = fun_1802ca53(ecx19, 0x480, v22, v7, v5, v3, v45, v46, v47, v48, v49, v50, v51);
        if (!eax52) 
            break;
        g18047020 = g18047020 + 32;
        *esi44 = eax52;
        ecx19 = eax52 + 0x480;
        while (reinterpret_cast<unsigned char>(eax52) < reinterpret_cast<unsigned char>(ecx19)) {
            *reinterpret_cast<void***>(eax52 + 4) = reinterpret_cast<void**>(0);
            *reinterpret_cast<void***>(eax52) = reinterpret_cast<void**>(0xffffffff);
            *reinterpret_cast<void***>(eax52 + 8) = reinterpret_cast<void**>(0);
            *reinterpret_cast<void***>(eax52 + 5) = reinterpret_cast<void**>(10);
            eax52 = eax52 + 36;
            ecx19 = *esi44 + 0x480;
        }
        esi44 = esi44 + 4;
        less53 = reinterpret_cast<signed char>(g18047020) < reinterpret_cast<signed char>(edi26);
    } while (less53);
    goto addr_0x1802d791_32;
    edi26 = g18047020;
    goto addr_0x1802d799_11;
    addr_0x1802d791_32:
    goto addr_0x1802d799_11;
}

void** g18045974 = reinterpret_cast<void**>(0);

void** g1804595c = reinterpret_cast<void**>(0);

void** g18045958 = reinterpret_cast<void**>(0);

void fun_1802d974(void** ecx) {
    int1_t zf2;
    void** edi3;
    void** esi4;
    void** ebx5;
    void** eax6;
    void** edi7;
    void** ecx8;
    void** eax9;

    zf2 = g18047028 == 0;
    if (zf2) {
        fun_18030f7d(ecx, edi3, esi4, ebx5);
    }
    GetModuleFileNameA();
    eax6 = g18047034;
    g18045974 = reinterpret_cast<void**>(0x18045988);
    edi7 = reinterpret_cast<void**>(0x18045988);
    if (*reinterpret_cast<void***>(eax6)) {
        edi7 = eax6;
    }
    fun_1802da0d(ecx, edi7, 0, 0, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffffc, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff8);
    ecx8 = ecx;
    eax9 = fun_1802ca53(ecx8, ecx + reinterpret_cast<unsigned char>(ecx8) * 4, edi7, 0, 0, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffffc, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff8, 0, 0x18045988, 0x104, edi3, esi4, ebx5);
    if (!eax9) {
        fun_1802b7a4(ecx8);
        ecx8 = reinterpret_cast<void**>(8);
    }
    fun_1802da0d(ecx8, edi7, eax9, eax9 + reinterpret_cast<unsigned char>(ecx) * 4, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffffc, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff8);
    g1804595c = eax9;
    g18045958 = ecx - 1;
    return;
}

int32_t __image_base = 0x1802b260;

void fun_1802d401(void** ecx, void** a2) {
    int32_t eax3;

    eax3 = __image_base;
    if (eax3) {
        eax3();
    }
    fun_1802d505(ecx, 0x18038010, 0x1803801c, __return_address(), a2);
    fun_1802d505(ecx, 0x18038000, 0x1803800c, 0x18038010, 0x1803801c);
    return;
}

void fun_1802e893();

int32_t TlsFree = 0x36272;

void fun_1802d573() {
    void** eax1;

    fun_1802e893();
    eax1 = g18044200;
    if (eax1 != 0xffffffff) {
        TlsFree(eax1);
        g18044200 = reinterpret_cast<void**>(0xffffffff);
    }
    return;
}

void fun_1802d4f3(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7);

void** g18045984 = reinterpret_cast<void**>(0);

int32_t GetCurrentProcess = 0x3623c;

int32_t TerminateProcess = 0x36228;

signed char g1804597c = 0;

void** g18047030;

void** g1804702c;

int32_t ExitProcess = 0x3621a;

void** fun_1802d44e(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** v6;
    void** v7;
    void** edi8;
    int1_t zf9;
    int32_t eax10;
    void** v11;
    void** ebx12;
    void** ebx13;
    void** eax14;
    void** esi15;
    void** eax16;
    int1_t cf17;
    void** eax18;

    v6 = reinterpret_cast<void**>(__return_address());
    v7 = edi8;
    fun_1802d4f3(ecx, v7, v6, a2, a3, a4, a5);
    zf9 = reinterpret_cast<int1_t>(g18045984 == 1);
    if (zf9) {
        eax10 = reinterpret_cast<int32_t>(GetCurrentProcess(v6));
        TerminateProcess(eax10, v6);
    }
    v11 = ebx12;
    ebx13 = a4;
    g18045980 = reinterpret_cast<void**>(1);
    g1804597c = *reinterpret_cast<signed char*>(&ebx13);
    if (!a3) {
        eax14 = g18047030;
        if (eax14) {
            ecx = g1804702c;
            esi15 = ecx + 0xfffffffc;
            if (reinterpret_cast<unsigned char>(esi15) >= reinterpret_cast<unsigned char>(eax14)) {
                do {
                    eax16 = *reinterpret_cast<void***>(esi15);
                    if (eax16) {
                        eax16();
                    }
                    esi15 = esi15 - 4;
                    cf17 = reinterpret_cast<unsigned char>(esi15) < reinterpret_cast<unsigned char>(g18047030);
                } while (!cf17);
            }
        }
        fun_1802d505(ecx, 0x18038020, 0x18038028, v11, v7);
        ecx = reinterpret_cast<void**>(0x18038028);
    }
    fun_1802d505(ecx, 0x1803802c, 0x18038030, v11, v7);
    if (!ebx13) {
        g18045984 = reinterpret_cast<void**>(1);
        ExitProcess(0x18038030);
        goto v7;
    } else {
        eax18 = fun_1802d4fc(0x18038030, v7, v6, a2);
        return eax18;
    }
}

void** g18045884 = reinterpret_cast<void**>(0);

int32_t GetLogicalDrives = 0x35ea6;

int16_t fun_18004ad0(void** a1, void** a2, void** a3, void** a4);

int16_t fun_18004a40(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** eax45;
    void** esi46;
    void** esi47;
    void** eax48;
    void** eax49;

    eax45 = a3;
    if (!eax45) {
        esi46 = g18045884;
        if (esi46) {
            fun_1800cec0(esi46);
            fun_1802b2b0(esi46, esi46, esi47, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
        }
    } else {
        if (!(eax45 - 1)) {
            g18045874 = a2;
            eax48 = reinterpret_cast<void**>(GetLogicalDrives());
            g18045880 = eax48;
            eax49 = fun_1802b2bb(ecx, 16, esi47, __return_address(), a2, a3, a4, a5, a6);
            if (!eax49) {
                g18045884 = reinterpret_cast<void**>(0);
                return 0;
            } else {
                *reinterpret_cast<int16_t*>(&eax49) = fun_1800ce30(eax49, 0x18038060, fun_18004ad0, a2, 0);
                g18045884 = eax49;
                if (!eax49) {
                    return *reinterpret_cast<int16_t*>(&eax49);
                }
            }
        }
    }
    return 1;
}

int32_t __image_base = 0x1802b277;

int32_t ExitThread = 0x36196;

void fun_1802b8e1(void** ecx) {
    int32_t eax2;
    void** eax3;
    void** v4;
    void** esi5;

    eax2 = __image_base;
    if (eax2) {
        eax2(__return_address());
    }
    eax3 = fun_1802d5a4(ecx);
    if (!eax3) {
        fun_1802b7a4(ecx);
        ecx = reinterpret_cast<void**>(16);
    }
    if (*reinterpret_cast<void***>(eax3 + 4) != 0xffffffff) {
        v4 = *reinterpret_cast<void***>(eax3 + 4);
        CloseHandle(ecx, v4);
    }
    fun_1802d60b(ecx, eax3, esi5, __return_address());
    ExitThread(eax3);
    goto esi5;
}

struct s280 {
    uint32_t f0;
    unsigned char f4;
};

int32_t SetStdHandle = 0x363a8;

uint32_t fun_1802e52b(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    int1_t cf7;
    uint32_t** edi8;
    uint32_t eax9;
    uint32_t esi10;
    struct s280* eax11;
    void** edi12;
    void** esi13;
    void** eax14;
    void** eax15;
    uint32_t eax16;
    int1_t zf17;
    void** ecx18;
    int32_t v19;
    void** ecx20;

    cf7 = reinterpret_cast<unsigned char>(a2) < reinterpret_cast<unsigned char>(g18047020);
    if (!cf7 || ((edi8 = reinterpret_cast<uint32_t**>((reinterpret_cast<signed char>(a2) >> 5) * 4 + 0x18046f20), eax9 = reinterpret_cast<unsigned char>(a2) & 31, esi10 = eax9 + eax9 * 8 << 2, eax11 = reinterpret_cast<struct s280*>(reinterpret_cast<int32_t>(*edi8) + esi10), (eax11->f4 & 1) == 0) || eax11->f0 == 0xffffffff)) {
        eax14 = fun_1802dfa3(a2, edi12, esi13, __return_address(), a2, a3, a4);
        *reinterpret_cast<void***>(eax14) = reinterpret_cast<void**>(9);
        eax15 = fun_1802dfac(a2, edi12, esi13, __return_address(), a2, a3, a4, a5, a6);
        *reinterpret_cast<void***>(eax15) = reinterpret_cast<void**>(0);
        eax16 = 0xffffffff;
    } else {
        zf17 = g18045940 == 1;
        if (!zf17) 
            goto addr_0x1802e587_4;
        ecx18 = a2;
        if (!ecx18) 
            goto addr_0x1802e57e_6; else 
            goto addr_0x1802e56e_7;
    }
    addr_0x1802e5a7_8:
    return eax16;
    addr_0x1802e57e_6:
    v19 = 0xf6;
    addr_0x1802e581_9:
    SetStdHandle(v19, 0);
    goto addr_0x1802e587_4;
    addr_0x1802e56e_7:
    ecx20 = ecx18 - 1;
    if (!ecx20) {
        v19 = 0xf5;
        goto addr_0x1802e581_9;
    } else {
        if (ecx20 - 1) {
            addr_0x1802e587_4:
            *reinterpret_cast<uint32_t*>(reinterpret_cast<int32_t>(*edi8) + esi10) = 0xffffffff;
            eax16 = 0;
            goto addr_0x1802e5a7_8;
        } else {
            v19 = 0xf4;
            goto addr_0x1802e581_9;
        }
    }
}

struct s281 {
    uint32_t f0;
    unsigned char f4;
    signed char[3] pad8;
    int32_t f8;
};

void** fun_1802e38c(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** v8;
    void** v9;
    void** ebx10;
    void** v11;
    void** ebp12;
    void** v13;
    void** esi14;
    void** v15;
    void** edi16;
    void** edi17;
    void** ebx18;
    void** ecx19;
    void** v20;
    void** v21;
    struct s281** ebp22;
    struct s281* esi23;
    struct s281* eax24;
    uint32_t ebx25;
    uint32_t eax26;
    void** eax27;
    void*** ecx28;
    void** edx29;

    v8 = reinterpret_cast<void**>(__return_address());
    v9 = ebx10;
    v11 = ebp12;
    v13 = esi14;
    v15 = edi16;
    edi17 = reinterpret_cast<void**>(0xffffffff);
    fun_1802e8ff(ecx, 18, v15, v13, v11, v9, ecx, ecx, v8);
    ebx18 = reinterpret_cast<void**>(0);
    ecx19 = reinterpret_cast<void**>(18);
    v20 = reinterpret_cast<void**>(0);
    v21 = reinterpret_cast<void**>(0);
    ebp22 = reinterpret_cast<struct s281**>(0x18046f20);
    do {
        esi23 = *ebp22;
        if (!esi23) 
            break;
        eax24 = esi23 + 96;
        while (reinterpret_cast<uint32_t>(esi23) < reinterpret_cast<uint32_t>(eax24)) {
            if (!(esi23->f4 & 1)) {
                if (!esi23->f8) {
                    fun_1802e8ff(ecx19, 17, v15, v13, v11, v9, v20, v21, v8);
                    if (!esi23->f8) {
                        InitializeCriticalSection(17, esi23 + 1);
                        esi23->f8 = esi23->f8 + 1;
                    }
                    fun_1802e960(17, 17, v15, v13, v11, v9);
                    ecx19 = reinterpret_cast<void**>(17);
                }
                ebx25 = reinterpret_cast<uint32_t>(esi23 + 1);
                EnterCriticalSection(ecx19, ebx25);
                if (!(esi23->f4 & 1)) 
                    goto addr_0x1802e418_11;
                LeaveCriticalSection(ecx19, ebx25, ebx25);
                ebx18 = v11;
            }
            esi23 = esi23 + 3;
            eax24 = *ebp22 + 96;
        }
        continue;
        addr_0x1802e418_11:
        esi23->f0 = 0xffffffff;
        eax26 = reinterpret_cast<uint32_t>(esi23) - reinterpret_cast<uint32_t>(*ebp22);
        ecx19 = reinterpret_cast<void**>(36);
        __asm__("cdq ");
        edi17 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax26) / reinterpret_cast<signed char>(36) + reinterpret_cast<unsigned char>(v20));
        if (!reinterpret_cast<int1_t>(edi17 == 0xffffffff)) 
            goto addr_0x1802e49e_14;
        ebx18 = v9;
        v21 = v21 + 32;
        ++ebp22;
        ++ebx18;
        v20 = ebx18;
    } while (reinterpret_cast<int32_t>(ebp22) < 0x18047020);
    goto addr_0x1802e44e_17;
    eax27 = fun_1802ca53(ecx19, 0x480, v15, v13, v11, v9, v20, v21, v8, a2, a3, a4, a5);
    ecx19 = reinterpret_cast<void**>(0x480);
    if (eax27) {
        g18047020 = g18047020 + 32;
        ecx28 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(ebx18) * 4 + 0x18046f20);
        edx29 = eax27 + 0x480;
        *ecx28 = eax27;
        while (reinterpret_cast<unsigned char>(eax27) < reinterpret_cast<unsigned char>(edx29)) {
            *reinterpret_cast<void***>(eax27 + 4) = reinterpret_cast<void**>(0);
            *reinterpret_cast<void***>(eax27) = reinterpret_cast<void**>(0xffffffff);
            *reinterpret_cast<void***>(eax27 + 8) = reinterpret_cast<void**>(0);
            *reinterpret_cast<void***>(eax27 + 5) = reinterpret_cast<void**>(10);
            eax27 = eax27 + 36;
            edx29 = *ecx28 + 0x480;
        }
        edi17 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx18) << 5);
        fun_1802e5ec(edi17, v15, v13);
        ecx19 = edi17;
    }
    addr_0x1802e49e_14:
    fun_1802e960(ecx19, 18, v15, v13, v11, v9);
    return edi17;
    addr_0x1802e44e_17:
    goto addr_0x1802e49e_14;
}

uint32_t fun_1802e4af(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10) {
    int1_t cf11;
    void**** edi12;
    uint32_t eax13;
    uint32_t esi14;
    void** edi15;
    void** esi16;
    void** eax17;
    void** eax18;
    uint32_t eax19;
    int1_t zf20;
    void** ecx21;
    void** v22;
    int32_t v23;
    void** ecx24;

    cf11 = reinterpret_cast<unsigned char>(a1) < reinterpret_cast<unsigned char>(g18047020);
    if (!cf11 || (edi12 = reinterpret_cast<void****>((reinterpret_cast<signed char>(a1) >> 5) * 4 + 0x18046f20), eax13 = reinterpret_cast<unsigned char>(a1) & 31, esi14 = eax13 + eax13 * 8 << 2, !reinterpret_cast<int1_t>(*reinterpret_cast<void***>(reinterpret_cast<int32_t>(*edi12) + esi14) == 0xffffffff))) {
        eax17 = fun_1802dfa3(a1, edi15, esi16, __return_address(), a1, a2, a3);
        *reinterpret_cast<void***>(eax17) = reinterpret_cast<void**>(9);
        eax18 = fun_1802dfac(a1, edi15, esi16, __return_address(), a1, a2, a3, a4, a5);
        *reinterpret_cast<void***>(eax18) = reinterpret_cast<void**>(0);
        eax19 = 0xffffffff;
    } else {
        zf20 = g18045940 == 1;
        if (!zf20) 
            goto addr_0x1802e508_4;
        ecx21 = a1;
        if (!ecx21) 
            goto addr_0x1802e4ff_6; else 
            goto addr_0x1802e4ef_7;
    }
    addr_0x1802e528_8:
    return eax19;
    addr_0x1802e4ff_6:
    v22 = a2;
    v23 = 0xf6;
    addr_0x1802e502_9:
    SetStdHandle(v23, v22);
    goto addr_0x1802e508_4;
    addr_0x1802e4ef_7:
    ecx24 = ecx21 - 1;
    if (!ecx24) {
        v22 = a2;
        v23 = 0xf5;
        goto addr_0x1802e502_9;
    } else {
        if (ecx24 - 1) {
            addr_0x1802e508_4:
            *reinterpret_cast<void***>(reinterpret_cast<int32_t>(*edi12) + esi14) = a2;
            eax19 = 0;
            goto addr_0x1802e528_8;
        } else {
            v22 = a2;
            v23 = 0xf4;
            goto addr_0x1802e502_9;
        }
    }
}

void** g18045b24 = reinterpret_cast<void**>(0);

int32_t LCMapStringW = 0x363ea;

int32_t LCMapStringA = 0x363da;

void** fun_1802e975(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, int32_t a8, void** a9, void** a10, void** a11, void** a12, ...) {
    void** eax13;
    void** esp14;
    void** esp15;
    void** v16;
    int1_t zf17;
    int32_t eax18;
    int32_t eax19;
    void** eax20;
    void** ecx21;
    void** eax22;
    void** eax23;
    uint32_t eax24;
    void** eax25;
    void** edi26;
    void** esi27;
    void** ebx28;
    void** v29;
    void** v30;
    void** v31;
    void** v32;
    void** v33;
    void** esp34;
    int32_t eax35;
    void** eax36;
    void** esi37;
    void** eax38;
    int32_t eax39;
    void** v40;
    void** v41;
    void** eax42;
    int32_t eax43;

    eax13 = *reinterpret_cast<void***>(&g0);
    esp14 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4 - 4 - 4);
    *reinterpret_cast<void***>(&g0) = esp14;
    esp15 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp14 - 28) - 4 - 4 - 4);
    v16 = esp15;
    zf17 = g18045b24 == 0;
    if (zf17) {
        eax18 = reinterpret_cast<int32_t>(LCMapStringW(0, 0x100, 0x18035920, 1, 0, 0));
        esp15 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp15 - 4) - 4 - 4 + 4 - 4 - 4 - 4 - 4 - 4 + 4);
        if (!eax18) {
            eax19 = reinterpret_cast<int32_t>(LCMapStringA(0, 0x100, 0x1803591c, 1, 0, 0, 0, 0x100, 0x18035920, 1, 0, 0));
            esp15 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp15 - 4) - 4 - 4 - 4 - 4 - 4 - 4 + 4);
            if (!eax19) 
                goto addr_0x1802eb03_4;
            g18045b24 = reinterpret_cast<void**>(2);
        } else {
            g18045b24 = reinterpret_cast<void**>(1);
        }
    }
    if (reinterpret_cast<signed char>(a4) > reinterpret_cast<signed char>(0)) {
        eax20 = fun_1802eb99(a3, a4);
        ecx21 = a4;
        esp15 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp15 - 4) - 4 - 4 + 4 + 4 + 4);
        a4 = eax20;
    }
    eax22 = g18045b24;
    if (!reinterpret_cast<int1_t>(eax22 == 2)) {
        if (!reinterpret_cast<int1_t>(eax22 == 1)) 
            goto addr_0x1802eb03_4;
        if (!a7) {
            eax23 = g18045b1c;
            a7 = eax23;
        }
        eax24 = reinterpret_cast<uint32_t>(-a8);
        eax25 = reinterpret_cast<void**>(MultiByteToWideChar(ecx21, a7, (eax24 - (eax24 + reinterpret_cast<uint1_t>(eax24 < eax24 + reinterpret_cast<uint1_t>(!!a8))) & 8) + 1, a3, a4, 0, 0));
        if (!eax25) 
            goto addr_0x1802eb03_4;
        fun_18031090(ecx21, a7, (eax24 - (eax24 + reinterpret_cast<uint1_t>(eax24 < eax24 + reinterpret_cast<uint1_t>(!!a8))) & 8) + 1, a3, a4, 0, 0, edi26, esi27, ebx28, v29, v30, v31, v32, eax25, v16, v33, eax13, 0x1802e2b4, 0x18035928);
        esp34 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp15 - 4) - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 + 4);
        if (!esp34) 
            goto addr_0x1802eb03_4;
        eax35 = reinterpret_cast<int32_t>(MultiByteToWideChar(ecx21, a7, 1, a3, a4, esp34, eax25, a7, (eax24 - (eax24 + reinterpret_cast<uint1_t>(eax24 < eax24 + reinterpret_cast<uint1_t>(!!a8))) & 8) + 1, a3, a4, 0, 0));
        if (!eax35) 
            goto addr_0x1802eb03_4;
        eax36 = reinterpret_cast<void**>(LCMapStringW(ecx21, a1, a2, esp34, eax25, 0, 0, a7, 1, a3, a4, esp34, eax25, a7, (eax24 - (eax24 + reinterpret_cast<uint1_t>(eax24 < eax24 + reinterpret_cast<uint1_t>(!!a8))) & 8) + 1, a3, a4, 0, 0));
        esi37 = eax36;
        if (!esi37) 
            goto addr_0x1802eb03_4;
        if (*reinterpret_cast<unsigned char*>(&a2 + 1) & 4) 
            goto addr_0x1802ead7_19;
    } else {
        eax38 = reinterpret_cast<void**>(LCMapStringA(ecx21, a1, a2, a3, a4, a5, a6));
        goto addr_0x1802eb05_21;
    }
    fun_18031090(ecx21, a1, a2, esp34, eax25, 0, 0, a7, 1, a3, a4, esp34, eax25, a7, (eax24 - (eax24 + reinterpret_cast<uint1_t>(eax24 < eax24 + reinterpret_cast<uint1_t>(!!a8))) & 8) + 1, a3, a4, 0, 0, edi26);
    if (!(reinterpret_cast<uint32_t>(esp34 - 4) - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 + 4)) 
        goto addr_0x1802eb03_4;
    eax39 = reinterpret_cast<int32_t>(LCMapStringW(ecx21, a1, a2, esp34, eax25, reinterpret_cast<uint32_t>(esp34 - 4) - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 + 4, esi37, a1, a2, esp34, eax25, 0, 0, a7, 1, a3, a4, esp34, eax25, a7, (eax24 - (eax24 + reinterpret_cast<uint1_t>(eax24 < eax24 + reinterpret_cast<uint1_t>(!!a8))) & 8) + 1, a3, a4, 0, 0));
    if (!eax39) 
        goto addr_0x1802eb03_4;
    if (a6) {
        v40 = a6;
        v41 = a5;
    } else {
        v40 = reinterpret_cast<void**>(0);
        v41 = reinterpret_cast<void**>(0);
    }
    eax42 = reinterpret_cast<void**>(WideCharToMultiByte(ecx21, a7, 0x220, reinterpret_cast<uint32_t>(esp34 - 4) - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 + 4, esi37, v41, v40, 0, 0, a1, a2, esp34, eax25, reinterpret_cast<uint32_t>(esp34 - 4) - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 + 4, esi37, a1, a2, esp34, eax25, 0, 0, a7, 1, a3, a4, esp34, eax25, a7, (eax24 - (eax24 + reinterpret_cast<uint1_t>(eax24 < eax24 + reinterpret_cast<uint1_t>(!!a8))) & 8) + 1, a3, a4, 0, 0));
    esi37 = eax42;
    if (!esi37) {
        addr_0x1802eb03_4:
        eax38 = reinterpret_cast<void**>(0);
    } else {
        addr_0x1802eb92_29:
        eax38 = esi37;
    }
    addr_0x1802eb05_21:
    *reinterpret_cast<void***>(&g0) = eax13;
    return eax38;
    addr_0x1802ead7_19:
    if (!a6) 
        goto addr_0x1802eb92_29;
    if (reinterpret_cast<signed char>(esi37) > reinterpret_cast<signed char>(a6)) 
        goto addr_0x1802eb03_4;
    eax43 = reinterpret_cast<int32_t>(LCMapStringW(ecx21, a1, a2, esp34, eax25, a5, a6, a1, a2, esp34, eax25, 0, 0, a7, 1, a3, a4, esp34, eax25, a7, (eax24 - (eax24 + reinterpret_cast<uint1_t>(eax24 < eax24 + reinterpret_cast<uint1_t>(!!a8))) & 8) + 1, a3, a4, 0, 0));
    if (eax43) 
        goto addr_0x1802eb92_29; else 
        goto addr_0x1802eb03_4;
}

void** fun_1802ef09(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8);

void** fun_1802ed99(void** ecx, void** a2, void** a3, void** a4, void** a5);

void** fun_1802c394(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** esi7;
    void** eax8;
    void** eax9;
    void** edi10;

    eax8 = fun_1802ef09(ecx, esi7, __return_address(), a2, a3, a4, a5, a6);
    if (eax8) {
        eax9 = fun_1802ed99(ecx, __return_address(), a2, a3, eax8);
        fun_1802ed47(eax8, __return_address(), a2, a3, eax8, edi10);
        return eax9;
    } else {
        return eax8;
    }
}

uint32_t g18045bac = 0;

void** fun_1802ed99(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    uint32_t esi6;
    void** edi7;
    void** v8;
    void** v9;
    void** ecx10;
    void** esi11;
    void** edx12;
    int32_t eax13;
    int32_t eax14;
    int32_t eax15;
    int32_t eax16;
    int32_t eax17;
    int32_t eax18;
    int32_t eax19;
    void** eax20;
    void** eax21;

    esi6 = g18045bac;
    edi7 = a3;
    v8 = reinterpret_cast<void**>(0);
    v9 = reinterpret_cast<void**>(0);
    if (*reinterpret_cast<void***>(edi7) == 97) {
        ecx10 = reinterpret_cast<void**>(0x109);
    } else {
        if (*reinterpret_cast<void***>(edi7) == 0x72) {
            ecx10 = reinterpret_cast<void**>(0);
            esi11 = reinterpret_cast<void**>(esi6 | 1);
            goto addr_0x1802edda_5;
        } else {
            if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(edi7) == 0x77)) 
                goto addr_0x1802eee6_7;
            ecx10 = reinterpret_cast<void**>(0x301);
        }
    }
    esi11 = reinterpret_cast<void**>(esi6 | 2);
    addr_0x1802edda_5:
    edx12 = reinterpret_cast<void**>(1);
    while ((++edi7, !!*reinterpret_cast<void***>(edi7 + 1)) && edx12) {
        eax13 = static_cast<int32_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(edi7 + 1)));
        if (eax13 > 84) {
            eax14 = eax13 - 98;
            if (!eax14) {
                if (0) {
                    *reinterpret_cast<unsigned char*>(&ecx10 + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&ecx10 + 1) | 0x80);
                    continue;
                }
            } else {
                eax15 = eax14 - 1;
                if (!eax15) {
                    if (!v8) {
                        v8 = reinterpret_cast<void**>(1);
                        esi11 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi11) | 0x4000);
                        continue;
                    }
                } else {
                    eax16 = eax15 - 11;
                    if (!eax16) {
                        if (!v8) {
                            v8 = reinterpret_cast<void**>(1);
                            esi11 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi11) & 0xffffbfff);
                            continue;
                        }
                    } else {
                        if (!(eax16 - 6) && !1) {
                            *reinterpret_cast<unsigned char*>(&ecx10 + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&ecx10 + 1) | 64);
                            continue;
                        }
                    }
                }
            }
        } else {
            if (eax13 == 84) {
                if (!(0x1000 & reinterpret_cast<unsigned char>(ecx10))) {
                    ecx10 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx10) | 0x1000);
                    continue;
                }
            } else {
                eax17 = eax13 - 43;
                if (!eax17) {
                    if (!(*reinterpret_cast<unsigned char*>(&ecx10) & 2)) {
                        ecx10 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx10) & 0xfffffffe | 2);
                        esi11 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi11) & 0xfffffffc | 0x80);
                        continue;
                    }
                } else {
                    eax18 = eax17 - 25;
                    if (!eax18) {
                        if (!(*reinterpret_cast<unsigned char*>(&ecx10) & 64)) {
                            ecx10 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx10) | 64);
                            continue;
                        }
                    } else {
                        eax19 = eax18 - 14;
                        if (!eax19) {
                            if (!v9) {
                                v9 = reinterpret_cast<void**>(1);
                                ecx10 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx10) | 16);
                                continue;
                            }
                        } else {
                            if (!(eax19 - 1) && !v9) {
                                v9 = reinterpret_cast<void**>(1);
                                ecx10 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx10) | 32);
                                continue;
                            }
                        }
                    }
                }
            }
        }
        edx12 = reinterpret_cast<void**>(0);
    }
    eax20 = fun_1802bf8a(a2, ecx10, a4, 0x1a4);
    if (reinterpret_cast<signed char>(eax20) >= reinterpret_cast<signed char>(0)) {
        eax21 = a5;
        ++g18045b28;
        *reinterpret_cast<void***>(eax21 + 12) = esi11;
        *reinterpret_cast<void***>(eax21 + 4) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax21) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax21 + 8) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax21 + 28) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax21 + 16) = eax20;
    } else {
        addr_0x1802eee6_7:
        eax21 = reinterpret_cast<void**>(0);
    }
    return eax21;
}

void** fun_1802ed47(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** eax7;

    if (reinterpret_cast<unsigned char>(a1) < reinterpret_cast<unsigned char>(0x180448a8) || reinterpret_cast<unsigned char>(a1) > reinterpret_cast<unsigned char>(0x18044b08)) {
        LeaveCriticalSection();
        goto a1 + 32;
    } else {
        eax7 = fun_1802e960(0x180448a8, (reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(a1) - reinterpret_cast<unsigned char>(0x180448a8)) >> 5) + 28, __return_address(), a1, a2, a3);
        return eax7;
    }
}

void** fun_1802c3c5(void** ecx, void** a2, int32_t a3, void** a4) {
    void** eax5;

    eax5 = fun_1802c394(ecx, __return_address(), a2, 64, __return_address(), a2);
    return eax5;
}

uint32_t fun_1802c409(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    uint32_t edi7;
    uint32_t eax8;
    void** v9;
    void** edi10;
    void** esi11;
    uint32_t eax12;
    void** v13;

    edi7 = 0xffffffff;
    if (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 12)) & 0x83) {
        eax8 = fun_1802f02a(a2);
        edi7 = eax8;
        fun_1802efd1(ecx, a2, a2);
        v9 = *reinterpret_cast<void***>(a2 + 16);
        eax12 = fun_1802bc55(ecx, v9, a2, a2, edi10, esi11, __return_address(), a2, a3, a4, a5, a6);
        if (reinterpret_cast<int32_t>(eax12) >= reinterpret_cast<int32_t>(0)) {
            if (*reinterpret_cast<void***>(a2 + 28)) {
                v13 = *reinterpret_cast<void***>(a2 + 28);
                fun_1802ca0b(ecx, v13, edi10, esi11, __return_address(), a2);
                *reinterpret_cast<void***>(a2 + 28) = reinterpret_cast<void**>(0);
            }
        } else {
            edi7 = 0xffffffff;
        }
    }
    *reinterpret_cast<void***>(a2 + 12) = reinterpret_cast<void**>(0);
    return edi7;
}

void fun_1802ecf5(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6) {
    if (reinterpret_cast<unsigned char>(a1) < reinterpret_cast<unsigned char>(0x180448a8) || reinterpret_cast<unsigned char>(a1) > reinterpret_cast<unsigned char>(0x18044b08)) {
        EnterCriticalSection();
        goto a1 + 32;
    } else {
        fun_1802e8ff(0x180448a8, (reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(a1) - reinterpret_cast<unsigned char>(0x180448a8)) >> 5) + 28, __return_address(), a1, a2, a3, a4, a5, a6);
        return;
    }
}

struct s282 {
    int32_t f0;
    signed char f1;
    signed char f2;
    signed char f3;
};

struct s283 {
    int32_t f0;
    signed char f1;
    signed char f2;
    signed char f3;
};

void** fun_1802f210(void** ecx, void** a2, void** a3, void** a4) {
    void** esi5;
    void** edi6;
    uint32_t ecx7;
    uint32_t edx8;
    struct s282* esi9;
    struct s283* edi10;
    uint32_t ecx11;
    uint32_t edx12;
    void* eax13;

    esi5 = a3;
    edi6 = a2;
    if (reinterpret_cast<unsigned char>(edi6) <= reinterpret_cast<unsigned char>(esi5) || reinterpret_cast<unsigned char>(edi6) >= reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(a4) + reinterpret_cast<unsigned char>(esi5))) {
        if (reinterpret_cast<unsigned char>(edi6) & 3) {
            if (reinterpret_cast<unsigned char>(a4) < reinterpret_cast<unsigned char>(4)) {
                goto *reinterpret_cast<int32_t*>(reinterpret_cast<unsigned char>(a4 - 4) * 4 + 0x1802f368);
            } else {
                goto *reinterpret_cast<int32_t*>((reinterpret_cast<unsigned char>(edi6) & 3) * 4 + 0x1802f270);
            }
        }
        ecx7 = reinterpret_cast<unsigned char>(a4) >> 2;
        edx8 = reinterpret_cast<unsigned char>(a4) & 3;
        if (ecx7 >= 8) 
            goto addr_0x1802f243_7;
    } else {
        esi9 = reinterpret_cast<struct s282*>(reinterpret_cast<unsigned char>(a4) + reinterpret_cast<unsigned char>(esi5) + 0xfffffffc);
        edi10 = reinterpret_cast<struct s283*>(reinterpret_cast<unsigned char>(a4) + reinterpret_cast<unsigned char>(edi6) + 0xfffffffc);
        if (reinterpret_cast<uint32_t>(edi10) & 3) {
            if (reinterpret_cast<unsigned char>(a4) >= reinterpret_cast<unsigned char>(4)) {
                goto *reinterpret_cast<int32_t*>((reinterpret_cast<uint32_t>(edi10) & 3) * 4 + 0x1802f3f8);
            }
            goto *reinterpret_cast<int32_t*>(reinterpret_cast<unsigned char>(a4) * 4 + 0x1802f4f0);
        } else {
            ecx11 = reinterpret_cast<unsigned char>(a4) >> 2;
            edx12 = reinterpret_cast<unsigned char>(a4) & 3;
            if (ecx11 < 8) {
                goto *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(-ecx11) * 4 + 0x1802f4a0);
                goto *reinterpret_cast<int32_t*>(edx12 * 4 + 0x1802f4f0);
            } else {
                while (ecx11) {
                    --ecx11;
                    edi10->f0 = esi9->f0;
                    edi10 = reinterpret_cast<struct s283*>(reinterpret_cast<uint32_t>(edi10) - 4);
                    esi9 = reinterpret_cast<struct s282*>(reinterpret_cast<uint32_t>(esi9) - 4);
                }
                goto *reinterpret_cast<int32_t*>(edx12 * 4 + 0x1802f4f0);
            }
        }
    }
    switch (ecx7) {
        addr_0x1802f34f_20:
    case 0:
        switch (edx8) {
        case 0:
            return a2;
        case 1:
            *reinterpret_cast<void***>(edi6) = *reinterpret_cast<void***>(esi5);
            return a2;
        case 2:
            *reinterpret_cast<void***>(edi6) = *reinterpret_cast<void***>(esi5);
            *reinterpret_cast<void***>(edi6 + 1) = *reinterpret_cast<void***>(esi5 + 1);
            return a2;
        case 3:
            *reinterpret_cast<void***>(edi6) = *reinterpret_cast<void***>(esi5);
            *reinterpret_cast<void***>(edi6 + 1) = *reinterpret_cast<void***>(esi5 + 1);
            *reinterpret_cast<void***>(edi6 + 2) = *reinterpret_cast<void***>(esi5 + 2);
            return a2;
        }
        addr_0x1802f33c_25:
    case 1:
        *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(edi6 + ecx7 * 4) - 4) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(esi5 + ecx7 * 4) - 4);
        eax13 = reinterpret_cast<void*>(ecx7 * 4);
        esi5 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi5) + reinterpret_cast<uint32_t>(eax13));
        edi6 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi6) + reinterpret_cast<uint32_t>(eax13));
        goto addr_0x1802f34f_20;
        addr_0x1802f334_26:
    case 2:
        *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(edi6 + ecx7 * 4) - 8) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(esi5 + ecx7 * 4) - 8);
        goto addr_0x1802f33c_25;
        addr_0x1802f32c_27:
    case 3:
        *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(edi6 + ecx7 * 4) - 12) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(esi5 + ecx7 * 4) - 12);
        goto addr_0x1802f334_26;
        addr_0x1802f324_28:
    case 4:
        *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(edi6 + ecx7 * 4) - 16) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(esi5 + ecx7 * 4) - 16);
        goto addr_0x1802f32c_27;
        addr_0x1802f31c_29:
    case 5:
        *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(edi6 + ecx7 * 4) - 20) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(esi5 + ecx7 * 4) - 20);
        goto addr_0x1802f324_28;
        addr_0x1802f314_30:
    case 6:
        *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(edi6 + ecx7 * 4) - 24) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(esi5 + ecx7 * 4) - 24);
        goto addr_0x1802f31c_29;
    case 7:
        *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(edi6 + ecx7 * 4) - 28) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(esi5 + ecx7 * 4) - 28);
        goto addr_0x1802f314_30;
    }
    addr_0x1802f243_7:
    while (ecx7) {
        --ecx7;
        *reinterpret_cast<void***>(edi6) = *reinterpret_cast<void***>(esi5);
        edi6 = edi6 + 4;
        esi5 = esi5 + 4;
    }
    goto *reinterpret_cast<int32_t*>(edx8 * 4 + 0x1802f358);
    return a2;
    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi10) + 3) = *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esi9) + 3);
    return a2;
    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi10) + 3) = *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esi9) + 3);
    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi10) + 2) = *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esi9) + 2);
    return a2;
    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi10) + 3) = *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esi9) + 3);
    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi10) + 2) = *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esi9) + 2);
    *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(edi10) + 1) = *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esi9) + 1);
    return a2;
}

uint32_t fun_1802f57a(int32_t ecx);

uint32_t fun_1802c56c(int32_t ecx) {
    uint32_t eax2;

    eax2 = fun_1802f57a(ecx);
    return eax2;
}

struct s284 {
    signed char[4] pad4;
    unsigned char f4;
};

uint32_t fun_1802f133(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8) {
    void** eax9;
    void** esi10;
    void** v11;
    void** v12;
    void** v13;
    void** eax14;
    uint32_t eax15;
    void** edx16;
    void** ecx17;
    struct s284* edi18;
    uint32_t ecx19;
    void** ecx20;
    void** ecx21;
    uint32_t eax22;

    eax9 = *reinterpret_cast<void***>(a2 + 12);
    if (*reinterpret_cast<unsigned char*>(&eax9) & 0x83 && !(*reinterpret_cast<unsigned char*>(&eax9) & 64)) {
        if (!(*reinterpret_cast<unsigned char*>(&eax9) & 2)) {
            *reinterpret_cast<unsigned char*>(&eax9) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax9) | 1);
            *reinterpret_cast<void***>(a2 + 12) = eax9;
            if (*reinterpret_cast<uint16_t*>(&eax9) & 0x10c) {
                *reinterpret_cast<void***>(a2) = *reinterpret_cast<void***>(a2 + 8);
            } else {
                fun_18030988(ecx, a2, esi10, __return_address(), a2, a3, a4, a5, a6, a7, a8);
                ecx = a2;
            }
            v11 = *reinterpret_cast<void***>(a2 + 24);
            v12 = *reinterpret_cast<void***>(a2 + 8);
            v13 = *reinterpret_cast<void***>(a2 + 16);
            eax14 = fun_1802bd35(ecx, v13, v12, v11, esi10, __return_address(), a2);
            *reinterpret_cast<void***>(a2 + 4) = eax14;
            if (!eax14 || eax14 == 0xffffffff) {
                eax15 = reinterpret_cast<uint32_t>(-reinterpret_cast<unsigned char>(eax14));
                *reinterpret_cast<void***>(a2 + 12) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a2 + 12)) | reinterpret_cast<unsigned char>((eax15 - (eax15 + reinterpret_cast<uint1_t>(eax15 < eax15 + reinterpret_cast<uint1_t>(!!eax14))) & 16) + 16));
                *reinterpret_cast<void***>(a2 + 4) = reinterpret_cast<void**>(0);
            } else {
                edx16 = *reinterpret_cast<void***>(a2 + 12);
                if (!(*reinterpret_cast<unsigned char*>(&edx16) & 0x82)) {
                    ecx17 = *reinterpret_cast<void***>(a2 + 16);
                    if (ecx17 == 0xffffffff) {
                        edi18 = reinterpret_cast<struct s284*>(0x18044208);
                    } else {
                        ecx19 = reinterpret_cast<unsigned char>(ecx17) & 31;
                        edi18 = reinterpret_cast<struct s284*>(reinterpret_cast<int32_t>(*reinterpret_cast<void**>((reinterpret_cast<signed char>(ecx17) >> 5) * 4 + 0x18046f20)) + (ecx19 + ecx19 * 8) * 4);
                    }
                    if ((edi18->f4 & 0x82) == 0x82) {
                        *reinterpret_cast<unsigned char*>(&edx16 + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&edx16 + 1) | 32);
                        *reinterpret_cast<void***>(a2 + 12) = edx16;
                    }
                }
                if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a2 + 24) == 0x200) && ((ecx20 = *reinterpret_cast<void***>(a2 + 12), !!(*reinterpret_cast<unsigned char*>(&ecx20) & 8)) && !(*reinterpret_cast<unsigned char*>(&ecx20 + 1) & 4))) {
                    *reinterpret_cast<void***>(a2 + 24) = reinterpret_cast<void**>(0x1000);
                }
                ecx21 = *reinterpret_cast<void***>(a2);
                *reinterpret_cast<void***>(a2 + 4) = eax14 - 1;
                eax22 = static_cast<uint32_t>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx21)));
                *reinterpret_cast<void***>(a2) = ecx21 + 1;
                return eax22;
            }
        } else {
            *reinterpret_cast<unsigned char*>(&eax9) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax9) | 32);
            *reinterpret_cast<void***>(a2 + 12) = eax9;
        }
    }
    return 0xffffffff;
}

int32_t GetModuleHandleA = 0x361ee;

int32_t fun_1802c5bc() {
    int32_t eax1;
    void* esp2;
    int32_t eax3;

    eax1 = reinterpret_cast<int32_t>(GetModuleHandleA());
    esp2 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 + 4);
    if (eax1 && (eax3 = reinterpret_cast<int32_t>(GetProcAddress(eax1, "IsProcessorFeaturePresent")), esp2 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp2) - 4 - 4 - 4 + 4), !!eax3)) {
        eax3();
        goto 0;
    }
    __asm__("fld qword [0x18035580]");
    __asm__("fstp qword [ebp-0x8]");
    __asm__("fld qword [0x18035578]");
    __asm__("fstp qword [ebp-0x10]");
    __asm__("fld qword [ebp-0x10]");
    __asm__("fdiv qword [ebp-0x8]");
    __asm__("fmul qword [ebp-0x8]");
    __asm__("fsubr qword [ebp-0x10]");
    __asm__("fstp qword [ebp-0x18]");
    __asm__("fld qword [ebp-0x18]");
    __asm__("fcomp qword [0x180346b0]");
    __asm__("fnstsw ax");
    __asm__("sahf ");
    if (reinterpret_cast<uint32_t>(reinterpret_cast<int32_t>(esp2) - 4) > 24) 
        goto addr_0x1802c5b3_5;
    goto "KERNEL32";
    addr_0x1802c5b3_5:
    goto "KERNEL32";
}

void** g1804489c = reinterpret_cast<void**>(46);

void fun_18031541(void** ecx, void** a2, void** a3, void** a4);

void** fun_18031608(struct s207* a1, void*** a2, void** a3, void* a4, void* a5, uint32_t a6, int32_t a7) {
    void* ebp8;
    void** edi9;
    void** eax10;
    void** v11;
    void** v12;
    void** v13;
    void** v14;
    void** v15;
    void** v16;
    void** v17;
    void** v18;
    void** v19;
    void** v20;
    void** v21;
    void** v22;
    void** ecx23;
    void** bl24;
    int1_t zf25;
    int32_t eax26;
    int32_t eax27;
    void** v28;
    void** v29;
    int1_t zf30;
    int1_t zf31;
    int1_t less_or_equal32;
    uint32_t eax33;
    uint32_t eax34;
    int1_t zf35;
    int1_t less_or_equal36;
    uint32_t eax37;
    uint32_t eax38;
    int1_t less_or_equal39;
    uint32_t eax40;
    uint32_t eax41;
    int32_t eax42;
    int32_t eax43;
    int32_t eax44;
    void** edx45;
    void** eax46;
    void** esi47;
    void** ebx48;
    signed char v49;
    uint32_t eax50;
    void** eax51;
    void* eax52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** esi57;
    int1_t less_or_equal58;
    uint32_t eax59;
    uint32_t eax60;
    int1_t less_or_equal61;
    uint32_t eax62;
    uint32_t eax63;

    ebp8 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    edi9 = a3;
    eax10 = reinterpret_cast<void**>(0);
    v11 = reinterpret_cast<void**>(0);
    v12 = reinterpret_cast<void**>(1);
    v13 = reinterpret_cast<void**>(0);
    v14 = reinterpret_cast<void**>(0);
    v15 = reinterpret_cast<void**>(0);
    v16 = reinterpret_cast<void**>(0);
    v17 = reinterpret_cast<void**>(0);
    v18 = reinterpret_cast<void**>(0);
    v19 = reinterpret_cast<void**>(0);
    v20 = reinterpret_cast<void**>(0);
    v21 = reinterpret_cast<void**>(0);
    v22 = edi9;
    while ((ecx23 = *reinterpret_cast<void***>(edi9), ecx23 == 32) || (ecx23 == 9 || (ecx23 == 10 || reinterpret_cast<int1_t>(ecx23 == 13)))) {
        ++edi9;
    }
    while (1) {
        bl24 = *reinterpret_cast<void***>(edi9);
        ++edi9;
        if (reinterpret_cast<unsigned char>(eax10) > reinterpret_cast<unsigned char>(11)) 
            goto addr_0x180318e2_6;
        switch (eax10) {
        case 0:
            if (reinterpret_cast<signed char>(bl24) < reinterpret_cast<signed char>(49) || reinterpret_cast<signed char>(bl24) > reinterpret_cast<signed char>(57)) {
                zf25 = bl24 == g1804489c;
                if (!zf25) {
                    eax26 = reinterpret_cast<int32_t>(bl24 - 43);
                    if (!eax26) {
                        v11 = reinterpret_cast<void**>(0);
                        eax10 = reinterpret_cast<void**>(2);
                        continue;
                    } else {
                        eax27 = eax26 - 1 - 1;
                        if (!eax27) {
                            v11 = reinterpret_cast<void**>(0x8000);
                            eax10 = reinterpret_cast<void**>(2);
                            continue;
                        } else {
                            if (eax27 - 3) 
                                goto addr_0x1803197b_15;
                            goto addr_0x1803173b_17;
                        }
                    }
                } else {
                    addr_0x1803168b_18:
                    v28 = reinterpret_cast<void**>(5);
                    goto addr_0x180318d8_19;
                }
            } else {
                addr_0x1803167c_20:
                v29 = reinterpret_cast<void**>(3);
                goto addr_0x180318a0_21;
            }
        case 1:
            v14 = reinterpret_cast<void**>(1);
            if (reinterpret_cast<signed char>(bl24) < reinterpret_cast<signed char>(49)) 
                goto addr_0x180316ce_23;
            if (reinterpret_cast<signed char>(bl24) <= reinterpret_cast<signed char>(57)) 
                goto addr_0x1803167c_20;
            addr_0x180316ce_23:
            zf30 = bl24 == g1804489c;
            if (zf30) {
                addr_0x18031796_25:
                eax10 = reinterpret_cast<void**>(4);
                continue;
            } else {
                if (bl24 == 43 || bl24 == 45) {
                    --edi9;
                    v28 = reinterpret_cast<void**>(11);
                    goto addr_0x180318d8_19;
                } else {
                    if (bl24 == 48) {
                        addr_0x1803173b_17:
                        eax10 = reinterpret_cast<void**>(1);
                        continue;
                    } else {
                        addr_0x180316e9_29:
                        if (reinterpret_cast<signed char>(bl24) <= reinterpret_cast<signed char>(67)) 
                            goto addr_0x1803197b_15;
                        if (reinterpret_cast<signed char>(bl24) <= reinterpret_cast<signed char>(69)) 
                            goto addr_0x18031709_31;
                        if (reinterpret_cast<signed char>(bl24) <= reinterpret_cast<signed char>(99)) 
                            goto addr_0x1803197b_15;
                        if (reinterpret_cast<signed char>(bl24) > reinterpret_cast<signed char>(0x65)) 
                            goto addr_0x1803197b_15;
                    }
                    addr_0x18031709_31:
                    v28 = reinterpret_cast<void**>(6);
                    goto addr_0x180318d8_19;
                }
            }
        case 2:
            if (reinterpret_cast<signed char>(bl24) < reinterpret_cast<signed char>(49)) 
                goto addr_0x18031726_35;
            if (reinterpret_cast<signed char>(bl24) <= reinterpret_cast<signed char>(57)) 
                goto addr_0x1803167c_20;
            addr_0x18031726_35:
            zf31 = bl24 == g1804489c;
            if (zf31) 
                goto addr_0x1803168b_18;
            if (!reinterpret_cast<int1_t>(bl24 == 48)) 
                goto addr_0x180318f0_38; else 
                goto addr_0x1803173b_17;
        case 3:
            v14 = reinterpret_cast<void**>(1);
            while (1) {
                less_or_equal32 = reinterpret_cast<signed char>(g18044898) <= reinterpret_cast<signed char>(1);
                if (less_or_equal32) {
                    ecx23 = __image_base;
                    eax33 = static_cast<uint32_t>(reinterpret_cast<unsigned char>(bl24));
                    *reinterpret_cast<void***>(&eax33) = *reinterpret_cast<void***>(ecx23 + eax33 * 2);
                    eax34 = eax33 & reinterpret_cast<unsigned char>(4);
                } else {
                    eax34 = fun_1802ebc4(ecx23, static_cast<uint32_t>(reinterpret_cast<unsigned char>(bl24)), 4);
                    ecx23 = reinterpret_cast<void**>(4);
                }
                if (!eax34) 
                    break;
                if (reinterpret_cast<unsigned char>(v13) >= reinterpret_cast<unsigned char>(25)) {
                    ++v20;
                } else {
                    ++v13;
                }
                bl24 = *reinterpret_cast<void***>(edi9);
                ++edi9;
            }
            zf35 = bl24 == g1804489c;
            if (!zf35) 
                goto addr_0x180317fd_49; else 
                goto addr_0x18031796_25;
        case 4:
            v14 = reinterpret_cast<void**>(1);
            v15 = reinterpret_cast<void**>(1);
            if (!v13) {
                while (reinterpret_cast<int1_t>(bl24 == 48)) {
                    --v20;
                    bl24 = *reinterpret_cast<void***>(edi9);
                    ++edi9;
                }
            }
            while (1) {
                less_or_equal36 = reinterpret_cast<signed char>(g18044898) <= reinterpret_cast<signed char>(1);
                if (less_or_equal36) {
                    ecx23 = __image_base;
                    eax37 = static_cast<uint32_t>(reinterpret_cast<unsigned char>(bl24));
                    *reinterpret_cast<void***>(&eax37) = *reinterpret_cast<void***>(ecx23 + eax37 * 2);
                    eax38 = eax37 & reinterpret_cast<unsigned char>(4);
                } else {
                    eax38 = fun_1802ebc4(ecx23, static_cast<uint32_t>(reinterpret_cast<unsigned char>(bl24)), 4);
                    ecx23 = reinterpret_cast<void**>(4);
                }
                if (!eax38) 
                    goto addr_0x180317fd_49;
                if (reinterpret_cast<unsigned char>(v13) < reinterpret_cast<unsigned char>(25)) {
                    ++v13;
                    --v20;
                }
                bl24 = *reinterpret_cast<void***>(edi9);
                ++edi9;
            }
        case 5:
            less_or_equal39 = reinterpret_cast<signed char>(g18044898) <= reinterpret_cast<signed char>(1);
            v15 = reinterpret_cast<void**>(1);
            if (less_or_equal39) {
                ecx23 = __image_base;
                eax40 = static_cast<uint32_t>(reinterpret_cast<unsigned char>(bl24));
                *reinterpret_cast<void***>(&eax40) = *reinterpret_cast<void***>(ecx23 + eax40 * 2);
                eax41 = eax40 & reinterpret_cast<unsigned char>(4);
            } else {
                eax41 = fun_1802ebc4(ecx23, static_cast<uint32_t>(reinterpret_cast<unsigned char>(bl24)), 4);
                ecx23 = reinterpret_cast<void**>(4);
            }
            if (!eax41) 
                goto addr_0x180318f0_38;
            eax10 = reinterpret_cast<void**>(4);
            break;
        case 6:
            ecx23 = edi9 + 0xfffffffe;
            v22 = ecx23;
            if (reinterpret_cast<signed char>(bl24) < reinterpret_cast<signed char>(49) || reinterpret_cast<signed char>(bl24) > reinterpret_cast<signed char>(57)) {
                eax42 = reinterpret_cast<int32_t>(bl24 - 43);
                if (!eax42) {
                    v28 = reinterpret_cast<void**>(7);
                    goto addr_0x180318d8_19;
                } else {
                    eax43 = eax42 - 1 - 1;
                    if (!eax43) {
                        addr_0x180318ca_69:
                        v12 = reinterpret_cast<void**>(0xffffffff);
                        eax10 = reinterpret_cast<void**>(7);
                        continue;
                    } else {
                        if (eax43 - 3) 
                            goto addr_0x1803197e_71; else 
                            goto addr_0x1803186f_72;
                    }
                }
            } else {
                addr_0x1803189e_73:
                v29 = reinterpret_cast<void**>(9);
                goto addr_0x180318a0_21;
            }
        case 7:
            if (reinterpret_cast<signed char>(bl24) < reinterpret_cast<signed char>(49)) 
                goto addr_0x180318a7_75;
            if (reinterpret_cast<signed char>(bl24) <= reinterpret_cast<signed char>(57)) 
                goto addr_0x1803189e_73;
            addr_0x180318a7_75:
            if (!reinterpret_cast<int1_t>(bl24 == 48)) 
                goto addr_0x180318f0_38;
            goto addr_0x1803186f_72;
        case 8:
            v16 = reinterpret_cast<void**>(1);
            while (reinterpret_cast<int1_t>(bl24 == 48)) {
                bl24 = *reinterpret_cast<void***>(edi9);
                ++edi9;
            }
            if (reinterpret_cast<signed char>(bl24) < reinterpret_cast<signed char>(49)) 
                goto addr_0x1803197b_15;
            if (reinterpret_cast<signed char>(bl24) > reinterpret_cast<signed char>(57)) 
                goto addr_0x1803197b_15;
            goto addr_0x1803189e_73;
            addr_0x180318e2_6:
        case 10:
            if (eax10 == 10) 
                goto addr_0x18031980_84;
            continue;
        case 11:
            if (!a7) {
                --edi9;
                eax10 = reinterpret_cast<void**>(10);
                goto addr_0x180318e2_6;
            } else {
                ecx23 = edi9 + 0xffffffff;
                eax44 = reinterpret_cast<int32_t>(bl24 - 43);
                v22 = ecx23;
                if (eax44) {
                    if (eax44 - 1 - 1) 
                        goto addr_0x1803197e_71; else 
                        goto addr_0x180318ca_69;
                }
            }
        case 9:
            goto 0x180318f8;
        }
        addr_0x180318a1_90:
        --edi9;
        continue;
        addr_0x180318d8_19:
        eax10 = v28;
        continue;
        addr_0x180317fd_49:
        if (bl24 != 43 && bl24 != 45) {
            goto addr_0x180316e9_29;
        }
        addr_0x1803186f_72:
        v28 = reinterpret_cast<void**>(8);
        goto addr_0x180318d8_19;
        addr_0x180318a0_21:
        eax10 = v29;
        goto addr_0x180318a1_90;
    }
    addr_0x18031980_84:
    *a2 = edi9;
    if (!v14) {
        edx45 = reinterpret_cast<void**>(0);
        eax46 = reinterpret_cast<void**>(0);
        esi47 = reinterpret_cast<void**>(0);
        ebx48 = reinterpret_cast<void**>(0);
        v21 = reinterpret_cast<void**>(4);
    } else {
        if (reinterpret_cast<unsigned char>(v13) > reinterpret_cast<unsigned char>(24)) {
            if (v49 >= 5) {
            }
            v13 = reinterpret_cast<void**>(24);
            ++v20;
        }
        if (reinterpret_cast<unsigned char>(v13) <= reinterpret_cast<unsigned char>(0)) 
            goto addr_0x18031a5e_99; else 
            goto addr_0x180319b9_100;
    }
    addr_0x18031a8e_101:
    eax50 = reinterpret_cast<unsigned char>(eax46) | reinterpret_cast<unsigned char>(v11);
    a1->f6 = esi47;
    a1->f2 = ebx48;
    a1->f10 = *reinterpret_cast<int16_t*>(&eax50);
    a1->f0 = *reinterpret_cast<int16_t*>(&edx45);
    return v21;
    addr_0x18031a5e_99:
    edx45 = reinterpret_cast<void**>(0);
    eax46 = reinterpret_cast<void**>(0);
    esi47 = reinterpret_cast<void**>(0);
    ebx48 = reinterpret_cast<void**>(0);
    addr_0x18031a13_102:
    if (!v17) {
        if (v18) {
            edx45 = reinterpret_cast<void**>(0);
            eax46 = reinterpret_cast<void**>(0);
            esi47 = reinterpret_cast<void**>(0);
            ebx48 = reinterpret_cast<void**>(0);
            v21 = reinterpret_cast<void**>(1);
            goto addr_0x18031a8e_101;
        }
    } else {
        ebx48 = reinterpret_cast<void**>(0);
        eax46 = reinterpret_cast<void**>(0x7fff);
        esi47 = reinterpret_cast<void**>(0x80000000);
        edx45 = reinterpret_cast<void**>(0);
        v21 = reinterpret_cast<void**>(2);
        goto addr_0x18031a8e_101;
    }
    addr_0x180319b9_100:
    while (!*reinterpret_cast<signed char*>(&v17 + 3)) {
        --v13;
        ++v20;
    }
    fun_18031541(ecx23, reinterpret_cast<int32_t>(ebp8) + 0xffffffa4, v13, reinterpret_cast<int32_t>(ebp8) + 0xffffffc0);
    eax51 = v19;
    if (reinterpret_cast<signed char>(v12) < reinterpret_cast<signed char>(0)) 
        goto addr_0x180319e4_108;
    addr_0x180319e6_109:
    eax52 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(eax51) + reinterpret_cast<unsigned char>(v20));
    if (!v16) {
        eax52 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(eax52) + reinterpret_cast<uint32_t>(a5));
    }
    if (!v15) {
        eax52 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(eax52) - a6);
    }
    if (reinterpret_cast<int32_t>(eax52) <= reinterpret_cast<int32_t>(0x1450)) {
        if (reinterpret_cast<int32_t>(eax52) >= reinterpret_cast<int32_t>(0xffffebb0)) {
            fun_18032161(reinterpret_cast<int32_t>(ebp8) + 0xffffffc0, eax52, a4);
            edx45 = v53;
            ebx48 = v54;
            esi47 = v55;
            eax46 = v56;
            goto addr_0x18031a13_102;
        } else {
            v18 = reinterpret_cast<void**>(1);
        }
    } else {
        v17 = reinterpret_cast<void**>(1);
    }
    ebx48 = v22;
    esi47 = v22;
    eax46 = v22;
    edx45 = v22;
    goto addr_0x18031a13_102;
    addr_0x180319e4_108:
    eax51 = reinterpret_cast<void**>(-reinterpret_cast<unsigned char>(eax51));
    goto addr_0x180319e6_109;
    v16 = reinterpret_cast<void**>(1);
    esi57 = reinterpret_cast<void**>(0);
    while (1) {
        less_or_equal58 = reinterpret_cast<signed char>(g18044898) <= reinterpret_cast<signed char>(1);
        if (less_or_equal58) {
            ecx23 = __image_base;
            eax59 = static_cast<uint32_t>(reinterpret_cast<unsigned char>(bl24));
            *reinterpret_cast<void***>(&eax59) = *reinterpret_cast<void***>(ecx23 + eax59 * 2);
            eax60 = eax59 & 4;
        } else {
            eax60 = fun_1802ebc4(ecx23, static_cast<uint32_t>(reinterpret_cast<unsigned char>(bl24)), 4);
            ecx23 = reinterpret_cast<void**>(4);
        }
        if (!eax60) 
            break;
        ecx23 = reinterpret_cast<void**>(static_cast<int32_t>(reinterpret_cast<signed char>(bl24)));
        esi57 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(ecx23 + reinterpret_cast<uint32_t>(esi57 + reinterpret_cast<unsigned char>(esi57) * 4) * 2) + 0xffffffd0);
        if (reinterpret_cast<signed char>(esi57) > reinterpret_cast<signed char>(0x1450)) 
            goto addr_0x18031943_125;
        bl24 = *reinterpret_cast<void***>(edi9);
        ++edi9;
    }
    addr_0x18031948_127:
    v19 = esi57;
    while (1) {
        less_or_equal61 = reinterpret_cast<signed char>(g18044898) <= reinterpret_cast<signed char>(1);
        if (less_or_equal61) {
            ecx23 = __image_base;
            eax62 = static_cast<uint32_t>(reinterpret_cast<unsigned char>(bl24));
            *reinterpret_cast<void***>(&eax62) = *reinterpret_cast<void***>(ecx23 + eax62 * 2);
            eax63 = eax62 & 4;
        } else {
            eax63 = fun_1802ebc4(ecx23, static_cast<uint32_t>(reinterpret_cast<unsigned char>(bl24)), 4);
            ecx23 = reinterpret_cast<void**>(4);
        }
        if (!eax63) 
            break;
        bl24 = *reinterpret_cast<void***>(edi9);
        ++edi9;
    }
    addr_0x1803197b_15:
    --edi9;
    goto addr_0x18031980_84;
    addr_0x18031943_125:
    esi57 = reinterpret_cast<void**>(0x1451);
    goto addr_0x18031948_127;
    addr_0x180318f0_38:
    edi9 = v22;
    goto addr_0x18031980_84;
    addr_0x1803197e_71:
    edi9 = ecx23;
    goto addr_0x18031980_84;
}

int32_t fun_1802fb4b(struct s208* a1, void* a2, struct s207* a3, void*** a4, void** a5, void* a6, void* a7, uint32_t a8, int32_t a9) {
    int32_t eax10;

    eax10 = fun_1802f9df(__return_address(), a1, 0x18044b30);
    return eax10;
}

int32_t fun_1802fb61(struct s208* a1, void* a2, struct s207* a3, void*** a4, void** a5, void* a6, void* a7, uint32_t a8, int32_t a9);

int32_t fun_1802fba4(void* a1, void** a2) {
    int32_t eax3;

    fun_18031608(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, a2, 0, 0, 0, 0);
    eax3 = fun_1802fb61(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 12, a1, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 12, a2, 0, 0, 0, 0);
    return eax3;
}

struct s285 {
    int32_t f0;
    int32_t f4;
    signed char[4] pad12;
    signed char* f12;
};

void** fun_1802c744(void** ecx, void** a2, void** a3, void** a4, struct s285* a5, signed char a6, void** a7, void** a8, void** a9, void** a10, void** a11, struct s209* a12, void** a13);

void** fun_1802c6e3(void** ecx, int32_t a2, void** a3, void** a4, void** a5) {
    void* eax6;
    int32_t v7;
    void* ecx8;
    void** ecx9;

    __asm__("fld qword [eax]");
    __asm__("fstp qword [esp]");
    fun_1802fc48(ecx, ecx, ecx, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 16, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffd8);
    eax6 = reinterpret_cast<void*>(0);
    *reinterpret_cast<unsigned char*>(&eax6) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(v7 == 45));
    ecx8 = reinterpret_cast<void*>(0);
    *reinterpret_cast<unsigned char*>(&ecx8) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(!reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(a4) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(a4 == 0))));
    ecx9 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ecx8) + (reinterpret_cast<unsigned char>(a3) + reinterpret_cast<uint32_t>(eax6)));
    fun_1802fbd1(ecx9, a4 + 1, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff0, ecx, ecx, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 16, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffd8);
    fun_1802c744(ecx9, a3, a4, a5, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 16, 0, ecx9, a4 + 1, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff0, ecx, ecx, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 16, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffd8);
    return a3;
}

void** fun_1802c902(void** ecx, int32_t a2, void** a3, void** a4, void** a5) {
    void* ebp6;
    void** v7;
    void** ebx8;
    void** v9;
    void** esi10;
    void** v11;
    void** edi12;
    void** ebx13;
    void* eax14;
    int32_t v15;
    void** edi16;
    void** eax17;
    void* v18;
    void* v19;
    void** v20;
    void** v21;
    struct s209* v22;
    void** v23;
    void** eax24;
    void** v25;
    void** v26;
    struct s209* v27;
    void** v28;

    ebp6 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    v7 = ebx8;
    v9 = esi10;
    v11 = edi12;
    __asm__("fld qword [eax]");
    __asm__("fstp qword [esp]");
    fun_1802fc48(ecx, ecx, ecx, reinterpret_cast<int32_t>(ebp6) - 16, reinterpret_cast<int32_t>(ebp6) + 0xffffffd8);
    ebx13 = a4;
    eax14 = reinterpret_cast<void*>(0);
    *reinterpret_cast<unsigned char*>(&eax14) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(v15 == 45));
    edi16 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax14) + reinterpret_cast<unsigned char>(a3));
    fun_1802fbd1(edi16, ebx13, reinterpret_cast<int32_t>(ebp6) + 0xfffffff0, ecx, ecx, reinterpret_cast<int32_t>(ebp6) - 16, reinterpret_cast<int32_t>(ebp6) + 0xffffffd8);
    eax17 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(v18) - 1);
    *reinterpret_cast<unsigned char*>(&ecx) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(reinterpret_cast<int32_t>(v19) + 0xffffffff) < reinterpret_cast<signed char>(eax17)));
    if (reinterpret_cast<signed char>(eax17) < reinterpret_cast<signed char>(0xfffffffc) || reinterpret_cast<signed char>(eax17) >= reinterpret_cast<signed char>(ebx13)) {
        eax24 = fun_1802c744(ecx, a3, ebx13, a5, reinterpret_cast<int32_t>(ebp6) - 16, 1, v11, v9, v7, v20, v21, v22, v23);
    } else {
        if (*reinterpret_cast<unsigned char*>(&ecx)) {
            do {
                ++edi16;
            } while (*reinterpret_cast<void***>(edi16));
            *reinterpret_cast<void***>(edi16 + 0xfffffffe) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(edi16 + 0xfffffffe)) & reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(edi16)));
        }
        eax24 = fun_1802c85b(a3, ebx13, reinterpret_cast<int32_t>(ebp6) - 16, 1, v11, v9, v7, v25, v26, v27, v28);
    }
    return eax24;
}

void** fun_1802c744(void** ecx, void** a2, void** a3, void** a4, struct s285* a5, signed char a6, void** a7, void** a8, void** a9, void** a10, void** a11, struct s209* a12, void** a13) {
    void** eax14;
    void* eax15;
    void** edi16;
    void** esi17;
    void** ebx18;
    void** eax19;
    void** cl20;
    void* ecx21;
    void** ecx22;
    void** eax23;
    void** ecx24;
    int32_t ebx25;
    void** ecx26;
    int32_t eax27;
    void** ecx28;
    int32_t eax29;

    if (a6) {
        eax14 = reinterpret_cast<void**>(0);
        *reinterpret_cast<unsigned char*>(&eax14) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(a3) > reinterpret_cast<signed char>(0)));
        eax15 = reinterpret_cast<void*>(0);
        *reinterpret_cast<unsigned char*>(&eax15) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(a5->f0 == 45));
        fun_1802c9e6(ecx, reinterpret_cast<int32_t>(eax15) + reinterpret_cast<unsigned char>(a2), eax14, edi16, esi17, ebx18);
    }
    eax19 = a2;
    if (a5->f0 == 45) {
        *reinterpret_cast<void***>(a2) = reinterpret_cast<void**>(45);
        eax19 = a2 + 1;
    }
    if (reinterpret_cast<signed char>(a3) > reinterpret_cast<signed char>(0)) {
        *reinterpret_cast<void***>(eax19) = *reinterpret_cast<void***>(eax19 + 1);
        ++eax19;
        cl20 = g1804489c;
        *reinterpret_cast<void***>(eax19) = cl20;
    }
    ecx21 = reinterpret_cast<void*>(0);
    *reinterpret_cast<unsigned char*>(&ecx21) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(a6 == 0));
    ecx22 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ecx21) + reinterpret_cast<unsigned char>(eax19) + reinterpret_cast<unsigned char>(a3));
    eax23 = fun_1802fd60(ecx22, ecx22, 0x180355b0, edi16, esi17);
    if (a4) {
        *reinterpret_cast<void***>(eax23) = reinterpret_cast<void**>(69);
    }
    ecx24 = eax23 + 1;
    if (*a5->f12 != 48) {
        ebx25 = a5->f4 - 1;
        if (ebx25 < 0) {
            ebx25 = -ebx25;
            *reinterpret_cast<void***>(ecx24) = reinterpret_cast<void**>(45);
        }
        ecx26 = ecx24 + 1;
        if (ebx25 >= 100) {
            __asm__("cdq ");
            eax27 = ebx25 / 100;
            *reinterpret_cast<void***>(ecx26) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx26)) + reinterpret_cast<unsigned char>(*reinterpret_cast<void**>(&eax27)));
            __asm__("cdq ");
            ebx25 = ebx25 % 100;
        }
        ecx28 = ecx26 + 1;
        if (ebx25 >= 10) {
            __asm__("cdq ");
            eax29 = ebx25 / 10;
            *reinterpret_cast<void***>(ecx28) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx28)) + reinterpret_cast<unsigned char>(*reinterpret_cast<void**>(&eax29)));
            __asm__("cdq ");
            ebx25 = ebx25 % 10;
        }
        *reinterpret_cast<void***>(ecx28 + 1) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx28 + 1)) + reinterpret_cast<unsigned char>(*reinterpret_cast<void**>(&ebx25)));
    }
    return a2;
}

void** fun_1802c85b(void** a1, void** a2, struct s210* a3, signed char a4, void** a5, void** a6, void** a7, void** a8, void** a9, struct s209* a10, void** a11) {
    void** eax12;
    void* ecx13;
    void** ecx14;
    void** edi15;
    void** edi16;
    void** edi17;
    void** esi18;
    void** ebx19;
    void** al20;
    void** edi21;
    void** esi22;
    void** ebp23;

    eax12 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(a3->f4) - 1);
    if (a4 && eax12 == a2) {
        ecx13 = reinterpret_cast<void*>(0);
        *reinterpret_cast<unsigned char*>(&ecx13) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(a3->f0 == 45));
        ecx14 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ecx13) + reinterpret_cast<unsigned char>(eax12) + reinterpret_cast<unsigned char>(a1));
        *reinterpret_cast<void***>(ecx14) = reinterpret_cast<void**>(48);
        *reinterpret_cast<void***>(ecx14 + 1) = reinterpret_cast<void**>(0);
    }
    edi15 = a1;
    if (a3->f0 == 45) {
        *reinterpret_cast<void***>(a1) = reinterpret_cast<void**>(45);
        edi15 = a1 + 1;
    }
    if (!reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(a3->f4) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(a3->f4 == 0))) {
        edi16 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi15) + reinterpret_cast<uint32_t>(a3->f4));
    } else {
        fun_1802c9e6(ecx14, edi15, 1, edi17, esi18, ebx19);
        *reinterpret_cast<void***>(edi15) = reinterpret_cast<void**>(48);
        ecx14 = reinterpret_cast<void**>(1);
        edi16 = edi15 + 1;
    }
    if (reinterpret_cast<signed char>(a2) > reinterpret_cast<signed char>(0) && (fun_1802c9e6(ecx14, edi16, 1, edi17, esi18, ebx19), al20 = g1804489c, *reinterpret_cast<void***>(edi16) = al20, edi21 = edi16 + 1, reinterpret_cast<int32_t>(a3->f4) < reinterpret_cast<int32_t>(0))) {
        if (!a4) {
            esi22 = reinterpret_cast<void**>(-reinterpret_cast<uint32_t>(a3->f4));
            if (reinterpret_cast<signed char>(a2) < reinterpret_cast<signed char>(esi22)) {
                addr_0x1802c8e4_11:
                fun_1802c9e6(1, edi21, a2, edi17, esi18, ebx19);
                fun_1802fe50(1, edi21, 48, a2, edi21, a2, edi17, esi18, ebx19, ebp23);
            } else {
                addr_0x1802c8e1_12:
                a2 = esi22;
                goto addr_0x1802c8e4_11;
            }
        } else {
            esi22 = reinterpret_cast<void**>(-reinterpret_cast<uint32_t>(a3->f4));
            goto addr_0x1802c8e1_12;
        }
    }
    return a1;
}

struct s209* fun_1802fc48(void** ecx, void** a2, void** a3, struct s209* a4, void** a5) {
    uint32_t v6;
    int16_t v7;
    void** v8;
    void** v9;
    void** eax10;
    signed char v11;
    int16_t v12;

    fun_1802fca4(ecx, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 8);
    *reinterpret_cast<int16_t*>(&v6) = v7;
    eax10 = fun_18031ad9(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 8, v8, v9, v6, 17, 0, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 40);
    a4->f8 = eax10;
    a4->f0 = static_cast<int32_t>(v11);
    a4->f4 = static_cast<int32_t>(v12);
    fun_1802fd60(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 8, a5, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffdc, v8, v9, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 8, a5, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffdc, v8, v9);
    a4->f12 = a5;
    return a4;
}

void** fun_1802fbd1(void** a1, void** a2, void** a3, void** a4, void** a5, struct s209* a6, void** a7) {
    void** v8;
    void** v9;
    void** ebp10;
    void** edx11;
    void** v12;
    void** ebx13;
    void** ebx14;
    void** v15;
    void** esi16;
    void** esi17;
    void** ecx18;
    void** v19;
    void** edi20;
    void** edi21;
    void** eax22;
    int32_t edx23;
    void** eax24;

    v8 = reinterpret_cast<void**>(__return_address());
    v9 = ebp10;
    edx11 = a3;
    v12 = ebx13;
    ebx14 = a2;
    v15 = esi16;
    esi17 = a1;
    ecx18 = *reinterpret_cast<void***>(edx11 + 12);
    v19 = edi20;
    edi21 = esi17 + 1;
    *reinterpret_cast<void***>(esi17) = reinterpret_cast<void**>(48);
    eax22 = edi21;
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(ebx14) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(ebx14 == 0))) {
        a1 = ebx14;
        ebx14 = reinterpret_cast<void**>(0);
        do {
            if (!*reinterpret_cast<void***>(ecx18)) {
                edx23 = 48;
            } else {
                edx23 = static_cast<int32_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx18)));
                ++ecx18;
            }
            *reinterpret_cast<void***>(eax22) = *reinterpret_cast<void***>(&edx23);
            ++eax22;
            --a1;
        } while (a1);
        edx11 = a3;
    }
    *reinterpret_cast<void***>(eax22) = reinterpret_cast<void**>(0);
    if (reinterpret_cast<signed char>(ebx14) >= reinterpret_cast<signed char>(0) && reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx18)) >= reinterpret_cast<signed char>(53)) {
        while (--eax22, reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax22) == 57)) {
            *reinterpret_cast<void***>(eax22) = reinterpret_cast<void**>(48);
        }
        *reinterpret_cast<void***>(eax22) = *reinterpret_cast<void***>(eax22) + 1;
    }
    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(esi17) == 49)) {
        eax24 = fun_1802feb0(ecx18, edi21, v19, v15, v12, v9);
        eax22 = fun_1802b920(esi17, edi21, eax24 + 1, edi21, v19, v15, v12, v9, v8, a1, a2, a3);
    } else {
        *reinterpret_cast<void***>(edx11 + 4) = *reinterpret_cast<void***>(edx11 + 4) + 1;
    }
    return eax22;
}

void** __image_base = reinterpret_cast<void**>(36);

void** __image_base = reinterpret_cast<void**>(20);

int32_t __image_base = 0x1802ff2b;

int32_t __image_base = 0x1802ff2b;

int32_t __image_base = 0x1802ff2b;

int32_t fun_1802cbf7(void** a1, void** a2, void* a3) {
    void* ebp4;
    void** v5;
    void** ebx6;
    void** v7;
    void** esi8;
    void** v9;
    void** edi10;
    void** esi11;
    void** bl12;
    void** edi13;
    void** v14;
    void** v15;
    void** ecx16;
    void** v17;
    void** edx18;
    uint32_t eax19;
    uint32_t eax20;
    void** eax21;
    void** v22;
    void** ecx23;
    void** v24;
    void** v25;
    void** v26;
    void** v27;
    void** v28;
    void** v29;
    void** v30;
    int32_t eax31;
    int32_t eax32;
    int32_t eax33;
    int32_t eax34;
    void** eax35;
    void** eax36;
    void** eax37;
    int32_t eax38;
    int32_t eax39;
    int32_t eax40;
    void** eax41;
    int32_t eax42;
    void** edi43;
    void** v44;
    int32_t eax45;
    void** eax46;
    void** eax47;
    void** v48;
    void** eax49;
    void** eax50;
    int32_t eax51;
    int32_t eax52;
    int32_t eax53;
    int32_t eax54;
    void** v55;
    void** eax56;
    void** eax57;
    void** eax58;
    void** esi59;
    void** edi60;
    void* v61;
    void** eax62;
    void** eax63;
    void** v64;
    void** ebx65;
    void** eax66;
    void** v67;
    void** ebx68;
    void** esi69;
    void** eax70;
    void** ebx71;
    void** edi72;
    void** eax73;
    int32_t eax74;
    int32_t eax75;
    void** esi76;
    int32_t eax77;
    void** eax78;
    void** eax79;
    void** edx80;
    void** eax81;
    void** edx82;
    void* eax83;
    uint32_t esi84;
    void** v85;
    void** eax86;
    void** eax87;
    void** eax88;

    ebp4 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    v5 = ebx6;
    v7 = esi8;
    v9 = edi10;
    esi11 = reinterpret_cast<void**>(0);
    bl12 = *reinterpret_cast<void***>(a2);
    edi13 = a2 + 1;
    v14 = reinterpret_cast<void**>(0);
    v15 = edi13;
    if (bl12) {
        ecx16 = v17;
        edx18 = reinterpret_cast<void**>(0);
        while (!0) {
            if (reinterpret_cast<signed char>(bl12) < reinterpret_cast<signed char>(32) || reinterpret_cast<signed char>(bl12) > reinterpret_cast<signed char>(0x78)) {
                eax19 = 0;
            } else {
                eax20 = reinterpret_cast<uint32_t>(static_cast<int32_t>(reinterpret_cast<signed char>(bl12)));
                *reinterpret_cast<signed char*>(&eax20) = *reinterpret_cast<signed char*>(eax20 + reinterpret_cast<uint32_t>("rePresent"));
                eax19 = eax20 & 15;
            }
            eax21 = reinterpret_cast<void**>(static_cast<int32_t>(*reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esi11 + eax19 * 8) + 0x180355b8)) >> 4);
            v22 = eax21;
            switch (eax21) {
                addr_0x1802cd96_9:
            case 0:
                ecx23 = __image_base;
                v24 = reinterpret_cast<void**>(0);
                if (*reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(ecx23 + reinterpret_cast<unsigned char>(bl12) * 2) + 1) & 0x80) {
                    fun_1802d338(static_cast<int32_t>(reinterpret_cast<signed char>(bl12)), a1, reinterpret_cast<int32_t>(ebp4) + 0xffffffec);
                    bl12 = *reinterpret_cast<void***>(edi13);
                    v15 = edi13 + 1;
                }
                fun_1802d338(static_cast<int32_t>(reinterpret_cast<signed char>(bl12)), a1, reinterpret_cast<int32_t>(ebp4) + 0xffffffec);
                goto addr_0x1802d2ff_12;
            case 1:
                v25 = reinterpret_cast<void**>(0xffffffff);
                v26 = reinterpret_cast<void**>(0);
                v27 = reinterpret_cast<void**>(0);
                v28 = reinterpret_cast<void**>(0);
                v29 = reinterpret_cast<void**>(0);
                v30 = reinterpret_cast<void**>(0);
                v24 = reinterpret_cast<void**>(0);
                goto addr_0x1802d2ff_12;
            case 2:
                eax31 = reinterpret_cast<int32_t>(bl12 - 32);
                if (!eax31) {
                    v30 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v30) | 2);
                    goto addr_0x1802d2ff_12;
                } else {
                    eax32 = eax31 - 3;
                    if (!eax32) {
                        *reinterpret_cast<unsigned char*>(&v30) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&v30) | 0x80);
                        goto addr_0x1802d2ff_12;
                    } else {
                        eax33 = eax32 - 8;
                        if (!eax33) {
                            v30 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v30) | 1);
                            goto addr_0x1802d2ff_12;
                        } else {
                            eax34 = eax33 - 1 - 1;
                            if (!eax34) {
                                v30 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v30) | 4);
                                goto addr_0x1802d2ff_12;
                            } else {
                                if (!(eax34 - 3)) {
                                    v30 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v30) | 8);
                                    goto addr_0x1802d2ff_12;
                                }
                            }
                        }
                    }
                }
            case 3:
                if (!reinterpret_cast<int1_t>(bl12 == 42)) {
                    eax35 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(bl12 + reinterpret_cast<uint32_t>(v28 + reinterpret_cast<unsigned char>(v28) * 4) * 2) + 0xffffffd0);
                } else {
                    eax36 = fun_1802d3d6(reinterpret_cast<int32_t>(ebp4) + 16);
                    v28 = eax36;
                    if (reinterpret_cast<signed char>(eax36) >= reinterpret_cast<signed char>(0)) {
                        addr_0x1802d2ff_12:
                        bl12 = *reinterpret_cast<void***>(v15);
                        edi13 = v15 + 1;
                        v15 = edi13;
                        if (bl12) 
                            goto addr_0x1802cc23_27; else 
                            goto addr_0x1802d310_28;
                    } else {
                        v30 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v30) | 4);
                        eax35 = reinterpret_cast<void**>(-reinterpret_cast<unsigned char>(eax36));
                    }
                }
                v28 = eax35;
                goto addr_0x1802d2ff_12;
                addr_0x1802cc23_27:
                ecx16 = v25;
                esi11 = v22;
                edx18 = reinterpret_cast<void**>(0);
                break;
            case 4:
                v25 = reinterpret_cast<void**>(0);
                goto addr_0x1802d2ff_12;
            case 5:
                if (!reinterpret_cast<int1_t>(bl12 == 42)) {
                    v25 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(bl12 + reinterpret_cast<uint32_t>(ecx16 + reinterpret_cast<unsigned char>(ecx16) * 4) * 2) + 0xffffffd0);
                    goto addr_0x1802d2ff_12;
                } else {
                    eax37 = fun_1802d3d6(reinterpret_cast<int32_t>(ebp4) + 16);
                    v25 = eax37;
                    if (reinterpret_cast<signed char>(eax37) < reinterpret_cast<signed char>(0)) {
                        v25 = reinterpret_cast<void**>(0xffffffff);
                        goto addr_0x1802d2ff_12;
                    }
                }
            case 6:
                if (bl12 == 73) {
                    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(edi13) == 54) || !reinterpret_cast<int1_t>(*reinterpret_cast<void***>(edi13 + 1) == 52)) {
                        v22 = reinterpret_cast<void**>(0);
                        goto addr_0x1802cd96_9;
                    } else {
                        *reinterpret_cast<unsigned char*>(&v30 + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&v30 + 1) | 0x80);
                        v15 = edi13 + 1 + 1;
                        goto addr_0x1802d2ff_12;
                    }
                } else {
                    if (bl12 == 0x68) {
                        v30 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v30) | 32);
                        goto addr_0x1802d2ff_12;
                    } else {
                        if (bl12 == 0x6c) {
                            v30 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v30) | 16);
                            goto addr_0x1802d2ff_12;
                        } else {
                            if (reinterpret_cast<int1_t>(bl12 == 0x77)) {
                                *reinterpret_cast<unsigned char*>(&v30 + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&v30 + 1) | 8);
                                goto addr_0x1802d2ff_12;
                            }
                        }
                    }
                }
            case 7:
                eax38 = static_cast<int32_t>(reinterpret_cast<signed char>(bl12));
                if (eax38 > 0x67) {
                    eax39 = eax38 - 0x69;
                    if (!eax39) {
                        v30 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v30) | 64);
                        goto addr_0x1802d0e0_49;
                    } else {
                        eax40 = eax39 - 5;
                        if (!eax40) {
                            eax41 = fun_1802d3d6(reinterpret_cast<int32_t>(ebp4) + 16);
                            if (!(*reinterpret_cast<unsigned char*>(&v30) & 32)) {
                                *reinterpret_cast<void***>(eax41) = reinterpret_cast<void**>(0);
                            } else {
                                *reinterpret_cast<void***>(eax41) = reinterpret_cast<void**>(0);
                            }
                            v27 = reinterpret_cast<void**>(1);
                            goto addr_0x1802d2ff_12;
                        }
                        eax42 = eax40 - 1;
                        if (eax42) 
                            goto addr_0x1802d01b_56;
                    }
                } else {
                    if (eax38 >= 0x65) {
                        addr_0x1802ce85_58:
                        v30 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v30) | 64);
                        edi43 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp4) + 0xfffffdb8);
                        v44 = edi43;
                        if (reinterpret_cast<signed char>(ecx16) >= reinterpret_cast<signed char>(0)) {
                            if (!ecx16 && reinterpret_cast<int1_t>(bl12 == 0x67)) {
                                v25 = reinterpret_cast<void**>(1);
                                goto addr_0x1802cf77_61;
                            }
                        } else {
                            v25 = reinterpret_cast<void**>(6);
                            goto addr_0x1802cf77_61;
                        }
                    } else {
                        if (eax38 > 88) {
                            eax45 = eax38 - 90;
                            if (!eax45) {
                                eax46 = fun_1802d3d6(reinterpret_cast<int32_t>(ebp4) + 16);
                                ecx16 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp4) + 16);
                                if (!eax46 || (ecx16 = *reinterpret_cast<void***>(eax46 + 4), ecx16 == 0)) {
                                    eax47 = __image_base;
                                    v44 = eax47;
                                    v48 = eax47;
                                    goto addr_0x1802cff7_67;
                                } else {
                                    if (!(*reinterpret_cast<unsigned char*>(&v30 + 1) & 8)) {
                                        v24 = reinterpret_cast<void**>(0);
                                        v44 = ecx16;
                                        eax49 = reinterpret_cast<void**>(static_cast<int32_t>(reinterpret_cast<int16_t>(*reinterpret_cast<void***>(eax46))));
                                        goto addr_0x1802d1fe_70;
                                    } else {
                                        eax50 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(static_cast<int32_t>(reinterpret_cast<int16_t>(*reinterpret_cast<void***>(eax46)))) >> 1);
                                        v44 = ecx16;
                                        v14 = eax50;
                                        v24 = reinterpret_cast<void**>(1);
                                        goto addr_0x1802d201_72;
                                    }
                                }
                            } else {
                                eax51 = eax45 - 9;
                                if (eax51) {
                                    if (eax51 - 1) {
                                        goto addr_0x1802d201_72;
                                    }
                                }
                            }
                        } else {
                            if (eax38 == 88) {
                                addr_0x1802d076_77:
                                goto addr_0x1802d07d_78;
                            } else {
                                eax52 = eax38 - 67;
                                if (!eax52) {
                                    if (!(*reinterpret_cast<uint16_t*>(&v30) & 0x830)) {
                                        *reinterpret_cast<unsigned char*>(&v30 + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&v30 + 1) | 8);
                                        goto addr_0x1802ceb2_82;
                                    }
                                } else {
                                    eax53 = eax52 - 1 - 1;
                                    if (!eax53 || (eax54 = eax53 - 1 - 1, eax54 == 0)) {
                                        v26 = reinterpret_cast<void**>(1);
                                        bl12 = bl12 + 32;
                                        goto addr_0x1802ce85_58;
                                    } else {
                                        if (eax54 - 12) 
                                            goto addr_0x1802d201_72;
                                        if (!(*reinterpret_cast<uint16_t*>(&v30) & 0x830)) {
                                            *reinterpret_cast<unsigned char*>(&v30 + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&v30 + 1) | 8);
                                            goto addr_0x1802ce24_88;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                v55 = reinterpret_cast<void**>(8);
                if (*reinterpret_cast<unsigned char*>(&v30) & 0x80) {
                    *reinterpret_cast<unsigned char*>(&v30 + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&v30 + 1) | 2);
                }
                addr_0x1802d0e7_91:
                if (!(*reinterpret_cast<unsigned char*>(&v30 + 1) & 0x80)) {
                    if (!(*reinterpret_cast<unsigned char*>(&v30) & 32)) {
                        if (!(*reinterpret_cast<unsigned char*>(&v30) & 64)) {
                            eax56 = fun_1802d3d6(reinterpret_cast<int32_t>(ebp4) + 16);
                            ecx16 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp4) + 16);
                            edx18 = reinterpret_cast<void**>(0);
                        } else {
                            eax56 = fun_1802d3d6(reinterpret_cast<int32_t>(ebp4) + 16);
                            ecx16 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp4) + 16);
                            goto addr_0x1802d112_96;
                        }
                    } else {
                        if (!(*reinterpret_cast<unsigned char*>(&v30) & 64)) {
                            eax57 = fun_1802d3d6(reinterpret_cast<int32_t>(ebp4) + 16);
                            ecx16 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp4) + 16);
                            eax56 = reinterpret_cast<void**>(static_cast<uint32_t>(*reinterpret_cast<uint16_t*>(&eax57)));
                            goto addr_0x1802d112_96;
                        } else {
                            eax58 = fun_1802d3d6(reinterpret_cast<int32_t>(ebp4) + 16);
                            ecx16 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp4) + 16);
                            eax56 = reinterpret_cast<void**>(static_cast<int32_t>(*reinterpret_cast<int16_t*>(&eax58)));
                            goto addr_0x1802d112_96;
                        }
                    }
                } else {
                    eax56 = fun_1802d3e3(reinterpret_cast<int32_t>(ebp4) + 16);
                    ecx16 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp4) + 16);
                }
                addr_0x1802d13a_101:
                if (!(*reinterpret_cast<unsigned char*>(&v30) & 64) || static_cast<int1_t>(!0)) {
                    esi59 = eax56;
                    edi60 = reinterpret_cast<void**>(0);
                } else {
                    esi59 = reinterpret_cast<void**>(-reinterpret_cast<unsigned char>(eax56));
                    edx18 = reinterpret_cast<void**>(-static_cast<uint32_t>(reinterpret_cast<uint1_t>(!!eax56)));
                    *reinterpret_cast<unsigned char*>(&v30 + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&v30 + 1) | 1);
                    edi60 = edx18;
                }
                if (!(*reinterpret_cast<unsigned char*>(&v30 + 1) & 0x80)) {
                    edi60 = reinterpret_cast<void**>(0);
                }
                if (reinterpret_cast<signed char>(v25) >= reinterpret_cast<signed char>(0)) {
                    v30 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v30) & 0xfffffff7);
                } else {
                    v25 = reinterpret_cast<void**>(1);
                }
                if (!(reinterpret_cast<unsigned char>(esi59) | reinterpret_cast<unsigned char>(edi60))) {
                    v29 = reinterpret_cast<void**>(0);
                }
                v61 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(ebp4) + 0xffffffb7);
                while ((eax62 = v25, --v25, !reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax62) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax62 == 0))) || reinterpret_cast<unsigned char>(esi59) | reinterpret_cast<unsigned char>(edi60)) {
                    eax63 = v55;
                    __asm__("cdq ");
                    v64 = eax63;
                    *reinterpret_cast<int16_t*>(&eax63) = fun_18030b30(ecx16, esi59, edi60, eax63, edx18);
                    ebx65 = eax63 + 48;
                    *reinterpret_cast<int16_t*>(&eax63) = fun_18030ac0(ecx16, esi59, edi60, v64, edx18);
                    esi59 = eax63;
                    edi60 = edx18;
                    if (reinterpret_cast<signed char>(ebx65) > reinterpret_cast<signed char>(57)) {
                    }
                    v61 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(v61) - 1);
                }
                eax66 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp4) - 73 - reinterpret_cast<uint32_t>(v61));
                v44 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(v61) + 1);
                v14 = eax66;
                if (!(*reinterpret_cast<unsigned char*>(&v30 + 1) & 2) || (ecx16 = v44, reinterpret_cast<int1_t>(v67 == 48)) && eax66) {
                    addr_0x1802d201_72:
                    if (v27) 
                        goto addr_0x1802d2ff_12;
                } else {
                    --v44;
                    eax49 = eax66 + 1;
                    ecx16 = v44;
                    goto addr_0x1802d1fe_70;
                }
                ebx68 = v30;
                if (!(*reinterpret_cast<unsigned char*>(&ebx68) & 64)) 
                    goto addr_0x1802d239_119;
                if (!(*reinterpret_cast<unsigned char*>(&ebx68 + 1) & 1)) {
                    if (!(*reinterpret_cast<unsigned char*>(&ebx68) & 1)) {
                        if (!(*reinterpret_cast<unsigned char*>(&ebx68) & 2)) {
                            addr_0x1802d239_119:
                            esi69 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v28) - reinterpret_cast<unsigned char>(v29) - reinterpret_cast<unsigned char>(v14));
                            if (!(*reinterpret_cast<unsigned char*>(&ebx68) & 12)) {
                                fun_1802d36d(ecx16, 32, esi69, a1, reinterpret_cast<int32_t>(ebp4) + 0xffffffec);
                            }
                        } else {
                            goto addr_0x1802d232_125;
                        }
                    } else {
                        goto addr_0x1802d232_125;
                    }
                } else {
                    goto addr_0x1802d232_125;
                }
                fun_1802d39e(ecx16, reinterpret_cast<int32_t>(ebp4) + 0xffffffea, v29, a1, reinterpret_cast<int32_t>(ebp4) + 0xffffffec);
                if (*reinterpret_cast<unsigned char*>(&ebx68) & 8 && !(*reinterpret_cast<unsigned char*>(&ebx68) & 4)) {
                    fun_1802d36d(ecx16, 48, esi69, a1, reinterpret_cast<int32_t>(ebp4) + 0xffffffec);
                }
                if (!v24 || reinterpret_cast<signed char>(v14) <= reinterpret_cast<signed char>(0)) {
                    fun_1802d39e(ecx16, v44, v14, a1, reinterpret_cast<int32_t>(ebp4) + 0xffffffec);
                } else {
                    eax70 = v14;
                    ebx71 = v44;
                    edi72 = eax70 + 0xffffffff;
                    do {
                        eax70 = *reinterpret_cast<void***>(ebx71);
                        ebx71 = ebx71 + 1 + 1;
                        eax73 = fun_180309f5(ecx16, reinterpret_cast<int32_t>(ebp4) + 0xffffffc8, eax70);
                        ecx16 = eax70;
                        if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax73) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax73 == 0)) 
                            break;
                        ecx16 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp4) + 0xffffffec);
                        fun_1802d39e(ecx16, reinterpret_cast<int32_t>(ebp4) + 0xffffffc8, eax73, a1, ecx16);
                        eax70 = edi72;
                        --edi72;
                    } while (eax70);
                    goto addr_0x1802d2d0_135;
                }
                addr_0x1802d2e7_136:
                if (*reinterpret_cast<unsigned char*>(&v30) & 4) {
                    fun_1802d36d(ecx16, 32, esi69, a1, reinterpret_cast<int32_t>(ebp4) + 0xffffffec);
                    goto addr_0x1802d2ff_12;
                }
                addr_0x1802d2d0_135:
                goto addr_0x1802d2e7_136;
                addr_0x1802d232_125:
                v29 = reinterpret_cast<void**>(1);
                goto addr_0x1802d239_119;
                addr_0x1802d1fe_70:
                v14 = eax49;
                goto addr_0x1802d201_72;
                addr_0x1802d112_96:
                __asm__("cdq ");
                goto addr_0x1802d13a_101;
                addr_0x1802d01b_56:
                eax74 = eax42 - 1;
                if (!eax74) {
                    v25 = reinterpret_cast<void**>(8);
                    goto addr_0x1802d076_77;
                } else {
                    eax75 = eax74 - 3;
                    if (!eax75) {
                        addr_0x1802ce24_88:
                        esi76 = v25;
                        if (reinterpret_cast<int1_t>(esi76 == 0xffffffff)) {
                            esi76 = reinterpret_cast<void**>(0x7fffffff);
                        }
                    } else {
                        eax77 = eax75 - 1 - 1;
                        if (!eax77) {
                            addr_0x1802d0e0_49:
                            v55 = reinterpret_cast<void**>(10);
                            goto addr_0x1802d0e7_91;
                        } else {
                            if (eax77 - 3) 
                                goto addr_0x1802d201_72;
                            goto addr_0x1802d07d_78;
                        }
                    }
                }
                eax78 = fun_1802d3d6(reinterpret_cast<int32_t>(ebp4) + 16);
                ecx16 = eax78;
                v44 = ecx16;
                if (!(*reinterpret_cast<uint16_t*>(&v30) & 0x810)) {
                    if (!ecx16) {
                        ecx16 = __image_base;
                        v44 = ecx16;
                    }
                    eax79 = ecx16;
                    while ((edx80 = esi76, --esi76, !!edx80) && *reinterpret_cast<void***>(eax79)) {
                        ++eax79;
                    }
                    eax49 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax79) - reinterpret_cast<unsigned char>(ecx16));
                    goto addr_0x1802d1fe_70;
                } else {
                    if (!ecx16) {
                        ecx16 = __image_base;
                        v44 = ecx16;
                    }
                    v24 = reinterpret_cast<void**>(1);
                    eax81 = ecx16;
                    while ((edx82 = esi76, --esi76, !!edx82) && *reinterpret_cast<void***>(eax81)) {
                        eax81 = eax81 + 1 + 1;
                    }
                    eax49 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax81) - reinterpret_cast<unsigned char>(ecx16)) >> 1);
                    goto addr_0x1802d1fe_70;
                }
                addr_0x1802d07d_78:
                v55 = reinterpret_cast<void**>(16);
                if (*reinterpret_cast<unsigned char*>(&v30) & 0x80) {
                    v29 = reinterpret_cast<void**>(2);
                    goto addr_0x1802d0e7_91;
                }
                addr_0x1802cf77_61:
                eax83 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(a3) + 8);
                a3 = eax83;
                ecx16 = *reinterpret_cast<void***>(reinterpret_cast<int32_t>(eax83) - 8);
                v67 = ecx16;
                __image_base(reinterpret_cast<int32_t>(ebp4) - 72, reinterpret_cast<int32_t>(ebp4) - 0x248, static_cast<int32_t>(reinterpret_cast<signed char>(bl12)), v25, v26);
                esi84 = reinterpret_cast<unsigned char>(v30) & 0x80;
                if (esi84 && !v25) {
                    __image_base();
                    ecx16 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp4) + 0xfffffdb8);
                }
                if (reinterpret_cast<int1_t>(bl12 == 0x67) && !esi84) {
                    __image_base(ecx16);
                    ecx16 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp4) + 0xfffffdb8);
                }
                if (*reinterpret_cast<signed char*>(&v85) == 45) {
                    *reinterpret_cast<unsigned char*>(&v30 + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&v30 + 1) | 1);
                    edi43 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp4) + 0xfffffdb9);
                    v44 = edi43;
                }
                v48 = edi43;
                addr_0x1802cff7_67:
                eax49 = fun_1802feb0(ecx16, v48, v9, v7, v5, v85);
                ecx16 = v48;
                goto addr_0x1802d1fe_70;
                addr_0x1802ceb2_82:
                if (!(*reinterpret_cast<uint16_t*>(&v30) & 0x810)) {
                    eax86 = fun_1802d3d6(reinterpret_cast<int32_t>(ebp4) + 16);
                    ecx16 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp4) + 16);
                    *reinterpret_cast<signed char*>(&v85) = *reinterpret_cast<signed char*>(&eax86);
                    v14 = reinterpret_cast<void**>(1);
                } else {
                    eax87 = fun_1802d3f3(reinterpret_cast<int32_t>(ebp4) + 16);
                    eax88 = fun_180309f5(ecx16, reinterpret_cast<int32_t>(ebp4) + 0xfffffdb8, eax87);
                    v14 = eax88;
                    if (reinterpret_cast<signed char>(eax88) < reinterpret_cast<signed char>(0)) {
                        v27 = reinterpret_cast<void**>(1);
                    }
                }
                v44 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp4) + 0xfffffdb8);
                goto addr_0x1802d201_72;
            }
        }
    }
    addr_0x1802d310_28:
    return 0;
}

void fun_1802d4f3(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    fun_1802e8ff(ecx, 13, __return_address(), a2, a3, a4, a5, a6, a7);
    return;
}

void** fun_1802e180(void** a1, void** a2);

int32_t UnhandledExceptionFilter = 0x36380;

int32_t g180444a0 = 3;

int32_t g180444a4 = 7;

uint32_t fun_1802e042(void** ecx, void** a2, void** a3) {
    void** eax4;
    void** esi5;
    void** v6;
    void** eax7;
    void** ebx8;
    void** v9;
    uint32_t eax10;
    void** v11;
    int32_t edx12;
    int32_t ecx13;
    void* ecx14;
    int32_t edi15;
    int32_t ebx16;
    void** edi17;

    eax4 = fun_1802d5a4(ecx);
    esi5 = eax4;
    v6 = *reinterpret_cast<void***>(esi5 + 80);
    eax7 = fun_1802e180(a2, v6);
    if (!eax7 || (ebx8 = *reinterpret_cast<void***>(eax7 + 8), v9 = ebx8, ebx8 == 0)) {
        eax10 = reinterpret_cast<uint32_t>(UnhandledExceptionFilter(v6, a3));
    } else {
        if (!reinterpret_cast<int1_t>(ebx8 == 5)) {
            if (ebx8 != 1) {
                v11 = *reinterpret_cast<void***>(esi5 + 84);
                *reinterpret_cast<void***>(esi5 + 84) = a3;
                if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax7 + 4) == 8)) {
                    *reinterpret_cast<void***>(eax7 + 8) = reinterpret_cast<void**>(0);
                    ebx8();
                } else {
                    edx12 = g180444a0;
                    ecx13 = g180444a4;
                    if (edx12 < ecx13 + edx12) {
                        ecx14 = reinterpret_cast<void*>(edx12 + edx12 * 2 << 2);
                        do {
                            ecx14 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(ecx14) + 12);
                            *reinterpret_cast<uint32_t*>(reinterpret_cast<int32_t>(ecx14) + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi5 + 80)) - 4) = 0;
                            edi15 = g180444a0;
                            ebx16 = g180444a4;
                            ++edx12;
                        } while (edx12 < ebx16 + edi15);
                        ebx8 = v9;
                    }
                    edi17 = *reinterpret_cast<void***>(esi5 + 88);
                    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax7) == 0xc000008e)) {
                        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax7) == 0xc0000090)) {
                            if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax7) == 0xc0000091)) {
                                if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax7) == 0xc0000093)) {
                                    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax7) == 0xc000008d)) {
                                        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax7) == 0xc000008f)) {
                                            if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax7) == 0xc0000092)) {
                                                *reinterpret_cast<void***>(esi5 + 88) = reinterpret_cast<void**>(0x8a);
                                            }
                                        } else {
                                            *reinterpret_cast<void***>(esi5 + 88) = reinterpret_cast<void**>(0x86);
                                        }
                                    } else {
                                        *reinterpret_cast<void***>(esi5 + 88) = reinterpret_cast<void**>(0x82);
                                    }
                                } else {
                                    *reinterpret_cast<void***>(esi5 + 88) = reinterpret_cast<void**>(0x85);
                                }
                            } else {
                                *reinterpret_cast<void***>(esi5 + 88) = reinterpret_cast<void**>(0x84);
                            }
                        } else {
                            *reinterpret_cast<void***>(esi5 + 88) = reinterpret_cast<void**>(0x81);
                        }
                    } else {
                        *reinterpret_cast<void***>(esi5 + 88) = reinterpret_cast<void**>(0x83);
                    }
                    ebx8();
                    *reinterpret_cast<void***>(esi5 + 88) = edi17;
                }
                *reinterpret_cast<void***>(esi5 + 84) = v11;
            }
            eax10 = 0xffffffff;
        } else {
            *reinterpret_cast<void***>(eax7 + 8) = reinterpret_cast<void**>(0);
            eax10 = 1;
        }
    }
    return eax10;
}

int32_t g180444ac = 10;

void** fun_1802e180(void** a1, void** a2) {
    void** edx3;
    int32_t ecx4;
    void** esi5;
    int1_t zf6;
    void** eax7;
    void** edi8;

    edx3 = a2;
    ecx4 = g180444ac;
    esi5 = a1;
    zf6 = *reinterpret_cast<void***>(edx3) == esi5;
    eax7 = edx3;
    if (!zf6) {
        edi8 = edx3 + (ecx4 + ecx4 * 2) * 4;
        do {
            eax7 = eax7 + 12;
            if (reinterpret_cast<unsigned char>(eax7) >= reinterpret_cast<unsigned char>(edi8)) 
                break;
        } while (*reinterpret_cast<void***>(eax7) != esi5);
    }
    if (reinterpret_cast<unsigned char>(eax7) >= reinterpret_cast<unsigned char>(edx3 + (ecx4 + ecx4 * 2) * 4) || *reinterpret_cast<void***>(eax7) != esi5) {
        eax7 = reinterpret_cast<void**>(0);
    }
    return eax7;
}

int32_t RtlUnwind = 0x3639c;

void fun_180322f0() {
    goto RtlUnwind;
}

uint32_t fun_1802f08f(void** ecx, void** a2, void** a3, void** a4);

uint32_t fun_1802f086(void** ecx, void** a2) {
    uint32_t eax3;

    eax3 = fun_1802f08f(ecx, 1, __return_address(), a2);
    return eax3;
}

void** g18046f00;

void** g18045ee0 = reinterpret_cast<void**>(0);

void** fun_1802ef09(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8) {
    void** v9;
    void** v10;
    void** ebx11;
    void** v12;
    void** esi13;
    void** v14;
    void** edi15;
    void** edi16;
    void** esi17;
    int1_t less_or_equal18;
    void** ecx19;
    void** eax20;
    void** v21;
    void** v22;
    int1_t less23;
    void* esi24;
    void** eax25;
    void** eax26;
    void** v27;
    void** eax28;
    void** v29;
    void** eax30;

    v9 = reinterpret_cast<void**>(__return_address());
    v10 = ebx11;
    v12 = esi13;
    v14 = edi15;
    edi16 = reinterpret_cast<void**>(0);
    fun_1802e8ff(ecx, 2, v14, v12, v10, v9, a2, a3, a4);
    esi17 = reinterpret_cast<void**>(0);
    less_or_equal18 = reinterpret_cast<signed char>(g18046f00) <= reinterpret_cast<signed char>(0);
    ecx19 = reinterpret_cast<void**>(2);
    if (less_or_equal18) 
        goto addr_0x1802efc3_2;
    do {
        eax20 = g18045ee0;
        if (!*reinterpret_cast<void***>(eax20 + reinterpret_cast<unsigned char>(esi17) * 4)) 
            break;
        if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(eax20 + reinterpret_cast<unsigned char>(esi17) * 4) + 12)) & 0x83)) {
            v21 = *reinterpret_cast<void***>(eax20 + reinterpret_cast<unsigned char>(esi17) * 4);
            fun_1802ed24(ecx19, esi17, v21, v14, v12, v10, v9);
            ecx19 = g18045ee0;
            if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx19 + reinterpret_cast<unsigned char>(esi17) * 4) + 12)) & 0x83)) 
                goto addr_0x1802ef64_6;
            v22 = *reinterpret_cast<void***>(ecx19 + reinterpret_cast<unsigned char>(esi17) * 4);
            fun_1802ed76(ecx19, esi17, v22, v14);
            ecx19 = v22;
        }
        ++esi17;
        less23 = reinterpret_cast<signed char>(esi17) < reinterpret_cast<signed char>(g18046f00);
    } while (less23);
    goto addr_0x1802ef62_9;
    esi24 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(esi17) << 2);
    eax25 = fun_1802ca53(ecx19, 56, v14, v12, v10, v9, a2, a3, a4, a5, a6, a7, a8);
    ecx19 = g18045ee0;
    *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi24) + reinterpret_cast<unsigned char>(ecx19)) = eax25;
    eax26 = g18045ee0;
    if (!*reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi24) + reinterpret_cast<unsigned char>(eax26))) {
        addr_0x1802efc3_2:
        fun_1802e960(ecx19, 2, v14, v12, v10, v9);
        return edi16;
    } else {
        v27 = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi24) + reinterpret_cast<unsigned char>(eax26)) + 32;
        InitializeCriticalSection(v27);
        eax28 = g18045ee0;
        v29 = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi24) + reinterpret_cast<unsigned char>(eax28)) + 32;
        EnterCriticalSection(v29, v27);
        eax30 = g18045ee0;
        edi16 = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi24) + reinterpret_cast<unsigned char>(eax30));
    }
    addr_0x1802efad_12:
    if (edi16) {
        *reinterpret_cast<void***>(edi16 + 16) = reinterpret_cast<void**>(0xffffffff);
        *reinterpret_cast<void***>(edi16 + 4) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(edi16 + 12) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(edi16 + 8) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(edi16) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(edi16 + 28) = reinterpret_cast<void**>(0);
        goto addr_0x1802efc3_2;
    }
    addr_0x1802ef62_9:
    goto addr_0x1802efc3_2;
    addr_0x1802ef64_6:
    edi16 = *reinterpret_cast<void***>(ecx19 + reinterpret_cast<unsigned char>(esi17) * 4);
    goto addr_0x1802efad_12;
}

uint32_t fun_1802f590(int32_t a1);

uint32_t fun_1802f545(int32_t ecx, uint32_t a2, uint32_t a3) {
    uint32_t eax4;
    uint32_t esi5;

    __asm__("wait ");
    __asm__("fnstcw word [ebp-0x4]");
    eax4 = fun_1802f590(ecx);
    esi5 = eax4 & ~a3 | a2 & a3;
    fun_1802f622(esi5);
    __asm__("fldcw word [ebp+0xc]");
    return esi5;
}

int32_t GetACP = 0x36424;

int32_t GetOEMCP = 0x3642e;

void** fun_18030d52(void** a1) {
    void** eax2;

    eax2 = a1;
    g18045b34 = 0;
    if (!reinterpret_cast<int1_t>(eax2 == 0xfffffffe)) {
        if (!reinterpret_cast<int1_t>(eax2 == 0xfffffffd)) {
            if (reinterpret_cast<int1_t>(eax2 == 0xfffffffc)) {
                eax2 = g18045b1c;
                g18045b34 = 1;
            }
            return eax2;
        } else {
            g18045b34 = 1;
            goto GetACP;
        }
    } else {
        g18045b34 = 1;
        goto GetOEMCP;
    }
}

void fun_18031541(void** ecx, void** a2, void** a3, void** a4) {
    void** v5;
    void** v6;
    void** ebp7;
    void*** ebp8;
    void** v9;
    void** ebx10;
    void** ebx11;
    void** v12;
    void** esi13;
    void** v14;
    void** v15;
    void** edi16;
    void** v17;
    void** v18;
    void** esi19;
    void** v20;
    void** v21;
    void** v22;
    void** ecx23;
    void** esi24;
    void** eax25;

    v5 = reinterpret_cast<void**>(__return_address());
    v6 = ebp7;
    ebp8 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    v9 = ebx10;
    ebx11 = a4;
    v12 = esi13;
    v14 = reinterpret_cast<void**>(0x404e);
    *reinterpret_cast<void***>(ebx11) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebx11 + 4) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ebx11 + 8) = reinterpret_cast<void**>(0);
    if (reinterpret_cast<unsigned char>(a3) > reinterpret_cast<unsigned char>(0)) {
        v15 = edi16;
        v17 = a3;
        do {
            v18 = *reinterpret_cast<void***>(ebx11);
            esi19 = ebx11 + 4;
            v20 = *reinterpret_cast<void***>(esi19);
            v21 = *reinterpret_cast<void***>(esi19 + 4);
            fun_180314e6(ecx, ebx11, v15, v12, v9, v18, v20, v21, 0x404e, v6, v5, a2);
            fun_180314e6(ecx, ebx11, ebx11, v15, v12, v9, v18, v20, v21, 0x404e, v6, v5);
            fun_18031488(ebx11, ebp8 + 0xfffffff0, ebx11, ebx11, v15, v12, v9, v18, v20, v21, 0x404e);
            fun_180314e6(ecx, ebx11, ebx11, ebp8 + 0xfffffff0, ebx11, ebx11, v15, v12, v9, v18, v20, v21);
            v22 = reinterpret_cast<void**>(static_cast<int32_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(a2))));
            fun_18031488(ebx11, ebp8 + 0xfffffff0, ebx11, ebx11, ebp8 + 0xfffffff0, ebx11, ebx11, v15, v12, v9, v22);
            ++a2;
            --v17;
        } while (v17);
    }
    while (!*reinterpret_cast<void***>(ebx11 + 8)) {
        ecx23 = *reinterpret_cast<void***>(ebx11 + 4);
        *reinterpret_cast<void***>(ebx11 + 8) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx23) >> 16);
        ecx = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx23) << 16);
        esi24 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx11)) >> 16 | reinterpret_cast<unsigned char>(ecx));
        eax25 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx11)) << 16);
        v14 = v14 + 0xfff0;
        *reinterpret_cast<void***>(ebx11 + 4) = esi24;
        *reinterpret_cast<void***>(ebx11) = eax25;
    }
    while (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx11 + 8)) & 0x8000)) {
        fun_180314e6(ecx, ebx11, v12, v9, v22, 0, 0, v14, v6, v5, a2, a3);
        v14 = v14 + 0xffff;
        ecx = ebx11;
    }
    *reinterpret_cast<void***>(ebx11 + 10) = v14;
    return;
}

void fun_18032161(struct s7* a1, void* a2, void* a3) {
    void* ebp4;
    void*** ebx5;
    void* eax6;
    void* eax7;
    void* eax8;
    void** esi9;

    ebp4 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    ebx5 = reinterpret_cast<void***>(0x18044dd0);
    if (a2) {
        if (reinterpret_cast<int32_t>(a2) < reinterpret_cast<int32_t>(0)) {
            a2 = reinterpret_cast<void*>(-reinterpret_cast<uint32_t>(a2));
            ebx5 = reinterpret_cast<void***>(0x18044f30);
        }
        if (!a3) {
            a1->f0 = reinterpret_cast<void**>(0);
        }
        if (a2) {
            do {
                eax6 = a2;
                ebx5 = ebx5 + 84;
                a2 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(a2) >> 3);
                eax7 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(eax6) & 7);
                if (eax7) {
                    eax8 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(eax7) + reinterpret_cast<uint32_t>(eax7) * 2);
                    esi9 = reinterpret_cast<void**>(ebx5 + reinterpret_cast<uint32_t>(eax8) * 4);
                    if (reinterpret_cast<unsigned char>(ebx5[reinterpret_cast<uint32_t>(eax8) * 4]) >= reinterpret_cast<unsigned char>(0x8000)) {
                        esi9 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp4) + 0xfffffff4);
                    }
                    fun_18031f41(a1, esi9);
                }
            } while (a2);
        }
    }
    return;
}

void fun_18032e2c(uint32_t ecx);

int16_t fun_18032610(void** a1, void** a2, uint32_t a3);

int16_t fun_18032760(void** a1, void** a2, uint32_t a3);

void fun_18032800(struct s234* a1, void** a2, void*** a3) {
    void** bl4;
    void** ecx5;
    void* esp6;
    signed char v7;
    signed char v8;
    void** v9;
    unsigned char v10;
    unsigned char v11;
    signed char v12;
    void** v13;
    void** v14;
    void** v15;
    struct s234* edi16;
    void*** esi17;
    void** eax18;
    int32_t edx19;
    void** v20;
    void** eax21;
    void*** v22;
    void** esi23;
    uint32_t ecx24;
    signed char v25;
    void* esi26;
    int32_t eax27;
    unsigned char cl28;
    void** v29;
    int32_t* esp30;
    int32_t v31;
    void** eax32;
    void*** v33;
    signed char* ebx34;
    void** esi35;
    void** edi36;
    void* esp37;
    void** edi38;
    void** eax39;
    void* ebx40;
    uint32_t ecx41;
    void* eax42;
    void* edx43;
    void* v44;
    void* esi45;
    uint32_t ecx46;
    uint32_t ecx47;
    void* edx48;
    signed char* edi49;
    uint32_t ecx50;
    signed char v51;
    uint32_t ecx52;
    void** edi53;
    void** eax54;
    void* edx55;
    void* esi56;
    uint32_t ecx57;
    void** esi58;
    void*** esp59;
    void** v60;
    void** edx61;
    void*** v62;
    void** edi63;
    uint32_t ecx64;
    void** ecx65;
    void** v66;

    bl4 = *reinterpret_cast<void***>(a2);
    ecx5 = a2 + 1;
    esp6 = reinterpret_cast<void*>((reinterpret_cast<uint32_t>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4) & 0xfffffff8) - 0x74 - 4 - 4 - 4);
    v7 = 0;
    v8 = 1;
    *reinterpret_cast<signed char*>(&v9) = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = reinterpret_cast<void**>(0xffffffff);
    v14 = reinterpret_cast<void**>(0xffffffff);
    v15 = ecx5;
    if (bl4) {
        edi16 = a1;
        esi17 = a3;
        while (1) {
            if (!v7) {
                if (!reinterpret_cast<int1_t>(bl4 == 37)) {
                    if (!reinterpret_cast<int1_t>(bl4 == 10)) {
                        if (reinterpret_cast<unsigned char>(edi16->f8) >= reinterpret_cast<unsigned char>(edi16->f4)) {
                            addr_0x18032de0_7:
                            bl4 = *reinterpret_cast<void***>(v15);
                            ecx5 = v15 + 1;
                            v15 = ecx5;
                            if (bl4) 
                                continue; else 
                                break;
                        } else {
                            *reinterpret_cast<void***>(edi16->f8) = bl4;
                        }
                    } else {
                        if (reinterpret_cast<unsigned char>(edi16->f8) < reinterpret_cast<unsigned char>(edi16->f4)) {
                            *reinterpret_cast<void***>(edi16->f8) = reinterpret_cast<void**>(13);
                            edi16->f8 = edi16->f8 + 1;
                        }
                        if (reinterpret_cast<unsigned char>(edi16->f8) >= reinterpret_cast<unsigned char>(edi16->f4)) 
                            goto addr_0x18032de0_7;
                        *reinterpret_cast<void***>(edi16->f8) = reinterpret_cast<void**>(10);
                    }
                    edi16->f8 = edi16->f8 + 1;
                    goto addr_0x18032de0_7;
                } else {
                    v7 = 1;
                    v8 = 1;
                    *reinterpret_cast<signed char*>(&v9) = 0;
                    v10 = 0;
                    v11 = 0;
                    v12 = 0;
                    v14 = reinterpret_cast<void**>(0xffffffff);
                    v13 = reinterpret_cast<void**>(0xffffffff);
                    goto addr_0x18032de0_7;
                }
            }
            eax18 = bl4 + 0xffffffe0;
            if (reinterpret_cast<unsigned char>(eax18) > reinterpret_cast<unsigned char>(88)) 
                goto addr_0x18032de0_7;
            edx19 = 0;
            *reinterpret_cast<signed char*>(&edx19) = *reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(eax18) + reinterpret_cast<uint32_t>(fun_18032e2c));
            goto *reinterpret_cast<int32_t*>(edx19 * 4 + 0x18032dfc);
            v11 = 1;
            goto addr_0x18032de0_7;
            if (reinterpret_cast<unsigned char>(edi16->f8) < reinterpret_cast<unsigned char>(edi16->f4)) {
                *reinterpret_cast<void***>(edi16->f8) = bl4;
                edi16->f8 = edi16->f8 + 1;
            }
            v7 = 0;
            goto addr_0x18032de0_7;
            eax18 = *esi17;
            esi17 = esi17 + 4;
            addr_0x180328c0_22:
            if (!v8) {
                v14 = eax18;
                goto addr_0x18032de0_7;
            } else {
                v13 = eax18;
                goto addr_0x18032de0_7;
            }
            v10 = 1;
            goto addr_0x18032de0_7;
            *reinterpret_cast<signed char*>(&v9) = 1;
            goto addr_0x18032de0_7;
            v8 = 0;
            goto addr_0x18032de0_7;
            if (v8 && reinterpret_cast<int1_t>(bl4 == 48)) {
                v12 = 1;
            }
            eax18 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp6) + 32);
            *reinterpret_cast<int16_t*>(&eax18) = fun_18032610(ecx5 - 1, eax18, 10);
            esp6 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp6) - 4 - 4 - 4 - 4 + 12 + 4);
            v15 = v20;
            goto addr_0x180328c0_22;
            eax21 = *esi17;
            v22 = esi17 + 4;
            if (reinterpret_cast<int1_t>(bl4 == 0x70)) {
                ecx5 = reinterpret_cast<void**>(8);
                bl4 = reinterpret_cast<void**>(88);
                if (reinterpret_cast<signed char>(v13) < reinterpret_cast<signed char>(8)) {
                    v13 = reinterpret_cast<void**>(8);
                }
                v12 = 1;
            }
            esi23 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp6) + 64);
            if (eax21) {
                if (bl4 == 0x78 || (bl4 == 88 || bl4 == 0x70)) {
                    fun_180326e0(eax21, reinterpret_cast<uint32_t>(esp6) + 64, 16);
                    esp6 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp6) - 4 - 4 - 4 - 4 + 12 + 4);
                    if (bl4 == 88 || reinterpret_cast<int1_t>(bl4 == 0x70)) {
                        fun_180325e0(reinterpret_cast<uint32_t>(esp6) + 64);
                        esp6 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp6) - 4 - 4 + 4 + 4);
                    }
                } else {
                    if (!reinterpret_cast<int1_t>(bl4 == 0x75)) {
                        if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax21) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax21 == 0)) {
                            esi23 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp6) + 65);
                            eax21 = reinterpret_cast<void**>(~reinterpret_cast<unsigned char>(eax21) + 1);
                            goto addr_0x180329d8_42;
                        } else {
                            if (!v10) {
                                if (!v11) {
                                    addr_0x180329d8_42:
                                    fun_180326e0(eax21, esi23, 10);
                                    esp6 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp6) - 4 - 4 - 4 - 4 + 12 + 4);
                                } else {
                                    esi23 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp6) + 65);
                                    fun_180326e0(eax21, esi23, 10);
                                    esp6 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp6) - 4 - 4 - 4 - 4 + 12 + 4);
                                }
                            } else {
                                esi23 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp6) + 65);
                                fun_180326e0(eax21, esi23, 10);
                                esp6 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp6) - 4 - 4 - 4 - 4 + 12 + 4);
                            }
                        }
                    } else {
                        fun_180326e0(eax21, reinterpret_cast<uint32_t>(esp6) + 64, 10);
                        esp6 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp6) - 4 - 4 - 4 - 4 + 12 + 4);
                    }
                }
                ecx24 = 0xffffffff;
                do {
                    if (!ecx24) 
                        break;
                    --ecx24;
                    ++esi23;
                } while (v25);
                edi16 = a1;
                ecx5 = reinterpret_cast<void**>(~ecx24 - 1);
                esi26 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(esi23) + reinterpret_cast<unsigned char>(ecx5));
            } else {
                if (v11) {
                    esi23 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp6) + 65);
                }
                esi26 = reinterpret_cast<void*>(esi23 + 1);
            }
            if (!*reinterpret_cast<signed char*>(&v9) || v12) {
                eax27 = 0;
            } else {
                eax27 = 1;
            }
            cl28 = reinterpret_cast<unsigned char>(-v12);
            *reinterpret_cast<unsigned char*>(&ecx5) = reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(cl28 - reinterpret_cast<unsigned char>(cl28 + reinterpret_cast<uint1_t>(cl28 < reinterpret_cast<unsigned char>(cl28 + reinterpret_cast<uint1_t>(!!v12))))) & 16) + 32);
            v29 = ecx5;
            esp30 = reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(esp6) - 4 - 4 - 4);
            v31 = eax27;
            fun_18032e90(edi16, esp30 + 19, reinterpret_cast<uint32_t>(esi26) - reinterpret_cast<unsigned char>(esp30 + 19), *reinterpret_cast<signed char*>(&v31), v13, v29);
            esp6 = reinterpret_cast<void*>(esp30 - 1 - 1 - 1 - 1 + 6 + 1);
            esi17 = v22;
            v7 = 0;
            goto addr_0x18032de0_7;
            __asm__("fld qword [esi]");
            eax32 = v14;
            __asm__("fst qword [esp+0x30]");
            v33 = esi17 + 8;
            if (reinterpret_cast<int1_t>(eax32 == 0xffffffff)) {
                v14 = reinterpret_cast<void**>(6);
            }
            __asm__("fcom qword [0x180353e0]");
            ebx34 = reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esp6) + 64);
            __asm__("fnstsw ax");
            if (*reinterpret_cast<unsigned char*>(&eax32 + 1) & 1) {
                __asm__("fchs ");
                __asm__("fst qword [esp+0x30]");
                ebx34 = reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(esp6) + 65);
            }
            __asm__("fcom qword [0x180353e0]");
            esi35 = reinterpret_cast<void**>(0);
            __asm__("fnstsw ax");
            if (*reinterpret_cast<unsigned char*>(&eax32 + 1) & 64) {
                addr_0x18032bbe_64:
                __asm__("fstp st0");
            } else {
                __asm__("fcom qword [0x180346b0]");
                __asm__("fnstsw ax");
                if (*reinterpret_cast<unsigned char*>(&eax32 + 1) & 1) {
                    do {
                        __asm__("fmul qword [0x18035b98]");
                        --esi35;
                        __asm__("fcom qword [0x180346b0]");
                        __asm__("fnstsw ax");
                    } while (*reinterpret_cast<unsigned char*>(&eax32 + 1) & 1);
                    __asm__("fst qword [esp+0x30]");
                }
                __asm__("fcom qword [0x18035b98]");
                __asm__("fnstsw ax");
                if (*reinterpret_cast<unsigned char*>(&eax32 + 1) & 1) 
                    goto addr_0x18032bbe_64; else 
                    goto addr_0x18032ae8_69;
            }
            addr_0x18032b00_70:
            edi36 = v14;
            fun_1800ddc0(0x9999999a, 0x3fb99999, edi36 + 0xffffffff);
            esp37 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp6) - 4 - 4 - 4 - 4 + 12 + 4);
            __asm__("fst qword [esp+0x38]");
            __asm__("fmul qword [0x18034b08]");
            __asm__("fadd qword [esp+0x30]");
            __asm__("fst qword [esp+0x30]");
            if (reinterpret_cast<signed char>(esi35) < reinterpret_cast<signed char>(0xfffffffc) || reinterpret_cast<signed char>(esi35) >= reinterpret_cast<signed char>(edi36)) {
                edi38 = reinterpret_cast<void**>(0);
                if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(v14) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(v14 == 0))) {
                    do {
                        __asm__("fstp dword [esp]");
                        *reinterpret_cast<int16_t*>(&eax39) = fun_1800da40(ecx5);
                        esp37 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp37) - 4 - 4 + 4 + 4);
                        __asm__("fild dword [esp+0x24]");
                        __asm__("fsubr qword [esp+0x30]");
                        __asm__("fmul qword [0x18035b98]");
                        __asm__("fst qword [esp+0x30]");
                        __asm__("fld qword [esp+0x38]");
                        __asm__("fmul qword [0x18035b98]");
                        __asm__("fstp qword [esp+0x38]");
                        if (reinterpret_cast<int1_t>(edi38 == 1)) {
                            ++ebx34;
                        }
                        __asm__("fcom qword [esp+0x38]");
                        ++ebx34;
                        __asm__("fnstsw ax");
                    } while (!(*reinterpret_cast<unsigned char*>(&eax39 + 1) & 1) && (++edi38, reinterpret_cast<signed char>(edi38) < reinterpret_cast<signed char>(v14)));
                }
                ebx40 = reinterpret_cast<void*>(ebx34 + 1);
                __asm__("fstp st0");
                if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(esi35) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(esi35 == 0)) {
                    ebx34 = reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(ebx40) + 1);
                    esi35 = reinterpret_cast<void**>(-reinterpret_cast<unsigned char>(esi35));
                } else {
                    ebx34 = reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(ebx40) + 1);
                }
                fun_18032760(esi35, reinterpret_cast<uint32_t>(esp37) + 40, 10);
                esp37 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp37) - 4 - 4 - 4 - 4 + 12 + 4);
                ecx41 = 0xffffffff;
                do {
                    if (!ecx41) 
                        break;
                    --ecx41;
                } while (1);
                eax42 = reinterpret_cast<void*>(~ecx41 - 1);
                edx43 = reinterpret_cast<void*>(3 - reinterpret_cast<uint32_t>(eax42));
                v44 = eax42;
                if (!(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(edx43) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(edx43 == 0))) {
                    esi45 = edx43;
                    ecx46 = reinterpret_cast<uint32_t>(edx43) >> 2;
                    while (ecx46) {
                        --ecx46;
                        esi45 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esi45) + 4);
                    }
                    ecx47 = reinterpret_cast<uint32_t>(esi45) & 3;
                    ebx34 = reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(ebx34) + reinterpret_cast<uint32_t>(edx43));
                    while (ecx47) {
                        --ecx47;
                    }
                    eax42 = v44;
                }
                if (!(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(eax42) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(eax42 == 0))) {
                    edx48 = eax42;
                    edi49 = ebx34;
                    ecx50 = reinterpret_cast<uint32_t>(eax42) >> 2;
                    while (ecx50) {
                        --ecx50;
                        *edi49 = v51;
                        edi49 = edi49 + 4;
                    }
                    ecx52 = reinterpret_cast<uint32_t>(edx48) & 3;
                    ebx34 = reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(ebx34) + reinterpret_cast<uint32_t>(eax42));
                    while (ecx52) {
                        --ecx52;
                        *edi49 = 0x65;
                        ++edi49;
                    }
                }
            } else {
                if (reinterpret_cast<signed char>(esi35) >= reinterpret_cast<signed char>(0)) {
                    edi53 = reinterpret_cast<void**>(0);
                    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(v14) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(v14 == 0))) {
                        do {
                            __asm__("fstp dword [esp]");
                            *reinterpret_cast<int16_t*>(&eax54) = fun_1800da40(ecx5);
                            esp37 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp37) - 4 - 4 + 4 + 4);
                            ecx5 = esi35 + 1;
                            __asm__("fild dword [esp+0x24]");
                            __asm__("fsubr qword [esp+0x30]");
                            __asm__("fmul qword [0x18035b98]");
                            __asm__("fst qword [esp+0x30]");
                            __asm__("fld qword [esp+0x38]");
                            __asm__("fmul qword [0x18035b98]");
                            __asm__("fstp qword [esp+0x38]");
                            if (edi53 == ecx5) {
                                ++ebx34;
                            }
                            ++ebx34;
                        } while ((reinterpret_cast<signed char>(edi53) < reinterpret_cast<signed char>(esi35) || !(*reinterpret_cast<unsigned char*>(&eax54 + 1) & 1)) && (++edi53, reinterpret_cast<signed char>(edi53) < reinterpret_cast<signed char>(v14)));
                        goto addr_0x18032c24_102;
                    }
                } else {
                    edx55 = reinterpret_cast<void*>(-1 - reinterpret_cast<unsigned char>(esi35));
                    ebx34 = ebx34 + 1 + 1;
                    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(edx55) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(edx55 == 0))) {
                        esi56 = edx55;
                        ecx57 = reinterpret_cast<uint32_t>(edx55) >> 2;
                        while (ecx57) {
                            --ecx57;
                            esi56 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esi56) + 4);
                        }
                        ecx5 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esi56) & 3);
                        ebx34 = reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(ebx34) + reinterpret_cast<uint32_t>(edx55));
                        while (ecx5) {
                            --ecx5;
                        }
                        edi36 = v14;
                    }
                    esi58 = reinterpret_cast<void**>(0);
                    if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(edi36) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(edi36 == 0)) 
                        goto addr_0x18032c24_102; else 
                        goto addr_0x18032b7a_112;
                }
            }
            addr_0x18032c26_113:
            esp59 = reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esp37) - 4 - 4 - 4);
            v60 = v9;
            fun_18032e90(a1, esp59 + 76, reinterpret_cast<uint32_t>(ebx34) - (reinterpret_cast<uint32_t>(esp37) + 64), *reinterpret_cast<signed char*>(&v60), v13, 32);
            esp6 = reinterpret_cast<void*>(esp59 - 4 - 4 - 4 - 4 + 24 + 4);
            edi16 = a1;
            esi17 = v33;
            v7 = 0;
            goto addr_0x18032de0_7;
            addr_0x18032c24_102:
            __asm__("fstp st0");
            goto addr_0x18032c26_113;
            do {
                addr_0x18032b7a_112:
                __asm__("fstp dword [esp]");
                *reinterpret_cast<int16_t*>(&eax32) = fun_1800da40(ecx5);
                esp37 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp37) - 4 - 4 + 4 + 4);
                __asm__("fild dword [esp+0x24]");
                *ebx34 = reinterpret_cast<signed char>(*reinterpret_cast<signed char*>(&eax32) + 48);
                ++ebx34;
                __asm__("fsubr qword [esp+0x30]");
                __asm__("fmul qword [0x18035b98]");
                __asm__("fst qword [esp+0x30]");
                __asm__("fld qword [esp+0x38]");
                __asm__("fmul qword [0x18035b98]");
                __asm__("fstp qword [esp+0x38]");
                __asm__("fcom qword [esp+0x38]");
                __asm__("fnstsw ax");
                if (*reinterpret_cast<unsigned char*>(&eax32 + 1) & 1) 
                    goto addr_0x18032c24_102;
                ++esi58;
            } while (reinterpret_cast<signed char>(esi58) < reinterpret_cast<signed char>(edi36));
            goto addr_0x18032c24_102;
            do {
                addr_0x18032ae8_69:
                __asm__("fmul qword [0x18035ba0]");
                ++esi35;
                __asm__("fcom qword [0x18035b98]");
                __asm__("fnstsw ax");
            } while (!(*reinterpret_cast<unsigned char*>(&eax32 + 1) & 1));
            __asm__("fstp qword [esp+0x30]");
            goto addr_0x18032b00_70;
            esi17 = esi17 + 4;
            if (reinterpret_cast<unsigned char>(edi16->f8) < reinterpret_cast<unsigned char>(edi16->f4)) {
                *reinterpret_cast<void***>(edi16->f8) = *(esi17 - 4);
                edi16->f8 = edi16->f8 + 1;
            }
            v7 = 0;
            goto addr_0x18032de0_7;
            edx61 = *esi17;
            esi17 = esi17 + 4;
            v62 = esi17;
            if (!edx61) {
                addr_0x18032d78_121:
                v7 = 0;
                goto addr_0x18032de0_7;
            } else {
                edi63 = edx61;
                ecx64 = 0xffffffff;
                do {
                    if (!ecx64) 
                        break;
                    --ecx64;
                    ++edi63;
                } while (*reinterpret_cast<void***>(edi63));
                ecx65 = reinterpret_cast<void**>(~ecx64 - 1);
                if (v14 == 0xffffffff) 
                    goto addr_0x18032d5b_126;
                if (reinterpret_cast<signed char>(ecx65) > reinterpret_cast<signed char>(v14)) 
                    goto addr_0x18032d59_128;
            }
            addr_0x18032d5b_126:
            v66 = v9;
            fun_18032e90(a1, edx61, ecx65, *reinterpret_cast<signed char*>(&v66), v13, 32);
            esp6 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp6) - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 24 + 4);
            edi16 = a1;
            esi17 = v62;
            goto addr_0x18032d78_121;
            addr_0x18032d59_128:
            ecx65 = v14;
            goto addr_0x18032d5b_126;
        }
    }
    return;
}

int16_t fun_18032580(uint32_t a1) {
    uint32_t eax2;
    signed char* ecx3;
    uint32_t eax4;

    eax2 = a1;
    ecx3 = __image_base;
    *reinterpret_cast<signed char*>(&eax2) = ecx3[eax2 * 2];
    eax4 = eax2 & 1;
    return *reinterpret_cast<int16_t*>(&eax4);
}

int16_t fun_18032560(uint32_t a1) {
    uint32_t eax2;
    signed char* ecx3;
    uint32_t eax4;

    eax2 = a1;
    ecx3 = __image_base;
    *reinterpret_cast<signed char*>(&eax2) = ecx3[eax2 * 2];
    eax4 = eax2 & 4;
    return *reinterpret_cast<int16_t*>(&eax4);
}

int16_t fun_18032610(void** a1, void** a2, uint32_t a3) {
    void** edi4;
    uint32_t eax5;
    uint32_t v6;
    void** al7;
    signed char v8;
    uint32_t ebx9;
    uint32_t v10;
    uint32_t ebp11;
    uint32_t esi12;
    uint32_t eax13;

    edi4 = a1;
    eax5 = reinterpret_cast<uint32_t>(static_cast<int32_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(edi4))));
    *reinterpret_cast<int16_t*>(&eax5) = fun_18032540(eax5);
    if (eax5) {
        do {
            ++edi4;
            v6 = reinterpret_cast<uint32_t>(static_cast<int32_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(edi4 + 1))));
            *reinterpret_cast<int16_t*>(&eax5) = fun_18032540(v6);
        } while (eax5);
    }
    al7 = *reinterpret_cast<void***>(edi4);
    v8 = 0;
    if (al7 == 43) {
        addr_0x18032648_4:
        ++edi4;
        goto addr_0x18032649_5;
    } else {
        if (!reinterpret_cast<int1_t>(al7 == 45)) {
            addr_0x18032649_5:
            ebx9 = a3;
            if (!ebx9) {
                if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(edi4) == 48)) {
                    ebx9 = 10;
                } else {
                    ++edi4;
                    v10 = reinterpret_cast<uint32_t>(static_cast<int32_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(edi4 + 1))));
                    *reinterpret_cast<int16_t*>(&eax5) = fun_180325c0(v10);
                    if (eax5 != 0x78) {
                        ebx9 = 8;
                    } else {
                        ebx9 = 16;
                        ++edi4;
                    }
                }
            }
        } else {
            v8 = 1;
            goto addr_0x18032648_4;
        }
    }
    ebp11 = 0;
    while (1) {
        esi12 = reinterpret_cast<uint32_t>(static_cast<int32_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(edi4))));
        *reinterpret_cast<int16_t*>(&eax5) = fun_18032560(esi12);
        if (!eax5) {
            *reinterpret_cast<int16_t*>(&eax5) = fun_180325a0(esi12);
            if (!eax5) {
                *reinterpret_cast<int16_t*>(&eax5) = fun_18032580(esi12);
                if (!eax5) 
                    break;
                eax5 = esi12 + 0xffffffc9;
            } else {
                eax5 = esi12 + 0xffffffa9;
            }
        } else {
            eax5 = esi12 + 0xffffffd0;
        }
        if (reinterpret_cast<int32_t>(eax5) >= reinterpret_cast<int32_t>(ebx9)) 
            break;
        ebp11 = ebp11 * ebx9 + eax5;
        ++edi4;
    }
    if (a2) {
        *reinterpret_cast<void***>(a2) = edi4;
    }
    if (v8) {
        ebp11 = -ebp11;
    }
    eax13 = ebp11;
    return *reinterpret_cast<int16_t*>(&eax13);
}

int16_t fun_18032760(void** a1, void** a2, uint32_t a3) {
    void** eax4;
    void** eax5;

    if (reinterpret_cast<signed char>(a1) >= reinterpret_cast<signed char>(0)) {
        fun_180326e0(a1, a2, a3);
        eax4 = a2;
        return *reinterpret_cast<int16_t*>(&eax4);
    } else {
        *reinterpret_cast<void***>(a2) = reinterpret_cast<void**>(45);
        fun_180326e0(-reinterpret_cast<unsigned char>(a1), a2 + 1, a3);
        eax5 = a2;
        return *reinterpret_cast<int16_t*>(&eax5);
    }
}

signed char fun_18027310(void** a1, void** a2) {
    void** edx3;

    if (a1) {
        if (a2) {
            if (*reinterpret_cast<void***>(a1) != *reinterpret_cast<void***>(a2) || (*reinterpret_cast<void***>(a1 + 2) != *reinterpret_cast<void***>(a2 + 2) || ((edx3 = *reinterpret_cast<void***>(a1 + 4), edx3 != *reinterpret_cast<void***>(a2 + 4)) || *reinterpret_cast<void***>(a1 + 14) != *reinterpret_cast<void***>(a2 + 14)))) {
                return 0;
            } else {
                return 1;
            }
        }
    } else {
        if (!a2) {
            return 1;
        }
    }
    return 0;
}

void fun_180274b0(void** ecx) {
    void** eax2;
    void* eax3;

    eax2 = reinterpret_cast<void**>(0);
    if (*reinterpret_cast<void***>(ecx + 24)) {
        *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(0);
        eax3 = reinterpret_cast<void*>(*reinterpret_cast<void***>(ecx + 20)());
        eax2 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax3) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 28)));
    }
    *reinterpret_cast<void***>(ecx + 16) = eax2;
    return;
}

void fun_18004c10(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40) {
    void** esi41;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034240);
    fun_18004e10(ecx);
    fun_1800ca40(ecx, esi41, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    return;
}

void fun_18005190(void** ecx) {
    void** ecx2;
    void** eax3;
    void** edx4;

    ecx2 = *reinterpret_cast<void***>(ecx + 28);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180342a8);
    *reinterpret_cast<void***>(ecx + 20) = reinterpret_cast<void**>(0x1803427c);
    eax3 = *reinterpret_cast<void***>(ecx2);
    *reinterpret_cast<void***>(eax3 + 12)();
    if (*reinterpret_cast<void***>(ecx + 28)) {
        edx4 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 28));
        *reinterpret_cast<void***>(edx4)(1);
    }
    fun_1800ccb0(ecx);
    return;
}

struct s287 {
    signed char[68] pad68;
    int32_t f68;
};

struct s286 {
    signed char[56] pad56;
    struct s287** f56;
    signed char[24] pad84;
    signed char f84;
};

void fun_18004e40(struct s286* ecx) {
    struct s287* ecx2;
    struct s287** v3;

    if (ecx->f84 && ecx->f56) {
        ecx2 = *ecx->f56;
        v3 = ecx->f56;
        ecx2->f68(v3);
        ecx->f84 = 0;
    }
    return;
}

struct s289 {
    signed char[80] pad80;
    uint32_t f80;
};

struct s290 {
    signed char[2] pad2;
    int16_t f2;
    int32_t f4;
};

struct s288 {
    signed char[408] pad408;
    struct s289* f408;
    signed char[12] pad424;
    uint32_t f424;
    struct s290* f428;
    signed char[276] pad708;
    signed char f708;
    signed char f709;
    signed char f710;
    signed char[5] pad716;
    int32_t f716;
};

struct s291 {
    signed char[2] pad2;
    int16_t f2;
    int32_t f4;
};

signed char fun_18006230(struct s288* ecx, uint32_t a2, struct s291* a3) {
    uint32_t edx4;
    uint32_t eax5;
    int1_t zf6;
    uint32_t eax7;

    if (!ecx->f708) 
        goto addr_0x18006287_2;
    if (ecx->f709) 
        goto addr_0x18006287_2;
    if (ecx->f710) 
        goto addr_0x18006287_2;
    edx4 = ecx->f408->f80 & 15;
    if (*reinterpret_cast<signed char*>(&edx4) == 15) {
        eax5 = ecx->f424 & a2;
        if (!(eax5 & 0xff0000) || !(eax5 & 0x7f000000)) {
            addr_0x18006287_2:
            return 0;
        } else {
            addr_0x180062a6_7:
            if (!ecx->f428 || !a3) {
                if (ecx->f428) {
                    addr_0x180062dc_9:
                    return 0;
                } else {
                    zf6 = a3 == 0;
                }
            } else {
                if (ecx->f428->f2 != a3->f2) 
                    goto addr_0x180062dc_9;
                zf6 = ecx->f428->f4 == a3->f4;
            }
        }
        if (zf6) {
            return 1;
        }
    } else {
        if ((a2 & 0x7fff0000) == 0x7fff0000) 
            goto addr_0x180062a6_7;
        eax7 = ecx->f424 & a2;
        if (!(eax7 & 0xff0000)) 
            goto addr_0x18006287_2;
        if (eax7 & 0x7f000000) 
            goto addr_0x180062a6_7; else 
            goto addr_0x18006287_2;
    }
}

void fun_18006fd0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40) {
    void** v41;
    void** v42;
    void** ebp43;
    void** ebp44;
    void*** esp45;
    void** v46;
    void** edi47;
    void** eax48;
    void** edx49;
    void** v50;
    void** ebx51;
    void** v52;
    void** esi53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void* esp60;
    struct s53* esi61;
    void** edi62;
    int1_t zf63;
    void** v64;
    void*** eax65;
    void**** esp66;
    void* esp67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** v74;
    void* esp75;
    struct s53* esi76;
    void** edi77;
    int1_t zf78;
    void** v79;
    void*** eax80;
    void**** esp81;
    void* esp82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void* esp90;
    struct s53* esi91;
    void** edi92;
    int1_t zf93;
    void** v94;
    void*** eax95;
    void**** esp96;
    void* esp97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** v103;
    void** v104;
    void* esp105;
    void** edi106;
    void** esi107;
    void** ebx108;
    void** eax109;
    void*** esp110;
    void** eax111;
    void** ecx112;
    void** v113;
    void** v114;

    v41 = reinterpret_cast<void**>(__return_address());
    v42 = ebp43;
    ebp44 = ecx;
    esp45 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 12 - 4 - 4);
    v46 = edi47;
    eax48 = *reinterpret_cast<void***>(ebp44 + 0x3f8);
    *reinterpret_cast<void***>(ebp44) = reinterpret_cast<void**>(0x18034520);
    if (eax48) {
        ecx = *reinterpret_cast<void***>(eax48);
        *reinterpret_cast<void***>(ecx + 8)(eax48);
        esp45 = esp45 - 4 - 4 + 4;
        *reinterpret_cast<void***>(ebp44 + 0x3f8) = reinterpret_cast<void**>(0);
    }
    edx49 = *reinterpret_cast<void***>(ebp44 + 0x1ac);
    v50 = ebx51;
    v52 = esi53;
    fun_1802b2b0(ecx, edx49, v52, v50, v46, v42, v54, v55, v56, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
    fun_18007520(ebp44, v52, v50, v46, v42, v57, v58, v59, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
    esp60 = reinterpret_cast<void*>(esp45 - 4 - 4 - 4 - 4 + 4 + 4 - 4 + 4);
    esi61 = reinterpret_cast<struct s53*>(ebp44 + 0x358);
    edi62 = reinterpret_cast<void**>(&esi61->f4);
    zf63 = *reinterpret_cast<void***>(&esi61->f4) == edi62;
    v64 = *reinterpret_cast<void***>(&esi61->f4);
    if (!zf63) {
        do {
            eax65 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp60) + 20);
            esp66 = reinterpret_cast<void****>(reinterpret_cast<int32_t>(esp60) - 4 - 4);
            *reinterpret_cast<int16_t*>(&eax65) = fun_18009200(esp66 + 6, eax65, 0);
            esp67 = reinterpret_cast<void*>(esp66 - 1 + 2 + 1);
            v68 = *eax65;
            fun_18009170(esi61, reinterpret_cast<int32_t>(esp67) + 24, v68, v52, v50, v46, v42, v64, v69, v70, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32);
            esp60 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp67) - 4 - 4 - 4 + 8 + 4);
        } while (v64 != edi62);
    }
    fun_18009150(&esi61->f56, v52, v50, v46, v42, v64, v71, v72, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36);
    fun_1800c670(&esi61->f12, v52, v50, v46, v42, v64, v73, v74, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37);
    esp75 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp60) - 4 + 4 - 4 + 4);
    esi76 = reinterpret_cast<struct s53*>(ebp44 + 0x31c);
    edi77 = reinterpret_cast<void**>(&esi76->f4);
    zf78 = *reinterpret_cast<void***>(&esi76->f4) == edi77;
    v79 = *reinterpret_cast<void***>(&esi76->f4);
    if (!zf78) {
        do {
            eax80 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp75) + 24);
            esp81 = reinterpret_cast<void****>(reinterpret_cast<int32_t>(esp75) - 4 - 4);
            *reinterpret_cast<int16_t*>(&eax80) = fun_18009200(esp81 + 6, eax80, 0);
            esp82 = reinterpret_cast<void*>(esp81 - 1 + 2 + 1);
            v83 = *eax80;
            fun_18009170(esi76, reinterpret_cast<int32_t>(esp82) + 20, v83, v52, v50, v46, v42, v79, v84, v85, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32);
            esp75 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp82) - 4 - 4 - 4 + 8 + 4);
        } while (v79 != edi77);
    }
    fun_18009150(&esi76->f56, v52, v50, v46, v42, v79, v86, v87, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36);
    fun_1800c670(&esi76->f12, v52, v50, v46, v42, v79, v88, v89, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37);
    esp90 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp75) - 4 + 4 - 4 + 4);
    esi91 = reinterpret_cast<struct s53*>(ebp44 + 0x2e0);
    edi92 = reinterpret_cast<void**>(&esi91->f4);
    zf93 = *reinterpret_cast<void***>(&esi91->f4) == edi92;
    v94 = *reinterpret_cast<void***>(&esi91->f4);
    if (!zf93) {
        do {
            eax95 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp90) + 24);
            esp96 = reinterpret_cast<void****>(reinterpret_cast<int32_t>(esp90) - 4 - 4);
            *reinterpret_cast<int16_t*>(&eax95) = fun_18009200(esp96 + 6, eax95, 0);
            esp97 = reinterpret_cast<void*>(esp96 - 1 + 2 + 1);
            v98 = *eax95;
            fun_18009170(esi91, reinterpret_cast<int32_t>(esp97) + 20, v98, v52, v50, v46, v42, v94, v99, v100, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32);
            esp90 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp97) - 4 - 4 - 4 + 8 + 4);
        } while (v94 != edi92);
    }
    fun_18009150(&esi91->f56, v52, v50, v46, v42, v94, v101, v102, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36);
    fun_1800c670(&esi91->f12, v52, v50, v46, v42, v94, v103, v104, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37);
    esp105 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp90) - 4 + 4 - 4 + 4);
    edi106 = ebp44 + 0x2cc;
    esi107 = *reinterpret_cast<void***>(edi106 + 4);
    ebx108 = edi106 + 4;
    if (esi107 != ebx108) {
        do {
            eax109 = esi107;
            esi107 = *reinterpret_cast<void***>(esi107);
            esp110 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp105) - 4);
            fun_180091b0(edi106, esp110 + 28, eax109);
            esp105 = reinterpret_cast<void*>(esp110 - 4 - 4 + 8 + 4);
        } while (esi107 != ebx108);
    }
    eax111 = *reinterpret_cast<void***>(edi106 + 16);
    if (eax111) {
        do {
            ecx112 = *reinterpret_cast<void***>(eax111);
            *reinterpret_cast<void***>(edi106 + 16) = ecx112;
            fun_1802b2b0(ecx112, eax111, v46, v42, v94, v113, v114, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
            eax111 = *reinterpret_cast<void***>(edi106 + 16);
        } while (eax111);
    }
    fun_180275f0(ebp44);
    return;
}

void fun_1802b210(struct s64* ecx, int32_t a2) {
    void** eax3;
    int32_t edi4;
    int32_t edi5;
    void** eax6;

    eax3 = ecx->f0;
    if (eax3) {
        if (ecx->f44) {
            edi4 = mmioAscend;
            edi4(eax3, &ecx->f24, 0, edi5);
            eax6 = ecx->f0;
            edi4(eax6, &ecx->f4, 0, eax3, &ecx->f24, 0, edi5);
            mmioClose();
            ecx->f44 = 0;
        }
        ecx->f0 = reinterpret_cast<void**>(0);
    }
    return;
}

void fun_1800daa0(void** ecx, void** a2, void** a3) {
    __asm__("fld dword [ebp+0x8]");
    __asm__("fmul st0, st0");
    __asm__("fld dword [ebp+0xc]");
    __asm__("fmul st0, st0");
    __asm__("faddp st1, st0");
    __asm__("fsqrt ");
    __asm__("fstp dword [ebp-0x4]");
    __asm__("fld dword [ebp-0x4]");
    return;
}

void fun_1800b850(void** ecx) {
    void** eax2;
    void** ecx3;

    eax2 = *reinterpret_cast<void***>(ecx + 24);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180345c4);
    if (eax2) {
        ecx3 = *reinterpret_cast<void***>(ecx + 4);
        fun_1800b3a0(ecx3, eax2);
    }
    fun_1800ccb0(ecx);
    return;
}

int16_t fun_1800e030(void** ecx, void** a2) {
    void** eax3;

    __asm__("fild dword [ecx+0xc]");
    __asm__("fmul dword [ebp+0x8]");
    __asm__("fstp dword [ebp+0x8]");
    __asm__("fld dword [ebp+0x8]");
    __asm__("fistp dword [ebp-0x4]");
    eax3 = ecx;
    return *reinterpret_cast<int16_t*>(&eax3);
}

void fun_18012b10(void** ecx, void** a2, void** a3) {
    *reinterpret_cast<void***>(ecx + 88) = a2;
    *reinterpret_cast<void***>(ecx + 100) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 96) = reinterpret_cast<void**>(0x3f800000);
    *reinterpret_cast<void***>(ecx + 92) = a3;
    *reinterpret_cast<void***>(ecx + 52) = reinterpret_cast<void**>(1);
    *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(1);
    return;
}

void fun_18013000(void** ecx) {
    return;
}

struct s294 {
    signed char[48] pad48;
    int32_t f48;
};

struct s293 {
    struct s293* f0;
    signed char[4] pad8;
    struct s294** f8;
};

struct s295 {
    signed char[24] pad24;
    int32_t f24;
};

struct s296 {
    signed char[24] pad24;
    int32_t f24;
};

struct s297 {
    signed char[24] pad24;
    int32_t f24;
};

struct s292 {
    signed char[24] pad24;
    struct s293* f24;
    signed char[1352] pad1380;
    struct s295** f1380;
    signed char[4] pad1388;
    struct s296** f1388;
    signed char[1760] pad3152;
    struct s297** f3152;
};

void fun_18013cd0(struct s292* ecx) {
    struct s293* esi2;
    struct s293* edi3;
    struct s294* eax4;

    esi2 = ecx->f24;
    edi3 = reinterpret_cast<struct s293*>(&ecx->f24);
    if (esi2 != edi3) {
        do {
            eax4 = *esi2->f8;
            eax4->f48();
            esi2 = esi2->f0;
        } while (esi2 != edi3);
    }
    return;
}

void fun_18012800(void** ecx, int32_t a2, void*** a3, int32_t a4) {
    int1_t zf5;
    int1_t zf6;
    void** edx7;
    void** edx8;

    switch (a2 - 1) {
    case 0:
        zf5 = (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 4)) & 48) == 0;
        *reinterpret_cast<void***>(ecx + 68) = *a3;
        if (!zf5) {
            *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(1);
            return;
        }
    case 1:
        zf6 = (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 4)) & 48) == 0;
        *reinterpret_cast<void***>(ecx + 72) = *a3;
        if (!zf6) {
            *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(1);
            return;
        }
    case 2:
        *reinterpret_cast<void***>(ecx + 56) = *a3;
        fun_18012ca0(ecx);
        edx7 = *reinterpret_cast<void***>(ecx);
        *reinterpret_cast<void***>(edx7 + 60)(ecx);
        *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(1);
        return;
    case 3:
        *reinterpret_cast<void***>(ecx + 60) = *a3;
        fun_18012ca0(ecx);
        edx8 = *reinterpret_cast<void***>(ecx);
        *reinterpret_cast<void***>(edx8 + 60)(ecx);
        *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(1);
        return;
    case 4:
        if (*a3 != *reinterpret_cast<void***>(ecx + 76)) {
            *reinterpret_cast<void***>(ecx + 76) = *a3;
            *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(1);
        }
    }
    return;
}

int16_t fun_18016a70(void** a1, void** a2, void** a3, void* a4, void** a5, void** a6, void** a7, void** a8, uint32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, void** a14, int32_t a15, void** a16, int32_t a17, int32_t a18, void** a19, int32_t a20, int32_t a21, int32_t a22) {
    void** v23;
    void** v24;
    void** ebp25;
    void*** ebp26;
    void** v27;
    void** ebx28;
    void** ebx29;
    void** v30;
    void** esi31;
    void** v32;
    void** edi33;
    void** eax34;
    void** ecx35;
    void** v36;
    void** esi37;
    void** v38;
    void** eax39;
    void** ecx40;
    void** ecx41;
    void** edx42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** eax55;
    void** edx56;
    void** eax57;
    void** edx58;
    void** v59;
    void** v60;
    void* eax61;
    void* edx62;
    void* v63;
    void* v64;
    int32_t ecx65;
    void** v66;
    int32_t* edi67;
    int32_t ecx68;
    int32_t* esi69;
    void** eax70;
    void** eax71;
    int32_t ecx72;
    void** eax73;
    void*** edi74;
    void* edx75;
    void** edi76;
    void** esi77;
    void** ebx78;
    void** ecx79;
    void** edx80;
    void** eax81;
    void** eax82;

    v23 = reinterpret_cast<void**>(__return_address());
    v24 = ebp25;
    ebp26 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    v27 = ebx28;
    ebx29 = a1;
    v30 = esi31;
    v32 = edi33;
    eax34 = a7;
    *reinterpret_cast<int16_t*>(&eax34) = fun_18016890(ebx29, a3, eax34, a4, a5, a6);
    ecx35 = eax34;
    v36 = ecx35;
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(ecx35) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(ecx35 == 0))) {
        esi37 = ebx29 + 16;
        v38 = ecx35;
        do {
            eax39 = esi37 + 0xfffffff4;
            ecx40 = reinterpret_cast<void**>(ebp26 + 0xfffffff4);
            *reinterpret_cast<int16_t*>(&eax39) = fun_1800d1a0(ecx40, ecx40, eax39, a8);
            ecx41 = *reinterpret_cast<void***>(eax39 + 4);
            edx42 = *reinterpret_cast<void***>(eax39 + 8);
            *reinterpret_cast<void***>(esi37) = *reinterpret_cast<void***>(eax39);
            *reinterpret_cast<void***>(esi37 + 4) = ecx41;
            *reinterpret_cast<void***>(esi37 + 8) = edx42;
            fun_1800d240(esi37, esi37, v32, v30, v27, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v24, v23);
            __asm__("fstp dword [esi+0xc]");
            esi37 = esi37 + 36;
            eax55 = v38 - 1;
            v38 = eax55;
        } while (eax55);
        ecx35 = v36;
    }
    edx56 = reinterpret_cast<void**>(1);
    if (reinterpret_cast<signed char>(ecx35) >= reinterpret_cast<signed char>(1)) {
        do {
            eax57 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(edx56 + reinterpret_cast<unsigned char>(edx56) * 2) + 1);
            edx56 = eax57;
        } while (reinterpret_cast<signed char>(eax57) <= reinterpret_cast<signed char>(ecx35));
    }
    while (1) {
        edx58 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(__intrinsic()) + (reinterpret_cast<uint32_t>(__intrinsic()) >> 31));
        v59 = edx58;
        v60 = edx58;
        if (reinterpret_cast<signed char>(edx58) < reinterpret_cast<signed char>(ecx35)) {
            eax61 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(edx58 + reinterpret_cast<unsigned char>(edx58) * 8) << 2);
            edx62 = eax61;
            v63 = eax61;
            v64 = edx62;
            while (1) {
                ecx65 = 9;
                while (ecx65) {
                    --ecx65;
                }
                v66 = v60;
                while (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax61) + 1) & 1) {
                    edi67 = reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(edx62) + reinterpret_cast<unsigned char>(ebx29));
                    ecx68 = 9;
                    esi69 = reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(edx62) - reinterpret_cast<uint32_t>(v63) + reinterpret_cast<unsigned char>(ebx29));
                    eax70 = v66;
                    while (ecx68) {
                        --ecx68;
                        *edi67 = *esi69;
                        ++edi67;
                        ++esi69;
                    }
                    eax71 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax70) - reinterpret_cast<unsigned char>(v59));
                    edx62 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(edx62) - reinterpret_cast<uint32_t>(v63));
                    v66 = eax71;
                    if (reinterpret_cast<signed char>(eax71) < reinterpret_cast<signed char>(v59)) 
                        break;
                    eax61 = v63;
                }
                ecx72 = 9;
                eax73 = v60 + 1;
                edi74 = reinterpret_cast<void***>(ebx29 + reinterpret_cast<uint32_t>(v66 + reinterpret_cast<unsigned char>(v66) * 8) * 4);
                edx75 = v64;
                while (ecx72) {
                    --ecx72;
                    *edi74 = a16;
                    edi74 = edi74 + 4;
                }
                ecx35 = v36;
                v60 = eax73;
                v64 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(edx75) + 36);
                if (reinterpret_cast<signed char>(eax73) >= reinterpret_cast<signed char>(ecx35)) 
                    break;
                edx62 = v64;
                eax61 = v63;
            }
            edx58 = v59;
        }
        if (reinterpret_cast<signed char>(edx58) <= reinterpret_cast<signed char>(1)) 
            break;
    }
    edi76 = a2;
    if (reinterpret_cast<signed char>(ecx35) < reinterpret_cast<signed char>(edi76)) {
        edi76 = ecx35;
    }
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(edi76) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(edi76 == 0))) {
        esi77 = ebx29 + 28;
        ebx78 = edi76;
        do {
            __asm__("fld dword [ebp+0x1c]");
            __asm__("fsqrt ");
            __asm__("fstp dword [ebp+0x18]");
            __asm__("fld dword [ebp+0x18]");
            __asm__("fstp dword [esi]");
            ecx79 = *reinterpret_cast<void***>(esi77 + 0xfffffffc);
            edx80 = *reinterpret_cast<void***>(esi77 + 0xfffffff4);
            fun_1800dac0(ecx79, edx80, ecx79);
            __asm__("fld qword [0x180346d0]");
            __asm__("fdivr dword [0x18034310]");
            __asm__("fmul st0, st1");
            __asm__("fstp dword [ebp+0x14]");
            __asm__("fstp st0");
            __asm__("fld dword [ebp+0x14]");
            __asm__("fistp dword [ebp+0x20]");
            eax81 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v60) - a9);
            *reinterpret_cast<void***>(esi77 + 4) = eax81;
            if (reinterpret_cast<signed char>(eax81) < reinterpret_cast<signed char>(0)) {
                *reinterpret_cast<void***>(esi77 + 4) = eax81 + 0x168;
            }
            esi77 = esi77 + 36;
            --ebx78;
        } while (ebx78);
    }
    eax82 = edi76;
    return *reinterpret_cast<int16_t*>(&eax82);
}

int16_t fun_180153e0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42) {
    void** ecx43;
    void** eax44;
    void** edx45;
    void** eax46;
    void** esi47;
    int16_t ax48;

    ecx43 = *reinterpret_cast<void***>(ecx + 96);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034a48);
    if (ecx43) {
        eax44 = *reinterpret_cast<void***>(ecx43);
        *reinterpret_cast<void***>(eax44)(1);
    }
    if (*reinterpret_cast<void***>(ecx + 0x6c)) {
        edx45 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x6c));
        *reinterpret_cast<void***>(edx45)(1);
    }
    if (*reinterpret_cast<void***>(ecx + 0x68)) {
        eax46 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x68));
        *reinterpret_cast<void***>(eax46)(1);
    }
    fun_18019210(ecx + 56, esi47, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    ax48 = fun_18019210(ecx + 16, esi47, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    return ax48;
}

int16_t fun_180164d0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40) {
    void** v41;
    void** v42;
    void** ebx43;
    void** v44;
    void** esi45;
    void** v46;
    void** edi47;
    void** edi48;
    void** ecx49;
    void** eax50;
    void** edx51;
    void*** esi52;
    int32_t ebx53;
    void** eax54;
    void** esi55;
    int32_t ebx56;
    int16_t ax57;

    v41 = reinterpret_cast<void**>(__return_address());
    v42 = ebx43;
    v44 = esi45;
    v46 = edi47;
    edi48 = ecx;
    ecx49 = *reinterpret_cast<void***>(edi48 + 0x90);
    *reinterpret_cast<void***>(edi48) = reinterpret_cast<void**>(0x18034ad8);
    if (ecx49) {
        eax50 = *reinterpret_cast<void***>(ecx49);
        *reinterpret_cast<void***>(eax50)(1);
    }
    if (*reinterpret_cast<void***>(edi48 + 0x98)) {
        edx51 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(edi48 + 0x98));
        *reinterpret_cast<void***>(edx51)(1);
    }
    esi52 = reinterpret_cast<void***>(edi48 + 0x9c);
    ebx53 = 2;
    do {
        if (*esi52) {
            eax54 = *reinterpret_cast<void***>(*esi52);
            *reinterpret_cast<void***>(eax54)(1);
        }
        esi52 = esi52 + 4;
        --ebx53;
    } while (ebx53);
    fun_18019210(edi48 + 100, v46, v44, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    esi55 = edi48 + 100;
    ebx56 = 2;
    do {
        esi55 = esi55 - 40;
        ax57 = fun_18019210(esi55, v46, v44, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
        --ebx56;
    } while (ebx56);
    *reinterpret_cast<void***>(edi48) = reinterpret_cast<void**>(0x180348d4);
    return ax57;
}

int16_t fun_180179b0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t eax4;
    int32_t edx5;

    eax4 = a3 - 1;
    if (!(reinterpret_cast<uint1_t>(a3 < 0) | reinterpret_cast<uint1_t>(a3 == 0))) {
        edx5 = eax4 + 1;
        eax4 = a1;
        do {
            __asm__("fld dword [eax]");
            __asm__("fsub dword [ecx]");
            eax4 = eax4 + 4;
            --edx5;
            __asm__("fstp dword [eax-0x4]");
        } while (edx5);
    }
    return *reinterpret_cast<int16_t*>(&eax4);
}

void fun_18018590(void* a1, void* a2, uint32_t a3) {
    void* esi4;
    void* edi5;
    int32_t ecx6;
    int32_t ecx7;
    int32_t ecx8;
    uint32_t ecx9;
    uint32_t ecx10;
    void* esi11;
    void* edi12;
    uint32_t ecx13;

    esi4 = a2;
    edi5 = a1;
    ecx6 = reinterpret_cast<int32_t>(a3) >> 4;
    if (ecx6) {
        ecx7 = ecx6 << 5;
        esi4 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esi4) + ecx7);
        edi5 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(edi5) + ecx7);
        ecx8 = -ecx7;
        do {
            __asm__("movq mm0, [edi+ecx]");
            __asm__("movq mm1, [edi+ecx+0x8]");
            __asm__("movq mm2, [edi+ecx+0x10]");
            __asm__("movq mm3, [edi+ecx+0x18]");
            __asm__("psubsw mm0, [esi+ecx]");
            __asm__("psubsw mm1, [esi+ecx+0x8]");
            __asm__("psubsw mm2, [esi+ecx+0x10]");
            __asm__("psubsw mm3, [esi+ecx+0x18]");
            __asm__("movq [edi+ecx], mm0");
            __asm__("movq [edi+ecx+0x8], mm1");
            __asm__("movq [edi+ecx+0x10], mm2");
            __asm__("movq [edi+ecx+0x18], mm3");
            ecx8 = ecx8 + 32;
        } while (ecx8);
        __asm__("emms ");
    }
    ecx9 = a3 & 15;
    if (!ecx9) {
        addr_0x18018630_6:
        return;
    } else {
        ecx10 = ecx9 << 1;
        esi11 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esi4) + ecx10);
        edi12 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(edi5) + ecx10);
        ecx13 = -ecx10;
        while (1) {
            if (__intrinsic()) {
                if (*reinterpret_cast<uint16_t*>(reinterpret_cast<uint32_t>(edi12) + ecx13) < *reinterpret_cast<uint16_t*>(reinterpret_cast<uint32_t>(esi11) + ecx13)) {
                    *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi12) + ecx13) = 0x7fff;
                    ecx13 = ecx13 + 2;
                    if (!ecx13) 
                        goto addr_0x18018630_6;
                } else {
                    *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(edi12) + ecx13) = 0x8000;
                    ecx13 = ecx13 + 2;
                    if (!ecx13) 
                        break;
                }
            } else {
                *reinterpret_cast<uint16_t*>(reinterpret_cast<uint32_t>(edi12) + ecx13) = reinterpret_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reinterpret_cast<uint32_t>(edi12) + ecx13) - *reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(esi11) + ecx13));
                ecx13 = ecx13 + 2;
                if (!ecx13) 
                    goto addr_0x18018614_13;
            }
        }
    }
    goto addr_0x18018630_6;
    addr_0x18018614_13:
    goto addr_0x18018630_6;
}

int16_t fun_1801b490(int16_t* a1, signed char* a2, void* a3, uint32_t a4, uint32_t* a5, uint32_t* a6, uint32_t a7, signed char a8) {
    uint32_t eax9;
    uint32_t v10;
    uint32_t v11;
    signed char* v12;
    int16_t* esi13;
    signed char* edi14;
    uint32_t ebx15;
    uint32_t ecx16;
    void* ecx17;
    uint32_t ecx18;
    uint32_t eax19;
    uint32_t eax20;
    uint32_t eax21;
    uint32_t eax22;

    eax9 = *a6;
    v10 = *a5;
    v11 = eax9;
    v12 = reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(a2) + a4);
    esi13 = a1;
    edi14 = a2;
    ebx15 = v10;
    ecx16 = ebx15;
    while ((ecx17 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(ecx16) >> 16), reinterpret_cast<int32_t>(edi14) < reinterpret_cast<int32_t>(v12)) && reinterpret_cast<int32_t>(ecx17) < reinterpret_cast<int32_t>(a3)) {
        ecx18 = static_cast<uint32_t>(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(esi13) + reinterpret_cast<int32_t>(ecx17) - 1));
        eax19 = (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(esi13) + reinterpret_cast<int32_t>(ecx17)) - ecx18) * (ebx15 & 0xffff);
        ebx15 = ebx15 + v11;
        v11 = v11 + a7;
        eax20 = (reinterpret_cast<int32_t>(eax19) >> 16) + ecx18;
        ecx16 = ebx15;
        *edi14 = *reinterpret_cast<signed char*>(&eax20);
        ++edi14;
    }
    if (!a8) {
        eax21 = a4;
        return *reinterpret_cast<int16_t*>(&eax21);
    } else {
        *a5 = ebx15;
        *a6 = v11;
        eax22 = reinterpret_cast<uint32_t>(edi14) - reinterpret_cast<uint32_t>(a2);
        return *reinterpret_cast<int16_t*>(&eax22);
    }
}

int16_t fun_1801b770(signed char* a1, signed char* a2, int32_t a3, int32_t a4, int32_t* a5, int32_t* a6, int32_t a7, signed char a8) {
    int32_t eax9;
    int32_t v10;
    int32_t v11;
    signed char* v12;
    signed char* esi13;
    signed char* edi14;
    int32_t ebx15;
    int32_t ecx16;
    int32_t eax17;
    int32_t eax18;

    eax9 = *a6;
    v10 = *a5;
    v11 = eax9;
    v12 = reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(a2) + a4);
    esi13 = a1;
    edi14 = a2;
    ebx15 = v10;
    while ((ecx16 = ebx15 >> 16, ecx16 < a3) && reinterpret_cast<int32_t>(edi14) < reinterpret_cast<int32_t>(v12)) {
        *edi14 = *reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(esi13) + ecx16);
        ebx15 = ebx15 + v11;
        ++edi14;
        v11 = v11 + a7;
    }
    if (!a8) {
        eax17 = a4;
        return *reinterpret_cast<int16_t*>(&eax17);
    } else {
        *a5 = ebx15;
        *a6 = v11;
        eax18 = reinterpret_cast<int32_t>(edi14) - reinterpret_cast<int32_t>(a2);
        return *reinterpret_cast<int16_t*>(&eax18);
    }
}

void fun_18022ac0(void** ecx, void* a2) {
    unsigned char al3;

    al3 = fun_18022af0(ecx);
    if (!al3) {
        *reinterpret_cast<void***>(ecx + 4) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 4)) + reinterpret_cast<uint32_t>(a2));
    }
    return;
}

int16_t fun_1801cd60(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** eax45;
    void** esi46;
    int16_t ax47;

    eax45 = *reinterpret_cast<void***>(ecx + 20);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034e5c);
    ax47 = fun_1802b2b0(ecx, eax45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    return ax47;
}

int16_t fun_1801d000(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** eax45;
    void** esi46;
    int16_t ax47;

    eax45 = *reinterpret_cast<void***>(ecx + 20);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034ea4);
    ax47 = fun_1802b2b0(ecx, eax45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    return ax47;
}

void fun_1801d480(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** v45;
    void** esi46;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034f14);
    v45 = *reinterpret_cast<void***>(ecx + 4);
    fun_1802b2b0(ecx, v45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    *reinterpret_cast<void***>(ecx + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 4) = reinterpret_cast<void**>(0);
    fun_18019170(ecx);
    return;
}

int16_t fun_1801df60(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42) {
    void** v43;
    void** v44;
    void** ebx45;
    void** v46;
    void** esi47;
    void** v48;
    void** edi49;
    void** edi50;
    void** eax51;
    void** esi52;
    int32_t ebx53;
    void** ecx54;
    int16_t ax55;

    v43 = reinterpret_cast<void**>(__return_address());
    v44 = ebx45;
    v46 = esi47;
    v48 = edi49;
    edi50 = ecx;
    eax51 = *reinterpret_cast<void***>(edi50 + 52);
    *reinterpret_cast<void***>(edi50) = reinterpret_cast<void**>(0x18034f3c);
    fun_1802b2b0(ecx, eax51, v48, v46, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    esi52 = edi50 + 20;
    ebx53 = 4;
    do {
        ecx54 = *reinterpret_cast<void***>(esi52);
        ax55 = fun_1802b2b0(ecx54, ecx54, v48, v46, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
        esi52 = esi52 + 4;
        --ebx53;
    } while (ebx53);
    *reinterpret_cast<void***>(edi50) = reinterpret_cast<void**>(0x180348d4);
    return ax55;
}

int16_t fun_1801ffa0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** eax45;
    void** esi46;
    int16_t ax47;

    eax45 = *reinterpret_cast<void***>(ecx + 16);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034ffc);
    ax47 = fun_1802b2b0(ecx, eax45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    return ax47;
}

int16_t fun_18020550(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** eax45;
    void** esi46;
    int16_t ax47;

    eax45 = *reinterpret_cast<void***>(ecx + 16);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035020);
    ax47 = fun_1802b2b0(ecx, eax45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    return ax47;
}

struct s298 {
    signed char[16] pad16;
    int32_t f16;
    int32_t f20;
    int32_t f24;
    int32_t f28;
    void** f32;
    signed char[3] pad36;
    void** f36;
    signed char[1] pad38;
    void** f38;
    signed char[3] pad42;
    void** f42;
    signed char[3] pad46;
    void** f46;
    signed char[3] pad50;
    void** f50;
    signed char[3] pad54;
    void** f54;
    signed char[1] pad56;
    void** f56;
    signed char[1] pad58;
    void** f58;
    signed char[1] pad60;
    void** f60;
    signed char[9] pad70;
    signed char f70;
};

void fun_18020a00(struct s298* ecx) {
    int32_t v2;
    int32_t v3;
    void** ax4;
    int32_t v5;
    int32_t v6;
    void** ax7;
    int32_t v8;
    int32_t v9;
    void** ax10;
    int32_t v11;
    int32_t v12;
    void** ax13;
    int32_t v14;
    int32_t v15;
    void** ax16;
    int32_t v17;
    int32_t v18;
    void** ax19;
    int32_t v20;
    int32_t v21;
    void** ax22;
    int32_t v23;
    int32_t v24;
    void** ax25;
    int32_t v26;
    int32_t v27;
    void** ax28;

    __asm__("fld dword [esi+0x10]");
    __asm__("fmul dword [esi+0x14]");
    __asm__("fstp dword [esp+0x10]");
    __asm__("fld dword [esp+0x10]");
    __asm__("fstp qword [esp]");
    ax4 = fun_1800da10(v2, v3, 14);
    __asm__("fld dword [esi+0x18]");
    __asm__("fsub dword [esi+0x1c]");
    ecx->f32 = ax4;
    ecx->f38 = ax4;
    __asm__("fmul dword [esp+0x10]");
    __asm__("fstp qword [esp]");
    ax7 = fun_1800da10(v5, v6, 14);
    __asm__("fld dword [esp+0x4]");
    __asm__("fmul dword [esi+0x18]");
    ecx->f36 = ax7;
    __asm__("fstp qword [esp]");
    ax10 = fun_1800da10(v8, v9, 14);
    __asm__("fld dword [esi+0x1c]");
    __asm__("fmul dword [esi+0x18]");
    ecx->f42 = ax10;
    __asm__("fmul dword [esp+0x10]");
    __asm__("fchs ");
    __asm__("fstp qword [esp]");
    ax13 = fun_1800da10(v11, v12, 14);
    __asm__("fld dword [esi+0x1c]");
    __asm__("fadd dword [0x18034238]");
    ecx->f46 = ax13;
    __asm__("fchs ");
    __asm__("fstp qword [esp]");
    ax16 = fun_1800da10(v14, v15, 14);
    __asm__("fld dword [esi+0x1c]");
    __asm__("fld st0");
    __asm__("fmul st0, st1");
    ecx->f50 = ax16;
    __asm__("fsubr dword [0x18034238]");
    __asm__("fchs ");
    __asm__("fstp qword [esp]");
    __asm__("fstp st0");
    ax19 = fun_1800da10(v17, v18, 14);
    __asm__("fld dword [esi+0x10]");
    __asm__("fmul dword [esi+0x14]");
    ecx->f54 = ax19;
    __asm__("fstp qword [esp]");
    ax22 = fun_1800da10(v20, v21, 14);
    __asm__("fld dword [esi+0x18]");
    __asm__("fmul dword [esi+0x10]");
    ecx->f56 = ax22;
    __asm__("fmul dword [esi+0x14]");
    __asm__("fstp qword [esp]");
    ax25 = fun_1800da10(v23, v24, 14);
    __asm__("fld dword [esi+0x1c]");
    __asm__("fadd dword [0x18034238]");
    ecx->f58 = ax25;
    __asm__("fstp qword [esp]");
    ax28 = fun_1800da10(v26, v27, 14);
    ecx->f60 = ax28;
    ecx->f70 = 1;
    return;
}

void fun_18020ce0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** v45;
    void** esi46;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x1803506c);
    v45 = *reinterpret_cast<void***>(ecx + 4);
    fun_1802b2b0(ecx, v45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    *reinterpret_cast<void***>(ecx + 12) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 8) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 4) = reinterpret_cast<void**>(0);
    fun_18019170(ecx);
    return;
}

void fun_18022bb0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** eax45;
    void** esi46;

    eax45 = *reinterpret_cast<void***>(ecx + 0x1b4);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x1803509c);
    fun_1802b2b0(ecx, eax45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    fun_180275f0(ecx);
    return;
}

int16_t fun_1802a9c0(int32_t* ecx, void** a2, int32_t a3) {
    int32_t eax4;

    eax4 = reinterpret_cast<int32_t>(mmioOpenA());
    *ecx = eax4;
    goto 0;
}

struct s299 {
    signed char[7] pad7;
    void** f7;
};

int16_t fun_1802abb0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36) {
    void* esp37;
    void* esp38;
    void** v39;
    void** edi40;
    void** esi41;
    void** ebp42;
    void** ebx43;
    void** v44;
    void** v45;
    void** eax46;
    void* esp47;
    struct s299* v48;
    void** v49;
    void** v50;
    void** eax51;
    int32_t v52;
    void** v53;
    void** ecx54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** eax59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** eax65;

    esp37 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 - 4 - 4 - 4 - 4);
    fun_1802ab10(ecx, reinterpret_cast<int32_t>(esp37) + 20, a2, 16);
    esp38 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp37) - 4 - 4 - 4 + 12 + 4);
    if (!a5) {
        eax46 = fun_1802b2bb(v39, v39, edi40, esi41, ebp42, ebx43, a3, v44, v45);
        esp47 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp38) - 4 - 4 + 4 + 4);
    } else {
        eax51 = fun_1802b2bb(ecx, &v48->f7, edi40, esi41, ebp42, ebx43, a3, v49, v50);
        *reinterpret_cast<void***>(a5) = eax51;
        eax46 = eax51 + 7;
        esp47 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp38) - 4 - 4 + 4 + 4);
        *reinterpret_cast<unsigned char*>(&eax46) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax46) & 0xf8);
    }
    *reinterpret_cast<void***>(a4) = eax46;
    if (eax46) {
        *reinterpret_cast<int16_t*>(&eax46) = fun_1802ab40(ecx, eax46, v52, edi40, esi41, ebp42, ebx43, a3);
        if (!eax46) {
            if (a6) {
                *reinterpret_cast<void***>(a6) = v53;
            }
            fun_1802ab70(ecx, reinterpret_cast<int32_t>(esp47) - 4 - 4 - 4 + 8 + 4 + 16, 0);
            return 0;
        } else {
            if (!a5) {
                ecx54 = *reinterpret_cast<void***>(a4);
                fun_1802b2b0(ecx54, ecx54, edi40, esi41, ebp42, ebx43, a3, v55, v56, v57, v58, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36);
                eax59 = eax46;
                return *reinterpret_cast<int16_t*>(&eax59);
            } else {
                v60 = *reinterpret_cast<void***>(a5);
                fun_1802b2b0(ecx, v60, edi40, esi41, ebp42, ebx43, a3, v61, v62, v63, v64, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36);
                eax65 = eax46;
                return *reinterpret_cast<int16_t*>(&eax65);
            }
        }
    } else {
        return 4;
    }
}

void fun_180271b0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** eax7;
    void** esi8;
    void** ecx9;

    eax7 = *reinterpret_cast<void***>(ecx + 16);
    if (!eax7) {
        eax7 = fun_1802b2bb(ecx, 12, esi8, __return_address(), a2, a3, a4, a5, a6);
    } else {
        *reinterpret_cast<void***>(ecx + 16) = *reinterpret_cast<void***>(eax7);
    }
    if (eax7) {
        ecx9 = eax7 + 8;
        if (ecx9) {
            *reinterpret_cast<void***>(ecx9) = *reinterpret_cast<void***>(a3);
        }
        *reinterpret_cast<void***>(eax7) = a2;
        *reinterpret_cast<void***>(eax7 + 4) = *reinterpret_cast<void***>(a2 + 4);
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(a2 + 4)) = eax7;
        *reinterpret_cast<void***>(a2 + 4) = eax7;
        *reinterpret_cast<void***>(ecx) = *reinterpret_cast<void***>(ecx) + 1;
    }
    return;
}

void fun_1802b100(struct s64* ecx) {
    ecx->f0 = reinterpret_cast<void**>(0);
    ecx->f44 = 0;
    return;
}

void fun_18027dc0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40) {
    void** esi41;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035298);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035218);
    fun_18027a90(ecx, esi41, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    fun_180275f0(ecx);
    return;
}

void fun_18027f20(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40) {
    void** esi41;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180352c0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035218);
    fun_18027a90(ecx, esi41, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    fun_180275f0(ecx);
    return;
}

void fun_180288c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37) {
    void** eax38;
    void** ecx39;
    void** esi40;

    eax38 = *reinterpret_cast<void***>(ecx + 0x1bc);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180353e8);
    ecx39 = *reinterpret_cast<void***>(eax38);
    *reinterpret_cast<void***>(ecx39 + 8)();
    fun_18027a70(ecx, eax38, esi40, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37);
    goto esi40;
}

struct s301 {
    signed char[36] pad36;
    int32_t f36;
};

struct s300 {
    signed char[408] pad408;
    int32_t f408;
    int32_t f412;
    signed char[28] pad444;
    struct s301** f444;
};

void* fun_18027b60(struct s300* ecx, int32_t a2) {
    int32_t eax3;
    int32_t* eax4;

    if (a2 > ecx->f408) {
        eax3 = ecx->f408;
        ecx->f412 = eax3;
        return *reinterpret_cast<void**>(&eax3);
    } else {
        eax4 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(__zero_stack_offset()) + 4);
        ecx->f412 = a2;
        return *reinterpret_cast<void**>(&eax4);
    }
}

void fun_180294c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40) {
    void** v41;
    void** v42;
    void** ebx43;
    void** v44;
    void** esi45;
    void** esi46;
    void** v47;
    void** edi48;
    void** ecx49;
    void** eax50;
    void** edx51;
    void** edi52;
    int32_t ebx53;

    v41 = reinterpret_cast<void**>(__return_address());
    v42 = ebx43;
    v44 = esi45;
    esi46 = ecx;
    v47 = edi48;
    ecx49 = *reinterpret_cast<void***>(esi46 + 0x1c0);
    *reinterpret_cast<void***>(esi46) = reinterpret_cast<void**>(0x180354a4);
    if (ecx49) {
        eax50 = *reinterpret_cast<void***>(ecx49);
        *reinterpret_cast<void***>(eax50)(1);
    }
    if (*reinterpret_cast<void***>(esi46 + 0x1c8)) {
        edx51 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi46 + 0x1c8));
        *reinterpret_cast<void***>(edx51 + 32)(1);
    }
    edi52 = esi46 + 0x26c;
    ebx53 = 2;
    do {
        edi52 = edi52 - 40;
        fun_18019210(edi52, v47, v44, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
        --ebx53;
    } while (ebx53);
    fun_18019210(esi46 + 0x1f4, v47, v44, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    fun_18019210(esi46 + 0x1cc, v47, v44, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    fun_18027a70(esi46, v47, v44, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36);
    return;
}

void fun_18028fb0(void** ecx) {
    void** eax2;
    void** ecx3;

    eax2 = *reinterpret_cast<void***>(ecx + 0x340);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035444);
    if (eax2) {
        ecx3 = *reinterpret_cast<void***>(eax2);
        *reinterpret_cast<void***>(ecx3 + 8)(eax2);
    }
    fun_180275f0(ecx + 0x19c);
    fun_180275f0(ecx);
    return;
}

void fun_18029a30(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42) {
    void** ecx43;
    void** eax44;
    void** edx45;
    void** esi46;

    ecx43 = *reinterpret_cast<void***>(ecx + 0x1c4);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180354e0);
    if (ecx43) {
        eax44 = *reinterpret_cast<void***>(ecx43);
        *reinterpret_cast<void***>(eax44)(1);
    }
    if (*reinterpret_cast<void***>(ecx + 0x1cc)) {
        edx45 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x1cc));
        *reinterpret_cast<void***>(edx45 + 32)(1);
    }
    fun_18019210(ecx + 0x1d0, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    fun_18027a70(ecx, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
    return;
}

void fun_1802a130(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43) {
    void** v44;
    void** v45;
    void** esi46;
    void** esi47;
    void** v48;
    void** edi49;
    void** edi50;
    void** v51;
    void** ebx52;
    void* ebx53;
    void** v54;
    void** edi55;

    v44 = reinterpret_cast<void**>(__return_address());
    v45 = esi46;
    esi47 = ecx;
    v48 = edi49;
    *reinterpret_cast<void***>(esi47) = reinterpret_cast<void**>(0x1803551c);
    fun_1802a3e0(ecx);
    if (*reinterpret_cast<void***>(esi47 + 0x74)) {
        edi50 = reinterpret_cast<void**>(0);
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi47 + 0x70)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(esi47 + 0x70) == 0))) {
            v51 = ebx52;
            ebx53 = reinterpret_cast<void*>(0);
            do {
                ecx = *reinterpret_cast<void***>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi47 + 0x74)) + reinterpret_cast<uint32_t>(ebx53));
                fun_1802b2b0(ecx, ecx, v51, v48, v45, v44, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
                ++edi50;
                ebx53 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebx53) + 32);
            } while (reinterpret_cast<signed char>(edi50) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi47 + 0x70)));
        }
        v54 = *reinterpret_cast<void***>(esi47 + 0x74);
        fun_1802b2b0(ecx, v54, v48, v45, v44, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43);
    }
    edi55 = *reinterpret_cast<void***>(esi47 + 0x6c);
    if (edi55) {
        fun_1800cec0(edi55);
        fun_1802b2b0(edi55, edi55, v48, v45, v44, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43);
    }
    fun_18024920(esi47);
    return;
}

void** fun_1802c484(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** v7;
    void** v8;
    void** ebp9;
    void** v10;
    void** ebx11;
    void** v12;
    void** esi13;
    void** v14;
    void** edi15;
    void** edi16;
    void** ebx17;
    void** ecx18;
    void** v19;
    void** v20;
    void** esi21;
    void** v22;
    uint32_t eax23;
    void** eax24;
    void** eax25;
    void** v26;
    void** eax27;
    void** edi28;
    void** v29;
    void** eax30;

    v7 = reinterpret_cast<void**>(__return_address());
    v8 = ebp9;
    v10 = ebx11;
    v12 = esi13;
    v14 = edi15;
    edi16 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a3) * reinterpret_cast<unsigned char>(a4));
    ebx17 = a2;
    ecx18 = edi16;
    v19 = edi16;
    v20 = ecx18;
    if (edi16) {
        esi21 = a5;
        if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi21 + 12)) & 0x10c)) {
            v22 = reinterpret_cast<void**>(0x1000);
        } else {
            v22 = *reinterpret_cast<void***>(esi21 + 24);
        }
        while (1) {
            if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi21 + 12)) & 0x10c) || !*reinterpret_cast<void***>(esi21 + 4)) {
                if (reinterpret_cast<unsigned char>(ecx18) < reinterpret_cast<unsigned char>(v22)) {
                    eax23 = fun_1802f133(ecx18, esi21, v14, v12, v10, v19, v8, v7);
                    if (eax23 == 0xffffffff) 
                        break;
                    *reinterpret_cast<void***>(ebx17) = *reinterpret_cast<void***>(&eax23);
                    eax24 = *reinterpret_cast<void***>(esi21 + 24);
                    ++ebx17;
                    --v20;
                    v22 = eax24;
                } else {
                    eax25 = ecx18;
                    if (v22) {
                        eax25 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx18) - reinterpret_cast<unsigned char>(eax25) % reinterpret_cast<unsigned char>(v22));
                    }
                    v26 = *reinterpret_cast<void***>(esi21 + 16);
                    eax27 = fun_1802bd35(ecx18, v26, ebx17, eax25, v14, v12, v10);
                    if (!eax27) 
                        goto addr_0x1802c556_12;
                    if (eax27 == 0xffffffff) 
                        goto addr_0x1802c55c_14;
                    v20 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v20) - reinterpret_cast<unsigned char>(eax27));
                    ebx17 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx17) + reinterpret_cast<unsigned char>(eax27));
                }
            } else {
                edi28 = ecx18;
                if (reinterpret_cast<unsigned char>(ecx18) >= reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi21 + 4))) {
                    edi28 = *reinterpret_cast<void***>(esi21 + 4);
                }
                v29 = *reinterpret_cast<void***>(esi21);
                fun_1802f210(ecx18, ebx17, v29, edi28);
                v20 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v20) - reinterpret_cast<unsigned char>(edi28));
                *reinterpret_cast<void***>(esi21 + 4) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi21 + 4)) - reinterpret_cast<unsigned char>(edi28));
                *reinterpret_cast<void***>(esi21) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi21)) + reinterpret_cast<unsigned char>(edi28));
                ebx17 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx17) + reinterpret_cast<unsigned char>(edi28));
                edi16 = v19;
            }
            if (!v20) 
                goto addr_0x1802c54e_20;
            ecx18 = v20;
        }
    } else {
        eax30 = reinterpret_cast<void**>(0);
        goto addr_0x1802c551_23;
    }
    addr_0x1802c560_24:
    eax30 = reinterpret_cast<void**>((reinterpret_cast<unsigned char>(edi16) - reinterpret_cast<unsigned char>(v20)) / reinterpret_cast<unsigned char>(a3));
    addr_0x1802c551_23:
    return eax30;
    addr_0x1802c54e_20:
    eax30 = a4;
    goto addr_0x1802c551_23;
    addr_0x1802c556_12:
    *reinterpret_cast<void***>(esi21 + 12) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi21 + 12)) | 16);
    goto addr_0x1802c560_24;
    addr_0x1802c55c_14:
    *reinterpret_cast<void***>(esi21 + 12) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi21 + 12)) | 32);
    goto addr_0x1802c560_24;
}

struct s302 {
    void** f0;
    void** f1;
};

void fun_1802c63f(struct s302* a1);

void** fun_1802c995(void** ecx, int32_t a2, void** a3, int32_t a4, void** a5, void** a6);

int32_t __image_base = 0x1802ff2b;

struct s303 {
    void** f0;
    signed char[3] pad4;
    void** f4;
};

void fun_1802c6a5(void** ecx, int32_t a2, struct s303* a3, void** a4);

struct s304 {
    void** f0;
    void** f1;
};

void fun_1802c5e5(void** ecx, struct s304* a2);

int32_t __image_base = 0x1802ff2b;

int32_t fun_1802c68d(int32_t a1);

int32_t __image_base = 0x1802ff2b;

void fun_1802b278() {
    __image_base = reinterpret_cast<int32_t>(fun_1802c63f);
    __image_base = reinterpret_cast<int32_t>(fun_1802c995);
    __image_base = reinterpret_cast<int32_t>(fun_1802c6a5);
    __image_base = reinterpret_cast<int32_t>(fun_1802c5e5);
    __image_base = reinterpret_cast<int32_t>(fun_1802c68d);
    __image_base = reinterpret_cast<int32_t>(fun_1802c995);
    return;
}

void fun_1802e893() {
    void** v1;
    void** v2;
    void** esi3;
    void** v4;
    void** edi5;
    int32_t edi6;
    void*** esi7;
    void** v8;
    void** ecx9;
    void** v10;
    int32_t v11;
    int32_t v12;

    v1 = reinterpret_cast<void**>(__return_address());
    v2 = esi3;
    v4 = edi5;
    edi6 = DeleteCriticalSection;
    esi7 = reinterpret_cast<void***>(0x180444c0);
    do {
        if (*esi7 && (esi7 != 0x18044504 && (esi7 != 0x180444f4 && (esi7 != 0x180444e4 && esi7 != 0x180444c4)))) {
            v8 = *esi7;
            edi6(ecx9, v8, v4, v2, v1);
            v10 = *esi7;
            fun_1802ca0b(ecx9, v10, v8, v4, v2, v1);
            ecx9 = v10;
        }
        esi7 = esi7 + 4;
    } while (reinterpret_cast<int32_t>(esi7) < 0x18044580);
    v11 = __image_base;
    edi6(ecx9, v11, v4, v2, v1);
    v12 = __image_base;
    edi6(ecx9);
    edi6(ecx9);
    edi6(ecx9);
    goto v12;
}

uint32_t fun_1802f57a(int32_t ecx) {
    uint32_t v2;
    uint32_t eax3;

    eax3 = fun_1802f545(ecx, __return_address(), v2 & 0xfff7ffff);
    return eax3;
}

int32_t fun_1802fb61(struct s208* a1, void* a2, struct s207* a3, void*** a4, void** a5, void* a6, void* a7, uint32_t a8, int32_t a9) {
    int32_t eax10;

    eax10 = fun_1802f9df(__return_address(), a1, 0x18044b48);
    return eax10;
}

uint32_t fun_1802f08f(void** ecx, void** a2, void** a3, void** a4) {
    void** v5;
    void** v6;
    void** ebx7;
    void** v8;
    void** esi9;
    void** v10;
    void** edi11;
    uint32_t ebx12;
    uint32_t edi13;
    void** esi14;
    void** ecx15;
    int1_t less_or_equal16;
    void** eax17;
    void** v18;
    void** eax19;
    void** ecx20;
    void** v21;
    uint32_t eax22;
    void** v23;
    uint32_t eax24;
    void** eax25;
    void** v26;
    int1_t less27;
    uint32_t eax28;

    v5 = reinterpret_cast<void**>(__return_address());
    v6 = ebx7;
    v8 = esi9;
    v10 = edi11;
    ebx12 = 0;
    edi13 = 0;
    fun_1802e8ff(ecx, 2, v10, v8, v6, v5, a2, a3, a4);
    esi14 = reinterpret_cast<void**>(0);
    ecx15 = reinterpret_cast<void**>(2);
    less_or_equal16 = reinterpret_cast<signed char>(g18046f00) <= reinterpret_cast<signed char>(0);
    if (!less_or_equal16) {
        do {
            eax17 = g18045ee0;
            if (*reinterpret_cast<void***>(eax17 + reinterpret_cast<unsigned char>(esi14) * 4) && reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(eax17 + reinterpret_cast<unsigned char>(esi14) * 4) + 12)) & 0x83) {
                v18 = *reinterpret_cast<void***>(eax17 + reinterpret_cast<unsigned char>(esi14) * 4);
                fun_1802ed24(ecx15, esi14, v18, v10, v8, v6, v5);
                eax19 = g18045ee0;
                ecx20 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax19 + reinterpret_cast<unsigned char>(esi14) * 4) + 12);
                if (*reinterpret_cast<unsigned char*>(&ecx20) & 0x83) {
                    if (!reinterpret_cast<int1_t>(a2 == 1)) {
                        if (!a2 && (*reinterpret_cast<unsigned char*>(&ecx20) & 2 && (v21 = *reinterpret_cast<void***>(eax19 + reinterpret_cast<unsigned char>(esi14) * 4), eax22 = fun_1802effc(v21), ecx20 = v21, eax22 == 0xffffffff))) {
                            edi13 = edi13 | eax22;
                        }
                    } else {
                        v23 = *reinterpret_cast<void***>(eax19 + reinterpret_cast<unsigned char>(esi14) * 4);
                        eax24 = fun_1802effc(v23);
                        ecx20 = v23;
                        if (eax24 != 0xffffffff) {
                            ++ebx12;
                        }
                    }
                }
                eax25 = g18045ee0;
                v26 = *reinterpret_cast<void***>(eax25 + reinterpret_cast<unsigned char>(esi14) * 4);
                fun_1802ed76(ecx20, esi14, v26, v10);
                ecx15 = v26;
            }
            ++esi14;
            less27 = reinterpret_cast<signed char>(esi14) < reinterpret_cast<signed char>(g18046f00);
        } while (less27);
    }
    fun_1802e960(ecx15, 2, v10, v8, v6, v5);
    eax28 = ebx12;
    if (a2 != 1) {
        eax28 = edi13;
    }
    return eax28;
}

uint32_t fun_1802f590(int32_t a1) {
    int32_t ebx2;
    uint32_t eax3;
    uint32_t ecx4;
    uint32_t edx5;
    uint32_t ecx6;

    ebx2 = a1;
    eax3 = 0;
    if (*reinterpret_cast<unsigned char*>(&ebx2) & 1) {
        eax3 = 16;
    }
    if (*reinterpret_cast<unsigned char*>(&ebx2) & 4) {
        *reinterpret_cast<unsigned char*>(&eax3) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax3) | 8);
    }
    if (*reinterpret_cast<unsigned char*>(&ebx2) & 8) {
        *reinterpret_cast<unsigned char*>(&eax3) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax3) | 4);
    }
    if (*reinterpret_cast<unsigned char*>(&ebx2) & 16) {
        *reinterpret_cast<unsigned char*>(&eax3) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax3) | 2);
    }
    if (*reinterpret_cast<unsigned char*>(&ebx2) & 32) {
        *reinterpret_cast<unsigned char*>(&eax3) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax3) | 1);
    }
    if (*reinterpret_cast<unsigned char*>(&ebx2) & 2) {
        eax3 = eax3 | 0x80000;
    }
    ecx4 = static_cast<uint32_t>(*reinterpret_cast<uint16_t*>(&ebx2));
    edx5 = ecx4 & 0xc00;
    if (edx5) {
        if (edx5 == 0x400) {
            *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax3) + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax3) + 1) | 1);
        } else {
            if (edx5 == 0x800) {
                eax3 = eax3 | 0x200;
            } else {
                if (edx5 == 0xc00) {
                    eax3 = eax3 | 0x300;
                }
            }
        }
    }
    ecx6 = ecx4 & 0x300;
    if (!ecx6) {
        eax3 = eax3 | 0x20000;
    } else {
        if (ecx6 == 0x200) {
            eax3 = eax3 | 0x10000;
        }
    }
    if (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&ebx2) + 1) & 16) {
        eax3 = eax3 | 0x40000;
    }
    return eax3;
}

void fun_18006c50(void** ecx) {
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034508);
    return;
}

void fun_1800b100(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40) {
    void** ecx41;
    void** eax42;
    void** esi43;

    ecx41 = *reinterpret_cast<void***>(ecx + 64);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034588);
    *reinterpret_cast<void***>(ecx + 52) = reinterpret_cast<void**>(0x1803455c);
    if (ecx41) {
        eax42 = *reinterpret_cast<void***>(ecx41);
        *reinterpret_cast<void***>(eax42)(1);
    }
    fun_1800ca40(ecx, esi43, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    return;
}

void fun_1800e8f0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40) {
    void** v41;
    void** v42;
    void** ebx43;
    void** ebx44;
    void** v45;
    void** esi46;
    void** v47;
    void** edi48;
    struct s257* esi49;
    int32_t edi50;
    void** eax51;
    void** edx52;
    void** eax53;
    void** edx54;
    void** eax55;
    void** edx56;
    void** esi57;
    int32_t edi58;
    void** esi59;
    int32_t edi60;
    void** esi61;
    int32_t edi62;
    void** esi63;
    int32_t edi64;
    void** esi65;
    int32_t edi66;
    void** esi67;
    int32_t edi68;

    v41 = reinterpret_cast<void**>(__return_address());
    v42 = ebx43;
    ebx44 = ecx;
    v45 = esi46;
    v47 = edi48;
    *reinterpret_cast<void***>(ebx44) = reinterpret_cast<void**>(0x18034778);
    esi49 = reinterpret_cast<struct s257*>(ebx44 + 0x564);
    edi50 = 2;
    do {
        if (*reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi49) - 8)) {
            eax51 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi49) - 8));
            *reinterpret_cast<void***>(eax51)(1);
        }
        if (esi49->f0) {
            edx52 = *reinterpret_cast<void***>(esi49->f0);
            *reinterpret_cast<void***>(edx52)(1);
        }
        if (esi49->f12) {
            eax53 = *reinterpret_cast<void***>(esi49->f12);
            *reinterpret_cast<void***>(eax53)(1);
        }
        if (esi49->f20) {
            edx54 = *reinterpret_cast<void***>(esi49->f20);
            *reinterpret_cast<void***>(edx54)(1);
        }
        if (esi49->f28) {
            eax55 = *reinterpret_cast<void***>(esi49->f28);
            *reinterpret_cast<void***>(eax55)(1);
        }
        esi49 = reinterpret_cast<struct s257*>(reinterpret_cast<uint32_t>(esi49) + 4);
        --edi50;
    } while (edi50);
    if (*reinterpret_cast<void***>(ebx44 + 0x56c)) {
        edx56 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx44 + 0x56c));
        *reinterpret_cast<void***>(edx56)(1);
    }
    fun_18019210(ebx44 + 0x534, v47, v45, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    fun_18019210(ebx44 + 0x50c, v47, v45, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    esi57 = ebx44 + 0x50c;
    edi58 = 2;
    do {
        esi57 = esi57 - 40;
        fun_18019210(esi57, v47, v45, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
        --edi58;
    } while (edi58);
    esi59 = ebx44 + 0x4bc;
    edi60 = 2;
    do {
        esi59 = esi59 - 40;
        fun_18019210(esi59, v47, v45, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
        --edi60;
    } while (edi60);
    esi61 = ebx44 + 0x46c;
    edi62 = 2;
    do {
        esi61 = esi61 - 40;
        fun_18019210(esi61, v47, v45, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
        --edi62;
    } while (edi62);
    esi63 = ebx44 + 0x41c;
    edi64 = 2;
    do {
        esi63 = esi63 - 40;
        fun_18019210(esi63, v47, v45, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
        --edi64;
    } while (edi64);
    esi65 = ebx44 + 0x3cc;
    edi66 = 2;
    do {
        esi65 = esi65 - 40;
        fun_18019210(esi65, v47, v45, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
        --edi66;
    } while (edi66);
    esi67 = ebx44 + 0x37c;
    edi68 = 2;
    do {
        esi67 = esi67 - 40;
        fun_18019210(esi67, v47, v45, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
        --edi68;
    } while (edi68);
    fun_18013090(ebx44, v47, v45, v42, v41, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    return;
}

int16_t fun_1801aca0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** eax45;
    void** esi46;
    void** ecx47;
    int16_t ax48;

    eax45 = *reinterpret_cast<void***>(ecx + 24);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034cac);
    fun_1802b2b0(ecx, eax45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    ecx47 = *reinterpret_cast<void***>(ecx + 20);
    ax48 = fun_1802b2b0(ecx47, ecx47, eax45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    return ax48;
}

int16_t fun_18022cd0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45) {
    void** eax46;
    int16_t ax47;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180350c8);
    eax46 = *reinterpret_cast<void***>(ecx + 28);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x1803554c);
    ax47 = fun_1802b2b0(ecx, eax46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45);
    return ax47;
}

void fun_180280d0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40) {
    void** esi41;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035328);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18035218);
    fun_18027a90(ecx, esi41, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    fun_180275f0(ecx);
    return;
}

void fun_18024b00(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42) {
    void** v43;
    void** v44;
    void** v45;
    void** ebp46;
    void** ebp47;
    void*** esp48;
    void** v49;
    void** esi50;
    void** eax51;
    void** eax52;
    void** v53;
    void** v54;
    void** ebx55;
    void** v56;
    void** edi57;
    void* esp58;
    void** edi59;
    void** esi60;
    void** v61;
    void** esi62;
    void** ebx63;
    void** v64;
    void** ecx65;
    void** eax66;
    void** v67;
    void** edx68;
    void** v69;
    void** v70;
    void** ebx71;
    void** eax72;
    void** eax73;
    void** edx74;
    void** edi75;
    void** ebx76;
    void** eax77;
    void*** esp78;
    void** eax79;
    void** ecx80;

    v43 = reinterpret_cast<void**>(__return_address());
    v44 = ecx;
    v45 = ebp46;
    ebp47 = ecx;
    esp48 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4);
    v49 = esi50;
    eax51 = *reinterpret_cast<void***>(ebp47 + 0xa0);
    *reinterpret_cast<void***>(ebp47) = reinterpret_cast<void**>(0x180351c4);
    if (eax51) {
        eax52 = reinterpret_cast<void**>(CreateEventA(0, 0, 0, 0));
        *reinterpret_cast<void***>(ebp47 + 0xa4) = eax52;
        WaitForSingleObject(eax52, 0x1388, 0, 0, 0, 0);
        v53 = *reinterpret_cast<void***>(ebp47 + 0xa4);
        CloseHandle(v53, eax52, 0x1388, 0, 0, 0, 0);
        esp48 = esp48 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4;
    }
    v54 = ebx55;
    v56 = edi57;
    fun_18025630(ebp47, v56);
    esp58 = reinterpret_cast<void*>(esp48 - 4 - 4 - 4 + 4);
    edi59 = ebp47 + 0xc0;
    if (*reinterpret_cast<void***>(ebp47 + 0xc0)) {
        do {
            esi60 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebp47 + 0xc4) + 8);
            v61 = *reinterpret_cast<void***>(edi59 + 4);
            fun_180091b0(edi59, reinterpret_cast<int32_t>(esp58) + 16, v61);
            esp58 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp58) - 4 - 4 - 4 + 8 + 4);
            if (esi60) {
                fun_180264a0(esi60);
                fun_1802b2b0(esi60, esi60, v56, v54, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
                esp58 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp58) - 4 + 4 - 4 - 4 + 4 + 4);
            }
        } while (*reinterpret_cast<void***>(edi59));
    }
    esi62 = ebp47 + 0xac;
    if (*reinterpret_cast<void***>(ebp47 + 0xac)) {
        do {
            ebx63 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebp47 + 0xb0) + 8);
            v64 = *reinterpret_cast<void***>(esi62 + 4);
            fun_180091b0(esi62, reinterpret_cast<int32_t>(esp58) + 16, v64);
            esp58 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp58) - 4 - 4 - 4 + 8 + 4);
            if (ebx63) {
                fun_18025e50(ebx63);
                fun_1802b2b0(ebx63, ebx63, v56, v54, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
                esp58 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp58) - 4 + 4 - 4 - 4 + 4 + 4);
            }
        } while (*reinterpret_cast<void***>(esi62));
    }
    ecx65 = *reinterpret_cast<void***>(ebp47 + 0x70);
    eax66 = ecx65;
    if (eax66) {
        if (!(eax66 - 1)) {
            v67 = *reinterpret_cast<void***>(ebp47 + 0x78);
            fun_180323c0(ecx65, 0x18043db0, v67, v56, v54, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8);
            esp58 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp58) - 4 - 4 - 4 + 4 + 8);
        } else {
            __asm__("cdq ");
            edx68 = *reinterpret_cast<void***>(ebp47 + 0x74);
            v69 = reinterpret_cast<void**>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(ebp47 + 0x7c)) / reinterpret_cast<signed char>(ecx65));
            v70 = *reinterpret_cast<void***>(ebp47 + 0x78);
            fun_180323c0(ecx65, 0x18043dd4, ecx65, edx68, v70, v69, v56, v54, v49, v45, v44, v43, a2, a3, a4, a5);
            esp58 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp58) - 4 - 4 - 4 - 4 - 4 - 4 + 4 + 20);
        }
    }
    ebx71 = *reinterpret_cast<void***>(edi59 + 4);
    if (ebx71 != edi59 + 4) {
        do {
            eax72 = ebx71;
            ebx71 = *reinterpret_cast<void***>(ebx71);
            ecx65 = edi59;
            fun_180091b0(ecx65, reinterpret_cast<int32_t>(esp58) + 16, eax72);
            esp58 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp58) - 4 - 4 - 4 + 8 + 4);
        } while (ebx71 != edi59 + 4);
    }
    eax73 = *reinterpret_cast<void***>(edi59 + 16);
    if (eax73) {
        do {
            edx74 = *reinterpret_cast<void***>(eax73);
            *reinterpret_cast<void***>(edi59 + 16) = edx74;
            fun_1802b2b0(ecx65, eax73, v56, v54, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
            eax73 = *reinterpret_cast<void***>(edi59 + 16);
            esp58 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp58) - 4 - 4 + 4 + 4);
        } while (eax73);
    }
    edi75 = *reinterpret_cast<void***>(esi62 + 4);
    ebx76 = esi62 + 4;
    if (edi75 != ebx76) {
        do {
            eax77 = edi75;
            edi75 = *reinterpret_cast<void***>(edi75);
            esp78 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp58) - 4);
            fun_180091b0(esi62, esp78 + 20, eax77);
            esp58 = reinterpret_cast<void*>(esp78 - 4 - 4 + 8 + 4);
        } while (edi75 != ebx76);
    }
    eax79 = *reinterpret_cast<void***>(esi62 + 16);
    if (eax79) {
        do {
            ecx80 = *reinterpret_cast<void***>(eax79);
            *reinterpret_cast<void***>(esi62 + 16) = ecx80;
            fun_1802b2b0(ecx80, eax79, v49, v45, v44, v43, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
            eax79 = *reinterpret_cast<void***>(esi62 + 16);
        } while (eax79);
    }
    fun_18024920(ebp47);
    return;
}

int16_t QSWaveMixFlushChannel(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22) {
    void** v23;
    void** v24;
    void** esi25;
    void** v26;
    void** edi27;
    void** edi28;
    int16_t ax29;
    void** esi30;
    void** eax31;
    void** eax32;

    v23 = reinterpret_cast<void**>(__return_address());
    v24 = esi25;
    v26 = edi27;
    edi28 = a1;
    ax29 = fun_180010c0(edi28);
    if (!*reinterpret_cast<signed char*>(&ax29)) {
        fun_1800a1e0(edi28);
        if (!(*reinterpret_cast<unsigned char*>(&a3) & 1)) {
            esi30 = a2;
            *reinterpret_cast<int16_t*>(&eax31) = fun_18009c50(edi28, esi30);
            if (1) {
                fun_18007520(eax31, v26, v24, v23, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
            } else {
                fun_18009260(edi28, 10, v26);
                fun_1800a200(edi28);
                return 11;
            }
        } else {
            esi30 = reinterpret_cast<void**>(1);
            *reinterpret_cast<int16_t*>(&eax32) = fun_18009c50(edi28, 0);
            if (!0) {
                do {
                    if (*reinterpret_cast<void***>(eax32 + 0x2c4)) {
                        fun_18007520(eax32, v26, v24, v23, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
                    }
                    eax32 = esi30;
                    ++esi30;
                    *reinterpret_cast<int16_t*>(&eax32) = fun_18009c50(edi28, eax32);
                } while (eax32);
            }
        }
        fun_180061a0(edi28, esi30);
        fun_1800a200(edi28);
        return 0;
    } else {
        return 5;
    }
}

void fun_18003358(signed char* ecx, int32_t a2, int32_t a3, int32_t a4, int16_t a5);

int16_t QSWaveMixOpenWave(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12) {
    void** v13;
    void** ebx14;
    void** v15;
    void** esi16;
    void*** esp17;
    void** v18;
    void** edi19;
    void* edi20;
    void** eax21;
    void** v22;
    void** v23;
    void** v24;
    void** v25;
    void** ebx26;
    void* esp27;
    void* esp28;
    void** v29;
    void*** esp30;
    void** v31;
    void** v32;
    signed char* edi33;
    uint32_t ecx34;
    uint32_t ecx35;
    uint32_t eax36;
    uint32_t ecx37;
    void** ecx38;
    void** edx39;
    int32_t eax40;
    int32_t v41;
    void** v42;
    signed char al43;
    void* esp44;
    void** eax45;
    void** eax46;
    void** edx47;
    void** eax48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void* esp53;
    void** edi54;
    signed char al55;
    void** ecx56;
    void** edx57;
    void** eax58;
    void* esp59;
    void*** esp60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** ecx66;

    v13 = ebx14;
    v15 = esi16;
    esp17 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 16 - 4 - 4 - 4);
    v18 = edi19;
    if (!a3) {
        fun_18009260(ecx, 50, v18);
        return 0;
    }
    edi20 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a5) & 0xff);
    eax21 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(edi20) + 0xffffffff);
    if (reinterpret_cast<unsigned char>(eax21) > reinterpret_cast<unsigned char>(17)) 
        goto addr_0x1800329c_4;
    ecx = reinterpret_cast<void**>(0);
    *reinterpret_cast<signed char*>(&ecx) = *reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(eax21) + reinterpret_cast<uint32_t>(fun_18003358));
    switch (ecx) {
    case 0:
        if (*reinterpret_cast<void***>(a3)) {
            *reinterpret_cast<int16_t*>(&eax21) = fun_18022e60(ecx, a3, esp17 + 36, v18, v15, v13, v22, v23, v24, v25, __return_address(), a2, 0, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            ebx26 = eax21;
            esp27 = reinterpret_cast<void*>(esp17 - 4 - 4 - 4 + 8 + 4 - 4);
            fun_18003370(ecx, reinterpret_cast<int32_t>(esp27) + 16, a3, 16);
            esp28 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp27) - 4 - 4 - 4 + 12 + 4);
            break;
        } else {
            fun_18009260(ecx, 16, v18);
            return 0;
        }
    case 1:
        ecx = reinterpret_cast<void**>(esp17 + 36);
        *reinterpret_cast<int16_t*>(&eax21) = fun_18023870(a3, a4, ecx);
        ebx26 = eax21;
        v29 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a3) & 0xffff);
        esp30 = esp17 - 4 - 4 - 4 - 4 + 12 + 4 - 4 - 4;
        v31 = reinterpret_cast<void**>(0x18038050);
        goto addr_0x18003233_10;
    case 2:
        *reinterpret_cast<int16_t*>(&eax21) = fun_18023a90(a3, esp17 + 36, v18, v15, v13, v32);
        esp28 = reinterpret_cast<void*>(esp17 - 4 - 4 - 4 + 8 + 4);
        ebx26 = eax21;
        edi33 = reinterpret_cast<signed char*>(0x18045870);
        ecx34 = 0xffffffff;
        do {
            if (!ecx34) 
                break;
            --ecx34;
            ++edi33;
        } while (*edi33);
        ecx35 = ~ecx34;
        eax36 = ecx35;
        ecx37 = ecx35 >> 2;
        while (ecx37) {
            --ecx37;
        }
        ecx = reinterpret_cast<void**>(eax36 & 3);
        while (ecx) {
            --ecx;
        }
        break;
    case 3:
        ecx38 = *reinterpret_cast<void***>(a3 + 8);
        edx39 = *reinterpret_cast<void***>(a3 + 4);
        v29 = ecx38;
        v31 = edx39;
        eax40 = reinterpret_cast<int32_t>(IsBadReadPtr());
        if (eax40) {
            fun_18009260(ecx38, 32, v31);
            goto v41;
        }
        v42 = *reinterpret_cast<void***>(a3);
        al43 = fun_18001350(ecx38, v42);
        esp44 = reinterpret_cast<void*>(esp17 - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4);
        if (al43) {
            addr_0x1800332d_24:
            eax45 = reinterpret_cast<void**>(0);
            goto addr_0x1800332f_25;
        } else {
            if (!reinterpret_cast<int1_t>(edi20 == 9)) {
                eax46 = reinterpret_cast<void**>(0);
            } else {
                eax46 = *reinterpret_cast<void***>(a3 + 14);
            }
            edx47 = *reinterpret_cast<void***>(a3);
            ecx = *reinterpret_cast<void***>(a3 + 4);
            eax48 = *reinterpret_cast<void***>(a3 + 8);
            *reinterpret_cast<int16_t*>(&eax48) = fun_18023a30(ecx, ecx, eax48, edx47, eax46, reinterpret_cast<int32_t>(esp44) + 36, v31, v29, v18, v15, v13, v49, v50, v51, v52, __return_address());
            ebx26 = eax48;
            esp30 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp44) - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4 - 4 - 4);
            goto addr_0x18003233_10;
        }
    case 4:
        if (*reinterpret_cast<void***>(a3)) {
            ecx = reinterpret_cast<void**>(esp17 + 36);
            *reinterpret_cast<int16_t*>(&eax21) = fun_18023110(a3, ecx);
            esp53 = reinterpret_cast<void*>(esp17 - 4 - 4 - 4 + 8 + 4 - 4);
            ebx26 = eax21;
            fun_18003370(ecx, reinterpret_cast<int32_t>(esp53) + 16, a3, 16);
            esp28 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp53) - 4 - 4 - 4 + 12 + 4);
            break;
        } else {
            fun_18009260(ecx, 16, v18);
            return 0;
        }
    case 5:
        edi54 = *reinterpret_cast<void***>(a3);
        al55 = fun_18001350(ecx, edi54);
        esp17 = esp17 - 4 - 4 + 4 + 4;
        if (!al55) {
            ecx56 = *reinterpret_cast<void***>(a3 + 12);
            edx57 = *reinterpret_cast<void***>(a3 + 8);
            eax58 = *reinterpret_cast<void***>(a3 + 4);
            *reinterpret_cast<int16_t*>(&eax58) = fun_18022d70(ecx56, eax58, edi54, 0, edx57, ecx56, esp17 + 36);
            esp59 = reinterpret_cast<void*>(esp17 - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 24 + 4);
            ecx = reinterpret_cast<void**>(0);
            ecx = *reinterpret_cast<void***>(a3 + 16);
            ebx26 = eax58;
            v29 = ecx;
            v31 = reinterpret_cast<void**>(0x18038040);
            esp60 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp59) - 4 - 4 - 4);
            v61 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp59) + 12);
            goto addr_0x18003238_35;
        } else {
            addr_0x1800329c_4:
        case 7:
            fun_18009260(ecx, 50, v18);
            return 0;
        }
    case 6:
        fun_18009260(ecx, 33, v18);
        return 0;
    }
    addr_0x18003240_37:
    if (ebx26) {
        fun_18009260(ecx, ebx26, v18);
        return 0;
    }
    eax45 = fun_1802b2bb(ecx, 72, v18, v15, v13, v62, v63, v64, v65);
    if (!eax45 || (*reinterpret_cast<int16_t*>(&eax45) = fun_1800cd70(eax45, 0, reinterpret_cast<int32_t>(esp28) - 4 - 4 + 4 + 4 + 12), !eax45)) {
        ecx66 = *reinterpret_cast<void***>(&g0);
        *reinterpret_cast<void***>(ecx66 + 8)(0);
        fun_18009260(ecx66, 4, 0);
        goto addr_0x1800332d_24;
    } else {
        addr_0x1800332f_25:
        return *reinterpret_cast<int16_t*>(&eax45);
    }
    addr_0x18003233_10:
    esp60 = esp30 - 4;
    v61 = reinterpret_cast<void**>(esp30 + 20);
    addr_0x18003238_35:
    fun_1802b2c9(v61, v31, v29);
    esp28 = reinterpret_cast<void*>(esp60 - 4 + 4 + 12);
    goto addr_0x18003240_37;
}

void fun_18003358(signed char* ecx, int32_t a2, int32_t a3, int32_t a4, int16_t a5) {
    signed char al6;

    *ecx = reinterpret_cast<signed char>(*ecx + al6);
}

signed char g90909006;

void fun_18003628(signed char* ecx, int32_t a2, int32_t a3, int32_t a4, int16_t a5) {
    signed char al6;
    signed char al7;
    signed char* ebx8;
    void** edi9;
    void** v10;
    int16_t ax11;
    unsigned char v12;
    void** eax13;
    void** v14;
    void** edi15;
    int32_t v16;
    void** esi17;
    void** eax18;
    int32_t v19;
    int32_t v20;
    int32_t v21;

    *ecx = reinterpret_cast<signed char>(*ecx + al6);
    g90909006 = reinterpret_cast<signed char>(g90909006 + reinterpret_cast<signed char>(reinterpret_cast<signed char>(al7 + *ebx8) + 7));
    edi9 = v10;
    ax11 = fun_180010c0(edi9);
    if (!*reinterpret_cast<signed char*>(&ax11)) {
        fun_1800a1e0(edi9);
        if (!(v12 & 1)) {
            eax13 = v14;
            *reinterpret_cast<int16_t*>(&eax13) = fun_18009c50(edi9, eax13);
            if (eax13) {
                fun_18007460(eax13);
            } else {
                fun_18009260(edi9, 10, edi15);
                fun_1800a200(edi9);
                goto v16;
            }
        } else {
            esi17 = reinterpret_cast<void**>(1);
            *reinterpret_cast<int16_t*>(&eax18) = fun_18009c50(edi9, 0);
            if (!0) {
                do {
                    fun_18007460(eax18);
                    eax18 = esi17;
                    ++esi17;
                    *reinterpret_cast<int16_t*>(&eax18) = fun_18009c50(edi9, eax18);
                } while (eax18);
                fun_1800a200(edi9);
                goto v19;
            }
        }
        fun_1800a200(edi9);
        goto v20;
    } else {
        goto v21;
    }
}

void fun_180056b4(signed char* ecx, int32_t a2, int32_t a3, int16_t a4) {
    signed char al5;

    *ecx = reinterpret_cast<signed char>(*ecx + al5);
}

int32_t fun_180069d0(struct s32** a1, struct s33** a2) {
    int32_t ecx3;
    int32_t ecx4;
    uint1_t less5;
    int32_t eax6;
    int32_t eax7;

    ecx3 = (*a1)->f508 - (*a2)->f508;
    if (!ecx3) {
        ecx4 = (*a1)->f916 - (*a2)->f916;
        less5 = reinterpret_cast<uint1_t>(ecx4 < 0);
        if (less5 | reinterpret_cast<uint1_t>(ecx4 == 0)) {
            if (!less5) {
                return reinterpret_cast<int32_t>(*a1) - reinterpret_cast<int32_t>(*a2) >> 10;
            } else {
                return 1;
            }
        } else {
            return -1;
        }
    } else {
        eax6 = 0;
        *reinterpret_cast<unsigned char*>(&eax6) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(ecx3 < 0) | reinterpret_cast<uint1_t>(ecx3 == 0)));
        eax7 = eax6 - 1;
        *reinterpret_cast<unsigned char*>(&eax7) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax7) & 0xfe);
        return eax7 + 1;
    }
}

void fun_1800b9a8(signed char* ecx) {
    signed char al2;

    *ecx = reinterpret_cast<signed char>(*ecx + al2);
}

void fun_18011eec(struct s0* ecx, int32_t a2, struct s3* a3, uint32_t a4, uint32_t* a5) {
    int32_t eax6;
    int32_t eax7;
    signed char al8;
    int32_t eax9;
    signed char al10;
    int32_t edx11;
    int32_t edx12;
    struct s2* eax13;

    *reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(__zero_stack_offset()) + eax6) = reinterpret_cast<signed char>(*reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(__zero_stack_offset()) + eax7) + al8);
    *reinterpret_cast<signed char*>(&eax9) = reinterpret_cast<signed char>(reinterpret_cast<signed char>(al10 + 4) + 4);
    *reinterpret_cast<int32_t*>(edx11 + eax9) = *reinterpret_cast<int32_t*>(edx12 + eax9) + eax9;
    if (a2 == 9) {
        eax13 = ecx->f2692;
        eax13->f8();
        goto 9;
    } else {
        fun_180134b0(ecx, a2, a3, a4, a5);
        return;
    }
}

struct s305 {
    signed char[12] pad12;
    void** f12;
    signed char[3] pad16;
    void** f16;
};

void fun_180128c0(struct s305* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17) {
    void** eax18;
    void** esi19;

    eax18 = ecx->f12;
    *reinterpret_cast<int16_t*>(&eax18) = fun_1800da70(a2, a2, eax18, 0x3e8, esi19, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
    ecx->f16 = eax18;
    return;
}

struct s306 {
    signed char[1] pad1;
    signed char f1;
};

struct s307 {
    signed char[1] pad1;
    signed char f1;
};

struct s308 {
    signed char[2] pad2;
    signed char f2;
};

struct s309 {
    signed char[2] pad2;
    signed char f2;
};

struct s310 {
    signed char[3] pad3;
    int32_t f3;
};

struct s311 {
    signed char[3] pad3;
    int32_t f3;
};

void fun_1802b990(uint32_t ecx) {
    uint32_t edx2;
    uint32_t edx3;
    signed char* edi4;
    signed char* esi5;
    struct s306* edi6;
    struct s307* esi7;
    uint32_t ecx8;
    struct s308* edi9;
    struct s309* esi10;
    int32_t* esi11;
    struct s310* esi12;
    int32_t* edi13;
    struct s311* edi14;

    edx2 = edx3 & ecx;
    *edi4 = *esi5;
    edi6->f1 = esi7->f1;
    ecx8 = ecx >> 2;
    edi9->f2 = esi10->f2;
    esi11 = &esi12->f3;
    edi13 = &edi14->f3;
    if (ecx8 < 8) 
        goto 0x1802b97c;
    while (ecx8) {
        --ecx8;
        *edi13 = *esi11;
        ++edi13;
        ++esi11;
    }
    switch (edx2) {
    case 3:
        goto 0x1802baa0;
    case 2:
        goto 0x1802ba8c;
    case 1:
        goto 0x1802ba80;
    case 0:
        goto 0x1802ba78;
    }
}

struct s312 {
    signed char[3] pad3;
    signed char f3;
};

struct s313 {
    signed char[3] pad3;
    signed char f3;
};

void fun_1802bb18(uint32_t ecx) {
    uint32_t edx2;
    uint32_t edx3;
    struct s312* edi4;
    struct s313* esi5;
    int32_t* esi6;
    void* esi7;
    uint32_t ecx8;
    int32_t* edi9;
    void* edi10;

    edx2 = edx3 & ecx;
    edi4->f3 = esi5->f3;
    esi6 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi7) - 1);
    ecx8 = ecx >> 2;
    edi9 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi10) - 1);
    if (ecx8 < 8) 
        goto 0x1802bae0;
    while (ecx8) {
        --ecx8;
        *edi9 = *esi6;
        --edi9;
        --esi6;
    }
    switch (edx2) {
    case 3:
        goto 0x1802bc3c;
    case 2:
        goto 0x1802bc28;
    case 1:
        goto 0x1802bc18;
    case 0:
        goto 0x1802bc10;
    }
}

void fun_1802bbb4(int32_t ecx) {
    void* edi2;
    void* esi3;
    void* edi4;
    void* esi5;
    void* edi6;
    void* esi7;
    void* edi8;
    void* esi9;
    void* edi10;
    void* esi11;
    void* edi12;
    void* esi13;
    void* edi14;
    void* esi15;

    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi2) + ecx * 4 + 28) = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi3) + ecx * 4 + 28);
    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi4) + ecx * 4 + 24) = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi5) + ecx * 4 + 24);
    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi6) + ecx * 4 + 20) = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi7) + ecx * 4 + 20);
    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi8) + ecx * 4 + 16) = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi9) + ecx * 4 + 16);
    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi10) + ecx * 4 + 12) = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi11) + ecx * 4 + 12);
    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi12) + ecx * 4 + 8) = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi13) + ecx * 4 + 8);
    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi14) + ecx * 4 + 4) = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi15) + ecx * 4 + 4);
}

struct s314 {
    signed char[1] pad1;
    signed char f1;
};

struct s315 {
    signed char[1] pad1;
    signed char f1;
};

struct s316 {
    signed char[2] pad2;
    signed char f2;
};

struct s317 {
    signed char[2] pad2;
    signed char f2;
};

struct s318 {
    signed char[3] pad3;
    int32_t f3;
};

struct s319 {
    signed char[3] pad3;
    int32_t f3;
};

void fun_1802f280(uint32_t ecx) {
    uint32_t edx2;
    uint32_t edx3;
    signed char* edi4;
    signed char* esi5;
    struct s314* edi6;
    struct s315* esi7;
    uint32_t ecx8;
    struct s316* edi9;
    struct s317* esi10;
    int32_t* esi11;
    struct s318* esi12;
    int32_t* edi13;
    struct s319* edi14;

    edx2 = edx3 & ecx;
    *edi4 = *esi5;
    edi6->f1 = esi7->f1;
    ecx8 = ecx >> 2;
    edi9->f2 = esi10->f2;
    esi11 = &esi12->f3;
    edi13 = &edi14->f3;
    if (ecx8 < 8) 
        goto 0x1802f26c;
    while (ecx8) {
        --ecx8;
        *edi13 = *esi11;
        ++edi13;
        ++esi11;
    }
    switch (edx2) {
    case 3:
        goto 0x1802f390;
    case 2:
        goto 0x1802f37c;
    case 1:
        goto 0x1802f370;
    case 0:
        goto 0x1802f368;
    }
}

struct s320 {
    signed char[3] pad3;
    signed char f3;
};

struct s321 {
    signed char[3] pad3;
    signed char f3;
};

void fun_1802f408(uint32_t ecx) {
    uint32_t edx2;
    uint32_t edx3;
    struct s320* edi4;
    struct s321* esi5;
    int32_t* esi6;
    void* esi7;
    uint32_t ecx8;
    int32_t* edi9;
    void* edi10;

    edx2 = edx3 & ecx;
    edi4->f3 = esi5->f3;
    esi6 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi7) - 1);
    ecx8 = ecx >> 2;
    edi9 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi10) - 1);
    if (ecx8 < 8) 
        goto 0x1802f3d0;
    while (ecx8) {
        --ecx8;
        *edi9 = *esi6;
        --edi9;
        --esi6;
    }
    switch (edx2) {
    case 3:
        goto 0x1802f52c;
    case 2:
        goto 0x1802f518;
    case 1:
        goto 0x1802f508;
    case 0:
        goto 0x1802f500;
    }
}

void fun_1802f4a4(int32_t ecx) {
    void* edi2;
    void* esi3;
    void* edi4;
    void* esi5;
    void* edi6;
    void* esi7;
    void* edi8;
    void* esi9;
    void* edi10;
    void* esi11;
    void* edi12;
    void* esi13;
    void* edi14;
    void* esi15;

    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi2) + ecx * 4 + 28) = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi3) + ecx * 4 + 28);
    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi4) + ecx * 4 + 24) = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi5) + ecx * 4 + 24);
    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi6) + ecx * 4 + 20) = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi7) + ecx * 4 + 20);
    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi8) + ecx * 4 + 16) = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi9) + ecx * 4 + 16);
    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi10) + ecx * 4 + 12) = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi11) + ecx * 4 + 12);
    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi12) + ecx * 4 + 8) = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi13) + ecx * 4 + 8);
    *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi14) + ecx * 4 + 4) = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi15) + ecx * 4 + 4);
}

void fun_18032e2c(uint32_t ecx) {
    signed char* ebx2;
    signed char* ebx3;
    uint32_t* ecx4;
    uint32_t* ebx5;
    uint32_t eax6;
    uint32_t eax7;
    uint32_t ecx8;
    uint32_t* ebx9;
    uint32_t* ebx10;
    signed char* ebx11;
    unsigned char* eax12;
    uint32_t ecx13;
    uint32_t* ebx14;
    uint32_t* ebx15;
    uint32_t* ebx16;
    uint32_t* ebx17;
    uint32_t* ebx18;
    unsigned char* ebx19;
    unsigned char* ebx20;
    unsigned char* eax21;
    uint32_t* edi22;
    uint32_t ecx23;
    uint32_t* ebx24;
    uint32_t* ebx25;
    uint32_t* ebx26;
    uint32_t* ebx27;
    uint32_t* ebx28;
    uint32_t* ebx29;
    uint32_t* ebx30;
    uint32_t* ebx31;
    uint32_t* ebx32;
    uint32_t* ebx33;
    uint32_t* ebx34;
    uint32_t* ebx35;
    uint32_t* edi36;
    uint32_t* edi37;
    unsigned char* ebx38;
    unsigned char* ebx39;

    *ebx2 = reinterpret_cast<signed char>(*ebx3 + *reinterpret_cast<signed char*>(&ecx));
    ecx4 = reinterpret_cast<uint32_t*>(ecx | *ebx5);
    eax6 = eax7 | *ecx4;
    ecx8 = reinterpret_cast<uint32_t>(ecx4) | *ebx9 | *ebx10;
    *reinterpret_cast<signed char*>(&eax6) = reinterpret_cast<signed char>(*reinterpret_cast<signed char*>(&eax6) + *ebx11);
    eax12 = reinterpret_cast<unsigned char*>(eax6 | *reinterpret_cast<uint32_t*>(eax6 + 0x606060b));
    ecx13 = ecx8 | *ebx14 | *ebx15 | *ebx16 | *ebx17 | *ebx18;
    *eax12 = reinterpret_cast<unsigned char>(*eax12 | *reinterpret_cast<unsigned char*>(&ecx13));
    *ebx19 = reinterpret_cast<unsigned char>(*ebx20 | *reinterpret_cast<unsigned char*>(&ecx13));
    eax21 = reinterpret_cast<unsigned char*>(reinterpret_cast<uint32_t>(eax12) | *edi22);
    ecx23 = ecx13 | *ebx24 | *ebx25 | *ebx26 | *ebx27 | *ebx28 | *ebx29 | *ebx30 | *ebx31 | *ebx32 | *ebx33 | *ebx34 | *ebx35;
    *edi36 = *edi37 | reinterpret_cast<uint32_t>(eax21);
    *eax21 = reinterpret_cast<unsigned char>(*eax21 | *reinterpret_cast<unsigned char*>(&ecx23));
    *ebx38 = reinterpret_cast<unsigned char>(*ebx39 | *reinterpret_cast<unsigned char*>(&ecx23));
}

int16_t QSWaveMixConfigureChannel(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35) {
    int16_t ax36;
    signed char al37;
    void** edi38;
    void** eax39;
    uint32_t esi40;
    uint32_t edx41;
    void** esi42;
    void** ebx43;

    ax36 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax36)) {
        al37 = fun_18001350(ecx, a5);
        if (al37 || a5 && !reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a5) == 1)) {
            fun_18009260(ecx, 50, edi38);
            return 11;
        } else {
            fun_1800a1e0(a2);
            eax39 = a3;
            *reinterpret_cast<int16_t*>(&eax39) = fun_18009c50(a2, eax39);
            if (eax39) {
                esi40 = reinterpret_cast<unsigned char>(a4) & 0x7f000000;
                edx41 = reinterpret_cast<unsigned char>(a4) & 0xff0000;
                if (!edx41) {
                    edx41 = 0xff0000;
                }
                if (!esi40) {
                    esi40 = 0x7f000000;
                }
                fun_18007140(eax39, esi40 | edx41, a5, esi42, edi38, ebx43, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35);
                fun_1800a200(a2);
                return 0;
            } else {
                fun_18009260(a2, 10, edi38);
                fun_1800a200(a2);
                return 11;
            }
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixEnable(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26) {
    int16_t ax27;

    ax27 = QSWaveMixEnableChannel(a1, 0, 1, a2, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
    return ax27;
}

int16_t QSWaveMixGetChorus(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26) {
    void** v27;
    void** v28;
    void** ebx29;
    void** ebx30;
    void** v31;
    void** edi32;
    int16_t ax33;
    void** edi34;
    void** v35;
    int32_t eax36;
    void* esp37;
    void** eax38;
    void** eax39;
    void** v40;
    void** v41;
    int32_t eax42;
    void** eax43;
    void** v44;
    void*** esp45;
    void** v46;
    void** esi47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void* esp58;
    int32_t ecx59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    int32_t v71;
    int32_t v72;

    v27 = reinterpret_cast<void**>(__return_address());
    v28 = ebx29;
    ebx30 = a2;
    v31 = edi32;
    ax33 = fun_180010c0(ebx30);
    if (!*reinterpret_cast<signed char*>(&ax33)) {
        edi34 = a4;
        if (edi34 && (v35 = edi34, eax36 = reinterpret_cast<int32_t>(IsBadReadPtr(v35, 4)), esp37 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 + 4), !eax36)) {
            eax38 = *reinterpret_cast<void***>(edi34);
            eax39 = edi34;
            if (reinterpret_cast<unsigned char>(eax38) > reinterpret_cast<unsigned char>(36)) {
                eax39 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp37) + 56);
            }
            v40 = *reinterpret_cast<void***>(eax39);
            v41 = edi34;
            eax42 = reinterpret_cast<int32_t>(IsBadWritePtr());
            esp37 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp37) - 4 - 4 - 4 + 4);
            if (!eax42) {
                fun_1800a1e0(ebx30);
                eax43 = v44;
                *reinterpret_cast<int16_t*>(&eax43) = fun_18009c50(ebx30, eax43);
                if (eax43) {
                    esp45 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp37) - 4 + 4 - 4 - 4 + 4 + 4 - 4);
                    v46 = esi47;
                    fun_180085a0(eax43, esp45 + 12, 16, v46, v41, v40, v35, 4, v31, v28, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, 36, v27, a2, a3, a4, a5, a6);
                    esp58 = reinterpret_cast<void*>(esp45 - 4 - 4 - 4 + 8 + 4);
                    ecx59 = 9;
                    while (ecx59) {
                        --ecx59;
                        *reinterpret_cast<void***>(edi34) = v60;
                        edi34 = edi34 + 4;
                    }
                    fun_1800c670(reinterpret_cast<int32_t>(esp58) + 12, v46, v41, v40, v35, 4, v31, v28, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, 36, v27, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
                    fun_1800a200(ebx30);
                    goto v71;
                } else {
                    fun_18009260(ebx30, 10, v41);
                    fun_1800a200(ebx30);
                    goto v72;
                }
            }
        }
        fun_18009260(ecx, 50, v31);
        return 11;
    } else {
        return 5;
    }
}

struct s322 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
    signed char[3] pad16;
    void** f16;
};

int16_t QSWaveMixOpenWaveEx(void** ecx, void** a2, struct s322* a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13) {
    void** v14;
    void** v15;
    void** ebx16;
    void*** esp17;
    void** v18;
    void** esi19;
    void** eax20;
    void** ecx21;
    int32_t edx22;
    void** ecx23;
    void** v24;
    void** v25;
    void** v26;
    void** v27;
    void* esp28;
    void** ebx29;
    void** eax30;
    void* esp31;
    void** ecx32;
    void* esp33;
    void** ecx34;
    void** edx35;
    void** eax36;
    void* esp37;
    void** eax38;
    void** v39;
    void** v40;
    void*** esp41;
    void** v42;
    void** eax43;
    void** edi44;
    void** v45;
    void* esp46;
    signed char* edi47;
    uint32_t ecx48;
    uint32_t ecx49;
    uint32_t eax50;
    uint32_t ecx51;
    void** eax52;
    void** ecx53;
    void** edx54;
    void** eax55;
    void* esp56;
    void** ecx57;
    void** edx58;
    int32_t eax59;
    int32_t v60;
    void** v61;
    signed char al62;
    void* esp63;
    void** eax64;
    void** edx65;
    void** eax66;
    void** ecx67;
    void** edx68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void*** esp73;
    void** v74;
    signed char al75;
    void** ecx76;
    void** edx77;
    void** eax78;
    void*** esp79;
    void** v80;
    void** v81;
    void** v82;
    void** v83;
    void** ecx84;

    v14 = reinterpret_cast<void**>(__return_address());
    v15 = ebx16;
    esp17 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 16 - 4 - 4);
    v18 = esi19;
    if (!a3) {
        fun_18009260(ecx, 50, v18);
        return 0;
    }
    eax20 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a4) & 0xff);
    ecx21 = eax20 + 0xffffffff;
    if (reinterpret_cast<unsigned char>(ecx21) > reinterpret_cast<unsigned char>(17)) 
        goto addr_0x180035b2_4;
    edx22 = 0;
    *reinterpret_cast<signed char*>(&edx22) = *reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(ecx21) + reinterpret_cast<uint32_t>(fun_18003628));
    switch (edx22) {
    case 0:
        ecx23 = a3->f0;
        if (*reinterpret_cast<void***>(ecx23)) {
            if (!reinterpret_cast<int1_t>(eax20 == 16)) {
                *reinterpret_cast<int16_t*>(&eax20) = fun_18022e60(ecx23, ecx23, esp17 + 32, v18, v15, v24, v25, v26, v27, v14, a2, 0, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
                esp28 = reinterpret_cast<void*>(esp17 - 4 - 4 - 4 + 8 + 4);
            } else {
                eax20 = reinterpret_cast<void**>(esp17 + 32);
                *reinterpret_cast<int16_t*>(&eax20) = fun_18023110(ecx23, eax20);
                esp28 = reinterpret_cast<void*>(esp17 - 4 - 4 - 4 + 8 + 4);
            }
            ebx29 = eax20;
            eax30 = a3->f0;
            esp31 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp28) - 4);
            ecx32 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp31) + 12);
            fun_18003370(ecx32, ecx32, eax30, 16);
            esp33 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp31) - 4 - 4 - 4 + 12 + 4);
            goto addr_0x18003486_11;
        } else {
            fun_18009260(ecx23, 16, v18);
            return 0;
        }
    case 1:
        ecx34 = a3->f4;
        edx35 = a3->f0;
        eax36 = reinterpret_cast<void**>(esp17 + 32);
        *reinterpret_cast<int16_t*>(&eax36) = fun_18023870(edx35, ecx34, eax36);
        esp37 = reinterpret_cast<void*>(esp17 - 4 - 4 - 4 - 4 + 12 + 4);
        ebx29 = eax36;
        eax38 = reinterpret_cast<void**>(0);
        eax38 = a3->f0;
        ecx32 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp37) + 8);
        v39 = eax38;
        v40 = reinterpret_cast<void**>(0x18038050);
        esp41 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp37) - 4 - 4 - 4);
        v42 = ecx32;
        break;
    case 2:
        eax43 = a3->f0;
        *reinterpret_cast<int16_t*>(&eax43) = fun_18023a90(eax43, esp17 + 32, edi44, v18, v15, v45);
        esp46 = reinterpret_cast<void*>(esp17 - 4 - 4 - 4 - 4 + 8 + 4);
        ebx29 = eax43;
        edi47 = reinterpret_cast<signed char*>(0x18045870);
        ecx48 = 0xffffffff;
        do {
            if (!ecx48) 
                break;
            --ecx48;
            ++edi47;
        } while (*edi47);
        ecx49 = ~ecx48;
        eax50 = ecx49;
        ecx51 = ecx49 >> 2;
        while (ecx51) {
            --ecx51;
        }
        ecx32 = reinterpret_cast<void**>(eax50 & 3);
        while (ecx32) {
            --ecx32;
        }
        esp33 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp46) + 4);
        goto addr_0x18003486_11;
    case 3:
        eax52 = a3->f16;
        ecx53 = a3->f12;
        edx54 = a3->f8;
        eax55 = a3->f0;
        *reinterpret_cast<int16_t*>(&eax55) = fun_18023570(eax55, edx54, ecx53, eax52, esp17 + 32);
        esp56 = reinterpret_cast<void*>(esp17 - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
        ecx32 = a3->f0;
        v39 = ecx32;
        v40 = reinterpret_cast<void**>(0x18038058);
        ebx29 = eax55;
        esp41 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp56) - 4 - 4 - 4);
        v42 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp56) + 8);
        break;
    case 4:
        ecx57 = a3->f8;
        edx58 = a3->f4;
        v39 = ecx57;
        v40 = edx58;
        eax59 = reinterpret_cast<int32_t>(IsBadReadPtr());
        if (eax59) {
            fun_18009260(ecx57, 32, v40);
            goto v60;
        }
        v61 = a3->f0;
        al62 = fun_18001350(ecx57, v61);
        esp63 = reinterpret_cast<void*>(esp17 - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4);
        if (al62) {
            addr_0x180035fb_28:
            eax64 = reinterpret_cast<void**>(0);
            goto addr_0x180035fd_29;
        } else {
            edx65 = a3->f12;
            eax66 = a3->f0;
            ecx67 = a3->f8;
            edx68 = a3->f4;
            *reinterpret_cast<int16_t*>(&eax66) = fun_18023a30(ecx67, edx68, ecx67, eax66, edx65, reinterpret_cast<int32_t>(esp63) + 32, v40, v39, v18, v15, v69, v70, v71, v72, v14, a2);
            ebx29 = eax66;
            esp73 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp63) - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4 - 4);
            v42 = a3->f16;
            ecx32 = reinterpret_cast<void**>(esp73 + 12);
            esp41 = esp73 - 4 - 4;
            break;
        }
    case 5:
        v74 = a3->f0;
        al75 = fun_18001350(ecx21, v74);
        esp63 = reinterpret_cast<void*>(esp17 - 4 - 4 + 4 + 4);
        if (al75) 
            goto addr_0x180035fb_28;
        ecx76 = a3->f12;
        edx77 = a3->f8;
        eax78 = a3->f0;
        ecx32 = a3->f4;
        *reinterpret_cast<int16_t*>(&eax78) = fun_18022d70(ecx32, ecx32, eax78, edx77, 0, ecx76, reinterpret_cast<int32_t>(esp63) + 32);
        ebx29 = eax78;
        esp79 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp63) - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 24 + 4 - 4);
        v39 = a3->f16;
        v40 = reinterpret_cast<void**>(0x18038040);
        esp41 = esp79 - 4 - 4;
        v42 = reinterpret_cast<void**>(esp79 + 12);
        break;
    case 6:
        fun_18009260(ecx21, 33, v18);
        return 0;
        addr_0x180035b2_4:
    case 7:
        fun_18009260(ecx21, 50, v18);
        return 0;
    }
    fun_1802b2c9(v42, v40, v39);
    esp33 = reinterpret_cast<void*>(esp41 - 4 + 4 + 12);
    addr_0x18003486_11:
    if (ebx29) {
        fun_18009260(ecx32, ebx29, v18);
        return 0;
    }
    eax64 = fun_1802b2bb(ecx32, 72, v18, v15, v80, v81, v82, v83, v14);
    if (!eax64 || (*reinterpret_cast<int16_t*>(&eax64) = fun_1800cd70(eax64, 0, reinterpret_cast<int32_t>(esp33) - 4 - 4 + 4 + 4 + 8), !eax64)) {
        ecx84 = *reinterpret_cast<void***>(&g0);
        *reinterpret_cast<void***>(ecx84 + 8)(0);
        fun_18009260(ecx84, 4, 0);
        goto addr_0x180035fb_28;
    } else {
        addr_0x180035fd_29:
        return *reinterpret_cast<int16_t*>(&eax64);
    }
}

void** QSWaveMixPump() {
    void** esi1;
    void** eax2;

    esi1 = g18045878;
    if (esi1 && (eax2 = fun_18001000(esi1), !!*reinterpret_cast<signed char*>(&eax2))) {
        fun_1800a1e0(esi1);
        fun_1800a220(esi1);
        eax2 = fun_1800a200(esi1);
    }
    return eax2;
}

struct s324 {
    signed char[60] pad60;
    int32_t f60;
};

struct s325 {
    signed char[48] pad48;
    int32_t f48;
};

struct s323 {
    signed char[8] pad8;
    struct s324* f8;
    signed char[44] pad56;
    struct s325** f56;
    signed char[24] pad84;
    signed char f84;
};

void fun_18004e80(struct s323* ecx) {
    struct s325** eax2;
    struct s324* edx3;
    struct s325* ecx4;
    int32_t v5;

    eax2 = ecx->f56;
    if (eax2) {
        edx3 = ecx->f8;
        ecx4 = *eax2;
        v5 = edx3->f60;
        ecx4->f48(eax2, v5, 1);
        ecx->f84 = 1;
    }
    return;
}

struct s327 {
    signed char[60] pad60;
    int32_t f60;
};

struct s326 {
    signed char[56] pad56;
    struct s327** f56;
    signed char[24] pad84;
    signed char f84;
};

void fun_18004eb0(struct s326* ecx, int32_t a2) {
    struct s327** eax3;
    struct s327* ecx4;

    eax3 = ecx->f56;
    if (eax3) {
        ecx4 = *eax3;
        ecx4->f60(eax3, a2, 1);
        ecx->f84 = 1;
    }
    return;
}

void fun_18004ed0(struct s241* ecx) {
    fun_18004ee0(ecx);
    return;
}

struct s328 {
    signed char[132] pad132;
    signed char f132;
};

signed char fun_18005160(struct s328* ecx) {
    return ecx->f132;
}

int32_t fun_180051c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** eax8;
    void** v9;
    void** edx10;
    void** v11;
    void** v12;
    void** eax13;
    void** v14;
    void** ecx15;
    void** edi16;
    void** edi17;
    void** esi18;
    void** v19;
    void** v20;
    void** edx21;
    void** ecx22;
    void** v23;
    void** v24;
    void** v25;
    void** ebp26;
    void** edi27;
    unsigned char al28;
    void** v29;
    void** v30;
    void** edx31;
    void** eax32;
    void** eax33;
    void** ecx34;
    void** eax35;
    void** edx36;
    void** eax37;
    void** edx38;

    eax8 = *reinterpret_cast<void***>(ecx + 16);
    *reinterpret_cast<void***>(ecx + 92) = *reinterpret_cast<void***>(eax8 + 64);
    *reinterpret_cast<void***>(ecx + 96) = *reinterpret_cast<void***>(eax8 + 68);
    v9 = *reinterpret_cast<void***>(eax8 + 52);
    __asm__("fld dword [ebp-0x4]");
    __asm__("fistp dword [ebp-0x8]");
    edx10 = *reinterpret_cast<void***>(ecx + 16);
    *reinterpret_cast<void***>(ecx + 68) = v11;
    v12 = *reinterpret_cast<void***>(edx10 + 56);
    __asm__("fld dword [ebp-0x8]");
    __asm__("fistp dword [ebp-0x4]");
    *reinterpret_cast<void***>(ecx + 72) = v9;
    __asm__("fld dword [edx+0x3c]");
    __asm__("fmul dword [0x180342fc]");
    __asm__("fstp dword [ebp-0x8]");
    __asm__("fld dword [ebp-0x8]");
    __asm__("fistp dword [ebp-0x4]");
    eax13 = v9;
    v14 = *reinterpret_cast<void***>(ecx + 16) + 40;
    ecx15 = *reinterpret_cast<void***>(ecx + 36);
    *reinterpret_cast<void***>(ecx + 88) = eax13;
    edi16 = ecx + 76;
    *reinterpret_cast<int16_t*>(&eax13) = fun_18001020(ecx15, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffec, v14, edi17, esi18, v19, v20);
    edx21 = *reinterpret_cast<void***>(eax13);
    *reinterpret_cast<void***>(edi16) = edx21;
    *reinterpret_cast<void***>(edi16 + 4) = *reinterpret_cast<void***>(eax13 + 4);
    *reinterpret_cast<void***>(edi16 + 8) = *reinterpret_cast<void***>(eax13 + 8);
    ecx22 = *reinterpret_cast<void***>(ecx + 36);
    fun_1800a7f0(ecx22, edi16, edi17, esi18, v23, v24, v25, v12, v9, ebp26, __return_address(), a2, a3, a4, a5, a6, a7);
    if (*reinterpret_cast<void***>(ecx + 28)) {
        if (!*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 12) + 0x2cc)) {
            edi27 = reinterpret_cast<void**>(0);
        } else {
            edi27 = (*reinterpret_cast<struct s11**>(*reinterpret_cast<void***>(ecx + 12) + 0x2d0))->f8;
        }
        if (edi27 && (al28 = fun_180056d0(ecx, edi27), !!al28)) {
            fun_180053c0(ecx, edi27, edi17, esi18, v29, v30);
        }
        if (!*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 28) + 4)) {
            edx31 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 28));
            *reinterpret_cast<void***>(edx31 + 8)(0);
        }
        eax32 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 28));
        eax33 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax32 + 40)());
        *reinterpret_cast<void***>(ecx + 0x7c) = eax33;
        if (eax33) {
            ecx34 = *reinterpret_cast<void***>(eax33);
            *reinterpret_cast<void***>(ecx34 + 4)(eax33);
            if (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 8)) & 0x2000000) {
                eax35 = *reinterpret_cast<void***>(ecx + 0x7c);
                edx36 = *reinterpret_cast<void***>(eax35);
                *reinterpret_cast<void***>(edx36)(eax35, 0x18034408, ecx + 0x80, eax33);
            }
            eax37 = *reinterpret_cast<void***>(ecx + 12);
            *reinterpret_cast<void***>(eax37 + 0x2bc) = reinterpret_cast<void**>(1);
            *reinterpret_cast<void***>(eax37 + 0x2c7) = reinterpret_cast<void**>(1);
        }
    }
    fun_18005800(ecx);
    if (*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 12) + 0x2c4) && (*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 12) + 0x2cc) && (!*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 12) + 0x2c6) && *reinterpret_cast<void***>(ecx + 28)))) {
        edx38 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 28));
        *reinterpret_cast<void***>(edx38 + 16)();
    }
    return 0;
}

void fun_18005410(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** ecx6;
    int32_t edx7;
    void** edi8;
    void** v9;
    void** eax10;
    void** edx11;
    void** ecx12;
    unsigned char dl13;
    void** esi14;
    void** ecx15;
    void** eax16;
    void** edi17;
    void** edi18;
    void** esi19;
    void** v20;
    void** v21;
    void** edx22;
    void** ecx23;
    void** v24;
    void** v25;
    void** v26;
    void** v27;
    void** v28;
    void** v29;
    void** v30;
    void** ebp31;
    void** eax32;
    void** v33;
    void** v34;
    void** v35;
    void** eax36;
    void** edx37;
    void** ecx38;
    void** v39;
    void** eax40;
    void** ecx41;
    void** eax42;
    void** edx43;
    void** ecx44;
    void** eax45;
    void** ecx46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** eax51;
    void** ecx52;
    void** v53;
    void** v54;
    void** ecx55;
    void** ecx56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** eax64;
    void** edx65;
    void** ecx66;
    void** eax67;
    void** edx68;
    void** ecx69;
    void** edx70;
    void** eax71;
    void** ecx72;
    void** v73;
    void** eax74;
    void** edx75;
    void** ecx76;
    void** edx77;
    void** ecx78;
    void** v79;
    void** v80;

    ecx6 = *reinterpret_cast<void***>(a2) - 1;
    if (reinterpret_cast<unsigned char>(ecx6) > reinterpret_cast<unsigned char>(14)) 
        goto addr_0x1800568b_2;
    edx7 = 0;
    *reinterpret_cast<signed char*>(&edx7) = *reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(ecx6) + reinterpret_cast<uint32_t>(fun_180056b4));
    switch (edx7) {
    case 0:
        edi8 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 16) + 92);
        v9 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 16) + 84);
        fun_180249c0(ecx, v9);
        eax10 = *reinterpret_cast<void***>(ecx + 0x80);
        if (eax10) {
            edx11 = edi8;
            ecx12 = *reinterpret_cast<void***>(eax10);
            dl13 = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&edx11) & 1);
            *reinterpret_cast<unsigned char*>(&edx11) = -dl13;
            *reinterpret_cast<void***>(ecx12 + 72)(eax10, reinterpret_cast<unsigned char>(edx11) - (reinterpret_cast<unsigned char>(edx11) + reinterpret_cast<uint1_t>(reinterpret_cast<unsigned char>(edx11) < reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(edx11) + reinterpret_cast<uint1_t>(!!dl13)))) + 2, 0);
        }
        fun_18005800(ecx);
    case 1:
        esi14 = *reinterpret_cast<void***>(ecx + 12);
        *reinterpret_cast<void***>(esi14 + 0x2bc) = reinterpret_cast<void**>(1);
        *reinterpret_cast<void***>(esi14 + 0x2c7) = reinterpret_cast<void**>(1);
        return;
    case 2:
        ecx15 = *reinterpret_cast<void***>(ecx + 36);
        eax16 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xfffffff0);
        edi17 = ecx + 76;
        *reinterpret_cast<int16_t*>(&eax16) = fun_18001020(ecx15, eax16, a2 + 4, edi18, esi19, v20, v21);
        edx22 = *reinterpret_cast<void***>(eax16);
        *reinterpret_cast<void***>(edi17) = edx22;
        *reinterpret_cast<void***>(edi17 + 4) = *reinterpret_cast<void***>(eax16 + 4);
        *reinterpret_cast<void***>(edi17 + 8) = *reinterpret_cast<void***>(eax16 + 8);
        ecx23 = *reinterpret_cast<void***>(ecx + 36);
        fun_1800a7f0(ecx23, edi17, edi18, esi19, v24, v25, v26, v27, v28, v29, v30, ebp31, __return_address(), a2, a3, a4, a5);
        eax32 = *reinterpret_cast<void***>(ecx + 0x80);
        if (!eax32) {
            addr_0x1800568b_2:
        case 7:
            return;
        } else {
            break;
        }
    case 3:
        __asm__("fld dword [ebp+0x8]");
        __asm__("fistp dword [ebp-0x4]");
        *reinterpret_cast<void***>(ecx + 68) = v33;
        __asm__("fld dword [ebp+0x8]");
        __asm__("fistp dword [ebp-0x4]");
        *reinterpret_cast<void***>(ecx + 72) = v34;
        __asm__("fld dword [eax+0xc]");
        __asm__("fmul dword [0x180342fc]");
        __asm__("fstp dword [ebp+0x8]");
        __asm__("fld dword [ebp+0x8]");
        __asm__("fistp dword [ebp-0x4]");
        *reinterpret_cast<void***>(ecx + 88) = v35;
        eax36 = *reinterpret_cast<void***>(ecx + 0x80);
        if (eax36) {
            edx37 = *reinterpret_cast<void***>(ecx + 72);
            ecx38 = *reinterpret_cast<void***>(eax36);
            v39 = *reinterpret_cast<void***>(ecx + 68);
            *reinterpret_cast<void***>(ecx38 + 52)(eax36, v39, edx37, 1);
            eax40 = *reinterpret_cast<void***>(ecx + 0x80);
            ecx41 = *reinterpret_cast<void***>(eax40);
            *reinterpret_cast<void***>(ecx41 + 60)();
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 32) + 84) = reinterpret_cast<void**>(1);
            return;
        }
    case 4:
        *reinterpret_cast<void***>(ecx + 92) = *reinterpret_cast<void***>(a2 + 4);
        eax42 = *reinterpret_cast<void***>(ecx + 0x80);
        *reinterpret_cast<void***>(ecx + 96) = *reinterpret_cast<void***>(a2 + 8);
        if (eax42) {
            edx43 = *reinterpret_cast<void***>(ecx + 92);
            ecx44 = *reinterpret_cast<void***>(eax42);
            *reinterpret_cast<void***>(ecx44 + 68)(eax42, edx43, 1);
            eax45 = *reinterpret_cast<void***>(ecx + 0x80);
            ecx46 = *reinterpret_cast<void***>(eax45);
            *reinterpret_cast<void***>(ecx46 + 64)();
            return;
        }
    case 5:
        fun_18005800(ecx);
        return;
    case 6:
        *reinterpret_cast<void***>(ecx + 92) = *reinterpret_cast<void***>(*reinterpret_cast<void***>(a2 + 4) + 64);
        *reinterpret_cast<void***>(ecx + 96) = *reinterpret_cast<void***>(*reinterpret_cast<void***>(a2 + 4) + 68);
        __asm__("fld dword [ebp+0x8]");
        __asm__("fistp dword [ebp-0x4]");
        *reinterpret_cast<void***>(ecx + 68) = v47;
        v48 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(a2 + 4) + 56);
        __asm__("fld dword [ebp+0x8]");
        __asm__("fistp dword [ebp-0x4]");
        *reinterpret_cast<void***>(ecx + 72) = v49;
        __asm__("fld dword [ecx+0x3c]");
        __asm__("fmul dword [0x180342fc]");
        __asm__("fstp dword [ebp+0x8]");
        __asm__("fld dword [ebp+0x8]");
        __asm__("fistp dword [ebp-0x4]");
        *reinterpret_cast<void***>(ecx + 88) = v50;
        eax51 = *reinterpret_cast<void***>(a2 + 4) + 40;
        edi17 = ecx + 76;
        ecx52 = *reinterpret_cast<void***>(ecx + 36);
        *reinterpret_cast<int16_t*>(&eax51) = fun_18001020(ecx52, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffe4, eax51, edi18, esi19, v53, v54);
        ecx55 = *reinterpret_cast<void***>(eax51);
        *reinterpret_cast<void***>(edi17) = ecx55;
        *reinterpret_cast<void***>(edi17 + 4) = *reinterpret_cast<void***>(eax51 + 4);
        *reinterpret_cast<void***>(edi17 + 8) = *reinterpret_cast<void***>(eax51 + 8);
        ecx56 = *reinterpret_cast<void***>(ecx + 36);
        fun_1800a7f0(ecx56, edi17, edi18, esi19, v57, v58, v59, v60, v61, v62, v63, ebp31, __return_address(), v48, a3, a4, a5);
        eax64 = *reinterpret_cast<void***>(ecx + 0x80);
        if (!eax64) 
            goto addr_0x1800568b_2;
        edx65 = *reinterpret_cast<void***>(ecx + 92);
        ecx66 = *reinterpret_cast<void***>(eax64);
        *reinterpret_cast<void***>(ecx66 + 68)(eax64, edx65, 1);
        eax67 = *reinterpret_cast<void***>(ecx + 0x80);
        edx68 = *reinterpret_cast<void***>(ecx + 96);
        ecx69 = *reinterpret_cast<void***>(eax67);
        *reinterpret_cast<void***>(ecx69 + 64)(eax67, edx68, 1, eax64, edx65, 1);
        edx70 = *reinterpret_cast<void***>(ecx + 72);
        eax71 = *reinterpret_cast<void***>(ecx + 0x80);
        ecx72 = *reinterpret_cast<void***>(eax71);
        v73 = *reinterpret_cast<void***>(ecx + 68);
        *reinterpret_cast<void***>(ecx72 + 52)(eax71, v73, edx70, 1, eax67, edx68, 1, eax64, edx65, 1);
        eax74 = *reinterpret_cast<void***>(ecx + 0x80);
        edx75 = *reinterpret_cast<void***>(ecx + 88);
        ecx76 = *reinterpret_cast<void***>(eax74);
        *reinterpret_cast<void***>(ecx76 + 60)(eax74, edx75, 1, eax71, v73, edx70, 1, eax67, edx68, 1, eax64, edx65, 1);
        eax32 = *reinterpret_cast<void***>(ecx + 0x80);
    }
    edx77 = *reinterpret_cast<void***>(edi17 + 8);
    ecx78 = *reinterpret_cast<void***>(eax32);
    v79 = *reinterpret_cast<void***>(edi17 + 4);
    v80 = *reinterpret_cast<void***>(edi17);
    *reinterpret_cast<void***>(ecx78 + 56)(eax32, v80, v79, edx77, 1);
    *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 32) + 84) = reinterpret_cast<void**>(1);
    goto addr_0x1800568b_2;
}

struct s329 {
    signed char[124] pad124;
    int32_t f124;
};

int32_t fun_180059e0(struct s329* ecx) {
    return ecx->f124;
}

struct s330 {
    signed char[28] pad28;
    int32_t f28;
};

int16_t fun_18005d50(struct s330** a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    struct s330* ecx6;

    if (a3 != 1) {
        return 0x4001;
    } else {
        ecx6 = *a1;
        ecx6->f28();
        goto a1;
    }
}

struct s331 {
    signed char[4] pad4;
    void** f4;
    signed char[3] pad8;
    signed char f8;
    signed char[3] pad12;
    void** f12;
};

void fun_18006430(struct s331* ecx, void** a2, void** a3, void** a4, void** a5) {
    void** edi6;
    void** edi7;
    void** esi8;
    void** eax9;
    unsigned char dl10;
    int1_t zf11;
    uint32_t ecx12;

    edi6 = a2;
    eax9 = fun_18008970(edi6, edi7, esi8, __return_address(), a2, a3, a4, a5);
    if (eax9 != 0xffffffff) {
        if (!ecx->f4) {
            addr_0x18006477_3:
            ecx->f12 = eax9;
            ecx->f4 = edi6;
        } else {
            dl10 = static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax9) - reinterpret_cast<unsigned char>(ecx->f12)) < reinterpret_cast<int32_t>(0)));
            zf11 = ecx->f8 == 0;
            *reinterpret_cast<unsigned char*>(&a2) = dl10;
            if (zf11) {
                ecx12 = reinterpret_cast<unsigned char>(a2) & 0xff;
            } else {
                *reinterpret_cast<unsigned char*>(&ecx12) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(dl10 == 0));
            }
            if (*reinterpret_cast<unsigned char*>(&ecx12)) 
                goto addr_0x18006477_3;
        }
    }
    return;
}

struct s332 {
    signed char[4] pad4;
    void** f4;
    signed char[3] pad8;
    signed char f8;
};

void fun_18006490(struct s332* ecx, void** a2) {
    void** edi3;
    void** eax4;
    uint32_t eax5;
    uint32_t ecx6;

    fun_18008880(a2, edi3);
    __asm__("fld dword [eax+0xa8]");
    eax4 = ecx->f4;
    if (eax4) {
        __asm__("fcom dword [esi+0xc]");
        __asm__("fnstsw ax");
        if (*reinterpret_cast<unsigned char*>(&eax4 + 1) & 65) {
            eax5 = 0;
        } else {
            eax5 = 1;
        }
        if (!ecx->f8) {
            ecx6 = eax5 & 0xff;
        } else {
            *reinterpret_cast<unsigned char*>(&ecx6) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(*reinterpret_cast<signed char*>(&eax5) == 0));
        }
        if (!*reinterpret_cast<unsigned char*>(&ecx6)) {
            __asm__("fstp st0");
            return;
        }
    }
    __asm__("fstp dword [esi+0xc]");
    ecx->f4 = a2;
    return;
}

void fun_180083ce() {
}

void fun_1800a890(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14) {
    fun_1800a8a0(a1, 0x3d4ccccd, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
    return;
}

int16_t fun_1800b130(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    uint32_t eax6;
    uint32_t eax7;
    void** esi8;
    void** edi9;
    void** eax10;
    void** v11;
    void** v12;
    void** v13;
    void** eax14;

    if (reinterpret_cast<unsigned char>(a2) & 0x10000) {
        eax6 = reinterpret_cast<unsigned char>(a2) & 0x2000000;
        eax7 = -eax6;
        eax10 = fun_1802b2bb(ecx, 28, esi8, edi9, __return_address(), a2, a3, a4, a5);
        if (!eax10) {
            v11 = *reinterpret_cast<void***>(ecx + 64);
            fun_1800b880(0, v11, esi8, edi9, __return_address());
            return 0;
        } else {
            v12 = *reinterpret_cast<void***>(ecx + 68);
            *reinterpret_cast<int16_t*>(&eax10) = fun_1800b800(eax10, ecx, (eax7 - (eax7 + reinterpret_cast<uint1_t>(eax7 < eax7 + reinterpret_cast<uint1_t>(!!eax6))) & 0x1000000) + 0x1010000, v12);
            v13 = *reinterpret_cast<void***>(ecx + 64);
            fun_1800b880(eax10, v13, esi8, edi9, __return_address());
            eax14 = eax10;
            return *reinterpret_cast<int16_t*>(&eax14);
        }
    } else {
        return 0;
    }
}

struct s334 {
    signed char[328] pad328;
    int32_t f328;
};

struct s335 {
    signed char[36] pad36;
    int32_t f36;
};

struct s333 {
    signed char[4] pad4;
    struct s334* f4;
    signed char[56] pad64;
    struct s335** f64;
};

void fun_1800b200(struct s333* ecx) {
    struct s335** eax2;
    struct s335* edx3;
    int32_t v4;

    eax2 = ecx->f64;
    if (eax2) {
        edx3 = *eax2;
        v4 = ecx->f4->f328;
        edx3->f36(eax2, v4);
    }
    return;
}

struct s337 {
    signed char[8] pad8;
    int32_t f8;
};

struct s336 {
    signed char[60] pad60;
    struct s337** f60;
};

int16_t fun_1800b220(struct s336* ecx, int32_t a2) {
    struct s337* eax3;

    if (!ecx->f60) {
        return 0;
    } else {
        eax3 = *ecx->f60;
        eax3->f8();
        goto a2;
    }
}

struct s339 {
    struct s339* f0;
    signed char[4] pad8;
    void** f8;
};

struct s338 {
    signed char[16] pad16;
    struct s339* f16;
};

void fun_1800b3c0(struct s338* ecx) {
    struct s339* esi2;
    struct s339* edi3;
    void** ecx4;

    esi2 = ecx->f16;
    edi3 = reinterpret_cast<struct s339*>(&ecx->f16);
    if (esi2 != edi3) {
        do {
            ecx4 = esi2->f8;
            fun_1800bb80(ecx4);
            esi2 = esi2->f0;
        } while (esi2 != edi3);
    }
    return;
}

struct s341 {
    struct s341* f0;
    signed char[4] pad8;
    struct s72* f8;
};

struct s342 {
    signed char[4] pad4;
    int32_t f4;
};

struct s340 {
    signed char[16] pad16;
    struct s341* f16;
    signed char[44] pad64;
    struct s342** f64;
};

void fun_1800b3e0(struct s340* ecx) {
    struct s342* eax2;
    void* v3;
    struct s341* edi4;
    struct s341* esi5;
    struct s72* ecx6;

    if (ecx->f64 && (eax2 = *ecx->f64, v3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 + 12), eax2->f4(1, v3, 4), edi4 = reinterpret_cast<struct s341*>(&ecx->f16), esi5 = ecx->f16, esi5 != edi4)) {
        do {
            ecx6 = esi5->f8;
            fun_1800bba0(ecx6, 1, v3, 4);
            esi5 = esi5->f0;
        } while (esi5 != edi4);
    }
    return;
}

struct s344 {
    signed char[4] pad4;
    int32_t f4;
};

struct s343 {
    signed char[64] pad64;
    struct s344** f64;
};

void fun_1800b420(struct s343* ecx) {
    struct s344* eax2;
    int32_t edi3;
    struct s344** ecx4;
    struct s344* eax5;
    int32_t esi6;
    struct s344** ecx7;
    struct s344* edx8;
    struct s344** ecx9;
    struct s344* edx10;
    struct s344** ecx11;
    struct s344* edx12;

    if (ecx->f64) {
        eax2 = *ecx->f64;
        eax2->f4(3, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 + 12, 4, edi3);
        ecx4 = ecx->f64;
        eax5 = *ecx4;
        eax5->f4(4, esi6, 4, 3, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 + 12, 4, edi3);
        ecx7 = ecx->f64;
        edx8 = *ecx7;
        edx8->f4(7, esi6 + 8, 4, 4, esi6, 4, 3, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 + 12, 4, edi3);
        ecx9 = ecx->f64;
        edx10 = *ecx9;
        edx10->f4(8, esi6 + 12, 4, 7, esi6 + 8, 4, 4, esi6, 4, 3, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 + 12, 4, edi3);
        ecx11 = ecx->f64;
        edx12 = *ecx11;
        edx12->f4();
    }
    return;
}

struct s346 {
    signed char[24] pad24;
    int32_t f24;
};

struct s345 {
    signed char[60] pad60;
    struct s346* f60;
};

int32_t fun_1800b47f(struct s345* ecx) {
    return ecx->f60->f24;
}

int32_t fun_1800b8b0(void** ecx, void** a2, void** a3) {
    fun_1800b9c0(ecx, __return_address(), a2, a3);
    return 0;
}

void fun_1800bbc0(void** ecx, int32_t a2, void** a3, void** a4, void** a5) {
    void** esi6;

    if (*reinterpret_cast<void***>(ecx + 12)) {
        fun_1800baf0(ecx, esi6);
        fun_1800ba50(ecx, esi6, __return_address(), a2, a3, a4, a5);
    }
    return;
}

void fun_1800bbe0(int32_t ecx) {
    goto 0x1800b480;
}

int16_t fun_1800bdf0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_1800be10(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int32_t fun_1800c400(void** ecx, void** a2) {
    void** eax3;
    void** esi4;
    void** v5;
    void** v6;
    void** ecx7;
    void** v8;
    void** v9;
    void** v10;
    void** eax11;
    int32_t eax12;
    void** ecx13;
    void** edx14;
    int1_t sf15;
    void** eax16;
    signed char al17;
    void** edx18;
    void** ecx19;
    void** v20;
    void** eax21;
    void** eax22;

    if (!*reinterpret_cast<void***>(ecx + 0x240)) 
        goto addr_0x1800c410_2;
    if (!*reinterpret_cast<void***>(ecx + 0x241)) {
        eax3 = *reinterpret_cast<void***>(ecx + 0x248) + 8;
        *reinterpret_cast<void***>(ecx + 0x241) = reinterpret_cast<void**>(1);
        fun_18027620(ecx, eax3, esi4, v5, v6, __return_address(), a2);
        ecx7 = *reinterpret_cast<void***>(ecx + 0x248);
        v8 = *reinterpret_cast<void***>(ecx7 + 44);
        fun_18027690(ecx, 0, v8, 0, esi4, v9, v10, __return_address(), a2);
    }
    eax11 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x248));
    eax12 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(eax11 + 12)());
    if (!eax12) 
        goto addr_0x1800c45d_6;
    addr_0x1800c4b6_7:
    if (*reinterpret_cast<void***>(ecx + 0x1a8)) {
        ecx13 = *reinterpret_cast<void***>(ecx + 0x1b4);
    } else {
        ecx13 = *reinterpret_cast<void***>(ecx + 0x1b8);
    }
    if (ecx13) {
        edx14 = *reinterpret_cast<void***>(ecx + 0x248);
        sf15 = reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ecx13) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(edx14 + 0x1a4))) < reinterpret_cast<int32_t>(0);
        if (sf15) {
        }
        if (eax12 > 0) {
            eax12 = 0;
        }
    }
    return eax12;
    addr_0x1800c45d_6:
    if (*reinterpret_cast<void***>(ecx + 0x244) == *reinterpret_cast<void***>(ecx + 0x1a8) || (eax16 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x1a4) + 68)), al17 = reinterpret_cast<signed char>(*reinterpret_cast<void***>(eax16 + 20)()), !!al17)) {
        addr_0x1800c410_2:
        return 0;
    } else {
        if (*reinterpret_cast<void***>(ecx + 0x1a8) != 0xffffffff) {
            *reinterpret_cast<void***>(ecx + 0x244) = *reinterpret_cast<void***>(ecx + 0x244) + 1;
        }
        edx18 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x248));
        *reinterpret_cast<void***>(edx18 + 36)();
        ecx19 = *reinterpret_cast<void***>(ecx + 0x248);
        v20 = *reinterpret_cast<void***>(ecx + 0x1b0);
        eax21 = *reinterpret_cast<void***>(ecx19);
        *reinterpret_cast<void***>(eax21 + 24)(v20);
        eax22 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x248));
        eax12 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(eax22 + 12)(v20));
        goto addr_0x1800c4b6_7;
    }
}

struct s348 {
    signed char[12] pad12;
    int32_t f12;
};

struct s349 {
    signed char[16] pad16;
    int32_t f16;
};

struct s347 {
    struct s348* f0;
    signed char[580] pad584;
    struct s349** f584;
};

int16_t fun_1800c510(struct s347* ecx, int32_t a2, int32_t a3, int32_t a4) {
    struct s349* eax5;
    int32_t eax6;
    struct s348* edx7;
    struct s349** ecx8;
    struct s349* eax9;
    int32_t ebp10;

    if (ecx->f584) {
        eax5 = *ecx->f584;
        eax6 = reinterpret_cast<int32_t>(eax5->f16());
        if (!eax6) {
            edx7 = ecx->f0;
            edx7->f12(ecx);
            ecx8 = ecx->f584;
            eax9 = *ecx8;
            eax9->f16(a2, a3, a4);
        }
        goto ebp10;
    } else {
        return 0;
    }
}

struct s351 {
    signed char[20] pad20;
    int32_t f20;
};

struct s350 {
    signed char[584] pad584;
    struct s351** f584;
};

void fun_1800c560(struct s350* ecx) {
    if (!ecx->f584) {
        return;
    } else {
        goto (*ecx->f584)->f20;
    }
}

struct s353 {
    signed char[28] pad28;
    int32_t f28;
};

struct s352 {
    signed char[584] pad584;
    struct s353** f584;
};

void fun_1800c590(struct s352* ecx) {
    if (!ecx->f584) {
        return;
    } else {
        goto (*ecx->f584)->f28;
    }
}

struct s355 {
    struct s355* f0;
    struct s355** f4;
    signed char[4] pad12;
    int32_t f12;
    int32_t f16;
    int32_t f20;
    int32_t f24;
};

struct s356 {
    signed char[12] pad12;
    int32_t f12;
    int32_t f16;
};

struct s354 {
    int32_t f0;
    struct s355* f4;
    signed char[24] pad32;
    struct s355* f32;
    signed char[8] pad44;
    int32_t f44;
    int32_t f48;
    struct s356** f52;
    signed char[4] pad60;
    int32_t f60;
    int32_t f64;
};

void fun_1800d738(struct s354* ecx) {
    int32_t v2;
    int32_t ebx3;
    struct s354* esi4;
    int32_t eax5;
    struct s356** eax6;
    struct s356** v7;
    struct s356* ecx8;
    int32_t eax9;
    struct s355* edi10;
    struct s355* ebp11;
    int32_t ebx12;
    int32_t eax13;
    int32_t edx14;
    struct s355* eax15;
    struct s356** eax16;
    struct s356* ecx17;
    int1_t zf18;
    int32_t eax19;
    int1_t sf20;
    struct s356** eax21;
    struct s356* edx22;

    v2 = ebx3;
    esi4 = ecx;
    eax5 = reinterpret_cast<int32_t>(timeGetTime());
    esi4->f44 = eax5;
    while (WaitForSingleObject(), !esi4->f60) {
        eax6 = esi4->f52;
        v7 = eax6;
        ecx8 = *eax6;
        ecx8->f12(v7);
        if (esi4->f60) 
            goto addr_0x1800d829_5;
        eax9 = reinterpret_cast<int32_t>(timeGetTime(v7));
        edi10 = esi4->f4;
        ebp11 = reinterpret_cast<struct s355*>(&esi4->f4);
        ebx12 = eax9;
        esi4->f64 = 1;
        if (edi10 != ebp11) {
            do {
                eax13 = edi10->f20;
                if (eax13) {
                    if (ebx12 - edi10->f16 >= edi10->f12) {
                        edx14 = edi10->f24;
                        edi10->f16 = ebx12;
                        eax13(edx14, v7);
                    }
                    edi10 = edi10->f0;
                } else {
                    eax15 = edi10;
                    edi10 = edi10->f0;
                    *eax15->f4 = eax15->f0;
                    eax15->f0->f4 = eax15->f4;
                    eax15->f0 = esi4->f32;
                    esi4->f32 = eax15;
                    esi4->f0 = esi4->f0 - 1;
                }
            } while (edi10 != ebp11);
        }
        eax16 = esi4->f52;
        esi4->f64 = 1;
        ecx17 = *eax16;
        ecx17->f16(eax16, v7);
        zf18 = esi4->f48 == -1;
        esi4->f44 = ebx12;
        if (zf18) 
            continue;
        eax19 = reinterpret_cast<int32_t>(timeGetTime(eax16, v7));
        sf20 = ebx12 - eax19 + esi4->f48 < 0;
        if (sf20) {
        }
    }
    addr_0x1800d832_17:
    SetEvent();
    goto v2;
    addr_0x1800d829_5:
    eax21 = esi4->f52;
    edx22 = *eax21;
    edx22->f16(eax21, v7);
    goto addr_0x1800d832_17;
}

int16_t fun_1800dfe0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_1800e000(ecx);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

void fun_1800e2e0(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** esi6;
    void** v7;
    void** edi8;
    void** esi9;
    void** ebp10;
    void** ebx11;
    void** v12;
    void** v13;
    void** v14;
    void** eax15;
    void** ecx16;
    void** eax17;
    void** ebp18;
    int32_t edi19;
    void** v20;
    void** v21;
    void** v22;
    void** ebx23;
    int32_t edi24;
    void** v25;
    void** v26;
    void** ecx27;
    void** al28;
    void** v29;
    void** v30;
    void** v31;
    void** ebp32;
    void** ecx33;
    void** ecx34;
    void** ebx35;
    void** ebx36;
    void** ecx37;
    void** ecx38;
    void** ebx39;
    void** ebp40;
    int32_t edi41;
    void** v42;
    void** ebx43;
    void** ebp44;
    int32_t edi45;
    void** v46;

    esi6 = ecx;
    if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi6 + 4)) & 4)) {
        v7 = reinterpret_cast<void**>(0x3f800000);
    } else {
        fun_1800cf10(ecx, 0xfffffed4, edi8, esi9, ebp10, ebx11, v12, v13, v14, __return_address(), a2, a3, a4, a5);
        __asm__("fstp dword [esp+0x10]");
    }
    eax15 = *reinterpret_cast<void***>(esi6 + 76);
    if (!eax15) {
        __asm__("fld dword [esp+0x10]");
        __asm__("fmul dword [esi+0x68]");
        ecx16 = *reinterpret_cast<void***>(esi6 + 4);
        __asm__("fmul dword [esi+0x1c]");
        __asm__("fstp dword [esp+0x14]");
        if (!(*reinterpret_cast<unsigned char*>(&ecx16) & 4)) {
            v7 = reinterpret_cast<void**>(0);
        } else {
            __asm__("fld dword [esi+0x6c]");
            __asm__("fmul dword [esi+0x40]");
            __asm__("fmul dword [esp+0x10]");
            __asm__("fmul dword [esi+0x1c]");
            __asm__("fstp dword [esp+0x10]");
        }
        eax17 = *reinterpret_cast<void***>(esi6 + 0x84);
        if (reinterpret_cast<int1_t>(eax17 == 1)) 
            goto addr_0x1800e425_9;
    } else {
        ebp18 = a2;
        edi19 = 0;
        do {
            if (edi19) {
                fun_18019010((edi19 + edi19 * 4 << 4) + reinterpret_cast<unsigned char>(esi6) + 0xb8, 0, ebp18);
            } else {
                __asm__("fld dword [esi+0x3c]");
                __asm__("fmul dword [esi+0x1c]");
                __asm__("fmul dword [esp+0x10]");
                __asm__("fstp dword [esp+0x14]");
                if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi6 + 76)) & 1)) {
                    a2 = reinterpret_cast<void**>(0);
                } else {
                    a2 = v20;
                }
                fun_18018ba0(esi6 + 0xb8, a2, ebp18);
                if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi6 + 76)) & 2)) {
                    v21 = reinterpret_cast<void**>(0);
                } else {
                    v21 = v22;
                }
                eax15 = v21;
                fun_18018ba0(esi6 + 0xe0, eax15, ebp18);
            }
            ++edi19;
        } while (edi19 < 6);
        if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi6 + 4)) & 4)) 
            goto addr_0x1800e3dd_22;
        __asm__("fld dword [esi+0x38]");
        __asm__("fcomp dword [0x1803422c]");
        __asm__("fnstsw ax");
        if (*reinterpret_cast<unsigned char*>(&eax15 + 1) & 64) 
            goto addr_0x1800e3dd_22; else 
            goto addr_0x1800e3b0_24;
    }
    if (!reinterpret_cast<int1_t>(eax17 == 2)) {
        addr_0x1800e6c5_26:
        return;
    } else {
        ebx23 = a2;
        edi24 = 0;
        do {
            if (edi24) {
                v25 = ebx23;
                v26 = reinterpret_cast<void**>(0);
                ecx27 = reinterpret_cast<void**>((edi24 + edi24 * 4 << 4) + reinterpret_cast<unsigned char>(esi6) + 0xb8);
            } else {
                __asm__("fld dword [esi+0x68]");
                __asm__("fmul dword [esi+0x1c]");
                al28 = *reinterpret_cast<void***>(esi6 + 52);
                v25 = ebx23;
                __asm__("fstp dword [esp+0x24]");
                if (!al28) {
                    v26 = a2;
                    ecx27 = esi6 + 0xb8;
                } else {
                    fun_18018fd0(esi6 + 0xb8, esi6 + 88, a2, v25);
                    continue;
                }
            }
            fun_18019010(ecx27, v26, v25);
            fun_180190a0((edi24 + edi24 * 4 << 4) + reinterpret_cast<unsigned char>(esi6) + 0xb8, 0, 0, 0);
            ++edi24;
        } while (edi24 < 6);
        v29 = ebx23;
    }
    addr_0x1800e6b5_36:
    v30 = v7;
    addr_0x1800e6ba_37:
    fun_18018ba0(esi6 + 0x298, v30, v29);
    goto addr_0x1800e6c5_26;
    addr_0x1800e425_9:
    if (*reinterpret_cast<unsigned char*>(&eax17) & *reinterpret_cast<unsigned char*>(&ecx16)) {
        if (!*reinterpret_cast<void***>(esi6 + 52)) {
            v31 = *reinterpret_cast<void***>(esi6 + 80);
            *reinterpret_cast<int16_t*>(&eax17) = fun_1800e070(esi6, v31);
            fun_18019040(esi6 + 0xb8, eax17, a2);
            fun_18019040(esi6 + 0x108, eax17, a2);
            ebp32 = esi6 + 0x1f8;
            fun_18019040(ebp32, eax17, a2);
            ecx33 = esi6 + 0x248;
            fun_18019040(ecx33, eax17, a2);
            __asm__("fld dword [esp+0x14]");
            __asm__("fmul dword [esi+0x98]");
            __asm__("fstp dword [esp+0x20]");
            if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi6 + 4)) & 8)) {
                fun_18019010(ebp32, 0, a2);
                ecx34 = esi6 + 0x248;
                fun_18019010(ecx34, 0, a2);
                __asm__("fld dword [esp+0x20]");
            } else {
                __asm__("fld dword [esp+0x20]");
                __asm__("fmul dword [esi+0xa0]");
                ebx35 = esi6 + 0xa8;
                __asm__("fstp dword [esp]");
                fun_18018fd0(ebp32, ebx35, ecx33, a2);
                __asm__("fld dword [esp+0x20]");
                __asm__("fmul dword [esi+0xa4]");
                ecx34 = esi6 + 0x248;
                __asm__("fstp dword [esp]");
                fun_18018fd0(ecx34, ebx35, ebp32, a2);
                __asm__("fld dword [esp+0x20]");
                __asm__("fmul dword [esi+0x9c]");
            }
            __asm__("fld dword [esp+0x14]");
            __asm__("fmul dword [esi+0x94]");
            if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(esi6 + 0x98) == 0x3f800000)) {
                __asm__("fadd st0, st1");
                __asm__("fstp dword [esp+0x28]");
                __asm__("fstp st0");
                fun_18019010(esi6 + 0x108, 0, a2);
            } else {
                __asm__("fld st1");
                __asm__("fmul dword [esi+0xb0]");
                __asm__("fadd st0, st1");
                __asm__("fstp dword [esp+0x28]");
                __asm__("fstp st0");
                __asm__("fmul dword [esi+0xb4]");
                __asm__("fstp dword [esp]");
                fun_18018fd0(esi6 + 0x108, esi6 + 0xa8, ecx34, a2);
            }
            ebx36 = esi6 + 0xa8;
            ecx37 = esi6 + 0xb8;
            fun_18018fd0(ecx37, ebx36, a2, a2);
            __asm__("fld dword [esp+0x10]");
            __asm__("fmul dword [esi+0xb0]");
            ecx38 = esi6 + 0x158;
            __asm__("fstp dword [esp]");
            fun_18018fd0(ecx38, ebx36, ecx37, a2);
            __asm__("fld dword [esp+0x10]");
            __asm__("fmul dword [esi+0xb4]");
            __asm__("fstp dword [esp]");
            fun_18018fd0(esi6 + 0x1a8, ebx36, ecx38, a2);
            v29 = a2;
            goto addr_0x1800e6b5_36;
        } else {
            ebx39 = a2;
            ebp40 = esi6 + 0xb8;
            fun_18019040(ebp40, 0, ebx39);
            edi41 = 0;
            do {
                if (edi41) {
                    fun_18019010((edi41 + edi41 * 4 << 4) + reinterpret_cast<unsigned char>(esi6) + 0xb8, 0, ebx39);
                } else {
                    fun_18018fd0(ebp40, esi6 + 88, v42, ebx39);
                }
                ++edi41;
            } while (edi41 < 6);
            v29 = ebx39;
            v30 = v7;
            goto addr_0x1800e6ba_37;
        }
    } else {
        ebx43 = a2;
        ebp44 = esi6 + 0xb8;
        fun_18019040(ebp44, 0, ebx43);
        edi45 = 0;
        do {
            if (edi45) {
                fun_18019010((edi45 + edi45 * 4 << 4) + reinterpret_cast<unsigned char>(esi6) + 0xb8, 0, ebx43);
            } else {
                fun_18018fd0(ebp44, esi6 + 88, v46, ebx43);
            }
            ++edi45;
        } while (edi45 < 6);
        v29 = ebx43;
        v30 = reinterpret_cast<void**>(0);
        goto addr_0x1800e6ba_37;
    }
    addr_0x1800e3dd_22:
    v29 = ebp18;
    v30 = reinterpret_cast<void**>(0);
    goto addr_0x1800e6ba_37;
    addr_0x1800e3b0_24:
    __asm__("fld dword [esi+0x40]");
    __asm__("fmul dword [esi+0x1c]");
    __asm__("fmul dword [esp+0x10]");
    __asm__("fstp dword [esp+0x20]");
    if (*reinterpret_cast<void***>(esi6 + 56) != 0xbf800000) {
        __asm__("fld dword [esp+0x20]");
        __asm__("fmul dword [esi+0x38]");
        __asm__("fstp dword [esp+0x20]");
    }
    v29 = ebp18;
    v30 = a2;
    goto addr_0x1800e6ba_37;
}

struct s358 {
    signed char[36] pad36;
    int32_t f36;
};

struct s357 {
    signed char[688] pad688;
    struct s358** f688;
};

void fun_1800e7b0(struct s357* ecx) {
    goto (*ecx->f688)->f36;
}

void fun_1800e8b0() {
    return;
}

struct s360 {
    signed char[4] pad4;
    int32_t f4;
    signed char[24] pad32;
    int32_t f32;
    int32_t f36;
};

struct s359 {
    signed char[56] pad56;
    int32_t f56;
    int32_t f60;
    signed char[488] pad552;
    void* f552;
    signed char[832] pad1388;
    struct s360** f1388;
};

void fun_1800ef90(struct s359* ecx) {
    void* esp2;
    struct s359* esi3;
    void* eax4;
    uint1_t less_or_equal5;
    void* esp6;
    struct s360** ecx7;
    struct s360* edx8;
    int1_t less9;
    struct s360** ecx10;
    void* v11;
    struct s360* edx12;
    struct s360** ecx13;
    int32_t v14;
    struct s360* edx15;
    struct s360** ecx16;
    int32_t v17;
    struct s360* edx18;
    struct s360** ecx19;
    struct s360* edx20;

    esp2 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 16 - 4);
    esi3 = ecx;
    if (esi3->f1388) {
        eax4 = reinterpret_cast<void*>(0);
        less_or_equal5 = reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(esi3->f552) < 0) | reinterpret_cast<uint1_t>(esi3->f552 == 0));
        if (!less_or_equal5) {
            do {
                esp6 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp2) - 4);
                ecx7 = esi3->f1388;
                __asm__("fild dword [eax+0x8]");
                __asm__("fstp dword [esp+0x10]");
                __asm__("fild dword [eax+0x4]");
                __asm__("fstp dword [esp+0x1c]");
                edx8 = *ecx7;
                edx8->f4(9);
                esp2 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp6) - 4 - 4 - 4 + 4);
                eax4 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp6) + 8 + 1);
                less9 = reinterpret_cast<int32_t>(eax4) < reinterpret_cast<int32_t>(esi3->f552);
            } while (less9);
        }
        if (reinterpret_cast<int32_t>(eax4) < 20) {
            do {
                ecx10 = esi3->f1388;
                v11 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp2) + 4);
                edx12 = *ecx10;
                edx12->f4(9);
                esp2 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp2) - 4 - 4 - 4 - 4 + 4);
            } while (reinterpret_cast<int32_t>(v11) + 1 < 20);
        }
        ecx13 = esi3->f1388;
        v14 = esi3->f56;
        edx15 = *ecx13;
        edx15->f32(v14);
        ecx16 = esi3->f1388;
        v17 = esi3->f60;
        edx18 = *ecx16;
        edx18->f36(v17, v14);
        ecx19 = esi3->f1388;
        edx20 = *ecx19;
        edx20->f4(10, reinterpret_cast<int32_t>(esi3) + 0x31c, 4, v17, v14);
    }
    return;
}

int16_t fun_1800f070(struct s131* ecx, void* a2, void** a3, uint32_t a4) {
    int16_t ax5;
    struct s133* esi6;
    struct s133* edi7;
    void** ebx8;
    void** ecx9;
    struct s134* eax10;
    int32_t esi11;

    ax5 = fun_180131a0(ecx, a2, a3, a4);
    if (a2 == 5) {
        esi6 = ecx->f24;
        edi7 = reinterpret_cast<struct s133*>(&ecx->f24);
        if (esi6 != edi7) {
            ebx8 = reinterpret_cast<void**>(&ecx->f68);
            do {
                ecx9 = esi6->f8;
                ax5 = fun_1800e220(ecx9, ebx8);
                esi6 = esi6->f0;
            } while (esi6 != edi7);
        }
    } else {
        if (reinterpret_cast<int1_t>(a2 == 9) && ecx->f1388) {
            eax10 = *ecx->f1388;
            eax10->f4();
            goto esi11;
        }
    }
    return ax5;
}

void fun_1800f0d0(struct s0* ecx, int32_t a2, struct s3* a3, uint32_t a4, uint32_t* a5) {
    struct s1* eax6;

    if (a2 == 9) {
        if (ecx->f1388) {
            eax6 = *ecx->f1388;
            eax6->f8(9, a3, a4, a5);
        }
        return;
    } else {
        fun_180134b0(ecx, a2, a3, a4, a5);
        return;
    }
}

void fun_1800f120(struct s103* ecx, void** a2) {
    fun_18013170(ecx, a2);
    return;
}

struct s362 {
    signed char[20] pad20;
    int32_t f20;
};

struct s363 {
    signed char[20] pad20;
    int32_t f20;
};

struct s361 {
    signed char[1380] pad1380;
    struct s362** f1380;
    signed char[4] pad1388;
    struct s363** f1388;
};

struct s365 {
    signed char[20] pad20;
    int32_t f20;
};

struct s366 {
    signed char[20] pad20;
    int32_t f20;
};

struct s367 {
    signed char[20] pad20;
    int32_t f20;
};

struct s364 {
    struct s362** f0;
    signed char[8] pad12;
    struct s365** f12;
    signed char[4] pad20;
    struct s366** f20;
    signed char[4] pad28;
    struct s367** f28;
};

struct s368 {
    signed char[20] pad20;
    int32_t f20;
};

unsigned char fun_1800f410(struct s361* ecx) {
    struct s361* ebx2;
    int32_t edi3;
    struct s364* esi4;
    struct s368* eax5;
    signed char al6;
    struct s362* edx7;
    signed char al8;
    struct s365* eax9;
    signed char al10;
    struct s366* edx11;
    signed char al12;
    struct s367* eax13;
    signed char al14;
    struct s363* edx15;
    signed char al16;

    ebx2 = ecx;
    edi3 = 0;
    esi4 = reinterpret_cast<struct s364*>(&ebx2->f1380);
    do {
        eax5 = **reinterpret_cast<struct s368***>(reinterpret_cast<int32_t>(esi4) - 8);
        al6 = reinterpret_cast<signed char>(eax5->f20());
        if (!al6) 
            break;
        edx7 = *esi4->f0;
        al8 = reinterpret_cast<signed char>(edx7->f20());
        if (!al8) 
            break;
        eax9 = *esi4->f12;
        al10 = reinterpret_cast<signed char>(eax9->f20());
        if (!al10) 
            break;
        edx11 = *esi4->f20;
        al12 = reinterpret_cast<signed char>(edx11->f20());
        if (!al12) 
            break;
        eax13 = *esi4->f28;
        al14 = reinterpret_cast<signed char>(eax13->f20());
        if (!al14) 
            break;
        ++edi3;
        esi4 = reinterpret_cast<struct s364*>(&esi4->pad12);
    } while (edi3 < 2);
    goto addr_0x1800f461_8;
    return 0;
    addr_0x1800f461_8:
    edx15 = *ebx2->f1388;
    al16 = reinterpret_cast<signed char>(edx15->f20());
    return static_cast<unsigned char>(reinterpret_cast<uint1_t>(al16 == 0));
}

int16_t fun_1800f4e0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** esi7;
    void** eax8;
    void** eax9;
    void** eax10;
    void** edx11;

    eax8 = fun_1802b2bb(ecx, 0x588, esi7, __return_address(), a2, a3, a4, a5, a6);
    if (!eax8 || (*reinterpret_cast<int16_t*>(&eax8) = fun_1800e7c0(eax8, a3), !eax8)) {
        return 4;
    } else {
        eax9 = a4;
        *reinterpret_cast<int16_t*>(&eax9) = fun_1800ea10(eax8, eax9, a5);
        if (!eax9) {
            *reinterpret_cast<void***>(a2) = eax8;
            eax10 = eax9;
            return *reinterpret_cast<int16_t*>(&eax10);
        } else {
            edx11 = *reinterpret_cast<void***>(eax8);
            *reinterpret_cast<void***>(edx11)(eax8);
            goto esi7;
        }
    }
}

int16_t fun_1800f730(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_1800f750(ecx);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_18011130(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18011150(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s369 {
    signed char[402726636] pad402726636;
    signed char f402726636;
};

void fun_18011e10(struct s131* ecx, void* a2, void** a3, uint32_t a4) {
    struct s369* eax5;
    int32_t ecx6;
    struct s135* edx7;
    struct s136* eax8;
    struct s137* edx9;
    int32_t esi10;
    struct s138** ecx11;
    struct s138* eax12;
    struct s139** ecx13;
    struct s139* edx14;
    struct s138** ecx15;
    struct s138* eax16;
    struct s139** ecx17;
    struct s139* edx18;

    fun_180131a0(ecx, a2, a3, a4);
    eax5 = reinterpret_cast<struct s369*>(reinterpret_cast<int32_t>(a2) + 0xfffffffe);
    if (reinterpret_cast<uint32_t>(eax5) > 10) 
        goto addr_0x18011ecf_2;
    ecx6 = 0;
    *reinterpret_cast<signed char*>(&ecx6) = *reinterpret_cast<signed char*>(reinterpret_cast<uint32_t>(eax5) + reinterpret_cast<int32_t>(fun_18011eec));
    switch (ecx6) {
    case 0:
        edx7 = ecx->f1428;
        edx7->f4(&ecx->f1428);
        eax8 = ecx->f1660;
        eax8->f4(&ecx->f1660);
        goto a3;
    case 1:
        edx9 = ecx->f2692;
        edx9->f4(&ecx->f2692);
        goto esi10;
    case 2:
        ecx11 = ecx->f3120;
        eax12 = *ecx11;
        eax12->f4();
        ecx13 = ecx->f3124;
        edx14 = *ecx13;
        edx14->f4();
        goto a3;
    case 3:
        ecx15 = ecx->f3120;
        eax16 = *ecx15;
        eax16->f4(2, a3, a4);
        ecx17 = ecx->f3124;
        edx18 = *ecx17;
        edx18->f4(2, a3, a4, 2, a3, a4);
        addr_0x18011ecf_2:
    case 4:
        return;
    }
}

struct s371 {
    signed char[20] pad20;
    int32_t f20;
};

struct s370 {
    signed char[3152] pad3152;
    struct s371** f3152;
};

struct s372 {
    struct s371** f0;
    struct s371** f4;
};

signed char fun_18012550(struct s370* ecx) {
    struct s372* esi2;
    struct s371** ecx3;
    struct s371* eax4;
    signed char al5;

    esi2 = reinterpret_cast<struct s372*>(&ecx->f3152);
    ecx3 = ecx->f3152;
    if (!ecx3) {
        addr_0x18012574_2:
        return 1;
    } else {
        do {
            eax4 = *ecx3;
            al5 = reinterpret_cast<signed char>(eax4->f20());
            if (!al5) 
                break;
            ecx3 = esi2->f4;
            esi2 = reinterpret_cast<struct s372*>(&esi2->f4);
        } while (ecx3);
        goto addr_0x18012574_2;
    }
    return 0;
}

int16_t fun_180125b0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44, void** a45, void** a46, void** a47, void** a48, void** a49, void** a50, void** a51, void** a52, void** a53, void** a54, void** a55, void** a56, void** a57, void** a58, void** a59, void** a60, void** a61, void** a62, void** a63, void** a64, void** a65, void** a66, void** a67, void** a68, void** a69, void** a70, void** a71, void** a72, void** a73, void** a74, void** a75, void** a76, void** a77, void** a78, void** a79, void** a80, void** a81, void** a82, void** a83, void** a84, void** a85, void** a86, void** a87, void** a88, void** a89, void** a90, void** a91, void** a92) {
    void** esi93;
    void** eax94;
    void** eax95;
    void** edi96;
    void** eax97;
    void** edx98;

    eax94 = fun_1802b2bb(ecx, 0xca8, esi93, __return_address(), a2, a3, a4, a5, a6);
    if (!eax94 || (*reinterpret_cast<int16_t*>(&eax94) = fun_18010fe0(eax94, a3), !eax94)) {
        return 4;
    } else {
        eax95 = a4;
        *reinterpret_cast<int16_t*>(&eax95) = fun_180112c0(eax94, eax95, a5, edi96, esi93, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92);
        if (!eax95) {
            *reinterpret_cast<void***>(a2) = eax94;
            eax97 = eax95;
            return *reinterpret_cast<int16_t*>(&eax97);
        } else {
            edx98 = *reinterpret_cast<void***>(eax94);
            *reinterpret_cast<void***>(edx98)(eax94);
            goto esi93;
        }
    }
}

struct s373 {
    signed char[56] pad56;
    signed char f56;
    signed char[3] pad60;
    signed char f60;
    signed char[7] pad68;
    signed char f68;
    signed char[3] pad72;
    signed char f72;
    signed char[3] pad76;
    signed char f76;
};

void fun_18012750(struct s373* ecx, int32_t a2, signed char* a3, uint32_t a4, uint32_t* a5) {
    uint32_t eax6;
    signed char* ecx7;

    eax6 = reinterpret_cast<uint32_t>(a2 - 1);
    if (eax6 > 4) {
        if (a5) {
            *a5 = 0;
        }
        return;
    }
    switch (eax6) {
    case 0:
        ecx7 = &ecx->f68;
        break;
    case 1:
        ecx7 = &ecx->f72;
        break;
    case 2:
        ecx7 = &ecx->f56;
        break;
    case 3:
        ecx7 = &ecx->f60;
        break;
    case 4:
        ecx7 = &ecx->f76;
    }
    fun_180127c0(a3, a4, a5, ecx7, 4);
    return;
}

void fun_1801289e() {
}

struct s374 {
    signed char[24] pad24;
    int32_t f24;
    signed char[96] pad124;
    signed char f124;
};

void fun_180128e0(struct s374* ecx, int32_t a2) {
    unsigned char ah3;

    __asm__("fld dword [ecx+0x18]");
    __asm__("fcomp dword [esp+0x4]");
    __asm__("fnstsw ax");
    if (!(ah3 & 64)) {
        __asm__("fld dword [esp+0x4]");
        __asm__("fmul dword [ecx+0x14]");
        ecx->f124 = 1;
        ecx->f24 = a2;
        __asm__("fstp dword [ecx+0x1c]");
    }
    return;
}

int16_t fun_18012910(void** ecx, void** a2, void** a3, void** a4) {
    void** esi5;
    uint32_t ecx6;
    uint32_t eax7;
    uint32_t eax8;
    uint32_t ecx9;
    void** eax10;
    void** bl11;
    int1_t zf12;
    void** v13;
    void** v14;
    void** edx15;

    esi5 = a2;
    if (reinterpret_cast<signed char>(esi5) < reinterpret_cast<signed char>(0)) {
        ecx6 = (0x167 - reinterpret_cast<unsigned char>(esi5) - __intrinsic() >> 1) + __intrinsic() >> 8;
        eax7 = ecx6 + ecx6 * 4;
        esi5 = esi5 + (eax7 + eax7 * 8) * 8;
    }
    if (reinterpret_cast<signed char>(esi5) >= reinterpret_cast<signed char>(0x168)) {
        eax8 = (reinterpret_cast<unsigned char>(esi5) - __intrinsic() >> 1) + __intrinsic() >> 8;
        ecx9 = (reinterpret_cast<int32_t>(-eax8) << 2) - eax8;
        esi5 = esi5 + (ecx9 + ecx9 * 8) * 8;
    }
    if (reinterpret_cast<signed char>(a4) > reinterpret_cast<signed char>(90)) {
    }
    if (reinterpret_cast<signed char>(a4) < reinterpret_cast<signed char>(0xffffffa6)) {
    }
    eax10 = a4;
    bl11 = reinterpret_cast<void**>(0);
    zf12 = *reinterpret_cast<void***>(ecx + 52) == 0;
    v13 = reinterpret_cast<void**>(0);
    v14 = reinterpret_cast<void**>(0);
    if (!zf12 || *reinterpret_cast<void***>(ecx + 32) != esi5) {
        *reinterpret_cast<void***>(ecx + 32) = esi5;
        bl11 = reinterpret_cast<void**>(1);
    }
    if (*reinterpret_cast<void***>(ecx + 36) != eax10) {
        *reinterpret_cast<void***>(ecx + 36) = eax10;
        v13 = reinterpret_cast<void**>(1);
    }
    __asm__("fld dword [edi+0x28]");
    __asm__("fcomp dword [esp+0x18]");
    __asm__("fnstsw ax");
    if (!(*reinterpret_cast<unsigned char*>(&eax10 + 1) & 64)) {
        v14 = reinterpret_cast<void**>(1);
        *reinterpret_cast<void***>(ecx + 40) = a3;
        fun_18012ca0(ecx);
        eax10 = *reinterpret_cast<void***>(ecx);
        *reinterpret_cast<void***>(eax10 + 60)(ecx);
    }
    if (bl11) {
        edx15 = *reinterpret_cast<void***>(ecx);
        *reinterpret_cast<void***>(edx15 + 52)(ecx);
    }
    if (v13) {
        eax10 = *reinterpret_cast<void***>(ecx);
        *reinterpret_cast<void***>(eax10 + 56)(ecx);
    }
    if (bl11 || (v13 || (eax10 = v14, !!eax10) && (eax10 = *reinterpret_cast<void***>(ecx + 52), !eax10))) {
        *reinterpret_cast<int16_t*>(&eax10) = fun_18012a30(ecx);
    }
    return *reinterpret_cast<int16_t*>(&eax10);
}

int16_t fun_18013070(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18013090(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

void fun_180130f0() {
    return;
}

struct s376 {
    struct s376* f0;
    struct s376** f4;
    int32_t f8;
};

struct s375 {
    signed char[20] pad20;
    int32_t f20;
    struct s376* f24;
    signed char[8] pad36;
    struct s376* f36;
};

void fun_18013120(struct s375* ecx, int32_t a2) {
    struct s376* edx3;
    struct s376* esi4;
    int32_t edi5;
    struct s376* eax6;

    edx3 = ecx->f24;
    esi4 = reinterpret_cast<struct s376*>(&ecx->f24);
    if (edx3 != esi4) {
        edi5 = a2;
        do {
            if (edx3->f8 != edi5) {
                edx3 = edx3->f0;
            } else {
                eax6 = edx3;
                edx3 = edx3->f0;
                *eax6->f4 = eax6->f0;
                eax6->f0->f4 = eax6->f4;
                eax6->f0 = ecx->f36;
                ecx->f36 = eax6;
                ecx->f20 = ecx->f20 - 1;
            }
        } while (edx3 != esi4);
    }
    return;
}

void fun_180135ae() {
}

struct s378 {
    signed char[16] pad16;
    int32_t f16;
};

struct s377 {
    signed char[24] pad24;
    struct s378** f24;
    signed char[80] pad108;
    struct s378*** f108;
};

void fun_18013df0(struct s377* ecx) {
    struct s377* edi2;
    struct s378*** esi3;
    struct s378* eax4;

    edi2 = ecx;
    esi3 = &edi2->f24;
    if (esi3 != edi2->f108) {
        do {
            eax4 = **esi3;
            eax4->f16();
            ++esi3;
        } while (esi3 != edi2->f108);
    }
    return;
}

struct s380 {
    signed char[20] pad20;
    int32_t f20;
};

struct s379 {
    signed char[24] pad24;
    struct s380** f24;
    signed char[80] pad108;
    struct s380*** f108;
};

signed char fun_18013e20(struct s379* ecx) {
    struct s379* edi2;
    struct s380*** esi3;
    struct s380* eax4;
    signed char al5;

    edi2 = ecx;
    esi3 = &edi2->f24;
    if (esi3 == edi2->f108) {
        addr_0x18013e43_2:
        return 1;
    } else {
        do {
            eax4 = **esi3;
            al5 = reinterpret_cast<signed char>(eax4->f20());
            if (!al5) 
                break;
            ++esi3;
        } while (esi3 != edi2->f108);
        goto addr_0x18013e43_2;
    }
    return 0;
}

int16_t fun_18013f20(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18013f40(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s382 {
    signed char[32] pad32;
    int32_t f32;
};

struct s381 {
    signed char[16] pad16;
    struct s382** f16;
};

void fun_18014e30(struct s381* ecx, int32_t a2, int32_t* a3) {
    struct s382* eax4;
    int32_t v5;

    if (!(a2 - 2)) {
        eax4 = *ecx->f16;
        v5 = *a3;
        eax4->f32(v5);
    }
    return;
}

int32_t fun_18014e50() {
    return 0;
}

int16_t fun_18015050(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18015070(ecx);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

void fun_18015090(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8) {
    void** al9;

    if (!a2) {
        al9 = reinterpret_cast<void**>(static_cast<unsigned char>(reinterpret_cast<uint1_t>(!!*reinterpret_cast<void***>(a3))));
        if (al9 != *reinterpret_cast<void***>(ecx + 12)) {
            *reinterpret_cast<void***>(ecx + 12) = al9;
            fun_180150e0(ecx, __return_address(), a2, a3, a4, a5, a6, a7, a8);
        }
    } else {
        if (a2 == 3) {
            *reinterpret_cast<void***>(ecx + 0x7c) = *reinterpret_cast<void***>(a3);
            fun_180150e0(ecx, __return_address(), a2, a3, a4, a5, a6, a7, a8);
            return;
        } else {
            if (reinterpret_cast<int1_t>(a2 == 7)) {
                *reinterpret_cast<void***>(ecx + 8) = *reinterpret_cast<void***>(a3);
                return;
            }
        }
    }
    return;
}

struct s384 {
    signed char[20] pad20;
    int32_t f20;
};

struct s383 {
    signed char[13] pad13;
    signed char f13;
    signed char[2] pad16;
    void** f16;
    signed char[39] pad56;
    void** f56;
    signed char[39] pad96;
    void** f96;
    signed char[19] pad116;
    struct s384** f116;
};

void fun_18015170(struct s383* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15) {
    void** edi16;
    void** esi17;
    void** ebp18;
    void** ebx19;
    struct s384** ecx20;
    struct s384* eax21;

    ecx->f13 = 0;
    fun_18018f60(&ecx->f16, a2, a3, a4, edi16, esi17, ebp18, ebx19, __return_address(), a2, a3, a4, a5, a6, a7);
    fun_18018da0(&ecx->f56, a2, a3, a4, edi16, esi17, ebp18, ebx19, __return_address());
    fun_18018bf0(&ecx->f96, a2, a3, a4, edi16, esi17, ebp18, ebx19, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
    ecx20 = ecx->f116;
    eax21 = *ecx20;
    eax21->f20();
    goto ebp18;
}

void fun_18015430(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8) {
    void** ecx9;
    void** edx10;
    void** ecx11;
    void** eax12;
    int32_t ebp13;
    void** v14;
    void** edi15;
    void** esi16;
    void** v17;
    void** ecx18;
    void** edx19;
    void** ecx20;
    void** edx21;

    if (!reinterpret_cast<int1_t>(a2 == 3) || reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 8)) & 8) {
        ecx9 = *reinterpret_cast<void***>(ecx + 0x6c);
        edx10 = *reinterpret_cast<void***>(ecx9);
        *reinterpret_cast<void***>(edx10 + 4)();
        ecx11 = *reinterpret_cast<void***>(ecx + 0x68);
        eax12 = *reinterpret_cast<void***>(ecx11);
        *reinterpret_cast<void***>(eax12 + 4)();
        goto ebp13;
    } else {
        v14 = *reinterpret_cast<void***>(a3);
        fun_1800cf10(ecx, 0xfffffed4, edi15, esi16, v14, v17, __return_address(), a2, a3, a4, a5, a6, a7, a8);
        __asm__("fmul dword [edi+0x4]");
        ecx18 = *reinterpret_cast<void***>(ecx + 0x6c);
        __asm__("fstp dword [esp+0x18]");
        edx19 = *reinterpret_cast<void***>(ecx18);
        *reinterpret_cast<void***>(edx19 + 4)(3);
        ecx20 = *reinterpret_cast<void***>(ecx + 0x68);
        edx21 = *reinterpret_cast<void***>(ecx20);
        *reinterpret_cast<void***>(edx21 + 4)();
        goto reinterpret_cast<int32_t>(__zero_stack_offset()) - 8 - 4 - 4 - 4 - 4 + 4 + 4 + 8;
    }
}

int16_t fun_180157b0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_180157d0(ecx);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s385 {
    void** f0;
    signed char[3] pad4;
    void** f4;
};

void fun_18015800(void** ecx, int32_t a2, struct s385* a3) {
    void** al4;

    switch (a2) {
    case 0:
        al4 = reinterpret_cast<void**>(static_cast<unsigned char>(reinterpret_cast<uint1_t>(!!a3->f0)));
        if (*reinterpret_cast<void***>(ecx + 4) != al4) {
            *reinterpret_cast<void***>(ecx + 4) = al4;
            fun_18015950(ecx);
            return;
        }
    case 1:
        *reinterpret_cast<void***>(ecx + 12) = a3->f0;
        fun_18015950(ecx);
        return;
    case 2:
        *reinterpret_cast<void***>(ecx + 16) = a3->f0;
        fun_18015950(ecx);
        return;
    case 3:
        *reinterpret_cast<void***>(ecx + 20) = a3->f0;
        *reinterpret_cast<void***>(ecx + 24) = a3->f4;
        fun_18015950(ecx);
        return;
    case 4:
        *reinterpret_cast<void***>(ecx + 28) = a3->f0;
        *reinterpret_cast<void***>(ecx + 32) = a3->f4;
        fun_180158c0(ecx);
        return;
    case 5:
        *reinterpret_cast<void***>(ecx + 36) = a3->f0;
        fun_180158c0(ecx);
        break;
    case 7:
        *reinterpret_cast<void***>(ecx + 8) = a3->f0;
        return;
    case 6:
        goto 0x1801589a;
    }
    return;
}

void fun_18015a00() {
    return;
}

int16_t fun_18015c60(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18015c80(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s387 {
    signed char[24] pad24;
    int32_t f24;
    signed char[4] pad32;
    int32_t f32;
};

struct s388 {
    signed char[24] pad24;
    int32_t f24;
};

struct s386 {
    signed char[256] pad256;
    struct s387** f256;
    struct s388** f260;
    signed char[16] pad280;
    unsigned char f280;
};

void fun_18015d20(struct s386* ecx, int32_t a2, int32_t* a3) {
    int32_t eax4;
    struct s387*** esi5;
    int32_t edi6;
    struct s387** ecx7;
    struct s387* edx8;
    unsigned char al9;
    struct s387* edx10;
    struct s388* eax11;

    eax4 = a2 - 6;
    if (!eax4) {
        esi5 = &ecx->f256;
        edi6 = 2;
        do {
            ecx7 = *esi5;
            edx8 = *ecx7;
            edx8->f32();
            ++esi5;
            --edi6;
        } while (edi6);
    } else {
        if (!(eax4 - 2) && ((al9 = static_cast<unsigned char>(reinterpret_cast<uint1_t>(!!*a3)), al9 != ecx->f280) && (ecx->f280 = al9, !al9))) {
            edx10 = *ecx->f256;
            edx10->f24();
            eax11 = *ecx->f260;
            eax11->f24();
            return;
        }
    }
    return;
}

struct s390 {
    signed char[20] pad20;
    int32_t f20;
};

struct s389 {
    signed char[264] pad264;
    struct s390** f264;
};

struct s392 {
    signed char[20] pad20;
    int32_t f20;
};

struct s391 {
    struct s390** f0;
    signed char[4] pad8;
    struct s392** f8;
};

struct s393 {
    signed char[20] pad20;
    int32_t f20;
};

signed char fun_18015f10(struct s389* ecx) {
    int32_t edi2;
    struct s391* esi3;
    struct s393* eax4;
    signed char al5;
    struct s390* edx6;
    signed char al7;
    struct s392* eax8;
    signed char al9;

    edi2 = 0;
    esi3 = reinterpret_cast<struct s391*>(&ecx->f264);
    do {
        eax4 = **reinterpret_cast<struct s393***>(reinterpret_cast<int32_t>(esi3) - 8);
        al5 = reinterpret_cast<signed char>(eax4->f20());
        if (!al5) 
            break;
        edx6 = *esi3->f0;
        al7 = reinterpret_cast<signed char>(edx6->f20());
        if (!al7) 
            break;
        if (!esi3->f8) 
            continue;
        eax8 = *esi3->f8;
        al9 = reinterpret_cast<signed char>(eax8->f20());
        if (!al9) 
            break;
        ++edi2;
        esi3 = reinterpret_cast<struct s391*>(&esi3->pad8);
    } while (edi2 < 2);
    goto addr_0x18015f4a_7;
    return 0;
    addr_0x18015f4a_7:
    return 1;
}

int16_t fun_180160a0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_180160c0(ecx);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s395 {
    signed char[24] pad24;
    int32_t f24;
    signed char[4] pad32;
    int32_t f32;
};

struct s394 {
    signed char[144] pad144;
    struct s395** f144;
    unsigned char f148;
};

void fun_18016540(struct s394* ecx, int32_t a2, int32_t* a3) {
    int32_t eax4;
    struct s395* eax5;
    int32_t v6;
    unsigned char al7;
    struct s395* edx8;

    eax4 = a2 - 6;
    if (!eax4) {
        eax5 = *ecx->f144;
        v6 = *a3;
        eax5->f32(v6);
    } else {
        if (!(eax4 - 2) && ((al7 = static_cast<unsigned char>(reinterpret_cast<uint1_t>(!!*a3)), al7 != ecx->f148) && (ecx->f148 = al7, !al7))) {
            edx8 = *ecx->f144;
            edx8->f24();
            return;
        }
    }
    return;
}

struct s397 {
    signed char[20] pad20;
    int32_t f20;
};

struct s398 {
    signed char[20] pad20;
    int32_t f20;
};

struct s396 {
    signed char[144] pad144;
    struct s397** f144;
    signed char[4] pad152;
    struct s398** f152;
};

signed char fun_180166c0(struct s396* ecx) {
    struct s396* esi2;
    int32_t edi3;
    struct s397* eax4;
    signed char al5;
    struct s398* edx6;
    signed char al7;

    esi2 = ecx;
    edi3 = 0;
    do {
        eax4 = *esi2->f144;
        al5 = reinterpret_cast<signed char>(eax4->f20());
        if (!al5) 
            break;
        edx6 = *esi2->f152;
        al7 = reinterpret_cast<signed char>(edx6->f20());
        if (!al7) 
            break;
        ++edi3;
    } while (edi3 < 2);
    goto addr_0x180166ea_5;
    return 0;
    addr_0x180166ea_5:
    return 1;
}

int16_t fun_18016d90(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18016db0(ecx);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s399 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

void fun_180173f0(struct s399* a1) {
    void** edx2;
    void** edx3;
    void** edx4;
    void** edx5;

    edx2 = g18043450;
    a1->f0 = edx2;
    edx3 = g18043454;
    a1->f4 = edx3;
    edx4 = g18043458;
    a1->f8 = edx4;
    edx5 = g1804345c;
    a1->f12 = edx5;
    return;
}

struct s400 {
    int32_t f0;
    void** f4;
};

int16_t fun_18017670(struct s400* a1, struct s262* a2, int32_t a3, int32_t a4, uint32_t a5) {
    void** eax6;
    void** ecx7;
    void** edi8;
    int1_t zf9;
    struct s158* eax10;
    int32_t ecx11;
    struct s158* eax12;
    int32_t ecx13;
    int16_t ax14;
    struct s158* ecx15;
    int32_t edx16;
    int16_t ax17;
    struct s158* ecx18;
    int32_t edx19;
    int16_t ax20;

    if (a5 && ((eax6 = a1->f4, ecx7 = (&a1->f4)[4], edi8 = g18043450, eax6 == edi8) && ((zf9 = ecx7 == g18043454, zf9) && a2->f4 == 1))) {
        eax6 = a2->f8;
        if (eax6 == 8) {
            __asm__("fld dword [0x18034b48]");
            __asm__("fmul dword [esp+0x24]");
            eax10 = a2->f0;
            __asm__("fstp dword [esp]");
            __asm__("fld dword [0x18034b48]");
            __asm__("fmul dword [esp+0x28]");
            ecx11 = a1->f0;
            __asm__("fstp dword [esp]");
            *reinterpret_cast<int16_t*>(&eax6) = fun_180177a0(ecx11, eax10, a2, a2, a5);
        } else {
            if (eax6 == 16) {
                __asm__("fld dword [0x18034b48]");
                __asm__("fmul dword [esp+0x24]");
                eax12 = a2->f0;
                __asm__("fstp dword [esp]");
                __asm__("fld dword [0x18034b48]");
                __asm__("fmul dword [esp+0x28]");
                ecx13 = a1->f0;
                __asm__("fstp dword [esp]");
                ax14 = fun_18017850(ecx13, eax12, a2, a2, a5);
                return ax14;
            } else {
                if (reinterpret_cast<int1_t>(eax6 == 32)) {
                    __asm__("fld dword [esp+0x20]");
                    __asm__("fcomp dword [0x18034238]");
                    __asm__("fnstsw ax");
                    if (!(*reinterpret_cast<unsigned char*>(&eax6 + 1) & 64) || !(*reinterpret_cast<unsigned char*>(&eax6 + 1) & 64)) {
                        ecx15 = a2->f0;
                        edx16 = a1->f0;
                        ax17 = fun_18017340(edx16, ecx15, a3, a4, a5);
                        return ax17;
                    } else {
                        ecx18 = a2->f0;
                        edx19 = a1->f0;
                        ax20 = fun_180178f0(edx19, ecx18, a5);
                        return ax20;
                    }
                }
            }
        }
    }
    return *reinterpret_cast<int16_t*>(&eax6);
}

int16_t fun_18017970(int32_t* a1, struct s158** a2, uint32_t a3) {
    int32_t ecx4;
    struct s158* v5;
    int16_t ax6;

    ecx4 = *a1;
    v5 = *a2;
    ax6 = fun_180178f0(ecx4, v5, a3);
    return ax6;
}

int16_t fun_180179e0(int32_t* a1, int32_t* a2, int32_t a3) {
    int32_t ecx4;
    int32_t v5;
    int16_t ax6;

    ecx4 = *a1;
    v5 = *a2;
    ax6 = fun_18017a00(ecx4, v5, a3);
    return ax6;
}

int16_t fun_18017a30(void*** a1, int32_t a2, uint32_t a3) {
    void** eax4;
    int16_t ax5;

    eax4 = *a1;
    ax5 = fun_180172a0(eax4, eax4, a2, 0, a3);
    return ax5;
}

int16_t fun_18017a80(int32_t* a1, int32_t a2) {
    int32_t eax3;
    int32_t ecx4;

    __asm__("fld dword [0x1803422c]");
    eax3 = *a1;
    if (a2) {
        ecx4 = a2 - 1 + 1;
        do {
            __asm__("fadd dword [eax]");
            eax3 = eax3 + 4;
            --ecx4;
        } while (ecx4);
    }
    return *reinterpret_cast<int16_t*>(&eax3);
}

void fun_18017ab0(int32_t* a1, int32_t a2) {
    int32_t v3;

    v3 = *a1;
    fun_18017ad0(a2, v3, a2);
    return;
}

int16_t fun_18017b00(int32_t* a1, int32_t a2) {
    int32_t eax3;
    int32_t ecx4;

    __asm__("fld dword [0x1803422c]");
    eax3 = *a1;
    if (a2) {
        ecx4 = a2 - 1 + 1;
        do {
            __asm__("fld dword [eax]");
            __asm__("fld st0");
            __asm__("fmul st0, st1");
            eax3 = eax3 + 4;
            --ecx4;
            __asm__("faddp st2, st0");
            __asm__("fstp st0");
        } while (ecx4);
    }
    return *reinterpret_cast<int16_t*>(&eax3);
}

void fun_18017b30(int32_t** a1, int32_t* a2, uint32_t a3) {
    int32_t eax4;
    int32_t* ecx5;

    eax4 = *a2;
    ecx5 = *a1;
    fun_1801add0(ecx5, ecx5, eax4, a3);
    return;
}

void fun_18017b80(int32_t a1, int32_t a2) {
    int32_t eax3;
    int32_t edx4;

    __asm__("fld dword [0x18034b50]");
    eax3 = a2 - 1;
    if (a2) {
        edx4 = eax3 + 1;
        do {
            __asm__("fcom dword [ecx]");
            __asm__("fnstsw ax");
            if (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax3) + 1) & 1) {
                __asm__("fstp st0");
                __asm__("fld dword [ecx]");
            }
            --edx4;
        } while (edx4);
    }
    return;
}

int16_t fun_18017bb0(int32_t* a1, int32_t a2) {
    int32_t eax3;

    eax3 = *a1;
    fun_18017ad0(a2, eax3, a2);
    __asm__("fcomp dword [0x18034b54]");
    __asm__("fnstsw ax");
    if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax3) + 1) & 65)) {
        return 0;
    } else {
        return 1;
    }
}

struct s401 {
    unsigned char* f0;
    void** f4;
    signed char[3] pad8;
    int32_t f8;
};

struct s402 {
    void** f0;
    signed char[3] pad4;
    void** f4;
};

int16_t fun_18018050(int16_t** a1, struct s401* a2, int32_t a3, int32_t a4, void** a5) {
    void** eax6;
    struct s402* ecx7;
    void** edx8;
    void** edi9;
    int1_t zf10;
    int32_t v11;
    int32_t v12;
    int16_t* ecx13;
    unsigned char* v14;
    int16_t* ecx15;
    unsigned char* v16;
    int16_t ax17;
    unsigned char* ecx18;
    int16_t* v19;
    int16_t ax20;
    unsigned char* ecx21;
    int16_t* eax22;
    int16_t ax23;

    eax6 = a5;
    if (eax6) {
        ecx7 = reinterpret_cast<struct s402*>(&a2->f4);
        eax6 = ecx7->f0;
        edx8 = ecx7->f4;
        edi9 = g18043440;
        if (eax6 != edi9 || ((zf10 = edx8 == g18043444, !zf10) || (!(*reinterpret_cast<unsigned char*>(&eax6 + 1) & 64) || !(*reinterpret_cast<unsigned char*>(&eax6 + 1) & 64)))) {
            if (reinterpret_cast<int1_t>(ecx7->f0 == 1)) {
                __asm__("fld dword [ebp+0x10]");
                __asm__("fmul dword [0x18034548]");
                __asm__("fstp dword [ebp+0xc]");
                __asm__("fld dword [ebp+0xc]");
                __asm__("fistp dword [ebp-0x4]");
                if (v11 > 0x7fff) {
                }
                if (v11 < 0xffff8000) {
                }
                __asm__("fld dword [ebp+0x14]");
                __asm__("fmul dword [0x18034548]");
                __asm__("fstp dword [ebp+0xc]");
                __asm__("fld dword [ebp+0xc]");
                __asm__("fistp dword [ebp-0x8]");
                if (!1) {
                }
                if (!1) {
                }
                eax6 = reinterpret_cast<void**>(0xffff8000);
                if (a2->f8 == 8) {
                    v12 = v11;
                    ecx13 = *a1;
                    v14 = a2->f0;
                    *reinterpret_cast<int16_t*>(&eax6) = fun_180181b0(ecx13, v14, *reinterpret_cast<int16_t*>(&v12), 0x8000, a5);
                } else {
                    if (a2->f8 == 16) {
                        ecx15 = *a1;
                        v16 = a2->f0;
                        ax17 = fun_180182e0(ecx15, v16, v11, 0x8000, a5);
                        return ax17;
                    } else {
                        if (a2->f8 == 32) {
                            ecx18 = a2->f0;
                            v19 = *a1;
                            ax20 = fun_18018420(ecx18, v19, ecx18, a3, a4, a5);
                            return ax20;
                        }
                    }
                }
            }
        } else {
            ecx21 = a2->f0;
            eax22 = *a1;
            ax23 = fun_180184a0(eax22, ecx21, a5);
            return ax23;
        }
    }
    return *reinterpret_cast<int16_t*>(&eax6);
}

int16_t fun_18018550(int16_t** a1, unsigned char** a2, void** a3) {
    int16_t* ecx4;
    unsigned char* v5;
    int16_t ax6;

    ecx4 = *a1;
    v5 = *a2;
    ax6 = fun_180184a0(ecx4, v5, a3);
    return ax6;
}

void fun_18018640(void** a1, void** a2, uint32_t a3) {
    void* ecx4;
    void* v5;

    ecx4 = *a1;
    v5 = *a2;
    fun_18018660(ecx4, v5, a3);
    return;
}

void fun_180186f0(int16_t** a1) {
    int32_t v2;
    int32_t v3;
    int16_t* v4;
    uint32_t v5;

    __asm__("fld dword [ebp+0xc]");
    __asm__("fmul dword [0x18034548]");
    __asm__("fstp dword [ebp+0xc]");
    __asm__("fld dword [ebp+0xc]");
    __asm__("fistp dword [ebp-0x4]");
    if (v2 > 0x7fff) {
    }
    if (v2 < 0xffff8000) {
    }
    v3 = v2;
    v4 = *a1;
    fun_18018750(v4, *reinterpret_cast<int16_t*>(&v3), v5, 0xffff8000, 0x7fff);
    return;
}

void fun_180187f0(int16_t** a1, int16_t** a2, int32_t a3) {
    int16_t* ecx4;
    int16_t* eax5;
    int32_t edx6;
    int32_t esi7;

    ecx4 = *a2;
    eax5 = *a1;
    if (a3) {
        edx6 = a3 - 1 + 1;
        do {
            esi7 = *eax5 * *ecx4 >> 15;
            *eax5 = *reinterpret_cast<int16_t*>(&esi7);
            ++ecx4;
            ++eax5;
            --edx6;
        } while (edx6);
    }
    return;
}

int16_t fun_18018830(int32_t* a1, int32_t a2) {
    int32_t eax3;
    int32_t ecx4;

    __asm__("fld dword [0x1803422c]");
    eax3 = *a1;
    if (a2) {
        ecx4 = a2 - 1 + 1;
        do {
            eax3 = eax3 + 2;
            __asm__("fiadd dword [esp+0x4]");
            --ecx4;
        } while (ecx4);
    }
    __asm__("fmul dword [0x18034bcc]");
    return *reinterpret_cast<int16_t*>(&eax3);
}

int16_t fun_18018870(int32_t* a1, int32_t a2) {
    int32_t eax3;
    int32_t ecx4;

    __asm__("fld dword [0x1803422c]");
    eax3 = *a1;
    if (a2) {
        ecx4 = a2 - 1 + 1;
        do {
            eax3 = eax3 + 2;
            __asm__("fild dword [esp+0x4]");
            --ecx4;
            __asm__("fabs ");
            __asm__("faddp st1, st0");
        } while (ecx4);
    }
    __asm__("fmul dword [0x18034bcc]");
    return *reinterpret_cast<int16_t*>(&eax3);
}

int16_t fun_180188b0(int32_t* a1, int32_t a2) {
    int32_t eax3;
    int32_t ecx4;

    __asm__("fld dword [0x1803422c]");
    eax3 = *a1;
    if (a2) {
        ecx4 = a2 - 1 + 1;
        do {
            eax3 = eax3 + 2;
            __asm__("fild dword [esp+0x4]");
            --ecx4;
            __asm__("fld st0");
            __asm__("fmul st0, st1");
            __asm__("faddp st2, st0");
            __asm__("fstp st0");
        } while (ecx4);
    }
    __asm__("fld dword [0x18034bcc]");
    __asm__("fmul dword [0x18034bcc]");
    __asm__("fmulp st1, st0");
    return *reinterpret_cast<int16_t*>(&eax3);
}

int16_t fun_18018900(int16_t** a1, void** a2, uint32_t a3) {
    void* eax4;
    int16_t* ecx5;

    eax4 = *a2;
    ecx5 = *a1;
    *reinterpret_cast<int16_t*>(&eax4) = fun_1801e1f0(ecx5, ecx5, eax4, a3);
    __asm__("fild dword [esp+0x8]");
    __asm__("fmul dword [0x18034bcc]");
    return *reinterpret_cast<int16_t*>(&eax4);
}

void fun_18018970(int16_t** a1, int32_t a2) {
    int32_t edx3;
    int16_t* ecx4;
    int32_t eax5;
    int32_t esi6;

    edx3 = 0xffff8000;
    ecx4 = *a1;
    eax5 = a2 - 1;
    if (a2) {
        esi6 = eax5 + 1;
        do {
            *reinterpret_cast<int16_t*>(&eax5) = *ecx4;
            if (*reinterpret_cast<int16_t*>(&eax5) > *reinterpret_cast<int16_t*>(&edx3)) {
                edx3 = eax5;
            }
            ++ecx4;
            --esi6;
        } while (esi6);
    }
    __asm__("fild dword [esp+0x4]");
    __asm__("fmul dword [0x18034bcc]");
    return;
}

int16_t fun_180189b0(int16_t** a1, int32_t a2) {
    int16_t* eax3;

    eax3 = *a1;
    *reinterpret_cast<int16_t*>(&eax3) = fun_180189d0(eax3, 10, a2);
    *reinterpret_cast<unsigned char*>(&eax3) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(eax3 == -1));
    return *reinterpret_cast<int16_t*>(&eax3);
}

struct s403 {
    signed char[4] pad4;
    void** f4;
    signed char[7] pad12;
    int32_t f12;
    int32_t f16;
    signed char[4] pad24;
    signed char* f24;
    signed char f28;
};

void fun_1801ae40(struct s403* ecx) {
    struct s403* esi2;
    int32_t eax3;
    signed char* edi4;
    uint32_t ecx5;
    uint32_t edx6;
    uint32_t ecx7;
    uint32_t ecx8;

    esi2 = ecx;
    fun_18022b10(&esi2->f4);
    eax3 = esi2->f12;
    edi4 = esi2->f24;
    esi2->f16 = eax3 - 1;
    ecx5 = reinterpret_cast<uint32_t>(eax3 * 8);
    edx6 = ecx5;
    ecx7 = ecx5 >> 2;
    while (ecx7) {
        --ecx7;
        *edi4 = reinterpret_cast<signed char>(0);
        edi4 = edi4 + 4;
        esi2 = reinterpret_cast<struct s403*>(&esi2->f4);
    }
    ecx8 = edx6 & 3;
    while (ecx8) {
        --ecx8;
        *edi4 = 0;
        ++edi4;
        esi2 = reinterpret_cast<struct s403*>(reinterpret_cast<int32_t>(esi2) + 1);
    }
    esi2->f28 = 1;
    return;
}

void** fun_1801ae80(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21) {
    void** edx22;
    void** eax23;
    void** esi24;
    void** v25;
    void** v26;
    void** v27;
    void** eax28;
    int1_t zf29;
    void** v30;
    void** v31;
    void** v32;
    void** edi33;
    void** ebx34;
    void** ebp35;
    void** eax36;
    int1_t zf37;
    void** edx38;
    void** eax39;
    void** ecx40;
    void** ax41;
    void** edx42;
    void** eax43;
    void** ecx44;
    void** ax45;
    void** edx46;
    void** eax47;
    void** ecx48;
    void** ax49;
    void** edi50;
    void** esi51;
    void** ebp52;
    void** ebx53;
    void** v54;
    void** v55;
    void** ax56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** ax65;

    if (a3 == 2) {
        edx22 = a2 + 20;
        eax23 = edx22 + 4;
        esi24 = *reinterpret_cast<void***>(edx22 + 4);
        v25 = *reinterpret_cast<void***>(eax23 + 4);
        v26 = *reinterpret_cast<void***>(eax23 + 8);
        v27 = *reinterpret_cast<void***>(eax23 + 12);
        eax28 = a2 + 4;
        zf29 = *reinterpret_cast<void***>(eax28) == esi24;
        v30 = *reinterpret_cast<void***>(eax28 + 4);
        v31 = *reinterpret_cast<void***>(eax28 + 8);
        v32 = *reinterpret_cast<void***>(eax28 + 12);
        if (zf29 && (v30 == v25 && ((edi33 = *reinterpret_cast<void***>(eax28), ebx34 = *reinterpret_cast<void***>(eax28 + 4), ebp35 = *reinterpret_cast<void***>(eax28 + 8), v32 = *reinterpret_cast<void***>(eax28 + 12), eax36 = g18043450, v31 = ebp35, edi33 == eax36) && ((zf37 = ebx34 == g18043454, zf37) && reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a1 + 4) == 2))))) {
            if (*reinterpret_cast<void***>(a1 + 8) == 8) {
                edx38 = *reinterpret_cast<void***>(edx22);
                eax39 = *reinterpret_cast<void***>(a2);
                ecx40 = *reinterpret_cast<void***>(a1);
                ax41 = fun_1801b0a0(ecx40, eax39, edx38, a4);
                return ax41;
            } else {
                if (*reinterpret_cast<void***>(a1 + 8) == 16) {
                    edx42 = *reinterpret_cast<void***>(edx22);
                    eax43 = *reinterpret_cast<void***>(a2);
                    ecx44 = *reinterpret_cast<void***>(a1);
                    ax45 = fun_1801afc0(ecx44, eax43, edx42, a4, a5);
                    return ax45;
                } else {
                    if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a1 + 8) == 32)) {
                        edx46 = *reinterpret_cast<void***>(edx22);
                        eax47 = *reinterpret_cast<void***>(a2);
                        ecx48 = *reinterpret_cast<void***>(a1);
                        ax49 = fun_1801b140(ecx48, eax47, edx46, a4);
                        return ax49;
                    }
                }
            }
        }
        ax56 = fun_18021c40(a2, a1, a2, edx22, a4, edi50, esi51, ebp52, ebx53, v54, v25, v26, v27, v55, v30, v31, v32, __return_address());
        return ax56;
    } else {
        ax65 = fun_18019cd0(a1, a2, a3, a4, a5, edi50, esi51, ebp52, ebx53, v57, v58, v59, v60, v61, v62, v63, v64, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
        return ax65;
    }
}

void** fun_1801b180(int32_t ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28) {
    void** eax29;
    void** esi30;
    void** v31;
    void** v32;
    void** ebx33;
    int1_t zf34;
    void** eax35;
    void** esi36;
    void** eax37;
    void** ax38;
    void** edx39;
    void** ax40;
    void** edi41;
    void** ecx42;
    void** edi43;
    void** esi44;
    void** ebx45;
    void** v46;
    void** v47;

    if (a4 && ((eax29 = *reinterpret_cast<void***>(a3 + 4), esi30 = *reinterpret_cast<void***>(a3 + 4 + 4), v31 = *reinterpret_cast<void***>(a3 + 4 + 8), v32 = *reinterpret_cast<void***>(a3 + 4 + 12), ebx33 = g18043450, eax29 == ebx33) && (zf34 = esi30 == g18043454, zf34))) {
        eax35 = a2;
        esi36 = *reinterpret_cast<void***>(a3);
        if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax35 + 4) == 1)) {
            if (*reinterpret_cast<void***>(eax35 + 8) == 8) {
                eax37 = *reinterpret_cast<void***>(eax35);
                ax38 = fun_1801b2c0(ecx, eax37, esi36, a4);
                return ax38;
            } else {
                if (*reinterpret_cast<void***>(eax35 + 8) == 16) {
                    edx39 = *reinterpret_cast<void***>(eax35);
                    ax40 = fun_1801b230(edx39, esi36, a4, a5);
                    return ax40;
                } else {
                    if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax35 + 8) == 32)) {
                        edi41 = *reinterpret_cast<void***>(eax35);
                        ecx42 = a4;
                        while (ecx42) {
                            --ecx42;
                            *reinterpret_cast<void***>(edi41) = *reinterpret_cast<void***>(esi36);
                            edi41 = edi41 + 4;
                            esi36 = esi36 + 4;
                        }
                        return eax35;
                    }
                }
            }
        }
        eax29 = fun_18019ee0(eax35, a3, a4, a5, edi43, esi44, ebx45, v46, v47, v31, v32, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28);
    }
    return eax29;
}

struct s405 {
    signed char[28] pad28;
    int32_t f28;
};

struct s404 {
    signed char[12] pad12;
    int32_t f12;
    signed char[4] pad20;
    void** f20;
    signed char[3] pad24;
    void*** f24;
    void*** f28;
    void*** f32;
    struct s405** f36;
    void** f40;
};

int16_t fun_1801ba30(struct s404* ecx, void** a2, void** a3) {
    void** v4;
    void** v5;
    void** ebx6;
    void** v7;
    void** ebp8;
    void** v9;
    void** esi10;
    void** eax11;
    void*** esp12;
    void** v13;
    void** edi14;
    struct s404* esi15;
    void** v16;
    void** ebx17;
    void** v18;
    void** edx19;
    void** ecx20;
    int1_t less_or_equal21;
    void** edi22;
    void*** ebp23;
    void** ecx24;
    uint32_t eax25;
    void** v26;
    void** eax27;
    void*** ebp28;
    void** ecx29;
    void** v30;
    void** ebp31;
    void** ecx32;
    void** eax33;
    void** edx34;
    void* esp35;
    void** eax36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void* esp54;
    void** eax55;
    void** ecx56;
    void** edx57;
    int32_t ecx58;
    int32_t* esp59;
    void* esp60;
    struct s405** ecx61;
    struct s405* edx62;
    void*** esp63;
    void** eax64;
    void** v65;
    void** eax66;
    void** ecx67;
    void** edx68;
    void* esp69;
    void*** esp70;
    void** v71;
    void** v72;
    void** v73;
    void* esp74;
    void** eax75;
    void*** ecx76;
    uint32_t eax77;
    void** eax78;
    void** ecx79;
    void*** eax80;
    void** eax81;
    void** ebx82;
    void** ecx83;
    void** edx84;
    void* eax85;
    void*** ebx86;
    void* ecx87;
    void*** ebx88;
    void** eax89;
    void** ebx90;
    void** v91;
    void** v92;
    void** v93;
    void** v94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** v103;
    void** v104;

    v4 = reinterpret_cast<void**>(__return_address());
    v5 = ebx6;
    v7 = ebp8;
    v9 = esi10;
    eax11 = *reinterpret_cast<void***>(a3 + 24);
    esp12 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x8c - 4 - 4 - 4 - 4);
    v13 = edi14;
    esi15 = ecx;
    v16 = eax11;
    if (eax11 && esi15->f36) {
        ebx17 = reinterpret_cast<void**>(0);
        v18 = reinterpret_cast<void**>(0);
        while (1) {
            edx19 = *reinterpret_cast<void***>(&esi15->f20);
            ecx20 = reinterpret_cast<void**>(&esi15->f20);
            less_or_equal21 = reinterpret_cast<signed char>(reinterpret_cast<unsigned char>(eax11) - reinterpret_cast<unsigned char>(ebx17)) <= reinterpret_cast<signed char>(edx19);
            eax11 = reinterpret_cast<void**>(esp12 + 16);
            if (!less_or_equal21) {
                eax11 = ecx20;
            }
            edi22 = *reinterpret_cast<void***>(eax11);
            if (!edi22) 
                break;
            ebp23 = esi15->f32;
            ecx24 = *reinterpret_cast<void***>(ecx20);
            eax25 = reinterpret_cast<uint32_t>(ebp23) - reinterpret_cast<uint32_t>(esi15->f24);
            v26 = edi22;
            eax27 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax25) >> 2);
            if (reinterpret_cast<signed char>(ecx24) > reinterpret_cast<signed char>(eax27)) {
                ebp28 = esi15->f28;
                ecx29 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx24) - reinterpret_cast<unsigned char>(eax27));
                v30 = ecx29;
                ebp31 = reinterpret_cast<void**>(ebp28 - reinterpret_cast<unsigned char>(ecx29) * 4);
                if (reinterpret_cast<signed char>(edi22) > reinterpret_cast<signed char>(ecx29)) {
                }
                edi22 = v30;
            } else {
                ebp31 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(ebp23) - (reinterpret_cast<unsigned char>(ecx24) << 2));
            }
            ecx32 = g18043454;
            eax33 = g18043450;
            edx34 = g18043458;
            esp35 = reinterpret_cast<void*>(esp12 - 4 - 4 - 4);
            eax36 = g1804345c;
            fun_18019390(a2, reinterpret_cast<int32_t>(esp35) + 0x6c, 0x3f800000, 0, edi22, ebx17, v13, v9, v7, v5, v26, v30, v18, v37, v38, v39, v40, v41, v16, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, ebp31, eax33, ecx32, edx34, eax36, v53);
            esp54 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp35) - 4 - 4 - 4 + 20 + 4);
            eax55 = g18043454;
            ecx56 = g18043458;
            edx57 = g18043450;
            v45 = eax55;
            v46 = ecx56;
            ecx58 = esi15->f12;
            v44 = edx57;
            esp59 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esp54) - 4 - 4 - 4);
            v43 = ebp31;
            fun_180191c0(esp59 + 32, ecx58, reinterpret_cast<int32_t>(esp54) + 56, edi22);
            esp60 = reinterpret_cast<void*>(esp59 - 1 + 3 + 1);
            ecx61 = esi15->f36;
            edx62 = *ecx61;
            edx62->f28(reinterpret_cast<int32_t>(esp60) + 0x74);
            esp63 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp60) - 4 - 4 + 4 - 4);
            eax64 = a2 + 4;
            v65 = *reinterpret_cast<void***>(a2);
            v37 = *reinterpret_cast<void***>(eax64);
            v38 = *reinterpret_cast<void***>(eax64 + 4);
            v39 = *reinterpret_cast<void***>(eax64 + 8);
            eax66 = *reinterpret_cast<void***>(eax64 + 12);
            v40 = eax66;
            *reinterpret_cast<int16_t*>(&eax66) = fun_180196f0(esp63 + 32, ebx17, reinterpret_cast<int32_t>(esp60) + 0x74);
            ecx67 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v65) + reinterpret_cast<unsigned char>(eax66));
            v18 = ecx67;
            v47 = ecx67;
            v49 = v38;
            edx68 = esi15->f40;
            v48 = v37;
            v50 = v39;
            esp69 = reinterpret_cast<void*>(esp63 - 4 + 4 + 4 - 4 - 4 - 4);
            v51 = v40;
            esp70 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp69) - 4 - 4);
            fun_18019390(esp70 + 0x88, reinterpret_cast<int32_t>(esp69) + 88, edx68, 0, edi22, 0, reinterpret_cast<int32_t>(esp60) + 0x74, v13, v9, v7, v5, v26, v30, v18, v37, v38, v39, v40, v71, v16, v72, v43, v44, v45, v46, v47, v48, v49, v50, v51, v73, ebp31, eax33, ecx32, edx34, eax36);
            esp74 = reinterpret_cast<void*>(esp70 - 4 + 20 + 4);
            eax75 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<int32_t>(esi15->f28) - reinterpret_cast<uint32_t>(esi15->f32)) >> 2);
            if (reinterpret_cast<signed char>(edi22) >= reinterpret_cast<signed char>(eax75)) {
                ecx76 = esi15->f24 + (reinterpret_cast<unsigned char>(edi22) - reinterpret_cast<unsigned char>(eax75)) * 4;
            } else {
                ecx76 = esi15->f32 + reinterpret_cast<unsigned char>(edi22) * 4;
            }
            esi15->f32 = ecx76;
            if (*reinterpret_cast<void***>(&esi15->f20) != reinterpret_cast<int32_t>(reinterpret_cast<int32_t>(esi15->f28) - reinterpret_cast<uint32_t>(esi15->f24)) >> 2) {
                eax77 = reinterpret_cast<uint32_t>(ecx76) - reinterpret_cast<uint32_t>(esi15->f24);
                v26 = edi22;
                eax78 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax77) >> 2);
                if (reinterpret_cast<signed char>(edi22) > reinterpret_cast<signed char>(eax78)) {
                    ecx79 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi22) - reinterpret_cast<unsigned char>(eax78));
                    eax80 = esi15->f28;
                    v5 = ecx79;
                    eax81 = reinterpret_cast<void**>(eax80 - reinterpret_cast<unsigned char>(ecx79) * 4);
                    if (reinterpret_cast<signed char>(edi22) > reinterpret_cast<signed char>(ecx79)) {
                    }
                    ebx82 = v26;
                } else {
                    ebx82 = edi22;
                    eax81 = reinterpret_cast<void**>(ecx76 - reinterpret_cast<unsigned char>(edi22) * 4);
                }
                ecx83 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx82) * 4);
                v16 = ecx83;
                fun_1802b920(eax81, ebp31, ecx83, reinterpret_cast<int32_t>(esp60) + 0x74, v13, v9, v7, v5, v26, v30, v18, v37);
                esp74 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp74) - 4 - 4 - 4 - 4 + 4 + 12);
                if (ebx82 != edi22) {
                    edx84 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi22) - reinterpret_cast<unsigned char>(ebx82));
                    eax85 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(&esi15->f20)) - reinterpret_cast<unsigned char>(ebx82));
                    ebx86 = esi15->f32;
                    v26 = edx84;
                    ecx87 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(reinterpret_cast<uint32_t>(ebx86) - reinterpret_cast<uint32_t>(esi15->f24)) >> 2);
                    if (reinterpret_cast<int32_t>(eax85) > reinterpret_cast<int32_t>(ecx87)) {
                        ebx88 = esi15->f28;
                        eax89 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(eax85) - reinterpret_cast<uint32_t>(ecx87));
                        v5 = eax89;
                        ebx90 = reinterpret_cast<void**>(ebx88 - reinterpret_cast<unsigned char>(eax89) * 4);
                        if (reinterpret_cast<signed char>(edx84) > reinterpret_cast<signed char>(eax89)) {
                        }
                        edx84 = v26;
                    } else {
                        ebx90 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(ebx86) - (reinterpret_cast<uint32_t>(eax85) << 2));
                    }
                    fun_1802b920(ebx90, reinterpret_cast<unsigned char>(v16) + reinterpret_cast<unsigned char>(ebp31), reinterpret_cast<unsigned char>(edx84) << 2, reinterpret_cast<int32_t>(esp60) + 0x74, v13, v9, v7, v5, v26, v30, v18, v37);
                    esp74 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp74) - 4 - 4 - 4 - 4 + 4 + 12);
                }
                ebx17 = v30;
            }
            ebx17 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx17) + reinterpret_cast<unsigned char>(edi22));
            v30 = ebx17;
            fun_18019210(reinterpret_cast<int32_t>(esp74) + 0x74, reinterpret_cast<int32_t>(esp60) + 0x74, v13, v9, v7, v5, v26, v30, v18, v37, v38, v39, v40, v91, v16, v92, v43, v44, v45, v46, v47, v48, v49, v50, v51, v93, ebp31, eax33, ecx32, edx34, eax36, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v4, a2, a3);
            esp12 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp74) - 4 + 4);
            eax11 = v104;
        }
    }
    return *reinterpret_cast<int16_t*>(&eax11);
}

int16_t fun_1801c180(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** v45;
    void** esi46;
    void** eax47;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034d58);
    *reinterpret_cast<void***>(ecx + 76) = reinterpret_cast<void**>(0x180348d4);
    *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0x18034cf8);
    v45 = *reinterpret_cast<void***>(ecx + 56);
    fun_1802b2b0(ecx, v45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    *reinterpret_cast<void***>(ecx + 64) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 60) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 56) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0x180348d4);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax47 = ecx;
    return *reinterpret_cast<int16_t*>(&eax47);
}

struct s406 {
    signed char[4] pad4;
    int32_t f4;
};

int16_t fun_1801c250(struct s406* ecx, struct s154* a2) {
    int32_t v3;
    int16_t ax4;

    v3 = ecx->f4;
    ax4 = fun_18019710(a2, v3);
    return ax4;
}

int16_t fun_1801c9d0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** eax45;
    void** esi46;
    void** ecx47;
    void** eax48;

    eax45 = *reinterpret_cast<void***>(ecx + 24);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034dcc);
    fun_1802b2b0(ecx, eax45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    ecx47 = *reinterpret_cast<void***>(ecx + 28);
    fun_1802b2b0(ecx47, ecx47, eax45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43);
    *reinterpret_cast<void***>(ecx + 36) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 28) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx47, ecx, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax48 = ecx;
    return *reinterpret_cast<int16_t*>(&eax48);
}

int16_t fun_1801ca20(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s407 {
    int32_t f0;
    signed char[20] pad24;
    int32_t f24;
};

void fun_1801ce40(void** ecx, struct s407* a2) {
    void** esi3;
    int32_t ebp4;
    void** eax5;
    void** ecx6;
    void** edx7;
    void** edi8;
    uint32_t ebx9;
    void** eax10;
    uint32_t eax11;
    int32_t v12;

    esi3 = ecx;
    ebp4 = a2->f24;
    if (ebp4) {
        if (*reinterpret_cast<void***>(esi3 + 24)) {
            eax5 = fun_18017c30(ecx);
            ecx6 = *reinterpret_cast<void***>(esi3 + 12);
            edx7 = *reinterpret_cast<void***>(eax5);
            *reinterpret_cast<void***>(edx7 + 32)(eax5, a2, ecx6, ebp4);
        }
        edi8 = reinterpret_cast<void**>(0);
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi3 + 16)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(esi3 + 16) == 0))) {
            ebx9 = 0;
            do {
                eax10 = *reinterpret_cast<void***>(esi3 + 20);
                eax11 = reinterpret_cast<unsigned char>(eax10) + ebx9;
                v12 = a2->f0;
                fun_1801cee0(v12, eax11, eax11 + 16, ebp4);
                ++edi8;
                ebx9 = ebx9 + 24;
            } while (reinterpret_cast<signed char>(edi8) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi3 + 16)));
        }
    }
    return;
}

struct s408 {
    int32_t f0;
    signed char[20] pad24;
    uint32_t f24;
};

void fun_1801d0c0(void** ecx, struct s408* a2) {
    void** esi3;
    uint32_t ebp4;
    void** eax5;
    void** ecx6;
    void** edx7;
    void** edi8;
    uint32_t ebx9;
    void** eax10;
    uint32_t eax11;
    int32_t v12;

    esi3 = ecx;
    ebp4 = a2->f24;
    if (ebp4) {
        if (*reinterpret_cast<void***>(esi3 + 24)) {
            eax5 = fun_18017c30(ecx);
            ecx6 = *reinterpret_cast<void***>(esi3 + 12);
            edx7 = *reinterpret_cast<void***>(eax5);
            *reinterpret_cast<void***>(edx7 + 32)(eax5, a2, ecx6, ebp4);
        }
        edi8 = reinterpret_cast<void**>(0);
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi3 + 16)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(esi3 + 16) == 0))) {
            ebx9 = 0;
            do {
                eax10 = *reinterpret_cast<void***>(esi3 + 20);
                eax11 = reinterpret_cast<unsigned char>(eax10) + ebx9;
                v12 = a2->f0;
                fun_1801d160(v12, eax11, eax11 + 8, ebp4);
                ++edi8;
                ebx9 = ebx9 + 16;
            } while (reinterpret_cast<signed char>(edi8) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi3 + 16)));
        }
    }
    return;
}

struct s409 {
    signed char[4] pad4;
    void** f4;
    signed char[11] pad16;
    int32_t f16;
    int32_t f20;
};

struct s410 {
    int32_t f0;
    int32_t f4;
};

void fun_1801d120(struct s409* ecx) {
    struct s409* esi2;
    int32_t eax3;
    int32_t ecx4;
    struct s410* edi5;

    esi2 = ecx;
    fun_18022b10(&esi2->f4);
    eax3 = 0;
    if (!(reinterpret_cast<uint1_t>(esi2->f16 < 0) | reinterpret_cast<uint1_t>(esi2->f16 == 0))) {
        ecx4 = 0;
        do {
            ++eax3;
            edi5 = reinterpret_cast<struct s410*>(esi2->f20 + ecx4 + 8);
            ecx4 = ecx4 + 16;
            edi5->f0 = 0;
            edi5->f4 = 0;
        } while (eax3 < esi2->f16);
    }
    return;
}

struct s411 {
    signed char[20] pad20;
    int32_t f20;
    int32_t f24;
    int32_t f28;
};

void fun_1801d270(struct s411* ecx, int32_t a2, int32_t a3, int32_t a4) {
    ecx->f20 = a2;
    ecx->f24 = a3;
    ecx->f28 = a4;
    return;
}

struct s412 {
    signed char[32] pad32;
    int32_t f32;
    int32_t f36;
};

void fun_1801d400(struct s412* ecx) {
    ecx->f32 = 0;
    ecx->f36 = 0;
    return;
}

struct s413 {
    signed char[12] pad12;
    int32_t f12;
    uint32_t f16;
    signed char[32] pad52;
    int16_t* f52;
    signed char f56;
};

struct s414 {
    int16_t* f0;
    signed char[20] pad24;
    int32_t f24;
};

void fun_1801e140(struct s413* ecx, struct s414* a2) {
    struct s413* esi3;
    int32_t eax4;
    int16_t* edi5;
    int32_t ebx6;
    uint32_t eax7;
    uint32_t ecx8;
    uint32_t v9;
    int16_t* eax10;
    void* v11;
    int16_t* ecx12;
    int16_t* ecx13;

    esi3 = ecx;
    eax4 = a2->f24;
    if (eax4) {
        edi5 = a2->f0;
        ebx6 = eax4;
        do {
            esi3->f52[esi3->f16 + esi3->f12] = *edi5;
            esi3->f52[esi3->f16] = esi3->f52[esi3->f16 + esi3->f12];
            eax7 = esi3->f16 & 3;
            ecx8 = esi3->f16 - eax7;
            v9 = *reinterpret_cast<uint32_t*>(reinterpret_cast<int32_t>(esi3) + eax7 * 4 + 36);
            eax10 = esi3->f52;
            v11 = *reinterpret_cast<void**>(reinterpret_cast<int32_t>(esi3) + eax7 * 4 + 20);
            ecx12 = eax10 + ecx8;
            *reinterpret_cast<int16_t*>(&eax10) = fun_1801e1f0(ecx12, ecx12, v11, v9);
            ecx13 = edi5;
            ++edi5;
            if (reinterpret_cast<int32_t>(eax10) < 0x7fff) {
                if (reinterpret_cast<int32_t>(eax10) < 0xffff8000) {
                    eax10 = reinterpret_cast<int16_t*>(0xffff8000);
                }
            } else {
                eax10 = reinterpret_cast<int16_t*>(0x7fff);
            }
            *ecx13 = *reinterpret_cast<int16_t*>(&eax10);
            if (esi3->f16) {
                esi3->f16 = esi3->f16 - 1;
            } else {
                esi3->f16 = reinterpret_cast<uint32_t>(esi3->f12 - 1);
            }
            --ebx6;
        } while (ebx6);
        esi3->f56 = 0;
    }
    return;
}

struct s415 {
    signed char[4] pad4;
    void** f4;
    signed char[7] pad12;
    int32_t f12;
    int32_t f16;
    signed char[32] pad52;
    int32_t* f52;
    signed char f56;
};

void fun_1801e2c0(struct s415* ecx) {
    struct s415* esi2;
    int32_t ecx3;
    int32_t* edi4;

    esi2 = ecx;
    fun_18022b10(&esi2->f4);
    ecx3 = esi2->f12;
    edi4 = esi2->f52;
    esi2->f16 = ecx3 - 1;
    while (ecx3) {
        --ecx3;
        *edi4 = 0;
        ++edi4;
        esi2 = reinterpret_cast<struct s415*>(&esi2->f4);
    }
    esi2->f56 = 1;
    return;
}

void** fun_1801e2f0(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30) {
    void** eax31;
    void** v32;
    void** ecx33;
    void** ax34;
    void** eax35;
    void** v36;
    void** ecx37;
    void** ax38;
    void** edi39;
    void** esi40;
    void** ebx41;
    void** ax42;

    if (reinterpret_cast<int1_t>(a3 == 2) && (*reinterpret_cast<void***>(a1 + 8) == *reinterpret_cast<void***>(a2 + 8) && (*reinterpret_cast<void***>(a1 + 8) == *reinterpret_cast<void***>(a2 + 28) && reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a1 + 4) == 2)))) {
        if (*reinterpret_cast<void***>(a1 + 8) == 8) {
            eax31 = *reinterpret_cast<void***>(a2);
            v32 = *reinterpret_cast<void***>(a2 + 20);
            ecx33 = *reinterpret_cast<void***>(a1);
            ax34 = fun_1801e410(ecx33, eax31, v32, a4);
            return ax34;
        } else {
            if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a1 + 8) == 16)) {
                eax35 = *reinterpret_cast<void***>(a2);
                v36 = *reinterpret_cast<void***>(a2 + 20);
                ecx37 = *reinterpret_cast<void***>(a1);
                ax38 = fun_1801e370(ecx37, eax35, v36, a4);
                return ax38;
            }
        }
    }
    ax42 = fun_18019cd0(a1, a2, a3, a4, a5, edi39, esi40, ebx41, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30);
    return ax42;
}

void** fun_1801e4d0(void** a1, void** a2, void** a3, void** a4) {
    void*** esp5;
    void** edi6;
    void** ebx7;
    void** eax8;
    void** ecx9;
    void** edx10;
    void** eax11;
    void** eax12;
    void** edx13;
    void** v14;
    void** ecx15;
    void** eax16;
    void*** esp17;
    void** v18;
    void** edi19;
    void* esp20;
    struct s160** esp21;
    void** ecx22;
    void** v23;
    void*** esp24;
    void** v25;
    void** v26;
    void** v27;
    void** eax28;
    void** v29;
    void* esp30;
    struct s160** esp31;
    void** esi32;
    void** v33;
    void*** esp34;
    void** v35;
    void** v36;
    void** v37;
    void** eax38;
    void** v39;
    void* esp40;
    struct s160** esp41;
    void* esp42;
    void*** esp43;
    void** esi44;
    void** ebp45;
    void** ebx46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** ax57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** v74;
    void** v75;
    void** ebx76;
    void** eax77;
    void** ecx78;
    void** edx79;
    void** eax80;
    void** edx81;
    void** v82;
    void** ecx83;
    void** eax84;
    void*** esp85;
    void** v86;
    void** ecx87;
    void** ecx88;
    void** eax89;
    void** edx90;
    void*** esp91;
    void** v92;
    void** v93;
    void** eax94;
    void** v95;
    void** ecx96;
    void** edx97;
    void** esi98;
    void** eax99;
    void** ecx100;
    void*** esp101;
    void** v102;
    void** eax103;
    void** v104;
    void* esp105;
    struct s160** esp106;
    void* esp107;
    void*** esp108;
    void** ax109;

    esp5 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0xb8 - 4 - 4 - 4 - 4);
    if (!reinterpret_cast<int1_t>(a2 == 2)) 
        goto addr_0x1801e7bf_2;
    edi6 = a3 + 4;
    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a3 + 4) == 2)) 
        goto addr_0x1801e7bf_2;
    if (*reinterpret_cast<void***>(a3 + 8) != *reinterpret_cast<void***>(a1 + 8)) 
        goto addr_0x1801e7bf_2;
    if (*reinterpret_cast<void***>(a3 + 8) != *reinterpret_cast<void***>(a1 + 28)) 
        goto addr_0x1801e7bf_2;
    if (*reinterpret_cast<void***>(a3 + 8) == 8) {
        ebx7 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a4) & 0xfffffff8);
        if (ebx7) {
            eax8 = *reinterpret_cast<void***>(a3);
            ecx9 = *reinterpret_cast<void***>(a1 + 20);
            edx10 = *reinterpret_cast<void***>(a1);
            fun_1801e7e0(edx10, ecx9, eax8, ebx7);
            esp5 = esp5 - 4 - 4 - 4 - 4 - 4 + 16 + 4;
        }
        eax11 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a4) - reinterpret_cast<unsigned char>(ebx7));
        if (eax11) {
            eax12 = *reinterpret_cast<void***>(a3);
            edx13 = *reinterpret_cast<void***>(edi6 + 4);
            v14 = *reinterpret_cast<void***>(edi6);
            ecx15 = *reinterpret_cast<void***>(edi6 + 12);
            eax16 = *reinterpret_cast<void***>(edi6 + 8);
            esp17 = esp5 - 4;
            v18 = eax16;
            *reinterpret_cast<int16_t*>(&eax16) = fun_180196f0(esp17 + 64, ebx7, edi19);
            esp20 = reinterpret_cast<void*>(esp17 - 4 + 4 + 4);
            esp21 = reinterpret_cast<struct s160**>(reinterpret_cast<int32_t>(esp20) - 4);
            fun_180196c0(esp21 + 31, reinterpret_cast<int32_t>(esp20) + 60);
            ecx22 = a1 + 24;
            v23 = *reinterpret_cast<void***>(a1 + 20);
            esp24 = reinterpret_cast<void***>(esp21 - 1 + 1 + 1 - 1);
            v25 = *reinterpret_cast<void***>(ecx22);
            v26 = *reinterpret_cast<void***>(ecx22 + 4);
            v27 = *reinterpret_cast<void***>(ecx22 + 8);
            eax28 = *reinterpret_cast<void***>(ecx22 + 12);
            v29 = eax28;
            *reinterpret_cast<int16_t*>(&eax28) = fun_180196f0(esp24 + 44, ebx7, edi19);
            esp30 = reinterpret_cast<void*>(esp24 - 4 + 4 + 4);
            esp31 = reinterpret_cast<struct s160**>(reinterpret_cast<int32_t>(esp30) - 4);
            fun_180196c0(esp31 + 36, reinterpret_cast<int32_t>(esp30) + 40);
            esi32 = a1 + 4;
            v33 = *reinterpret_cast<void***>(a1);
            esp34 = reinterpret_cast<void***>(esp31 - 1 + 1 + 1 - 1);
            v35 = *reinterpret_cast<void***>(esi32);
            v36 = *reinterpret_cast<void***>(esi32 + 4);
            v37 = *reinterpret_cast<void***>(esi32 + 8);
            eax38 = *reinterpret_cast<void***>(esi32 + 12);
            v39 = eax38;
            *reinterpret_cast<int16_t*>(&eax38) = fun_180196f0(esp34 + 24, ebx7, edi19);
            esp40 = reinterpret_cast<void*>(esp34 - 4 + 4 + 4);
            esp41 = reinterpret_cast<struct s160**>(reinterpret_cast<int32_t>(esp40) - 4);
            fun_180196c0(esp41 + 46, reinterpret_cast<int32_t>(esp40) + 20);
            esp42 = reinterpret_cast<void*>(esp41 - 1 + 1 + 1);
            esp43 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp42) - 4);
            ax57 = fun_180216c0(esp43 - 4 + 0xbc, esp43 + 0x90, reinterpret_cast<int32_t>(esp42) + 0x78, reinterpret_cast<unsigned char>(a4) - reinterpret_cast<unsigned char>(ebx7), edi19, esi44, ebp45, ebx46, reinterpret_cast<unsigned char>(a4) - reinterpret_cast<unsigned char>(ebx7), reinterpret_cast<unsigned char>(v33) + reinterpret_cast<unsigned char>(eax38), v35, v36, v37, v39, reinterpret_cast<unsigned char>(v23) + reinterpret_cast<unsigned char>(eax28), v25, v26, v27, v29, reinterpret_cast<unsigned char>(eax12) + reinterpret_cast<unsigned char>(eax16), v14, edx13, v18, ecx15, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56);
            return ax57;
        }
    } else {
        if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a3 + 8) == 16)) {
            addr_0x1801e7bf_2:
            eax11 = fun_18019ba0(a1, a2, a3, a4, edi19, esi44, ebp45, ebx46, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75);
        } else {
            ebx76 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a4) & 0xfffffffc);
            if (ebx76) {
                eax77 = *reinterpret_cast<void***>(a3);
                ecx78 = *reinterpret_cast<void***>(a1 + 20);
                edx79 = *reinterpret_cast<void***>(a1);
                fun_1801e840(edx79, ecx78, eax77, ebx76);
                esp5 = esp5 - 4 - 4 - 4 - 4 - 4 + 16 + 4;
            }
            eax11 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a4) - reinterpret_cast<unsigned char>(ebx76));
            if (eax11) {
                eax80 = *reinterpret_cast<void***>(a3);
                edx81 = *reinterpret_cast<void***>(edi6 + 4);
                v82 = *reinterpret_cast<void***>(edi6);
                ecx83 = *reinterpret_cast<void***>(edi6 + 12);
                eax84 = *reinterpret_cast<void***>(edi6 + 8);
                esp85 = esp5 - 4;
                v86 = eax84;
                *reinterpret_cast<int16_t*>(&eax84) = fun_180196f0(esp85 + 24, ebx76, edi19);
                ecx87 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax80) + reinterpret_cast<unsigned char>(eax84));
                ecx88 = a1 + 24;
                eax89 = *reinterpret_cast<void***>(a1 + 20);
                edx90 = *reinterpret_cast<void***>(ecx88);
                esp91 = esp85 - 4 + 4 + 4 - 4;
                v92 = *reinterpret_cast<void***>(ecx88 + 4);
                v93 = *reinterpret_cast<void***>(ecx88 + 8);
                eax94 = *reinterpret_cast<void***>(ecx88 + 12);
                v95 = eax94;
                *reinterpret_cast<int16_t*>(&eax94) = fun_180196f0(esp91 + 44, ebx76, edi19);
                ecx96 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax89) + reinterpret_cast<unsigned char>(eax94));
                edx97 = *reinterpret_cast<void***>(a1);
                esi98 = a1 + 4;
                eax99 = *reinterpret_cast<void***>(esi98);
                ecx100 = *reinterpret_cast<void***>(esi98 + 4);
                esp101 = esp91 - 4 + 4 + 4 - 4;
                v102 = *reinterpret_cast<void***>(esi98 + 8);
                eax103 = *reinterpret_cast<void***>(esi98 + 12);
                v104 = eax103;
                *reinterpret_cast<int16_t*>(&eax103) = fun_180196f0(esp101 + 64, ebx76, edi19);
                esp105 = reinterpret_cast<void*>(esp101 - 4 + 4 + 4);
                esp106 = reinterpret_cast<struct s160**>(reinterpret_cast<int32_t>(esp105) - 4);
                fun_180196c0(esp106 + 41, reinterpret_cast<int32_t>(esp105) + 60);
                esp107 = reinterpret_cast<void*>(esp106 - 1 + 1 + 1);
                esp108 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp107) - 4);
                ax109 = fun_180216c0(esp108 - 4 + 0xa8, esp108 + 0x68, reinterpret_cast<int32_t>(esp107) + 80, reinterpret_cast<unsigned char>(a4) - reinterpret_cast<unsigned char>(ebx76), edi19, esi44, ebp45, ebx46, reinterpret_cast<unsigned char>(a4) - reinterpret_cast<unsigned char>(ebx76), ecx87, v82, edx81, v86, ecx83, ecx96, edx90, v92, v93, v95, reinterpret_cast<unsigned char>(edx97) + reinterpret_cast<unsigned char>(eax103), eax99, ecx100, v102, v104, ecx87, v82, edx81, v86, ecx83, ecx96, edx90, v92, v93, v95);
                return ax109;
            }
        }
    }
    return eax11;
}

int16_t fun_1801e8b0(int32_t ecx, struct s268* a2, signed char** a3, void* a4, uint32_t a5, uint32_t* a6, uint32_t* a7, uint32_t a8, int32_t a9) {
    void* esp10;
    void** eax11;
    void** edx12;
    void** esi13;
    int1_t zf14;
    int16_t ax15;
    uint32_t ecx16;
    uint32_t v17;
    uint32_t eax18;
    signed char* esi19;
    signed char* eax20;
    uint32_t* esp21;
    int16_t* ecx22;
    int32_t** esp23;
    uint32_t* esp24;
    signed char** eax25;
    uint32_t eax26;
    uint32_t eax27;

    esp10 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 24 - 4 - 4 - 4 - 4);
    if (a5) {
        eax11 = a2->f4;
        edx12 = (&a2->f4)[4];
        esi13 = g18043440;
        if (eax11 != esi13 || (zf14 = edx12 == g18043444, !zf14)) {
            ax15 = fun_1801b320(ecx, a2, a3, a4, a5, a6, a7, a8, a9);
            return ax15;
        } else {
            ecx16 = *a7;
            v17 = *a6;
            eax18 = a5 & 0xfffffffe;
            if (!eax18 || reinterpret_cast<int32_t>(eax18) <= reinterpret_cast<int32_t>(4)) {
                esi19 = reinterpret_cast<signed char*>(0);
            } else {
                eax20 = *a3;
                esp21 = reinterpret_cast<uint32_t*>(reinterpret_cast<int32_t>(esp10) - 4);
                ecx22 = a2->f0;
                esp23 = reinterpret_cast<int32_t**>(esp21 - 1);
                *reinterpret_cast<int16_t*>(&eax20) = fun_1801ea30(ecx22, eax20, a4, a5, esp23 + 16, esp21 + 12, a8);
                esp10 = reinterpret_cast<void*>(esp23 - 1 - 1 - 1 - 1 - 1 - 1 + 7 + 1);
                esi19 = eax20;
            }
            if (*reinterpret_cast<int32_t*>(a3 + 1 + 3) < 0) {
            }
            esp24 = reinterpret_cast<uint32_t*>(reinterpret_cast<int32_t>(esp10) - 4 - 4);
            eax25 = reinterpret_cast<signed char**>(esp24 - 1 - 1 - 1 + 10);
            *reinterpret_cast<int16_t*>(&eax25) = fun_1801b320(ecx, a2, eax25, a4, a5 - reinterpret_cast<uint32_t>(esi19), esp24 + 16, esp24 + 13, a8, 1);
            if (!*reinterpret_cast<signed char*>(&a9)) {
                eax26 = a5;
                return *reinterpret_cast<int16_t*>(&eax26);
            } else {
                eax27 = reinterpret_cast<int32_t>(eax25) + reinterpret_cast<uint32_t>(esi19);
                *a6 = v17;
                *a7 = ecx16;
                return *reinterpret_cast<int16_t*>(&eax27);
            }
        }
    } else {
        return 0;
    }
}

int16_t fun_1801eb40(void** ecx, void** a2, void** a3, void** a4) {
    void** edi5;
    void** esi6;
    void** ebx7;
    void** eax8;
    void** eax9;

    eax8 = fun_1802b2bb(ecx, 44, edi5, esi6, ebx7, __return_address(), a2, a3, a4);
    if (!eax8) {
        return 0;
    } else {
        *reinterpret_cast<void***>(eax8) = reinterpret_cast<void**>(0x18034d28);
        fun_18022a90(eax8 + 4, 0);
        *reinterpret_cast<void***>(eax8 + 12) = ecx;
        *reinterpret_cast<void***>(eax8 + 16) = a2;
        *reinterpret_cast<void***>(eax8 + 20) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 24) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 28) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 32) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 36) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 40) = reinterpret_cast<void**>(0x3f800000);
        *reinterpret_cast<void***>(eax8) = reinterpret_cast<void**>(0x18034f5c);
        eax9 = eax8;
        return *reinterpret_cast<int16_t*>(&eax9);
    }
}

struct s417 {
    signed char[28] pad28;
    int32_t f28;
};

struct s416 {
    signed char[12] pad12;
    int32_t f12;
    signed char[4] pad20;
    void** f20;
    signed char[3] pad24;
    void* f24;
    void* f28;
    void* f32;
    struct s417** f36;
    void** f40;
};

int16_t fun_1801ecc0(struct s416* ecx, void** a2, void** a3) {
    void** v4;
    void** v5;
    void** ebx6;
    void** v7;
    void** ebp8;
    void** v9;
    void** esi10;
    void** eax11;
    void*** esp12;
    void** v13;
    void** edi14;
    struct s416* esi15;
    void** v16;
    void** ebx17;
    void** v18;
    void** edx19;
    void** ecx20;
    int1_t less_or_equal21;
    void** edi22;
    void* ebp23;
    void** ecx24;
    uint32_t eax25;
    void** v26;
    void** eax27;
    void* ebp28;
    void** ecx29;
    void** v30;
    void** ebp31;
    void** ecx32;
    void** eax33;
    void** edx34;
    void* esp35;
    void** eax36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void* esp54;
    void** eax55;
    void** ecx56;
    void** edx57;
    int32_t ecx58;
    int32_t* esp59;
    void* esp60;
    struct s417** ecx61;
    struct s417* edx62;
    void*** esp63;
    void** eax64;
    void** v65;
    void** eax66;
    void** ecx67;
    void** edx68;
    void* esp69;
    void*** esp70;
    void** v71;
    void** v72;
    void** v73;
    void* esp74;
    void** eax75;
    void* ecx76;
    uint32_t eax77;
    void** eax78;
    void** ecx79;
    void* eax80;
    void** eax81;
    void** ebx82;
    void** ecx83;
    void** edx84;
    void* eax85;
    void* ebx86;
    void* ecx87;
    void* ebx88;
    void** eax89;
    void** ebx90;
    void** v91;
    void** v92;
    void** v93;
    void** v94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** v103;
    void** v104;

    v4 = reinterpret_cast<void**>(__return_address());
    v5 = ebx6;
    v7 = ebp8;
    v9 = esi10;
    eax11 = *reinterpret_cast<void***>(a3 + 24);
    esp12 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x8c - 4 - 4 - 4 - 4);
    v13 = edi14;
    esi15 = ecx;
    v16 = eax11;
    if (eax11 && esi15->f36) {
        ebx17 = reinterpret_cast<void**>(0);
        v18 = reinterpret_cast<void**>(0);
        while (1) {
            edx19 = *reinterpret_cast<void***>(&esi15->f20);
            ecx20 = reinterpret_cast<void**>(&esi15->f20);
            less_or_equal21 = reinterpret_cast<signed char>(reinterpret_cast<unsigned char>(eax11) - reinterpret_cast<unsigned char>(ebx17)) <= reinterpret_cast<signed char>(edx19);
            eax11 = reinterpret_cast<void**>(esp12 + 16);
            if (!less_or_equal21) {
                eax11 = ecx20;
            }
            edi22 = *reinterpret_cast<void***>(eax11);
            if (!edi22) 
                break;
            ebp23 = esi15->f32;
            ecx24 = *reinterpret_cast<void***>(ecx20);
            eax25 = reinterpret_cast<uint32_t>(ebp23) - reinterpret_cast<uint32_t>(esi15->f24);
            v26 = edi22;
            eax27 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax25) >> 1);
            if (reinterpret_cast<signed char>(ecx24) > reinterpret_cast<signed char>(eax27)) {
                ebp28 = esi15->f28;
                ecx29 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx24) - reinterpret_cast<unsigned char>(eax27));
                v30 = ecx29;
                ebp31 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp28) - (reinterpret_cast<unsigned char>(ecx29) + reinterpret_cast<unsigned char>(ecx29)));
                if (reinterpret_cast<signed char>(edi22) > reinterpret_cast<signed char>(ecx29)) {
                }
                edi22 = v30;
            } else {
                ebp31 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(ebp23) - (reinterpret_cast<unsigned char>(ecx24) + reinterpret_cast<unsigned char>(ecx24)));
            }
            ecx32 = g18043444;
            eax33 = g18043440;
            edx34 = g18043448;
            esp35 = reinterpret_cast<void*>(esp12 - 4 - 4 - 4);
            eax36 = g1804344c;
            fun_18019390(a2, reinterpret_cast<int32_t>(esp35) + 0x6c, 0x3f800000, 0, edi22, ebx17, v13, v9, v7, v5, v26, v30, v18, v37, v38, v39, v40, v41, v16, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, ebp31, eax33, ecx32, edx34, eax36, v53);
            esp54 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp35) - 4 - 4 - 4 + 20 + 4);
            eax55 = g18043444;
            ecx56 = g18043448;
            edx57 = g18043440;
            v45 = eax55;
            v46 = ecx56;
            ecx58 = esi15->f12;
            v44 = edx57;
            esp59 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esp54) - 4 - 4 - 4);
            v43 = ebp31;
            fun_180191c0(esp59 + 32, ecx58, reinterpret_cast<int32_t>(esp54) + 56, edi22);
            esp60 = reinterpret_cast<void*>(esp59 - 1 + 3 + 1);
            ecx61 = esi15->f36;
            edx62 = *ecx61;
            edx62->f28(reinterpret_cast<int32_t>(esp60) + 0x74);
            esp63 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp60) - 4 - 4 + 4 - 4);
            eax64 = a2 + 4;
            v65 = *reinterpret_cast<void***>(a2);
            v37 = *reinterpret_cast<void***>(eax64);
            v38 = *reinterpret_cast<void***>(eax64 + 4);
            v39 = *reinterpret_cast<void***>(eax64 + 8);
            eax66 = *reinterpret_cast<void***>(eax64 + 12);
            v40 = eax66;
            *reinterpret_cast<int16_t*>(&eax66) = fun_180196f0(esp63 + 32, ebx17, reinterpret_cast<int32_t>(esp60) + 0x74);
            ecx67 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v65) + reinterpret_cast<unsigned char>(eax66));
            v18 = ecx67;
            v47 = ecx67;
            v49 = v38;
            edx68 = esi15->f40;
            v48 = v37;
            v50 = v39;
            esp69 = reinterpret_cast<void*>(esp63 - 4 + 4 + 4 - 4 - 4 - 4);
            v51 = v40;
            esp70 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp69) - 4 - 4);
            fun_18019390(esp70 + 0x88, reinterpret_cast<int32_t>(esp69) + 88, edx68, 0, edi22, 0, reinterpret_cast<int32_t>(esp60) + 0x74, v13, v9, v7, v5, v26, v30, v18, v37, v38, v39, v40, v71, v16, v72, v43, v44, v45, v46, v47, v48, v49, v50, v51, v73, ebp31, eax33, ecx32, edx34, eax36);
            esp74 = reinterpret_cast<void*>(esp70 - 4 + 20 + 4);
            eax75 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<int32_t>(esi15->f28) - reinterpret_cast<uint32_t>(esi15->f32)) >> 1);
            if (reinterpret_cast<signed char>(edi22) >= reinterpret_cast<signed char>(eax75)) {
                ecx76 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esi15->f24) + (reinterpret_cast<unsigned char>(edi22) - reinterpret_cast<unsigned char>(eax75)) * 2);
            } else {
                ecx76 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esi15->f32) + reinterpret_cast<unsigned char>(edi22) * 2);
            }
            esi15->f32 = ecx76;
            if (*reinterpret_cast<void***>(&esi15->f20) != reinterpret_cast<int32_t>(reinterpret_cast<int32_t>(esi15->f28) - reinterpret_cast<uint32_t>(esi15->f24)) >> 1) {
                eax77 = reinterpret_cast<uint32_t>(ecx76) - reinterpret_cast<uint32_t>(esi15->f24);
                v26 = edi22;
                eax78 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax77) >> 1);
                if (reinterpret_cast<signed char>(edi22) > reinterpret_cast<signed char>(eax78)) {
                    ecx79 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi22) - reinterpret_cast<unsigned char>(eax78));
                    eax80 = esi15->f28;
                    v5 = ecx79;
                    eax81 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax80) - (reinterpret_cast<unsigned char>(ecx79) + reinterpret_cast<unsigned char>(ecx79)));
                    if (reinterpret_cast<signed char>(edi22) > reinterpret_cast<signed char>(ecx79)) {
                    }
                    ebx82 = v26;
                } else {
                    ebx82 = edi22;
                    eax81 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(ecx76) - (reinterpret_cast<unsigned char>(edi22) + reinterpret_cast<unsigned char>(edi22)));
                }
                ecx83 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx82) + reinterpret_cast<unsigned char>(ebx82));
                v16 = ecx83;
                fun_1802b920(eax81, ebp31, ecx83, reinterpret_cast<int32_t>(esp60) + 0x74, v13, v9, v7, v5, v26, v30, v18, v37);
                esp74 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp74) - 4 - 4 - 4 - 4 + 4 + 12);
                if (ebx82 != edi22) {
                    edx84 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi22) - reinterpret_cast<unsigned char>(ebx82));
                    eax85 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(&esi15->f20)) - reinterpret_cast<unsigned char>(ebx82));
                    ebx86 = esi15->f32;
                    v26 = edx84;
                    ecx87 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(reinterpret_cast<uint32_t>(ebx86) - reinterpret_cast<uint32_t>(esi15->f24)) >> 1);
                    if (reinterpret_cast<int32_t>(eax85) > reinterpret_cast<int32_t>(ecx87)) {
                        ebx88 = esi15->f28;
                        eax89 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(eax85) - reinterpret_cast<uint32_t>(ecx87));
                        v5 = eax89;
                        ebx90 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebx88) - (reinterpret_cast<unsigned char>(eax89) + reinterpret_cast<unsigned char>(eax89)));
                        if (reinterpret_cast<signed char>(edx84) > reinterpret_cast<signed char>(eax89)) {
                        }
                        edx84 = v26;
                    } else {
                        ebx90 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(ebx86) - (reinterpret_cast<uint32_t>(eax85) + reinterpret_cast<uint32_t>(eax85)));
                    }
                    fun_1802b920(ebx90, reinterpret_cast<unsigned char>(v16) + reinterpret_cast<unsigned char>(ebp31), reinterpret_cast<unsigned char>(edx84) + reinterpret_cast<unsigned char>(edx84), reinterpret_cast<int32_t>(esp60) + 0x74, v13, v9, v7, v5, v26, v30, v18, v37);
                    esp74 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp74) - 4 - 4 - 4 - 4 + 4 + 12);
                }
                ebx17 = v30;
            }
            ebx17 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx17) + reinterpret_cast<unsigned char>(edi22));
            v30 = ebx17;
            fun_18019210(reinterpret_cast<int32_t>(esp74) + 0x74, reinterpret_cast<int32_t>(esp60) + 0x74, v13, v9, v7, v5, v26, v30, v18, v37, v38, v39, v40, v91, v16, v92, v43, v44, v45, v46, v47, v48, v49, v50, v51, v93, ebp31, eax33, ecx32, edx34, eax36, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v4, a2, a3);
            esp12 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp74) - 4 + 4);
            eax11 = v104;
        }
    }
    return *reinterpret_cast<int16_t*>(&eax11);
}

int16_t fun_1801f320(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** v45;
    void** esi46;
    void** eax47;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034f5c);
    v45 = *reinterpret_cast<void***>(ecx + 24);
    fun_1802b2b0(ecx, v45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 28) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax47 = ecx;
    return *reinterpret_cast<int16_t*>(&eax47);
}

int16_t fun_1801f360(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** v45;
    void** esi46;
    void** eax47;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034f8c);
    *reinterpret_cast<void***>(ecx + 76) = reinterpret_cast<void**>(0x180348d4);
    *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0x18034f5c);
    v45 = *reinterpret_cast<void***>(ecx + 56);
    fun_1802b2b0(ecx, v45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    *reinterpret_cast<void***>(ecx + 64) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 60) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 56) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0x180348d4);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax47 = ecx;
    return *reinterpret_cast<int16_t*>(&eax47);
}

int16_t fun_1801f420(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** edi6;
    void** esi7;
    void** eax8;
    void** eax9;

    eax8 = fun_1802b2bb(ecx, 40, edi6, esi7, __return_address(), a2, a3, a4, a5);
    if (!eax8) {
        return 0;
    } else {
        *reinterpret_cast<void***>(eax8) = reinterpret_cast<void**>(0x18034df0);
        fun_18022a90(eax8 + 4, 0);
        *reinterpret_cast<void***>(eax8 + 16) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 12) = a2;
        *reinterpret_cast<void***>(eax8 + 20) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 24) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 28) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 32) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 36) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8) = reinterpret_cast<void**>(0x18034fb4);
        eax9 = eax8;
        return *reinterpret_cast<int16_t*>(&eax9);
    }
}

int16_t fun_1801fb70(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** eax45;
    void** esi46;
    void** ecx47;
    void** eax48;

    eax45 = *reinterpret_cast<void***>(ecx + 24);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034fb4);
    fun_1802b2b0(ecx, eax45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    ecx47 = *reinterpret_cast<void***>(ecx + 28);
    fun_1802b2b0(ecx47, ecx47, eax45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43);
    *reinterpret_cast<void***>(ecx + 36) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 28) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx47, ecx, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax48 = ecx;
    return *reinterpret_cast<int16_t*>(&eax48);
}

struct s418 {
    signed char[12] pad12;
    uint32_t f12;
    void* f16;
};

struct s419 {
    int16_t* f0;
    signed char[20] pad24;
    uint32_t f24;
};

void fun_18020260(struct s418* ecx, struct s419* a2) {
    uint32_t ebx3;
    uint32_t eax4;
    struct s418* edi5;
    uint32_t ecx6;
    int16_t* ebp7;
    uint32_t esi8;
    uint32_t v9;
    uint32_t v10;
    void* eax11;
    void* eax12;
    void* edx13;
    struct s168* eax14;
    uint32_t eax15;
    int1_t less16;

    ebx3 = 0;
    eax4 = a2->f24;
    edi5 = ecx;
    if (eax4) {
        ecx6 = eax4 + 0xfffffffe;
        if (reinterpret_cast<int32_t>(ecx6) < reinterpret_cast<int32_t>(0)) {
        }
        ebp7 = a2->f0;
        esi8 = ecx6 & 0xfffffffc;
        v9 = 0;
        v10 = eax4 - esi8;
        if (reinterpret_cast<int32_t>(edi5->f12) > reinterpret_cast<int32_t>(0)) {
            do {
                if (esi8) {
                    eax11 = edi5->f16;
                    eax12 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(eax11) + ebx3);
                    fun_18020390(ebp7, reinterpret_cast<uint32_t>(eax12) + 28, eax12, esi8);
                }
                if (v10) {
                    edx13 = edi5->f16;
                    eax14 = reinterpret_cast<struct s168*>(reinterpret_cast<int32_t>(edx13) + ebx3);
                    fun_18020300(ebp7 + esi8, &eax14->f8, eax14, v10);
                }
                eax15 = v9 + 1;
                ebx3 = ebx3 + 52;
                less16 = reinterpret_cast<int32_t>(eax15) < reinterpret_cast<int32_t>(edi5->f12);
                v9 = eax15;
            } while (less16);
        }
    }
    return;
}

void** fun_18020490(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** eax8;

    eax8 = fun_1802b2bb(ecx, 20, __return_address(), a2, a3, a4, a5, a6, a7);
    if (!eax8) {
        return 0;
    } else {
        *reinterpret_cast<void***>(eax8) = reinterpret_cast<void**>(0x18034e80);
        fun_18022a90(eax8 + 4, 0x3e8);
        *reinterpret_cast<void***>(eax8 + 12) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 16) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8) = reinterpret_cast<void**>(0x18034ffc);
        fun_18020450(eax8);
        return eax8;
    }
}

struct s420 {
    signed char[12] pad12;
    uint32_t f12;
    void* f16;
};

struct s421 {
    void* f0;
    signed char[20] pad24;
    uint32_t f24;
};

void fun_18020750(struct s420* ecx, struct s421* a2) {
    struct s420* edi3;
    uint32_t ebx4;
    uint32_t eax5;
    void* ebp6;
    uint32_t esi7;
    uint32_t v8;
    uint32_t v9;
    void* eax10;
    void* eax11;
    void* edx12;
    struct s169* eax13;
    uint32_t eax14;
    int1_t less15;

    edi3 = ecx;
    ebx4 = 0;
    eax5 = a2->f24;
    if (eax5 && (ebp6 = a2->f0, esi7 = eax5 & 0xfffffffc, v8 = 0, v9 = eax5 - esi7, reinterpret_cast<int32_t>(edi3->f12) > reinterpret_cast<int32_t>(0))) {
        do {
            if (esi7) {
                eax10 = edi3->f16;
                eax11 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(eax10) + ebx4);
                fun_18020800(ebp6, reinterpret_cast<uint32_t>(eax11) + 6, reinterpret_cast<uint32_t>(eax11) + 22, esi7);
            }
            if (v9) {
                edx12 = edi3->f16;
                eax13 = reinterpret_cast<struct s169*>(reinterpret_cast<int32_t>(edx12) + ebx4);
                fun_180208d0(reinterpret_cast<int32_t>(ebp6) + esi7 * 2, eax13, &eax13->f22, v9);
            }
            eax14 = v8 + 1;
            ebx4 = ebx4 + 26;
            less15 = reinterpret_cast<int32_t>(eax14) < reinterpret_cast<int32_t>(edi3->f12);
            v8 = eax14;
        } while (less15);
    }
    return;
}

struct s422 {
    signed char[4] pad4;
    void** f4;
    signed char[7] pad12;
    int32_t f12;
    int32_t f16;
};

void fun_180207d0(struct s422* ecx) {
    struct s422* esi2;
    int32_t eax3;
    int32_t ecx4;

    esi2 = ecx;
    fun_18022b10(&esi2->f4);
    eax3 = 0;
    if (!(reinterpret_cast<uint1_t>(esi2->f12 < 0) | reinterpret_cast<uint1_t>(esi2->f12 == 0))) {
        ecx4 = 0;
        do {
            *reinterpret_cast<int32_t*>(esi2->f16 + ecx4 + 22) = 0;
            ++eax3;
            ecx4 = ecx4 + 26;
        } while (eax3 < esi2->f12);
    }
    return;
}

struct s423 {
    signed char[64] pad64;
    int32_t f64;
    int16_t f68;
};

void fun_18020c60(struct s423* ecx) {
    ecx->f68 = 0;
    ecx->f64 = 0;
    return;
}

struct s424 {
    signed char[4] pad4;
    int32_t f4;
};

void fun_18022adc(struct s424* ecx) {
    ecx->f4 = 0;
    return;
}

int16_t fun_18022e20(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18022e40(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_18023d40(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18023d60(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_18024200(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18024220(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_18024370(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18024390(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s425 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

void fun_18024450(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    void** edi30;
    struct s425* ebx31;
    void** v32;
    void** edi33;
    void** esi34;
    void** ebp35;
    void** ebx36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void* esp47;
    int1_t zf48;
    void** v49;
    void** eax50;
    void** edi51;
    void** v52;
    void** v53;
    void** v54;
    void** ecx55;
    void** eax56;
    void** edx57;
    void** v58;
    void** ecx59;
    void** edx60;
    void*** esp61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** eax66;
    void** v67;
    void** ecx68;
    void** eax69;
    void** eax70;
    void** eax71;
    void** edx72;
    void** v73;
    int32_t v74;

    edi30 = ecx + 0x1ec;
    EnterCriticalSection();
    ebx31 = reinterpret_cast<struct s425*>(ecx + 0x1dc);
    v32 = *reinterpret_cast<void***>(ecx + 0x1dc);
    fun_1802b2b0(ecx, v32, edi30, edi33, esi34, ebp35, ebx36, v37, edi30, v38, v39, v40, v41, v42, v43, v44, v45, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29);
    esp47 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4);
    zf48 = *reinterpret_cast<void***>(ecx + 0x1bc) == 0;
    ebx31->f0 = reinterpret_cast<void**>(0);
    if (zf48) {
        *reinterpret_cast<void***>(ecx + 0x1e0) = reinterpret_cast<void**>(0x400);
        eax50 = fun_1802b2bb(ecx, 0x400, edi30, edi33, esi34, ebp35, ebx36, v49, edi30);
        edi51 = ecx + 28;
        ebx31->f0 = eax50;
        v52 = *reinterpret_cast<void***>(edi51);
        v53 = *reinterpret_cast<void***>(edi51 + 4);
        v54 = *reinterpret_cast<void***>(edi51 + 8);
        ecx55 = *reinterpret_cast<void***>(edi51 + 12);
        if (!ecx55) {
            __asm__("cdq ");
            eax56 = reinterpret_cast<void**>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 0x1e0)) / reinterpret_cast<signed char>(v54));
        } else {
            eax56 = reinterpret_cast<void**>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx + 0x1e0)) >> *reinterpret_cast<signed char*>(&ecx55));
        }
        edx57 = *reinterpret_cast<void***>(edi51 + 4);
        v58 = *reinterpret_cast<void***>(edi51);
        ecx59 = *reinterpret_cast<void***>(edi51 + 8);
        edx60 = *reinterpret_cast<void***>(edi51 + 12);
        esp61 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp47) - 4 - 4 + 4 + 4 - 4);
        v62 = edx60;
        fun_18017250(esp61 + 44, eax56, edi30, edi33, esi34, ebp35, ebx36, v63, v52, v53, v54, v64, eax50, v58, edx57, ecx59, v62, v65, __return_address(), a2, a3, a4, a5, a6, a7);
        eax66 = ebx31->f0;
        v67 = *reinterpret_cast<void***>(ecx + 0x1e0);
        ecx68 = ecx;
        fun_18027690(ecx68, esp61 - 4 + 4 + 4 - 4 + 20, 1, v67, edi30, edi33, esi34, ebp35, eax66);
    } else {
        eax69 = *reinterpret_cast<void***>(ecx + 0x1c0);
        ecx68 = *reinterpret_cast<void***>(eax69 + 8 + 12);
        if (ecx68 == *reinterpret_cast<void***>(ecx + 0x208)) {
            eax70 = eax69 + 8;
            ebx31->f0 = *reinterpret_cast<void***>(eax70);
            ebx31->f4 = *reinterpret_cast<void***>(eax70 + 4);
            ebx31->f8 = *reinterpret_cast<void***>(eax70 + 8);
            ebx31->f12 = *reinterpret_cast<void***>(eax70 + 12);
            eax71 = *reinterpret_cast<void***>(ecx + 0x1c0);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax71 + 4)) = *reinterpret_cast<void***>(eax71);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax71) + 4) = *reinterpret_cast<void***>(eax71 + 4);
            *reinterpret_cast<void***>(eax71) = *reinterpret_cast<void***>(ecx + 0x1d8);
            *reinterpret_cast<void***>(ecx + 0x1d8) = eax71;
            *reinterpret_cast<void***>(ecx + 0x1bc) = *reinterpret_cast<void***>(ecx + 0x1bc) - 1;
            edx72 = ebx31->f0;
            v73 = *reinterpret_cast<void***>(ecx + 0x1e0);
            fun_18027690(ecx, reinterpret_cast<int32_t>(esp47) + 16, 1, v73, edi30, edi33, esi34, ebp35, edx72);
            LeaveCriticalSection(ecx);
            goto v74;
        }
    }
    LeaveCriticalSection(ecx68);
    goto v62;
}

struct s429 {
    signed char[36] pad36;
    int32_t f36;
};

struct s428 {
    signed char[24] pad24;
    struct s429** f24;
};

struct s427 {
    struct s427* f0;
    signed char[4] pad8;
    struct s428* f8;
};

struct s426 {
    signed char[152] pad152;
    int32_t f152;
    signed char[16] pad172;
    int32_t f172;
    struct s427* f176;
};

void fun_18025280(struct s426* ecx, int32_t a2) {
    int32_t eax3;
    struct s426* ebx4;
    struct s427* esi5;
    struct s427* edi6;
    struct s429** eax7;
    struct s429* ecx8;
    int32_t v9;

    eax3 = a2;
    ebx4 = ecx;
    if (eax3 == 3 && ebx4->f172 == 2) {
        eax3 = 4;
    }
    ebx4->f152 = eax3;
    if (eax3 && (esi5 = ebx4->f176, edi6 = reinterpret_cast<struct s427*>(&ebx4->f176), esi5 != edi6)) {
        do {
            eax7 = esi5->f8->f24;
            if (eax7) {
                ecx8 = *eax7;
                v9 = ebx4->f152;
                ecx8->f36(eax7, v9);
            }
            esi5 = esi5->f0;
        } while (esi5 != edi6);
    }
    return;
}

struct s430 {
    signed char[92] pad92;
    int32_t f92;
};

void fun_180252e0(struct s430* ecx, int32_t a2) {
    int32_t eax3;

    eax3 = ecx->f92;
    if (!a2) {
        *reinterpret_cast<unsigned char*>(&eax3) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax3) & 0xfd);
        ecx->f92 = eax3;
        return;
    } else {
        *reinterpret_cast<unsigned char*>(&eax3) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax3) | 2);
        ecx->f92 = eax3;
        return;
    }
}

struct s431 {
    signed char[16] pad16;
    int32_t f16;
};

void fun_18027950(struct s431** ecx, int32_t a2) {
    int32_t v3;
    int32_t esi4;
    struct s431** edi5;
    int32_t ecx6;
    struct s431* eax7;
    int32_t eax8;

    v3 = reinterpret_cast<int32_t>(__return_address());
    esi4 = a2;
    edi5 = ecx;
    if (!(reinterpret_cast<uint1_t>(esi4 < 0) | reinterpret_cast<uint1_t>(esi4 == 0))) {
        do {
            ecx6 = 6;
            do {
                --ecx6;
            } while (ecx6);
            eax7 = *edi5;
            eax8 = reinterpret_cast<int32_t>(eax7->f16(edi5));
            esi4 = esi4 - eax8;
        } while (!reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(esi4 < 0) | reinterpret_cast<uint1_t>(esi4 == 0)));
    }
    goto v3;
}

int16_t fun_18027a50(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18027a70(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

void** fun_18027bf0(struct s183* ecx) {
    void** eax2;
    void** eax3;

    eax2 = fun_18027880(ecx);
    if (!eax2 && ecx->f424) {
        eax3 = ecx->f0;
        *reinterpret_cast<void***>(eax3 + 36)(ecx);
        eax2 = fun_18027880(ecx);
    }
    return eax2;
}

struct s433 {
    signed char[24] pad24;
    int32_t f24;
    signed char[8] pad36;
    int32_t f36;
};

struct s432 {
    struct s433* f0;
    signed char[416] pad420;
    int32_t f420;
};

void fun_18027cc0(struct s432* ecx, int32_t a2) {
    struct s433* eax3;
    struct s433* edx4;
    int32_t v5;

    if (ecx->f420 > a2) {
        eax3 = ecx->f0;
        eax3->f36();
    }
    if (ecx->f420 != a2) {
        edx4 = ecx->f0;
        v5 = a2 - ecx->f420;
        edx4->f24(ecx, v5);
    }
    return;
}

struct s434 {
    signed char[44] pad44;
    int32_t f44;
    signed char[480] pad528;
    int32_t f528;
};

struct s435 {
    int32_t f0;
    int32_t f4;
};

struct s436 {
    int32_t f0;
    int32_t f4;
};

struct s437 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

struct s438 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

void fun_180284a0(struct s434* ecx, struct s435* a2, int32_t* a3) {
    int32_t esi4;
    struct s435* edx5;
    struct s436* eax6;
    struct s437* ebx7;
    struct s438* edi8;

    esi4 = 0;
    *a3 = 1;
    if (!(reinterpret_cast<uint1_t>(ecx->f44 < 0) | reinterpret_cast<uint1_t>(ecx->f44 == 0))) {
        edx5 = a2;
        eax6 = reinterpret_cast<struct s436*>(&ecx->f528);
        do {
            ebx7 = reinterpret_cast<struct s437*>(&edx5->f4);
            edx5->f0 = eax6->f0;
            edi8 = reinterpret_cast<struct s438*>(&eax6->f4);
            ++esi4;
            eax6 = reinterpret_cast<struct s436*>(reinterpret_cast<int32_t>(eax6) + 20);
            edx5 = reinterpret_cast<struct s435*>(reinterpret_cast<int32_t>(edx5) + 20);
            ebx7->f0 = edi8->f0;
            ebx7->f4 = edi8->f4;
            ebx7->f8 = edi8->f8;
            ebx7->f12 = edi8->f12;
        } while (esi4 < ecx->f44);
    }
    return;
}

struct s439 {
    signed char[1] pad1;
    void** f1;
};

struct s440 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
    signed char[463] pad476;
    void*** f476;
    void** f480;
};

struct s441 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

void fun_18028500(struct s195* ecx) {
    void** v2;
    void** ebx3;
    void* v4;
    void* ebp5;
    void** v6;
    void** esi7;
    struct s195* esi8;
    void** v9;
    void** edi10;
    void** eax11;
    void** eax12;
    void* esp13;
    void** ecx14;
    void** v15;
    void** eax16;
    void** v17;
    int32_t ecx18;
    void** edi19;
    void** v20;
    void** ecx21;
    void* esp22;
    void** eax23;
    void** v24;
    void* esp25;
    struct s439* eax26;
    void* ebx27;
    void* eax28;
    void* ecx29;
    void** ebp30;
    struct s440* edi31;
    void** v32;
    struct s441* eax33;
    void*** edx34;
    void** v35;
    void** v36;
    void** ebx37;
    void** ecx38;
    void** ecx39;
    void** v40;
    void** edx41;
    void** v42;
    void** v43;
    void** edx44;
    void** eax45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void* esp69;
    void** eax70;
    void** edx71;
    void* esp72;
    void** ecx73;
    void** esp74;
    void** edx75;
    void* eax76;
    void*** eax77;
    void** ecx78;
    void* edx79;
    void** ecx80;
    void* esp81;
    void** esp82;
    void** eax83;
    void*** esp84;
    void** ebx85;
    void** eax86;
    void** v87;
    void** v88;
    void** v89;
    void* ebp90;
    void** ebx91;
    void** ecx92;
    void* eax93;
    void*** esp94;
    void*** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** v103;
    void** v104;
    void** v105;
    void** v106;
    void** v107;
    void** v108;
    void** v109;
    void** v110;
    void** v111;
    void** v112;
    void** v113;
    void** v114;
    void** v115;
    void** ecx116;
    void** edx117;
    int32_t v118;

    v2 = ebx3;
    v4 = ebp5;
    v6 = esi7;
    esi8 = ecx;
    v9 = edi10;
    eax11 = *reinterpret_cast<void***>(esi8->f444);
    eax12 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax11 + 12)(v9));
    esp13 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0xc8 - 4 - 4 - 4 - 4 - 4 + 4);
    ecx14 = esi8->f412;
    v15 = eax12;
    eax16 = esi8->f472;
    v17 = ecx14;
    if (eax16 && reinterpret_cast<signed char>(eax16) < reinterpret_cast<signed char>(ecx14)) {
        v17 = eax16;
    }
    ecx18 = 6;
    do {
        edi19 = g180458c8;
        --ecx18;
        v20 = edi19;
    } while (ecx18);
    ecx21 = esi8->f444;
    esp22 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp13) - 4);
    eax23 = *reinterpret_cast<void***>(ecx21);
    v24 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp22) + 100);
    *reinterpret_cast<void***>(eax23 + 16)();
    esp25 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp22) - 4 - 4 - 4 + 4);
    eax26 = reinterpret_cast<struct s439*>(reinterpret_cast<int32_t>(esi8->f44) - 1);
    if (reinterpret_cast<int32_t>(eax26) < 0) {
        ebx27 = v4;
        eax28 = v4;
    } else {
        ecx29 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(eax26 + reinterpret_cast<int32_t>(eax26) * 2) << 2);
        ebp30 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp25) + reinterpret_cast<int32_t>(ecx29) + 96);
        edi31 = reinterpret_cast<struct s440*>(reinterpret_cast<int32_t>(ecx29) + reinterpret_cast<int32_t>(esi8) + 52);
        v32 = reinterpret_cast<void**>(&eax26->f1);
        do {
            eax33 = reinterpret_cast<struct s441*>(&edi31->f480);
            edx34 = edi31->f476;
            v35 = eax33->f0;
            v36 = eax33->f4;
            ebx37 = eax33->f8;
            ecx38 = eax33->f12;
            if (reinterpret_cast<signed char>(ecx38) >= reinterpret_cast<signed char>(0)) {
                ebx37 = reinterpret_cast<void**>(1 << *reinterpret_cast<unsigned char*>(&ecx38));
            }
            ecx39 = eax33->f4;
            v40 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(edx34) + reinterpret_cast<unsigned char>(ebx37));
            edx41 = eax33->f0;
            v42 = ecx39;
            v43 = edx41;
            edx44 = eax33->f8;
            eax45 = eax33->f12;
            v46 = edx44;
            v47 = eax45;
            fun_1801a210(ebp30, reinterpret_cast<int32_t>(esp25) + 56, 1, v24, 0, 0, v9, v6, v32, v2, v15, v48, v49, v17, v50, v51, v52, v40, v43, v42, v46, v47, v53, v35, v36, v54, v55, v56, v57, v58, 0, v59, v60, v61, v62, 0, v63, v64, v65, v66, 0, v67, v68);
            esp69 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp25) - 4 - 4 - 4 + 8 + 4);
            eax70 = esi8->f452;
            edx71 = esi8->f456;
            ebx27 = reinterpret_cast<void*>(0);
            v2 = eax70;
            v48 = edx71;
            if (reinterpret_cast<unsigned char>(eax70) < reinterpret_cast<unsigned char>(0x10000)) {
                v2 = eax70 + 0x10000;
                esp72 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp69) - 4 - 4);
                ecx73 = esi8->f440;
                esp74 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp72) - 4);
                edx75 = *reinterpret_cast<void***>(ecx73);
                eax76 = reinterpret_cast<void*>(*reinterpret_cast<void***>(edx75 + 100)(&edi31->f476, reinterpret_cast<int32_t>(edi31) - 4, 2, v15, esp74 + 9, reinterpret_cast<int32_t>(esp72) + 40));
                esp69 = reinterpret_cast<void*>(esp74 - 1 - 1 - 1 - 1 - 1 - 1 + 1);
                ebx27 = eax76;
            }
            eax77 = *reinterpret_cast<void****>(reinterpret_cast<int32_t>(edi31) - 4);
            ecx78 = edi31->f12;
            if (reinterpret_cast<signed char>(ecx78) < reinterpret_cast<signed char>(0)) {
                edx79 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(edi31->f8) * reinterpret_cast<uint32_t>(ebx27));
            } else {
                edx79 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebx27) << *reinterpret_cast<unsigned char*>(&ecx78));
            }
            v49 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax77) + reinterpret_cast<uint32_t>(edx79));
            v17 = edi31->f0;
            v50 = edi31->f4;
            v51 = edi31->f8;
            ecx80 = esi8->f440;
            v52 = edi31->f12;
            esp81 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp69) - 4 - 4);
            esp82 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp81) - 4);
            eax83 = *reinterpret_cast<void***>(ecx80);
            esp84 = reinterpret_cast<void***>(esp82 - 1 - 1 - 1);
            eax28 = reinterpret_cast<void*>(*reinterpret_cast<void***>(eax83 + 100)(ebp30, esp84 + 60, v6, reinterpret_cast<unsigned char>(v15) - reinterpret_cast<uint32_t>(ebx27), esp82 + 9));
            esp25 = reinterpret_cast<void*>(esp84 - 4 - 4 - 4 + 4);
            edi31 = reinterpret_cast<struct s440*>(reinterpret_cast<int32_t>(edi31) - 20);
            ebp30 = ebp30 - 20;
        } while (reinterpret_cast<int32_t>(esp81) + 40 - 1);
    }
    ebx85 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(ebx27) + reinterpret_cast<uint32_t>(eax28));
    esi8->f456 = v48;
    eax86 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v2) >> 16);
    v87 = eax86;
    esi8->f452 = v2;
    v88 = ebx85;
    if (reinterpret_cast<signed char>(v6) > reinterpret_cast<signed char>(eax86)) {
    }
    v89 = v87;
    esi8->f452 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v2) - (reinterpret_cast<unsigned char>(v87) << 16));
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(v87) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(v87 == 0)) && (ebp90 = reinterpret_cast<void*>(0), !(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(esi8->f44) < 0) | reinterpret_cast<uint1_t>(esi8->f44 == 0)))) {
        ebx91 = reinterpret_cast<void**>(&esi8->f528);
        do {
            ecx92 = v20;
            if (reinterpret_cast<signed char>(ecx92) < reinterpret_cast<signed char>(0)) {
                eax93 = reinterpret_cast<void*>(0);
            } else {
                eax93 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(v89 - 1) << *reinterpret_cast<unsigned char*>(&ecx92));
            }
            esp94 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp25) - 4 - 4);
            fun_1801a210(esp94 + 44, ebx91, 1, v24, 0, 0, v9, v89, v87, v2, v88, v48, reinterpret_cast<int32_t>(v95) + reinterpret_cast<uint32_t>(eax93), v96, v97, 0, v20, v40, v43, v42, v46, v47, v98, v99, v100, v101, v102, v103, v104, v105, 0, v106, v107, v108, v109, 0, v110, v111, v112, v113, 0, v114, v115);
            esp25 = reinterpret_cast<void*>(esp94 - 4 + 8 + 4);
            ebp90 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(ebp90) + 1);
            ebx91 = ebx91 + 20;
        } while (reinterpret_cast<int32_t>(ebp90) < reinterpret_cast<int32_t>(esi8->f44));
        ebx85 = v88;
    }
    fun_180281c0(esi8, ebx85);
    ecx116 = esi8->f444;
    edx117 = *reinterpret_cast<void***>(ecx116);
    *reinterpret_cast<void***>(edx117 + 24)();
    fun_18027770(esi8, ebx85);
    goto v118;
}

struct s443 {
    signed char[12] pad12;
    int32_t f12;
    signed char[20] pad36;
    int32_t f36;
    signed char[4] pad44;
    int32_t f44;
};

struct s442 {
    signed char[12] pad12;
    void** f12;
    signed char[815] pad828;
    int32_t f828;
    struct s443** f832;
    int32_t f836;
    int32_t f840;
    void** f844;
    signed char[259] pad1104;
    void* f1104;
};

void fun_18028fe0(struct s442* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15) {
    int32_t ecx16;
    void* edx17;
    void** eax18;
    void** edx19;
    void** eax20;
    void** ecx21;
    void** esi22;
    struct s443** ecx23;
    struct s443* edx24;
    int32_t ecx25;
    int32_t edx26;
    struct s443** ecx27;
    struct s443* eax28;
    struct s443* eax29;
    void** eax30;
    void** ecx31;

    if (!ecx->f844) {
        ecx16 = ecx->f836;
        edx17 = ecx->f1104;
        eax18 = *reinterpret_cast<void***>(reinterpret_cast<int32_t>(ecx) + ecx16 * 4 + 0x3d0);
        ecx->f844 = eax18;
        edx19 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(edx17) - *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(ecx) + ecx16 * 4 + 0x350) - ecx->f828 + reinterpret_cast<unsigned char>(eax18));
        if (reinterpret_cast<signed char>(edx19) < reinterpret_cast<signed char>(0)) {
        }
        eax20 = reinterpret_cast<void**>(0);
        ecx21 = ecx->f12;
        *reinterpret_cast<int16_t*>(&eax20) = fun_1800da70(ecx21, ecx21, 0, eax18, esi22, edx19, 0, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
        ecx23 = ecx->f832;
        edx24 = *ecx23;
        edx24->f44(eax20, esi22, edx19);
        ecx25 = ecx->f840;
        edx26 = ecx->f836 + 1;
        ecx->f836 = edx26;
        if (edx26 == ecx25) {
            ecx->f836 = 0;
        }
    }
    ecx27 = ecx->f832;
    eax28 = *ecx27;
    eax28->f36();
    eax29 = *ecx->f832;
    eax30 = reinterpret_cast<void**>(eax29->f12());
    ecx31 = ecx->f844;
    if (reinterpret_cast<signed char>(eax30) > reinterpret_cast<signed char>(ecx31)) {
        goto 0;
    } else {
        goto 0;
    }
}

struct s445 {
    signed char[4] pad4;
    int32_t f4;
    int32_t f8;
};

struct s444 {
    signed char[448] pad448;
    struct s445** f448;
    signed char[4] pad456;
    void** f456;
};

void fun_18029530(struct s444* ecx, void** a2, void** a3, int32_t a4) {
    void** ebx5;
    void** esi6;
    void** eax7;
    struct s445* eax8;
    void** eax9;
    struct s445** ecx10;
    struct s445* edx11;
    void** ecx12;

    ebx5 = a2;
    esi6 = a3;
    if (reinterpret_cast<signed char>(esi6) < reinterpret_cast<signed char>(ebx5)) {
        eax7 = esi6;
        esi6 = ebx5;
        ebx5 = eax7;
    }
    eax8 = *ecx->f448;
    eax9 = reinterpret_cast<void**>(eax8->f8());
    if (reinterpret_cast<signed char>(esi6) > reinterpret_cast<signed char>(eax9)) {
        ecx10 = ecx->f448;
        edx11 = *ecx10;
        edx11->f4(esi6);
    }
    ecx12 = ecx->f456;
    fun_18029120(ecx12, ebx5, esi6, a4);
    return;
}

struct s446 {
    signed char[20] pad20;
    void** f20;
    signed char[3] pad24;
    void** f24;
    signed char[7] pad32;
    int16_t f32;
    signed char[62] pad96;
    void** f96;
    signed char[3] pad100;
    void** f100;
    signed char[11] pad112;
    void** f112;
    signed char[3] pad116;
    void* f116;
};

struct s447 {
    void** f0;
    signed char[3] pad4;
    void** f4;
};

int16_t fun_1802a280(struct s446* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41) {
    void** v42;
    void** v43;
    void** ebx44;
    void** v45;
    void** ebp46;
    void** v47;
    void** esi48;
    void** esi49;
    void** v50;
    void** edi51;
    struct s446* edi52;
    void** ebp53;
    void** ecx54;
    void** eax55;
    void** edx56;
    void** v57;
    int32_t ebx58;
    void** v59;
    void** ebx60;
    struct s447* esi61;
    void** eax62;
    void** eax63;
    void** eax64;

    v42 = reinterpret_cast<void**>(__return_address());
    v43 = ebx44;
    v45 = ebp46;
    v47 = esi48;
    esi49 = *reinterpret_cast<void***>(a2);
    v50 = edi51;
    edi52 = ecx;
    ebp53 = reinterpret_cast<void**>(0);
    ecx54 = reinterpret_cast<void**>(&edi52->f20);
    *reinterpret_cast<void***>(ecx54) = esi49;
    *reinterpret_cast<void***>(ecx54 + 4) = *reinterpret_cast<void***>(a2 + 4);
    *reinterpret_cast<void***>(ecx54 + 8) = *reinterpret_cast<void***>(a2 + 8);
    *reinterpret_cast<void***>(ecx54 + 12) = *reinterpret_cast<void***>(a2 + 12);
    *reinterpret_cast<void***>(ecx54 + 16) = *reinterpret_cast<void***>(a2 + 16);
    eax55 = edi52->f100;
    if (eax55) {
        edx56 = edi52->f24;
        __asm__("cdq ");
        eax55 = reinterpret_cast<void**>(reinterpret_cast<signed char>(eax55) / reinterpret_cast<signed char>(edi52->f112));
        *reinterpret_cast<int16_t*>(&eax55) = fun_1800da70(ecx54, eax55, edx56, 0x3e8, v50, v47, v45, v43, v42, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
    } else {
        v57 = ecx54;
        ecx54 = edi52->f96;
        *reinterpret_cast<int16_t*>(&eax55) = fun_1802a600(ecx54, ecx54, v57, v50, v47, v45, v43, v42, a2, a3, a4, a5, a6, a7, a8, a9);
    }
    ebx58 = 0;
    v59 = reinterpret_cast<void**>(0);
    *reinterpret_cast<int16_t*>(&ebx58) = edi52->f32;
    ebx60 = reinterpret_cast<void**>(ebx58 * reinterpret_cast<unsigned char>(eax55));
    if (reinterpret_cast<signed char>(edi52->f112) <= reinterpret_cast<signed char>(0)) {
        addr_0x1802a31b_5:
        return 0;
    } else {
        do {
            esi61 = reinterpret_cast<struct s447*>(reinterpret_cast<unsigned char>(ebp53) + reinterpret_cast<uint32_t>(edi52->f116));
            eax62 = esi61->f0;
            esi61->f4 = ebx60;
            fun_1802b2b0(ecx54, eax62, v50, v47, v45, v43, v42, v59, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41);
            eax63 = fun_1802b2bb(ecx54, ebx60, eax62, v50, v47, v45, v43, v42, v59);
            esi61->f0 = eax63;
            if (!eax63) 
                break;
            ecx54 = edi52->f112;
            eax64 = v59 + 1;
            ebp53 = ebp53 + 32;
            v59 = eax64;
        } while (reinterpret_cast<signed char>(eax64) < reinterpret_cast<signed char>(ecx54));
        goto addr_0x1802a31b_5;
    }
    return 4;
}

struct s448 {
    signed char[4] pad4;
    signed char f4;
    signed char f5;
    signed char f6;
    signed char[5] pad12;
    void** f12;
    signed char[3] pad16;
    void** f16;
    signed char[27] pad44;
    void** f44;
    signed char[47] pad92;
    unsigned char f92;
    signed char[11] pad104;
    void** f104;
    signed char[7] pad112;
    void** f112;
    signed char[3] pad116;
    void* f116;
};

int32_t fun_1802a460(struct s448* ecx, void** a2, void** a3) {
    void** v4;
    void** v5;
    void** esi6;
    struct s448* esi7;
    signed char al8;
    void** ecx9;
    void** v10;
    void** ebx11;
    void** ebx12;
    void** v13;
    void** ebp14;
    void*** esp15;
    void** v16;
    void** edi17;
    void** eax18;
    void** v19;
    void* ebp20;
    void** edi21;
    void** eax22;
    void** ecx23;
    void** v24;
    void** v25;
    void** v26;
    void** edx27;
    void** v28;
    void** ecx29;
    void** v30;
    int32_t eax31;
    void** ecx32;
    int32_t eax33;
    void** ecx34;
    void** v35;
    void** ecx36;
    void** v37;
    void** v38;
    void** ecx39;
    void** eax40;
    void** edx41;

    v4 = reinterpret_cast<void**>(__return_address());
    v5 = esi6;
    esi7 = ecx;
    al8 = esi7->f4;
    esi7->f5 = 1;
    if (al8 && !esi7->f6) {
        ecx9 = esi7->f16;
        v10 = ebx11;
        ebx12 = reinterpret_cast<void**>(0);
        v13 = ebp14;
        esp15 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 12 - 4 - 4 - 4 - 4);
        v16 = edi17;
        esi7->f6 = 1;
        if (ecx9) {
            fun_18027410(ecx9);
            esp15 = esp15 - 4 + 4;
        }
        eax18 = esi7->f112;
        v19 = reinterpret_cast<void**>(0);
        if (reinterpret_cast<signed char>(eax18) > reinterpret_cast<signed char>(0)) {
            ebp20 = reinterpret_cast<void*>(0);
            do {
                edi21 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esi7->f116) + reinterpret_cast<uint32_t>(ebp20));
                if (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(edi21 + 16)) & 1) {
                    eax22 = esi7->f12;
                    if (eax22 && (ecx23 = *reinterpret_cast<void***>(eax22), v24 = reinterpret_cast<void**>(esp15 + 24), v25 = *reinterpret_cast<void***>(edi21 + 4), v26 = *reinterpret_cast<void***>(edi21), *reinterpret_cast<void***>(ecx23 + 28)(eax22, v26, v25, v24), esp15 = esp15 - 4 - 4 - 4 - 4 - 4 + 4, !!esi7->f44)) {
                        edx27 = *reinterpret_cast<void***>(edi21);
                        v28 = *reinterpret_cast<void***>(edi21 + 4);
                        fun_1802b1e0(&esi7->f44, edx27, v28, eax22, v26, v25, v24, v16);
                        esp15 = esp15 - 4 - 4 - 4 + 8 + 4;
                    }
                    ecx29 = esi7->f16;
                    if (ecx29) {
                        fun_18027460(ecx29, v16, v13, v10, v5, v19);
                        esp15 = esp15 - 4 + 4;
                    }
                    if (!esi7->f5) {
                        v30 = esi7->f104;
                        eax31 = reinterpret_cast<int32_t>(waveOutPause(v30));
                        esp15 = esp15 - 4 - 4 + 4;
                        if (eax31) 
                            break;
                        v19 = reinterpret_cast<void**>(1);
                        esi7->f5 = 1;
                    }
                    ecx32 = esi7->f104;
                    eax33 = reinterpret_cast<int32_t>(waveOutWrite(ecx32, edi21, 32));
                    esp15 = esp15 - 4 - 4 - 4 - 4 + 4;
                    if (eax33) 
                        break;
                    ecx34 = esi7->f16;
                    if (ecx34) {
                        fun_18027430(ecx34, ecx32, edi21, 32, v16, v13, v10, v5, v19);
                        esp15 = esp15 - 4 + 4;
                    }
                    if (!(esi7->f92 & 2) && v5) {
                        ++v13;
                    }
                }
                ++ebx12;
                ebp20 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebp20) + 32);
            } while (reinterpret_cast<signed char>(ebx12) < reinterpret_cast<signed char>(esi7->f112));
        }
        if (v19 != esi7->f112) {
            if (!1 && (v35 = esi7->f104, waveOutRestart(v35), ecx36 = esi7->f16, !!ecx36)) {
                fun_18027430(ecx36, v35, v5, v19, 0, v37, v4, a2, a3);
            }
        } else {
            v38 = esi7->f104;
            waveOutReset(v38);
            esi7->f5 = 0;
        }
        ecx39 = esi7->f16;
        if (ecx39) {
            fun_18027490(ecx39);
        }
        eax40 = esi7->f12;
        edx41 = *reinterpret_cast<void***>(eax40);
        *reinterpret_cast<void***>(edx41 + 32)(eax40);
        esi7->f6 = 0;
    }
    return 0;
}

int16_t fun_1802a900(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_1802a920(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

void** g18047038;

int16_t fun_1802b707(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36) {
    void** eax37;
    void** edi38;
    void** esi39;
    void** ebx40;
    int1_t zf41;
    void** ebp42;
    void** v43;
    void** eax44;
    void** eax45;
    void** eax46;

    if (a3) {
        if (a3 == 1) 
            goto addr_0x1802b72d_3;
        if (!reinterpret_cast<int1_t>(a3 == 2)) 
            goto addr_0x1802b74f_5;
        addr_0x1802b72d_3:
        eax37 = g18047038;
        if (!eax37) 
            goto addr_0x1802b73f_6;
        eax37 = reinterpret_cast<void**>(eax37(a2, a3, a4));
        if (!eax37) 
            goto addr_0x1802b74b_8;
        addr_0x1802b73f_6:
        *reinterpret_cast<int16_t*>(&eax37) = fun_1802b62e(a2, a3, a4, edi38, esi39, ebx40);
        zf41 = eax37 == 0;
    } else {
        zf41 = g18045930 == 0;
    }
    if (!zf41) {
        addr_0x1802b74f_5:
        *reinterpret_cast<int16_t*>(&eax37) = fun_18004a40(ecx, a2, a3, a4, edi38, esi39, ebx40, ebp42, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36);
        v43 = eax37;
        if (!reinterpret_cast<int1_t>(a3 == 1)) {
            addr_0x1802b76b_11:
            if (!a3 || reinterpret_cast<int1_t>(a3 == 3)) {
                *reinterpret_cast<int16_t*>(&eax37) = fun_1802b62e(a2, a3, a4, edi38, esi39, ebx40);
                if (!eax37) {
                    v43 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v43) & reinterpret_cast<unsigned char>(eax37));
                }
                if (v43 && (eax44 = g18047038, !!eax44)) {
                    eax45 = reinterpret_cast<void**>(eax44(a2, a3, a4));
                    v43 = eax45;
                    goto addr_0x1802b79a_16;
                }
            }
        } else {
            if (eax37) {
                addr_0x1802b79a_16:
                eax46 = v43;
            } else {
                fun_1802b62e(a2, eax37, a4, edi38, esi39, ebx40);
                goto addr_0x1802b76b_11;
            }
        }
    } else {
        addr_0x1802b74b_8:
        eax46 = reinterpret_cast<void**>(0);
    }
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s449 {
    signed char[1] pad1;
    signed char f1;
};

struct s450 {
    signed char[1] pad1;
    signed char f1;
};

struct s451 {
    signed char[2] pad2;
    int32_t f2;
};

struct s452 {
    signed char[2] pad2;
    int32_t f2;
};

void fun_1802b9b9(uint32_t ecx) {
    uint32_t edx2;
    uint32_t edx3;
    signed char* edi4;
    signed char* esi5;
    uint32_t ecx6;
    struct s449* edi7;
    struct s450* esi8;
    int32_t* esi9;
    struct s451* esi10;
    int32_t* edi11;
    struct s452* edi12;

    edx2 = edx3 & ecx;
    *edi4 = *esi5;
    ecx6 = ecx >> 2;
    edi7->f1 = esi8->f1;
    esi9 = &esi10->f2;
    edi11 = &edi12->f2;
    if (ecx6 < 8) 
        goto 0x1802b97c;
    while (ecx6) {
        --ecx6;
        *edi11 = *esi9;
        ++edi11;
        ++esi9;
    }
    switch (edx2) {
    case 3:
        goto 0x1802baa0;
    case 2:
        goto 0x1802ba8c;
    case 1:
        goto 0x1802ba80;
    case 0:
        goto 0x1802ba78;
    }
}

struct s453 {
    signed char[1] pad1;
    int32_t f1;
};

struct s454 {
    signed char[1] pad1;
    int32_t f1;
};

void fun_1802b9e0(uint32_t ecx) {
    uint32_t edx2;
    uint32_t edx3;
    signed char* edi4;
    signed char* esi5;
    int32_t* esi6;
    struct s453* esi7;
    uint32_t ecx8;
    int32_t* edi9;
    struct s454* edi10;

    edx2 = edx3 & ecx;
    *edi4 = *esi5;
    esi6 = &esi7->f1;
    ecx8 = ecx >> 2;
    edi9 = &edi10->f1;
    if (ecx8 < 8) 
        goto 0x1802b97c;
    while (ecx8) {
        --ecx8;
        *edi9 = *esi6;
        ++edi9;
        ++esi6;
    }
    switch (edx2) {
    case 3:
        goto 0x1802baa0;
    case 2:
        goto 0x1802ba8c;
    case 1:
        goto 0x1802ba80;
    case 0:
        goto 0x1802ba78;
    }
}

void fun_1802b9f9(int32_t ecx) {
}

void fun_1802ba66() {
}

void fun_1802bade() {
}

struct s455 {
    signed char[3] pad3;
    signed char f3;
};

struct s456 {
    signed char[3] pad3;
    signed char f3;
};

struct s457 {
    signed char[2] pad2;
    signed char f2;
};

struct s458 {
    signed char[2] pad2;
    signed char f2;
};

void fun_1802bb35(uint32_t ecx) {
    uint32_t edx2;
    uint32_t edx3;
    struct s455* edi4;
    struct s456* esi5;
    uint32_t ecx6;
    struct s457* edi7;
    struct s458* esi8;
    int32_t* esi9;
    void* esi10;
    int32_t* edi11;
    void* edi12;

    edx2 = edx3 & ecx;
    edi4->f3 = esi5->f3;
    ecx6 = ecx >> 2;
    edi7->f2 = esi8->f2;
    esi9 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi10) - 2);
    edi11 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi12) - 2);
    if (ecx6 < 8) 
        goto 0x1802bae0;
    while (ecx6) {
        --ecx6;
        *edi11 = *esi9;
        --edi11;
        --esi9;
    }
    switch (edx2) {
    case 3:
        goto 0x1802bc3c;
    case 2:
        goto 0x1802bc28;
    case 1:
        goto 0x1802bc18;
    case 0:
        goto 0x1802bc10;
    }
}

struct s459 {
    signed char[3] pad3;
    signed char f3;
};

struct s460 {
    signed char[3] pad3;
    signed char f3;
};

struct s461 {
    signed char[2] pad2;
    signed char f2;
};

struct s462 {
    signed char[2] pad2;
    signed char f2;
};

struct s463 {
    signed char[1] pad1;
    signed char f1;
};

struct s464 {
    signed char[1] pad1;
    signed char f1;
};

void fun_1802bb60(uint32_t ecx) {
    uint32_t edx2;
    uint32_t edx3;
    struct s459* edi4;
    struct s460* esi5;
    struct s461* edi6;
    struct s462* esi7;
    uint32_t ecx8;
    struct s463* edi9;
    struct s464* esi10;
    int32_t* esi11;
    void* esi12;
    int32_t* edi13;
    void* edi14;

    edx2 = edx3 & ecx;
    edi4->f3 = esi5->f3;
    edi6->f2 = esi7->f2;
    ecx8 = ecx >> 2;
    edi9->f1 = esi10->f1;
    esi11 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi12) - 3);
    edi13 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi14) - 3);
    if (ecx8 < 8) 
        goto 0x1802bae0;
    while (ecx8) {
        --ecx8;
        *edi13 = *esi11;
        --edi13;
        --esi11;
    }
    switch (edx2) {
    case 3:
        goto 0x1802bc3c;
    case 2:
        goto 0x1802bc28;
    case 1:
        goto 0x1802bc18;
    case 0:
        goto 0x1802bc10;
    }
}

void fun_1802bb91(int32_t ecx) {
}

void fun_1802bbfe() {
}

void fun_1802c63f(struct s302* a1) {
    struct s302* eax2;
    void** dl3;
    void** cl4;
    void*** eax5;
    void*** ecx6;
    int1_t zf7;

    eax2 = a1;
    dl3 = g1804489c;
    cl4 = eax2->f0;
    if (cl4) {
        do {
            if (cl4 == dl3) 
                break;
            cl4 = eax2->f1;
            eax2 = reinterpret_cast<struct s302*>(&eax2->f1);
        } while (cl4);
    }
    eax5 = &eax2->f1;
    if (!eax2->f0) {
        addr_0x1802c68c_5:
        return;
    } else {
        while (*eax5 && (*eax5 != 0x65 && *eax5 != 69)) {
            ++eax5;
        }
        ecx6 = eax5;
        do {
            --eax5;
        } while (*eax5 == 48);
        if (*eax5 == dl3) 
            goto addr_0x1802c681_11;
    }
    do {
        addr_0x1802c682_12:
        ++eax5;
        ++ecx6;
        zf7 = *ecx6 == 0;
        *eax5 = *ecx6;
    } while (!zf7);
    goto addr_0x1802c68c_5;
    addr_0x1802c681_11:
    --eax5;
    goto addr_0x1802c682_12;
}

int32_t fun_1802c68d(int32_t a1) {
    int1_t cf2;

    __asm__("fld qword [eax]");
    __asm__("fcomp qword [0x180353e0]");
    __asm__("fnstsw ax");
    __asm__("sahf ");
    if (cf2) {
        return 0;
    } else {
        return 1;
    }
}

int32_t fun_1802ea85() {
    return 1;
}

uint32_t fun_1802ece1(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** v6;
    uint32_t eax7;
    int1_t zf8;
    void** v9;
    void** ebx10;
    void** v11;
    void** edi12;
    uint32_t ebx13;
    void** ecx14;
    void** edi15;
    int1_t less_or_equal16;
    void** v17;
    void** esi18;
    void** eax19;
    void* esi20;
    void** v21;
    uint32_t eax22;
    void** eax23;
    void** v24;
    void** eax25;
    void** v26;
    void** eax27;
    int1_t less28;

    v6 = reinterpret_cast<void**>(__return_address());
    eax7 = fun_1802f086(ecx, v6);
    zf8 = g1804597c == 0;
    if (zf8) {
        return eax7;
    }
    v9 = ebx10;
    v11 = edi12;
    ebx13 = 0;
    fun_1802e8ff(ecx, 2, v11, v9, v6, a2, a3, a4, a5);
    ecx14 = reinterpret_cast<void**>(2);
    edi15 = reinterpret_cast<void**>(3);
    less_or_equal16 = reinterpret_cast<signed char>(g18046f00) <= reinterpret_cast<signed char>(3);
    if (!less_or_equal16) 
        goto addr_0x1803136a_5;
    addr_0x180313c7_6:
    fun_1802e960(ecx14, 2, v11, v9, v6, a2);
    return ebx13;
    addr_0x1803136a_5:
    v17 = esi18;
    do {
        eax19 = g18045ee0;
        esi20 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(edi15) << 2);
        if (*reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi20) + reinterpret_cast<unsigned char>(eax19))) {
            if (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi20) + reinterpret_cast<unsigned char>(eax19)) + 12)) & 0x83 && (v21 = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi20) + reinterpret_cast<unsigned char>(eax19)), eax22 = fun_1802c3d8(ecx14, v21, v17), ecx14 = v21, eax22 != 0xffffffff)) {
                ++ebx13;
            }
            if (reinterpret_cast<signed char>(edi15) >= reinterpret_cast<signed char>(20)) {
                eax23 = g18045ee0;
                v24 = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi20) + reinterpret_cast<unsigned char>(eax23)) + 32;
                DeleteCriticalSection(ecx14, v24);
                eax25 = g18045ee0;
                v26 = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi20) + reinterpret_cast<unsigned char>(eax25));
                fun_1802ca0b(ecx14, v26, v24, v17, v11, v9);
                eax27 = g18045ee0;
                ecx14 = v26;
                *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi20) + reinterpret_cast<unsigned char>(eax27)) = reinterpret_cast<void**>(0);
            }
        }
        ++edi15;
        less28 = reinterpret_cast<signed char>(edi15) < reinterpret_cast<signed char>(g18046f00);
    } while (less28);
    goto addr_0x180313c7_6;
}

struct s465 {
    signed char[1] pad1;
    signed char f1;
};

struct s466 {
    signed char[1] pad1;
    signed char f1;
};

struct s467 {
    signed char[2] pad2;
    int32_t f2;
};

struct s468 {
    signed char[2] pad2;
    int32_t f2;
};

void fun_1802f2a9(uint32_t ecx) {
    uint32_t edx2;
    uint32_t edx3;
    signed char* edi4;
    signed char* esi5;
    uint32_t ecx6;
    struct s465* edi7;
    struct s466* esi8;
    int32_t* esi9;
    struct s467* esi10;
    int32_t* edi11;
    struct s468* edi12;

    edx2 = edx3 & ecx;
    *edi4 = *esi5;
    ecx6 = ecx >> 2;
    edi7->f1 = esi8->f1;
    esi9 = &esi10->f2;
    edi11 = &edi12->f2;
    if (ecx6 < 8) 
        goto 0x1802f26c;
    while (ecx6) {
        --ecx6;
        *edi11 = *esi9;
        ++edi11;
        ++esi9;
    }
    switch (edx2) {
    case 3:
        goto 0x1802f390;
    case 2:
        goto 0x1802f37c;
    case 1:
        goto 0x1802f370;
    case 0:
        goto 0x1802f368;
    }
}

struct s469 {
    signed char[1] pad1;
    int32_t f1;
};

struct s470 {
    signed char[1] pad1;
    int32_t f1;
};

void fun_1802f2d0(uint32_t ecx) {
    uint32_t edx2;
    uint32_t edx3;
    signed char* edi4;
    signed char* esi5;
    int32_t* esi6;
    struct s469* esi7;
    uint32_t ecx8;
    int32_t* edi9;
    struct s470* edi10;

    edx2 = edx3 & ecx;
    *edi4 = *esi5;
    esi6 = &esi7->f1;
    ecx8 = ecx >> 2;
    edi9 = &edi10->f1;
    if (ecx8 < 8) 
        goto 0x1802f26c;
    while (ecx8) {
        --ecx8;
        *edi9 = *esi6;
        ++edi9;
        ++esi6;
    }
    switch (edx2) {
    case 3:
        goto 0x1802f390;
    case 2:
        goto 0x1802f37c;
    case 1:
        goto 0x1802f370;
    case 0:
        goto 0x1802f368;
    }
}

void fun_1802f2e9(int32_t ecx) {
}

void fun_1802f356() {
}

void fun_1802f3ce() {
}

struct s471 {
    signed char[3] pad3;
    signed char f3;
};

struct s472 {
    signed char[3] pad3;
    signed char f3;
};

struct s473 {
    signed char[2] pad2;
    signed char f2;
};

struct s474 {
    signed char[2] pad2;
    signed char f2;
};

void fun_1802f425(uint32_t ecx) {
    uint32_t edx2;
    uint32_t edx3;
    struct s471* edi4;
    struct s472* esi5;
    uint32_t ecx6;
    struct s473* edi7;
    struct s474* esi8;
    int32_t* esi9;
    void* esi10;
    int32_t* edi11;
    void* edi12;

    edx2 = edx3 & ecx;
    edi4->f3 = esi5->f3;
    ecx6 = ecx >> 2;
    edi7->f2 = esi8->f2;
    esi9 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi10) - 2);
    edi11 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi12) - 2);
    if (ecx6 < 8) 
        goto 0x1802f3d0;
    while (ecx6) {
        --ecx6;
        *edi11 = *esi9;
        --edi11;
        --esi9;
    }
    switch (edx2) {
    case 3:
        goto 0x1802f52c;
    case 2:
        goto 0x1802f518;
    case 1:
        goto 0x1802f508;
    case 0:
        goto 0x1802f500;
    }
}

struct s475 {
    signed char[3] pad3;
    signed char f3;
};

struct s476 {
    signed char[3] pad3;
    signed char f3;
};

struct s477 {
    signed char[2] pad2;
    signed char f2;
};

struct s478 {
    signed char[2] pad2;
    signed char f2;
};

struct s479 {
    signed char[1] pad1;
    signed char f1;
};

struct s480 {
    signed char[1] pad1;
    signed char f1;
};

void fun_1802f450(uint32_t ecx) {
    uint32_t edx2;
    uint32_t edx3;
    struct s475* edi4;
    struct s476* esi5;
    struct s477* edi6;
    struct s478* esi7;
    uint32_t ecx8;
    struct s479* edi9;
    struct s480* esi10;
    int32_t* esi11;
    void* esi12;
    int32_t* edi13;
    void* edi14;

    edx2 = edx3 & ecx;
    edi4->f3 = esi5->f3;
    edi6->f2 = esi7->f2;
    ecx8 = ecx >> 2;
    edi9->f1 = esi10->f1;
    esi11 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esi12) - 3);
    edi13 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(edi14) - 3);
    if (ecx8 < 8) 
        goto 0x1802f3d0;
    while (ecx8) {
        --ecx8;
        *edi13 = *esi11;
        --edi13;
        --esi11;
    }
    switch (edx2) {
    case 3:
        goto 0x1802f52c;
    case 2:
        goto 0x1802f518;
    case 1:
        goto 0x1802f508;
    case 0:
        goto 0x1802f500;
    }
}

void fun_1802f481(int32_t ecx) {
}

void fun_1802f4ee() {
}

struct s481 {
    unsigned char f0;
    unsigned char f1;
    unsigned char f2;
    unsigned char f3;
};

uint32_t fun_180310c0(unsigned char* a1, struct s481* a2) {
    unsigned char* edx3;
    struct s481* ecx4;
    unsigned char eax5;
    uint1_t cf6;

    edx3 = a1;
    ecx4 = a2;
    if (reinterpret_cast<uint32_t>(edx3) & 3) {
        if (!(reinterpret_cast<uint32_t>(edx3) & 1)) {
            addr_0x18031128_3:
            eax5 = *edx3;
            edx3 = edx3 + 2;
            cf6 = reinterpret_cast<uint1_t>(eax5 < ecx4->f0);
            if (eax5 != ecx4->f0) {
                addr_0x18031104_4:
                return (eax5 - (eax5 + reinterpret_cast<uint1_t>(eax5 < reinterpret_cast<unsigned char>(eax5 + cf6))) << 1) + 1;
            } else {
                eax5 = eax5;
                if (!eax5) 
                    goto addr_0x18031100_6;
                cf6 = reinterpret_cast<uint1_t>((&eax5)[1] < ecx4->f1);
                if ((&eax5)[1] != ecx4->f1) 
                    goto addr_0x18031104_4;
            }
        } else {
            eax5 = *edx3;
            ++edx3;
            cf6 = reinterpret_cast<uint1_t>(eax5 < ecx4->f0);
            if (eax5 != ecx4->f0) 
                goto addr_0x18031104_4;
            ecx4 = reinterpret_cast<struct s481*>(&ecx4->f1);
            if (!eax5) 
                goto addr_0x18031100_6;
            if (!(reinterpret_cast<uint32_t>(edx3) & 2)) 
                goto addr_0x180310d0_11; else 
                goto addr_0x18031128_3;
        }
    } else {
        do {
            addr_0x180310d0_11:
            eax5 = *edx3;
            cf6 = reinterpret_cast<uint1_t>(eax5 < ecx4->f0);
            if (eax5 != ecx4->f0) 
                goto addr_0x18031104_4;
            eax5 = eax5;
            if (!eax5) 
                goto addr_0x18031100_6;
            cf6 = reinterpret_cast<uint1_t>((&eax5)[1] < ecx4->f1);
            if ((&eax5)[1] != ecx4->f1) 
                goto addr_0x18031104_4;
            (&eax5)[1] = (&eax5)[1];
            if (!(&eax5)[1]) 
                goto addr_0x18031100_6;
            eax5 = reinterpret_cast<unsigned char>(eax5 >> 16);
            cf6 = reinterpret_cast<uint1_t>(eax5 < ecx4->f2);
            if (eax5 != ecx4->f2) 
                goto addr_0x18031104_4;
            eax5 = eax5;
            if (!eax5) 
                goto addr_0x18031100_6;
            cf6 = reinterpret_cast<uint1_t>((&eax5)[1] < ecx4->f3);
            if ((&eax5)[1] != ecx4->f3) 
                goto addr_0x18031104_4;
            ++ecx4;
            edx3 = edx3 + 4;
        } while ((&eax5)[1]);
        goto addr_0x180310fe_19;
    }
    if (!(&eax5)[1]) {
        addr_0x18031100_6:
        return 0;
    } else {
        ecx4 = reinterpret_cast<struct s481*>(&ecx4->f2);
        goto addr_0x180310d0_11;
    }
    addr_0x180310fe_19:
    goto addr_0x18031100_6;
}

uint32_t fun_18031150(int32_t ecx, signed char* a2, signed char* a3) {
    int32_t eax4;
    signed char* edx5;
    signed char* esi6;
    uint32_t ecx7;

    eax4 = 0;
    edx5 = a3;
    while (*edx5) {
        ++edx5;
        __asm__("bts [esp], eax");
    }
    esi6 = a2;
    ecx7 = 0xffffffff;
    do {
        ++ecx7;
        *reinterpret_cast<signed char*>(&eax4) = *esi6;
        if (!*reinterpret_cast<signed char*>(&eax4)) 
            break;
        ++esi6;
    } while (!static_cast<int1_t>(0 >> eax4));
    return ecx7;
}

int32_t fun_18031190(signed char* a1, signed char* a2, int32_t a3) {
    int32_t ecx4;
    int32_t ebx5;
    signed char* edi6;
    signed char* esi7;
    int32_t ecx8;
    signed char* edi9;
    signed char* esi10;

    ecx4 = a3;
    if (ecx4) 
        goto addr_0x180311c1_2;
    ebx5 = ecx4;
    edi6 = a1;
    esi7 = edi6;
    do {
        if (!ecx4) 
            break;
        --ecx4;
        ++edi6;
        ++esi7;
    } while (*edi6);
    ecx8 = -ecx4 + ebx5;
    edi9 = esi7;
    esi10 = a2;
    while (ecx8) {
        --ecx8;
        *edi9 = *esi10;
        ++edi9;
        ++esi10;
    }
    ecx4 = 0;
    if (*reinterpret_cast<unsigned char*>(esi10 - 1) <= *reinterpret_cast<unsigned char*>(edi9 - 1)) 
        goto addr_0x180311bb_10;
    addr_0x180311bf_11:
    ecx4 = ~ecx4;
    goto addr_0x180311c1_2;
    addr_0x180311bb_10:
    if (*reinterpret_cast<unsigned char*>(esi10 - 1) == *reinterpret_cast<unsigned char*>(edi9 - 1)) {
        addr_0x180311c1_2:
        return ecx4;
    } else {
        ecx4 = -2;
        goto addr_0x180311bf_11;
    }
}

int32_t fun_18031303() {
    return 1;
}

void fun_18032dfa() {
}

int16_t QSWaveMixActivateEx(void** a1, int32_t a2, void** a3) {
    int16_t ax4;
    int32_t ecx5;
    void** eax6;
    int32_t v7;
    void** eax8;

    ax4 = fun_180010c0(a1);
    if (!*reinterpret_cast<signed char*>(&ax4)) {
        fun_1800a1e0(a1);
        ecx5 = a2;
        eax6 = a3;
        *reinterpret_cast<unsigned char*>(&ecx5) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(!!ecx5));
        v7 = ecx5;
        *reinterpret_cast<int16_t*>(&eax6) = fun_18009f20(a1, *reinterpret_cast<void***>(&v7), eax6);
        fun_1800a200(a1);
        eax8 = eax6;
        return *reinterpret_cast<int16_t*>(&eax8);
    } else {
        return 5;
    }
}

int16_t QSWaveMixCalculateChannelParams(void** ecx, void** a2, void** a3) {
    int16_t ax4;
    void** edi5;

    ax4 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax4)) {
        if (!a3 || reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a3)) < reinterpret_cast<unsigned char>(0xdc)) {
            fun_18009260(ecx, 50, edi5);
            return 11;
        } else {
            fun_1800a1e0(a2);
            fun_1800a980(a2, a3, 0);
            fun_1800a200(a2);
            return 0;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixCloseChannel(void** a1, void** a2, unsigned char a3) {
    void** esi4;
    int16_t ax5;
    void** eax6;
    void** edi7;
    void** edi8;
    void** eax9;

    esi4 = a1;
    ax5 = fun_180010c0(esi4);
    if (!*reinterpret_cast<signed char*>(&ax5)) {
        fun_1800a1e0(esi4);
        if (!(a3 & 1)) {
            eax6 = a2;
            *reinterpret_cast<int16_t*>(&eax6) = fun_18009c50(esi4, eax6);
            if (eax6) {
                fun_1800a870(esi4, eax6);
            } else {
                fun_18009260(esi4, 10, edi7);
                fun_1800a200(esi4);
                return 11;
            }
        } else {
            edi8 = reinterpret_cast<void**>(1);
            *reinterpret_cast<int16_t*>(&eax9) = fun_18009c50(esi4, 0);
            if (!0) {
                do {
                    fun_1800a870(esi4, eax9);
                    eax9 = edi8;
                    ++edi8;
                    *reinterpret_cast<int16_t*>(&eax9) = fun_18009c50(esi4, eax9);
                } while (eax9);
                fun_1800a200(esi4);
                return 0;
            }
        }
        fun_1800a200(esi4);
        return 0;
    } else {
        return 5;
    }
}

int16_t QSWaveMixCloseSession(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43) {
    int16_t ax44;
    void** esi45;

    ax44 = fun_180010c0(a1);
    if (!*reinterpret_cast<signed char*>(&ax44)) {
        QSWaveMixActivate(a1, 0);
        if (a1) {
            fun_18009730(a1, esi45, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39);
            fun_1802b2b0(a1, a1, esi45, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43);
        }
        return 0;
    } else {
        return 5;
    }
}

int16_t QSWaveMixConfigureInit(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8) {
    void** v9;
    void** edx10;
    void* esp11;
    int32_t ecx12;
    void** ecx13;
    void** eax14;
    void** v15;
    void** v16;
    void** eax17;
    int32_t eax18;
    void** v19;
    void** eax20;
    void** v21;
    void** v22;
    void** v23;
    void** ecx24;
    void** v25;
    void** v26;
    void** v27;
    void** v28;
    void** v29;
    void** v30;
    void** v31;
    void** v32;
    void** v33;
    void** v34;
    int16_t ax35;

    v9 = reinterpret_cast<void**>(__return_address());
    edx10 = a1;
    esp11 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 64 - 4);
    ecx12 = 15;
    while (ecx12) {
        --ecx12;
    }
    ecx13 = *reinterpret_cast<void***>(edx10 + 2);
    if (*reinterpret_cast<unsigned char*>(&ecx13) & 8) {
        eax14 = v15;
        *reinterpret_cast<unsigned char*>(&eax14) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax14) | 1);
        v16 = eax14;
    }
    if (*reinterpret_cast<unsigned char*>(&ecx13) & 0x80) {
        eax17 = v16;
        *reinterpret_cast<unsigned char*>(&eax17) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax17) | 2);
        v16 = eax17;
    }
    if (*reinterpret_cast<unsigned char*>(&ecx13) & 2) {
        eax18 = 0;
        *reinterpret_cast<void***>(&eax18) = *reinterpret_cast<void***>(edx10 + 8);
        if (eax18 == 11) {
            v19 = reinterpret_cast<void**>(0x2b11);
        } else {
            if (eax18 == 22) {
                v19 = reinterpret_cast<void**>(0x5622);
            } else {
                if (eax18 == 44) {
                    v19 = reinterpret_cast<void**>(0xac44);
                }
            }
        }
    }
    if (*reinterpret_cast<unsigned char*>(&ecx13) & 16) {
        eax20 = reinterpret_cast<void**>(0);
        eax20 = *reinterpret_cast<void***>(edx10 + 14);
        v21 = eax20;
    }
    if (*reinterpret_cast<unsigned char*>(&ecx13) & 4) {
        v22 = *reinterpret_cast<void***>(edx10 + 10);
    }
    if (*reinterpret_cast<unsigned char*>(&ecx13) & 32) {
        if (*reinterpret_cast<void***>(edx10 + 16)) {
            if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(edx10 + 16) == 1)) {
                v23 = reinterpret_cast<void**>(2);
            }
        } else {
            v23 = reinterpret_cast<void**>(1);
        }
    }
    if (*reinterpret_cast<unsigned char*>(&ecx13) & 64) {
        ecx24 = reinterpret_cast<void**>(0);
        ecx24 = *reinterpret_cast<void***>(edx10 + 18);
        v25 = ecx24;
    }
    ax35 = QSWaveMixInitEx(reinterpret_cast<int32_t>(esp11) + 4, 64, v16, v19, v22, v26, v21, v23, v25, v27, v28, v29, v30, v31, v32, v33, v34, v9, a1, a2, a3, a4, a5, a6, a7, a8);
    return ax35;
}

int16_t QSWaveMixFindChannel(void** ecx, void** a2, uint32_t a3, void** a4) {
    int32_t eax5;
    void** eax6;
    int32_t ebp7;
    uint32_t ebx8;
    uint32_t edi9;
    void** esi10;
    signed char al11;
    void** esi12;
    void** edi13;
    struct s12* eax14;
    struct s12* eax15;
    struct s12* eax16;
    void** esi17;
    void** eax18;

    *reinterpret_cast<int16_t*>(&eax5) = fun_180010c0(a2);
    if (*reinterpret_cast<signed char*>(&eax5)) {
        return -1;
    }
    if (a4 && ((eax6 = reinterpret_cast<void**>(IsBadReadPtr()), !!eax6) || reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a4)) < reinterpret_cast<unsigned char>(0xdc))) {
        fun_18009260(ecx, 50, a4);
        goto ebp7;
    }
    fun_1800a1e0(a2);
    ebx8 = a3 & 0xfffffff0;
    edi9 = a3 & 15;
    if (!(ebx8 & 0xff0000)) {
        ebx8 = ebx8 | 0xff0000;
    }
    if (!(ebx8 & 0x7f000000)) {
        ebx8 = ebx8 | 0x7f000000;
    }
    if (!a4 || !(*reinterpret_cast<unsigned char*>(&ebx8) & 0x80)) {
        esi10 = reinterpret_cast<void**>(0);
    } else {
        esi10 = *reinterpret_cast<void***>(a4 + 8);
    }
    al11 = fun_18001350(a2, esi10);
    if (al11) {
        fun_1800a200(a2);
        return -1;
    }
    if (edi9 > 4) 
        goto addr_0x180017e6_15;
    switch (edi9) {
    case 0:
        *reinterpret_cast<int16_t*>(&eax6) = fun_18006530(a2, ebx8, esi10);
        esi12 = eax6;
        break;
    case 1:
        *reinterpret_cast<int16_t*>(&eax6) = fun_180065f0(a2, ebx8, esi10);
        esi12 = eax6;
        break;
    case 2:
        *reinterpret_cast<int16_t*>(&eax6) = fun_180066a0(a2, ebx8, esi10);
        esi12 = eax6;
        if (!esi12) 
            goto addr_0x180017e6_15;
        if (*reinterpret_cast<void***>(esi12 + 0x2cc) && ((*reinterpret_cast<struct s11**>(esi12 + 0x2d0))->f8 && a4)) {
            eax14 = fun_18008880(esi12, edi13);
            __asm__("fld dword [edi+0xbc]");
            __asm__("fcomp dword [eax+0xbc]");
            __asm__("fnstsw ax");
            if (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax14) + 1) & 1) {
                addr_0x180017e6_15:
                fun_1800a200(a2);
                return -1;
            } else {
                break;
            }
        }
    case 3:
        *reinterpret_cast<int16_t*>(&eax6) = fun_18006640(a2, ebx8, esi10);
        esi12 = eax6;
        if (!esi12) 
            goto addr_0x180017e6_15;
        if (*reinterpret_cast<void***>(esi12 + 0x2cc) && ((*reinterpret_cast<struct s11**>(esi12 + 0x2d0))->f8 && a4)) {
            eax15 = fun_18008880(esi12, edi13);
            __asm__("fld dword [edi+0xa8]");
            __asm__("fcomp dword [eax+0xa8]");
            __asm__("fnstsw ax");
            if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax15) + 1) & 65)) 
                goto addr_0x180017e6_15;
            break;
        }
    case 4:
        *reinterpret_cast<int16_t*>(&eax6) = fun_18006700(a2, ebx8, esi10);
        esi12 = eax6;
        if (!esi12) 
            goto addr_0x180017e6_15;
        if (!*reinterpret_cast<void***>(esi12 + 0x2cc)) 
            break;
        if (!(*reinterpret_cast<struct s11**>(esi12 + 0x2d0))->f8) 
            break;
        if (!a4) 
            break;
        eax16 = fun_18008880(esi12, edi13);
        if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(a4 + 88)) < reinterpret_cast<signed char>(eax16->f88)) 
            goto addr_0x180017e6_15;
    }
    if (esi12) {
        if (!(ebx8 & 0x80000000)) {
            *reinterpret_cast<void***>(esi12 + 0x2c5) = reinterpret_cast<void**>(1);
        }
        esi17 = *reinterpret_cast<void***>(esi12 + 0x19c);
        fun_1800a200(a2);
        eax18 = esi17;
        return *reinterpret_cast<int16_t*>(&eax18);
    }
}

void fun_180017fa() {
}

int16_t QSWaveMixFreeWave(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42) {
    void** v43;
    void** v44;
    void** ebx45;
    void** ebx46;
    void** v47;
    void** esi48;
    void** esi49;
    int16_t ax50;
    void** v51;
    void** edi52;
    void** edi53;
    void** eax54;

    v43 = reinterpret_cast<void**>(__return_address());
    v44 = ebx45;
    ebx46 = a2;
    v47 = esi48;
    if (ebx46) {
        esi49 = a1;
        if (esi49) {
            ax50 = fun_180010c0(esi49);
            if (!*reinterpret_cast<signed char*>(&ax50)) {
                v51 = edi52;
                fun_1800a1e0(esi49);
                edi53 = reinterpret_cast<void**>(1);
                *reinterpret_cast<int16_t*>(&eax54) = fun_18009c50(esi49, 0);
                if (!0) {
                    do {
                        if (*reinterpret_cast<void***>(eax54 + 0x2c4)) {
                            fun_18007560(eax54, ebx46, v51, v47, v44, v43, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
                        }
                        eax54 = edi53;
                        ++edi53;
                        *reinterpret_cast<int16_t*>(&eax54) = fun_18009c50(esi49, eax54);
                    } while (eax54);
                }
                fun_18006110(esi49, ebx46);
                fun_1800a200(esi49);
            } else {
                return 5;
            }
        }
        fun_1800ce00(ebx46);
        fun_1802b2b0(ebx46, ebx46, v47, v44, v43, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    }
    return 0;
}

int16_t QSWaveMixGetChannelParams(void** ecx, void** a2) {
    void** v3;
    void** edi4;
    int16_t ax5;
    void** ebx6;
    void** v7;
    int32_t eax8;
    void** eax9;
    int32_t eax10;
    void** eax11;
    void** esi12;
    void** eax13;
    void** ebp14;
    void** ebp15;
    struct s12* eax16;
    struct s12* esi17;
    uint32_t edx18;
    uint32_t ebx19;
    void** edi20;
    uint32_t ecx21;
    uint32_t ecx22;

    v3 = edi4;
    ax5 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax5)) {
        ebx6 = v7;
        if (ebx6 && (eax8 = reinterpret_cast<int32_t>(IsBadReadPtr()), !eax8)) {
            eax9 = *reinterpret_cast<void***>(ebx6);
            if (reinterpret_cast<unsigned char>(eax9) > reinterpret_cast<unsigned char>(0xdc)) {
            }
            eax10 = reinterpret_cast<int32_t>(IsBadWritePtr());
            if (!eax10) {
                fun_1800a1e0(a2);
                eax11 = esi12;
                *reinterpret_cast<int16_t*>(&eax11) = fun_18009c50(a2, eax11);
                if (eax11) {
                    eax13 = reinterpret_cast<void**>(timeGetTime(a2));
                    fun_180088a0(eax11, eax13, ebp14, ebx6, 0xdc, ebx6);
                    ebp15 = *reinterpret_cast<void***>(ebx6);
                    eax16 = fun_18008880(eax11, ebp14);
                    esi17 = eax16;
                    edx18 = ebx19;
                    edi20 = ebx6;
                    ecx21 = ebx19 >> 2;
                    while (ecx21) {
                        --ecx21;
                        *reinterpret_cast<void***>(edi20) = esi17->f0;
                        edi20 = edi20 + 4;
                        esi17 = reinterpret_cast<struct s12*>(reinterpret_cast<uint32_t>(esi17) + 4);
                    }
                    ecx22 = edx18 & 3;
                    while (ecx22) {
                        --ecx22;
                        *reinterpret_cast<void***>(edi20) = esi17->f0;
                        ++edi20;
                        esi17 = reinterpret_cast<struct s12*>(&esi17->pad88);
                    }
                    *reinterpret_cast<void***>(ebx6) = ebp15;
                    fun_1800a200(v3);
                    goto 4;
                } else {
                    fun_18009260(a2, 10, ebx6);
                    fun_1800a200(a2);
                    goto 4;
                }
            }
        }
        fun_18009260(ecx, 50, v3);
        return 11;
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetChannelStatus(void** a1, void** a2) {
    int16_t ax3;
    void** eax4;
    void** cl5;
    uint32_t esi6;
    uint32_t eax7;
    void** edi8;

    ax3 = fun_180010c0(a1);
    if (!*reinterpret_cast<signed char*>(&ax3)) {
        fun_1800a1e0(a1);
        eax4 = a2;
        *reinterpret_cast<int16_t*>(&eax4) = fun_18009c50(a1, eax4);
        if (eax4) {
            cl5 = *reinterpret_cast<void***>(eax4 + 0x2c4);
            esi6 = 0;
            if (cl5) {
                esi6 = 1;
                if (*reinterpret_cast<void***>(eax4 + 0x2c6)) {
                    esi6 = 5;
                }
                if (*reinterpret_cast<void***>(eax4 + 0x2cc) && ((esi6 = esi6 | 2, !!*reinterpret_cast<void***>(eax4 + 0x2cc)) && (!*reinterpret_cast<void***>(eax4 + 0x2c6) && *reinterpret_cast<void***>(eax4 + 0x284)))) {
                    esi6 = esi6 | 8;
                }
                if (*reinterpret_cast<void***>(eax4 + 0x2c5)) {
                    esi6 = esi6 | 16;
                }
            }
            fun_1800a200(a1);
            eax7 = esi6;
            return *reinterpret_cast<int16_t*>(&eax7);
        } else {
            fun_18009260(a1, 10, edi8);
            fun_1800a200(a1);
            return 0;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetDirectSound(void** ecx, void** a2, void** a3) {
    int16_t ax4;
    int32_t eax5;
    void** eax6;
    int32_t edi7;

    ax4 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax4)) {
        eax5 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax5) {
            fun_1800a1e0(a2);
            eax6 = fun_18009c30(a2);
            *reinterpret_cast<void***>(a3) = eax6;
            fun_1800a200(a2);
            goto edi7;
        } else {
            fun_18009260(ecx, 50, a3);
            goto edi7;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetDirectSoundBuffer(void** ecx, void** a2) {
    int16_t ax3;
    int32_t eax4;
    void** eax5;
    void** eax6;
    void** v7;
    int32_t edi8;

    ax3 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax3)) {
        eax4 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax4) {
            fun_1800a1e0(a2);
            eax5 = reinterpret_cast<void**>(__return_address());
            *reinterpret_cast<int16_t*>(&eax5) = fun_18009c50(a2, eax5);
            if (eax5) {
                eax6 = fun_18008860(eax5);
                *reinterpret_cast<void***>(v7) = eax6;
                fun_1800a200(a2);
                goto edi8;
            } else {
                fun_18009260(a2, 10, v7);
                fun_1800a200(a2);
                goto edi8;
            }
        } else {
            fun_18009260(ecx, 50, v7);
            goto edi8;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetDistanceMapping(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    int16_t ax30;
    int32_t eax31;
    void** eax32;
    void* esp33;
    void** edi34;
    void** esi35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    int32_t v60;
    int32_t v61;
    int32_t v62;

    ax30 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax30)) {
        eax31 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax31) {
            fun_1800a1e0(a2);
            eax32 = reinterpret_cast<void**>(__return_address());
            *reinterpret_cast<int16_t*>(&eax32) = fun_18009c50(a2, eax32);
            esp33 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 + 4 - 4 + 4 - 4 - 4 + 4 + 4);
            if (eax32) {
                fun_180085a0(eax32, reinterpret_cast<int32_t>(esp33) + 8, 12, a4, 16, edi34, esi35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
                *reinterpret_cast<void***>(a4 + 12) = v47;
                *reinterpret_cast<void***>(a4 + 4) = esi35;
                *reinterpret_cast<void***>(a4 + 8) = v48;
                fun_1800c670(reinterpret_cast<int32_t>(esp33) - 4 - 4 - 4 + 8 + 4 + 8, a4, 16, edi34, esi35, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29);
                fun_1800a200(a2);
                goto v60;
            } else {
                fun_18009260(a2, 10, a4);
                fun_1800a200(a2);
                goto v61;
            }
        } else {
            fun_18009260(ecx, 50, a4);
            goto v62;
        }
    } else {
        return 5;
    }
}

int32_t LoadStringA = 0x35e08;

void QSWaveMixGetErrorText(int32_t a1, int32_t a2, int32_t a3) {
    int32_t ebx4;
    int32_t eax5;

    ebx4 = LoadStringA;
    eax5 = reinterpret_cast<int32_t>(ebx4());
    if (eax5) {
        goto a3;
    } else {
        ebx4();
        goto a3;
    }
}

int16_t QSWaveMixGetFlange(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26) {
    void** v27;
    void** v28;
    void** ebx29;
    void** ebx30;
    void** v31;
    void** edi32;
    int16_t ax33;
    void** edi34;
    void** v35;
    int32_t eax36;
    void* esp37;
    void** eax38;
    void** eax39;
    void** v40;
    void** v41;
    int32_t eax42;
    void** eax43;
    void** v44;
    void*** esp45;
    void** v46;
    void** esi47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void* esp58;
    int32_t ecx59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    int32_t v71;
    int32_t v72;

    v27 = reinterpret_cast<void**>(__return_address());
    v28 = ebx29;
    ebx30 = a2;
    v31 = edi32;
    ax33 = fun_180010c0(ebx30);
    if (!*reinterpret_cast<signed char*>(&ax33)) {
        edi34 = a4;
        if (edi34 && (v35 = edi34, eax36 = reinterpret_cast<int32_t>(IsBadReadPtr(v35, 4)), esp37 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 + 4), !eax36)) {
            eax38 = *reinterpret_cast<void***>(edi34);
            eax39 = edi34;
            if (reinterpret_cast<unsigned char>(eax38) > reinterpret_cast<unsigned char>(36)) {
                eax39 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp37) + 56);
            }
            v40 = *reinterpret_cast<void***>(eax39);
            v41 = edi34;
            eax42 = reinterpret_cast<int32_t>(IsBadWritePtr());
            esp37 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp37) - 4 - 4 - 4 + 4);
            if (!eax42) {
                fun_1800a1e0(ebx30);
                eax43 = v44;
                *reinterpret_cast<int16_t*>(&eax43) = fun_18009c50(ebx30, eax43);
                if (eax43) {
                    esp45 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp37) - 4 + 4 - 4 - 4 + 4 + 4 - 4);
                    v46 = esi47;
                    fun_180085a0(eax43, esp45 + 12, 17, v46, v41, v40, v35, 4, v31, v28, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, 36, v27, a2, a3, a4, a5, a6);
                    esp58 = reinterpret_cast<void*>(esp45 - 4 - 4 - 4 + 8 + 4);
                    ecx59 = 9;
                    while (ecx59) {
                        --ecx59;
                        *reinterpret_cast<void***>(edi34) = v60;
                        edi34 = edi34 + 4;
                    }
                    fun_1800c670(reinterpret_cast<int32_t>(esp58) + 12, v46, v41, v40, v35, 4, v31, v28, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, 36, v27, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
                    fun_1800a200(ebx30);
                    goto v71;
                } else {
                    fun_18009260(ebx30, 10, v41);
                    fun_1800a200(ebx30);
                    goto v72;
                }
            }
        }
        fun_18009260(ecx, 50, v31);
        return 11;
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetFrequency(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    int16_t ax30;
    int32_t eax31;
    void** eax32;
    void* esp33;
    void** edi34;
    void** esi35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    int32_t v58;
    int32_t v59;
    int32_t v60;

    ax30 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax30)) {
        eax31 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax31) {
            fun_1800a1e0(a2);
            eax32 = reinterpret_cast<void**>(__return_address());
            *reinterpret_cast<int16_t*>(&eax32) = fun_18009c50(a2, eax32);
            esp33 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 + 4 - 4 + 4 - 4 - 4 + 4 + 4);
            if (eax32) {
                fun_180085a0(eax32, reinterpret_cast<int32_t>(esp33) + 8, 3, a4, 4, edi34, esi35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
                *reinterpret_cast<void***>(a4) = esi35;
                fun_1800c670(reinterpret_cast<int32_t>(esp33) - 4 - 4 - 4 + 8 + 4 + 8, a4, 4, edi34, esi35, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29);
                fun_1800a200(a2);
                goto v58;
            } else {
                fun_18009260(a2, 10, a4);
                fun_1800a200(a2);
                goto v59;
            }
        } else {
            fun_18009260(ecx, 50, a4);
            goto v60;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetInfo(int16_t* a1) {
    int16_t* edi2;
    int32_t eax3;
    int32_t ecx4;
    int16_t* esi5;

    edi2 = a1;
    if (!edi2 || ((eax3 = reinterpret_cast<int32_t>(IsBadWritePtr()), !!eax3) || *edi2 != 20)) {
        return 20;
    } else {
        ecx4 = 5;
        esi5 = reinterpret_cast<int16_t*>(0x18034200);
        while (ecx4) {
            --ecx4;
            *edi2 = *esi5;
            edi2 = edi2 + 2;
            esi5 = esi5 + 2;
        }
        goto 20;
    }
}

struct s482 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

int32_t g18034218 = 16;

int32_t g1803421c = 5;

int32_t g18034220 = 0;

int32_t g18034224 = 63;

int16_t QSWaveMixGetInfoEx(struct s482* a1) {
    int32_t eax2;
    int32_t eax3;
    int32_t ecx4;
    int32_t edx5;
    int32_t eax6;

    if (!a1 || ((eax2 = reinterpret_cast<int32_t>(IsBadWritePtr()), !!eax2) || a1->f0 != 16)) {
        return 16;
    } else {
        eax3 = g18034218;
        a1->f0 = eax3;
        ecx4 = g1803421c;
        a1->f4 = ecx4;
        edx5 = g18034220;
        a1->f8 = edx5;
        eax6 = g18034224;
        a1->f12 = eax6;
        goto 16;
    }
}

void QSWaveMixGetLastError() {
    goto fun_18009250;
}

int16_t QSWaveMixGetListenerPosition(void** ecx, void** a2, void** a3) {
    int16_t ax4;
    int32_t eax5;
    void* esp6;
    struct s236* eax7;
    void* esp8;
    void** edi9;
    void** esi10;
    int32_t v11;
    int32_t v12;

    ax4 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax4)) {
        eax5 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax5) {
            fun_1800a1e0(a2);
            esp6 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 24 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 + 4 - 4 + 4);
            eax7 = reinterpret_cast<struct s236*>(reinterpret_cast<int32_t>(esp6) + 8);
            fun_1800a790(a2, eax7);
            esp8 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp6) - 4 - 4 + 4 + 4);
            *reinterpret_cast<int16_t*>(&eax7) = fun_18001020(a2, reinterpret_cast<int32_t>(esp8) + 20, reinterpret_cast<int32_t>(esp8) + 8, a3, 12, edi9, esi10);
            *reinterpret_cast<void***>(a3) = eax7->f0;
            *reinterpret_cast<void***>(a3 + 4) = eax7->f4;
            *reinterpret_cast<void***>(a3 + 8) = eax7->f8;
            fun_1800a200(a2);
            goto v11;
        } else {
            fun_18009260(ecx, 50, a3);
            goto v12;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetListenerVelocity(void** ecx, void** a2, void** a3) {
    int16_t ax4;
    int32_t eax5;
    void* esp6;
    struct s237* eax7;
    void* esp8;
    void** edi9;
    void** esi10;
    int32_t v11;
    int32_t v12;

    ax4 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax4)) {
        eax5 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax5) {
            fun_1800a1e0(a2);
            esp6 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 24 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 + 4 - 4 + 4);
            eax7 = reinterpret_cast<struct s237*>(reinterpret_cast<int32_t>(esp6) + 8);
            fun_1800a7b0(a2, eax7);
            esp8 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp6) - 4 - 4 + 4 + 4);
            *reinterpret_cast<int16_t*>(&eax7) = fun_18001020(a2, reinterpret_cast<int32_t>(esp8) + 20, reinterpret_cast<int32_t>(esp8) + 8, a3, 12, edi9, esi10);
            *reinterpret_cast<void***>(a3) = eax7->f0;
            *reinterpret_cast<void***>(a3 + 4) = eax7->f4;
            *reinterpret_cast<void***>(a3 + 8) = eax7->f8;
            fun_1800a200(a2);
            goto v11;
        } else {
            fun_18009260(ecx, 50, a3);
            goto v12;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetOptions(void** ecx, void** a2, void** a3) {
    int16_t ax4;
    int32_t eax5;
    int32_t edi6;

    ax4 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax4)) {
        eax5 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax5) {
            fun_1800a1e0(a2);
            *reinterpret_cast<void***>(a3) = *reinterpret_cast<void***>(a2 + 0x148);
            fun_1800a200(a2);
            goto edi6;
        } else {
            fun_18009260(ecx, 50, a3);
            goto edi6;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetPan(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28) {
    int16_t ax29;
    void** ecx30;
    int32_t eax31;
    void** eax32;
    void* esp33;
    void** edi34;
    void** esi35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    int32_t v58;
    void** v59;
    int32_t v60;

    ax29 = fun_180010c0(a1);
    if (!*reinterpret_cast<signed char*>(&ax29)) {
        ecx30 = a1;
        fun_1800a1e0(ecx30);
        eax31 = reinterpret_cast<int32_t>(IsBadWritePtr(ecx30));
        if (!eax31) {
            eax32 = reinterpret_cast<void**>(__return_address());
            ecx30 = a1;
            *reinterpret_cast<int16_t*>(&eax32) = fun_18009c50(ecx30, eax32);
            esp33 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 + 4 + 4 - 4 + 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4);
            if (eax32) {
                fun_180085a0(eax32, reinterpret_cast<int32_t>(esp33) + 8, 5, a3, 4, edi34, esi35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8);
                *reinterpret_cast<void***>(a3) = esi35;
                fun_1800c670(reinterpret_cast<int32_t>(esp33) - 4 - 4 - 4 + 8 + 4 + 8, a3, 4, edi34, esi35, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28);
                fun_1800a200(a1);
                goto v58;
            } else {
                v59 = reinterpret_cast<void**>(10);
            }
        } else {
            v59 = reinterpret_cast<void**>(50);
        }
        fun_18009260(ecx30, v59, a3);
        fun_1800a200(a1);
        goto v60;
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetPolarPosition(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    int16_t ax30;
    int32_t eax31;
    void** eax32;
    void* esp33;
    void** edi34;
    void** esi35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    int32_t v60;
    int32_t v61;
    int32_t v62;

    ax30 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax30)) {
        eax31 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax31) {
            fun_1800a1e0(a2);
            eax32 = reinterpret_cast<void**>(__return_address());
            *reinterpret_cast<int16_t*>(&eax32) = fun_18009c50(a2, eax32);
            esp33 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 + 4 - 4 + 4 - 4 - 4 + 4 + 4);
            if (eax32) {
                fun_180085a0(eax32, reinterpret_cast<int32_t>(esp33) + 8, 7, a4, 12, edi34, esi35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
                *reinterpret_cast<void***>(a4) = esi35;
                *reinterpret_cast<void***>(a4 + 4) = v47;
                *reinterpret_cast<void***>(a4 + 8) = v48;
                fun_1800c670(reinterpret_cast<int32_t>(esp33) - 4 - 4 - 4 + 8 + 4 + 8, a4, 12, edi34, esi35, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29);
                fun_1800a200(a2);
                goto v60;
            } else {
                fun_18009260(a2, 10, a4);
                fun_1800a200(a2);
                goto v61;
            }
        } else {
            fun_18009260(ecx, 50, a4);
            goto v62;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetPosition(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    int16_t ax30;
    int32_t eax31;
    void** eax32;
    void* esp33;
    void** edi34;
    void** esi35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    int32_t v60;
    int32_t v61;
    int32_t v62;

    ax30 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax30)) {
        eax31 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax31) {
            fun_1800a1e0(a2);
            eax32 = reinterpret_cast<void**>(__return_address());
            *reinterpret_cast<int16_t*>(&eax32) = fun_18009c50(a2, eax32);
            esp33 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 + 4 - 4 + 4 - 4 - 4 + 4 + 4);
            if (eax32) {
                fun_180085a0(eax32, reinterpret_cast<int32_t>(esp33) + 8, 6, a4, 12, edi34, esi35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
                *reinterpret_cast<void***>(a4) = esi35;
                *reinterpret_cast<void***>(a4 + 4) = v47;
                *reinterpret_cast<void***>(a4 + 8) = v48;
                fun_1800c670(reinterpret_cast<int32_t>(esp33) - 4 - 4 - 4 + 8 + 4 + 8, a4, 12, edi34, esi35, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29);
                fun_1800a200(a2);
                goto v60;
            } else {
                fun_18009260(a2, 10, a4);
                fun_1800a200(a2);
                goto v61;
            }
        } else {
            fun_18009260(ecx, 50, a4);
            goto v62;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetReverbDampingFactor(void** ecx, void** a2, void** a3) {
    int16_t ax4;
    int32_t eax5;
    int32_t edi6;

    ax4 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax4)) {
        eax5 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax5) {
            fun_1800a1e0(a2);
            *reinterpret_cast<void***>(a3) = *reinterpret_cast<void***>(a2 + 0xcc);
            fun_1800a200(a2);
            goto edi6;
        } else {
            fun_18009260(ecx, 50, a3);
            goto edi6;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetReverbDecayTime(void** ecx, void** a2, void** a3) {
    int16_t ax4;
    int32_t eax5;
    int32_t edi6;

    ax4 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax4)) {
        eax5 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax5) {
            fun_1800a1e0(a2);
            *reinterpret_cast<void***>(a3) = *reinterpret_cast<void***>(a2 + 0xc8);
            fun_1800a200(a2);
            goto edi6;
        } else {
            fun_18009260(ecx, 50, a3);
            goto edi6;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetReverbEnvironment(void** ecx, void** a2, void** a3) {
    int16_t ax4;
    int32_t ebx5;
    int32_t eax6;
    int32_t eax7;
    int32_t ebp8;
    int32_t edi9;

    ax4 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax4)) {
        ebx5 = IsBadWritePtr;
        eax6 = reinterpret_cast<int32_t>(ebx5());
        if (eax6 || (eax7 = reinterpret_cast<int32_t>(ebx5()), !!eax7)) {
            fun_18009260(ecx, 50, a3);
            goto ebp8;
        } else {
            fun_1800a1e0(a2);
            *reinterpret_cast<void***>(a3) = *reinterpret_cast<void***>(a2 + 0xbc);
            *reinterpret_cast<void***>(a2) = *reinterpret_cast<void***>(a2 + 0xc0);
            fun_1800a200(a2);
            goto edi9;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetReverbMix(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    int16_t ax30;
    int32_t eax31;
    void** eax32;
    void* esp33;
    void** edi34;
    void** esi35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    int32_t v58;
    int32_t v59;
    int32_t v60;

    ax30 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax30)) {
        eax31 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax31) {
            fun_1800a1e0(a2);
            eax32 = reinterpret_cast<void**>(__return_address());
            *reinterpret_cast<int16_t*>(&eax32) = fun_18009c50(a2, eax32);
            esp33 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 + 4 - 4 + 4 - 4 - 4 + 4 + 4);
            if (eax32) {
                fun_180085a0(eax32, reinterpret_cast<int32_t>(esp33) + 8, 14, a4, 4, edi34, esi35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
                *reinterpret_cast<void***>(a4) = esi35;
                fun_1800c670(reinterpret_cast<int32_t>(esp33) - 4 - 4 - 4 + 8 + 4 + 8, a4, 4, edi34, esi35, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29);
                fun_1800a200(a2);
                goto v58;
            } else {
                fun_18009260(a2, 10, a4);
                fun_1800a200(a2);
                goto v59;
            }
        } else {
            fun_18009260(ecx, 50, a4);
            goto v60;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetReverbVolume(void** ecx, void** a2, void** a3) {
    int16_t ax4;
    int32_t eax5;
    int32_t edi6;

    ax4 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax4)) {
        eax5 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax5) {
            fun_1800a1e0(a2);
            *reinterpret_cast<void***>(a3) = *reinterpret_cast<void***>(a2 + 0xc4);
            fun_1800a200(a2);
            goto edi6;
        } else {
            fun_18009260(ecx, 50, a3);
            goto edi6;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetRoomSize(void** ecx, void** a2, void** a3) {
    int16_t ax4;
    int32_t eax5;
    void** edi6;

    ax4 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax4)) {
        eax5 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax5) {
            fun_1800a1e0(a2);
            fun_1800a7d0(a2, a3, 4, edi6);
            __asm__("fstp dword [edi]");
            fun_1800a200(a2);
            goto edi6;
        } else {
            fun_18009260(ecx, 50, a3);
            goto edi6;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetSourceCone(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    void** eax30;
    int16_t ax31;
    void* esp32;
    int32_t esi33;
    void** v34;
    int32_t v35;
    void* esp36;
    void** esi37;
    void** edi38;
    void** esi39;
    void** ebp40;
    void** ebx41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void* esp53;
    void** eax54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** v74;
    void** v75;
    void** v76;
    void** v77;
    void** v78;
    void** v79;
    void** v80;
    void** v81;
    void** v82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;

    eax30 = a2;
    ax31 = fun_180010c0(eax30);
    esp32 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 - 4 - 4 + 4 + 4);
    if (!*reinterpret_cast<signed char*>(&ax31)) {
        esi33 = IsBadWritePtr;
        if (a4 && (v34 = a4, eax30 = reinterpret_cast<void**>(esi33()), esp32 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp32) - 4 - 4 - 4 + 4), !!eax30) || (a5 && (v34 = a5, eax30 = reinterpret_cast<void**>(esi33()), esp32 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp32) - 4 - 4 - 4 + 4), !!eax30) || a6 && (v34 = a6, eax30 = reinterpret_cast<void**>(esi33()), esp32 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp32) - 4 - 4 - 4 + 4), !!eax30))) {
            fun_18009260(ecx, 50, v34);
            goto v35;
        } else {
            fun_1800a1e0(a2);
            *reinterpret_cast<int16_t*>(&eax30) = fun_18009c50(a2, a3);
            esp36 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp32) - 4 + 4 - 4 - 4 + 4 + 4);
            esi37 = eax30;
            if (esi37) {
                if (a4) {
                    *reinterpret_cast<int16_t*>(&eax30) = fun_180085a0(esi37, reinterpret_cast<int32_t>(esp36) + 16, 10, edi38, esi39, ebp40, ebx41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
                    esp53 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp36) - 4 - 4 - 4 + 8 + 4);
                    eax54 = eax30 + 4;
                    *reinterpret_cast<void***>(a4) = *reinterpret_cast<void***>(eax54);
                    *reinterpret_cast<void***>(a4 + 4) = *reinterpret_cast<void***>(eax54 + 4);
                    *reinterpret_cast<void***>(a4 + 8) = *reinterpret_cast<void***>(eax54 + 8);
                    fun_1800c670(reinterpret_cast<int32_t>(esp53) + 16, edi38, esi39, ebp40, ebx41, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29);
                    esp36 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp53) - 4 + 4);
                }
                if (a5 || a6) {
                    fun_180085a0(esi37, reinterpret_cast<int32_t>(esp36) + 16, 11, edi38, esi39, ebp40, ebx41, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
                    if (a5) {
                        *reinterpret_cast<void***>(a5) = v77;
                    }
                    if (a6) {
                        *reinterpret_cast<void***>(a6) = v78;
                    }
                    fun_1800c670(reinterpret_cast<int32_t>(esp36) - 4 - 4 - 4 + 8 + 4 + 16, edi38, esi39, ebp40, ebx41, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29);
                }
                fun_1800a200(a2);
                return 0;
            } else {
                fun_18009260(a2, 10, edi38);
                fun_1800a200(a2);
                return 11;
            }
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetSourceCone2(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    int16_t ax30;
    void* esp31;
    int32_t esi32;
    void** v33;
    int32_t eax34;
    int32_t eax35;
    void** eax36;
    int32_t v37;
    void* esp38;
    void** esi39;
    void** edi40;
    void** esi41;
    void** ebp42;
    void** ebx43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void* esp55;
    void** eax56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** v74;
    void** v75;
    void** v76;
    void** v77;
    void** v78;
    void** v79;
    void** v80;
    void** v81;
    void** v82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** v92;

    ax30 = fun_180010c0(a2);
    esp31 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 - 4 - 4 + 4 + 4);
    if (!*reinterpret_cast<signed char*>(&ax30)) {
        esi32 = IsBadWritePtr;
        if (a4 && (v33 = a4, eax34 = reinterpret_cast<int32_t>(esi32()), esp31 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp31) - 4 - 4 - 4 + 4), !!eax34) || (a5 && (v33 = a5, eax35 = reinterpret_cast<int32_t>(esi32()), esp31 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp31) - 4 - 4 - 4 + 4), !!eax35) || ((eax36 = a6, !!eax36) && (v33 = eax36, eax36 = reinterpret_cast<void**>(esi32()), esp31 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp31) - 4 - 4 - 4 + 4), !!eax36) || a7 && (v33 = a7, eax36 = reinterpret_cast<void**>(esi32()), esp31 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp31) - 4 - 4 - 4 + 4), !!eax36)))) {
            fun_18009260(ecx, 50, v33);
            goto v37;
        } else {
            fun_1800a1e0(a2);
            *reinterpret_cast<int16_t*>(&eax36) = fun_18009c50(a2, a3);
            esp38 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp31) - 4 + 4 - 4 - 4 + 4 + 4);
            esi39 = eax36;
            if (esi39) {
                if (a4) {
                    *reinterpret_cast<int16_t*>(&eax36) = fun_180085a0(esi39, reinterpret_cast<int32_t>(esp38) + 16, 10, edi40, esi41, ebp42, ebx43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
                    esp55 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp38) - 4 - 4 - 4 + 8 + 4);
                    eax56 = eax36 + 4;
                    *reinterpret_cast<void***>(a4) = *reinterpret_cast<void***>(eax56);
                    *reinterpret_cast<void***>(a4 + 4) = *reinterpret_cast<void***>(eax56 + 4);
                    *reinterpret_cast<void***>(a4 + 8) = *reinterpret_cast<void***>(eax56 + 8);
                    fun_1800c670(reinterpret_cast<int32_t>(esp55) + 16, edi40, esi41, ebp42, ebx43, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29);
                    esp38 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp55) - 4 + 4);
                }
                if (a5 || (a6 || a7)) {
                    fun_180085a0(esi39, reinterpret_cast<int32_t>(esp38) + 16, 11, edi40, esi41, ebp42, ebx43, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
                    if (a5) {
                        *reinterpret_cast<void***>(a5) = v79;
                    }
                    if (a6) {
                        *reinterpret_cast<void***>(a6) = v80;
                    }
                    if (a7) {
                        *reinterpret_cast<void***>(a7) = v81;
                    }
                    fun_1800c670(reinterpret_cast<int32_t>(esp38) - 4 - 4 - 4 + 8 + 4 + 16, edi40, esi41, ebp42, ebx43, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29);
                }
                fun_1800a200(a2);
                return 0;
            } else {
                fun_18009260(a2, 10, edi40);
                fun_1800a200(a2);
                return 11;
            }
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetSourcePosition(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    int16_t ax30;
    int32_t eax31;
    void** eax32;
    void* esp33;
    void** edi34;
    void** esi35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** eax47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    int32_t v59;
    int32_t v60;
    int32_t v61;

    ax30 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax30)) {
        eax31 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax31) {
            fun_1800a1e0(a2);
            eax32 = reinterpret_cast<void**>(__return_address());
            *reinterpret_cast<int16_t*>(&eax32) = fun_18009c50(a2, eax32);
            esp33 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 + 4 - 4 + 4 - 4 - 4 + 4 + 4);
            if (eax32) {
                *reinterpret_cast<int16_t*>(&eax32) = fun_180085a0(eax32, reinterpret_cast<int32_t>(esp33) + 8, 8, a4, 12, edi34, esi35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
                eax47 = eax32 + 4;
                *reinterpret_cast<void***>(a4) = *reinterpret_cast<void***>(eax47);
                *reinterpret_cast<void***>(a4 + 4) = *reinterpret_cast<void***>(eax47 + 4);
                *reinterpret_cast<void***>(a4 + 8) = *reinterpret_cast<void***>(eax47 + 8);
                fun_1800c670(reinterpret_cast<int32_t>(esp33) - 4 - 4 - 4 + 8 + 4 + 8, a4, 12, edi34, esi35, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29);
                fun_1800a200(a2);
                goto v59;
            } else {
                fun_18009260(a2, 10, a4);
                fun_1800a200(a2);
                goto v60;
            }
        } else {
            fun_18009260(ecx, 50, a4);
            goto v61;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetSourceVelocity(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    int16_t ax30;
    int32_t eax31;
    void** eax32;
    void* esp33;
    void** edi34;
    void** esi35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** eax47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    int32_t v59;
    int32_t v60;
    int32_t v61;

    ax30 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax30)) {
        eax31 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax31) {
            fun_1800a1e0(a2);
            eax32 = reinterpret_cast<void**>(__return_address());
            *reinterpret_cast<int16_t*>(&eax32) = fun_18009c50(a2, eax32);
            esp33 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 + 4 - 4 + 4 - 4 - 4 + 4 + 4);
            if (eax32) {
                *reinterpret_cast<int16_t*>(&eax32) = fun_180085a0(eax32, reinterpret_cast<int32_t>(esp33) + 8, 9, a4, 12, edi34, esi35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
                eax47 = eax32 + 4;
                *reinterpret_cast<void***>(a4) = *reinterpret_cast<void***>(eax47);
                *reinterpret_cast<void***>(a4 + 4) = *reinterpret_cast<void***>(eax47 + 4);
                *reinterpret_cast<void***>(a4 + 8) = *reinterpret_cast<void***>(eax47 + 8);
                fun_1800c670(reinterpret_cast<int32_t>(esp33) - 4 - 4 - 4 + 8 + 4 + 8, a4, 12, edi34, esi35, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29);
                fun_1800a200(a2);
                goto v59;
            } else {
                fun_18009260(a2, 10, a4);
                fun_1800a200(a2);
                goto v60;
            }
        } else {
            fun_18009260(ecx, 50, a4);
            goto v61;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetSpeakerPlacement(void** ecx, void** a2, void** a3) {
    int16_t ax4;
    int32_t eax5;
    int32_t edi6;

    ax4 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax4)) {
        eax5 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax5) {
            fun_1800a1e0(a2);
            *reinterpret_cast<void***>(a3) = *reinterpret_cast<void***>(a2 + 0x150);
            fun_1800a200(a2);
            goto edi6;
        } else {
            fun_18009260(ecx, 50, a3);
            goto edi6;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetSpeedOfSound(void** ecx, void** a2, void** a3) {
    int16_t ax4;
    int32_t eax5;
    int32_t edi6;

    ax4 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax4)) {
        eax5 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax5) {
            fun_1800a1e0(a2);
            fun_1800a7e0(a2);
            __asm__("fstp dword [edi]");
            fun_1800a200(a2);
            goto edi6;
        } else {
            fun_18009260(ecx, 50, a3);
            goto edi6;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetPlayPosition(void** ecx, void** a2, void** a3, void** a4) {
    int16_t ax5;
    int32_t ebx6;
    int32_t eax7;
    int32_t eax8;
    void** ebp9;
    void** eax10;
    void** edi11;
    void** esi12;
    void** ebx13;

    ax5 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax5)) {
        ebx6 = IsBadWritePtr;
        eax7 = reinterpret_cast<int32_t>(ebx6());
        if (eax7 || (eax8 = reinterpret_cast<int32_t>(ebx6()), !!eax8)) {
            fun_18009260(ecx, 50, a4);
            goto ebp9;
        } else {
            fun_1800a1e0(a2);
            eax10 = ebp9;
            *reinterpret_cast<int16_t*>(&eax10) = fun_18009c50(a2, eax10);
            if (eax10) {
                fun_18008920(eax10, a4, a3, a2, a3, 4, a4, 4, edi11, esi12, ebp9, ebx13, __return_address(), a2);
                fun_1800a200(a2);
                goto edi11;
            } else {
                fun_18009260(a2, 10, a3);
                fun_1800a200(a2);
                goto edi11;
            }
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetVolume(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    int16_t ax30;
    int32_t eax31;
    void** eax32;
    void* esp33;
    void** edi34;
    void** esi35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    int32_t v58;
    int32_t v59;
    int32_t v60;

    ax30 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax30)) {
        eax31 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax31) {
            fun_1800a1e0(a2);
            eax32 = reinterpret_cast<void**>(__return_address());
            *reinterpret_cast<int16_t*>(&eax32) = fun_18009c50(a2, eax32);
            esp33 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 + 4 - 4 + 4 - 4 - 4 + 4 + 4);
            if (eax32) {
                fun_180085a0(eax32, reinterpret_cast<int32_t>(esp33) + 8, 2, a4, 4, edi34, esi35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
                *reinterpret_cast<void***>(a4) = esi35;
                fun_1800c670(reinterpret_cast<int32_t>(esp33) - 4 - 4 - 4 + 8 + 4 + 8, a4, 4, edi34, esi35, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29);
                fun_1800a200(a2);
                goto v58;
            } else {
                fun_18009260(a2, 10, a4);
                fun_1800a200(a2);
                goto v59;
            }
        } else {
            fun_18009260(ecx, 50, a4);
            goto v60;
        }
    } else {
        return 5;
    }
}

void** QSWaveMixInit(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** v8;
    void*** esp9;
    void** v10;
    void** edi11;
    int32_t ecx12;
    void** eax13;
    void** v14;
    void** v15;
    void** v16;
    void** v17;
    void** v18;
    void** v19;
    void** v20;
    void** v21;
    void** v22;
    void** v23;
    void** v24;
    void** v25;
    void** v26;
    void** v27;
    void** v28;

    v8 = reinterpret_cast<void**>(__return_address());
    esp9 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 64 - 4);
    v10 = edi11;
    ecx12 = 15;
    while (ecx12) {
        --ecx12;
    }
    eax13 = reinterpret_cast<void**>(esp9 + 4);
    *reinterpret_cast<int16_t*>(&eax13) = QSWaveMixInitEx(eax13, v10, 64, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v8, a1, a2, a3, a4, a5, a6, a7);
    return eax13;
}

int16_t QSWaveMixIsChannelDone(void** a1, void** a2) {
    int16_t ax3;
    void** eax4;
    void** ecx5;
    void** esi6;
    int32_t eax7;
    void** edi8;

    ax3 = fun_180010c0(a1);
    if (!*reinterpret_cast<signed char*>(&ax3)) {
        fun_1800a1e0(a1);
        eax4 = a2;
        *reinterpret_cast<int16_t*>(&eax4) = fun_18009c50(a1, eax4);
        if (eax4) {
            ecx5 = *reinterpret_cast<void***>(eax4 + 0x2cc);
            if (!ecx5) {
                fun_1800a200(a1);
                return 1;
            } else {
                esi6 = (*reinterpret_cast<struct s11**>(eax4 + 0x2d0))->f8;
                fun_1800a200(a1);
                eax7 = 0;
                *reinterpret_cast<unsigned char*>(&eax7) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(esi6 == 0));
                return *reinterpret_cast<int16_t*>(&eax7);
            }
        } else {
            fun_18009260(a1, 10, edi8);
            fun_1800a200(a1);
            return 11;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixOpenChannel(void** a1, void** a2, void** a3) {
    void** esi4;
    void** v5;
    void** edi6;
    int16_t ax7;
    void** ecx8;
    void** eax9;
    void** eax10;
    void** edi11;
    void** eax12;
    void** edi13;
    void** edi14;
    void** ecx15;
    void** eax16;

    esi4 = a1;
    v5 = edi6;
    ax7 = fun_180010c0(esi4);
    if (*reinterpret_cast<signed char*>(&ax7)) {
        return 5;
    }
    ecx8 = esi4;
    fun_1800a1e0(ecx8);
    eax9 = a3;
    if (reinterpret_cast<unsigned char>(eax9) > reinterpret_cast<unsigned char>(3)) {
        fun_18009260(ecx8, 11, v5);
        fun_1800a200(esi4);
        return 10;
    }
    goto *reinterpret_cast<int32_t*>(reinterpret_cast<unsigned char>(eax9) * 4 + 0x180030d4);
    eax10 = a2;
    ecx8 = esi4;
    *reinterpret_cast<int16_t*>(&eax10) = fun_18009c50(ecx8, eax10);
    if (!eax10 || (ecx8 = *reinterpret_cast<void***>(eax10 + 0x2c4), !!ecx8)) {
        addr_0x18002fc5_7:
        fun_18009260(ecx8, 10, v5);
        fun_1800a200(esi4);
        return 11;
    } else {
        fun_1800a170(esi4, eax10);
    }
    fun_1800a200(esi4);
    return 0;
    edi11 = reinterpret_cast<void**>(0);
    *reinterpret_cast<int16_t*>(&eax9) = fun_18009c50(esi4, 0);
    if (eax9) {
        do {
            if (!*reinterpret_cast<void***>(eax9 + 0x2c4)) {
                fun_1800a170(esi4, eax9);
            }
            ++edi11;
            *reinterpret_cast<int16_t*>(&eax9) = fun_18009c50(esi4, edi11);
        } while (eax9);
    }
    fun_1800a200(esi4);
    return 0;
    eax12 = a2;
    if (reinterpret_cast<signed char>(eax12) < reinterpret_cast<signed char>(0)) 
        goto addr_0x18002fc5_7;
    edi13 = eax12 + 0xffffffff;
    ecx8 = esi4;
    *reinterpret_cast<int16_t*>(&eax12) = fun_18009c50(ecx8, edi13);
    if (!eax12) 
        goto addr_0x18002fc5_7;
    if (reinterpret_cast<signed char>(edi13) >= reinterpret_cast<signed char>(0)) {
        do {
            *reinterpret_cast<int16_t*>(&eax12) = fun_18009c50(esi4, edi13);
            if (!*reinterpret_cast<void***>(eax12 + 0x2c4)) {
                fun_1800a170(esi4, eax12);
            }
            --edi13;
        } while (reinterpret_cast<signed char>(edi13) >= reinterpret_cast<signed char>(0));
        fun_1800a200(esi4);
        return 0;
    }
    edi14 = reinterpret_cast<void**>(0);
    ecx15 = esi4;
    *reinterpret_cast<int16_t*>(&eax9) = fun_18009c50(ecx15, 0);
    if (!eax9) {
        addr_0x18003002_23:
        fun_18009260(ecx15, 14, v5);
        fun_1800a200(esi4);
        return -1;
    } else {
        do {
            if (!*reinterpret_cast<void***>(eax9 + 0x2c4)) 
                break;
            ++edi14;
            ecx15 = esi4;
            *reinterpret_cast<int16_t*>(&eax9) = fun_18009c50(ecx15, edi14);
        } while (eax9);
        goto addr_0x18003002_23;
    }
    fun_1800a170(esi4, eax9);
    fun_1800a200(esi4);
    eax16 = edi14;
    return *reinterpret_cast<int16_t*>(&eax16);
}

void fun_18003605(int32_t ecx) {
}

int16_t QSWaveMixPlay(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22) {
    void** v23;
    int16_t ax24;
    void** ecx25;
    int32_t eax26;
    void** esi27;
    void** esi28;
    void** edi29;

    v23 = *reinterpret_cast<void***>(a1 + 2);
    ax24 = fun_180010c0(v23);
    if (!*reinterpret_cast<signed char*>(&ax24)) {
        ecx25 = *reinterpret_cast<void***>(a1 + 10);
        eax26 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax26) {
            esi27 = *reinterpret_cast<void***>(a1 + 2);
            fun_1800a1e0(esi27);
            fun_18005dd0(esi27, a1, esi28, ecx25, 72, edi29, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
            fun_1800a200(esi27);
            goto 72;
        } else {
            fun_18009260(ecx25, 50, ecx25);
            goto 72;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixPlayEx(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16) {
    int16_t ax17;
    int32_t eax18;
    void** edi19;
    void** esi20;
    void** ebx21;

    ax17 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax17)) {
        eax18 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax18) {
            if (!a5 || (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a5)) <= reinterpret_cast<unsigned char>(32) || reinterpret_cast<signed char>(*reinterpret_cast<void***>(a5 + 20)) >= reinterpret_cast<signed char>(0) && (reinterpret_cast<signed char>(*reinterpret_cast<void***>(a5 + 20)) <= reinterpret_cast<signed char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(a5 + 68) + 16)) && (reinterpret_cast<signed char>(*reinterpret_cast<void***>(a5 + 24)) >= reinterpret_cast<signed char>(0) && (reinterpret_cast<signed char>(*reinterpret_cast<void***>(a5 + 24)) <= reinterpret_cast<signed char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(a5 + 68) + 16)) && (reinterpret_cast<signed char>(*reinterpret_cast<void***>(a5 + 28)) >= reinterpret_cast<signed char>(0) && (reinterpret_cast<signed char>(*reinterpret_cast<void***>(a5 + 28)) <= reinterpret_cast<signed char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(a5 + 68) + 16)) && (reinterpret_cast<signed char>(*reinterpret_cast<void***>(a5 + 32)) >= reinterpret_cast<signed char>(0) && reinterpret_cast<signed char>(*reinterpret_cast<void***>(a5 + 32)) <= reinterpret_cast<signed char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(a5 + 68) + 16)))))))))) {
                fun_1800a1e0(a2);
                fun_18005ef0(a2, __return_address(), a2, a5, a4, a5, a5, 72, edi19, esi20, ebx21, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
                fun_1800a200(a2);
                goto esi20;
            } else {
                goto esi20;
            }
        } else {
            fun_18009260(ecx, 50, a5);
            goto esi20;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixPrioritizeChannels(void** a1, struct s30* a2, void** a3, int32_t a4) {
    void** esi5;
    int16_t ax6;
    void** eax7;
    void** edi8;

    esi5 = a1;
    ax6 = fun_180010c0(esi5);
    if (!*reinterpret_cast<signed char*>(&ax6)) {
        fun_1800a1e0(esi5);
        fun_18009b50(esi5, a2, a3, a4);
        eax7 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi5 + 80)) & 15);
        if (*reinterpret_cast<signed char*>(&eax7) == 15 && (*reinterpret_cast<void***>(esi5 + 2) && (fun_1800a0f0(esi5), edi8 = reinterpret_cast<void**>(1), *reinterpret_cast<int16_t*>(&eax7) = fun_18009c50(esi5, 0), !!eax7))) {
            do {
                fun_18007240(eax7, 1);
                eax7 = edi8;
                ++edi8;
                *reinterpret_cast<int16_t*>(&eax7) = fun_18009c50(esi5, eax7);
            } while (eax7);
        }
        fun_1800a200(esi5);
        return 0;
    } else {
        return 5;
    }
}

int16_t QSWaveMixRestartChannel(void** a1, void** a2, unsigned char a3) {
    void** edi4;
    int16_t ax5;
    void** eax6;
    void** edi7;
    void** esi8;
    void** eax9;

    edi4 = a1;
    ax5 = fun_180010c0(edi4);
    if (!*reinterpret_cast<signed char*>(&ax5)) {
        fun_1800a1e0(edi4);
        if (!(a3 & 1)) {
            eax6 = a2;
            *reinterpret_cast<int16_t*>(&eax6) = fun_18009c50(edi4, eax6);
            if (eax6) {
                fun_18007490(eax6);
            } else {
                fun_18009260(edi4, 10, edi7);
                fun_1800a200(edi4);
                return 11;
            }
        } else {
            esi8 = reinterpret_cast<void**>(1);
            *reinterpret_cast<int16_t*>(&eax9) = fun_18009c50(edi4, 0);
            if (!0) {
                do {
                    fun_18007490(eax9);
                    eax9 = esi8;
                    ++esi8;
                    *reinterpret_cast<int16_t*>(&eax9) = fun_18009c50(edi4, eax9);
                } while (eax9);
            }
        }
        fun_1800a220(edi4);
        fun_1800a200(edi4);
        return 0;
    } else {
        return 5;
    }
}

int16_t QSWaveMixSetChannelParams(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28) {
    void** v29;
    int32_t eax30;
    void** edi31;
    void** v32;
    int16_t ax33;
    void*** esp34;
    void** v35;
    void* esp36;
    void** ecx37;
    void** ebp38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** ecx49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    int32_t v60;
    int32_t v61;
    int32_t v62;

    if (!a5 || (v29 = *reinterpret_cast<void***>(a5), eax30 = reinterpret_cast<int32_t>(IsBadReadPtr()), !!eax30)) {
        fun_18009260(ecx, 50, edi31);
        return 11;
    } else {
        ax33 = fun_180010c0(v32);
        if (!*reinterpret_cast<signed char*>(&ax33)) {
            fun_1800a1e0(v32);
            *reinterpret_cast<int16_t*>(&eax30) = fun_18009c50(v32, __return_address());
            if (eax30) {
                esp34 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4 - 4 + 4 - 4 - 4 + 4 + 4 - 4);
                *reinterpret_cast<signed char*>(&v35) = 0;
                fun_1800c8a0(esp34 + 16, a5, a5, v29, edi31, 0);
                esp36 = reinterpret_cast<void*>(esp34 - 4 + 4 + 4);
                ecx37 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp36) + 12);
                fun_18001520(ecx37, v32, __return_address(), a2, ecx37, a5, v29, edi31, 0, ebp38, v39, v40, v41, v42, v43, v44, v45, v46, v35, v47, v48, __return_address(), a2);
                ecx49 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp36) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 12);
                fun_1800c670(ecx49, a5, v29, edi31, 0, ebp38, v50, v51, v52, v53, v54, v55, v56, v57, v35, v58, v59, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, ecx49);
                fun_1800a200(v32);
                goto v60;
            } else {
                fun_18009260(v32, 10, a5);
                fun_1800a200(v32);
                goto v61;
            }
        } else {
            goto v62;
        }
    }
}

int16_t QSWaveMixSetChannelPriority(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30) {
    int16_t ax31;
    void* esp32;
    void** v33;
    void* esp34;
    void** ecx35;
    void** eax36;
    void** edi37;
    void** esi38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** ecx48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** eax58;

    ax31 = fun_180010c0(a1);
    if (!*reinterpret_cast<signed char*>(&ax31)) {
        fun_1800a1e0(a1);
        esp32 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 + 4 + 4 - 4 - 4 + 4);
        *reinterpret_cast<signed char*>(&v33) = 0;
        fun_1800c890(reinterpret_cast<int32_t>(esp32) + 8, a3);
        esp34 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp32) - 4 - 4 + 4 + 4);
        ecx35 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp34) + 8);
        eax36 = a2;
        *reinterpret_cast<int16_t*>(&eax36) = fun_18001520(ecx35, a1, eax36, a4, ecx35, edi37, esi38, 0, v39, v40, v41, v42, v43, v44, v45, v46, v47, v33, __return_address(), a1, a2, a3, a4);
        ecx48 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp34) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 8);
        fun_1800c670(ecx48, edi37, esi38, 0, v49, v50, v51, v52, v53, v54, v55, v56, v57, v33, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, ecx48);
        fun_1800a200(a1);
        eax58 = eax36;
        return *reinterpret_cast<int16_t*>(&eax58);
    } else {
        return 5;
    }
}

int16_t QSWaveMixSetChorus(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30) {
    int16_t ax31;
    void* esp32;
    void** v33;
    void* esp34;
    void** ecx35;
    void** eax36;
    void** edi37;
    void** esi38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** ecx48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** eax58;

    ax31 = fun_180010c0(a1);
    if (!*reinterpret_cast<signed char*>(&ax31)) {
        fun_1800a1e0(a1);
        esp32 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 + 4 + 4 - 4 - 4 + 4);
        *reinterpret_cast<signed char*>(&v33) = 0;
        fun_1800c920(reinterpret_cast<int32_t>(esp32) + 8, a4);
        esp34 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp32) - 4 - 4 + 4 + 4);
        ecx35 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp34) + 8);
        eax36 = a2;
        *reinterpret_cast<int16_t*>(&eax36) = fun_18001520(ecx35, a1, eax36, a3, ecx35, edi37, esi38, 0, v39, v40, v41, v42, v43, v44, v45, v46, v47, v33, __return_address(), a1, a2, a3, a4);
        ecx48 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp34) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 8);
        fun_1800c670(ecx48, edi37, esi38, 0, v49, v50, v51, v52, v53, v54, v55, v56, v57, v33, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, ecx48);
        fun_1800a200(a1);
        eax58 = eax36;
        return *reinterpret_cast<int16_t*>(&eax58);
    } else {
        return 5;
    }
}

void QSWaveMixSetDistanceMapping(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27) {
    int32_t edi28;
    int32_t eax29;
    void** v30;
    int32_t eax31;
    int32_t v32;
    void** v33;
    int16_t ax34;
    void** v35;
    void** v36;
    void** eax37;
    void** ecx38;
    void*** esp39;
    void* esp40;
    void** v41;
    void** v42;
    void** edi43;
    void** esi44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** ecx55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    int32_t v66;
    int32_t v67;

    edi28 = IsBadReadPtr;
    eax29 = reinterpret_cast<int32_t>(edi28());
    if (eax29 || (v30 = *reinterpret_cast<void***>(a5), eax31 = reinterpret_cast<int32_t>(edi28()), !!eax31)) {
        fun_18009260(ecx, 50, a5);
        goto v32;
    } else {
        ax34 = fun_180010c0(v33);
        if (!*reinterpret_cast<signed char*>(&ax34)) {
            *reinterpret_cast<signed char*>(&v35) = 0;
            if (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(a5)) > reinterpret_cast<unsigned char>(12)) {
                v36 = *reinterpret_cast<void***>(a5 + 12);
            } else {
                v36 = reinterpret_cast<void**>(0x3f800000);
            }
            eax37 = *reinterpret_cast<void***>(a5 + 8);
            ecx38 = *reinterpret_cast<void***>(a5 + 4);
            esp39 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4);
            fun_1800c870(esp39 + 20, ecx38, eax37, v36);
            esp40 = reinterpret_cast<void*>(esp39 - 4 + 12 + 4);
            fun_18001520(v41, v33, v41, v42, reinterpret_cast<int32_t>(esp40) + 8, a5, v30, 0, 4, edi43, esi44, v45, v46, v47, v48, v49, v50, v35, v51, v52, v53, v54, v36);
            ecx55 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp40) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 8);
            fun_1800c670(ecx55, a5, v30, 0, 4, edi43, esi44, v56, v57, v58, v59, v60, v61, v35, v62, v63, v64, v65, v36, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, ecx55);
            goto v66;
        } else {
            goto v67;
        }
    }
}

int16_t QSWaveMixSetFlange(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30) {
    int16_t ax31;
    void* esp32;
    void** v33;
    void* esp34;
    void** ecx35;
    void** eax36;
    void** edi37;
    void** esi38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** ecx48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** eax58;

    ax31 = fun_180010c0(a1);
    if (!*reinterpret_cast<signed char*>(&ax31)) {
        fun_1800a1e0(a1);
        esp32 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 + 4 + 4 - 4 - 4 + 4);
        *reinterpret_cast<signed char*>(&v33) = 0;
        fun_1800c990(reinterpret_cast<int32_t>(esp32) + 8, a4);
        esp34 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp32) - 4 - 4 + 4 + 4);
        ecx35 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp34) + 8);
        eax36 = a2;
        *reinterpret_cast<int16_t*>(&eax36) = fun_18001520(ecx35, a1, eax36, a3, ecx35, edi37, esi38, 0, v39, v40, v41, v42, v43, v44, v45, v46, v47, v33, __return_address(), a1, a2, a3, a4);
        ecx48 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp34) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 8);
        fun_1800c670(ecx48, edi37, esi38, 0, v49, v50, v51, v52, v53, v54, v55, v56, v57, v33, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, ecx48);
        fun_1800a200(a1);
        eax58 = eax36;
        return *reinterpret_cast<int16_t*>(&eax58);
    } else {
        return 5;
    }
}

int16_t QSWaveMixSetFrequency(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31) {
    int16_t ax32;
    void* esp33;
    void** v34;
    void* esp35;
    void** ecx36;
    void** eax37;
    void** esi38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** eax57;

    ax32 = fun_180010c0(a1);
    esp33 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 + 4 + 4);
    if (!*reinterpret_cast<signed char*>(&ax32)) {
        *reinterpret_cast<signed char*>(&v34) = 0;
        fun_1800c770(reinterpret_cast<int32_t>(esp33) + 4, a4);
        esp35 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp33) - 4 - 4 + 4 + 4);
        ecx36 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp35) + 4);
        eax37 = a2;
        *reinterpret_cast<int16_t*>(&eax37) = fun_18001520(ecx36, a1, eax37, a3, ecx36, esi38, 0, v39, v40, v41, v42, v43, v44, v45, v46, v47, v34, __return_address(), a1, a2, a3, a4, a5);
        fun_1800c670(reinterpret_cast<int32_t>(esp35) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 4, esi38, 0, v48, v49, v50, v51, v52, v53, v54, v55, v56, v34, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31);
        eax57 = eax37;
        return *reinterpret_cast<int16_t*>(&eax57);
    } else {
        return 5;
    }
}

void QSWaveMixSetListenerOrientation(void** ecx, void** a2, void** a3) {
    int32_t esi4;
    int32_t eax5;
    int32_t eax6;
    int32_t v7;
    void** v8;
    int16_t ax9;
    void* esp10;
    void*** esp11;
    void* esp12;
    int32_t v13;
    int32_t v14;

    esi4 = IsBadReadPtr;
    eax5 = reinterpret_cast<int32_t>(esi4());
    if (eax5 || (eax6 = reinterpret_cast<int32_t>(esi4()), !!eax6)) {
        fun_18009260(ecx, 50, a3);
        goto v7;
    } else {
        ax9 = fun_180010c0(v8);
        if (!*reinterpret_cast<signed char*>(&ax9)) {
            fun_1800a1e0(v8);
            esp10 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 36 - 4 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4 - 4 + 4);
            fun_18001020(v8, reinterpret_cast<int32_t>(esp10) + 36, a3, a2, 12, a3, 12);
            esp11 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp10) - 4 - 4 - 4 + 8 + 4 - 4);
            fun_18001020(v8, esp11 + 40, a2, a2, 12, a3, 12);
            esp12 = reinterpret_cast<void*>(esp11 - 4 - 4 + 8 + 4);
            fun_1800a340(v8, reinterpret_cast<int32_t>(esp12) + 24, reinterpret_cast<int32_t>(esp12) + 12);
            fun_1800a200(v8);
            goto v13;
        } else {
            goto v14;
        }
    }
}

void QSWaveMixSetListenerPosition(void** ecx, uint32_t a2, void** a3) {
    int32_t eax4;
    void** v5;
    int16_t ax6;
    void* esp7;
    void** edi8;
    void** esi9;
    uint32_t ecx10;
    int32_t v11;
    int32_t v12;
    int32_t v13;

    eax4 = reinterpret_cast<int32_t>(IsBadReadPtr());
    if (!eax4) {
        ax6 = fun_180010c0(v5);
        if (!*reinterpret_cast<signed char*>(&ax6)) {
            fun_1800a1e0(v5);
            esp7 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 24 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4 - 4 + 4);
            fun_18001020(v5, reinterpret_cast<int32_t>(esp7) + 20, a3, a3, 12, edi8, esi9);
            ecx10 = a2 >> 5;
            *reinterpret_cast<unsigned char*>(&ecx10) = reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(~*reinterpret_cast<unsigned char*>(&ecx10)) & 1);
            fun_1800a2d0(v5, reinterpret_cast<int32_t>(esp7) - 4 - 4 - 4 + 8 + 4 + 8, ecx10);
            fun_1800a200(v5);
            goto v11;
        } else {
            goto v12;
        }
    } else {
        fun_18009260(ecx, 50, a3);
        goto v13;
    }
}

int16_t QSWaveMixSetListenerRolloff(void** a1, void** a2) {
    int16_t ax3;

    ax3 = fun_180010c0(a1);
    if (!*reinterpret_cast<signed char*>(&ax3)) {
        fun_1800a1e0(a1);
        fun_1800a3d0(a1, a2);
        fun_1800a200(a1);
        return 0;
    } else {
        return 5;
    }
}

void QSWaveMixSetListenerVelocity(void** ecx) {
    int32_t eax2;
    void** v3;
    int16_t ax4;
    void* esp5;
    void** v6;
    void** edi7;
    void** esi8;
    int32_t v9;
    int32_t v10;
    int32_t v11;

    eax2 = reinterpret_cast<int32_t>(IsBadReadPtr());
    if (!eax2) {
        ax4 = fun_180010c0(v3);
        if (!*reinterpret_cast<signed char*>(&ax4)) {
            fun_1800a1e0(v3);
            esp5 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 24 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4 - 4 + 4);
            fun_18001020(v3, reinterpret_cast<int32_t>(esp5) + 20, v6, v6, 12, edi7, esi8);
            fun_1800a450(v3, reinterpret_cast<int32_t>(esp5) - 4 - 4 - 4 + 8 + 4 + 8);
            fun_1800a200(v3);
            goto v9;
        } else {
            goto v10;
        }
    } else {
        fun_18009260(ecx, 50, v6);
        goto v11;
    }
}

int16_t QSWaveMixSetMixerOption(void** a1, int32_t a2, int32_t a3) {
    int16_t ax4;

    ax4 = fun_180010c0(a1);
    if (!*reinterpret_cast<signed char*>(&ax4)) {
        fun_1800a1e0(a1);
        fun_18009db0(a1, a2, a3);
        fun_1800a200(a1);
        return 0;
    } else {
        return 5;
    }
}

int16_t QSWaveMixSetOptions(void** a1, uint32_t a2, uint32_t a3) {
    int16_t ax4;

    ax4 = fun_180010c0(a1);
    if (!*reinterpret_cast<signed char*>(&ax4)) {
        fun_1800a1e0(a1);
        fun_18009df0(a1, a2, a3);
        fun_1800a200(a1);
        return 0;
    } else {
        return 5;
    }
}

int16_t QSWaveMixSetPan(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31) {
    int16_t ax32;
    void** esi33;
    void** v34;
    void*** esp35;
    void* esp36;
    void** eax37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** eax56;

    ax32 = fun_180010c0(a1);
    if (!*reinterpret_cast<signed char*>(&ax32)) {
        if (reinterpret_cast<signed char>(a4) < reinterpret_cast<signed char>(0) || reinterpret_cast<signed char>(a4) > reinterpret_cast<signed char>(60)) {
            fun_18009260(0, 12, esi33);
            return 11;
        } else {
            *reinterpret_cast<signed char*>(&v34) = 0;
            esp35 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 + 4 + 4 - 4);
            fun_1800c790(esp35 + 8, a4);
            esp36 = reinterpret_cast<void*>(esp35 - 4 + 4 + 4);
            eax37 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp36) + 4);
            *reinterpret_cast<int16_t*>(&eax37) = fun_18001520(a3, a1, a2, a3, eax37, esi33, 0, v38, v39, v40, v41, v42, v43, v44, v45, v46, v34, __return_address(), a1, a2, a3, a4, a5);
            fun_1800c670(reinterpret_cast<int32_t>(esp36) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 4, esi33, 0, v47, v48, v49, v50, v51, v52, v53, v54, v55, v34, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31);
            eax56 = eax37;
            return *reinterpret_cast<int16_t*>(&eax56);
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixSetPanRate(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31) {
    int16_t ax32;
    void* esp33;
    void** v34;
    void* esp35;
    void** ecx36;
    void** eax37;
    void** esi38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** eax57;

    ax32 = fun_180010c0(a1);
    esp33 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 + 4 + 4);
    if (!*reinterpret_cast<signed char*>(&ax32)) {
        *reinterpret_cast<signed char*>(&v34) = 0;
        fun_1800c780(reinterpret_cast<int32_t>(esp33) + 4, a4);
        esp35 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp33) - 4 - 4 + 4 + 4);
        ecx36 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp35) + 4);
        eax37 = a2;
        *reinterpret_cast<int16_t*>(&eax37) = fun_18001520(ecx36, a1, eax37, a3, ecx36, esi38, 0, v39, v40, v41, v42, v43, v44, v45, v46, v47, v34, __return_address(), a1, a2, a3, a4, a5);
        fun_1800c670(reinterpret_cast<int32_t>(esp35) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 4, esi38, 0, v48, v49, v50, v51, v52, v53, v54, v55, v56, v34, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31);
        eax57 = eax37;
        return *reinterpret_cast<int16_t*>(&eax57);
    } else {
        return 5;
    }
}

void QSWaveMixSetPolarPosition(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    int32_t eax30;
    void** v31;
    int16_t ax32;
    void*** esp33;
    struct s20* ecx34;
    void** v35;
    void* esp36;
    void** esi37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** ecx48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    int32_t v59;
    int32_t v60;
    int32_t v61;

    eax30 = reinterpret_cast<int32_t>(IsBadReadPtr());
    if (!eax30) {
        ax32 = fun_180010c0(v31);
        if (!*reinterpret_cast<signed char*>(&ax32)) {
            esp33 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4 - 4);
            ecx34 = reinterpret_cast<struct s20*>(esp33 + 12);
            *reinterpret_cast<signed char*>(&v35) = 0;
            fun_1800c7c0(ecx34, a5, ecx34, a5);
            esp36 = reinterpret_cast<void*>(esp33 - 4 + 4 + 4);
            fun_18001520(a2, v31, __return_address(), a2, reinterpret_cast<int32_t>(esp36) + 8, a5, 12, 0, esi37, v38, v39, v40, v41, v42, v43, v44, v45, v35, v46, v47, __return_address(), a2, a3);
            ecx48 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp36) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 8);
            fun_1800c670(ecx48, a5, 12, 0, esi37, v49, v50, v51, v52, v53, v54, v55, v56, v35, v57, v58, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, ecx48);
            goto v59;
        } else {
            goto v60;
        }
    } else {
        fun_18009260(ecx, 50, a5);
        goto v61;
    }
}

void QSWaveMixSetPosition(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    int32_t eax30;
    void** v31;
    int16_t ax32;
    void*** esp33;
    struct s19* ecx34;
    void** v35;
    void* esp36;
    void** esi37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** ecx48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    int32_t v59;
    int32_t v60;
    int32_t v61;

    eax30 = reinterpret_cast<int32_t>(IsBadReadPtr());
    if (!eax30) {
        ax32 = fun_180010c0(v31);
        if (!*reinterpret_cast<signed char*>(&ax32)) {
            esp33 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4 - 4);
            ecx34 = reinterpret_cast<struct s19*>(esp33 + 12);
            *reinterpret_cast<signed char*>(&v35) = 0;
            fun_1800c7a0(ecx34, a5, ecx34, a5);
            esp36 = reinterpret_cast<void*>(esp33 - 4 + 4 + 4);
            fun_18001520(a2, v31, __return_address(), a2, reinterpret_cast<int32_t>(esp36) + 8, a5, 12, 0, esi37, v38, v39, v40, v41, v42, v43, v44, v45, v35, v46, v47, __return_address(), a2, a3);
            ecx48 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp36) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 8);
            fun_1800c670(ecx48, a5, 12, 0, esi37, v49, v50, v51, v52, v53, v54, v55, v56, v35, v57, v58, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, ecx48);
            goto v59;
        } else {
            goto v60;
        }
    } else {
        fun_18009260(ecx, 50, a5);
        goto v61;
    }
}

int16_t QSWaveMixSetReverbDampingFactor(void** ecx, void** a2, void** a3) {
    int16_t ax4;
    void** esi5;

    ax4 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax4)) {
        __asm__("fld dword [esp+0xc]");
        __asm__("fcomp dword [0x1803422c]");
        __asm__("fnstsw ax");
        if (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&ax4) + 1) & 1 || !(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&ax4) + 1) & 65)) {
            fun_18009260(ecx, 50, esi5);
            return 11;
        } else {
            fun_1800a1e0(a2);
            fun_1800a5a0(a2, a3);
            fun_1800a200(a2);
            return 0;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixSetReverbDecayTime(void** ecx, void** a2, void** a3) {
    unsigned char ah4;
    unsigned char ah5;
    void** esi6;
    int16_t ax7;

    __asm__("fld dword [esp+0x8]");
    __asm__("fcomp dword [0x1803422c]");
    __asm__("fnstsw ax");
    if (ah4 & 1 || !(ah5 & 65)) {
        fun_18009260(ecx, 50, esi6);
        return 11;
    } else {
        ax7 = fun_180010c0(a2);
        if (!*reinterpret_cast<signed char*>(&ax7)) {
            fun_1800a1e0(a2);
            fun_1800a600(a2, a3);
            fun_1800a200(a2);
            return 0;
        } else {
            return 5;
        }
    }
}

int16_t QSWaveMixSetReverbEnvironment(void** ecx, void** a2, void** a3, void** a4) {
    int16_t ax5;
    void** edi6;

    if (reinterpret_cast<signed char>(a3) < reinterpret_cast<signed char>(0)) 
        goto addr_0x18004262_2;
    if (reinterpret_cast<signed char>(a3) > reinterpret_cast<signed char>(1)) 
        goto addr_0x18004262_2;
    if (a3) {
        if (!reinterpret_cast<int1_t>(a3 == 1) || reinterpret_cast<signed char>(a4) >= reinterpret_cast<signed char>(0xffffffff) && reinterpret_cast<signed char>(a4) <= reinterpret_cast<signed char>(2)) {
            addr_0x18004283_6:
            ax5 = fun_180010c0(a2);
            if (!*reinterpret_cast<signed char*>(&ax5)) {
                fun_1800a1e0(a2);
                fun_1800a660(a2, a3, a4);
                fun_1800a200(a2);
                return 0;
            } else {
                return 5;
            }
        } else {
            addr_0x18004262_2:
            fun_18009260(ecx, 50, edi6);
            return 11;
        }
    } else {
        if (reinterpret_cast<signed char>(a4) < reinterpret_cast<signed char>(0xffffffff)) 
            goto addr_0x18004262_2;
        if (reinterpret_cast<signed char>(a4) <= reinterpret_cast<signed char>(25)) 
            goto addr_0x18004283_6; else 
            goto addr_0x18004262_2;
    }
}

int16_t QSWaveMixSetReverbMix(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32) {
    unsigned char ah33;
    unsigned char ah34;
    unsigned char ah35;
    int16_t ax36;
    void* esp37;
    void** v38;
    void* esp39;
    void** ecx40;
    void** eax41;
    void** esi42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** eax61;

    __asm__("fld dword [esp+0x10]");
    __asm__("fcomp dword [0x1803422c]");
    __asm__("fnstsw ax");
    if (!(ah33 & 1) && ah34 & 65 || ah35 & 64) {
        ax36 = fun_180010c0(a2);
        esp37 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 + 4 + 4);
        if (!*reinterpret_cast<signed char*>(&ax36)) {
            *reinterpret_cast<signed char*>(&v38) = 0;
            fun_1800c800(reinterpret_cast<int32_t>(esp37) + 4, a5);
            esp39 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp37) - 4 - 4 + 4 + 4);
            ecx40 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp39) + 4);
            eax41 = a3;
            *reinterpret_cast<int16_t*>(&eax41) = fun_18001520(ecx40, a2, eax41, a4, ecx40, esi42, 0, v43, v44, v45, v46, v47, v48, v49, v50, v51, v38, __return_address(), a2, a3, a4, a5, a6);
            fun_1800c670(reinterpret_cast<int32_t>(esp39) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 4, esi42, 0, v52, v53, v54, v55, v56, v57, v58, v59, v60, v38, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32);
            eax61 = eax41;
            return *reinterpret_cast<int16_t*>(&eax61);
        } else {
            return 5;
        }
    } else {
        fun_18009260(ecx, 50, esi42);
        return 11;
    }
}

int16_t QSWaveMixSetReverbVolume(void** ecx, void** a2, void** a3) {
    unsigned char ah4;
    unsigned char ah5;
    void** esi6;
    int16_t ax7;

    __asm__("fld dword [esp+0x8]");
    __asm__("fcomp dword [0x1803422c]");
    __asm__("fnstsw ax");
    if (ah4 & 1 || !(ah5 & 65)) {
        fun_18009260(ecx, 50, esi6);
        return 11;
    } else {
        ax7 = fun_180010c0(a2);
        if (!*reinterpret_cast<signed char*>(&ax7)) {
            fun_1800a1e0(a2);
            fun_1800a6f0(a2, a3);
            fun_1800a200(a2);
            return 0;
        } else {
            return 5;
        }
    }
}

int16_t QSWaveMixSetRoomSize(void** a1, void** a2) {
    int16_t ax3;

    ax3 = fun_180010c0(a1);
    if (!*reinterpret_cast<signed char*>(&ax3)) {
        fun_1800a1e0(a1);
        fun_1800a550(a1, a2);
        fun_1800a200(a1);
        return 0;
    } else {
        return 5;
    }
}

void QSWaveMixSetSourceCone(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28) {
    int32_t eax29;
    int32_t v30;
    void** v31;
    int16_t ax32;
    void*** esp33;
    void** ecx34;
    void** v35;
    void* esp36;
    void** ebx37;
    void** esi38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void*** esp49;
    void** ecx50;
    void* esp51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** ecx62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    int32_t v73;
    int32_t v74;

    eax29 = reinterpret_cast<int32_t>(IsBadReadPtr());
    if (eax29 || (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax29) + 1) & 1 || (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax29) + 1) & 65) || *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax29) + 1) & 1))) {
        fun_18009260(ecx, 50, a5);
        goto v30;
    } else {
        ax32 = fun_180010c0(v31);
        if (!*reinterpret_cast<signed char*>(&ax32)) {
            fun_1800a1e0(v31);
            esp33 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4 - 4 - 4 + 4 - 4);
            ecx34 = reinterpret_cast<void**>(esp33 + 16);
            *reinterpret_cast<signed char*>(&v35) = 0;
            fun_1800c850(ecx34, a5);
            esp36 = reinterpret_cast<void*>(esp33 - 4 + 4 + 4);
            fun_18001520(ecx34, v31, __return_address(), a2, reinterpret_cast<int32_t>(esp36) + 12, ebx37, a5, 12, 0, esi38, v39, v40, v41, v42, v43, v44, v45, v46, v35, v47, v48, __return_address(), a2);
            esp49 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp36) - 4 - 4 - 4 - 4 - 4 + 16 + 4 - 4 - 4 - 4);
            ecx50 = reinterpret_cast<void**>(esp49 + 24);
            fun_1800c830(ecx50, a4, a4, a5);
            esp51 = reinterpret_cast<void*>(esp49 - 4 + 12 + 4);
            fun_18001520(ecx50, v31, __return_address(), a2, reinterpret_cast<int32_t>(esp51) + 12, ebx37, a5, 12, 0, esi38, v52, v53, v54, v55, v56, v57, v58, v59, v35, v60, v61, __return_address(), a2);
            ecx62 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp51) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 12);
            fun_1800c670(ecx62, ebx37, a5, 12, 0, esi38, v63, v64, v65, v66, v67, v68, v69, v70, v35, v71, v72, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, ecx62);
            fun_1800a200(v31);
            goto v73;
        } else {
            goto v74;
        }
    }
}

void QSWaveMixSetSourceCone2(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28) {
    int32_t eax29;
    int32_t v30;
    void** v31;
    int16_t ax32;
    void*** esp33;
    void** ecx34;
    void** v35;
    void* esp36;
    void** ebx37;
    void** esi38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void*** esp49;
    void* esp50;
    void** ecx51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** ecx62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    int32_t v73;
    int32_t v74;

    eax29 = reinterpret_cast<int32_t>(IsBadReadPtr());
    if (eax29 || (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax29) + 1) & 1 || (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax29) + 1) & 65) || (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax29) + 1) & 1 || (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax29) + 1) & 65) || *reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax29) + 1) & 1))))) {
        fun_18009260(ecx, 50, a5);
        goto v30;
    } else {
        ax32 = fun_180010c0(v31);
        if (!*reinterpret_cast<signed char*>(&ax32)) {
            fun_1800a1e0(v31);
            esp33 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4 - 4 - 4 + 4 - 4);
            ecx34 = reinterpret_cast<void**>(esp33 + 16);
            *reinterpret_cast<signed char*>(&v35) = 0;
            fun_1800c850(ecx34, a5);
            esp36 = reinterpret_cast<void*>(esp33 - 4 + 4 + 4);
            fun_18001520(ecx34, v31, __return_address(), a2, reinterpret_cast<int32_t>(esp36) + 12, ebx37, a5, 12, 0, esi38, v39, v40, v41, v42, v43, v44, v45, v46, v35, v47, v48, __return_address(), a2);
            esp49 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp36) - 4 - 4 - 4 - 4 - 4 + 16 + 4 - 4 - 4 - 4);
            fun_1800c830(esp49 + 24, a4, a5, a6);
            esp50 = reinterpret_cast<void*>(esp49 - 4 + 12 + 4);
            ecx51 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp50) + 12);
            fun_18001520(ecx51, v31, __return_address(), a2, ecx51, ebx37, a5, 12, 0, esi38, v52, v53, v54, v55, v56, v57, v58, v59, v35, v60, v61, __return_address(), a2);
            ecx62 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp50) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 12);
            fun_1800c670(ecx62, ebx37, a5, 12, 0, esi38, v63, v64, v65, v66, v67, v68, v69, v70, v35, v71, v72, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, ecx62);
            fun_1800a200(v31);
            goto v73;
        } else {
            goto v74;
        }
    }
}

void QSWaveMixSetSourcePosition(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    int32_t eax30;
    void** v31;
    int16_t ax32;
    void*** esp33;
    void** v34;
    void* esp35;
    void** esi36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** ecx47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    int32_t v58;
    int32_t v59;
    int32_t v60;

    eax30 = reinterpret_cast<int32_t>(IsBadReadPtr());
    if (!eax30) {
        ax32 = fun_180010c0(v31);
        if (!*reinterpret_cast<signed char*>(&ax32)) {
            fun_1800a1e0(v31);
            esp33 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4 - 4 + 4 - 4);
            *reinterpret_cast<signed char*>(&v34) = 0;
            fun_1800c7e0(esp33 + 12, a5);
            esp35 = reinterpret_cast<void*>(esp33 - 4 + 4 + 4);
            fun_18001520(a2, v31, __return_address(), a2, reinterpret_cast<int32_t>(esp35) + 8, a5, 12, 0, esi36, v37, v38, v39, v40, v41, v42, v43, v44, v34, v45, v46, __return_address(), a2, a3);
            ecx47 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp35) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 8);
            fun_1800c670(ecx47, a5, 12, 0, esi36, v48, v49, v50, v51, v52, v53, v54, v55, v34, v56, v57, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, ecx47);
            fun_1800a200(v31);
            goto v58;
        } else {
            goto v59;
        }
    } else {
        fun_18009260(ecx, 50, a5);
        goto v60;
    }
}

void QSWaveMixSetSourceVelocity(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    int32_t eax30;
    void** v31;
    int16_t ax32;
    void*** esp33;
    void** v34;
    void* esp35;
    void** esi36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** ecx47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    int32_t v58;
    int32_t v59;
    int32_t v60;

    eax30 = reinterpret_cast<int32_t>(IsBadReadPtr());
    if (!eax30) {
        ax32 = fun_180010c0(v31);
        if (!*reinterpret_cast<signed char*>(&ax32)) {
            fun_1800a1e0(v31);
            esp33 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4 - 4 + 4 - 4);
            *reinterpret_cast<signed char*>(&v34) = 0;
            fun_1800c810(esp33 + 12, a5);
            esp35 = reinterpret_cast<void*>(esp33 - 4 + 4 + 4);
            fun_18001520(a2, v31, __return_address(), a2, reinterpret_cast<int32_t>(esp35) + 8, a5, 12, 0, esi36, v37, v38, v39, v40, v41, v42, v43, v44, v34, v45, v46, __return_address(), a2, a3);
            ecx47 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp35) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 8);
            fun_1800c670(ecx47, a5, 12, 0, esi36, v48, v49, v50, v51, v52, v53, v54, v55, v34, v56, v57, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, ecx47);
            fun_1800a200(v31);
            goto v58;
        } else {
            goto v59;
        }
    } else {
        fun_18009260(ecx, 50, a5);
        goto v60;
    }
}

int16_t QSWaveMixSetSpeakerPlacement(void** a1, void** a2) {
    int16_t ax3;
    void** eax4;
    void** esi5;

    ax3 = fun_180010c0(a1);
    if (!*reinterpret_cast<signed char*>(&ax3)) {
        fun_1800a1e0(a1);
        eax4 = a2;
        *reinterpret_cast<int16_t*>(&eax4) = fun_18009c70(a1, eax4, esi5);
        if (!eax4) {
            fun_1800a200(a1);
            return 0;
        } else {
            fun_18009260(a1, eax4, esi5);
            fun_1800a200(a1);
            return 8;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixSetSpeedOfSound(void** ecx, void** a2, int32_t a3) {
    unsigned char ah4;
    int16_t ax5;
    void** esi6;

    __asm__("fld dword [esp+0x8]");
    __asm__("fcomp dword [0x1803422c]");
    __asm__("fnstsw ax");
    if (!(ah4 & 65)) {
        ax5 = fun_180010c0(a2);
        if (!*reinterpret_cast<signed char*>(&ax5)) {
            fun_1800a1e0(a2);
            fun_1800a4b0(a2, a3);
            fun_1800a200(a2);
            return 0;
        } else {
            return 5;
        }
    } else {
        fun_18009260(ecx, 50, esi6);
        return 11;
    }
}

int16_t QSWaveMixSetVolume(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31) {
    void** edi32;
    int16_t ax33;
    void*** esp34;
    void** v35;
    void* esp36;
    void** eax37;
    void** esi38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** ecx48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** eax58;

    if (reinterpret_cast<signed char>(a5) < reinterpret_cast<signed char>(0) || reinterpret_cast<signed char>(a5) > reinterpret_cast<signed char>(0x8000)) {
        fun_18009260(ecx, 50, edi32);
        return 11;
    } else {
        ax33 = fun_180010c0(a2);
        if (!*reinterpret_cast<signed char*>(&ax33)) {
            esp34 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 + 4 + 4 - 4);
            *reinterpret_cast<signed char*>(&v35) = 0;
            fun_1800c760(esp34 + 12, a5);
            esp36 = reinterpret_cast<void*>(esp34 - 4 + 4 + 4);
            eax37 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp36) + 8);
            *reinterpret_cast<int16_t*>(&eax37) = fun_18001520(a4, a2, a3, a4, eax37, edi32, esi38, 0, v39, v40, v41, v42, v43, v44, v45, v46, v47, v35, __return_address(), a2, a3, a4, a5);
            ecx48 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp36) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 8);
            fun_1800c670(ecx48, edi32, esi38, 0, v49, v50, v51, v52, v53, v54, v55, v56, v57, v35, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, ecx48);
            eax58 = eax37;
            return *reinterpret_cast<int16_t*>(&eax58);
        } else {
            return 5;
        }
    }
}

int16_t QSWaveMixStartProfile(void** a1) {
    int16_t ax2;

    ax2 = fun_180010c0(a1);
    if (!*reinterpret_cast<signed char*>(&ax2)) {
        fun_1800a1e0(a1);
        fun_1800a810(a1);
        fun_1800a200(a1);
        return 0;
    } else {
        return 5;
    }
}

int16_t QSWaveMixStopChannel(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20) {
    void** v21;
    void** v22;
    void** esi23;
    void** v24;
    void** edi25;
    void** edi26;
    int16_t ax27;
    void** eax28;
    uint32_t ecx29;
    void** esi30;
    void** v31;
    void** ebx32;
    void** ebx33;

    v21 = reinterpret_cast<void**>(__return_address());
    v22 = esi23;
    v24 = edi25;
    edi26 = a1;
    ax27 = fun_180010c0(edi26);
    if (!*reinterpret_cast<signed char*>(&ax27)) {
        fun_1800a1e0(edi26);
        eax28 = a3;
        ecx29 = reinterpret_cast<unsigned char>(eax28) >> 12;
        *reinterpret_cast<unsigned char*>(&a1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&ecx29) & 1);
        if (!(*reinterpret_cast<unsigned char*>(&eax28) & 1)) {
            *reinterpret_cast<int16_t*>(&eax28) = fun_18009c50(edi26, a2);
            if (eax28) {
                fun_180074c0(eax28, a1, v24, v22, v21, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
            } else {
                fun_18009260(edi26, 10, v24);
                fun_1800a200(edi26);
                return 11;
            }
        } else {
            esi30 = reinterpret_cast<void**>(1);
            *reinterpret_cast<int16_t*>(&eax28) = fun_18009c50(edi26, 0);
            if (eax28) {
                v31 = ebx32;
                ebx33 = a1;
                do {
                    fun_180074c0(eax28, ebx33, v31, v24, v22, v21, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
                    eax28 = esi30;
                    ++esi30;
                    *reinterpret_cast<int16_t*>(&eax28) = fun_18009c50(edi26, eax28);
                } while (eax28);
                fun_1800a200(edi26);
                return 0;
            }
        }
        fun_1800a200(edi26);
        return 0;
    } else {
        return 5;
    }
}

void QSWaveMixStopProfile(void** ecx) {
    int32_t eax2;
    void** esi3;
    int16_t ax4;
    void** v5;
    int32_t edi6;

    eax2 = reinterpret_cast<int32_t>(IsBadReadPtr());
    if (!eax2) {
        ax4 = fun_180010c0(esi3);
        if (!*reinterpret_cast<signed char*>(&ax4)) {
            fun_1800a1e0(esi3);
            fun_1800a820(esi3, v5);
            fun_1800a200(esi3);
            goto edi6;
        } else {
            goto edi6;
        }
    } else {
        fun_18009260(ecx, 50, v5);
        goto edi6;
    }
}

int32_t DefWindowProcA = 0x35e16;

int16_t fun_18004ad0(void** a1, void** a2, void** a3, void** a4) {
    void** eax5;
    void** ecx6;
    void** eax7;
    void** esi8;
    void** eax9;
    void** esi10;
    void** esi11;
    void** v12;
    void** v13;
    void** v14;
    void** v15;
    void** v16;
    void** v17;
    void** v18;
    void** v19;
    void** v20;
    void** v21;

    eax5 = a2 - 1;
    if (!eax5) {
        return 0;
    } else {
        if (!(eax5 - 0x218)) {
            ecx6 = g18045878;
            if (!reinterpret_cast<int1_t>(a3 == 0x8004)) {
                if (reinterpret_cast<int1_t>(a3 == 0x8000) && (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a4 + 4) == 2) && (eax7 = *reinterpret_cast<void***>(a4 + 12), esi8 = g18045880, g18045880 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi8) | reinterpret_cast<unsigned char>(eax7)), !!ecx6))) {
                    fun_180249c0(ecx6, eax7);
                }
            } else {
                if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a4 + 4) == 2) && (eax9 = *reinterpret_cast<void***>(a4 + 12), esi10 = g18045880, g18045880 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi10) & ~reinterpret_cast<unsigned char>(eax9)), !!ecx6)) {
                    fun_1800a250(ecx6, eax9, esi11, __return_address(), a1, a2, a3, a4, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
                    return 0;
                }
            }
            return 0;
        } else {
            DefWindowProcA();
            goto a1;
        }
    }
}

int16_t fun_180249d0() {
    return 0;
}

int16_t fun_18004c30(void** ecx, void** a2, void** a3, void** a4) {
    void** eax5;
    uint32_t ebx6;
    uint32_t edi7;
    void** edx8;
    void** v9;
    void** ecx10;
    void** ecx11;
    void** v12;
    void** v13;
    void** edi14;
    void** esi15;
    void** ebx16;
    void** eax17;
    void** v18;
    void** ecx19;
    int16_t ax20;

    eax5 = reinterpret_cast<void**>(0x16000);
    if (!(reinterpret_cast<unsigned char>(a2) & 0x20000)) {
        if (!(reinterpret_cast<unsigned char>(a2) & 0x40000)) {
            if (!(reinterpret_cast<unsigned char>(a2) & 0x80000)) {
                return 0;
            } else {
                ebx6 = 0x80000;
            }
        } else {
            eax5 = reinterpret_cast<void**>(0x17000);
            ebx6 = 0x40000;
        }
    } else {
        eax5 = reinterpret_cast<void**>(0x16800);
        ebx6 = 0x20000;
    }
    if (!(reinterpret_cast<unsigned char>(a2) & 0x2000000)) {
        edi7 = 0x1000000;
    } else {
        *reinterpret_cast<unsigned char*>(&eax5 + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax5 + 1) | 0x80);
        edi7 = 0x2000000;
    }
    edx8 = a3;
    if (!edx8) {
        edx8 = ecx + 60;
    }
    v9 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 4) + 0x154);
    ecx10 = *reinterpret_cast<void***>(ecx + 52);
    ecx11 = *reinterpret_cast<void***>(ecx + 80);
    fun_18027110(ecx11, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 + 44, edx8, eax5, ecx11, ecx10, 0, 0, v9);
    if (!1 && (v12 = *reinterpret_cast<void***>(ecx + 4) + 0x118, fun_1801d290(a2, v12), v13 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 4) + 0x114), fun_18024940(a2, v13), eax17 = fun_1802b2bb(a2, 0x8c, edi14, esi15, ebx16, __return_address(), a2, a3, a4), !!eax17)) {
        v18 = *reinterpret_cast<void***>(ecx + 88);
        ecx19 = *reinterpret_cast<void***>(ecx + 4);
        ax20 = fun_180050b0(eax17, ecx19, ecx, edi7 | ebx6, a2, v18);
        return ax20;
    }
}

int16_t fun_18004d20(struct s241* ecx) {
    void** ecx2;
    void** eax3;
    void** ecx4;
    void* esp5;
    void** eax6;
    void** edx7;
    int32_t eax8;
    void** edx9;
    int32_t eax10;
    void** edi11;
    void** esi12;
    void** ebx13;
    void** ecx14;
    int32_t eax15;
    struct s244** eax16;
    struct s244* ecx17;
    int32_t eax18;
    void** ecx19;
    void** eax20;
    void** edx21;
    int32_t v22;

    ecx2 = ecx->f4;
    eax3 = fun_18009c30(ecx2);
    ecx->f52 = eax3;
    if (eax3) {
        ecx4 = *reinterpret_cast<void***>(eax3);
        *reinterpret_cast<void***>(ecx4 + 4)(eax3);
        esp5 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 24 - 4 - 4 - 4 - 4 + 4 - 4 - 4 + 4);
        eax6 = ecx->f52;
        edx7 = *reinterpret_cast<void***>(eax6);
        eax8 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(edx7 + 12)());
        if (eax8 >= 0) {
            edx9 = *reinterpret_cast<void***>(&g0);
            eax10 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(edx9 + 20)(0, reinterpret_cast<int32_t>(esp5) - 4 - 4 - 4 - 4 - 4 + 4 - 4 + 20, 18));
            if (eax10 >= 0) {
                fun_18027240(&ecx->f60, 1, 0x18038090, 16, 0, reinterpret_cast<int32_t>(esp5) - 4 - 4 - 4 - 4 - 4 + 4 - 4 + 20, 18, 0, eax6, 0x18038090, reinterpret_cast<int32_t>(esp5) + 12, 0, eax3, edi11, esi12, ebx13);
            }
            ecx14 = *reinterpret_cast<void***>(&g0);
            eax15 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(ecx14)());
            if (eax15 >= 0) {
                eax16 = ecx->f56;
                ecx17 = *eax16;
                eax18 = reinterpret_cast<int32_t>(ecx17->f40());
                if (eax18 >= 0) {
                    fun_18004ee0(ecx);
                    if (!1) {
                        ecx19 = *reinterpret_cast<void***>(&g0);
                        *reinterpret_cast<void***>(ecx19 + 8)(0);
                    }
                } else {
                    if (!1) {
                        eax20 = *reinterpret_cast<void***>(&g0);
                        *reinterpret_cast<void***>(eax20 + 8)(0);
                    }
                    goto 0;
                }
            } else {
                if (!1) {
                    edx21 = *reinterpret_cast<void***>(&g0);
                    *reinterpret_cast<void***>(edx21 + 8)(0);
                }
                goto reinterpret_cast<int32_t>(esp5) + 12;
            }
        } else {
            goto v22;
        }
    }
    return 0;
}

struct s483 {
    signed char[24] pad24;
    int32_t f24;
};

struct s484 {
    signed char[24] pad24;
    int32_t f24;
};

void fun_1801d2a0(struct s483* ecx, struct s484* a2) {
    int1_t zf3;
    int32_t v4;
    int32_t eax5;
    int32_t ecx6;
    int32_t ecx7;
    int32_t ecx8;
    int32_t ecx9;

    zf3 = a2->f24 == 0;
    v4 = a2->f24;
    if (!zf3) {
        eax5 = ecx->f24;
        if (eax5 != 0x3f800000) {
            if (ecx->f24 != 0xbf800000) {
                __asm__("fld dword [ecx+0x18]");
                __asm__("fcomp dword [0x1803422c]");
                __asm__("fnstsw ax");
                if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax5) + 1) & 64)) {
                    ecx6 = -(v4 << 2);
                    __asm__("fld dword [esi+0x14]");
                    __asm__("fld dword [esi+0x18]");
                    __asm__("fld dword [esi+0x1c]");
                    __asm__("fld dword [esi+0x20]");
                    __asm__("fld dword [esi+0x24]");
                    do {
                        __asm__("fmul st0, st2");
                        __asm__("fxch st0, st1");
                        __asm__("fmul st0, st3");
                        __asm__("fld dword [edi+ecx]");
                        __asm__("fxch st0, st1");
                        __asm__("fadd st0, st1");
                        __asm__("fmul st0, st5");
                        __asm__("fsubrp st2, st0");
                        __asm__("fxch st0, st1");
                        __asm__("fst dword [edi+ecx]");
                        ecx6 = ecx6 + 4;
                    } while (ecx6);
                    __asm__("fstp dword [esi+0x24]");
                    __asm__("fstp dword [esi+0x20]");
                    __asm__("fstp st0");
                    __asm__("fstp st0");
                    __asm__("fstp st0");
                } else {
                    ecx7 = -(v4 << 2);
                    __asm__("fld dword [esi+0x14]");
                    __asm__("fld dword [esi+0x1c]");
                    __asm__("fld dword [esi+0x24]");
                    do {
                        __asm__("fld dword [edi+ecx]");
                        __asm__("fmul st0, st3");
                        __asm__("fxch st0, st1");
                        __asm__("fmul st0, st2");
                        __asm__("fsubp st1, st0");
                        __asm__("fst dword [edi+ecx]");
                        ecx7 = ecx7 + 4;
                    } while (ecx7);
                    __asm__("fstp dword [esi+0x24]");
                    __asm__("fstp st0");
                    __asm__("fstp st0");
                    return;
                }
            } else {
                ecx8 = -(v4 << 2);
                __asm__("fld dword [esi+0x14]");
                __asm__("fld dword [esi+0x1c]");
                __asm__("fld dword [esi+0x20]");
                __asm__("fld dword [esi+0x24]");
                do {
                    __asm__("fmul st0, st2");
                    __asm__("fld dword [edi+ecx]");
                    __asm__("fxch st0, st2");
                    __asm__("fsubr st0, st2");
                    __asm__("fmul st0, st4");
                    __asm__("fsubrp st1, st0");
                    __asm__("fst dword [edi+ecx]");
                    ecx8 = ecx8 + 4;
                } while (ecx8);
                __asm__("fstp dword [esi+0x24]");
                __asm__("fstp dword [esi+0x20]");
                __asm__("fstp st0");
                __asm__("fstp st0");
                return;
            }
        } else {
            ecx9 = -(v4 << 2);
            __asm__("fld dword [esi+0x14]");
            __asm__("fld dword [esi+0x1c]");
            __asm__("fld dword [esi+0x20]");
            __asm__("fld dword [esi+0x24]");
            do {
                __asm__("fmul st0, st2");
                __asm__("fld dword [edi+ecx]");
                __asm__("fxch st0, st2");
                __asm__("fadd st0, st2");
                __asm__("fmul st0, st4");
                __asm__("fsubrp st1, st0");
                __asm__("fst dword [edi+ecx]");
                ecx9 = ecx9 + 4;
            } while (ecx9);
            __asm__("fstp dword [esi+0x24]");
            __asm__("fstp dword [esi+0x20]");
            __asm__("fstp st0");
            __asm__("fstp st0");
            return;
        }
    }
    return;
}

struct s486 {
    struct s486* f0;
    signed char[4] pad8;
    struct s39* f8;
};

struct s485 {
    signed char[16] pad16;
    struct s486* f16;
};

int32_t fun_18004e60(struct s485* ecx) {
    struct s486* esi2;
    int32_t v3;
    int32_t edi4;
    struct s486* edi5;
    struct s39* ecx6;

    esi2 = ecx->f16;
    v3 = edi4;
    edi5 = reinterpret_cast<struct s486*>(&ecx->f16);
    if (esi2 != edi5) {
        do {
            ecx6 = esi2->f8;
            fun_18005370(ecx6, v3);
            esi2 = esi2->f0;
        } while (esi2 != edi5);
    }
    return 0;
}

int16_t fun_18004bf0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18004c10(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_18005170(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18005190(ecx);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

void fun_1800ccc0(void** ecx, void** a2, void** a3, void** a4) {
    void** edi5;
    void** edx6;
    void** ecx7;
    void** esi8;
    void** eax9;
    void** esi10;
    void** eax11;
    void** ebx12;
    void** edi13;
    void** esi14;
    void** ebx15;
    void** ecx16;

    edi5 = ecx;
    *reinterpret_cast<void***>(edi5 + 12) = a2;
    *reinterpret_cast<void***>(edi5 + 16) = a3;
    if (!a2) {
        edx6 = *reinterpret_cast<void***>(edi5 + 4) + 12;
        ecx7 = *reinterpret_cast<void***>(edx6 + 4);
        esi8 = edx6 + 4;
        if (ecx7 != esi8) {
            do {
                if (*reinterpret_cast<void***>(ecx7 + 8) != edi5) {
                    ecx7 = *reinterpret_cast<void***>(ecx7);
                } else {
                    eax9 = ecx7;
                    ecx7 = *reinterpret_cast<void***>(ecx7);
                    *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax9 + 4)) = *reinterpret_cast<void***>(eax9);
                    *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax9) + 4) = *reinterpret_cast<void***>(eax9 + 4);
                    *reinterpret_cast<void***>(eax9) = *reinterpret_cast<void***>(edx6 + 16);
                    *reinterpret_cast<void***>(edx6 + 16) = eax9;
                    *reinterpret_cast<void***>(edx6) = *reinterpret_cast<void***>(edx6) - 1;
                }
            } while (ecx7 != esi8);
        }
    } else {
        esi10 = *reinterpret_cast<void***>(edi5 + 4) + 12;
        eax11 = *reinterpret_cast<void***>(esi10 + 16);
        ebx12 = esi10 + 4;
        if (!eax11) {
            eax11 = fun_1802b2bb(a3, 12, edi13, esi14, ebx15, __return_address(), a2, a3, a4);
        } else {
            *reinterpret_cast<void***>(esi10 + 16) = *reinterpret_cast<void***>(eax11);
        }
        if (eax11) {
            ecx16 = eax11 + 8;
            if (ecx16) {
                *reinterpret_cast<void***>(ecx16) = edi5;
            }
            *reinterpret_cast<void***>(eax11) = ebx12;
            *reinterpret_cast<void***>(eax11 + 4) = *reinterpret_cast<void***>(ebx12 + 4);
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx12 + 4)) = eax11;
            *reinterpret_cast<void***>(ebx12 + 4) = eax11;
            *reinterpret_cast<void***>(esi10) = *reinterpret_cast<void***>(esi10) + 1;
            return;
        }
    }
    return;
}

struct s488 {
    signed char[12] pad12;
    int32_t f12;
};

struct s489 {
    signed char[8] pad8;
    int32_t f8;
};

struct s490 {
    signed char[8] pad8;
    int32_t f8;
};

struct s487 {
    signed char[28] pad28;
    struct s488** f28;
    signed char[92] pad124;
    struct s489** f124;
    struct s490** f128;
};

int32_t fun_18005320(struct s487* ecx) {
    struct s489* ecx2;
    struct s489** v3;
    struct s490* edx4;
    struct s490** v5;
    struct s488* eax6;

    if (ecx->f124) {
        ecx2 = *ecx->f124;
        v3 = ecx->f124;
        ecx2->f8(v3);
        ecx->f124 = reinterpret_cast<struct s489**>(0);
    }
    if (ecx->f128) {
        edx4 = *ecx->f128;
        v5 = ecx->f128;
        edx4->f8(v5);
        ecx->f128 = reinterpret_cast<struct s490**>(0);
    }
    if (ecx->f28) {
        eax6 = *ecx->f28;
        eax6->f12();
    }
    return 0;
}

void fun_18005720(void** ecx, void** a2) {
    unsigned char al3;
    void** edi4;
    void** esi5;
    void** edx6;

    if (*reinterpret_cast<void***>(ecx + 28) && (a2 && (al3 = fun_180056d0(ecx, a2), !!al3))) {
        if (!*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 28) + 6)) {
            fun_180053c0(ecx, a2, edi4, esi5, __return_address(), a2);
            edx6 = *reinterpret_cast<void***>(ecx);
            *reinterpret_cast<void***>(edx6 + 4)(ecx);
        } else {
            *reinterpret_cast<void***>(ecx + 0x84) = reinterpret_cast<void**>(1);
            return;
        }
    }
    return;
}

void fun_18005870(void** ecx) {
    void** v2;
    void** eax3;
    void** ecx4;
    void** edx5;
    void** v6;
    void** ecx7;
    void** edx8;
    void** ecx9;
    struct s64* edx10;
    void** eax11;
    void** eax12;
    void** edx13;
    void** eax14;
    void** edi15;
    void** ecx16;
    void** ecx17;

    v2 = ecx;
    if (*reinterpret_cast<void***>(ecx + 0x7c)) {
        if (!*reinterpret_cast<void***>(ecx + 0x80) || (eax3 = *reinterpret_cast<void***>(ecx + 16), ecx4 = *reinterpret_cast<void***>(eax3 + 92), (*reinterpret_cast<unsigned char*>(&ecx4) & 1) == 0)) {
            eax3 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 16) + 0xbc);
            v2 = eax3;
        } else {
            if (*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 36) + 0xb8)) {
                v2 = *reinterpret_cast<void***>(eax3 + 76);
                if (!(*reinterpret_cast<unsigned char*>(&ecx4 + 1) & 16)) {
                    __asm__("fld dword [eax+0xa8]");
                    __asm__("fcomp dword [eax+0x44]");
                    __asm__("fnstsw ax");
                    if (!(*reinterpret_cast<unsigned char*>(&eax3 + 1) & 65) && !(*reinterpret_cast<unsigned char*>(&ecx4 + 1) & 8)) {
                        v2 = reinterpret_cast<void**>(0);
                    }
                } else {
                    edx5 = *reinterpret_cast<void***>(eax3 + 64);
                    eax3 = *reinterpret_cast<void***>(eax3 + 0xa8);
                    v6 = *reinterpret_cast<void***>(eax3 + 72);
                    fun_1800cfd0(eax3, edx5, v6);
                    __asm__("fcom dword [0x1803422c]");
                    __asm__("fnstsw ax");
                    if (!(*reinterpret_cast<unsigned char*>(&eax3 + 1) & 64)) {
                        __asm__("fld dword [ecx+0xb8]");
                        __asm__("fdiv st0, st1");
                        __asm__("fmul dword [esp+0x8]");
                        __asm__("fstp dword [esp+0x8]");
                    }
                    __asm__("fstp st0");
                }
            } else {
                __asm__("fld dword [eax+0xb8]");
                __asm__("fmul dword [eax+0x4c]");
                __asm__("fstp dword [esp+0x8]");
            }
        }
        *reinterpret_cast<int16_t*>(&eax3) = fun_1800cf60(v2);
        ecx7 = *reinterpret_cast<void***>(ecx + 0x7c);
        *reinterpret_cast<void***>(ecx + 0x68) = eax3;
        edx8 = *reinterpret_cast<void***>(ecx7);
        *reinterpret_cast<void***>(edx8 + 60)();
        ecx9 = *reinterpret_cast<void***>(ecx + 16);
        edx10 = reinterpret_cast<struct s64*>(ecx + 44);
        eax11 = ecx9 + 0xc4;
        edx10->f0 = *reinterpret_cast<void***>(ecx9 + 0xc4);
        edx10->f4 = *reinterpret_cast<void***>(eax11 + 4);
        eax12 = *reinterpret_cast<void***>(eax11 + 8);
        edx10->f8 = eax12;
        __asm__("fld dword [ecx+0xa8]");
        __asm__("fcomp dword [0x18034314]");
        __asm__("fnstsw ax");
        if (*reinterpret_cast<unsigned char*>(&eax12 + 1) & 1) {
            *reinterpret_cast<void***>(ecx + 52) = reinterpret_cast<void**>(0x3cd013a9);
        }
        if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 8)) & 0x2000000) || (!*reinterpret_cast<void***>(ecx + 0x80) || !(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx9 + 92)) & 1))) {
            if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx + 0x6c) == 1)) {
                edx13 = *reinterpret_cast<void***>(ecx + 0x7c);
                eax14 = *reinterpret_cast<void***>(ecx9 + 0xac);
                edi15 = *reinterpret_cast<void***>(edx13);
                *reinterpret_cast<int16_t*>(&eax14) = fun_18005770(ecx9, eax14);
                ecx16 = *reinterpret_cast<void***>(ecx + 0x7c);
                *reinterpret_cast<void***>(edi15 + 64)(ecx16, eax14);
            }
        } else {
            ecx17 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x80));
            *reinterpret_cast<void***>(ecx17 + 48)();
            goto ecx7;
        }
    }
    return;
}

struct s492 {
    signed char[24] pad24;
    int32_t f24;
};

struct s491 {
    signed char[28] pad28;
    struct s492* f28;
};

int32_t fun_180059f0(struct s491* ecx) {
    return ecx->f28->f24;
}

struct s493 {
    signed char[4] pad4;
    int32_t f4;
};

int16_t fun_18005a60(struct s493* a1) {
    int32_t eax2;
    int32_t** ecx3;
    int32_t* eax4;

    eax2 = a1->f4 - 1;
    a1->f4 = eax2;
    if (!eax2) {
        ecx3 = reinterpret_cast<int32_t**>(reinterpret_cast<int32_t>(a1) - 20);
        if (ecx3) {
            eax4 = *ecx3;
            *eax4(1);
        }
        eax2 = 0;
    }
    return *reinterpret_cast<int16_t*>(&eax2);
}

struct s494 {
    signed char[88] pad88;
    void** f88;
};

struct s495 {
    signed char[2] pad2;
    int16_t f2;
    signed char[10] pad14;
    int16_t f14;
};

struct s496 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

int16_t fun_18005a80(struct s494* a1, struct s495* a2) {
    void** ecx3;
    void** edx4;
    struct s77* eax5;
    void** edx6;
    void** esi7;
    void** edi8;
    struct s496* eax9;
    void** edx10;
    void** eax11;

    ecx3 = reinterpret_cast<void**>(0);
    edx4 = reinterpret_cast<void**>(0);
    *reinterpret_cast<int16_t*>(&ecx3) = a2->f14;
    *reinterpret_cast<int16_t*>(&edx4) = a2->f2;
    eax5 = reinterpret_cast<struct s77*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 16 - 4 - 4 - 4 - 4 + 16);
    *reinterpret_cast<void***>(&eax5) = fun_18017200(eax5, edx4, ecx3);
    edx6 = eax5->f4;
    esi7 = eax5->f8;
    edi8 = eax5->f12;
    eax9 = reinterpret_cast<struct s496*>(&a1->f88);
    eax9->f0 = eax5->f0;
    eax9->f4 = edx6;
    eax9->f8 = esi7;
    eax9->f12 = edi8;
    edx10 = g180458c8;
    if (eax9->f0 != edx10 || (eax11 = g180458cc, eax9->f4 != eax11)) {
        return 0;
    } else {
        return 100;
    }
}

struct s497 {
    signed char[644] pad644;
    int32_t f644;
    signed char[60] pad708;
    signed char f708;
    signed char[1] pad710;
    signed char f710;
    signed char[5] pad716;
    int32_t f716;
};

int16_t fun_18005af0(int32_t a1) {
    if (!(*reinterpret_cast<struct s497**>(a1 - 8))->f708 || (!(*reinterpret_cast<struct s497**>(a1 - 8))->f716 || ((*reinterpret_cast<struct s497**>(a1 - 8))->f710 || !(*reinterpret_cast<struct s497**>(a1 - 8))->f644))) {
        return 0;
    } else {
        return 1;
    }
}

struct s499 {
    signed char[5] pad5;
    signed char f5;
};

struct s498 {
    signed char[8] pad8;
    struct s499* f8;
    signed char[76] pad88;
    void** f88;
    signed char[23] pad112;
    signed char f112;
};

struct s500 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

struct s501 {
    signed char[108] pad108;
    int32_t f108;
};

struct s502 {
    signed char[116] pad116;
    struct s501** f116;
};

int16_t fun_18005b40(struct s498* a1, void*** a2, int32_t a3, int32_t* a4) {
    int32_t v5;
    struct s500* eax6;
    void** v7;
    void** ebx8;
    void** v9;
    void** ebp10;
    void** v11;
    void** esi12;
    void** ecx13;
    void*** esp14;
    void** v15;
    void** edi16;
    void** v17;
    void** v18;
    void** ebp19;
    void** ebx20;
    void** eax21;
    void** ecx22;
    void** v23;
    void** edx24;
    int32_t ecx25;
    struct s498* esi26;
    void** edi27;
    struct s48* ecx28;
    void** esp29;
    struct s49* eax30;
    void** esp31;
    void* eax32;
    void* eax33;
    void** ecx34;
    void*** v35;
    struct s501** ecx36;
    struct s502* v37;
    void** v38;
    int32_t* esp39;
    void** v40;
    void** esp41;
    struct s501* edx42;
    int32_t v43;
    struct s498* v44;
    void* eax45;
    void** ecx46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    struct s48* ecx56;
    signed char al57;
    struct s498* v58;

    v5 = reinterpret_cast<int32_t>(__return_address());
    if (!a1->f8 || !a1->f8->f5) {
        return 0;
    }
    eax6 = reinterpret_cast<struct s500*>(&a1->f88);
    v7 = ebx8;
    v9 = ebp10;
    v11 = esi12;
    ecx13 = eax6->f0;
    esp14 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0xa8 - 4 - 4 - 4 - 4);
    v15 = edi16;
    v17 = ecx13;
    v18 = eax6->f4;
    ebp19 = eax6->f8;
    ebx20 = eax6->f12;
    if (a3) {
        if (reinterpret_cast<signed char>(ebx20) < reinterpret_cast<signed char>(0)) {
            __asm__("cdq ");
            eax21 = reinterpret_cast<void**>(a3 / reinterpret_cast<signed char>(ebp19));
        } else {
            ecx22 = ebx20;
            eax21 = reinterpret_cast<void**>(a3 >> *reinterpret_cast<signed char*>(&ecx22));
        }
        v23 = eax21;
        edx24 = eax21;
    } else {
        edx24 = reinterpret_cast<void**>(0);
        v23 = reinterpret_cast<void**>(0);
    }
    ecx25 = 6;
    do {
        --ecx25;
    } while (ecx25);
    esi26 = a1;
    edi27 = reinterpret_cast<void**>(0);
    while (!esi26->f112) {
        ecx28 = *reinterpret_cast<struct s48**>(reinterpret_cast<int32_t>(esi26) - 8);
        esp29 = reinterpret_cast<void**>(esp14 - 4);
        eax30 = ecx28->f0;
        esp31 = esp29 - 1;
        eax32 = reinterpret_cast<void*>(eax30->f16(esp31 + 18, esp29 + 11, reinterpret_cast<unsigned char>(edx24) - reinterpret_cast<unsigned char>(edi27)));
        esp14 = reinterpret_cast<void***>(esp31 - 1 - 1 + 1);
        if (!eax32) 
            goto addr_0x18005c73_14;
        if (reinterpret_cast<signed char>(ebx20) < reinterpret_cast<signed char>(0)) {
            eax33 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ebp19) * reinterpret_cast<unsigned char>(edi27));
        } else {
            ecx34 = ebx20;
            eax33 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(edi27) << *reinterpret_cast<unsigned char*>(&ecx34));
        }
        v9 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(eax33) + reinterpret_cast<uint32_t>(v35));
        ecx36 = v37->f116;
        v23 = v38;
        esp39 = reinterpret_cast<int32_t*>(esp14 - 4 - 4 - 4);
        v7 = v40;
        esp41 = reinterpret_cast<void**>(esp39 - 1);
        edx42 = *ecx36;
        edx42->f108(esp41 + 9, esp39 + 19, v43, eax32);
        esp14 = reinterpret_cast<void***>(esp41 - 1 - 1 + 1);
        edi27 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi27) + reinterpret_cast<uint32_t>(eax32));
        esi26 = v44;
        edx24 = reinterpret_cast<void**>(0);
    }
    addr_0x18005c7e_19:
    if (reinterpret_cast<signed char>(edi27) < reinterpret_cast<signed char>(edx24)) {
        if (reinterpret_cast<signed char>(ebx20) < reinterpret_cast<signed char>(0)) {
            eax45 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ebp19) * reinterpret_cast<unsigned char>(edi27));
        } else {
            ecx46 = ebx20;
            eax45 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(edi27) << *reinterpret_cast<unsigned char*>(&ecx46));
        }
        fun_18017250(esp14 - 4 + 24, reinterpret_cast<unsigned char>(edx24) - reinterpret_cast<unsigned char>(edi27), v15, v11, v9, v7, v23, reinterpret_cast<uint32_t>(eax45) + reinterpret_cast<uint32_t>(a2), v17, v18, ebp19, ebx20, v47, v48, v17, v18, v49, v50, 0, v51, v52, v53, v54, 0, v55);
    }
    if (a4) {
        if (edi27 || (esi26->f112 || (ecx56 = *reinterpret_cast<struct s48**>(reinterpret_cast<int32_t>(esi26) - 8), al57 = fun_180089b0(ecx56), !!al57))) {
            *a4 = 0;
        } else {
            *a4 = 1;
            goto v5;
        }
    }
    goto v5;
    addr_0x18005c73_14:
    esi26 = v58;
    edx24 = v11;
    goto addr_0x18005c7e_19;
}

struct s503 {
    signed char[12] pad12;
    struct s286* f12;
    signed char[96] pad112;
    signed char f112;
};

struct s505 {
    signed char[8] pad8;
    int32_t f8;
};

struct s504 {
    signed char[716] pad716;
    int32_t f716;
    struct s505* f720;
};

int16_t fun_18005d80(struct s503* a1) {
    struct s286* ecx2;
    int32_t eax3;
    struct s40* edx4;
    struct s39* esi5;

    ecx2 = a1->f12;
    fun_18004e40(ecx2);
    if (a1->f112) {
        a1->f112 = 0;
        if (!(*reinterpret_cast<struct s504**>(reinterpret_cast<int32_t>(a1) - 8))->f716) {
            eax3 = 0;
        } else {
            eax3 = (*reinterpret_cast<struct s504**>(reinterpret_cast<int32_t>(a1) - 8))->f720->f8;
        }
        edx4 = *reinterpret_cast<struct s40**>(reinterpret_cast<int32_t>(a1) - 20);
        esi5 = reinterpret_cast<struct s39*>(reinterpret_cast<int32_t>(a1) - 20);
        edx4->f20(esi5, eax3);
        fun_18005370(esi5, eax3);
    }
    return 0;
}

int16_t fun_180062f0(struct s288* ecx, uint32_t a2, struct s291* a3) {
    signed char al4;
    uint32_t eax5;
    uint32_t eax6;

    al4 = fun_18006230(ecx, a2, a3);
    if (!al4 || ecx->f710) {
        return 0;
    } else {
        eax5 = reinterpret_cast<uint32_t>(-ecx->f716);
        eax6 = eax5 - (eax5 + reinterpret_cast<uint1_t>(eax5 < eax5 + reinterpret_cast<uint1_t>(!!ecx->f716))) + 2;
        return *reinterpret_cast<int16_t*>(&eax6);
    }
}

int16_t fun_18006330(struct s288* ecx, uint32_t a2, struct s291* a3) {
    signed char al4;

    al4 = fun_18006230(ecx, a2, a3);
    if (!al4 || (!ecx->f716 || ecx->f710)) {
        return 0;
    } else {
        return 1;
    }
}

int16_t fun_18006370(struct s288* ecx, uint32_t a2, struct s291* a3) {
    signed char al4;

    al4 = fun_18006230(ecx, a2, a3);
    if (!al4 || (!ecx->f716 || !ecx->f710)) {
        return 0;
    } else {
        return 1;
    }
}

struct s506 {
    signed char[4] pad4;
    void** f4;
};

void fun_180064f0(struct s506* ecx, void** a2) {
    void** edi3;
    void** eax4;

    fun_18008880(a2, edi3);
    __asm__("fld dword [eax+0xbc]");
    eax4 = ecx->f4;
    if (!eax4 || *reinterpret_cast<unsigned char*>(&eax4 + 1) & 1) {
        __asm__("fstp dword [esi+0xc]");
        ecx->f4 = a2;
        return;
    } else {
        __asm__("fstp st0");
        return;
    }
}

uint32_t fun_18006a30(void** a1, void** a2, void** a3) {
    void** ebx4;
    void** edi5;
    void* eax6;
    void** edi7;
    void** esi8;
    void** ebx9;
    void** eax10;
    void** eax11;
    void** eax12;
    uint32_t eax13;
    uint32_t eax14;
    uint32_t eax15;
    int32_t edx16;

    ebx4 = *reinterpret_cast<void***>(a2);
    edi5 = *reinterpret_cast<void***>(a1);
    eax6 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(edi5 + 0x1fc)) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx4 + 0x1fc)));
    if (!eax6) {
        eax10 = fun_18008970(edi5, edi7, esi8, ebx9, __return_address(), a1, a2, a3);
        eax11 = fun_18008970(ebx4, edi7, esi8, ebx9, __return_address(), a1, a2, a3);
        if (eax10 != eax11) {
            if (eax10 == 0xffffffff || eax11 == 0xffffffff) {
                eax12 = eax10 + 1;
                eax13 = reinterpret_cast<uint32_t>(-reinterpret_cast<unsigned char>(eax12));
                eax14 = eax13 - (eax13 + reinterpret_cast<uint1_t>(eax13 < eax13 + reinterpret_cast<uint1_t>(!!eax12)));
                *reinterpret_cast<unsigned char*>(&eax14) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax14) & 0xfe);
                return eax14 + 1;
            } else {
                eax15 = -static_cast<uint32_t>(reinterpret_cast<uint1_t>(0 < static_cast<uint32_t>(reinterpret_cast<uint1_t>(0 < reinterpret_cast<unsigned char>(eax10) - reinterpret_cast<unsigned char>(eax11)))));
                *reinterpret_cast<unsigned char*>(&eax15) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax15) & 0xfe);
                return eax15 + 1;
            }
        } else {
            return reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(edi5) - reinterpret_cast<unsigned char>(ebx4)) >> 10;
        }
    } else {
        edx16 = 0;
        *reinterpret_cast<unsigned char*>(&edx16) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(eax6) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(eax6 == 0)));
        return (reinterpret_cast<uint32_t>(edx16 - 1) & 0xfffffffe) + 1;
    }
}

uint32_t fun_18006ab0(void*** a1, void*** a2) {
    void** esi3;
    void** edi4;
    void* eax5;
    void** edi6;
    struct s12* eax7;
    int32_t edx8;

    esi3 = *a1;
    edi4 = *a2;
    eax5 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi3 + 0x1fc)) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(edi4 + 0x1fc)));
    if (!eax5) {
        fun_18008880(esi3, edi6);
        eax7 = fun_18008880(edi4, edi6);
        __asm__("fld dword [eax+0xbc]");
        __asm__("fld dword [esp+0xc]");
        __asm__("fcomp st0, st1");
        __asm__("fnstsw ax");
        if (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax7) + 1) & 65) {
            __asm__("fld dword [esp+0xc]");
            __asm__("fcomp st0, st1");
            __asm__("fnstsw ax");
            __asm__("fstp st0");
            if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax7) + 1) & 1)) {
                return reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(esi3) - reinterpret_cast<unsigned char>(edi4)) >> 10;
            } else {
                return 1;
            }
        } else {
            __asm__("fstp st0");
            return 0xffffffff;
        }
    } else {
        edx8 = 0;
        *reinterpret_cast<unsigned char*>(&edx8) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(eax5) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(eax5 == 0)));
        return (reinterpret_cast<uint32_t>(edx8 - 1) & 0xfffffffe) + 1;
    }
}

uint32_t fun_18006b40(struct s34** a1, struct s35** a2) {
    int32_t eax3;
    int32_t ecx4;

    eax3 = (*a1)->f508 - (*a2)->f508;
    if (!eax3) {
        __asm__("fld dword [ecx+0x2c0]");
        __asm__("fld dword [edx+0x2c0]");
        __asm__("fld st1");
        __asm__("fcomp st0, st1");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax3) + 1) & 1)) {
            __asm__("fxch st0, st1");
            __asm__("fcomp st0, st1");
            __asm__("fnstsw ax");
            __asm__("fstp st0");
            if (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax3) + 1) & 65) {
                return reinterpret_cast<int32_t>(*a1) - reinterpret_cast<int32_t>(*a2) >> 10;
            } else {
                return 1;
            }
        } else {
            __asm__("fstp st0");
            __asm__("fstp st0");
            return 0xffffffff;
        }
    } else {
        ecx4 = 0;
        *reinterpret_cast<unsigned char*>(&ecx4) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(eax3 < 0) | reinterpret_cast<uint1_t>(eax3 == 0)));
        return (reinterpret_cast<uint32_t>(ecx4 - 1) & 0xfffffffe) + 1;
    }
}

uint32_t fun_18006bb0(struct s36** a1, struct s37** a2) {
    uint32_t ecx3;
    signed char cl4;
    signed char dl5;
    int32_t eax6;
    int32_t eax7;

    ecx3 = (*a1)->f508 - (*a2)->f508;
    if (!ecx3) {
        if (!(*a1)->f708 || ((ecx3 = (*a1)->f716, ecx3 == 0) || ((*a1)->f710 || (ecx3 = (*a1)->f644, ecx3 == 0)))) {
            cl4 = 0;
        } else {
            cl4 = 1;
        }
        if (!(*a2)->f708 || (!(*a2)->f716 || ((*a2)->f710 || !(*a2)->f644))) {
            dl5 = 0;
        } else {
            dl5 = 1;
        }
        if (cl4 == dl5) {
            return reinterpret_cast<int32_t>(*a1) - reinterpret_cast<int32_t>(*a2) >> 10;
        } else {
            *reinterpret_cast<signed char*>(&ecx3) = -cl4;
            return (ecx3 - (ecx3 + reinterpret_cast<uint1_t>(ecx3 < ecx3 + reinterpret_cast<uint1_t>(!!cl4))) & 0xfffffffe) + 1;
        }
    } else {
        eax6 = 0;
        *reinterpret_cast<unsigned char*>(&eax6) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<int32_t>(ecx3) < reinterpret_cast<int32_t>(0)) | reinterpret_cast<uint1_t>(ecx3 == 0)));
        eax7 = eax6 - 1;
        *reinterpret_cast<unsigned char*>(&eax7) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax7) & 0xfe);
        return eax7 + 1;
    }
}

struct s507 {
    signed char[524] pad524;
    int32_t f524;
};

int32_t GetPrivateProfileIntA = 0x35ef4;

int16_t fun_18006d30(struct s507* ecx, int32_t a2, int32_t a3, int32_t a4) {
    int32_t eax5;

    if (!ecx->f524) {
        eax5 = a4;
        return *reinterpret_cast<int16_t*>(&eax5);
    } else {
        GetPrivateProfileIntA();
        goto a2;
    }
}

struct s508 {
    signed char[524] pad524;
    int32_t f524;
};

int32_t GetPrivateProfileStringA = 0x35f0c;

int16_t fun_18006d60(struct s508* ecx, int32_t a2, int32_t a3, void** a4, void** a5, void* a6) {
    void** edi7;
    void** edi8;
    uint32_t ecx9;
    int32_t eax10;

    if (ecx->f524) {
        GetPrivateProfileStringA();
        goto a2;
    } else {
        edi7 = a5;
        fun_1802b530(a4, edi7, a4, reinterpret_cast<uint32_t>(a6) - 1, edi8);
        ecx9 = 0xffffffff;
        *reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(edi7) + reinterpret_cast<uint32_t>(a6) - 1) = 0;
        do {
            if (!ecx9) 
                break;
            --ecx9;
            ++edi7;
        } while (*reinterpret_cast<void***>(edi7));
        eax10 = reinterpret_cast<int32_t>(~ecx9) - 1;
        return *reinterpret_cast<int16_t*>(&eax10);
    }
}

int16_t fun_18006fb0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18006fd0(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s510 {
    signed char[32] pad32;
    int32_t f32;
};

struct s509 {
    struct s510* f0;
    int32_t f4;
};

int16_t fun_18027600(struct s509* a1) {
    int32_t eax2;
    struct s510* eax3;

    eax2 = a1->f4 - 1;
    a1->f4 = eax2;
    if (reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(eax2 < 0) | reinterpret_cast<uint1_t>(eax2 == 0))) {
        if (a1) {
            eax3 = a1->f0;
            eax3->f32(1);
        }
        eax2 = 0;
    }
    return *reinterpret_cast<int16_t*>(&eax2);
}

void fun_18008811(int32_t ecx) {
}

void fun_18008d00(void** ecx) {
    void** v2;
    void** v3;
    void** ebx4;
    void** v5;
    void** ebp6;
    void** v7;
    void** esi8;
    void** esi9;
    void*** esp10;
    void** v11;
    void** edi12;
    int32_t ecx13;
    void** edi14;
    void** edx15;
    void*** esp16;
    void** v17;
    void*** esp18;
    void** eax19;
    void* esp20;
    unsigned char al21;
    void** v22;
    void** v23;
    void** v24;
    void** v25;
    void** v26;
    void** v27;
    void** v28;
    void** v29;
    void** v30;
    void** v31;
    void** v32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    signed char al44;
    void* esp45;
    void** ebp46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** esp64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** v74;
    void** v75;
    void** v76;
    void** v77;
    void** v78;
    void** v79;
    void** v80;
    void** v81;
    void** v82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void* esp92;
    void** v93;
    void** v94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    signed char v100;
    int32_t v101;
    int32_t v102;
    int32_t v103;
    int32_t v104;
    int32_t v105;
    int32_t v106;
    int32_t v107;
    signed char v108;
    void* esp109;
    void** ecx110;
    void** v111;
    void** v112;
    void** v113;
    void** v114;
    void** v115;
    void** v116;
    void** v117;
    void** v118;
    void** v119;
    void** v120;
    void** v121;
    void** v122;
    void** v123;
    void** v124;
    void** v125;
    void** v126;
    void** v127;
    void** v128;
    void** v129;
    void** v130;
    void** v131;
    void** v132;
    void** v133;
    void** v134;
    void** v135;
    void** v136;
    void** v137;
    void** v138;
    void** v139;
    void** v140;
    void** v141;
    void** v142;
    void** v143;
    void* esp144;
    void** v145;
    void** v146;
    void** v147;
    void** v148;
    void** v149;
    void** v150;
    void** v151;
    void** v152;
    void** v153;
    void** v154;
    void** v155;
    void** v156;
    void** v157;
    void** v158;
    void** v159;
    void** v160;
    void** v161;
    void** v162;
    void** v163;
    void** v164;
    void** v165;
    signed char al166;
    void** ecx167;
    void** v168;
    void** v169;
    void** v170;
    void** v171;
    void** v172;
    void** v173;
    void** v174;
    void** v175;
    void** v176;
    void** v177;
    void** v178;
    void** v179;
    void** v180;
    void** v181;
    void** v182;
    void** v183;
    void** v184;
    void** v185;
    void** v186;
    void** v187;
    void** v188;
    signed char al189;
    void* esp190;
    void** v191;
    void** v192;
    void** v193;
    void** v194;
    void** v195;
    void** v196;
    void** v197;
    signed char v198;
    int32_t v199;
    int32_t v200;
    int32_t v201;
    int32_t v202;
    int32_t v203;
    int32_t v204;
    int32_t v205;
    signed char v206;
    void* esp207;
    void** v208;
    void** v209;
    void** v210;
    void** v211;
    void** v212;
    void** v213;
    void** v214;
    void** v215;
    void** v216;
    void** v217;
    void** v218;
    void** v219;
    void** v220;
    void** v221;
    void** v222;
    void** v223;
    void** v224;
    void** v225;
    void** v226;
    void** v227;
    void** v228;
    signed char al229;
    void** eax230;
    void** edx231;
    void** eax232;
    void* esp233;
    void** eax234;
    void** edx235;
    void** ecx236;
    void** v237;
    void** v238;
    void** v239;
    void** v240;
    void** v241;
    void** v242;
    void** v243;
    void** v244;
    void** v245;
    void** v246;
    void** edx247;
    void** ecx248;
    void** v249;
    void** v250;
    void** v251;
    void** v252;
    void** v253;
    void** v254;
    void** v255;
    void** v256;
    void** v257;
    void** v258;
    void** v259;
    void** v260;
    void** v261;
    void** v262;
    void** v263;
    void** v264;
    void** v265;
    void** v266;
    void** v267;
    void** v268;
    void** v269;
    void** v270;
    void** v271;
    void** v272;
    void** v273;
    void** v274;
    void** v275;
    void** v276;
    void** v277;
    void** v278;
    void** v279;
    void** v280;
    void** v281;
    void** v282;
    void** v283;
    void** v284;
    void** v285;
    void** v286;
    void** v287;
    void** v288;
    void** v289;
    void** v290;
    void** v291;
    void** v292;
    void** v293;
    void** v294;
    void** v295;
    void** v296;
    void** v297;
    void** v298;
    void** v299;
    void** v300;
    void** v301;
    void** v302;
    void* esp303;
    void** eax304;
    void** edx305;
    signed char al306;
    void* esp307;
    void** ecx308;
    void** v309;
    void** v310;
    void** v311;
    void** v312;
    void** v313;
    void** v314;
    void** v315;
    void** v316;
    void** v317;
    void** v318;
    void** v319;
    void** v320;
    void** v321;
    void** v322;
    void** v323;
    void** v324;
    void** v325;
    void** v326;
    void** v327;
    void** v328;
    void** v329;
    void** v330;
    void** v331;
    void** v332;
    void** v333;
    void** v334;
    void** v335;
    void** v336;
    void** v337;
    void** v338;
    void** v339;
    void** v340;
    void** eax341;
    void** v342;
    void** v343;
    void** v344;
    void** v345;
    void** v346;
    void** v347;
    void** v348;
    void** v349;
    void** v350;
    void** v351;
    void** v352;
    void** v353;
    void** v354;
    void** v355;
    void** v356;
    void** v357;
    void** v358;
    void** v359;
    void** v360;
    void** v361;
    void** v362;
    void** v363;
    void** v364;
    void** v365;
    void** v366;
    void** v367;
    void** v368;
    void** v369;
    void** v370;
    void** v371;
    void** v372;
    void** v373;
    void** v374;
    void** v375;
    void** v376;
    void** v377;
    void** v378;
    void** v379;
    void** v380;
    void** v381;
    void** v382;
    void** v383;
    void** v384;
    void** v385;
    void** v386;
    void** v387;
    void** v388;
    void** v389;
    void** v390;
    int32_t v391;

    v2 = reinterpret_cast<void**>(__return_address());
    v3 = ebx4;
    v5 = ebp6;
    v7 = esi8;
    esi9 = ecx;
    esp10 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0xd4 - 4 - 4 - 4 - 4);
    v11 = edi12;
    ecx13 = 6;
    do {
        --ecx13;
    } while (ecx13);
    while (*reinterpret_cast<void***>(esi9 + 0x2c4) && (*reinterpret_cast<void***>(esi9 + 0x2cc) && (!*reinterpret_cast<void***>(esi9 + 0x2c6) && *reinterpret_cast<void***>(esi9 + 0x284)))) {
        if (!*reinterpret_cast<void***>(esi9 + 0x3fc)) {
            addr_0x18008dc7_6:
            if (!*reinterpret_cast<void***>(esi9 + 0x2cc)) {
                edi14 = reinterpret_cast<void**>(0);
            } else {
                edi14 = (*reinterpret_cast<struct s11**>(esi9 + 0x2d0))->f8;
            }
        } else {
            edx15 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi9 + 0x3fc));
            esp16 = esp10 - 4;
            v17 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi9 + 0x198) + 0x144);
            esp18 = esp16 - 4;
            eax19 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx15 + 16)(esp18 + 0x74, esp16 + 20, v17));
            esp20 = reinterpret_cast<void*>(esp18 - 4 - 4 + 4);
            if (eax19) 
                goto addr_0x18008f65_10;
            if (!*reinterpret_cast<void***>(esi9 + 0x2cc)) 
                goto addr_0x18008dbc_12; else 
                goto addr_0x18008db1_13;
        }
        if (!edi14) 
            break;
        al21 = fun_1800c3e0(edi14);
        esp10 = esp10 - 4 + 4;
        if (!al21) 
            break;
        v22 = reinterpret_cast<void**>(0);
        al44 = fun_1800c0c0(edi14, esp10 + 20, v11, v7, v5, v3, 0, 0, v23, v24, v25, v26, v27, v28, v29, v30, v31, v22, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, 0, v43);
        esp45 = reinterpret_cast<void*>(esp10 - 4 - 4 + 4 + 4);
        if (al44) {
            ebp46 = esi9 + 0x358;
            do {
                fun_180085a0(esi9, reinterpret_cast<uint32_t>(esp45) + 64, 0, v11, v7, v5, v3, 0, 0, v47, v48, v49, v50, v51, v52, v53, v54, v55, v22, v56, v57, v58, v59, v60, v61, v62, v63);
                esp64 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp45) - 4 - 4 - 4 + 8 + 4 - 44);
                fun_1800c650(esp64, esp64 + 0x6c);
                fun_18009070(ebp46, v65, v66, v67, v68, v69, 0x18008dc7, v70, v71, 0x18008e22, reinterpret_cast<uint32_t>(esp45) + 64, 0, v11, v7, v5, v3, 0, 0, v72, v73, v74, v75, v76, v77, v78, v79, v80, v22, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, 0);
                esp92 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp64 - 4) - 4 + 4 + 4 - 4 + 44 + 4);
                fun_18007a20(esi9, reinterpret_cast<uint32_t>(esp92) + 20, v11, v7, v5, v3, 0, 0, v93, v94, v95, v96, v97, v98, v99, v100, esi9, reinterpret_cast<uint32_t>(esp92) + 20, v11, v7, v5, v3, 0, 0, v101, v102, v103, v104, v105, v106, v107, v108);
                esp109 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp92) - 4 - 4 + 4 + 4);
                ecx110 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp109) + 64);
                fun_1800c670(ecx110, v11, v7, v5, v3, 0, 0, v111, v112, v113, v114, v115, v116, v117, v118, v119, v22, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, 0, v131, v132, v133, v134, 0, v135, v136, v137, v138, 0, v139, v140, v141, v142, 0, v143, ecx110);
                esp144 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp109) - 4 + 4);
                al166 = fun_1800c0c0(edi14, reinterpret_cast<uint32_t>(esp144) + 20, v11, v7, v5, v3, 0, 0, v145, v146, v147, v148, v149, v150, v151, v152, v153, v22, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, v164, 0, v165);
                esp45 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp144) - 4 - 4 + 4 + 4);
            } while (al166);
        }
        ecx167 = edi14;
        al189 = fun_1800c150(ecx167, reinterpret_cast<uint32_t>(esp45) + 20, v11, v7, v5, v3, 0, 0, v168, v169, v170, v171, v172, v173, v174, v175, v176, v22, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, 0, v188);
        esp190 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp45) - 4 - 4 + 4 + 4);
        if (al189) {
            do {
                fun_18007a20(esi9, reinterpret_cast<uint32_t>(esp190) + 20, v11, v7, v5, v3, 0, 0, v191, v192, v193, v194, v195, v196, v197, v198, esi9, reinterpret_cast<uint32_t>(esp190) + 20, v11, v7, v5, v3, 0, 0, v199, v200, v201, v202, v203, v204, v205, v206);
                esp207 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp190) - 4 - 4 + 4 + 4);
                ecx167 = edi14;
                al229 = fun_1800c150(ecx167, reinterpret_cast<uint32_t>(esp207) + 20, v11, v7, v5, v3, 0, 0, v208, v209, v210, v211, v212, v213, v214, v215, v216, v22, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, 0, v228);
                esp190 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp207) - 4 - 4 + 4 + 4);
            } while (al229);
        }
        eax230 = reinterpret_cast<void**>(timeGetTime(ecx167));
        *reinterpret_cast<void***>(esi9 + 0x394) = eax230;
        *reinterpret_cast<void***>(esi9 + 0x3e4) = edi14;
        edx231 = *reinterpret_cast<void***>(edi14);
        *reinterpret_cast<void***>(edx231 + 4)(ecx167);
        eax232 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi9 + 0x3e4));
        *reinterpret_cast<void***>(eax232 + 12)();
        esp233 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp190) - 4 + 4 - 4 - 4 + 4 - 4 + 4);
        eax234 = *reinterpret_cast<void***>(esi9 + 0x3e4);
        if (*reinterpret_cast<void***>(eax234 + 10) != 1) {
            if (!*reinterpret_cast<void***>(esi9 + 0x1ac) || !reinterpret_cast<int1_t>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(esi9 + 0x1ac) + 2) == 1)) {
                edx235 = *reinterpret_cast<void***>(esi9 + 0x1a0);
                ecx236 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi9 + 0x198) + 0x144);
                v71 = edx235;
                v70 = reinterpret_cast<void**>(0x18008f09);
                *reinterpret_cast<int16_t*>(&eax234) = fun_18027fb0(ecx236, v71, eax234, ecx236, edi14, v11, v7, v5, v3, 0, 0, v237, v238, v239, v240, v241, v242, v243, v244, v245, v22, v246);
                esp233 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp233) - 4 - 4 - 4 - 4 + 12 + 4);
                *reinterpret_cast<void***>(esi9 + 0x3e8) = eax234;
            } else {
                edx247 = *reinterpret_cast<void***>(esi9 + 0x1a0);
                ecx248 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi9 + 0x198) + 0x144);
                v71 = edx247;
                v70 = reinterpret_cast<void**>(0x18008ee7);
                *reinterpret_cast<int16_t*>(&eax234) = fun_18027e60(ecx248, v71, eax234, ecx248, edi14, v11, v7, v5, v3, 0, 0, v249, v250, v251, v252, v253, v254, v255, v256, v257, v22, v258);
                esp233 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp233) - 4 - 4 - 4 - 4 + 12 + 4);
                *reinterpret_cast<void***>(esi9 + 0x3ec) = eax234;
            }
        }
        *reinterpret_cast<void***>(esi9 + 0x3fc) = eax234;
        fun_180089e0(esi9, edi14, v11, v7, v5, v3, 0, 0, v259, v260, v261, v262, v263, v264, v265, v266, v267, v22, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, 0, v279, v280, v281, v282, 0, v283, v284, v285, v286, 0, v287, v288, v289, v290, 0, v291, v292, v293, v294, 0, v295, v296, v297, v298, 0, v299, v300, v301, v302, v2);
        esp303 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp233) - 4 + 4);
        if (!*reinterpret_cast<void***>(esi9 + 0x284)) 
            goto addr_0x18008f3b_26;
        eax304 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi9 + 0x284));
        *reinterpret_cast<void***>(eax304 + 20)();
        edx305 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi9 + 0x284));
        al306 = reinterpret_cast<signed char>(*reinterpret_cast<void***>(edx305 + 36)());
        esp303 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp303) - 4 - 4 + 4 - 4 + 4);
        if (al306) 
            goto addr_0x18008f51_28;
        addr_0x18008f3b_26:
        fun_18008fc0(esi9, 1);
        esp307 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp303) - 4 - 4 + 4 + 4);
        ecx308 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp307) + 20);
        fun_1800c670(ecx308, edi14, v11, v7, v5, v3, 0, 0, v309, v310, v311, v312, v313, v314, v315, v316, v317, v22, v318, v319, v320, v321, v322, v323, v324, v325, v326, v327, v328, 0, v329, v330, v331, v332, 0, v333, v334, v335, v336, 0, v337, v338, v339, v340, 0, ecx308);
        esp10 = reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esp307) - 4 + 4);
        continue;
        addr_0x18008dbc_12:
        eax341 = reinterpret_cast<void**>(0);
        addr_0x18008dbe_29:
        v71 = reinterpret_cast<void**>(0);
        v70 = eax341;
        fun_18007730(esi9, v70, 0, esp18 + 0x74, esp16 + 20, v17, v11, v7, v5, v3, 0, 0, v342, v343, v344, v345, v346, v347, v348, v349, v350, v22, v351, v352, v353, v354, v355, v356, v357, v358);
        esp10 = reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esp20) - 4 - 4 - 4 + 8 + 4);
        goto addr_0x18008dc7_6;
        addr_0x18008db1_13:
        eax341 = (*reinterpret_cast<struct s11**>(esi9 + 0x2d0))->f8;
        goto addr_0x18008dbe_29;
    }
    addr_0x18008f86_30:
    goto v2;
    addr_0x18008f51_28:
    fun_1800c670(reinterpret_cast<uint32_t>(esp303) + 20, edi14, edi14, v11, v7, v5, v3, 0, 0, v359, v360, v361, v362, v363, v364, v365, v366, v367, v22, v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, 0, v379, v380, v381, v382, 0, v383, v384, v385, v386, 0, v387, v388, v389, v390);
    goto v391;
    addr_0x18008f65_10:
    if (*reinterpret_cast<void***>(esi9 + 0x2c7)) {
        fun_18008420(esi9, esp18 + 0x74, esp16 + 20, v17);
        esp20 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(esp20) - 4 + 4);
    }
    fun_18027820(esi9, reinterpret_cast<uint32_t>(esp20) - 4 + 0x70, v7, eax19, esp18 + 0x74, esp16 + 20, v17, v11);
    goto addr_0x18008f86_30;
}

void fun_1800d550(int32_t a1) {
    goto 0x1800d740;
}

struct s511 {
    signed char[24] pad24;
    int32_t f24;
};

struct s512 {
    signed char[8] pad8;
    int32_t f8;
    signed char[4] pad16;
    int32_t f16;
};

struct s513 {
    signed char[8] pad8;
    int32_t f8;
};

void fun_18029df0(struct s61* a1) {
    int32_t* v2;
    int32_t* ebx3;
    struct s511** v4;
    struct s511** esi5;
    struct s512** esi6;
    struct s512** v7;
    int32_t* esp8;
    int32_t v9;
    int32_t edi10;
    struct s513** edi11;
    struct s513** v12;
    struct s61* ebp13;
    int32_t eax14;
    struct s61* v15;
    void* esp16;
    struct s62* eax17;
    int32_t ecx18;
    signed char bl19;
    struct s62* edx20;
    struct s513** v21;
    struct s512** v22;
    struct s512* edx23;
    void* esp24;
    struct s511* edx25;
    signed char* v26;
    struct s512* ecx27;
    struct s513* edx28;
    int32_t v29;

    v2 = ebx3;
    v4 = esi5;
    esi6 = v7;
    esp8 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 24 - 4 - 4 - 4 - 4);
    v9 = edi10;
    edi11 = v12;
    ebp13 = a1;
    while (1) {
        if (!ebp13->f36) {
            eax14 = ebp13->f28;
            WaitForSingleObject(eax14, 0xff);
            esp8 = esp8 - 1 - 1 - 1 + 1;
        }
        if (ebp13->f32) 
            break;
        v15 = ebp13;
        EnterCriticalSection(v15);
        esp16 = reinterpret_cast<void*>(esp8 - 1 - 1 + 1);
        if (ebp13->f36) {
            eax17 = ebp13->f40;
            ecx18 = 5;
            bl19 = 0;
            edx20 = eax17->f0;
            while (ecx18) {
                --ecx18;
            }
            edi11 = v21;
            esi6 = v22;
            *eax17->f4 = edx20;
            eax17->f0->f4 = eax17->f4;
            eax17->f0 = ebp13->f68;
            ebp13->f68 = eax17;
            ebp13->f36 = ebp13->f36 - 1;
        } else {
            bl19 = 1;
        }
        LeaveCriticalSection(ebp13, v15);
        esp8 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esp16) - 4 - 4 + 4);
        if (bl19) 
            continue;
        edx23 = *esi6;
        edx23->f16(esi6, esp8 + 4, ebp13, v15);
        esp24 = reinterpret_cast<void*>(esp8 - 1 - 1 + 1);
        if (v4) {
            edx25 = *v4;
            edx25->f24(v2, esp8 + 4, ebp13, v15);
            esp24 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp24) - 4 - 4 + 4);
            *v2 = v9;
        }
        *v26 = 1;
        ecx27 = *esi6;
        ecx27->f8(esi6, esp8 + 4, ebp13, v15);
        edx28 = *edi11;
        edx28->f8(edi11, esi6, esp8 + 4, ebp13, v15);
        esp8 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esp24) - 4 - 4 + 4 - 4 - 4 + 4);
    }
    SetEvent();
    goto v29;
}

int16_t fun_1800b830(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_1800b850(ecx);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int32_t g18038568 = 4;

int16_t fun_1800b1a0(struct s250* ecx, int32_t a2) {
    int32_t esi3;
    int32_t eax4;
    int32_t edi5;
    int32_t* edx6;
    int32_t v7;
    int16_t ax8;

    esi3 = g18038568;
    eax4 = 0;
    if (reinterpret_cast<uint1_t>(esi3 < 0) | reinterpret_cast<uint1_t>(esi3 == 0)) {
        addr_0x1800b1c3_2:
        return 33;
    } else {
        edi5 = a2;
        edx6 = reinterpret_cast<int32_t*>(0x18038548);
        do {
            if (*edx6 == edi5) 
                break;
            ++eax4;
            edx6 = edx6 + 2;
        } while (eax4 < esi3);
        goto addr_0x1800b1c3_2;
    }
    v7 = *reinterpret_cast<int32_t*>(eax4 * 8 + 0x1803854c);
    ax8 = fun_1800b2c0(ecx, v7);
    return ax8;
}

struct s515 {
    signed char[4] pad4;
    int32_t f4;
};

struct s514 {
    signed char[64] pad64;
    struct s515** f64;
};

void fun_1800b1e0(struct s514* ecx, int32_t a2, int32_t a3) {
    struct s515* eax4;

    if (ecx->f64) {
        eax4 = *ecx->f64;
        eax4->f4(a2, a3, 0);
    }
    return;
}

struct s517 {
    signed char[12] pad12;
    int32_t f12;
};

struct s516 {
    signed char[60] pad60;
    struct s517** f60;
};

int32_t fun_1800b240(struct s516* ecx) {
    if (!ecx->f60) {
        return 0;
    } else {
        goto (*ecx->f60)->f12;
    }
}

struct s521 {
    signed char[644] pad644;
    int32_t f644;
    signed char[60] pad708;
    signed char f708;
    signed char[1] pad710;
    signed char f710;
    signed char[5] pad716;
    int32_t f716;
};

struct s520 {
    signed char[12] pad12;
    struct s521* f12;
};

struct s519 {
    struct s519* f0;
    signed char[4] pad8;
    struct s520* f8;
};

struct s523 {
    signed char[16] pad16;
    int32_t f16;
};

struct s522 {
    struct s523* f0;
    signed char[1] pad5;
    signed char f5;
};

struct s518 {
    signed char[16] pad16;
    struct s519* f16;
    signed char[40] pad60;
    struct s522* f60;
};

int32_t fun_1800b250(struct s518* ecx) {
    struct s522* ecx2;
    struct s519* edx3;
    struct s519* esi4;
    struct s523* eax5;
    int32_t eax6;

    ecx2 = ecx->f60;
    if (!ecx2) {
        return 0;
    }
    if (!ecx2->f5) {
        edx3 = ecx->f16;
        esi4 = reinterpret_cast<struct s519*>(&ecx->f16);
        if (edx3 == esi4) {
            addr_0x1800b2a9_5:
            return 0;
        } else {
            do {
                if (!edx3->f8->f12) 
                    continue;
                if (!edx3->f8->f12->f708) 
                    continue;
                if (!edx3->f8->f12->f716) 
                    continue;
                if (edx3->f8->f12->f710) 
                    continue;
                if (edx3->f8->f12->f644) 
                    break;
                edx3 = edx3->f0;
            } while (edx3 != esi4);
            goto addr_0x1800b2a9_5;
        }
    }
    eax5 = ecx2->f0;
    eax6 = reinterpret_cast<int32_t>(eax5->f16());
    return eax6;
}

struct s524 {
    signed char[4] pad4;
    int32_t f4;
};

int16_t fun_1800b490(struct s524** a1, int32_t* a2, int32_t* a3) {
    int32_t* eax4;
    int32_t v5;
    int32_t esi6;
    int32_t ecx7;
    int32_t* edi8;
    int32_t* esi9;
    int1_t zf10;
    struct s524* edx11;
    int32_t* esi12;
    int32_t ecx13;
    int32_t* edi14;
    int1_t zf15;

    eax4 = a2;
    v5 = esi6;
    ecx7 = 4;
    edi8 = reinterpret_cast<int32_t*>(0x18034678);
    esi9 = eax4;
    zf10 = 1;
    while (ecx7) {
        --ecx7;
        zf10 = *esi9 == *edi8;
        *edi8 = *esi9;
        ++edi8;
        ++esi9;
    }
    if (zf10) {
        addr_0x1800b4ca_5:
        *a3 = reinterpret_cast<int32_t>(a1 - 13);
        edx11 = *a1;
        edx11->f4();
        goto v5;
    } else {
        esi12 = eax4;
        ecx13 = 4;
        edi14 = reinterpret_cast<int32_t*>(0x18034458);
        zf15 = 1;
        while (ecx13) {
            --ecx13;
            zf15 = *esi12 == *edi14;
            *edi14 = *esi12;
            ++edi14;
            ++esi12;
        }
        if (zf15) 
            goto addr_0x1800b4ca_5;
    }
    *a3 = 0;
    return 0x4002;
}

struct s525 {
    signed char[4] pad4;
    int32_t f4;
};

int16_t fun_1800b4f0(struct s525* a1) {
    int32_t eax2;
    int32_t** ecx3;
    int32_t* eax4;

    eax2 = a1->f4 - 1;
    a1->f4 = eax2;
    if (!eax2) {
        ecx3 = reinterpret_cast<int32_t**>(reinterpret_cast<int32_t>(a1) - 52);
        if (ecx3) {
            eax4 = *ecx3;
            *eax4(1);
        }
        eax2 = 0;
    }
    return *reinterpret_cast<int16_t*>(&eax2);
}

struct s526 {
    signed char[20] pad20;
    void** f20;
};

struct s527 {
    signed char[2] pad2;
    int16_t f2;
    signed char[10] pad14;
    int16_t f14;
};

struct s528 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

int16_t fun_1800b510(struct s526* a1, struct s527* a2) {
    void** ecx3;
    void** edx4;
    struct s77* eax5;
    void** edx6;
    void** esi7;
    void** edi8;
    struct s528* eax9;
    void** edx10;
    void** eax11;

    ecx3 = reinterpret_cast<void**>(0);
    edx4 = reinterpret_cast<void**>(0);
    *reinterpret_cast<int16_t*>(&ecx3) = a2->f14;
    *reinterpret_cast<int16_t*>(&edx4) = a2->f2;
    eax5 = reinterpret_cast<struct s77*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 16 - 4 - 4 - 4 - 4 + 16);
    *reinterpret_cast<void***>(&eax5) = fun_18017200(eax5, edx4, ecx3);
    edx6 = eax5->f4;
    esi7 = eax5->f8;
    edi8 = eax5->f12;
    eax9 = reinterpret_cast<struct s528*>(&a1->f20);
    eax9->f0 = eax5->f0;
    eax9->f4 = edx6;
    eax9->f8 = esi7;
    eax9->f12 = edi8;
    edx10 = g180458c8;
    if (eax9->f0 != edx10 || (eax11 = g180458cc, eax9->f4 != eax11)) {
        return 0;
    } else {
        return 100;
    }
}

int16_t fun_1800b580() {
    return 0;
}

struct s529 {
    signed char[36] pad36;
    int32_t f36;
};

void fun_1800b5f0(struct s529** a1) {
    struct s529* ecx2;

    ecx2 = *a1;
    ecx2->f36();
    goto a1;
}

int16_t fun_1800b7f0() {
    return 0;
}

void fun_1800b8c0(void** ecx, void** a2, void** a3) {
    void** eax4;
    int32_t ecx5;
    void** eax6;
    uint32_t edx7;
    void** ecx8;
    void** edx9;
    void** edi10;
    void*** esi11;
    int32_t ebp12;
    void** eax13;
    void** v14;
    void** edx15;
    void** v16;
    void** edx17;
    void** esi18;

    if (*reinterpret_cast<void***>(ecx + 12) && *reinterpret_cast<void***>(ecx + 16)) {
        eax4 = *reinterpret_cast<void***>(a2) - 1;
        if (reinterpret_cast<unsigned char>(eax4) <= reinterpret_cast<unsigned char>(13)) {
            ecx5 = 0;
            *reinterpret_cast<signed char*>(&ecx5) = *reinterpret_cast<signed char*>(reinterpret_cast<unsigned char>(eax4) + reinterpret_cast<uint32_t>(fun_1800b9a8));
            switch (ecx5) {
            case 0:
                eax6 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 16) + 92);
                edx7 = reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 12) + 0x1a8)) >> 25;
                if (!(*reinterpret_cast<unsigned char*>(&edx7) & 1)) {
                    *reinterpret_cast<unsigned char*>(&eax6) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax6) & 0xfe);
                }
                ecx8 = *reinterpret_cast<void***>(ecx + 24);
                edx9 = *reinterpret_cast<void***>(ecx8);
                *reinterpret_cast<void***>(edx9 + 4)(eax6);
                break;
            case 1:
                fun_1800ba50(ecx, edi10, esi11, ebp12, __return_address(), a2, a3);
                break;
            case 2:
                if (*reinterpret_cast<void***>(ecx + 24)) {
                    eax13 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 24));
                    v14 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 16) + 84);
                    *reinterpret_cast<void***>(eax13 + 16)(v14);
                    break;
                }
            case 3:
                if (!*reinterpret_cast<void***>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 12) + 0x198) + 0xb8)) {
                    fun_1800bb80(ecx);
                }
                if (*reinterpret_cast<void***>(ecx + 24)) {
                    edx15 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 24));
                    v16 = *reinterpret_cast<void***>(a2 + 4);
                    *reinterpret_cast<void***>(edx15 + 32)(v16);
                    break;
                }
            case 4:
                if (*reinterpret_cast<void***>(ecx + 24)) {
                    edx17 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 24));
                    *reinterpret_cast<void***>(edx17 + 8)(3, a2 + 4, 4);
                }
            case 5:
                goto 0x1800b971;
            }
        }
        esi18 = *reinterpret_cast<void***>(ecx + 24);
        if (esi18 && *reinterpret_cast<void***>(a2 + 40)) {
            *reinterpret_cast<void***>(esi18 + 0x7d) = reinterpret_cast<void**>(1);
            *reinterpret_cast<void***>(esi18 + 0x7c) = reinterpret_cast<void**>(1);
        }
    }
    return;
}

void fun_1800b98d(int32_t ecx) {
}

struct s531 {
    signed char[124] pad124;
    unsigned char f124;
    unsigned char f125;
};

struct s530 {
    signed char[24] pad24;
    struct s531* f24;
};

struct s532 {
    signed char[416] pad416;
    uint32_t f416;
};

void fun_1800bb60(struct s530* ecx, struct s532* a2) {
    uint32_t eax3;
    struct s531* eax4;

    eax3 = a2->f416 >> 5;
    if (1 & *reinterpret_cast<unsigned char*>(&eax3)) {
        eax4 = ecx->f24;
        eax4->f125 = 1;
        eax4->f124 = 1;
    }
    return;
}

signed char fun_1800bcb0() {
    return 0;
}

int16_t fun_1800b0d0() {
    return 0x4001;
}

struct s534 {
    signed char[24] pad24;
    int32_t f24;
};

struct s533 {
    signed char[584] pad584;
    struct s534** f584;
};

void fun_1800c570(struct s533* ecx, int32_t a2) {
    struct s534* eax3;

    if (ecx->f584) {
        eax3 = *ecx->f584;
        eax3->f24(a2);
    }
    return;
}

struct s535 {
    signed char[4] pad4;
    int32_t f4;
};

int16_t fun_1800d8a0(struct s535** a1, int32_t* a2, struct s535*** a3) {
    int32_t* eax4;
    int32_t v5;
    int32_t esi6;
    int32_t ecx7;
    int32_t* edi8;
    int32_t* esi9;
    int1_t zf10;
    struct s535* ecx11;
    int32_t* esi12;
    int32_t ecx13;
    int32_t* edi14;
    int1_t zf15;

    eax4 = a2;
    v5 = esi6;
    ecx7 = 4;
    edi8 = reinterpret_cast<int32_t*>(0x18034678);
    esi9 = eax4;
    zf10 = 1;
    while (ecx7) {
        --ecx7;
        zf10 = *esi9 == *edi8;
        *edi8 = *esi9;
        ++edi8;
        ++esi9;
    }
    if (zf10) {
        addr_0x1800d8da_5:
        *a3 = a1;
        ecx11 = *a1;
        ecx11->f4();
        goto v5;
    } else {
        esi12 = eax4;
        ecx13 = 4;
        edi14 = reinterpret_cast<int32_t*>(0x18034478);
        zf15 = 1;
        while (ecx13) {
            --ecx13;
            zf15 = *esi12 == *edi14;
            *edi14 = *esi12;
            ++edi14;
            ++esi12;
        }
        if (zf15) 
            goto addr_0x1800d8da_5;
    }
    *a3 = reinterpret_cast<struct s535**>(0);
    return 0x4002;
}

struct s536 {
    signed char[8] pad8;
    int32_t f8;
};

int16_t fun_1800d900(struct s536* a1) {
    int32_t ecx2;
    int32_t eax3;

    ecx2 = a1->f8 + 1;
    a1->f8 = ecx2;
    eax3 = ecx2;
    return *reinterpret_cast<int16_t*>(&eax3);
}

struct s537 {
    signed char[4] pad4;
    int32_t f4;
};

void fun_1800d950(struct s537* a1) {
    int32_t v2;

    v2 = a1->f4;
    WaitForSingleObject();
    goto v2;
}

void* fun_1800e290() {
    void* esp1;
    void* eax2;
    unsigned char ah3;

    esp1 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 8);
    __asm__("fld dword [0x1803471c]");
    __asm__("fmul dword [0x18034774]");
    __asm__("fdivr dword [ecx+0x28]");
    __asm__("fst dword [esp+0x0]");
    __asm__("fcomp dword [0x18034238]");
    __asm__("fnstsw ax");
    eax2 = esp1;
    if (!(ah3 & 65)) {
        eax2 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp1) + 4);
    }
    __asm__("fld dword [eax]");
    __asm__("fst dword [ecx+0x98]");
    __asm__("fld dword [0x18034238]");
    __asm__("fsub st0, st1");
    __asm__("fstp dword [ecx+0x94]");
    __asm__("fstp st0");
    return eax2;
}

void fun_18012710(void** ecx, void** a2) {
    uint32_t ebx3;
    void** eax4;
    void** edx5;

    ebx3 = reinterpret_cast<unsigned char>(a2) ^ reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ecx + 4));
    if (ebx3) {
        *reinterpret_cast<void***>(ecx + 4) = a2;
        if (*reinterpret_cast<unsigned char*>(&ebx3) & 8) {
            eax4 = *reinterpret_cast<void***>(ecx);
            *reinterpret_cast<void***>(eax4 + 56)(ecx);
        }
        if (*reinterpret_cast<unsigned char*>(&ebx3) & 4) {
            fun_18012ca0(ecx);
            edx5 = *reinterpret_cast<void***>(ecx);
            *reinterpret_cast<void***>(edx5 + 60)(ecx);
        }
        *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(1);
    }
    return;
}

struct s539 {
    signed char[52] pad52;
    int32_t f52;
};

struct s538 {
    struct s539* f0;
    signed char[32] pad36;
    int32_t f36;
    signed char[116] pad156;
    int32_t f156;
    int32_t f160;
    int32_t f164;
};

void fun_1800e180(struct s538* ecx) {
    int1_t zf2;
    int32_t v3;
    struct s539* edx4;
    int32_t v5;
    struct s539* edx6;
    struct s539* edx7;

    zf2 = ecx->f36 == 0;
    v3 = ecx->f36;
    if (!zf2) {
        __asm__("fild dword [ebp-0xc]");
        __asm__("fmul dword [0x18034770]");
        __asm__("fst dword [ebp-0x4]");
        __asm__("fmul dword [ebp-0x4]");
        __asm__("fsubr dword [0x18034238]");
        __asm__("fstp dword [ebp-0x8]");
        __asm__("fld dword [ebp-0x8]");
        __asm__("fsqrt ");
        __asm__("fstp dword [ebp-0xc]");
        __asm__("fld dword [ebp-0xc]");
        __asm__("fstp dword [ecx+0x9c]");
        if (ecx->f36 >= 0) {
            ecx->f164 = 0;
            edx4 = ecx->f0;
            ecx->f160 = v5;
            edx4->f52(v3);
            return;
        } else {
            __asm__("fld dword [ebp-0x4]");
            ecx->f160 = 0;
            edx6 = ecx->f0;
            __asm__("fchs ");
            __asm__("fstp dword [ecx+0xa4]");
            edx6->f52(v3);
            return;
        }
    } else {
        ecx->f164 = 0;
        ecx->f160 = 0;
        edx7 = ecx->f0;
        ecx->f156 = 0x3f800000;
        edx7->f52(v3);
        return;
    }
}

void fun_1800e6d0(struct s80* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15) {
    void** v16;
    void** v17;
    void** ebp18;
    void** ebp19;
    void** v20;
    void** edi21;
    struct s80* edi22;
    void** v23;
    void** esi24;
    void** v25;
    void** v26;
    void** v27;
    void** ebx28;
    struct s86* esi29;
    void** v30;
    int32_t ebx31;
    void** v32;
    void** eax33;
    void** v34;
    struct s82** ecx35;
    struct s82* eax36;

    v16 = reinterpret_cast<void**>(__return_address());
    v17 = ebp18;
    ebp19 = a4;
    v20 = edi21;
    edi22 = ecx;
    if (ebp19) {
        v23 = esi24;
        fun_18012f60(ecx, a3);
        if (!reinterpret_cast<int1_t>(a3 == 1)) {
            if (reinterpret_cast<int1_t>(a3 == 2)) {
                v25 = edi22->f128;
                fun_18018da0(&edi22->f184, a2, ebp19, v25, v23, v20, v17, v16, a2);
                v26 = edi22->f128;
                fun_18018da0(&edi22->f224, a2 + 20, ebp19, v26, v23, v20, v17, v16, a2);
            }
            edi22->f128 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi22->f128) + reinterpret_cast<unsigned char>(ebp19));
        } else {
            v27 = ebx28;
            esi29 = reinterpret_cast<struct s86*>(&edi22->f184);
            v30 = reinterpret_cast<void**>(6);
            do {
                ebx31 = 2;
                do {
                    v32 = edi22->f128;
                    fun_18018da0(esi29, a2, ebp19, v32, v27, v23, v20, v17, v16);
                    ++esi29;
                    --ebx31;
                } while (ebx31);
                eax33 = v30 - 1;
                v30 = eax33;
            } while (eax33);
            v34 = edi22->f128;
            fun_18018bf0(&edi22->f664, a2, ebp19, v34, v27, v23, v20, v17, v16, a2, a3, v30, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
            ecx35 = edi22->f688;
            eax36 = *ecx35;
            eax36->f20();
            edi22->f128 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi22->f128) + reinterpret_cast<unsigned char>(ebp19));
            goto v20;
        }
    }
    return;
}

void fun_1800e8c0() {
    return;
}

void** fun_1800f130(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** edi6;
    void** esi7;
    void** eax8;
    void** v9;
    void** ecx10;

    eax8 = fun_1802b2bb(ecx, 0x2b4, edi6, esi7, __return_address(), a2, a3, a4, a5);
    if (!eax8 || (v9 = *reinterpret_cast<void***>(ecx + 12), ecx10 = *reinterpret_cast<void***>(ecx + 4), *reinterpret_cast<int16_t*>(&eax8) = fun_1800de90(eax8, ecx10, ecx + 0x32c, ecx + 0x37c, ecx + 0x3cc, ecx + 0x41c, ecx + 0x46c, ecx + 0x4bc, ecx + 0x50c, v9), !eax8)) {
        return 0;
    } else {
        fun_18013c10(ecx, eax8);
        return eax8;
    }
}

void fun_1800f1a0() {
    return;
}

struct s541 {
    signed char[24] pad24;
    int32_t f24;
};

struct s542 {
    signed char[24] pad24;
    int32_t f24;
};

struct s543 {
    signed char[24] pad24;
    int32_t f24;
};

struct s540 {
    struct s295** f0;
    signed char[8] pad12;
    struct s541** f12;
    signed char[4] pad20;
    struct s542** f20;
    signed char[4] pad28;
    struct s543** f28;
};

struct s544 {
    signed char[24] pad24;
    int32_t f24;
};

void fun_1800f480(struct s292* ecx) {
    struct s292* ebx2;
    struct s540* esi3;
    int32_t edi4;
    struct s544* eax5;
    struct s295* edx6;
    struct s541* eax7;
    struct s542* edx8;
    struct s543* eax9;
    struct s296* edx10;

    ebx2 = ecx;
    fun_18013cd0(ecx);
    esi3 = reinterpret_cast<struct s540*>(&ebx2->f1380);
    edi4 = 2;
    do {
        eax5 = **reinterpret_cast<struct s544***>(reinterpret_cast<int32_t>(esi3) - 8);
        eax5->f24();
        edx6 = *esi3->f0;
        edx6->f24();
        eax7 = *esi3->f12;
        eax7->f24();
        edx8 = *esi3->f20;
        edx8->f24();
        eax9 = *esi3->f28;
        eax9->f24();
        esi3 = reinterpret_cast<struct s540*>(&esi3->pad12);
        --edi4;
    } while (edi4);
    edx10 = *ebx2->f1388;
    edx10->f24();
    return;
}

void fun_1800f7d0(void** ecx, int32_t a2, void*** a3, int32_t a4) {
    void** eax5;
    void** edx6;
    void** eax7;
    int32_t esi8;
    void** edx9;
    void** eax10;
    void** ecx11;
    void** eax12;
    void** edx13;
    void** eax14;
    void** edx15;

    fun_18012800(ecx, a2, a3, a4);
    switch (a2 - 1) {
    case 0:
        if (*reinterpret_cast<void***>(ecx + 0x5c0)) {
            eax5 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5c0));
            *reinterpret_cast<void***>(eax5 + 4)(1, a3, a4);
        }
        if (*reinterpret_cast<void***>(ecx + 0x5c4)) {
            edx6 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5c4));
            *reinterpret_cast<void***>(edx6 + 4)(1, a3, a4);
        }
        if (*reinterpret_cast<void***>(ecx + 0x5cc)) {
            eax7 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5cc));
            *reinterpret_cast<void***>(eax7 + 4)();
            goto esi8;
        }
    case 1:
        if (*reinterpret_cast<void***>(ecx + 0x5c0)) {
            edx9 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5c0));
            *reinterpret_cast<void***>(edx9 + 4)(2, a3, a4);
        }
        if (*reinterpret_cast<void***>(ecx + 0x5c4)) {
            eax10 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5c4));
            *reinterpret_cast<void***>(eax10 + 4)(2, a3, a4);
        }
        ecx11 = *reinterpret_cast<void***>(ecx + 0x5cc);
        goto addr_0x1800f8b5_14;
    case 4:
        fun_1800fcd0(ecx);
        break;
    case 5:
        if (*reinterpret_cast<void***>(ecx + 0x5c8)) {
            eax12 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5c8));
            *reinterpret_cast<void***>(eax12 + 4)(1, a3, a4);
        }
        if (*reinterpret_cast<void***>(ecx + 0x5d0)) {
            edx13 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5d0));
            *reinterpret_cast<void***>(edx13 + 4)();
            goto esi8;
        }
    case 6:
        if (*reinterpret_cast<void***>(ecx + 0x5c8)) {
            eax14 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5c8));
            *reinterpret_cast<void***>(eax14 + 4)(2, a3, a4);
        }
        ecx11 = *reinterpret_cast<void***>(ecx + 0x5d0);
        goto addr_0x1800f8b5_14;
    case 2:
    case 3:
        goto 0x1800f8d0;
    }
    return;
    addr_0x1800f8b5_14:
    if (ecx11) {
        edx15 = *reinterpret_cast<void***>(ecx11);
        *reinterpret_cast<void***>(edx15 + 4)();
        goto esi8;
    }
}

struct s545 {
    void** f0;
    signed char[15] pad16;
    void** f16;
};

struct s546 {
    void** f0;
    signed char[7] pad8;
    signed char f8;
    signed char[7] pad16;
    void** f16;
};

struct s547 {
    void** f0;
    signed char[15] pad16;
    void** f16;
};

struct s548 {
    signed char[90] pad90;
    void** f90;
};

void fun_1800fee0(void** ecx, void** a2) {
    void* ebp3;
    void** v4;
    void** ebx5;
    void** v6;
    void** esi7;
    void** esi8;
    signed char al9;
    void** v10;
    void** edi11;
    void** edi12;
    void** al13;
    void** v14;
    void** v15;
    void** v16;
    void** v17;
    void** v18;
    void** v19;
    void** v20;
    void** v21;
    void** v22;
    void** ecx23;
    void** v24;
    void** v25;
    void** v26;
    void** v27;
    void** v28;
    void** eax29;
    void** edx30;
    void** ebx31;
    void** eax32;
    void** eax33;
    void** v34;
    void** eax35;
    void** edx36;
    void** eax37;
    void** ecx38;
    void** eax39;
    void** eax40;
    void** edx41;
    uint32_t edx42;
    uint32_t eax43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** eax49;
    void** v50;
    void** v51;
    void** eax52;
    void** eax53;
    void** v54;
    void** v55;
    void** v56;
    void** eax57;
    int1_t less58;
    void** eax59;
    void** v60;
    void** v61;
    void** eax62;
    void** ecx63;
    void** eax64;
    int1_t less65;
    void** ecx66;
    void** v67;
    void** ecx68;
    void** v69;
    void** ecx70;
    void** v71;
    void** ecx72;
    void** v73;
    void** ecx74;
    void** v75;
    uint32_t eax76;
    signed char al77;
    uint32_t eax78;
    uint32_t edx79;
    int1_t zf80;
    void** v81;
    void** v82;
    void** v83;
    void** v84;
    void** eax85;
    void** v86;
    void** eax87;
    void** v88;
    void** ecx89;
    void** eax90;
    void** edx91;
    void** v92;
    void** v93;
    void** al94;
    void** eax95;
    void** eax96;
    void** eax97;
    void** eax98;
    void** edx99;
    void** v100;
    void** ecx101;
    void** v102;
    void** v103;
    int1_t zf104;
    void** eax105;
    void** ecx106;
    void** ecx107;
    void** ecx108;
    void** v109;
    void** edx110;
    void** eax111;
    void** v112;
    void** ecx113;
    void** v114;
    void** edx115;
    void** eax116;
    void** v117;
    void** v118;
    void** ecx119;
    void** eax120;
    void** ecx121;
    void** eax122;
    void** v123;
    void** edx124;
    void** eax125;
    void** eax126;
    void** v127;
    void** v128;
    void** v129;
    void** v130;
    void** v131;
    void** eax132;
    void** eax133;
    void** eax134;
    void** v135;
    void** ebx136;
    void** eax137;
    void** eax138;
    void** eax139;
    void** v140;
    struct s545* ebx141;
    void** v142;
    void** eax143;
    int1_t less144;
    void** edx145;
    void** ecx146;
    void** v147;
    void** v148;
    void** v149;
    void** eax150;
    struct s546* ebx151;
    void* eax152;
    uint32_t eax153;
    uint32_t eax154;
    void** eax155;
    struct s547* ecx156;
    void** ecx157;
    void** edx158;
    signed char al159;
    void** ecx160;
    void** v161;
    void** eax162;
    void** v163;
    void** v164;
    void** v165;
    void** eax166;
    void** v167;
    void** ebx168;
    void** ecx169;
    void** eax170;
    struct s548* v171;
    void** eax172;
    int1_t less173;
    void** ebx174;
    struct s545* eax175;
    unsigned char ah176;
    void** eax177;
    void** v178;
    void** ebx179;
    void** ecx180;
    void** eax181;
    void** v182;
    int1_t less183;
    void** edx184;
    void** ebx185;
    void** eax186;

    ebp3 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    v4 = ebx5;
    v6 = esi7;
    esi8 = ecx;
    if (!*reinterpret_cast<void***>(esi8 + 0x8c)) {
        addr_0x18010de4_2:
        return;
    } else {
        al9 = *reinterpret_cast<signed char*>(esi8 + 0x5b0);
        v10 = edi11;
        if (!al9) {
            edi12 = a2;
        } else {
            *reinterpret_cast<signed char*>(esi8 + 0x5b0) = 0;
            edi12 = reinterpret_cast<void**>(0);
        }
        fun_1800fce0(esi8);
        al13 = *reinterpret_cast<void***>(esi8 + 4);
        *reinterpret_cast<void***>(esi8 + 0x5e0) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(esi8 + 0x5e4) = reinterpret_cast<void**>(0);
        if (!(reinterpret_cast<unsigned char>(al13) & 4)) {
            __asm__("fld dword [0x18034238]");
        } else {
            fun_1800cf10(esi8, 0xfffffed4, v10, v6, v4, v14, v15, v16, v17, v18, v19, v20, v21, v22);
        }
        ecx23 = *reinterpret_cast<void***>(esi8 + 76);
        *reinterpret_cast<signed char*>(&v24) = 0;
        *reinterpret_cast<signed char*>(&v25) = 0;
        *reinterpret_cast<signed char*>(&v26) = 0;
        *reinterpret_cast<signed char*>(&v27) = 0;
        *reinterpret_cast<signed char*>(&v28) = 0;
        if (!ecx23) 
            goto addr_0x18010098_10;
        if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi8 + 0x84)) <= reinterpret_cast<signed char>(2)) 
            goto addr_0x1800ff68_12;
    }
    addr_0x18010098_10:
    __asm__("fld dword [esi+0x68]");
    __asm__("fmul dword [esi+0x1c]");
    eax29 = *reinterpret_cast<void***>(esi8 + 4);
    __asm__("fmul st0, st1");
    __asm__("fstp dword [ebp+0x8]");
    if (!(*reinterpret_cast<unsigned char*>(&eax29) & 4)) {
        __asm__("fstp st0");
    } else {
        __asm__("fld dword [esi+0x6c]");
        __asm__("fmul dword [esi+0x40]");
        __asm__("fmul dword [esi+0x1c]");
        __asm__("fmul st0, st1");
        __asm__("fstp dword [ebp-0x4]");
        __asm__("fstp st0");
    }
    edx30 = *reinterpret_cast<void***>(esi8 + 0x84);
    if (reinterpret_cast<int1_t>(edx30 == 1)) 
        goto addr_0x180100d4_16;
    if (ecx23) {
        ebx31 = ecx23;
    } else {
        *reinterpret_cast<int16_t*>(&eax29) = fun_18010e00(edx30);
        ebx31 = eax29;
    }
    eax32 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx31) & 3);
    if (*reinterpret_cast<signed char*>(&eax32) != 3) 
        goto addr_0x18010a77_21;
    eax32 = *reinterpret_cast<void***>(esi8 + 0x5b4);
    ecx23 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax32) & 3);
    if (*reinterpret_cast<unsigned char*>(&ecx23) == 3) 
        goto addr_0x18010631_23;
    addr_0x18010a77_21:
    if (!(*reinterpret_cast<unsigned char*>(&ebx31) & 4)) {
        eax33 = *reinterpret_cast<void***>(esi8 + 0x5b4);
        if (!(*reinterpret_cast<unsigned char*>(&eax33) & 4)) {
            addr_0x18010b73_25:
            if (*reinterpret_cast<unsigned char*>(&ebx31 + 1) & 1) {
                *reinterpret_cast<int16_t*>(&eax33) = fun_1800dce0(ecx23, ebx31, 0x100, v10, v6, v4, v28);
                v34 = eax33;
                eax35 = *reinterpret_cast<void***>(esi8 + 0x5b4);
                if (!(*reinterpret_cast<unsigned char*>(&eax35 + 1) & 1)) {
                    ecx23 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax35) & 48);
                    if (*reinterpret_cast<unsigned char*>(&ecx23) != 48) {
                        eax33 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax35) & 3);
                        if (*reinterpret_cast<unsigned char*>(&eax33) == 3) {
                            if (!*reinterpret_cast<void***>(esi8 + 0x5cc)) {
                                edx36 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(esi8 + 0x5bc) + 8));
                                eax37 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx36 + 28)());
                                *reinterpret_cast<void***>(esi8 + 0x5cc) = eax37;
                            }
                            eax33 = a2;
                            ecx38 = *reinterpret_cast<void***>(esi8 + 0x5cc);
                            ecx23 = esi8;
                            fun_1800fe10(ecx23, v34, ecx38, eax33);
                            *reinterpret_cast<signed char*>(&v27) = 1;
                        }
                    } else {
                        if (!*reinterpret_cast<void***>(esi8 + 0x5d0)) {
                            eax39 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(esi8 + 0x5bc) + 12));
                            eax40 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax39 + 28)());
                            *reinterpret_cast<void***>(esi8 + 0x5d0) = eax40;
                        }
                        edx41 = *reinterpret_cast<void***>(esi8 + 0x5d0);
                        eax33 = v34;
                        ecx23 = esi8;
                        fun_1800fe10(ecx23, eax33, edx41, a2);
                        *reinterpret_cast<signed char*>(&v28) = 1;
                    }
                } else {
                    *reinterpret_cast<int16_t*>(&eax35) = fun_1800f900(esi8, 0x100, a2, edi12);
                    eax33 = eax35 + 16;
                    ecx23 = esi8;
                    fun_1800fd90(ecx23, v34, eax33, a2, edi12);
                }
            }
        } else {
            edx42 = reinterpret_cast<unsigned char>(eax33) & 3;
            if (*reinterpret_cast<signed char*>(&edx42) != 3 || (eax43 = reinterpret_cast<unsigned char>(eax33) & 48, *reinterpret_cast<signed char*>(&eax43) != 48)) {
                __asm__("fld dword [0x180347ac]");
            } else {
                __asm__("fld dword [0x180347f4]");
            }
            __asm__("fmul dword [ebp+0x8]");
            __asm__("fstp dword [ebp-0x20]");
            fun_1800fd90(esi8, 0, esi8 + 0x560, v44, edi12);
            v45 = edi12;
            eax33 = esi8 + 0x588;
            v46 = v44;
            v47 = eax33;
            v48 = reinterpret_cast<void**>(1);
            goto addr_0x18010b6c_40;
        }
    } else {
        *reinterpret_cast<int16_t*>(&eax32) = fun_1800dce0(ecx23, ebx31, 4, v10, v6, v4, v28);
        eax49 = *reinterpret_cast<void***>(esi8 + 0x5b4);
        if (!(*reinterpret_cast<unsigned char*>(&eax49) & 4)) {
            eax33 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax49) & 3);
            if (*reinterpret_cast<unsigned char*>(&eax33) != 3) 
                goto addr_0x18010b73_25;
            fun_1800cf10(ecx23, 0xfffffe70, v10, v6, v4, v28, v25, v50, v44, v51, v27, v26, eax32, v24);
            __asm__("fmul dword [ebp+0x8]");
            __asm__("fstp dword [ebp-0x20]");
            *reinterpret_cast<int16_t*>(&eax33) = fun_1800f900(esi8, 1, v44, edi12);
            fun_1800fd90(esi8, eax32, eax33 + 16, v44, edi12);
            eax52 = v44;
            v45 = edi12;
            v46 = eax52;
            *reinterpret_cast<int16_t*>(&eax52) = fun_1800f900(esi8, 2, v46, v45);
            eax33 = eax52 + 16;
            v47 = eax33;
            v48 = eax32;
            goto addr_0x18010b6c_40;
        } else {
            if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi8 + 4)) & 16)) {
                v44 = a2;
            } else {
                __asm__("fld dword [0x180347ac]");
                __asm__("fmul dword [ebp+0x8]");
                __asm__("fstp dword [ebp-0x20]");
            }
            v45 = edi12;
            v46 = v44;
            *reinterpret_cast<int16_t*>(&eax49) = fun_1800f900(esi8, 4, v46, v45);
            v47 = eax49 + 16;
            eax33 = eax32;
            v48 = eax33;
            goto addr_0x18010b6c_40;
        }
    }
    if (!(*reinterpret_cast<unsigned char*>(&ebx31) & 8)) {
        if (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi8 + 0x5b4)) & 8 && (eax53 = *reinterpret_cast<void***>(esi8 + 0x84), v54 = eax53, v55 = reinterpret_cast<void**>(0), !(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax53) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax53 == 0)))) {
            v56 = esi8 + 0x448;
            do {
                fun_1800fd90(esi8, v55, v56, v54, edi12);
                eax57 = v55 + 1;
                less58 = reinterpret_cast<signed char>(eax57) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi8 + 0x84));
                v55 = eax57;
                v56 = v56 + 40;
            } while (less58);
        }
    } else {
        *reinterpret_cast<int16_t*>(&eax33) = fun_1800dce0(ecx23, ebx31, 8, v10, v6, v4, v28);
        fun_1800fd90(esi8, eax33, esi8 + 0x448, a2, edi12);
    }
    __asm__("fld dword [esi+0x5c]");
    __asm__("fadd dword [esi+0x58]");
    eax59 = *reinterpret_cast<void***>(esi8 + 0x8c);
    v60 = reinterpret_cast<void**>(0);
    __asm__("fmul dword [0x18034774]");
    __asm__("fstp dword [ebp-0x20]");
    __asm__("fld dword [esi+0x58]");
    __asm__("fsub dword [esi+0x5c]");
    __asm__("fmul dword [0x18038c90]");
    __asm__("fmul dword [0x18034774]");
    __asm__("fstp dword [ebp-0x1c]");
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax59) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax59 == 0))) {
        v61 = esi8 + 0x9c;
        do {
            if (*reinterpret_cast<void***>(v61 + 5) && (eax62 = v61, ecx63 = *reinterpret_cast<void***>(eax62), *reinterpret_cast<int16_t*>(&eax62) = fun_1800dce0(ecx63, ebx31, ecx63, v10, v6, v4, v28), reinterpret_cast<signed char>(eax62) >= reinterpret_cast<signed char>(0))) {
                if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(v61 + 0xfffffffc)) <= reinterpret_cast<signed char>(0xb4)) {
                    __asm__("fld dword [ebp-0x20]");
                    __asm__("fsub dword [ebp-0x1c]");
                } else {
                    __asm__("fld dword [ebp-0x1c]");
                    __asm__("fadd dword [ebp-0x20]");
                }
                __asm__("fmul dword [ebp-0x4]");
                __asm__("fstp dword [esp]");
                fun_1800fd90(esi8, eax62, v61 + 52, ecx63, edi12);
            }
            eax64 = v60 + 1;
            less65 = reinterpret_cast<signed char>(eax64) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi8 + 0x8c));
            v60 = eax64;
            v61 = v61 + 96;
        } while (less65);
    }
    addr_0x18010d5f_61:
    ecx66 = *reinterpret_cast<void***>(esi8 + 0x5c0);
    v67 = v24;
    fun_1800feb0(esi8, ecx66, esi8 + 0x5d4, *reinterpret_cast<signed char*>(&v67));
    ecx68 = *reinterpret_cast<void***>(esi8 + 0x5c4);
    v69 = v25;
    fun_1800feb0(esi8, ecx68, esi8 + 0x5d5, *reinterpret_cast<signed char*>(&v69));
    ecx70 = *reinterpret_cast<void***>(esi8 + 0x5c8);
    v71 = v26;
    fun_1800feb0(esi8, ecx70, esi8 + 0x5d6, *reinterpret_cast<signed char*>(&v71));
    ecx72 = *reinterpret_cast<void***>(esi8 + 0x5cc);
    v73 = v27;
    fun_1800feb0(esi8, ecx72, esi8 + 0x5d7, *reinterpret_cast<signed char*>(&v73));
    ecx74 = *reinterpret_cast<void***>(esi8 + 0x5d0);
    v75 = v28;
    fun_1800feb0(esi8, ecx74, esi8 + 0x5d8, *reinterpret_cast<signed char*>(&v75));
    fun_1800fd10(esi8);
    goto addr_0x18010de4_2;
    addr_0x18010b6c_40:
    ecx23 = esi8;
    fun_1800fd90(ecx23, v48, v47, v46, v45);
    goto addr_0x18010b73_25;
    addr_0x18010631_23:
    eax76 = reinterpret_cast<unsigned char>(eax32) & 48;
    al77 = reinterpret_cast<signed char>(*reinterpret_cast<signed char*>(&eax76) - 48);
    *reinterpret_cast<signed char*>(&eax76) = -al77;
    eax78 = eax76 - (eax76 + reinterpret_cast<uint1_t>(eax76 < eax76 + reinterpret_cast<uint1_t>(!!al77)));
    edx79 = reinterpret_cast<unsigned char>(ebx31) & 48;
    *reinterpret_cast<unsigned char*>(&eax78) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax78) & 0xfe);
    ecx23 = reinterpret_cast<void**>(0);
    *reinterpret_cast<unsigned char*>(&ecx23) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(*reinterpret_cast<signed char*>(&edx79) == 48));
    eax32 = reinterpret_cast<void**>(eax78 + 2 | reinterpret_cast<unsigned char>(ecx23));
    switch (eax32) {
    case 0:
        if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi8 + 4)) & 16)) {
            *reinterpret_cast<int16_t*>(&eax32) = fun_1800f900(esi8, 1, v10, v6);
            v51 = eax32;
            *reinterpret_cast<int16_t*>(&eax32) = fun_1800f900(esi8, 2, v10, v6);
            zf80 = *reinterpret_cast<void***>(esi8 + 52) == 0;
            if (zf80) {
                fun_1800fd90(esi8, 0, v51 + 16, a2, edi12);
                v81 = edi12;
                eax32 = eax32 + 16;
                v82 = a2;
                v83 = eax32;
                v84 = reinterpret_cast<void**>(1);
                goto addr_0x180109f8_66;
            } else {
                __asm__("fld dword [ebp+0x8]");
                __asm__("fmul dword [esi+0x58]");
                __asm__("fstp dword [esp]");
                fun_1800fd90(esi8, 0, v51 + 16, esi8, edi12);
                __asm__("fld dword [ebp+0x8]");
                __asm__("fmul dword [esi+0x5c]");
                v81 = edi12;
                v82 = esi8;
                __asm__("fstp dword [esp]");
                v83 = eax32 + 16;
                v84 = reinterpret_cast<void**>(1);
                goto addr_0x180109f8_66;
            }
        } else {
            eax85 = *reinterpret_cast<void***>(esi8 + 68);
            v86 = *reinterpret_cast<void***>(esi8 + 72);
            fun_1800fbe0(esi8, eax85, v86);
            eax32 = *reinterpret_cast<void***>(esi8 + 0x5c0);
            ecx23 = esi8;
            fun_1800fe50(ecx23, 0, 1, eax32, a2, esi8 + 88);
            *reinterpret_cast<signed char*>(&v24) = 1;
            break;
        }
    case 1:
        eax87 = *reinterpret_cast<void***>(esi8 + 68);
        v88 = *reinterpret_cast<void***>(esi8 + 72);
        fun_1800fbe0(esi8, eax87, v88);
        ecx89 = *reinterpret_cast<void***>(esi8 + 68);
        fun_1800fc30(esi8, ecx89, 0);
        eax90 = *reinterpret_cast<void***>(esi8 + 0x5c0);
        fun_1800fe50(esi8, 0, 1, eax90, a2, esi8 + 88);
        edx91 = *reinterpret_cast<void***>(esi8 + 0x5c4);
        eax32 = esi8 + 88;
        v92 = eax32;
        *reinterpret_cast<int16_t*>(&eax32) = fun_1800dce0(a2, ebx31, 32, edx91, a2, v92, v10);
        v93 = eax32;
        *reinterpret_cast<int16_t*>(&eax32) = fun_1800dce0(a2, ebx31, 16, v93, edx91, a2, v92);
        ecx23 = esi8;
        fun_1800fe50(ecx23, eax32, v93, edx91, a2, v92);
        *reinterpret_cast<signed char*>(&v24) = 1;
        *reinterpret_cast<signed char*>(&v25) = 1;
        break;
    case 2:
        __asm__("fld dword [ebp+0x8]");
        __asm__("fmul dword [esi+0x58]");
        al94 = *reinterpret_cast<void***>(esi8 + 4);
        __asm__("fstp dword [esp]");
        if (!(reinterpret_cast<unsigned char>(al94) & 16)) {
            *reinterpret_cast<int16_t*>(&eax32) = fun_1800f900(esi8, 1, ecx23, edi12);
            eax95 = eax32 + 16;
            fun_1800fd90(esi8, 0, eax95, ecx23, edi12);
            __asm__("fld dword [ebp+0x8]");
            __asm__("fmul dword [esi+0x5c]");
            __asm__("fstp dword [esp]");
            *reinterpret_cast<int16_t*>(&eax95) = fun_1800f900(esi8, 2, esi8, edi12);
            eax96 = eax95 + 16;
            fun_1800fd90(esi8, 1, eax96, esi8, edi12);
            __asm__("fld dword [ebp+0x8]");
            __asm__("fmul dword [esi+0x58]");
            __asm__("fstp dword [esp]");
            *reinterpret_cast<int16_t*>(&eax96) = fun_1800f900(esi8, 16, esi8, edi12);
            eax97 = eax96 + 16;
            fun_1800fd90(esi8, 0, eax97, esi8, edi12);
            __asm__("fld dword [ebp+0x8]");
            __asm__("fmul dword [esi+0x5c]");
            v81 = edi12;
            v82 = esi8;
            __asm__("fstp dword [esp]");
            *reinterpret_cast<int16_t*>(&eax97) = fun_1800f900(esi8, 32, v82, v81);
            eax32 = eax97 + 16;
            v83 = eax32;
            v84 = reinterpret_cast<void**>(1);
            goto addr_0x180109f8_66;
        } else {
            *reinterpret_cast<int16_t*>(&eax32) = fun_1800f900(esi8, 1, ecx23, edi12);
            eax98 = eax32 + 16;
            fun_1800fd90(esi8, 0, eax98, ecx23, edi12);
            __asm__("fld dword [ebp+0x8]");
            __asm__("fmul dword [esi+0x5c]");
            __asm__("fstp dword [esp]");
            *reinterpret_cast<int16_t*>(&eax98) = fun_1800f900(esi8, 2, esi8, edi12);
            fun_1800fd90(esi8, 1, eax98 + 16, esi8, edi12);
            edx99 = *reinterpret_cast<void***>(esi8 + 68);
            v100 = *reinterpret_cast<void***>(esi8 + 72);
            fun_1800fc80(esi8, edx99, v100);
            ecx101 = *reinterpret_cast<void***>(esi8 + 0x5c8);
            eax32 = a2;
            ecx23 = esi8;
            fun_1800fe50(ecx23, 0, 1, ecx101, eax32, esi8 + 88);
            *reinterpret_cast<signed char*>(&v26) = 1;
            break;
        }
    case 3:
        if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi8 + 4)) & 16)) {
            *reinterpret_cast<int16_t*>(&eax32) = fun_1800f900(esi8, 1, v10, v6);
            v51 = eax32;
            *reinterpret_cast<int16_t*>(&eax32) = fun_1800f900(esi8, 2, v10, v6);
            v102 = eax32;
            *reinterpret_cast<int16_t*>(&eax32) = fun_1800f900(esi8, 16, v10, v6);
            v103 = eax32;
            *reinterpret_cast<int16_t*>(&eax32) = fun_1800f900(esi8, 32, v10, v6);
            v44 = eax32;
            zf104 = *reinterpret_cast<void***>(esi8 + 52) == 0;
            if (zf104) {
                fun_1800fd90(esi8, 0, v51 + 16, a2, edi12);
                eax105 = v102 + 16;
                fun_1800fd90(esi8, 1, eax105, a2, edi12);
                *reinterpret_cast<int16_t*>(&eax105) = fun_1800dce0(a2, ebx31, 16, v103 + 16, a2, edi12, v10);
                fun_1800fd90(esi8, eax105, v103 + 16, a2, edi12);
                eax32 = a2;
                v81 = edi12;
                ecx106 = v44 + 16;
                v82 = eax32;
                v83 = ecx106;
            } else {
                __asm__("fld dword [ebp+0x8]");
                __asm__("fmul dword [esi+0x58]");
                __asm__("fstp dword [esp]");
                fun_1800fd90(esi8, 0, v51 + 16, esi8, edi12);
                __asm__("fld dword [ebp+0x8]");
                __asm__("fmul dword [esi+0x5c]");
                eax32 = v102 + 16;
                __asm__("fstp dword [esp]");
                fun_1800fd90(esi8, 1, eax32, esi8, edi12);
                __asm__("fld dword [ebp+0x8]");
                __asm__("fmul dword [esi+0x58]");
                ecx107 = v103 + 16;
                __asm__("fstp dword [esp]");
                *reinterpret_cast<int16_t*>(&eax32) = fun_1800dce0(ecx107, ebx31, 16, ecx107, esi8, edi12, v10);
                ecx106 = esi8;
                fun_1800fd90(ecx106, eax32, ecx107, esi8, edi12);
                __asm__("fld dword [ebp+0x8]");
                __asm__("fmul dword [esi+0x5c]");
                v81 = edi12;
                v82 = ecx106;
                __asm__("fstp dword [esp]");
                v83 = v44 + 16;
            }
            *reinterpret_cast<int16_t*>(&eax32) = fun_1800dce0(ecx106, ebx31, 32, v83, v82, v81, v10);
            v84 = eax32;
            goto addr_0x180109f8_66;
        } else {
            ecx108 = *reinterpret_cast<void***>(esi8 + 68);
            v109 = *reinterpret_cast<void***>(esi8 + 72);
            fun_1800fbe0(esi8, ecx108, v109);
            __asm__("fld dword [0x180347ac]");
            __asm__("fmul dword [esi+0x48]");
            edx110 = *reinterpret_cast<void***>(esi8 + 68);
            __asm__("fstp dword [esp]");
            fun_1800fc80(esi8, edx110, esi8);
            __asm__("fld dword [0x180347ac]");
            __asm__("fmul dword [ebp+0x8]");
            eax111 = *reinterpret_cast<void***>(esi8 + 0x5c0);
            __asm__("fstp dword [esp]");
            fun_1800fe50(esi8, 0, 1, eax111, esi8, esi8 + 88);
            __asm__("fld dword [0x180347ac]");
            __asm__("fmul dword [ebp+0x8]");
            eax32 = esi8 + 88;
            v112 = eax32;
            ecx113 = *reinterpret_cast<void***>(esi8 + 0x5c8);
            __asm__("fstp dword [esp]");
            *reinterpret_cast<int16_t*>(&eax32) = fun_1800dce0(ecx113, ebx31, 32, ecx113, esi8, v112, v10);
            v114 = eax32;
            *reinterpret_cast<int16_t*>(&eax32) = fun_1800dce0(ecx113, ebx31, 16, v114, ecx113, esi8, v112);
            ecx23 = esi8;
            fun_1800fe50(ecx23, eax32, v114, ecx113, esi8, v112);
            *reinterpret_cast<signed char*>(&v24) = 1;
            *reinterpret_cast<signed char*>(&v26) = 1;
        }
    }
    addr_0x180109ff_79:
    edx115 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx31) & 0x600);
    if (reinterpret_cast<int1_t>(edx115 == 0x600) && (eax32 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi8 + 0x5b4)) & reinterpret_cast<unsigned char>(edx115)), eax32 == edx115)) {
        __asm__("fld dword [ebp+0x8]");
        __asm__("fmul dword [esi+0x58]");
        __asm__("fstp dword [esp]");
        *reinterpret_cast<int16_t*>(&eax32) = fun_1800f900(esi8, 0x200, ecx23, edi12);
        eax116 = eax32 + 16;
        v117 = eax116;
        *reinterpret_cast<int16_t*>(&eax116) = fun_1800dce0(esi8, ebx31, 0x200, v117, ecx23, edi12, v10);
        fun_1800fd90(esi8, eax116, v117, ecx23, edi12);
        __asm__("fld dword [ebp+0x8]");
        __asm__("fmul dword [esi+0x5c]");
        __asm__("fstp dword [esp]");
        *reinterpret_cast<int16_t*>(&eax116) = fun_1800f900(esi8, 0x400, esi8, edi12);
        eax32 = eax116 + 16;
        v118 = eax32;
        *reinterpret_cast<int16_t*>(&eax32) = fun_1800dce0(esi8, ebx31, 0x400, v118, esi8, edi12, v10);
        ecx23 = esi8;
        fun_1800fd90(ecx23, eax32, v118, esi8, edi12);
        goto addr_0x18010a77_21;
    }
    addr_0x180109f8_66:
    ecx23 = esi8;
    fun_1800fd90(ecx23, v84, v83, v82, v81);
    goto addr_0x180109ff_79;
    addr_0x180100d4_16:
    if (*reinterpret_cast<void***>(esi8 + 0x90) != edx30) {
        ecx119 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax29) & 1);
        if (!ecx119 || *reinterpret_cast<void***>(esi8 + 52)) {
            if (ecx119) {
                if (!(*reinterpret_cast<unsigned char*>(&eax29) & 32)) {
                    __asm__("fld dword [ebp+0x8]");
                    __asm__("fmul dword [ebx]");
                    __asm__("fstp dword [esp]");
                    *reinterpret_cast<int16_t*>(&eax29) = fun_1800f900(esi8, 1, ecx119, edi12);
                    eax120 = eax29 + 16;
                    fun_1800fd90(esi8, 0, eax120, ecx119, edi12);
                    __asm__("fld dword [ebp+0x8]");
                    __asm__("fmul dword [esi+0x5c]");
                    __asm__("fstp dword [esp]");
                    *reinterpret_cast<int16_t*>(&eax120) = fun_1800f900(esi8, 2, esi8, edi12);
                    ecx121 = esi8;
                    fun_1800fd90(ecx121, 0, eax120 + 16, esi8, edi12);
                } else {
                    __asm__("fld dword [ebx]");
                    __asm__("fcomp dword [esi+0x5c]");
                    __asm__("fnstsw ax");
                    if (!(*reinterpret_cast<unsigned char*>(&eax29 + 1) & 64)) {
                        eax122 = *reinterpret_cast<void***>(esi8 + 68);
                        v123 = *reinterpret_cast<void***>(esi8 + 72);
                        fun_1800fbe0(esi8, eax122, v123);
                        edx124 = *reinterpret_cast<void***>(esi8 + 0x5c0);
                        ecx121 = esi8;
                        fun_1800fe50(ecx121, 0, 0, edx124, a2, esi8 + 88);
                        *reinterpret_cast<signed char*>(&v24) = 1;
                    } else {
                        if (!*reinterpret_cast<void***>(esi8 + 0x5cc)) {
                            ecx119 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi8 + 0x5bc) + 8);
                            eax125 = *reinterpret_cast<void***>(ecx119);
                            eax126 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax125 + 28)());
                            *reinterpret_cast<void***>(esi8 + 0x5cc) = eax126;
                        }
                        fun_1800cf10(ecx119, 0, v10, v6, v4, v28, v25, v127, v128, v129, v27, v26, v130, v24);
                        __asm__("fmul dword [ebp+0x8]");
                        __asm__("fstp dword [esp]");
                        v131 = *reinterpret_cast<void***>(esi8 + 0x5cc);
                        ecx121 = esi8;
                        fun_1800fe10(ecx121, 0, v131, ecx119);
                        *reinterpret_cast<signed char*>(&v27) = 1;
                    }
                }
                eax132 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi8 + 0x5b4)) & 48);
                if (*reinterpret_cast<signed char*>(&eax132) == 48) {
                    __asm__("fld dword [ebp+0x8]");
                    __asm__("fmul dword [ebx]");
                    __asm__("fstp dword [esp]");
                    *reinterpret_cast<int16_t*>(&eax132) = fun_1800f900(esi8, 16, ecx121, edi12);
                    eax133 = eax132 + 16;
                    fun_1800fd90(esi8, 0, eax133, ecx121, edi12);
                    __asm__("fld dword [ebp+0x8]");
                    __asm__("fmul dword [esi+0x5c]");
                    __asm__("fstp dword [esp]");
                    *reinterpret_cast<int16_t*>(&eax133) = fun_1800f900(esi8, 32, esi8, edi12);
                    eax132 = eax133 + 16;
                    ecx121 = esi8;
                    fun_1800fd90(ecx121, 0, eax132, esi8, edi12);
                }
                __asm__("fld dword [ebp-0x4]");
                __asm__("fcomp dword [0x1803422c]");
                __asm__("fnstsw ax");
                if (!(*reinterpret_cast<unsigned char*>(&eax132 + 1) & 64) && (eax134 = *reinterpret_cast<void***>(esi8 + 0x8c), v135 = reinterpret_cast<void**>(0), !(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax134) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax134 == 0)))) {
                    ebx136 = esi8 + 0xd0;
                    do {
                        if (*reinterpret_cast<signed char*>(ebx136 + 0xffffffd1)) {
                            if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(ebx136 + 0xffffffc8)) <= reinterpret_cast<signed char>(0xb4)) {
                                __asm__("fld dword [ebp-0x1c]");
                                __asm__("fsub dword [ebp-0x10]");
                            } else {
                                __asm__("fld dword [ebp-0x10]");
                                __asm__("fadd dword [ebp-0x1c]");
                            }
                            __asm__("fmul dword [ebp-0x4]");
                            __asm__("fstp dword [esp]");
                            fun_1800fd90(esi8, 0, ebx136, ecx121, edi12);
                        }
                        ecx121 = *reinterpret_cast<void***>(esi8 + 0x8c);
                        eax137 = v135 + 1;
                        ebx136 = ebx136 + 96;
                        v135 = eax137;
                    } while (reinterpret_cast<signed char>(eax137) < reinterpret_cast<signed char>(ecx121));
                }
            } else {
                __asm__("fld dword [ebp+0x8]");
                __asm__("fmul dword [esi+0x58]");
                __asm__("fstp dword [esp]");
                *reinterpret_cast<int16_t*>(&eax29) = fun_1800f900(esi8, 1, ecx119, edi12);
                eax138 = eax29 + 16;
                fun_1800fd90(esi8, 0, eax138, ecx119, edi12);
                __asm__("fld dword [ebp+0x8]");
                __asm__("fmul dword [esi+0x5c]");
                __asm__("fstp dword [esp]");
                *reinterpret_cast<int16_t*>(&eax138) = fun_1800f900(esi8, 2, esi8, edi12);
                fun_1800fd90(esi8, 0, eax138 + 16, esi8, edi12);
            }
            if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi8 + 0x90)) >= reinterpret_cast<signed char>(4) && (eax139 = *reinterpret_cast<void***>(esi8 + 0x8c), v140 = reinterpret_cast<void**>(0), !(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax139) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax139 == 0)))) {
                ebx141 = reinterpret_cast<struct s545*>(esi8 + 0x98);
                do {
                    if (reinterpret_cast<signed char>(ebx141->f0) >= reinterpret_cast<signed char>(91) && reinterpret_cast<signed char>(ebx141->f0) <= reinterpret_cast<signed char>(0x10d)) {
                        if (reinterpret_cast<signed char>(ebx141->f0) <= reinterpret_cast<signed char>(0xb4)) {
                            if (reinterpret_cast<signed char>(ebx141->f0) >= reinterpret_cast<signed char>(0xb4)) {
                                v142 = a2;
                            } else {
                                __asm__("fld dword [ebp+0x8]");
                                __asm__("fmul dword [esi+0x5c]");
                                __asm__("fstp dword [ebp-0x10]");
                            }
                        } else {
                            __asm__("fld dword [ebp+0x8]");
                            __asm__("fmul dword [esi+0x58]");
                            __asm__("fstp dword [ebp-0x10]");
                        }
                        fun_1800fd90(esi8, 0, &ebx141->f16, v142, edi12);
                    }
                    eax143 = v140 + 1;
                    ebx141 = reinterpret_cast<struct s545*>(reinterpret_cast<uint32_t>(ebx141) + 96);
                    less144 = reinterpret_cast<signed char>(eax143) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi8 + 0x8c));
                    v140 = eax143;
                } while (less144);
            }
        } else {
            if (*reinterpret_cast<unsigned char*>(&eax29) & 8) {
                __asm__("fld dword [ebp+0x8]");
                __asm__("fmul dword [esi+0x70]");
                __asm__("fstp dword [ebp-0x8]");
                __asm__("fld dword [ebp+0x8]");
                __asm__("fmul dword [esi+0x74]");
                __asm__("fstp dword [esp]");
                fun_1800fd90(esi8, 0, esi8 + 0x3f8, ecx119, edi12);
                __asm__("fld dword [ebp+0x8]");
                __asm__("fmul dword [esi+0x78]");
                __asm__("fstp dword [esp]");
                fun_1800fd90(esi8, 0, esi8 + 0x420, esi8, edi12);
            }
            edx145 = *reinterpret_cast<void***>(esi8 + 0x8c);
            ecx146 = reinterpret_cast<void**>(0);
            if (reinterpret_cast<signed char>(edx145) <= reinterpret_cast<signed char>(0)) 
                goto addr_0x180101f8_115; else 
                goto addr_0x180101df_116;
        }
    } else {
        if (!(*reinterpret_cast<unsigned char*>(&edx30) & *reinterpret_cast<unsigned char*>(&eax29))) {
            fun_1800fd90(esi8, 0, esi8 + 0xa8, a2, edi12);
        } else {
            v147 = edi12;
            if (!(*reinterpret_cast<unsigned char*>(&eax29) & 8)) {
                v148 = a2;
                v149 = esi8 + 0xa8;
            } else {
                __asm__("fld dword [ebp+0x8]");
                __asm__("fmul dword [esi+0x74]");
                __asm__("fstp dword [esp]");
                fun_1800fd90(esi8, 0, esi8 + 0x3f8, a2, v147);
                __asm__("fld dword [ebp+0x8]");
                __asm__("fmul dword [esi+0x78]");
                __asm__("fstp dword [esp]");
                fun_1800fd90(esi8, 0, esi8 + 0x420, esi8, edi12);
                __asm__("fld dword [ebp+0x8]");
                __asm__("fmul dword [esi+0x70]");
                v147 = edi12;
                v148 = esi8;
                __asm__("fstp dword [esp]");
                v149 = esi8 + 0xa8;
            }
            fun_1800fd90(esi8, 0, v149, v148, v147);
            fun_1800fd90(esi8, 0, esi8 + 0xd0, 0, edi12);
        }
    }
    addr_0x180105cf_123:
    if (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi8 + 0x5b4)) & 8 && reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi8 + 4)) & 1) {
        fun_1800fd90(esi8, 0, esi8 + 0x448, a2, edi12);
        goto addr_0x18010d5f_61;
    }
    addr_0x180101f8_115:
    eax150 = edx145 + 0xffffffff;
    addr_0x18010200_125:
    ebx151 = reinterpret_cast<struct s546*>((reinterpret_cast<uint32_t>(eax150 + reinterpret_cast<unsigned char>(eax150) * 2) << 5) + reinterpret_cast<unsigned char>(esi8) + 0x98);
    eax152 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ecx146) - reinterpret_cast<unsigned char>(edx145));
    eax153 = -reinterpret_cast<uint32_t>(eax152);
    eax154 = eax153 - (eax153 + reinterpret_cast<uint1_t>(eax153 < eax153 + reinterpret_cast<uint1_t>(!!eax152))) & reinterpret_cast<unsigned char>(ecx146);
    eax155 = ebx151->f0;
    ecx156 = reinterpret_cast<struct s547*>((eax154 + eax154 * 2 << 5) + reinterpret_cast<unsigned char>(esi8) + 0x98);
    ecx157 = ecx156->f0;
    if (reinterpret_cast<signed char>(eax155) > reinterpret_cast<signed char>(ecx157) && reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi8 + 32)) <= reinterpret_cast<signed char>(ecx157)) {
        eax155 = eax155 - 0x168;
    }
    edx158 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi8 + 32)) - reinterpret_cast<unsigned char>(eax155));
    al159 = ebx151->f8;
    __asm__("fild dword [ebp-0x20]");
    __asm__("fmul dword [ebx+0xc]");
    __asm__("fstp dword [ebp-0x10]");
    if (!al159) {
        ecx160 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp3) + 0xffffffe0);
        edx158 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebp3) + 0xffffffdc);
        *reinterpret_cast<int16_t*>(&eax162) = fun_1800dbe0(ecx160, v161, edx158, ecx160);
        __asm__("fld dword [ebp-0x24]");
        __asm__("fmul dword [ebp-0x8]");
        __asm__("fstp dword [esp]");
        fun_1800fd90(esi8, 0, &ebx151->f16, ecx160, edi12);
        __asm__("fld dword [ebp-0x20]");
        __asm__("fmul dword [ebp-0x8]");
        v163 = edi12;
        v164 = esi8;
        __asm__("fstp dword [esp]");
        v165 = reinterpret_cast<void**>(&ecx156->f16);
    } else {
        __asm__("fld dword [0x18034238]");
        __asm__("fsub dword [ebp-0x10]");
        __asm__("fmul dword [ebp-0x8]");
        __asm__("fstp dword [esp]");
        fun_1800fd90(esi8, 0, &ebx151->f16, ecx157, edi12);
        __asm__("fld dword [ebp-0x10]");
        __asm__("fmul dword [ebp-0x8]");
        v163 = edi12;
        v164 = esi8;
        eax162 = reinterpret_cast<void**>(&ecx156->f16);
        __asm__("fstp dword [esp]");
        v165 = eax162;
    }
    fun_1800fd90(esi8, 0, v165, v164, v163);
    __asm__("fld dword [ebp-0x4]");
    __asm__("fcomp dword [0x1803422c]");
    __asm__("fnstsw ax");
    if (!(*reinterpret_cast<unsigned char*>(&eax162 + 1) & 64) && (eax166 = *reinterpret_cast<void***>(esi8 + 0x8c), v167 = reinterpret_cast<void**>(0), !(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax166) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax166 == 0)))) {
        ebx168 = esi8 + 0xd0;
        do {
            if (*reinterpret_cast<signed char*>(ebx168 + 0xffffffd1)) {
                ecx169 = *reinterpret_cast<void***>(esi8 + 32);
                eax170 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx168 + 0xffffffc8)) - reinterpret_cast<unsigned char>(ecx169));
                if (reinterpret_cast<signed char>(eax170) < reinterpret_cast<signed char>(0)) {
                    eax170 = eax170 + 0x168;
                }
                if (reinterpret_cast<signed char>(eax170) > reinterpret_cast<signed char>(0xb4)) {
                    edx158 = reinterpret_cast<void**>(0x168 - reinterpret_cast<unsigned char>(eax170));
                    eax170 = edx158;
                }
                __asm__("cdq ");
                __asm__("fild dword [ebp-0x20]");
                __asm__("fmul dword [0x18038c90]");
                __asm__("fstp dword [ebp-0x20]");
                __asm__("fld dword [ebp-0x20]");
                __asm__("fistp dword [ebp-0x10]");
                fun_1800db30(ecx169, &v171->f90);
                __asm__("fmul dword [ebp-0x4]");
                __asm__("fstp dword [ebp-0x20]");
                fun_1800fd90(esi8, 0, ebx168, reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax170) - reinterpret_cast<unsigned char>(edx158)) >> 1, edi12);
            }
            eax172 = v167 + 1;
            ebx168 = ebx168 + 96;
            less173 = reinterpret_cast<signed char>(eax172) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi8 + 0x8c));
            v167 = eax172;
        } while (less173);
        goto addr_0x180105cf_123;
    }
    addr_0x180101df_116:
    ebx174 = *reinterpret_cast<void***>(esi8 + 32);
    eax175 = reinterpret_cast<struct s545*>(esi8 + 0x98);
    do {
        if (reinterpret_cast<signed char>(ebx174) <= reinterpret_cast<signed char>(eax175->f0)) 
            break;
        ++ecx146;
        eax175 = reinterpret_cast<struct s545*>(reinterpret_cast<uint32_t>(eax175) + 96);
    } while (reinterpret_cast<signed char>(ecx146) < reinterpret_cast<signed char>(edx145));
    if (!ecx146) 
        goto addr_0x180101f8_115;
    eax150 = ecx146 + 0xffffffff;
    goto addr_0x18010200_125;
    addr_0x1800ff68_12:
    if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi8 + 4)) & 4) || ah176 & 64) {
        a2 = reinterpret_cast<void**>(0);
    } else {
        __asm__("fld dword [esi+0x40]");
        __asm__("fmul dword [esi+0x1c]");
        __asm__("fmul st0, st1");
        __asm__("fstp dword [ebp+0x8]");
        if (*reinterpret_cast<void***>(esi8 + 56) != 0xbf800000) {
            __asm__("fld dword [ebp+0x8]");
            __asm__("fmul dword [esi+0x38]");
            __asm__("fstp dword [ebp+0x8]");
        }
    }
    __asm__("fld dword [esi+0x3c]");
    __asm__("fmul dword [esi+0x1c]");
    eax177 = *reinterpret_cast<void***>(esi8 + 0x8c);
    v178 = reinterpret_cast<void**>(0);
    __asm__("fmul st0, st1");
    __asm__("fstp dword [ebp-0x8]");
    __asm__("fstp st0");
    if (reinterpret_cast<signed char>(eax177) > reinterpret_cast<signed char>(0)) {
        ebx179 = esi8 + 0xa8;
        do {
            ecx180 = *reinterpret_cast<void***>(esi8 + 76);
            eax181 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx179 + 0xfffffff4)) & reinterpret_cast<unsigned char>(ecx180));
            if (eax181 && ((*reinterpret_cast<int16_t*>(&eax181) = fun_1800dce0(ecx180, ecx180, eax181, v10, v6, v4, v28), fun_1800fd90(esi8, eax181, ebx179, v182, edi12), !(*reinterpret_cast<unsigned char*>(&eax181 + 1) & 64)) && *reinterpret_cast<signed char*>(ebx179 + 0xfffffff9))) {
                fun_1800fd90(esi8, eax181, ebx179 + 40, a2, edi12);
            }
            eax177 = v178 + 1;
            ebx179 = ebx179 + 96;
            less183 = reinterpret_cast<signed char>(eax177) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi8 + 0x8c));
            v178 = eax177;
        } while (less183);
    }
    if (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi8 + 76)) & 4 && (*reinterpret_cast<int16_t*>(&eax177) = fun_1800f900(esi8, 4, v10, v6), !eax177)) {
        edx184 = *reinterpret_cast<void***>(esi8 + 76);
        *reinterpret_cast<int16_t*>(&eax177) = fun_1800dce0(esi8, edx184, 4, v10, v6, v4, v28);
        __asm__("fld dword [0x180347ac]");
        __asm__("fmul dword [ebp-0x8]");
        ebx185 = eax177;
        __asm__("fstp dword [esp]");
        *reinterpret_cast<int16_t*>(&eax177) = fun_1800f900(esi8, 1, esi8, edi12);
        eax186 = eax177 + 16;
        fun_1800fd90(esi8, ebx185, eax186, esi8, edi12);
        __asm__("fld dword [0x180347ac]");
        __asm__("fmul dword [ebp-0x8]");
        __asm__("fstp dword [esp]");
        *reinterpret_cast<int16_t*>(&eax186) = fun_1800f900(esi8, 2, esi8, edi12);
        fun_1800fd90(esi8, ebx185, eax186 + 16, esi8, edi12);
        goto addr_0x18010d5f_61;
    }
}

struct s549 {
    int32_t f0;
    struct s86* f4;
};

void fun_18010e20(struct s80* ecx, void*** a2, void** a3, void** a4) {
    void** v5;
    void** v6;
    void** ebp7;
    void** ebp8;
    void** v9;
    void** esi10;
    struct s80* esi11;
    void** v12;
    void** ebx13;
    void** v14;
    void** edi15;
    void*** ebx16;
    uint1_t less_or_equal17;
    int32_t v18;
    struct s549* edi19;
    int32_t eax20;
    void** v21;
    struct s86* ecx22;
    int32_t eax23;
    int1_t less24;
    void** eax25;
    struct s84*** edi26;
    struct s84** ecx27;
    void** v28;
    int32_t eax29;
    struct s84* edx30;
    void** eax31;
    int1_t less32;
    void** eax33;
    struct s85*** edi34;
    struct s85** ecx35;
    void** v36;
    int32_t eax37;
    struct s85* edx38;
    void*** v39;
    void** eax40;
    int1_t less41;
    struct s83** ecx42;
    struct s83* edx43;

    v5 = reinterpret_cast<void**>(__return_address());
    v6 = ebp7;
    ebp8 = a4;
    v9 = esi10;
    esi11 = ecx;
    if (ebp8) {
        v12 = ebx13;
        v14 = edi15;
        fun_18012f60(ecx, a3);
        ebx16 = a2;
        less_or_equal17 = reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(esi11->f1500 < 0) | reinterpret_cast<uint1_t>(esi11->f1500 == 0));
        v18 = 0;
        if (!less_or_equal17) {
            edi19 = reinterpret_cast<struct s549*>(&esi11->f1512);
            do {
                eax20 = edi19->f0;
                v21 = esi11->f128;
                ecx22 = edi19->f4;
                fun_18018da0(ecx22, ebx16 + (eax20 + eax20 * 4) * 4, ebp8, v21, v14, v12, v9, v6, v5);
                eax23 = v18 + 1;
                edi19 = reinterpret_cast<struct s549*>(reinterpret_cast<int32_t>(edi19) + 12);
                less24 = eax23 < esi11->f1500;
                v18 = eax23;
            } while (less24);
        }
        eax25 = esi11->f1504;
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax25) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax25 == 0))) {
            edi26 = &esi11->f1708;
            do {
                ecx27 = *edi26;
                v28 = esi11->f128;
                eax29 = *reinterpret_cast<int32_t*>(edi26 - 1);
                edx30 = *ecx27;
                edx30->f32(ebx16 + (eax29 + eax29 * 4) * 4, ebp8, v28);
                eax31 = v5 + 1;
                edi26 = edi26 + 2;
                less32 = reinterpret_cast<signed char>(eax31) < reinterpret_cast<signed char>(esi11->f1504);
                v5 = eax31;
            } while (less32);
        }
        eax33 = esi11->f1508;
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax33) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax33 == 0))) {
            edi34 = &esi11->f1744;
            do {
                ecx35 = *edi34;
                v36 = esi11->f128;
                eax37 = *reinterpret_cast<int32_t*>(edi34 - 1);
                edx38 = *ecx35;
                v39 = ebx16 + (*reinterpret_cast<int32_t*>(edi34 - 2) + *reinterpret_cast<int32_t*>(edi34 - 2) * 4) * 4;
                edx38->f28(v39, ebx16 + (eax37 + eax37 * 4) * 4, ebp8, v36);
                eax40 = v6 + 1;
                edi34 = edi34 + 3;
                less41 = reinterpret_cast<signed char>(eax40) < reinterpret_cast<signed char>(esi11->f1508);
                v6 = eax40;
            } while (less41);
        }
        if (reinterpret_cast<int1_t>(a3 == 1)) {
            ecx42 = esi11->f1464;
            edx43 = *ecx42;
            edx43->f20(ebx16, ebp8);
        }
        esi11->f128 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi11->f128) + reinterpret_cast<unsigned char>(ebp8));
    }
    goto v5;
}

struct s550 {
    signed char[16] pad16;
    void** f16;
};

void fun_18010f50(void** ecx, void** a2) {
    struct s550* eax3;
    void** esi4;
    void** v5;
    void** eax6;
    void** v7;
    void** edx8;
    void** eax9;
    void** edx10;

    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx + 0x84) == 1)) {
        *reinterpret_cast<int16_t*>(&eax3) = fun_1800f900(ecx, 1, 0, 0);
        fun_18018d50(&eax3->f16, 0, 0, esi4, __return_address(), a2);
        v5 = reinterpret_cast<void**>(0);
    } else {
        eax6 = *reinterpret_cast<void***>(ecx + 0x5bc);
        v7 = *reinterpret_cast<void***>(eax6 + 16);
        *reinterpret_cast<int16_t*>(&eax6) = fun_1800f900(ecx, 1, v7, 0);
        fun_18018d50(eax6 + 16, v7, 0, esi4, __return_address(), a2);
        edx8 = *reinterpret_cast<void***>(ecx + 0x5bc);
        eax9 = *reinterpret_cast<void***>(edx8 + 20);
        v5 = eax9;
    }
    *reinterpret_cast<int16_t*>(&eax9) = fun_1800f900(ecx, 2, v5, 0);
    fun_18018d50(eax9 + 16, v5, 0, esi4, __return_address(), a2);
    edx10 = *reinterpret_cast<void***>(ecx);
    *reinterpret_cast<void***>(edx10 + 48)(ecx);
    return;
}

void fun_18010fc0(void** ecx) {
    void** eax2;

    eax2 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x5b8));
    *reinterpret_cast<void***>(eax2 + 36)();
    fun_1800fcd0(ecx);
    *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(1);
    return;
}

int16_t fun_18014b40(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18014b60(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_180148e0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18014900(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_180146a0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_180146c0(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_180144b0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_180144d0(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s551 {
    signed char[4] pad4;
    signed char f4;
};

void fun_18011cc0(struct s115* ecx) {
    int32_t v2;
    int32_t esi3;
    struct s115* esi4;
    int32_t ebp5;
    void* esp6;
    int32_t ecx7;
    struct s551* eax8;
    int32_t* esp9;
    struct s117** esp10;
    void* esp11;
    struct s119* ebx12;
    int32_t* esp13;
    int32_t v14;
    uint32_t v15;
    void* v16;
    int32_t eax17;
    uint1_t less_or_equal18;
    struct s121* edi19;
    void* esp20;
    struct s116* eax21;
    int1_t less22;
    struct s121* edi23;
    struct s116* edx24;
    int32_t eax25;
    int32_t edx26;
    struct s121* edi27;
    int32_t v28;
    struct s116* eax29;
    int32_t v30;

    v2 = esi3;
    esi4 = ecx;
    ebp5 = 0;
    esp6 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x178 - 4 - 4 - 4 - 4);
    ecx7 = esi4->f1252;
    if (!(reinterpret_cast<uint1_t>(ecx7 < 0) | reinterpret_cast<uint1_t>(ecx7 == 0))) {
        eax8 = reinterpret_cast<struct s551*>(reinterpret_cast<int32_t>(esi4) + 0x4f0);
        do {
            if (eax8->f4) {
                ++ebp5;
            }
            eax8 = reinterpret_cast<struct s551*>(reinterpret_cast<int32_t>(eax8) + 16);
            --ecx7;
        } while (ecx7);
    }
    esp9 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esp6) - 4);
    esp10 = reinterpret_cast<struct s117**>(esp9 - 1 - 1);
    fun_18013a40(esi4, esp10 + 29, 36, esp9 + 17, reinterpret_cast<int32_t>(esp6) + 32, ebp5);
    esp11 = reinterpret_cast<void*>(esp10 - 1 - 1 - 1 + 5 + 1);
    if (!(reinterpret_cast<uint1_t>(ebp5 < 0) | reinterpret_cast<uint1_t>(ebp5 == 0))) {
        ebx12 = reinterpret_cast<struct s119*>(reinterpret_cast<int32_t>(esi4) + 0x764);
        do {
            esp13 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esp11) - 4);
            v14 = esi4->f548;
            fun_180149b0(ebx12, esp13 + v15 * 2 + 27, reinterpret_cast<int32_t>(v16) - v15, v14);
            esp11 = reinterpret_cast<void*>(esp13 - 1 - 1 - 1 + 3 + 1);
            ebx12 = reinterpret_cast<struct s119*>(reinterpret_cast<int32_t>(ebx12) + 100);
            --ebp5;
        } while (ebp5);
    }
    eax17 = 0;
    less_or_equal18 = reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(esi4->f552 < 0) | reinterpret_cast<uint1_t>(esi4->f552 == 0));
    if (!less_or_equal18) {
        edi19 = reinterpret_cast<struct s121*>(&esi4->f2692);
        do {
            esp20 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp11) - 4);
            __asm__("fild dword [eax+0x8]");
            __asm__("fstp dword [esp+0x24]");
            __asm__("fild dword [eax+0x4]");
            eax21 = edi19->f0;
            __asm__("fstp dword [esp+0x28]");
            eax21->f4(edi19, 9, reinterpret_cast<int32_t>(esp20) + 20, 16);
            esp11 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp20) - 4 - 4 - 4 + 4);
            eax17 = v2 + 1;
            less22 = eax17 < esi4->f552;
            v2 = eax17;
        } while (less22);
    }
    if (eax17 < 20) {
        edi23 = reinterpret_cast<struct s121*>(&esi4->f2692);
        do {
            edx24 = edi23->f0;
            edx24->f4(edi23, 9, reinterpret_cast<int32_t>(esp11) + 16, 16);
            esp11 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp11) - 4 - 4 - 4 - 4 + 4);
            eax25 = v2 + 1;
            v2 = eax25;
        } while (eax25 < 20);
    }
    edx26 = esi4->f56;
    edi27 = reinterpret_cast<struct s121*>(&esi4->f2692);
    v28 = esi4->f60;
    fun_18014770(edi27, edx26, v28);
    eax29 = edi27->f0;
    eax29->f4(edi27);
    goto v30;
}

struct s552 {
    signed char[4] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[23] pad32;
    int32_t f32;
    signed char[12] pad48;
    void** f48;
    signed char[23] pad72;
    int32_t f72;
};

void fun_180145d0(struct s552* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18) {
    void** v19;
    void** v20;
    void** ebp21;
    void** v22;
    void** esi23;
    struct s552* esi24;
    void** v25;
    void** edi26;
    void** ebp27;
    void** v28;
    int16_t ax29;
    void** ecx30;
    void** v31;
    void** edx32;
    int32_t edi33;
    void** v34;
    void** ebx35;
    void*** ebx36;
    void** ecx37;

    v19 = reinterpret_cast<void**>(__return_address());
    v20 = ebp21;
    v22 = esi23;
    esi24 = ecx;
    v25 = edi26;
    ebp27 = reinterpret_cast<void**>(&esi24->f8);
    v28 = esi24->f4;
    ax29 = fun_180192b0(ebp27, v28, a2, v25, v22, v20, v19, a2, a3);
    if (!*reinterpret_cast<signed char*>(&ax29)) {
        esi24->f32 = 0;
        return;
    } else {
        ecx30 = esi24->f4;
        v31 = ebp27;
        edx32 = *reinterpret_cast<void***>(ecx30);
        *reinterpret_cast<void***>(edx32 + 28)();
        edi33 = 0;
        if (esi24->f72 <= 0) {
            esi24->f32 = 0;
            goto v20;
        } else {
            v34 = ebx35;
            ebx36 = &esi24->f48;
            do {
                ecx37 = *ebx36;
                fun_18019740(ecx37, ebp27, v34, v31, v25, v22, v20, v19, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
                ++edi33;
                ebx36 = ebx36 + 4;
            } while (edi33 < esi24->f72);
            esi24->f32 = 0;
            goto v20;
        }
    }
}

struct s554 {
    signed char[4] pad4;
    int32_t f4;
};

struct s553 {
    signed char[4] pad4;
    struct s554** f4;
};

void fun_180147c0(struct s553* ecx, int32_t a2, int32_t a3, int32_t a4) {
    int32_t eax5;
    struct s554* eax6;
    struct s554* eax7;

    eax5 = a2 - 9;
    if (!eax5) {
        if (ecx->f4) {
            eax6 = *ecx->f4;
            eax6->f4(9, a3, a4);
        }
    } else {
        if (!(eax5 - 1) && ecx->f4) {
            eax7 = *ecx->f4;
            eax7->f4();
            goto 10;
        }
    }
    return;
}

void fun_18011ed6() {
}

void fun_18011f50(struct s103* ecx, void** a2) {
    uint32_t ebx3;

    ebx3 = reinterpret_cast<unsigned char>(ecx->f8) ^ reinterpret_cast<unsigned char>(a2);
    fun_18013170(ecx, a2);
    if (reinterpret_cast<int1_t>(ecx->f16 == 2) && *reinterpret_cast<unsigned char*>(&ebx3) & 3) {
        fun_18011750(ecx);
    }
    return;
}

void** fun_18011f80(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** edi6;
    void** esi7;
    void** eax8;
    void** edx9;
    void** ecx10;
    void** edx11;
    void** eax12;
    void** ecx13;
    void** v14;

    eax8 = fun_1802b2bb(ecx, 0x6f8, edi6, esi7, __return_address(), a2, a3, a4, a5);
    if (!eax8 || (edx9 = *reinterpret_cast<void***>(ecx + 0x328), ecx10 = *reinterpret_cast<void***>(ecx + 12), edx11 = *reinterpret_cast<void***>(ecx + 4), *reinterpret_cast<int16_t*>(&eax8) = fun_1800f550(eax8, edx11, ecx10, edx9, ecx + 0xc28, edi6, esi7, __return_address(), a2, a3), !eax8)) {
        return 0;
    } else {
        eax12 = *reinterpret_cast<void***>(ecx + 0x4e8);
        ecx13 = *reinterpret_cast<void***>(ecx + 0x4e4);
        v14 = *reinterpret_cast<void***>(ecx + 0x32c);
        fun_1800f940(eax8, v14, eax12, ecx + 0x4ec, ecx13, ecx + 0x56c, eax12, ecx + 0x58c, ecx + 0x470, ecx + 0x4bc);
        fun_18013c10(ecx, eax8);
        return eax8;
    }
}

void fun_18012010(struct s103* ecx, void** a2, void** a3) {
    void** ebx4;
    void** esi5;
    void** eax6;
    void** eax7;

    ebx4 = a3;
    esi5 = a2;
    if (!ebx4) {
        if (!esi5) 
            goto addr_0x1801205d_3;
        if (ecx->f16 != esi5) 
            goto addr_0x18012038_5;
    } else {
        if (!esi5) {
            *reinterpret_cast<int16_t*>(&eax6) = fun_1800dcc0(ebx4);
            esi5 = eax6;
            goto addr_0x18012040_8;
        }
    }
    addr_0x18012045_9:
    if (ecx->f812 == ebx4) {
        addr_0x1801205d_3:
        return;
    } else {
        addr_0x1801204d_10:
        ecx->f16 = esi5;
        ecx->f812 = ebx4;
        fun_18011750(ecx);
        goto addr_0x1801205d_3;
    }
    addr_0x18012038_5:
    *reinterpret_cast<int16_t*>(&eax7) = fun_18010e00(esi5);
    ebx4 = eax7;
    addr_0x18012040_8:
    if (ecx->f16 != esi5) 
        goto addr_0x1801204d_10; else 
        goto addr_0x18012045_9;
}

struct s555 {
    signed char[4] pad4;
    void* f4;
};

struct s556 {
    signed char[32] pad32;
    int32_t f32;
};

struct s557 {
    signed char[32] pad32;
    int32_t f32;
};

void fun_18012070(void** ecx, struct s555* a2, int32_t a3, void** a4) {
    void** v5;
    int32_t edx6;
    void** eax7;
    void** v8;
    void** ebx9;
    void** v10;
    void** ebp11;
    void** v12;
    void** esi13;
    void*** esp14;
    void** v15;
    void** edi16;
    void** esi17;
    void** ecx18;
    void** edx19;
    void** ebx20;
    void** eax21;
    void** ebp22;
    void** v23;
    void** v24;
    int16_t ax25;
    void* esp26;
    void** ecx27;
    void** v28;
    void** v29;
    int16_t ax30;
    void** ecx31;
    void** v32;
    void** edx33;
    void** ecx34;
    void** v35;
    void** eax36;
    void** edi37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** ecx70;
    void** edx71;
    void** ecx72;
    void** eax73;
    void** ecx74;
    void** v75;
    void** edx76;
    void** ecx77;
    void** v78;
    void** eax79;
    void* esp80;
    void** ebp81;
    struct s99* edi82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** v92;
    struct s102* edx93;
    void** v94;
    struct s556* eax95;
    void** v96;
    void** edx97;
    void** v98;
    struct s557* eax99;
    void** v100;
    void** ecx101;
    void** ebp102;
    int16_t ax103;
    void* esp104;
    void** ecx105;
    void** v106;
    void** edx107;
    void** eax108;
    void** edi109;
    void*** v110;
    void** ecx111;
    int1_t less112;
    void** ebp113;
    void** v114;
    void** ecx115;
    void** v116;
    void** edi117;
    int1_t zf118;
    void** v119;
    void** ecx120;
    void** edi121;
    void** v122;
    void** v123;
    void** eax124;
    void** edx125;
    void** v126;
    uint32_t ecx127;
    void** v128;
    void** ecx129;
    void*** esp130;
    void** ecx131;
    void** v132;
    void** ebp133;
    void* esp134;
    void** eax135;
    void** edi136;
    int16_t ax137;
    void** ecx138;
    void** edx139;
    void* esp140;
    int32_t v141;
    void** ecx142;
    void** edx143;
    int32_t v144;
    void** ecx145;
    void** edx146;
    void** ecx147;
    int32_t v148;
    void** eax149;
    void*** ecx150;
    int32_t v151;

    v5 = reinterpret_cast<void**>(__return_address());
    edx6 = a3;
    eax7 = reinterpret_cast<void**>(0);
    v8 = ebx9;
    v10 = ebp11;
    v12 = esi13;
    esp14 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 64 - 4 - 4 - 4 - 4);
    v15 = edi16;
    esi17 = ecx;
    if (!(reinterpret_cast<uint1_t>(edx6 < 0) | reinterpret_cast<uint1_t>(edx6 == 0))) {
        ecx18 = &a2->f4;
        do {
            ecx18 = ecx18 + 5;
            eax7 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax7) + reinterpret_cast<uint32_t>(*ecx18));
            --edx6;
        } while (edx6);
    }
    if (eax7 != *reinterpret_cast<void***>(esi17 + 16) && (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(esi17 + 0x32c) == 0x107) || eax7 != 2)) {
        edx19 = *reinterpret_cast<void***>(esi17);
        *reinterpret_cast<void***>(edx19 + 40)(esi17, eax7, 0, v15);
        esp14 = esp14 - 4 - 4 - 4 + 4;
    }
    ebx20 = a4;
    eax21 = *reinterpret_cast<void***>(esi17 + 0xc44);
    ebp22 = esi17 + 0x4bc;
    ax25 = fun_180192b0(ebp22, eax21, ebx20, v15, v12, v10, v8, v23, v24);
    esp26 = reinterpret_cast<void*>(esp14 - 4 - 4 - 4 + 8 + 4);
    if (*reinterpret_cast<signed char*>(&ax25) || (ecx27 = *reinterpret_cast<void***>(esi17 + 0xc48), ax30 = fun_180192b0(ebp22, ecx27, ebx20, v15, v12, v10, v8, v28, v29), esp26 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp26) - 4 - 4 - 4 + 8 + 4), !!*reinterpret_cast<signed char*>(&ax30))) {
        ecx31 = *reinterpret_cast<void***>(esi17 + 0xc44);
        v32 = ebp22;
        edx33 = *reinterpret_cast<void***>(ecx31);
        *reinterpret_cast<void***>(edx33 + 28)(v32, v15);
        ecx34 = *reinterpret_cast<void***>(esi17 + 0xc48);
        v35 = ebp22;
        eax36 = *reinterpret_cast<void***>(ecx34);
        *reinterpret_cast<void***>(eax36 + 28)();
        edi37 = esi17 + 0x420;
        fun_18019740(edi37, ebp22, v35, v32, v15, v12, v10, v8, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v5);
        fun_18019740(edi37, ebp22, v35, v32, v15, v12, v10, v8, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v5);
        fun_18019850(esi17 + 0x330, ebp22, v35, v32, v15);
        fun_18019850(esi17 + 0x358, ebp22, v35, v32, v15);
        esp26 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp26) - 4 - 4 + 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4 - 4 - 4 + 4 + 4 - 4 - 4 + 4 + 4 - 4 - 4 + 4 + 4);
    }
    ecx70 = *reinterpret_cast<void***>(esi17 + 0xc28);
    v32 = ebx20;
    edx71 = *reinterpret_cast<void***>(ecx70);
    *reinterpret_cast<void***>(edx71 + 32)(v32, v15);
    ecx72 = *reinterpret_cast<void***>(esi17 + 0xc2c);
    v35 = ebx20;
    eax73 = *reinterpret_cast<void***>(ecx72);
    *reinterpret_cast<void***>(eax73 + 32)();
    ecx74 = *reinterpret_cast<void***>(esi17 + 0xc30);
    v75 = ebx20;
    edx76 = *reinterpret_cast<void***>(ecx74);
    *reinterpret_cast<void***>(edx76 + 32)(v75);
    ecx77 = *reinterpret_cast<void***>(esi17 + 0xc34);
    v78 = ebx20;
    eax79 = *reinterpret_cast<void***>(ecx77);
    *reinterpret_cast<void***>(eax79 + 32)(v78, v75);
    esp80 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp26) - 4 - 4 + 4 - 4 - 4 + 4 - 4 - 4 + 4 - 4 - 4 + 4);
    ebp81 = reinterpret_cast<void**>(0);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi17 + 16)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(esi17 + 16) == 0))) {
        edi82 = reinterpret_cast<struct s99*>(esi17 + 0x764);
        do {
            fun_18014a10(edi82, ebx20, v78, v75, v35, v32, v15, v12, v10, v8, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92);
            esp80 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp80) - 4 - 4 + 4 + 4);
            ++ebp81;
            edi82 = reinterpret_cast<struct s99*>(reinterpret_cast<uint32_t>(edi82) + 100);
        } while (reinterpret_cast<signed char>(ebp81) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi17 + 16)));
    }
    fun_18014840(esi17 + 0xa84, ebx20, v78, v75);
    edx93 = *reinterpret_cast<struct s102**>(esi17 + 0xb90);
    v94 = ebx20;
    edx93->f32(esi17 + 0xb90);
    eax95 = *reinterpret_cast<struct s556**>(esi17 + 0xbdc);
    v96 = ebx20;
    eax95->f32(esi17 + 0xbdc);
    edx97 = *reinterpret_cast<void***>(esi17 + 0x594);
    v98 = ebx20;
    *reinterpret_cast<void***>(edx97 + 32)(esi17 + 0x594);
    eax99 = *reinterpret_cast<struct s557**>(esi17 + 0x67c);
    v100 = ebx20;
    eax99->f32(esi17 + 0x67c);
    ecx101 = *reinterpret_cast<void***>(esi17 + 0xc40);
    ebp102 = esi17 + 0x470;
    ax103 = fun_180192b0(ebp102, ecx101, ebx20, v100, v98, v96, v94, v78, v75);
    esp104 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp80) - 4 - 4 + 4 + 4 - 4 - 4 + 4 - 4 - 4 + 4 - 4 - 4 + 4 - 4 - 4 + 4 - 4 - 4 - 4 + 8 + 4);
    if (*reinterpret_cast<signed char*>(&ax103) && (ecx105 = *reinterpret_cast<void***>(esi17 + 0xc40), v106 = ebp102, edx107 = *reinterpret_cast<void***>(ecx105), *reinterpret_cast<void***>(edx107 + 28)(v106), esp104 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp104) - 4 - 4 + 4), !(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi17 + 0x32c)) & 8))) {
        eax108 = *reinterpret_cast<void***>(esi17 + 16);
        edi109 = reinterpret_cast<void**>(0);
        __asm__("fild dword [esp+0x24]");
        __asm__("fdivr dword [0x18034238]");
        if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax108) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax108 == 0)) {
            __asm__("fstp st0");
        } else {
            __asm__("fstp dword [esp+0x1c]");
            v110 = reinterpret_cast<void***>(esi17 + 0x49c);
            do {
                ecx111 = *v110;
                fun_18019950(ecx111, reinterpret_cast<int32_t>(esp104) + 40, v106, v100, v98);
                esp104 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp104) - 4 - 4 + 4 + 4);
                ++edi109;
                less112 = reinterpret_cast<signed char>(edi109) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi17 + 16));
                v110 = v110 + 4;
            } while (less112);
        }
        *reinterpret_cast<int32_t*>(esi17 + 0x488) = 0;
    }
    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(esi17 + 0x32c) == 0x107) || !reinterpret_cast<int1_t>(*reinterpret_cast<void***>(esi17 + 16) == 2)) {
        ebp113 = reinterpret_cast<void**>(0);
        v35 = reinterpret_cast<void**>(0);
        if (reinterpret_cast<signed char>(v114) > reinterpret_cast<signed char>(0)) {
            ecx115 = v116;
            v12 = ecx115;
            while (1) {
                edi117 = *reinterpret_cast<void***>(ecx115 + 4);
                zf118 = (reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi17 + 8)) & 4) == 0;
                v119 = edi117;
                if (zf118 || reinterpret_cast<signed char>(edi117) < reinterpret_cast<signed char>(2)) {
                    v12 = ecx115 + 20;
                    ecx120 = *reinterpret_cast<void***>(esi17 + 4);
                    ++v35;
                    fun_18019e00(ecx120, ecx115, reinterpret_cast<uint32_t>(esi17 + reinterpret_cast<unsigned char>(ebp113) * 4) + 0x49c, edi117, ebx20);
                    esp104 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp104) - 4 - 4 - 4 - 4 - 4 + 16 + 4);
                } else {
                    edi121 = reinterpret_cast<void**>(0);
                    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(v119) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(v119 == 0))) {
                        v122 = ebp113;
                        v123 = reinterpret_cast<void**>(2);
                        do {
                            if (reinterpret_cast<signed char>(v123) > reinterpret_cast<signed char>(v119) || (eax124 = *reinterpret_cast<void***>(esi17 + 0x32c), *reinterpret_cast<int16_t*>(&eax124) = fun_1800dd10(eax124, reinterpret_cast<unsigned char>(edi121) + reinterpret_cast<unsigned char>(ebp113) + 1), edx125 = *reinterpret_cast<void***>(esi17 + 0x32c), v126 = eax124, *reinterpret_cast<int16_t*>(&eax124) = fun_1800dd10(edx125, v122), esp104 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp104) - 4 - 4 - 4 + 8 + 4 - 4 - 4 - 4 + 8 + 4), ecx127 = reinterpret_cast<unsigned char>(v126) | reinterpret_cast<unsigned char>(eax124), ecx127 != 3) && (ecx127 != 48 && ecx127 != 0x600)) {
                                ++edi121;
                                ++v123;
                                ++v122;
                            } else {
                                edi121 = edi121 + 2;
                                v123 = v123 + 2;
                                v122 = v122 + 2;
                            }
                        } while (reinterpret_cast<signed char>(edi121) < reinterpret_cast<signed char>(v119));
                        ebx20 = v128;
                    }
                    ecx129 = v12;
                    esp130 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp104) - 4);
                    v12 = v12 + 20;
                    ecx131 = *reinterpret_cast<void***>(esi17 + 4);
                    ++v35;
                    fun_18019e00(ecx131, ecx129, esp130 + 52, v119, ebx20);
                    esp104 = reinterpret_cast<void*>(esp130 - 4 - 4 - 4 - 4 + 16 + 4);
                    edi117 = v119;
                }
                ebp113 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebp113) + reinterpret_cast<unsigned char>(edi117));
                if (reinterpret_cast<signed char>(v35) >= reinterpret_cast<signed char>(v132)) 
                    break;
                ecx115 = v12;
            }
        }
    } else {
        __asm__("fld dword [0x180347ac]");
        __asm__("fstp dword [esp+0x28]");
        ebp133 = esi17 + 0x330;
        fun_18019950(ebp133, reinterpret_cast<int32_t>(esp104) + 40, v100, v98, v96);
        esp134 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp104) - 4 - 4 + 4 + 4);
        __asm__("fld dword [0x180347ac]");
        __asm__("fstp dword [esp+0x28]");
        fun_18019950(esi17 + 0x358, reinterpret_cast<int32_t>(esp134) + 40, v100, v98, v96);
        eax135 = *reinterpret_cast<void***>(esi17 + 0xc4c);
        edi136 = esi17 + 0x448;
        ax137 = fun_180192b0(edi136, eax135, ebx20, v100, v98, v96, v94, v78, v75);
        if (*reinterpret_cast<signed char*>(&ax137)) {
            ecx138 = *reinterpret_cast<void***>(esi17 + 0xc4c);
            edx139 = *reinterpret_cast<void***>(ecx138);
            *reinterpret_cast<void***>(edx139 + 28)(edi136);
            esp140 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp134) - 4 - 4 + 4 + 4 - 4 - 4 - 4 + 8 + 4 - 4 - 4 + 4);
            __asm__("fld dword [0x180347ac]");
            __asm__("fchs ");
            __asm__("fstp dword [esp+0x28]");
            fun_18019950(ebp133, reinterpret_cast<int32_t>(esp140) + 40, edi136, v100, v98);
            __asm__("fld dword [0x180347ac]");
            __asm__("fstp dword [esp+0x28]");
            fun_18019950(esi17 + 0x358, reinterpret_cast<int32_t>(esp140) - 4 - 4 + 4 + 4 + 40, edi136, v100, v98);
        }
        if (v141 != 1) {
            ecx142 = *reinterpret_cast<void***>(esi17 + 4);
            edx143 = *reinterpret_cast<void***>(ecx142);
            *reinterpret_cast<void***>(edx143 + 0x70)(v144, ebp133, ebx20, 0);
            ecx145 = *reinterpret_cast<void***>(esi17 + 4);
            edx146 = *reinterpret_cast<void***>(ecx145);
            *reinterpret_cast<void***>(edx146 + 0x70)(v144 + 20, esi17 + 0x358, ebx20, 0, v144, ebp133, ebx20, 0);
        } else {
            ecx147 = *reinterpret_cast<void***>(esi17 + 4);
            fun_18019d30(ecx147, v148, ebp133, 2, ebx20);
        }
    }
    fun_18013cb0(esi17, ebx20);
    eax149 = reinterpret_cast<void**>(0);
    if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi17 + 16)) > reinterpret_cast<signed char>(0)) {
        ecx150 = reinterpret_cast<void***>(esi17 + 0x49c);
        do {
            ++eax149;
            ecx150 = ecx150 + 4;
            *reinterpret_cast<void***>(*ecx150 + 24) = reinterpret_cast<void**>(0);
        } while (reinterpret_cast<signed char>(eax149) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi17 + 16)));
    }
    *reinterpret_cast<void***>(esi17 + 0x4d4) = reinterpret_cast<void**>(0);
    goto v151;
}

struct s558 {
    struct s297** f0;
    struct s297** f4;
};

void fun_18012580(struct s292* ecx) {
    struct s297** ecx2;
    struct s558* esi3;
    struct s297* eax4;

    fun_18013cd0(ecx);
    ecx2 = ecx->f3152;
    esi3 = reinterpret_cast<struct s558*>(&ecx->f3152);
    if (ecx2) {
        do {
            eax4 = *ecx2;
            eax4->f24();
            ecx2 = esi3->f4;
            esi3 = reinterpret_cast<struct s558*>(&esi3->f4);
        } while (ecx2);
    }
    return;
}

int16_t fun_18012b40(void** ecx, void** a2) {
    unsigned char ah3;
    void** eax4;
    void** edx5;

    __asm__("fld dword [esi+0x2c]");
    __asm__("fcomp dword [esp+0x8]");
    __asm__("fnstsw ax");
    if (!(ah3 & 64)) {
        eax4 = a2;
        *reinterpret_cast<void***>(ecx + 44) = eax4;
        fun_18012ca0(ecx);
        edx5 = *reinterpret_cast<void***>(ecx);
        *reinterpret_cast<void***>(edx5 + 60)(ecx);
        eax4 = *reinterpret_cast<void***>(ecx + 52);
        if (!eax4) {
            *reinterpret_cast<int16_t*>(&eax4) = fun_18012a30(ecx);
        }
        *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(1);
    }
    return *reinterpret_cast<int16_t*>(&eax4);
}

void fun_18012b80(void** ecx, void** a2) {
    unsigned char ah3;
    void** edx4;

    __asm__("fld dword [esi+0x30]");
    __asm__("fcomp dword [esp+0x8]");
    __asm__("fnstsw ax");
    if (!(ah3 & 64)) {
        *reinterpret_cast<void***>(ecx + 48) = a2;
        fun_18012ca0(ecx);
        edx4 = *reinterpret_cast<void***>(ecx);
        *reinterpret_cast<void***>(edx4 + 60)(ecx);
        *reinterpret_cast<void***>(ecx + 0x7c) = reinterpret_cast<void**>(1);
    }
    return;
}

struct s559 {
    signed char[36] pad36;
    int32_t f36;
    signed char[72] pad112;
    int32_t f112;
    int32_t f116;
    int32_t f120;
};

void fun_18012c30(struct s559* ecx) {
    int1_t zf2;
    int32_t v3;
    int32_t v4;

    zf2 = ecx->f36 == 0;
    if (!zf2) {
        __asm__("fild dword [ebp-0xc]");
        __asm__("fmul dword [0x18034770]");
        __asm__("fst dword [ebp-0x4]");
        __asm__("fmul dword [ebp-0x4]");
        __asm__("fsubr dword [0x18034238]");
        __asm__("fstp dword [ebp-0x8]");
        __asm__("fld dword [ebp-0x8]");
        __asm__("fsqrt ");
        __asm__("fstp dword [ebp-0xc]");
        __asm__("fld dword [ebp-0xc]");
        __asm__("fstp dword [ecx+0x70]");
        if (ecx->f36 >= 0) {
            ecx->f120 = 0;
            ecx->f116 = v3;
            return;
        } else {
            ecx->f116 = 0;
            ecx->f120 = v4;
            return;
        }
    } else {
        ecx->f112 = 0x3f800000;
        ecx->f120 = 0;
        ecx->f116 = 0;
        return;
    }
}

void fun_18013100() {
    int32_t* v1;

    if (v1) {
        *v1 = 0;
    }
    return;
}

void fun_18013471(int32_t ecx) {
}

struct s560 {
    signed char[12] pad12;
    signed char f12;
    signed char[3] pad16;
    int32_t f16;
};

void fun_18013da0(struct s560* ecx, int32_t a2) {
    ecx->f12 = 1;
    ecx->f16 = a2;
    return;
}

struct s562 {
    signed char[24] pad24;
    int32_t f24;
};

struct s561 {
    signed char[24] pad24;
    struct s562** f24;
    signed char[80] pad108;
    struct s562*** f108;
};

void fun_18013e50(struct s561* ecx) {
    struct s561* edi2;
    struct s562*** esi3;
    struct s562* eax4;

    edi2 = ecx;
    esi3 = &edi2->f24;
    if (esi3 != edi2->f108) {
        do {
            eax4 = **esi3;
            eax4->f24();
            ++esi3;
        } while (esi3 != edi2->f108);
    }
    return;
}

struct s563 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

struct s564 {
    signed char[8] pad8;
    int32_t f8;
    int32_t f12;
};

void fun_18014230(struct s142* ecx, int32_t a2, struct s563* a3, uint32_t a4, int32_t* a5) {
    int32_t eax6;
    struct s564* eax7;

    if (a5) {
        *a5 = 0;
    }
    if (a2 == 9 && (a4 >= 16 && a3->f0 < 20)) {
        if (ecx->f12) {
            fun_18014340(ecx);
        }
        eax6 = a3->f0 + a3->f0 * 2;
        eax7 = reinterpret_cast<struct s564*>(reinterpret_cast<int32_t>(ecx) + eax6 * 8 + 0x74);
        a3->f4 = *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(ecx) + eax6 * 8 + 0x78);
        a3->f8 = eax7->f8;
        a3->f12 = eax7->f12;
        if (a5) {
            *a5 = 16;
        }
    }
    return;
}

struct s565 {
    int32_t f0;
    signed char[4] pad8;
    int32_t f8;
    int32_t f12;
};

struct s566 {
    void** f0;
    signed char[123] pad124;
    int32_t f124;
    int32_t f128;
    int32_t f132;
};

void fun_180142a0(void** ecx, int32_t a2, struct s565* a3) {
    int32_t eax4;
    int32_t esi5;
    struct s566* eax6;
    void** ecx7;
    void** eax8;
    int32_t esi9;

    eax4 = a2 - 9;
    if (!eax4) {
        esi5 = a3->f0;
        if (esi5 >= 0 && esi5 < 20) {
            __asm__("fld dword [ecx+0x4]");
            __asm__("fcom dword [0x1803422c]");
            __asm__("fnstsw ax");
            if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax4) + 1) & 65)) {
                __asm__("fstp dword [edi+edx*8+0x78]");
                eax6 = reinterpret_cast<struct s566*>(ecx + (esi5 + esi5 * 2) * 8);
                eax6->f124 = a3->f8;
                eax6->f128 = a3->f12;
                if (!eax6->f132) {
                    fun_18013f80(ecx, esi5);
                }
                fun_18014020(ecx, esi5);
            } else {
                __asm__("fstp st0");
                *reinterpret_cast<void***>(ecx + (esi5 + esi5 * 2 + 15) * 8) = reinterpret_cast<void**>(0);
                fun_18013fb0(ecx, esi5);
                return;
            }
        }
    } else {
        if (!(eax4 - 1)) {
            ecx7 = *reinterpret_cast<void***>(ecx + 0x27c);
            __asm__("fld dword [edx]");
            eax8 = *reinterpret_cast<void***>(ecx7);
            __asm__("fstp dword [esp]");
            *reinterpret_cast<void***>(eax8 + 32)();
            goto esi9;
        }
    }
    return;
}

void fun_180143a0(struct s142* ecx, int32_t a2, struct s154* a3) {
    int32_t v4;
    int32_t esi5;
    struct s142* esi6;
    struct s154* ebp7;
    unsigned char ah8;
    struct s145*** edi9;
    int32_t ebx10;
    struct s145* eax11;
    struct s146** ecx12;
    struct s146* edx13;

    v4 = esi5;
    esi6 = ecx;
    if (esi6->f12) {
        fun_18014340(ecx);
    }
    ebp7 = a3;
    if (ebp7->f24 <= 0 || ah8 & 65) {
        esi6->f620 = 0;
        return;
    } else {
        __asm__("fild dword [esi+0x70]");
        __asm__("fdivr dword [0x18034238]");
        __asm__("fstp dword [esp]");
        fun_18019710(ebp7, 0);
        edi9 = &esi6->f132;
        ebx10 = 20;
        do {
            if (*edi9) {
                eax11 = **edi9;
                eax11->f28(reinterpret_cast<int32_t>(esi6) + 0x254, ebp7);
            }
            edi9 = edi9 + 6;
            --ebx10;
        } while (ebx10);
        ecx12 = esi6->f636;
        edx13 = *ecx12;
        edx13->f28();
        esi6->f620 = 0;
        goto v4;
    }
}

struct s568 {
    signed char[8] pad8;
    int32_t f8;
};

struct s567 {
    signed char[4] pad4;
    struct s568** f4;
};

void fun_18014810(struct s567* ecx, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    struct s568* eax6;

    if (a2 == 9 && ecx->f4) {
        eax6 = *ecx->f4;
        eax6->f8(9, a3, a4, a5);
    }
    return;
}

struct s570 {
    signed char[20] pad20;
    int32_t f20;
};

struct s571 {
    signed char[20] pad20;
    int32_t f20;
};

struct s569 {
    signed char[4] pad4;
    struct s570** f4;
    struct s571** f8;
};

int32_t fun_18014a80(struct s569* ecx) {
    struct s570* eax2;
    signed char al3;
    struct s571* edx4;
    signed char al5;

    eax2 = *ecx->f4;
    al3 = reinterpret_cast<signed char>(eax2->f20());
    if (!al3 || (edx4 = *ecx->f8, al5 = reinterpret_cast<signed char>(edx4->f20()), al5 == 0)) {
        return 0;
    } else {
        return 1;
    }
}

struct s573 {
    signed char[24] pad24;
    int32_t f24;
};

struct s574 {
    signed char[24] pad24;
    int32_t f24;
};

struct s572 {
    signed char[4] pad4;
    struct s573** f4;
    struct s574** f8;
};

void fun_18014ab0(struct s572* ecx) {
    struct s573* eax2;
    struct s574* edx3;

    eax2 = *ecx->f4;
    eax2->f24();
    edx3 = *ecx->f8;
    edx3->f24();
    return;
}

struct s575 {
    signed char[4] pad4;
    void** f4;
    signed char[11] pad16;
    void** f16;
    signed char[3] pad20;
    void** f20;
    signed char[23] pad44;
    void** f44;
    signed char[15] pad60;
    void** f60;
    signed char[23] pad84;
    void** f84;
    signed char[15] pad100;
    void** f100;
    signed char[39] pad140;
    void** f140;
    signed char[39] pad180;
    void** f180;
    signed char[39] pad220;
    struct s260** f220;
    struct s260** f224;
    struct s260** f228;
};

void fun_18014e60(struct s575* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18) {
    void** ebx19;
    void** v20;
    void** edi21;
    void** esi22;
    void** ebp23;
    void** ebx24;
    void** ecx25;
    void** edi26;
    struct s260** ecx27;
    void** v28;
    struct s260** ecx29;
    void** v30;
    void** ecx31;
    int16_t ax32;
    void** ecx33;
    void** edx34;
    void** eax35;
    int16_t ax36;
    void** ecx37;
    void** edx38;
    struct s260** ecx39;
    void** v40;

    ebx19 = reinterpret_cast<void**>(&ecx->f20);
    v20 = ecx->f44;
    fun_18018da0(&ecx->f100, ebx19, v20, 0, edi21, esi22, ebp23, ebx24, __return_address());
    ecx25 = ecx->f84;
    edi26 = reinterpret_cast<void**>(&ecx->f60);
    fun_18018da0(&ecx->f140, edi26, ecx25, 0, edi21, esi22, ebp23, ebx24, __return_address());
    ecx27 = ecx->f220;
    v28 = ecx->f44;
    fun_18019b50(ecx27, ebx19, v28, edi21, esi22, ebp23, ebx24, __return_address(), a2);
    ecx29 = ecx->f224;
    v30 = ecx->f84;
    fun_18019b50(ecx29, edi26, v30, edi21, esi22, ebp23, ebx24, __return_address(), a2);
    ecx31 = ecx->f16;
    ax32 = fun_180192b0(ebx19, ecx31, a2, edi21, esi22, ebp23, ebx24, __return_address(), a2);
    if (*reinterpret_cast<signed char*>(&ax32)) {
        ecx33 = ecx->f16;
        edx34 = *reinterpret_cast<void***>(ecx33);
        *reinterpret_cast<void***>(edx34 + 28)(ebx19);
        fun_18019740(edi26, ebx19, ebx19, edi21, esi22, ebp23, ebx24, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
    }
    eax35 = ecx->f4;
    ax36 = fun_180192b0(edi26, eax35, a2, edi21, esi22, ebp23, ebx24, __return_address(), a2);
    if (*reinterpret_cast<signed char*>(&ax36)) {
        ecx37 = ecx->f4;
        edx38 = *reinterpret_cast<void***>(ecx37);
        *reinterpret_cast<void***>(edx38 + 28)(edi26);
        fun_18018da0(&ecx->f180, edi26, a2, 0, edi26, edi21, esi22, ebp23, ebx24);
    }
    ecx39 = ecx->f228;
    v40 = ecx->f84;
    fun_18019b50(ecx39, edi26, v40, edi21, esi22, ebp23, ebx24, __return_address(), a2);
    ecx->f44 = reinterpret_cast<void**>(0);
    ecx->f84 = reinterpret_cast<void**>(0);
    return;
}

struct s577 {
    signed char[20] pad20;
    int32_t f20;
};

struct s578 {
    signed char[20] pad20;
    int32_t f20;
};

struct s576 {
    signed char[4] pad4;
    struct s577** f4;
    signed char[8] pad16;
    struct s578** f16;
};

int32_t fun_18014f20(struct s576* ecx) {
    struct s577* eax2;
    signed char al3;
    struct s578* edx4;
    signed char al5;

    eax2 = *ecx->f4;
    al3 = reinterpret_cast<signed char>(eax2->f20());
    if (!al3 || (edx4 = *ecx->f16, al5 = reinterpret_cast<signed char>(edx4->f20()), al5 == 0)) {
        return 0;
    } else {
        return 1;
    }
}

struct s580 {
    signed char[24] pad24;
    int32_t f24;
};

struct s581 {
    signed char[24] pad24;
    int32_t f24;
};

struct s579 {
    signed char[4] pad4;
    struct s580** f4;
    signed char[8] pad16;
    struct s581** f16;
};

void fun_18014f50(struct s579* ecx) {
    struct s580* eax2;
    struct s581* edx3;

    eax2 = *ecx->f4;
    eax2->f24();
    edx3 = *ecx->f16;
    edx3->f24();
    return;
}

void fun_180151c0() {
    return;
}

int16_t fun_180153c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_180153e0(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

void** fun_180154c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** esi7;
    void** eax8;
    void** v9;
    void** edx10;
    void** ecx11;
    void** edx12;

    eax8 = fun_1802b2bb(ecx, 0x80, esi7, __return_address(), a2, a3, a4, a5, a6);
    if (!eax8) {
        return 0;
    } else {
        v9 = *reinterpret_cast<void***>(ecx + 100);
        edx10 = *reinterpret_cast<void***>(ecx + 12);
        ecx11 = *reinterpret_cast<void***>(ecx + 8);
        edx12 = *reinterpret_cast<void***>(ecx + 4);
        *reinterpret_cast<int16_t*>(&eax8) = fun_18014f70(eax8, edx12, ecx11, edx10, ecx + 16, ecx + 56, v9);
        return eax8;
    }
}

struct s583 {
    signed char[12] pad12;
    int32_t f12;
    signed char[4] pad20;
    int32_t f20;
    signed char[8] pad32;
    int32_t f32;
};

struct s584 {
    signed char[28] pad28;
    int32_t f28;
};

struct s582 {
    signed char[16] pad16;
    void** f16;
    signed char[23] pad40;
    void** f40;
    signed char[15] pad56;
    void** f56;
    signed char[23] pad80;
    void** f80;
    signed char[15] pad96;
    void** f96;
    signed char[7] pad104;
    struct s583** f104;
    struct s584** f108;
};

void fun_18015500(struct s582* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8) {
    void** eax9;
    void** ebx10;
    void** edi11;
    void** esi12;
    void** ebp13;
    void** ebx14;
    int16_t ax15;
    void** ecx16;
    void** eax17;
    struct s584** ecx18;
    struct s584* eax19;
    struct s583** ecx20;
    struct s583* edx21;
    struct s583* edx22;
    signed char al23;
    struct s583** ecx24;
    struct s583* eax25;
    struct s583** ecx26;
    struct s583* edx27;

    eax9 = ecx->f96;
    if (eax9 && (ebx10 = reinterpret_cast<void**>(&ecx->f56), ax15 = fun_180192b0(ebx10, eax9, a2, edi11, esi12, ebp13, ebx14, __return_address(), a2), !!*reinterpret_cast<signed char*>(&ax15))) {
        ecx16 = ecx->f96;
        eax17 = *reinterpret_cast<void***>(ecx16);
        *reinterpret_cast<void***>(eax17 + 28)(ebx10);
    }
    if (ecx->f40 || ecx->f80) {
        fun_18019310(&ecx->f16, a2, edi11, esi12, ebp13, ebx14, __return_address(), a2, a3, a4, a5, a6, a7, a8);
        fun_18019310(&ecx->f56, a2, edi11, esi12, ebp13, ebx14, __return_address(), a2, a3, a4, a5, a6, a7, a8);
        ecx18 = ecx->f108;
        eax19 = *ecx18;
        eax19->f28();
        ecx20 = ecx->f104;
        edx21 = *ecx20;
        edx21->f32();
        ecx->f40 = reinterpret_cast<void**>(0);
        ecx->f80 = reinterpret_cast<void**>(0);
        goto 0;
    } else {
        edx22 = *ecx->f104;
        al23 = reinterpret_cast<signed char>(edx22->f20());
        if (!al23) {
            ecx24 = ecx->f104;
            eax25 = *ecx24;
            eax25->f12(a2);
            ecx26 = ecx->f104;
            edx27 = *ecx26;
            edx27->f32(a2, a2);
        }
        ecx->f40 = reinterpret_cast<void**>(0);
        ecx->f80 = reinterpret_cast<void**>(0);
        return;
    }
}

struct s586 {
    signed char[20] pad20;
    int32_t f20;
};

struct s587 {
    signed char[20] pad20;
    int32_t f20;
};

struct s585 {
    signed char[96] pad96;
    struct s586** f96;
    signed char[4] pad104;
    struct s587** f104;
};

unsigned char fun_180155a0(struct s585* ecx) {
    struct s586* eax2;
    unsigned char al3;
    struct s587* edx4;
    signed char al5;

    if (!ecx->f96 || (eax2 = *ecx->f96, al3 = reinterpret_cast<unsigned char>(eax2->f20()), !!al3)) {
        edx4 = *ecx->f104;
        al5 = reinterpret_cast<signed char>(edx4->f20());
        return static_cast<unsigned char>(reinterpret_cast<uint1_t>(!!al5));
    } else {
        return al3;
    }
}

struct s589 {
    signed char[24] pad24;
    int32_t f24;
};

struct s590 {
    signed char[24] pad24;
    int32_t f24;
};

struct s588 {
    signed char[96] pad96;
    struct s589** f96;
    signed char[4] pad104;
    struct s590** f104;
};

void fun_180155d0(struct s588* ecx) {
    struct s589* eax2;
    struct s590* edx3;

    if (ecx->f96) {
        eax2 = *ecx->f96;
        eax2->f24();
    }
    edx3 = *ecx->f104;
    edx3->f24();
    return;
}

void fun_1801589d(int32_t ecx) {
}

struct s592 {
    signed char[20] pad20;
    int32_t f20;
};

struct s593 {
    signed char[20] pad20;
    int32_t f20;
};

struct s591 {
    signed char[5] pad5;
    signed char f5;
    signed char[34] pad40;
    struct s592** f40;
    struct s593** f44;
    void** f48;
    signed char[39] pad88;
    void** f88;
    signed char[39] pad128;
    void** f128;
    signed char[39] pad168;
    void** f168;
    signed char[39] pad208;
    void** f208;
    signed char[39] pad248;
    void** f248;
};

void fun_18015a10(struct s591* ecx, void** a2, void** a3, void** a4, void** a5) {
    void** edi6;
    void** esi7;
    void** ebp8;
    void** ebx9;
    struct s592** ecx10;
    struct s592* edx11;
    struct s593** esi12;
    struct s593* eax13;

    ecx->f5 = 0;
    fun_18018da0(&ecx->f48, a2, a4, a5, edi6, esi7, ebp8, ebx9, __return_address());
    fun_18018da0(&ecx->f88, a3, a4, a5, edi6, esi7, ebp8, ebx9, __return_address());
    fun_18018da0(&ecx->f128, a3, a4, a5, edi6, esi7, ebp8, ebx9, __return_address());
    fun_18018da0(&ecx->f168, a2, a4, a5, edi6, esi7, ebp8, ebx9, __return_address());
    fun_18018da0(&ecx->f208, a2, a4, a5, edi6, esi7, ebp8, ebx9, __return_address());
    fun_18018da0(&ecx->f248, a3, a4, a5, edi6, esi7, ebp8, ebx9, __return_address());
    ecx10 = ecx->f40;
    edx11 = *ecx10;
    edx11->f20();
    esi12 = ecx->f44;
    eax13 = *esi12;
    eax13->f20(esi12);
    goto edi6;
}

void** fun_18015d90(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** esi7;
    void** eax8;
    void** v9;
    void** ecx10;
    void** edx11;
    void** eax12;
    void** v13;
    void** ecx14;

    if (!*reinterpret_cast<unsigned char*>(ecx + 0x119)) {
        eax8 = fun_1802b2bb(ecx, 0x120, esi7, __return_address(), a2, a3, a4, a5, a6);
        if (eax8) {
            v9 = *reinterpret_cast<void***>(ecx + 8);
            ecx10 = *reinterpret_cast<void***>(ecx + 0xfc);
            edx11 = *reinterpret_cast<void***>(ecx + 4);
            *reinterpret_cast<int16_t*>(&eax8) = fun_18015680(eax8, edx11, ecx10, ecx + 12, ecx + 92, v9);
            return eax8;
        }
    } else {
        eax12 = fun_1802b2bb(ecx, 0x120, esi7, __return_address(), a2, a3, a4, a5, a6);
        if (eax12) {
            v13 = *reinterpret_cast<void***>(ecx + 8);
            ecx14 = *reinterpret_cast<void***>(ecx + 4);
            *reinterpret_cast<int16_t*>(&eax12) = fun_18015680(eax12, ecx14, ecx + 0xac, ecx + 12, ecx + 92, v13);
            return eax12;
        }
    }
    return 0;
}

void fun_18015e00(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16) {
    void** v17;
    void** v18;
    void** ebx19;
    void** v20;
    void** ebp21;
    void** v22;
    void** esi23;
    void** v24;
    void** edi25;
    void** v26;
    void** esi27;
    struct s29* ebp28;
    void** v29;
    void** v30;
    void** ecx31;
    void** ebx32;
    int16_t ax33;
    void** edi34;
    void** v35;
    void** ecx36;
    void** edx37;
    void** edx38;
    int16_t ax39;
    void** ecx40;
    void** eax41;
    void** v42;
    void** edx43;
    int16_t ax44;
    void** eax45;
    void** ecx46;
    void** eax47;
    void** ecx48;
    struct s150* eax49;
    int32_t ecx50;

    v17 = reinterpret_cast<void**>(__return_address());
    v18 = ebx19;
    v20 = ebp21;
    v22 = esi23;
    v24 = edi25;
    v26 = ecx;
    esi27 = ecx + 0xac;
    ebp28 = reinterpret_cast<struct s29*>(ecx + 0x108);
    v29 = reinterpret_cast<void**>(0xffffff54 - reinterpret_cast<unsigned char>(ecx));
    v30 = reinterpret_cast<void**>(2);
    while (1) {
        if (!*reinterpret_cast<void***>(ecx + 0x118) || (ecx31 = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(ebp28) - 8), ebx32 = esi27 + 0xffffff60, ax33 = fun_180192b0(ebx32, ecx31, a2, v24, v22, v20, v18, v26, v29), *reinterpret_cast<signed char*>(&ax33) == 0)) {
            edi34 = esi27 + 0xffffffb0;
            v35 = esi27 + 0xffffff60;
        } else {
            ecx36 = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(ebp28) - 8);
            v35 = ebx32;
            edx37 = *reinterpret_cast<void***>(ecx36);
            *reinterpret_cast<void***>(edx37 + 28)(v35);
            edi34 = esi27 + 0xffffffb0;
        }
        fun_18019740(edi34, v35, v24, v22, v20, v18, v26, v29, v30, v17, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
        edx38 = ebp28->f0;
        ax39 = fun_180192b0(edi34, edx38, a2, v24, v22, v20, v18, v26, v29);
        if (*reinterpret_cast<signed char*>(&ax39)) {
            ecx40 = ebp28->f0;
            eax41 = *reinterpret_cast<void***>(ecx40);
            *reinterpret_cast<void***>(eax41 + 28)(edi34);
        }
        v42 = edi34;
        if (*reinterpret_cast<unsigned char*>(v26 + 0x119)) {
            fun_18019740(esi27, v42, v24, v22, v20, v18, v26, v29, v30, v17, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
            edx43 = ebp28->f8;
            ax44 = fun_180192b0(esi27, edx43, a2, v24, v22, v20, v18, v26, v29);
            if (!*reinterpret_cast<signed char*>(&ax44)) {
                addr_0x18015ed2_9:
                ecx = v26;
                ebp28 = reinterpret_cast<struct s29*>(reinterpret_cast<uint32_t>(ebp28) + 4);
                esi27 = esi27 + 40;
                eax45 = v30 - 1;
                v30 = eax45;
                if (eax45) 
                    continue; else 
                    break;
            } else {
                ecx46 = ebp28->f8;
                v42 = esi27;
                eax47 = *reinterpret_cast<void***>(ecx46);
                *reinterpret_cast<void***>(eax47 + 28)(v42);
            }
        }
        ecx48 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(v26 + 0xfc)) + reinterpret_cast<unsigned char>(v29) + reinterpret_cast<unsigned char>(esi27));
        fun_18019740(ecx48, v42, v24, v22, v20, v18, v26, v29, v30, v17, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
        goto addr_0x18015ed2_9;
    }
    eax49 = reinterpret_cast<struct s150*>(ecx + 0x74);
    ecx50 = 2;
    do {
        *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(eax49) - 80) = reinterpret_cast<void**>(0);
        eax49->f0 = reinterpret_cast<void**>(0);
        eax49->f80 = reinterpret_cast<void**>(0);
        eax49 = reinterpret_cast<struct s150*>(reinterpret_cast<uint32_t>(eax49) + 40);
        --ecx50;
    } while (ecx50);
    return;
}

struct s594 {
    void** f0;
    signed char[3] pad4;
    void** f4;
};

void fun_18016100(void** ecx, int32_t a2, struct s594* a3) {
    int32_t eax4;
    void** al5;

    eax4 = a2;
    switch (eax4) {
    case 0:
        al5 = reinterpret_cast<void**>(static_cast<unsigned char>(reinterpret_cast<uint1_t>(!!a3->f0)));
        if (*reinterpret_cast<void***>(ecx + 4) != al5) {
            *reinterpret_cast<void***>(ecx + 4) = al5;
            fun_18016250(ecx);
            return;
        }
    case 1:
        __asm__("fld dword [edx]");
        __asm__("fcom dword [0x18034238]");
        __asm__("fnstsw ax");
        if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax4) + 1) & 65)) {
            __asm__("fld dword [0x18034238]");
            __asm__("fdiv st0, st1");
            *reinterpret_cast<void***>(ecx + 8) = reinterpret_cast<void**>(0x3f800000);
            __asm__("fstp dword [ecx+0xc]");
            __asm__("fstp st0");
            fun_18016250(ecx);
            return;
        } else {
            __asm__("fstp dword [ecx+0x8]");
            *reinterpret_cast<void***>(ecx + 12) = reinterpret_cast<void**>(0x3f800000);
            fun_18016250(ecx);
            return;
        }
    case 3:
        *reinterpret_cast<void***>(ecx + 16) = a3->f0;
        *reinterpret_cast<void***>(ecx + 20) = a3->f4;
        fun_18016250(ecx);
        return;
    case 4:
        *reinterpret_cast<void***>(ecx + 24) = a3->f0;
        *reinterpret_cast<void***>(ecx + 28) = a3->f4;
        fun_180161e0(ecx);
        return;
    case 5:
        *reinterpret_cast<void***>(ecx + 32) = a3->f0;
        fun_180161e0(ecx);
        break;
    case 7:
        *reinterpret_cast<void***>(ecx + 36) = a3->f0;
        return;
    case 2:
    case 6:
        goto 0x180161bd;
    }
    return;
}

struct s596 {
    signed char[20] pad20;
    int32_t f20;
};

struct s597 {
    signed char[20] pad20;
    int32_t f20;
};

struct s595 {
    signed char[5] pad5;
    signed char f5;
    signed char[34] pad40;
    void** f40;
    signed char[39] pad80;
    void** f80;
    signed char[39] pad120;
    void** f120;
    signed char[39] pad160;
    void** f160;
    signed char[39] pad200;
    struct s596** f200;
    struct s597** f204;
};

void fun_180162c0(struct s595* ecx, void** a2, void** a3, void** a4, void** a5) {
    void** edi6;
    void** esi7;
    void** ebp8;
    void** ebx9;
    struct s596** ecx10;
    struct s596* edx11;
    struct s597** esi12;
    struct s597* eax13;

    ecx->f5 = 0;
    fun_18018da0(&ecx->f40, a2, a4, a5, edi6, esi7, ebp8, ebx9, __return_address());
    fun_18018da0(&ecx->f80, a3, a4, a5, edi6, esi7, ebp8, ebx9, __return_address());
    fun_18018da0(&ecx->f120, a2, a4, a5, edi6, esi7, ebp8, ebx9, __return_address());
    fun_18018da0(&ecx->f160, a3, a4, a5, edi6, esi7, ebp8, ebx9, __return_address());
    ecx10 = ecx->f200;
    edx11 = *ecx10;
    edx11->f20();
    esi12 = ecx->f204;
    eax13 = *esi12;
    eax13->f20(esi12);
    goto edi6;
}

int16_t fun_180164b0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_180164d0(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

void** fun_18016590(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** esi7;
    void** eax8;
    void** v9;
    void** edx10;
    void** ecx11;

    eax8 = fun_1802b2bb(ecx, 0xd0, esi7, __return_address(), a2, a3, a4, a5, a6);
    if (!eax8) {
        return 0;
    } else {
        v9 = *reinterpret_cast<void***>(ecx + 12);
        edx10 = *reinterpret_cast<void***>(ecx + 0x8c);
        ecx11 = *reinterpret_cast<void***>(ecx + 4);
        *reinterpret_cast<int16_t*>(&eax8) = fun_18015fa0(eax8, ecx11, edx10, ecx + 20, ecx + 100, v9);
        return eax8;
    }
}

void fun_180165d0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18) {
    void** v19;
    void** v20;
    void** ebx21;
    void** v22;
    void** ebp23;
    void** v24;
    void** esi25;
    void** esi26;
    void** v27;
    void** edi28;
    void** ecx29;
    void** edi30;
    int16_t ax31;
    void** eax32;
    int16_t ax33;
    void** ecx34;
    void** edx35;
    void** ecx36;
    void** eax37;
    void** edi38;
    void*** ebp39;
    void* ebx40;
    void** v41;
    void** eax42;
    int16_t ax43;
    void** ecx44;
    void** edx45;
    void** eax46;
    void** eax47;

    v19 = reinterpret_cast<void**>(__return_address());
    v20 = ebx21;
    v22 = ebp23;
    v24 = esi25;
    esi26 = ecx;
    v27 = edi28;
    if (*reinterpret_cast<void***>(esi26 + 0x94) && (ecx29 = *reinterpret_cast<void***>(esi26 + 0x90), edi30 = esi26 + 100, ax31 = fun_180192b0(edi30, ecx29, a2, v27, v24, v22, v20, ecx, v19), !!*reinterpret_cast<signed char*>(&ax31)) || (eax32 = *reinterpret_cast<void***>(esi26 + 0x98), edi30 = esi26 + 100, ax33 = fun_180192b0(edi30, eax32, a2, v27, v24, v22, v20, ecx, v19), !!*reinterpret_cast<signed char*>(&ax33))) {
        if (*reinterpret_cast<void***>(esi26 + 0x94)) {
            ecx34 = *reinterpret_cast<void***>(esi26 + 0x90);
            edx35 = *reinterpret_cast<void***>(ecx34);
            *reinterpret_cast<void***>(edx35 + 28)(edi30);
        }
        ecx36 = *reinterpret_cast<void***>(esi26 + 0x98);
        eax37 = *reinterpret_cast<void***>(ecx36);
        *reinterpret_cast<void***>(eax37 + 28)(edi30);
        fun_18019850(esi26 + 20, edi30, edi30, v27, v24);
        fun_18019740(esi26 + 60, edi30, edi30, v27, v24, v22, v20, ecx, v19, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
    }
    edi38 = esi26 + 20;
    ebp39 = reinterpret_cast<void***>(esi26 + 0x9c);
    ebx40 = reinterpret_cast<void*>(-20 - reinterpret_cast<unsigned char>(esi26));
    v41 = reinterpret_cast<void**>(2);
    do {
        eax42 = *ebp39;
        if (eax42 && (ax43 = fun_180192b0(edi38, eax42, a2, v27, v24, v22, v20, v41, v19), !!*reinterpret_cast<signed char*>(&ax43))) {
            ecx44 = *ebp39;
            edx45 = *reinterpret_cast<void***>(ecx44);
            *reinterpret_cast<void***>(edx45 + 28)(edi38);
        }
        eax46 = *reinterpret_cast<void***>(esi26 + 0x8c);
        fun_18019740(reinterpret_cast<uint32_t>(ebx40) + reinterpret_cast<unsigned char>(edi38) + reinterpret_cast<unsigned char>(eax46), edi38, v27, v24, v22, v20, v41, v19, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
        ebp39 = ebp39 + 4;
        edi38 = edi38 + 40;
        eax47 = v41 - 1;
        v41 = eax47;
    } while (eax47);
    *reinterpret_cast<void***>(esi26 + 44) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi26 + 84) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi26 + 0x7c) = reinterpret_cast<void**>(0);
    return;
}

struct s599 {
    signed char[24] pad24;
    int32_t f24;
};

struct s600 {
    signed char[24] pad24;
    int32_t f24;
};

struct s601 {
    signed char[24] pad24;
    int32_t f24;
};

struct s598 {
    signed char[44] pad44;
    int32_t f44;
    signed char[76] pad124;
    int32_t f124;
    signed char[12] pad140;
    int32_t f140;
    struct s599** f144;
    signed char[4] pad152;
    struct s600** f152;
    struct s601** f156;
};

void fun_18016700(struct s598* ecx) {
    struct s598* edi2;
    int32_t esi3;
    struct s601*** ebx4;
    int32_t* ebp5;
    struct s601* edx6;
    struct s599* eax7;
    struct s600** ecx8;
    struct s600* edx9;

    edi2 = ecx;
    esi3 = 0;
    ebx4 = &edi2->f156;
    ebp5 = &edi2->f44;
    do {
        *reinterpret_cast<int32_t*>(edi2->f140 + esi3 + 24) = 0;
        *ebp5 = 0;
        if (*ebx4) {
            edx6 = **ebx4;
            edx6->f24();
        }
        esi3 = esi3 + 40;
        ++ebx4;
        ebp5 = ebp5 + 10;
    } while (esi3 < 80);
    edi2->f124 = 0;
    eax7 = *edi2->f144;
    eax7->f24();
    ecx8 = edi2->f152;
    edx9 = *edi2->f152;
    edx9->f24(ecx8);
    return;
}

void fun_18016eb0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    if (reinterpret_cast<int1_t>(a2 == 3)) {
        *reinterpret_cast<void***>(ecx + 12) = *reinterpret_cast<void***>(a3);
        fun_18016ed0(ecx, __return_address(), a2, a3, a4, a5, a6, a7);
    }
    return;
}

struct s603 {
    signed char[32] pad32;
    int32_t f32;
};

struct s602 {
    signed char[176] pad176;
    struct s603** f176;
};

void fun_18016fb0(struct s602* ecx) {
    goto (*ecx->f176)->f32;
}

int16_t fun_18017420(struct s261* a1, void** a2, int32_t a3, int32_t a4, uint32_t a5) {
    void** eax6;
    void** edx7;
    void** edi8;
    int1_t zf9;
    void** edx10;
    void** eax11;
    void** edx12;
    void** eax13;
    int16_t ax14;
    void** eax15;
    void** ecx16;
    int16_t ax17;

    if (a5 && ((eax6 = a1->f4, edx7 = (&a1->f4)[4], edi8 = g18043450, eax6 == edi8) && ((zf9 = edx7 == g18043454, zf9) && (eax6 = a2, reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax6 + 4) == 1))))) {
        if (*reinterpret_cast<void***>(eax6 + 8) == 8) {
            __asm__("fld dword [0x18034b48]");
            __asm__("fmul dword [esp+0x24]");
            edx10 = *reinterpret_cast<void***>(eax6);
            eax11 = a1->f0;
            __asm__("fstp dword [esp]");
            __asm__("fld dword [0x18034b48]");
            __asm__("fmul dword [esp+0x28]");
            __asm__("fstp dword [esp]");
            *reinterpret_cast<int16_t*>(&eax6) = fun_18017510(eax11, edx10, a1, a1, a5);
        } else {
            if (*reinterpret_cast<void***>(eax6 + 8) == 16) {
                __asm__("fld dword [0x18034b48]");
                __asm__("fmul dword [esp+0x24]");
                edx12 = *reinterpret_cast<void***>(eax6);
                eax13 = a1->f0;
                __asm__("fstp dword [esp]");
                __asm__("fld dword [0x18034b48]");
                __asm__("fmul dword [esp+0x28]");
                __asm__("fstp dword [esp]");
                ax14 = fun_180175b0(eax13, edx12, a1, a1, a5);
                return ax14;
            } else {
                if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(eax6 + 8) == 32)) {
                    eax15 = *reinterpret_cast<void***>(eax6);
                    ecx16 = a1->f0;
                    ax17 = fun_180172a0(ecx16, eax15, a3, a4, a5);
                    return ax17;
                }
            }
        }
    }
    return *reinterpret_cast<int16_t*>(&eax6);
}

int16_t fun_18017990(int32_t* a1, int32_t* a2, int32_t a3) {
    int32_t ecx4;
    int32_t v5;
    int16_t ax6;

    ecx4 = *a1;
    v5 = *a2;
    ax6 = fun_180179b0(ecx4, v5, a3);
    return ax6;
}

int16_t fun_18017a50(int32_t* a1, int32_t a2, int32_t a3) {
    int32_t eax4;
    int32_t edx5;

    eax4 = *a1;
    if (a3) {
        edx5 = a3 - 1 + 1;
        do {
            __asm__("fld dword [eax]");
            __asm__("fmul dword [ecx]");
            eax4 = eax4 + 4;
            --edx5;
            __asm__("fstp dword [eax-0x4]");
        } while (edx5);
    }
    return *reinterpret_cast<int16_t*>(&eax4);
}

void fun_18017b50(int32_t a1, int32_t a2) {
    int32_t eax3;
    int32_t edx4;

    __asm__("fld dword [0x18034b4c]");
    eax3 = a2 - 1;
    if (a2) {
        edx4 = eax3 + 1;
        do {
            __asm__("fcom dword [ecx]");
            __asm__("fnstsw ax");
            if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax3) + 1) & 65)) {
                __asm__("fstp st0");
                __asm__("fld dword [ecx]");
            }
            --edx4;
        } while (edx4);
    }
    return;
}

int32_t g180458d8 = 0;

void fun_18017c10() {
    g180458d8 = 0x18034b58;
    return;
}

void fun_18018570(void** a1, void** a2, uint32_t a3) {
    void* ecx4;
    void* v5;

    ecx4 = *a1;
    v5 = *a2;
    fun_18018590(ecx4, v5, a3);
    return;
}

void fun_18018930(int16_t** a1, int32_t a2) {
    int32_t edx3;
    int16_t* ecx4;
    int32_t eax5;
    int32_t esi6;

    edx3 = 0x7fff;
    ecx4 = *a1;
    eax5 = a2 - 1;
    if (a2) {
        esi6 = eax5 + 1;
        do {
            *reinterpret_cast<int16_t*>(&eax5) = *ecx4;
            if (*reinterpret_cast<int16_t*>(&eax5) < *reinterpret_cast<int16_t*>(&edx3)) {
                edx3 = eax5;
            }
            ++ecx4;
            --esi6;
        } while (esi6);
    }
    __asm__("fild dword [esp+0x4]");
    __asm__("fmul dword [0x18034bcc]");
    return;
}

void** fun_18018a90(void** a1, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39) {
    void** edx40;
    void** v41;
    void** ax42;
    void** edi43;
    void** esi44;
    void* ecx45;
    void* eax46;
    uint32_t ecx47;
    uint32_t ecx48;
    void** ax49;

    if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a1 + 4) == 1)) {
        if (*reinterpret_cast<void***>(a1 + 8) == 8) {
            edx40 = *reinterpret_cast<void***>(a1);
            v41 = *reinterpret_cast<void***>(a2);
            ax42 = fun_18018b00(edx40, v41, a3);
            return ax42;
        } else {
            if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(a1 + 8) == 16)) {
                edi43 = *reinterpret_cast<void***>(a1);
                esi44 = *reinterpret_cast<void***>(a2);
                ecx45 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(a3));
                eax46 = ecx45;
                ecx47 = reinterpret_cast<uint32_t>(ecx45) >> 2;
                while (ecx47) {
                    --ecx47;
                    *reinterpret_cast<void***>(edi43) = *reinterpret_cast<void***>(esi44);
                    edi43 = edi43 + 4;
                    esi44 = esi44 + 4;
                }
                ecx48 = reinterpret_cast<uint32_t>(eax46) & 3;
                while (ecx48) {
                    --ecx48;
                    *reinterpret_cast<void***>(edi43) = *reinterpret_cast<void***>(esi44);
                    ++edi43;
                    ++esi44;
                }
                return *reinterpret_cast<void***>(&eax46);
            }
        }
    }
    ax49 = fun_1801a210(a2, a1, a3, __return_address(), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39);
    return ax49;
}

int32_t g180458dc = 0;

void fun_18018b50() {
    g180458dc = 0x18034bd4;
    return;
}

int16_t fun_1801abe0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** esi7;
    void** eax8;
    void** eax9;
    void** eax10;
    void** edx11;
    void** v12;
    void** eax13;
    void** eax14;

    eax8 = fun_1802b2bb(ecx, 32, esi7, __return_address(), a2, a3, a4, a5, a6);
    if (!eax8 || (eax9 = fun_1801ac30(eax8), !eax9)) {
        return 0;
    } else {
        eax10 = a2;
        edx11 = *reinterpret_cast<void***>(eax10);
        v12 = *reinterpret_cast<void***>(eax10 + 4);
        *reinterpret_cast<int16_t*>(&eax10) = fun_1801acd0(eax9, edx11, v12, esi7, __return_address());
        if (!eax10) {
            eax13 = eax9;
            return *reinterpret_cast<int16_t*>(&eax13);
        } else {
            eax14 = *reinterpret_cast<void***>(eax9);
            *reinterpret_cast<void***>(eax14)(eax9);
            goto esi7;
        }
    }
}

void fun_1801ac70(int32_t ecx) {
    goto fun_18022af0;
}

struct s604 {
    signed char[12] pad12;
    uint32_t f12;
    uint32_t f16;
    int32_t f20;
    int32_t* f24;
    signed char f28;
};

struct s605 {
    int32_t* f0;
    signed char[20] pad24;
    int32_t f24;
};

void fun_1801ad50(struct s604* ecx, struct s605* a2) {
    struct s604* esi3;
    int32_t eax4;
    int32_t* edi5;
    int32_t ebx6;
    int32_t ecx7;
    uint32_t edx8;
    uint32_t v9;
    int32_t* eax10;
    int32_t* ecx11;

    esi3 = ecx;
    eax4 = a2->f24;
    if (eax4) {
        edi5 = a2->f0;
        ebx6 = eax4;
        do {
            esi3->f24[esi3->f16 + esi3->f12] = *edi5;
            esi3->f24[esi3->f16] = esi3->f24[esi3->f16 + esi3->f12];
            ecx7 = esi3->f20;
            edx8 = esi3->f16;
            v9 = esi3->f12;
            eax10 = esi3->f24;
            ecx11 = eax10 + edx8;
            fun_1801add0(ecx11, ecx11, ecx7, v9);
            __asm__("fstp dword [edi]");
            ++edi5;
            if (esi3->f16) {
                esi3->f16 = esi3->f16 - 1;
            } else {
                esi3->f16 = esi3->f12 - 1;
            }
            --ebx6;
        } while (ebx6);
        esi3->f28 = 0;
    }
    return;
}

struct s606 {
    signed char* f0;
    int32_t f4;
    int32_t f8;
};

int16_t fun_1801b620(struct s606* a1, signed char** a2, int32_t a3, int32_t a4, int32_t* a5, int32_t* a6, int32_t a7, int32_t a8) {
    int32_t v9;
    signed char* edx10;
    signed char* eax11;
    int16_t ax12;
    int32_t v13;
    signed char* edx14;
    signed char* eax15;
    int16_t ax16;
    int32_t v17;
    signed char* edx18;
    signed char* eax19;
    int16_t ax20;

    if (a4) {
        if (a1->f4 == 1) {
            if (a1->f8 == 8) {
                v9 = a8;
                edx10 = *a2;
                eax11 = a1->f0;
                ax12 = fun_1801b770(eax11, edx10, a3, a4, a5, a6, a7, *reinterpret_cast<signed char*>(&v9));
                return ax12;
            } else {
                if (a1->f8 == 16) {
                    v13 = a8;
                    edx14 = *a2;
                    eax15 = a1->f0;
                    ax16 = fun_1801b6e0(eax15, edx14, a3, a4, a5, a6, a7, *reinterpret_cast<signed char*>(&v13));
                    return ax16;
                } else {
                    if (a1->f8 == 32) {
                        v17 = a8;
                        edx18 = *a2;
                        eax19 = a1->f0;
                        ax20 = fun_1801b800(eax19, edx18, a3, a4, a5, a6, a7, *reinterpret_cast<signed char*>(&v17));
                        return ax20;
                    } else {
                        return 0;
                    }
                }
            }
        } else {
            return 0;
        }
    } else {
        return 0;
    }
}

int16_t fun_1801b890(void** ecx, void** a2, void** a3, void** a4) {
    void** edi5;
    void** esi6;
    void** ebx7;
    void** eax8;
    void** eax9;

    eax8 = fun_1802b2bb(ecx, 44, edi5, esi6, ebx7, __return_address(), a2, a3, a4);
    if (!eax8) {
        return 0;
    } else {
        *reinterpret_cast<void***>(eax8) = reinterpret_cast<void**>(0x18034d28);
        fun_18022a90(eax8 + 4, 0);
        *reinterpret_cast<void***>(eax8 + 12) = ecx;
        *reinterpret_cast<void***>(eax8 + 16) = a2;
        *reinterpret_cast<void***>(eax8 + 20) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 24) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 28) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 32) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 36) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 40) = reinterpret_cast<void**>(0x3f800000);
        *reinterpret_cast<void***>(eax8) = reinterpret_cast<void**>(0x18034cf8);
        eax9 = eax8;
        return *reinterpret_cast<int16_t*>(&eax9);
    }
}

struct s607 {
    void** f0;
    signed char[3] pad4;
    void** f4;
};

int16_t fun_1801b8f0(void** ecx, void** a2, void** a3, void** a4) {
    void** edi5;
    void** ebp6;
    void** ebx7;
    void** eax8;
    void** esi9;
    struct s607* eax10;
    void** edx11;

    eax8 = fun_1802b2bb(ecx, 84, edi5, ebp6, ebx7, __return_address(), a2, a3, a4);
    if (!eax8) {
        return 0;
    } else {
        *reinterpret_cast<void***>(eax8) = reinterpret_cast<void**>(0x18034da0);
        fun_18022a90(eax8 + 4, 0);
        esi9 = eax8 + 32;
        *reinterpret_cast<void***>(eax8 + 12) = ecx;
        *reinterpret_cast<void***>(eax8 + 16) = a2;
        *reinterpret_cast<void***>(eax8 + 20) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 24) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 28) = reinterpret_cast<void**>(0x3f800000);
        *reinterpret_cast<void***>(esi9) = reinterpret_cast<void**>(0x18034d28);
        fun_18022a90(esi9 + 4, 0);
        *reinterpret_cast<void***>(esi9 + 12) = ecx;
        *reinterpret_cast<void***>(esi9 + 16) = a2;
        *reinterpret_cast<void***>(esi9 + 20) = reinterpret_cast<void**>(0);
        eax10 = reinterpret_cast<struct s607*>(eax8 + 76);
        *reinterpret_cast<void***>(esi9 + 24) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(esi9 + 28) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(esi9 + 32) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(esi9 + 36) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(esi9 + 40) = reinterpret_cast<void**>(0x3f800000);
        *reinterpret_cast<void***>(esi9) = reinterpret_cast<void**>(0x18034cf8);
        eax10->f4 = reinterpret_cast<void**>(0x3f800000);
        eax10->f0 = reinterpret_cast<void**>(0x18034d80);
        edx11 = *reinterpret_cast<void***>(esi9);
        *reinterpret_cast<void***>(eax8) = reinterpret_cast<void**>(0x18034d58);
        *reinterpret_cast<void***>(edx11 + 36)(esi9);
        goto ebx7;
    }
}

struct s608 {
    signed char[4] pad4;
    void** f4;
};

void fun_1801b9a0(struct s608* ecx, void* a2) {
    fun_18022ac0(&ecx->f4, a2);
    return;
}

void fun_1801bcf0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17) {
    void** v18;
    void** esi19;
    void** edi20;
    void** eax21;
    void** edi22;
    void** esi23;
    void** ebx24;
    void** v25;
    void** v26;
    void** v27;
    void** v28;
    void** eax29;
    void** edx30;
    void** ecx31;
    void** v32;
    void** eax33;
    void** v34;
    void** edx35;
    void** v36;
    void** ecx37;
    void** v38;
    void** v39;
    void* eax40;
    void** v41;
    void** eax42;
    void** ecx43;
    void** edx44;
    void** v45;
    void** ecx46;
    void** edi47;
    void** edx48;
    void** eax49;
    void** v50;
    void** ecx51;
    void** v52;
    void** ecx53;
    void** v54;
    void** v55;
    void** ecx56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** ebp69;
    void** ecx70;
    void** ebx71;
    void** edx72;
    void* eax73;
    void** eax74;
    void** ebx75;
    void** ebx76;
    void** eax77;
    void** ecx78;
    void** edx79;
    void** edx80;
    void** v81;
    void** v82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** ecx92;
    void** edx93;
    void** eax94;
    void** eax95;
    void** ecx96;
    void** edx97;
    void** eax98;
    void** ecx99;
    void** v100;
    void** eax101;
    void** ecx102;
    void** edx103;
    void** eax104;
    void** edx105;
    void** v106;
    void** v107;
    void** v108;
    void** v109;
    void** v110;
    void** v111;
    void** v112;
    void** v113;
    void** v114;
    void** v115;
    void** v116;
    void** eax117;
    void** eax118;
    void** ecx119;
    void** edx120;
    void** eax121;
    void** eax122;
    void** v123;
    void** v124;
    void** v125;
    void** v126;
    void** v127;
    void** v128;
    void** v129;
    void** v130;
    void** v131;
    void** v132;
    void** v133;
    void** v134;
    void** ecx135;
    void** ecx136;
    void** edx137;
    void** eax138;
    void** v139;
    void** v140;
    void** v141;
    void** v142;
    void** v143;
    void** v144;
    void** v145;
    void** v146;
    void** v147;
    void** v148;
    void** v149;
    void** v150;
    void** v151;
    void** v152;
    void** v153;
    void** v154;
    void** v155;
    void** v156;
    void** v157;
    void** v158;
    void** v159;
    void** v160;
    void** v161;
    void** v162;
    void** v163;
    void** v164;
    void** v165;
    void** v166;
    void** v167;
    void** v168;
    void** v169;
    void** v170;
    void** v171;
    void** v172;
    void** v173;
    void** v174;
    void** v175;
    void** v176;
    void** v177;
    void** v178;
    void** v179;
    void** v180;
    void** v181;
    void** v182;
    void** v183;
    void** v184;

    __asm__("fild dword [ecx+0x10]");
    __asm__("fmul dword [ebp+0x8]");
    __asm__("fmul dword [0x18034544]");
    __asm__("fstp dword [ebp+0x8]");
    __asm__("fld dword [ebp+0x8]");
    __asm__("fistp dword [ebp-0x8]");
    if (v18 != *reinterpret_cast<void***>(ecx + 20) && (esi19 = ecx + 24, *reinterpret_cast<void***>(ecx + 20) = v18, edi20 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi19 + 4)) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi19))) >> 2), v18 != edi20)) {
        if (v18) {
            eax21 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v18) * 4);
            eax29 = fun_1802b2bb(ecx, eax21, edi22, esi23, ebx24, v25, v26, v27, v28);
            if (eax29) {
                if (reinterpret_cast<signed char>(v18) <= reinterpret_cast<signed char>(edi20)) {
                    edx30 = g18043450;
                    ecx31 = g18043458;
                    v32 = eax29;
                    eax33 = g18043454;
                    v34 = edx30;
                    edx35 = g1804345c;
                    v36 = ecx31;
                    ecx37 = *reinterpret_cast<void***>(esi19 + 8);
                    v38 = eax33;
                    v39 = edx35;
                    eax40 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ecx37) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi19)));
                    v41 = v18;
                    eax42 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax40) >> 2);
                    if (reinterpret_cast<signed char>(v18) > reinterpret_cast<signed char>(eax42)) {
                        ecx43 = *reinterpret_cast<void***>(esi19 + 4);
                        edx44 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v18) - reinterpret_cast<unsigned char>(eax42));
                        v45 = edx44;
                        ecx46 = ecx43 - reinterpret_cast<unsigned char>(edx44) * 4;
                        if (reinterpret_cast<signed char>(v18) > reinterpret_cast<signed char>(edx44)) {
                        }
                        edi47 = v41;
                    } else {
                        edi47 = v18;
                        ecx46 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx37) - reinterpret_cast<unsigned char>(eax21));
                    }
                    edx48 = g18043454;
                    eax49 = g18043458;
                    v50 = ecx46;
                    ecx51 = g18043450;
                    v52 = ecx51;
                    ecx53 = g1804345c;
                    v54 = edx48;
                    v55 = ecx53;
                    ecx56 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc8);
                    v57 = eax49;
                    fun_1801a210(ecx56, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffdc, edi47, edi22, esi23, ebx24, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v50, v52, v54, v57, v55, v32, v34, v38, v36, v39, v45, v68, eax21, eax29, ebp69, __return_address(), v41, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                    if (reinterpret_cast<signed char>(edi47) < reinterpret_cast<signed char>(v18)) {
                        ecx70 = *reinterpret_cast<void***>(esi19 + 8);
                        ebx71 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v18) - reinterpret_cast<unsigned char>(edi47));
                        edx72 = ebx71;
                        eax73 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ecx70) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi19)));
                        eax74 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax73) >> 2);
                        if (reinterpret_cast<signed char>(ebx71) > reinterpret_cast<signed char>(eax74)) {
                            ebx75 = *reinterpret_cast<void***>(esi19 + 4);
                            v45 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx71) - reinterpret_cast<unsigned char>(eax74));
                            ebx76 = ebx75 - reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(ebx71) - reinterpret_cast<unsigned char>(eax74)) * 4;
                            if (reinterpret_cast<signed char>(edx72) > reinterpret_cast<signed char>(reinterpret_cast<unsigned char>(ebx71) - reinterpret_cast<unsigned char>(eax74))) {
                            }
                            edx72 = edx72;
                        } else {
                            ebx76 = ecx70 - reinterpret_cast<unsigned char>(ebx71) * 4;
                        }
                        v41 = edx72;
                        fun_180196c0(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 76, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 36);
                        fun_1801c020(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 76, edi47);
                        fun_180196c0(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 96, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 76);
                        eax77 = g18043454;
                        ecx78 = g18043458;
                        edx79 = g18043450;
                        v54 = eax77;
                        v57 = ecx78;
                        v52 = edx79;
                        edx80 = g1804345c;
                        ecx56 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc8);
                        v50 = ebx76;
                        v55 = edx80;
                        fun_1801a210(ecx56, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffa0, v41, edi22, esi23, ebx24, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v50, v52, v54, v57, v55, v32, v34, v38, v36, v39, v45, v91, eax21, eax29, ebp69, __return_address(), v41, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                    }
                } else {
                    ecx92 = g18043454;
                    edx93 = g18043458;
                    v32 = eax29;
                    eax94 = g18043450;
                    v34 = eax94;
                    eax95 = g1804345c;
                    v38 = ecx92;
                    ecx96 = *reinterpret_cast<void***>(esi19 + 8);
                    v36 = edx93;
                    edx97 = *reinterpret_cast<void***>(esi19);
                    v39 = eax95;
                    eax98 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ecx96) - reinterpret_cast<unsigned char>(edx97)) >> 2);
                    if (reinterpret_cast<signed char>(edi20) > reinterpret_cast<signed char>(eax98)) {
                        ecx99 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi20) - reinterpret_cast<unsigned char>(eax98));
                        v100 = ecx99;
                        eax101 = *reinterpret_cast<void***>(esi19 + 4) - reinterpret_cast<unsigned char>(ecx99) * 4;
                        if (reinterpret_cast<signed char>(edi20) > reinterpret_cast<signed char>(ecx99)) {
                        }
                        v41 = edi20;
                    } else {
                        v41 = edi20;
                        eax101 = ecx96 - reinterpret_cast<unsigned char>(edi20) * 4;
                    }
                    ecx102 = g18043458;
                    edx103 = g18043450;
                    eax104 = g18043454;
                    edx105 = g1804345c;
                    fun_1801a210(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc8, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffdc, v41, edi22, esi23, ebx24, v106, v107, v108, v109, v110, v111, v112, v113, v114, v115, eax101, edx103, eax104, ecx102, edx105, v32, v34, v38, v36, v39, v116, v100, eax21, eax29, ebp69, __return_address(), v41, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                    if (reinterpret_cast<signed char>(v41) < reinterpret_cast<signed char>(edi20)) {
                        eax117 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi20) - reinterpret_cast<unsigned char>(v41));
                        fun_1801c1e0(esi19, eax117, eax117, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 16);
                        eax118 = g18043450;
                        ecx119 = g18043454;
                        edx120 = g18043458;
                        eax121 = g1804345c;
                        eax122 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffdc);
                        *reinterpret_cast<int16_t*>(&eax122) = fun_1801c050(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffa0, eax122, v41, v123);
                        fun_1801a210(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc8, eax122, v123, edi22, esi23, ebx24, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v100, eax118, ecx119, edx120, eax121, v32, v34, v38, v36, v39, v134, v100, eax21, eax29, ebp69, __return_address(), v41, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                    }
                    ecx135 = g18043450;
                    v52 = ecx135;
                    ecx136 = g1804345c;
                    edx137 = g18043454;
                    v50 = eax29 + reinterpret_cast<unsigned char>(edi20) * 4;
                    eax138 = g18043458;
                    v55 = ecx136;
                    ecx56 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc8);
                    v54 = edx137;
                    v57 = eax138;
                    fun_18017250(ecx56, reinterpret_cast<unsigned char>(v18) - reinterpret_cast<unsigned char>(edi20), edi22, esi23, ebx24, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v50, v52, v54, v57, v55, v32, v34, v38, v36, v39);
                }
                v149 = *reinterpret_cast<void***>(esi19);
                fun_1802b2b0(ecx56, v149, edi22, esi23, ebx24, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v50, v52, v54, v57, v55, v32, v34, v38, v36, v39, v45, v100, eax21, eax29, ebp69, __return_address(), v41, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
                *reinterpret_cast<void***>(esi19) = eax29;
                *reinterpret_cast<void***>(esi19 + 4) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax21) + reinterpret_cast<unsigned char>(eax29));
                *reinterpret_cast<void***>(esi19 + 8) = eax29;
            }
        } else {
            v160 = *reinterpret_cast<void***>(esi19);
            fun_1802b2b0(ecx, v160, edi22, esi23, ebx24, v161, v162, v163, v164, v165, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, ebp69, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
            *reinterpret_cast<void***>(esi19 + 4) = reinterpret_cast<void**>(0);
            *reinterpret_cast<void***>(esi19) = reinterpret_cast<void**>(0);
            *reinterpret_cast<void***>(esi19 + 8) = reinterpret_cast<void**>(0);
            return;
        }
    }
    return;
}

struct s610 {
    signed char[28] pad28;
    int32_t f28;
};

struct s609 {
    signed char[32] pad32;
    struct s610* f32;
};

void fun_1801c0a0(struct s609* ecx, void** a2, int32_t a3) {
    void** edi4;
    void** esi5;
    void** ebx6;
    struct s610* edx7;
    int32_t v8;

    __asm__("fld dword [esi+0x18]");
    __asm__("fchs ");
    __asm__("fstp dword [esp+0x10]");
    fun_18019950(a2, reinterpret_cast<int32_t>(__zero_stack_offset()) - 8 - 4 - 4 + 8, edi4, esi5, ebx6);
    edx7 = ecx->f32;
    edx7->f28(&ecx->f32);
    goto v8;
}

int16_t fun_1801c260(void** ecx, void** a2, void** a3, void** a4, void** a5) {
    void** edi6;
    void** esi7;
    void** eax8;
    void** eax9;

    eax8 = fun_1802b2bb(ecx, 40, edi6, esi7, __return_address(), a2, a3, a4, a5);
    if (!eax8) {
        return 0;
    } else {
        *reinterpret_cast<void***>(eax8) = reinterpret_cast<void**>(0x18034df0);
        fun_18022a90(eax8 + 4, 0);
        *reinterpret_cast<void***>(eax8 + 16) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 12) = a2;
        *reinterpret_cast<void***>(eax8 + 20) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 24) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 28) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 32) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 36) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8) = reinterpret_cast<void**>(0x18034dcc);
        eax9 = eax8;
        return *reinterpret_cast<int16_t*>(&eax9);
    }
}

struct s611 {
    signed char[4] pad4;
    void** f4;
    signed char[23] pad28;
    void** f28;
    signed char[3] pad32;
    int32_t f32;
    void** f36;
};

void** fun_1801c2b0(struct s611* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17) {
    void** eax18;
    void** ecx19;
    void** edx20;
    void** ecx21;
    void** edx22;
    int32_t ecx23;
    void** esi24;
    void** ax25;

    fun_18022b10(&ecx->f4);
    eax18 = ecx->f28;
    ecx->f36 = eax18;
    ecx19 = g18043450;
    edx20 = g18043454;
    ecx21 = g18043458;
    edx22 = g1804345c;
    ecx23 = ecx->f32;
    ax25 = fun_18017250(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 - 4 + 4 - 4 + 8, reinterpret_cast<int32_t>(ecx23 - reinterpret_cast<unsigned char>(eax18)) >> 2, esi24, eax18, ecx19, edx20, ecx21, edx22, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
    return ax25;
}

void fun_1801cc20() {
    __asm__("fld qword [0x180346f0]");
    __asm__("fstp dword [ecx+0x10]");
    __asm__("fild dword [ebp+0x8]");
    __asm__("fmul qword [0x180346d0]");
    __asm__("fidiv dword [ecx+0xc]");
    __asm__("fstp qword [ebp-0x8]");
    __asm__("fld qword [ebp-0x8]");
    __asm__("fsin ");
    __asm__("fstp qword [ebp-0x10]");
    __asm__("fld qword [ebp-0x10]");
    __asm__("fadd st0, st0");
    __asm__("fstp dword [ecx+0x14]");
    return;
}

struct s613 {
    signed char[24] pad24;
    int32_t f24;
};

struct s612 {
    struct s613* f0;
    signed char[12] pad16;
    void** f16;
    signed char[3] pad20;
    void** f20;
    signed char[3] pad24;
    signed char f24;
};

struct s614 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

struct s615 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

int16_t fun_1801cd80(struct s612* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43) {
    void** edi44;
    struct s612* esi45;
    void** eax46;
    void** ecx47;
    void** edi48;
    void** esi49;
    void** eax50;
    int32_t eax51;
    void** edx52;
    void* ecx53;
    void* eax54;
    struct s614* edi55;
    struct s615* ebx56;
    struct s613* eax57;

    edi44 = a2;
    esi45 = ecx;
    eax46 = esi45->f16;
    if (eax46 == *reinterpret_cast<void***>(edi44 + 4) || (ecx47 = esi45->f20, fun_1802b2b0(ecx47, ecx47, edi48, esi49, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43), eax50 = *reinterpret_cast<void***>(edi44 + 4), esi45->f16 = eax50, eax46 = fun_1802b2bb(ecx47, reinterpret_cast<uint32_t>(eax50 + reinterpret_cast<unsigned char>(eax50) * 2) << 3, ecx47, edi48, esi49, __return_address(), a2, a3, a4), esi45->f20 = eax46, !!eax46)) {
        __asm__("fld dword [edi]");
        __asm__("fst dword [esi+0xc]");
        __asm__("fcomp dword [0x18034238]");
        __asm__("fnstsw ax");
        if (*reinterpret_cast<unsigned char*>(&eax46 + 1) & 64) {
            eax51 = 0;
        } else {
            eax51 = 1;
        }
        esi45->f24 = *reinterpret_cast<signed char*>(&eax51);
        edx52 = reinterpret_cast<void**>(0);
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(esi45->f16) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(esi45->f16 == 0))) {
            ecx53 = reinterpret_cast<void*>(0);
            eax54 = reinterpret_cast<void*>(0);
            while (edi55 = reinterpret_cast<struct s614*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(edi44 + 8)) + reinterpret_cast<uint32_t>(eax54)), ebx56 = reinterpret_cast<struct s615*>(reinterpret_cast<unsigned char>(esi45->f20) + reinterpret_cast<uint32_t>(ecx53)), ++edx52, eax54 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(eax54) + 16), ecx53 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ecx53) + 24), ebx56->f0 = edi55->f0, ebx56->f4 = edi55->f4, ebx56->f8 = edi55->f8, ebx56->f12 = edi55->f12, reinterpret_cast<signed char>(edx52) < reinterpret_cast<signed char>(esi45->f16)) {
                edi44 = a2;
            }
        }
        eax57 = esi45->f0;
        eax57->f24(esi45);
        return 0;
    } else {
        return 1;
    }
}

struct s616 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

void fun_18017c40(struct s616* a1) {
    void** edx2;
    void** edx3;
    void** edx4;
    void** edx5;

    edx2 = g18043440;
    a1->f0 = edx2;
    edx3 = g18043444;
    a1->f4 = edx3;
    edx4 = g18043448;
    a1->f8 = edx4;
    edx5 = g1804344c;
    a1->f12 = edx5;
    return;
}

void** fun_1801cf40(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** eax8;

    eax8 = fun_1802b2bb(ecx, 28, __return_address(), a2, a3, a4, a5, a6, a7);
    if (!eax8) {
        return 0;
    } else {
        *reinterpret_cast<void***>(eax8) = reinterpret_cast<void**>(0x18034e80);
        fun_18022a90(eax8 + 4, 0x3e8);
        *reinterpret_cast<void***>(eax8 + 16) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 20) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 24) = reinterpret_cast<void**>(1);
        *reinterpret_cast<void***>(eax8) = reinterpret_cast<void**>(0x18034e5c);
        fun_1801cea0(eax8);
        return eax8;
    }
}

int16_t fun_1801cd40(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_1801cd60(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_1801cf60(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** esi7;
    void** eax8;
    void** eax9;
    void** eax10;
    int32_t eax11;
    void** eax12;
    void** edx13;

    eax8 = fun_1802b2bb(ecx, 28, esi7, __return_address(), a2, a3, a4, a5, a6);
    if (!eax8 || (eax9 = fun_1801cfb0(eax8), !eax9)) {
        return 0;
    } else {
        eax10 = *reinterpret_cast<void***>(eax9);
        eax11 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(eax10 + 32)(eax9));
        if (!eax11) {
            eax12 = *reinterpret_cast<void***>(eax9);
            *reinterpret_cast<void***>(eax12 + 24)(eax9);
            goto esi7;
        } else {
            edx13 = *reinterpret_cast<void***>(eax9);
            *reinterpret_cast<void***>(edx13)(eax9);
            goto a2;
        }
    }
}

int16_t fun_1801cfe0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_1801d000(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s617 {
    signed char[16] pad16;
    void** f16;
    signed char[3] pad20;
    void** f20;
    signed char[3] pad24;
    signed char f24;
};

int16_t fun_1801d020(struct s617* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43) {
    void** ebx44;
    struct s617* esi45;
    void** eax46;
    void** ecx47;
    void** esi48;
    void** ebx49;
    void** eax50;
    int32_t eax51;
    void** eax52;
    void** edi53;
    void* ebp54;
    void* eax55;
    void*** ecx56;
    void** v57;

    ebx44 = a2;
    esi45 = ecx;
    eax46 = esi45->f16;
    if (eax46 == *reinterpret_cast<void***>(ebx44 + 8) || (ecx47 = esi45->f20, fun_1802b2b0(ecx47, ecx47, esi48, ebx49, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43), eax50 = *reinterpret_cast<void***>(ebx44 + 8), esi45->f16 = eax50, eax46 = fun_1802b2bb(ecx47, reinterpret_cast<unsigned char>(eax50) << 4, ecx47, esi48, ebx49, __return_address(), a2, a3, a4), esi45->f20 = eax46, !!eax46)) {
        __asm__("fld dword [ebx+0x4]");
        __asm__("fst dword [esi+0xc]");
        __asm__("fcomp dword [0x18034238]");
        __asm__("fnstsw ax");
        if (*reinterpret_cast<unsigned char*>(&eax46 + 1) & 64) {
            eax51 = 0;
        } else {
            eax51 = 1;
        }
        esi45->f24 = *reinterpret_cast<signed char*>(&eax51);
        eax52 = esi45->f16;
        edi53 = reinterpret_cast<void**>(0);
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax52) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax52 == 0))) {
            ebp54 = reinterpret_cast<void*>(0);
            do {
                eax55 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(esi45->f20) + reinterpret_cast<uint32_t>(ebp54));
                ecx56 = reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx44 + 12) + reinterpret_cast<unsigned char>(edi53) * 8);
                v57 = *reinterpret_cast<void***>(ebx44);
                fun_18019f00(ecx56, v57, eax55, reinterpret_cast<uint32_t>(eax55) + 4);
                ++edi53;
                ebp54 = reinterpret_cast<void*>(reinterpret_cast<uint32_t>(ebp54) + 16);
            } while (reinterpret_cast<signed char>(edi53) < reinterpret_cast<signed char>(esi45->f16));
        }
        return 0;
    } else {
        return 1;
    }
}

int16_t fun_1801d410(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** eax8;
    int16_t ax9;

    eax8 = fun_1802b2bb(ecx, 40, __return_address(), a2, a3, a4, a5, a6, a7);
    if (!eax8) {
        return 0;
    } else {
        ax9 = fun_1801d1e0(eax8, a2);
        return ax9;
    }
}

struct s618 {
    signed char[8] pad8;
    void** f8;
};

void fun_1801d220(struct s618* ecx, void* a2) {
    fun_18022ac0(&ecx->f8, a2);
    return;
}

struct s619 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

void fun_1801d432(struct s619* ecx) {
    ecx->f4 = 0;
    ecx->f8 = 0;
    ecx->f12 = 0;
    ecx->f0 = 0x18034f14;
    return;
}

int16_t fun_1801d4b0(void** ecx, void** a2) {
    void** eax3;
    void** esi4;
    void** edi5;
    void** ebx6;
    void** edi7;
    void** esi8;
    void** ebp9;
    void** ebx10;
    void** v11;
    void** v12;
    void** v13;
    void** eax14;
    void* esp15;
    void** ecx16;
    void** edx17;
    void** v18;
    void** eax19;
    void** edi20;
    void** v21;
    void** ecx22;
    void** v23;
    void** v24;
    void** edx25;
    void** v26;
    void** v27;
    void** eax28;
    void** ecx29;
    void** edx30;
    void** v31;
    void** ecx32;
    void** ebx33;
    void** edx34;
    void** eax35;
    void** v36;
    void** ecx37;
    void** v38;
    void*** esp39;
    void** ecx40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void* esp66;
    void** edx67;
    void** eax68;
    void** ecx69;
    void** ebp70;
    void** v71;
    void** edi72;
    void** eax73;
    void** v74;
    void** edi75;
    void*** esp76;
    void* esp77;
    void* esp78;
    void** ecx79;
    void** edx80;
    void** eax81;
    void** v82;
    void** ecx83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** v92;
    void** v93;
    void** v94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** ebx103;
    void** ecx104;
    void** ebx105;
    void** v106;
    void** eax107;
    void** v108;
    void** eax109;
    void** edx110;
    void** v111;
    void** ecx112;
    void** v113;
    void** v114;
    void** eax115;
    void** ebx116;
    void** ecx117;
    void** ebx118;
    void** eax119;
    void** v120;
    void** ecx121;
    void** v122;
    void** edx123;
    void** v124;
    void*** esp125;
    void** v126;
    void** v127;
    void** v128;
    void** v129;
    void** v130;
    void** v131;
    void** v132;
    void** v133;
    void** v134;
    void** v135;
    void** v136;
    void** v137;
    void** v138;
    void** v139;
    void** v140;
    void** v141;
    void** v142;
    void** v143;
    void** v144;
    void** v145;
    void** v146;
    void** v147;
    void** v148;
    void** v149;
    void* esp150;
    void** eax151;
    void** eax152;
    void** ecx153;
    void** v154;
    void** edx155;
    void** v156;
    void** eax157;
    void** v158;
    void** v159;
    void** v160;
    void*** esp161;
    void*** esp162;
    void** eax163;
    void*** esp164;
    void** v165;
    void** v166;
    void** v167;
    void** v168;
    void** v169;
    void** v170;
    void** v171;
    void** v172;
    void** v173;
    void** v174;
    void** v175;
    void** v176;
    void** v177;
    void** v178;
    void** v179;
    void** v180;
    void** v181;
    void** edx182;
    void** eax183;
    void** v184;
    void** edx185;
    void** v186;
    void** ecx187;
    void** v188;
    void** v189;
    void** v190;
    void** v191;
    void** v192;
    void** v193;
    void** v194;
    void** v195;
    void** v196;
    void** v197;
    void** v198;
    void** v199;
    void** v200;
    void** v201;
    void** v202;
    void** v203;
    void** v204;
    void** v205;
    void** v206;
    void** v207;
    void** v208;
    void** v209;
    void** v210;
    void** v211;
    void** v212;
    void** v213;
    void** v214;
    void** v215;
    void** v216;
    void** v217;
    void** v218;
    void** v219;
    void** v220;
    void** v221;
    void** v222;
    void** v223;
    void** v224;
    void** v225;
    void** v226;
    void** v227;
    void** v228;
    void** v229;
    void** v230;
    void** v231;
    void** v232;
    void** v233;
    void** v234;
    void** v235;
    void** v236;
    void** v237;
    void** v238;
    void** v239;
    void** v240;
    void** v241;
    void** v242;
    int16_t ax243;

    eax3 = *reinterpret_cast<void***>(ecx + 4);
    esi4 = ecx + 4;
    edi5 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi4 + 4)) - reinterpret_cast<unsigned char>(eax3)) >> 2);
    if (a2 != edi5) {
        if (a2) {
            ebx6 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a2) * 4);
            eax14 = fun_1802b2bb(ecx, ebx6, edi7, esi8, ebp9, ebx10, v11, v12, v13);
            esp15 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0xe0 - 4 - 4 - 4 - 4 - 4 - 4 + 4 + 4);
            if (eax14) {
                if (reinterpret_cast<signed char>(a2) <= reinterpret_cast<signed char>(edi5)) {
                    ecx16 = g18043458;
                    edx17 = g1804345c;
                    v18 = eax14;
                    eax19 = g18043454;
                    edi20 = g18043450;
                    v21 = ecx16;
                    ecx22 = *reinterpret_cast<void***>(esi4 + 8);
                    v23 = eax19;
                    v24 = edx17;
                    edx25 = *reinterpret_cast<void***>(esi4);
                    v26 = edi20;
                    v27 = a2;
                    eax28 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ecx22) - reinterpret_cast<unsigned char>(edx25)) >> 2);
                    if (reinterpret_cast<signed char>(a2) > reinterpret_cast<signed char>(eax28)) {
                        ecx29 = *reinterpret_cast<void***>(esi4 + 4);
                        edx30 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a2) - reinterpret_cast<unsigned char>(eax28));
                        v31 = edx30;
                        ecx32 = ecx29 - reinterpret_cast<unsigned char>(edx30) * 4;
                        if (reinterpret_cast<signed char>(a2) > reinterpret_cast<signed char>(edx30)) {
                        }
                        ebx33 = v31;
                    } else {
                        ecx32 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx22) - reinterpret_cast<unsigned char>(ebx6));
                        ebx33 = a2;
                    }
                    edx34 = g18043458;
                    eax35 = g1804345c;
                    v36 = ecx32;
                    ecx37 = g18043454;
                    v38 = ecx37;
                    esp39 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp15) - 4 - 4);
                    ecx40 = reinterpret_cast<void**>(esp39 + 88);
                    v41 = edi20;
                    v42 = edx34;
                    v43 = eax35;
                    fun_1801a210(ecx40, reinterpret_cast<int32_t>(esp15) + 40, ebx33, edi7, esi8, ebp9, ebx10, v27, v31, eax14, v44, v45, ebx6, v18, v26, v23, v21, v24, v46, v47, v48, v49, v50, v36, v41, v38, v42, v43, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65);
                    esp66 = reinterpret_cast<void*>(esp39 - 4 + 8 + 4);
                    if (reinterpret_cast<signed char>(ebx33) < reinterpret_cast<signed char>(a2)) {
                        edx67 = *reinterpret_cast<void***>(esi4 + 8);
                        eax68 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a2) - reinterpret_cast<unsigned char>(ebx33));
                        ecx69 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(edx67) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi4))) >> 2);
                        ebp70 = eax68;
                        v71 = ebp70;
                        if (reinterpret_cast<signed char>(eax68) > reinterpret_cast<signed char>(ecx69)) {
                            edi72 = *reinterpret_cast<void***>(esi4 + 4);
                            eax73 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax68) - reinterpret_cast<unsigned char>(ecx69));
                            v74 = eax73;
                            edi75 = edi72 - reinterpret_cast<unsigned char>(eax73) * 4;
                            if (reinterpret_cast<signed char>(ebp70) > reinterpret_cast<signed char>(eax73)) {
                            }
                            ebp70 = v74;
                        } else {
                            edi75 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx67) - (reinterpret_cast<unsigned char>(eax68) << 2));
                        }
                        fun_180196c0(reinterpret_cast<int32_t>(esp66) + 0xb4, reinterpret_cast<int32_t>(esp66) + 40);
                        esp76 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp66) - 4 - 4 + 4 + 4 - 4);
                        fun_1801c020(esp76 + 0xb8, ebx33);
                        esp77 = reinterpret_cast<void*>(esp76 - 4 + 4 + 4);
                        fun_180196c0(reinterpret_cast<int32_t>(esp77) + 0xc8, reinterpret_cast<int32_t>(esp77) + 0xb4);
                        esp78 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp77) - 4 - 4 + 4 + 4);
                        ecx79 = g18043450;
                        edx80 = g18043454;
                        eax81 = g18043458;
                        v82 = ecx79;
                        ecx83 = g1804345c;
                        v84 = edx80;
                        v85 = ecx83;
                        ecx40 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp78) - 4 - 4 + 0x6c);
                        v86 = edi75;
                        v87 = eax81;
                        fun_1801a210(ecx40, reinterpret_cast<int32_t>(esp78) + 0xc8, ebp70, edi7, esi8, ebp9, ebx10, v27, v31, eax14, v71, v74, ebx6, v18, v26, v23, v21, v24, v88, v89, v90, v91, v92, v36, v41, v38, v42, v43, v86, v82, v84, v87, v85, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102);
                    }
                    ebx103 = eax14;
                } else {
                    ecx104 = g18043458;
                    ebx105 = *reinterpret_cast<void***>(esi4);
                    v106 = eax14;
                    eax107 = g18043454;
                    v108 = eax107;
                    eax109 = g1804345c;
                    edx110 = g18043450;
                    v111 = ecx104;
                    ecx112 = *reinterpret_cast<void***>(esi4 + 8);
                    v113 = eax109;
                    v114 = edx110;
                    v31 = edi5;
                    eax115 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ecx112) - reinterpret_cast<unsigned char>(ebx105)) >> 2);
                    if (reinterpret_cast<signed char>(edi5) > reinterpret_cast<signed char>(eax115)) {
                        ebx116 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi5) - reinterpret_cast<unsigned char>(eax115));
                        v27 = ebx116;
                        ecx117 = *reinterpret_cast<void***>(esi4 + 4) - reinterpret_cast<unsigned char>(ebx116) * 4;
                        if (reinterpret_cast<signed char>(edi5) > reinterpret_cast<signed char>(ebx116)) {
                        }
                        ebx118 = v31;
                    } else {
                        ebx118 = edi5;
                        ecx117 = ecx112 - reinterpret_cast<unsigned char>(edi5) * 4;
                    }
                    eax119 = g1804345c;
                    v120 = ecx117;
                    ecx121 = g18043454;
                    v122 = edx110;
                    edx123 = g18043458;
                    v124 = ecx121;
                    esp125 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp15) - 4 - 4);
                    v126 = edx123;
                    v127 = eax119;
                    fun_1801a210(esp125 + 0x94, reinterpret_cast<int32_t>(esp15) + 60, ebx118, edi7, esi8, ebp9, ebx10, v27, v31, eax14, v128, v129, ebx6, v130, v131, v132, v133, v134, v106, v114, v108, v111, v113, v135, v136, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v120, v122, v124, v126, v127);
                    esp150 = reinterpret_cast<void*>(esp125 - 4 + 8 + 4);
                    if (reinterpret_cast<signed char>(ebx118) < reinterpret_cast<signed char>(edi5)) {
                        eax151 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi5) - reinterpret_cast<unsigned char>(ebx118));
                        fun_1801c1e0(esi4, eax151, eax151, reinterpret_cast<int32_t>(esp150) + 16, reinterpret_cast<int32_t>(esp150) + 20);
                        eax152 = g18043450;
                        ecx153 = g18043454;
                        v154 = v27;
                        edx155 = g18043458;
                        v156 = eax152;
                        eax157 = g1804345c;
                        v158 = ecx153;
                        v159 = edx155;
                        v160 = eax157;
                        esp161 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp150) - 4 - 4 - 4 - 4 - 4 + 16 + 4 - 4);
                        esp162 = esp161 - 4;
                        eax163 = reinterpret_cast<void**>(esp162 + 0xe4);
                        *reinterpret_cast<int16_t*>(&eax163) = fun_1801c050(eax163, esp161 + 64, ebx118, v31);
                        esp164 = esp162 - 4 - 4 - 4 + 12 + 4 - 4;
                        fun_1801a210(esp164 + 0x80, eax163, v31, edi7, esi8, ebp9, ebx10, v27, v31, eax14, v165, v166, ebx6, v167, v168, v169, v170, v171, v106, v114, v108, v111, v113, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v154, v156, v158, v159, v160, v120, v122, v124, v126, v127);
                        esp150 = reinterpret_cast<void*>(esp164 - 4 + 8 + 4);
                    }
                    ebx103 = eax14;
                    edx182 = g18043450;
                    eax183 = g18043454;
                    v184 = edx182;
                    edx185 = g1804345c;
                    v186 = ebx103 + reinterpret_cast<unsigned char>(edi5) * 4;
                    ecx187 = g18043458;
                    v188 = ecx187;
                    ecx40 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp150) - 4 + 0xa4);
                    v189 = eax183;
                    v190 = edx185;
                    fun_18017250(ecx40, reinterpret_cast<unsigned char>(a2) - reinterpret_cast<unsigned char>(edi5), edi7, esi8, ebp9, ebx10, v27, v31, eax14, v191, v192, ebx6, v193, v194, v195, v196, v197, v106, v114, v108, v111, v113, v198, v199, v200);
                }
                v201 = *reinterpret_cast<void***>(esi4);
                *reinterpret_cast<int16_t*>(&eax3) = fun_1802b2b0(ecx40, v201, edi7, esi8, ebp9, ebx10, v27, v31, eax14, v71, v74, ebx6, v18, v26, v23, v21, v24, v106, v114, v108, v111, v113, v36, v41, v38, v42, v43, v86, v82, v84, v87, v85, v154, v156, v158, v159, v160, v120, v122, v124, v126, v127, v186, v184, v189, v188, v190);
                *reinterpret_cast<void***>(esi4) = ebx103;
                *reinterpret_cast<void***>(esi4 + 4) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx6) + reinterpret_cast<unsigned char>(ebx103));
                *reinterpret_cast<void***>(esi4 + 8) = ebx103;
            } else {
                *reinterpret_cast<signed char*>(&eax14) = 0;
                return *reinterpret_cast<int16_t*>(&eax14);
            }
        } else {
            ax243 = fun_1802b2b0(ecx, eax3, edi7, esi8, ebp9, ebx10, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242);
            *reinterpret_cast<void***>(esi4 + 4) = reinterpret_cast<void**>(0);
            *reinterpret_cast<void***>(esi4) = reinterpret_cast<void**>(0);
            *reinterpret_cast<void***>(esi4 + 8) = reinterpret_cast<void**>(0);
            *reinterpret_cast<signed char*>(&ax243) = 1;
            return ax243;
        }
    }
    *reinterpret_cast<signed char*>(&eax3) = 1;
    return *reinterpret_cast<int16_t*>(&eax3);
}

struct s620 {
    signed char[4] pad4;
    int32_t f4;
    int32_t f8;
};

int32_t fun_1801d840(struct s620* ecx) {
    return ecx->f8 - ecx->f4 >> 2;
}

struct s621 {
    signed char[4] pad4;
    int32_t f4;
    void*** f8;
    void*** f12;
};

void** fun_1801d8e0(struct s621* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26) {
    void** ebx27;
    void*** ecx28;
    int32_t ebp29;
    void** eax30;
    void** ecx31;
    void*** eax32;
    void** eax33;
    void** ebp34;
    void** ecx35;
    void** edx36;
    void** eax37;
    void** eax38;
    void*** esp39;
    void** edi40;
    void** esi41;
    void** ebp42;
    void** ebx43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** ax49;
    void* esp50;
    void*** edx51;
    void** esi52;
    int32_t eax53;
    void** v54;
    void* eax55;
    void** ecx56;
    void** edx57;
    void** ebx58;
    void** eax59;
    void** ecx60;
    void* edi61;
    void** ecx62;
    void** edx63;
    void** v64;
    void** eax65;
    void** v66;
    void** ecx67;
    void** ecx68;
    void** eax69;

    ebx27 = a3;
    ecx28 = ecx->f12;
    ebp29 = ecx->f4;
    eax30 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ecx28) - ebp29 >> 2);
    if (reinterpret_cast<signed char>(ebx27) > reinterpret_cast<signed char>(eax30)) {
        ecx31 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(eax30));
        eax32 = ecx->f8;
        a3 = ecx31;
        eax33 = reinterpret_cast<void**>(eax32 - reinterpret_cast<unsigned char>(ecx31) * 4);
        if (reinterpret_cast<signed char>(a4) > reinterpret_cast<signed char>(ecx31)) {
        }
        ebp34 = a4;
    } else {
        ebp34 = a4;
        eax33 = reinterpret_cast<void**>(ecx28 - reinterpret_cast<unsigned char>(ebx27) * 4);
    }
    ecx35 = g18043454;
    edx36 = g18043458;
    eax37 = g18043450;
    eax38 = g1804345c;
    esp39 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 40 - 4 - 4 - 4 - 4 - 4 - 4);
    ax49 = fun_1801a210(esp39 + 24, a2, ebp34, edi40, esi41, ebp42, ebx43, eax33, eax37, ecx35, edx36, eax38, v44, v45, v46, v47, v48, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
    esp50 = reinterpret_cast<void*>(esp39 - 4 + 8 + 4);
    if (reinterpret_cast<signed char>(ebp34) < reinterpret_cast<signed char>(a4)) {
        edx51 = ecx->f12;
        esi52 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a4) - reinterpret_cast<unsigned char>(ebp34));
        eax53 = reinterpret_cast<int32_t>(edx51) - ecx->f4;
        v54 = esi52;
        eax55 = reinterpret_cast<void*>(eax53 >> 2);
        if (reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(ebp34)) > reinterpret_cast<int32_t>(eax55)) {
            ecx56 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(ebp34) - reinterpret_cast<uint32_t>(eax55));
            a3 = ecx56;
            edx57 = reinterpret_cast<void**>(ecx->f8 - reinterpret_cast<unsigned char>(ecx56) * 4);
            if (reinterpret_cast<signed char>(esi52) > reinterpret_cast<signed char>(ecx56)) {
            }
            esi52 = v54;
        } else {
            edx57 = reinterpret_cast<void**>(edx51 - (reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(ebp34)) * 4);
        }
        ebx58 = *reinterpret_cast<void***>(a2);
        eax59 = a2 + 4;
        ecx60 = *reinterpret_cast<void***>(eax59 + 12);
        if (reinterpret_cast<signed char>(ecx60) < reinterpret_cast<signed char>(0)) {
            edi61 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax59 + 8)) * reinterpret_cast<unsigned char>(ebp34));
        } else {
            edi61 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ebp34) << *reinterpret_cast<unsigned char*>(&ecx60));
        }
        ecx62 = *reinterpret_cast<void***>(eax59);
        edx63 = g18043454;
        v64 = *reinterpret_cast<void***>(eax59 + 4);
        eax65 = *reinterpret_cast<void***>(eax59 + 12);
        v66 = *reinterpret_cast<void***>(eax59 + 8);
        ecx67 = g18043450;
        ecx68 = g1804345c;
        eax69 = g18043458;
        ax49 = fun_1801a210(reinterpret_cast<int32_t>(esp50) - 4 - 4 + 44, reinterpret_cast<int32_t>(esp50) + 16, esi52, edi40, esi41, ebp42, ebx43, reinterpret_cast<unsigned char>(ebx58) + reinterpret_cast<uint32_t>(edi61), ecx62, v64, v66, eax65, edx57, ecx67, edx63, eax69, ecx68, __return_address(), a2, a3, v54, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
    }
    return ax49;
}

struct s622 {
    signed char[4] pad4;
    void** f4;
    signed char[3] pad8;
    int32_t f8;
    void** f12;
};

int16_t fun_1801dcc0(struct s622* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36) {
    void** v37;
    void** v38;
    void** ebx39;
    struct s622* ebx40;
    void** v41;
    void** ebp42;
    void** v43;
    void** esi44;
    void** ecx45;
    void** eax46;
    void** v47;
    void** esi48;
    void** v49;
    void** ebp50;
    void** esi51;
    void** eax52;
    void** v53;
    void** edi54;
    void** edi55;
    uint32_t ecx56;
    uint32_t ecx57;
    void** edx58;
    void** eax59;
    void** v60;
    void** v61;
    void** eax62;
    void** v63;
    void** v64;
    void*** edi65;
    void** edx66;
    void** esi67;
    uint32_t ecx68;
    void** v69;
    void** ecx70;

    v37 = reinterpret_cast<void**>(__return_address());
    v38 = ebx39;
    ebx40 = ecx;
    v41 = ebp42;
    v43 = esi44;
    ecx45 = ebx40->f12;
    eax46 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ecx45) - reinterpret_cast<unsigned char>(ebx40->f4)) >> 2);
    v47 = eax46;
    if (eax46 && (esi48 = reinterpret_cast<void**>((reinterpret_cast<int32_t>(ebx40->f8 - reinterpret_cast<unsigned char>(ecx45)) >> 2) * 4), v49 = esi48, eax46 = fun_1802b2bb(ecx45, esi48, v43, v41, v38, v47, v49, v37, a2), ebp50 = eax46, !!ebp50)) {
        esi51 = ebx40->f12;
        eax52 = esi48;
        v53 = edi54;
        edi55 = ebp50;
        ecx56 = reinterpret_cast<unsigned char>(esi48) >> 2;
        while (ecx56) {
            --ecx56;
            *reinterpret_cast<void***>(edi55) = *reinterpret_cast<void***>(esi51);
            edi55 = edi55 + 4;
            esi51 = esi51 + 4;
        }
        ecx57 = reinterpret_cast<unsigned char>(eax52) & 3;
        while (ecx57) {
            --ecx57;
            *reinterpret_cast<void***>(edi55) = *reinterpret_cast<void***>(esi51);
            ++edi55;
            ++esi51;
        }
        edx58 = ebx40->f12;
        eax59 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v47) * 4);
        v60 = eax59;
        v61 = eax59;
        eax62 = ebx40->f4;
        v63 = edx58;
        v64 = eax62;
        fun_1802b920(v64, v63, v61, v53, v43, v41, v38, v60, v49, v37, a2, a3);
        edi65 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(ebx40->f4) + reinterpret_cast<unsigned char>(v60));
        edx66 = v49;
        esi67 = ebp50;
        ecx68 = reinterpret_cast<unsigned char>(v49) >> 2;
        while (ecx68) {
            --ecx68;
            *edi65 = *reinterpret_cast<void***>(esi67);
            edi65 = edi65 + 4;
            esi67 = esi67 + 4;
        }
        v69 = ebp50;
        ecx70 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx66) & 3);
        while (ecx70) {
            --ecx70;
            *edi65 = *reinterpret_cast<void***>(esi67);
            ++edi65;
            ++esi67;
        }
        ebx40->f12 = ebx40->f4;
        *reinterpret_cast<int16_t*>(&eax46) = fun_1802b2b0(ecx70, v69, v64, v63, v61, v53, v43, v41, v38, v60, v49, v37, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36);
    }
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s623 {
    signed char[4] pad4;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

int32_t fun_1801dd70(struct s623* ecx) {
    int32_t eax2;
    int32_t ebp3;
    int32_t eax4;
    int32_t esi5;
    int32_t eax6;
    int32_t edx7;
    int32_t ebx8;
    int32_t esi9;
    int32_t ebx10;
    int32_t ebp11;
    int32_t esi12;
    int32_t eax13;
    int32_t edi14;
    int32_t edx15;
    int32_t edx16;
    int32_t esi17;
    int32_t eax18;
    int32_t esi19;
    signed char al20;
    signed char al21;

    eax2 = ecx->f8;
    ebp3 = ecx->f4;
    eax4 = eax2 - ecx->f4;
    esi5 = ecx->f12;
    eax6 = eax4 >> 2;
    edx7 = esi5 - ebp3 >> 2;
    if (eax6 > edx7) {
        ebx8 = ecx->f8;
        esi9 = eax6 - edx7;
        ebx10 = ebx8 - esi9 * 4;
        if (eax6 > esi9) {
        }
        ebp11 = esi9;
    } else {
        ebp11 = eax6;
        ebx10 = esi5 - eax6 * 4;
    }
    esi12 = ecx->f12;
    eax13 = eax6 - ebp11;
    edi14 = eax13;
    edx15 = esi12 - ecx->f4;
    edx16 = edx15 >> 2;
    if (eax13 > edx16) {
        esi17 = ecx->f8;
        eax18 = eax13 - edx16;
        esi19 = esi17 - eax18 * 4;
        if (edi14 > eax18) {
        }
        edi14 = edi14;
    } else {
        esi19 = esi12 - (eax13 << 2);
    }
    al20 = fun_18017be0(ebx10, ebp11);
    if (!al20 || (al21 = fun_18017be0(esi19, edi14), al21 == 0)) {
        return 0;
    } else {
        return 1;
    }
}

struct s624 {
    signed char[4] pad4;
    void** f4;
    signed char[3] pad8;
    int32_t f8;
    void** f12;
};

void** fun_1801de40(struct s624* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18) {
    void** eax19;
    void** edx20;
    int32_t ecx21;
    void** edx22;
    void** edx23;
    void** edx24;
    void** ax25;

    eax19 = ecx->f4;
    ecx->f12 = eax19;
    edx20 = g18043450;
    ecx21 = ecx->f8;
    edx22 = g18043454;
    edx23 = g18043458;
    edx24 = g1804345c;
    ax25 = fun_18017250(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 + 4, reinterpret_cast<int32_t>(ecx21 - reinterpret_cast<unsigned char>(eax19)) >> 2, eax19, edx20, edx22, edx23, edx24, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
    return ax25;
}

int16_t fun_1801d460(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_1801d480(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_1801deb0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** esi7;
    void** eax8;
    void** eax9;
    void** eax10;
    void** edx11;
    void** v12;
    void** eax13;
    void** eax14;

    eax8 = fun_1802b2bb(ecx, 60, esi7, __return_address(), a2, a3, a4, a5, a6);
    if (!eax8 || (eax9 = fun_1801df00(eax8), !eax9)) {
        return 0;
    } else {
        eax10 = a2;
        edx11 = *reinterpret_cast<void***>(eax10);
        v12 = *reinterpret_cast<void***>(eax10 + 4);
        *reinterpret_cast<int16_t*>(&eax10) = fun_1801dfa0(eax9, edx11, v12);
        if (!eax10) {
            eax13 = eax9;
            return *reinterpret_cast<int16_t*>(&eax13);
        } else {
            eax14 = *reinterpret_cast<void***>(eax9);
            *reinterpret_cast<void***>(eax14)(eax9);
            goto esi7;
        }
    }
}

int16_t fun_1801df40(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_1801df60(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_1801eba0(void** ecx, void** a2, void** a3, void** a4) {
    void** edi5;
    void** ebp6;
    void** ebx7;
    void** eax8;
    void** esi9;
    struct s607* eax10;
    void** edx11;

    eax8 = fun_1802b2bb(ecx, 84, edi5, ebp6, ebx7, __return_address(), a2, a3, a4);
    if (!eax8) {
        return 0;
    } else {
        *reinterpret_cast<void***>(eax8) = reinterpret_cast<void**>(0x18034da0);
        fun_18022a90(eax8 + 4, 0);
        esi9 = eax8 + 32;
        *reinterpret_cast<void***>(eax8 + 12) = ecx;
        *reinterpret_cast<void***>(eax8 + 16) = a2;
        *reinterpret_cast<void***>(eax8 + 20) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 24) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(eax8 + 28) = reinterpret_cast<void**>(0x3f800000);
        *reinterpret_cast<void***>(esi9) = reinterpret_cast<void**>(0x18034d28);
        fun_18022a90(esi9 + 4, 0);
        *reinterpret_cast<void***>(esi9 + 12) = ecx;
        *reinterpret_cast<void***>(esi9 + 16) = a2;
        *reinterpret_cast<void***>(esi9 + 20) = reinterpret_cast<void**>(0);
        eax10 = reinterpret_cast<struct s607*>(eax8 + 76);
        *reinterpret_cast<void***>(esi9 + 24) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(esi9 + 28) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(esi9 + 32) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(esi9 + 36) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(esi9 + 40) = reinterpret_cast<void**>(0x3f800000);
        *reinterpret_cast<void***>(esi9) = reinterpret_cast<void**>(0x18034f5c);
        eax10->f4 = reinterpret_cast<void**>(0x3f800000);
        eax10->f0 = reinterpret_cast<void**>(0x18034d80);
        edx11 = *reinterpret_cast<void***>(esi9);
        *reinterpret_cast<void***>(eax8) = reinterpret_cast<void**>(0x18034f8c);
        *reinterpret_cast<void***>(edx11 + 36)(esi9);
        goto ebx7;
    }
}

struct s626 {
    signed char[24] pad24;
    int32_t f24;
};

struct s625 {
    signed char[4] pad4;
    void** f4;
    signed char[19] pad24;
    void** f24;
    signed char[3] pad28;
    int32_t f28;
    void** f32;
    signed char[3] pad36;
    struct s626** f36;
};

void** fun_1801ec50(struct s625* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17) {
    void** eax18;
    void** ecx19;
    void** edx20;
    void** ecx21;
    void** edx22;
    int32_t ecx23;
    void** esi24;
    void** ax25;
    struct s626* edx26;

    fun_18022b10(&ecx->f4);
    eax18 = ecx->f24;
    ecx->f32 = eax18;
    ecx19 = g18043440;
    edx20 = g18043444;
    ecx21 = g18043448;
    edx22 = g1804344c;
    ecx23 = ecx->f28;
    ax25 = fun_18017250(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 - 4 + 4 - 4 + 8, reinterpret_cast<int32_t>(ecx23 - reinterpret_cast<unsigned char>(eax18)) >> 1, esi24, eax18, ecx19, edx20, ecx21, edx22, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
    if (ecx->f36) {
        edx26 = *ecx->f36;
        ax25 = reinterpret_cast<void**>(edx26->f24(eax18, ecx19, edx20, ecx21, edx22));
    }
    return ax25;
}

void fun_1801ef60(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17) {
    void** v18;
    void** esi19;
    void** edi20;
    void** eax21;
    void** edi22;
    void** esi23;
    void** ebx24;
    void** v25;
    void** v26;
    void** v27;
    void** v28;
    void** eax29;
    void** edx30;
    void** ecx31;
    void** v32;
    void** eax33;
    void** v34;
    void** edx35;
    void** v36;
    void** ecx37;
    void** v38;
    void** v39;
    void* eax40;
    void** v41;
    void** eax42;
    void** ecx43;
    void** edx44;
    void** v45;
    void** ecx46;
    void** edi47;
    void** edx48;
    void** eax49;
    void** v50;
    void** ecx51;
    void** v52;
    void** ecx53;
    void** v54;
    void** v55;
    void** ecx56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** ebp69;
    void** ecx70;
    void** ebx71;
    void** edx72;
    void* eax73;
    void** eax74;
    void** ebx75;
    void** ebx76;
    void** eax77;
    void** ecx78;
    void** edx79;
    void** edx80;
    void** v81;
    void** v82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** ecx92;
    void** edx93;
    void** eax94;
    void** eax95;
    void** ecx96;
    void** edx97;
    void** eax98;
    void** ecx99;
    void** v100;
    void** eax101;
    void** ecx102;
    void** edx103;
    void** eax104;
    void** edx105;
    void** v106;
    void** v107;
    void** v108;
    void** v109;
    void** v110;
    void** v111;
    void** v112;
    void** v113;
    void** v114;
    void** v115;
    void** v116;
    void** eax117;
    void** eax118;
    void** ecx119;
    void** edx120;
    void** eax121;
    void** eax122;
    void** v123;
    void** v124;
    void** v125;
    void** v126;
    void** v127;
    void** v128;
    void** v129;
    void** v130;
    void** v131;
    void** v132;
    void** v133;
    void** v134;
    void** ecx135;
    void** ecx136;
    void** edx137;
    void** eax138;
    void** v139;
    void** v140;
    void** v141;
    void** v142;
    void** v143;
    void** v144;
    void** v145;
    void** v146;
    void** v147;
    void** v148;
    void** v149;
    void** v150;
    void** v151;
    void** v152;
    void** v153;
    void** v154;
    void** v155;
    void** v156;
    void** v157;
    void** v158;
    void** v159;
    void** v160;
    void** v161;
    void** v162;
    void** v163;
    void** v164;
    void** v165;
    void** v166;
    void** v167;
    void** v168;
    void** v169;
    void** v170;
    void** v171;
    void** v172;
    void** v173;
    void** v174;
    void** v175;
    void** v176;
    void** v177;
    void** v178;
    void** v179;
    void** v180;
    void** v181;
    void** v182;
    void** v183;
    void** v184;

    __asm__("fild dword [ecx+0x10]");
    __asm__("fmul dword [ebp+0x8]");
    __asm__("fmul dword [0x18034544]");
    __asm__("fstp dword [ebp+0x8]");
    __asm__("fld dword [ebp+0x8]");
    __asm__("fistp dword [ebp-0x8]");
    if (v18 != *reinterpret_cast<void***>(ecx + 20) && (esi19 = ecx + 24, *reinterpret_cast<void***>(ecx + 20) = v18, edi20 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi19 + 4)) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi19))) >> 1), v18 != edi20)) {
        if (v18) {
            eax21 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v18) + reinterpret_cast<unsigned char>(v18));
            eax29 = fun_1802b2bb(ecx, eax21, edi22, esi23, ebx24, v25, v26, v27, v28);
            if (eax29) {
                if (reinterpret_cast<signed char>(v18) <= reinterpret_cast<signed char>(edi20)) {
                    edx30 = g18043440;
                    ecx31 = g18043448;
                    v32 = eax29;
                    eax33 = g18043444;
                    v34 = edx30;
                    edx35 = g1804344c;
                    v36 = ecx31;
                    ecx37 = *reinterpret_cast<void***>(esi19 + 8);
                    v38 = eax33;
                    v39 = edx35;
                    eax40 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ecx37) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi19)));
                    v41 = v18;
                    eax42 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax40) >> 1);
                    if (reinterpret_cast<signed char>(v18) > reinterpret_cast<signed char>(eax42)) {
                        ecx43 = *reinterpret_cast<void***>(esi19 + 4);
                        edx44 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v18) - reinterpret_cast<unsigned char>(eax42));
                        v45 = edx44;
                        ecx46 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx43) - (reinterpret_cast<unsigned char>(edx44) + reinterpret_cast<unsigned char>(edx44)));
                        if (reinterpret_cast<signed char>(v18) > reinterpret_cast<signed char>(edx44)) {
                        }
                        edi47 = v41;
                    } else {
                        edi47 = v18;
                        ecx46 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx37) - reinterpret_cast<unsigned char>(eax21));
                    }
                    edx48 = g18043444;
                    eax49 = g18043448;
                    v50 = ecx46;
                    ecx51 = g18043440;
                    v52 = ecx51;
                    ecx53 = g1804344c;
                    v54 = edx48;
                    v55 = ecx53;
                    ecx56 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc8);
                    v57 = eax49;
                    fun_1801a210(ecx56, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffdc, edi47, edi22, esi23, ebx24, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v50, v52, v54, v57, v55, v32, v34, v38, v36, v39, v45, v68, eax21, eax29, ebp69, __return_address(), v41, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                    if (reinterpret_cast<signed char>(edi47) < reinterpret_cast<signed char>(v18)) {
                        ecx70 = *reinterpret_cast<void***>(esi19 + 8);
                        ebx71 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v18) - reinterpret_cast<unsigned char>(edi47));
                        edx72 = ebx71;
                        eax73 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ecx70) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi19)));
                        eax74 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax73) >> 1);
                        if (reinterpret_cast<signed char>(ebx71) > reinterpret_cast<signed char>(eax74)) {
                            ebx75 = *reinterpret_cast<void***>(esi19 + 4);
                            v45 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx71) - reinterpret_cast<unsigned char>(eax74));
                            ebx76 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx75) - (reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(ebx71) - reinterpret_cast<unsigned char>(eax74)) + reinterpret_cast<unsigned char>(reinterpret_cast<unsigned char>(ebx71) - reinterpret_cast<unsigned char>(eax74))));
                            if (reinterpret_cast<signed char>(edx72) > reinterpret_cast<signed char>(reinterpret_cast<unsigned char>(ebx71) - reinterpret_cast<unsigned char>(eax74))) {
                            }
                            edx72 = edx72;
                        } else {
                            ebx76 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx70) - (reinterpret_cast<unsigned char>(ebx71) + reinterpret_cast<unsigned char>(ebx71)));
                        }
                        v41 = edx72;
                        fun_180196c0(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 76, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 36);
                        fun_1801c020(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 76, edi47);
                        fun_180196c0(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 96, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 76);
                        eax77 = g18043444;
                        ecx78 = g18043448;
                        edx79 = g18043440;
                        v54 = eax77;
                        v57 = ecx78;
                        v52 = edx79;
                        edx80 = g1804344c;
                        ecx56 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc8);
                        v50 = ebx76;
                        v55 = edx80;
                        fun_1801a210(ecx56, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffa0, v41, edi22, esi23, ebx24, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v50, v52, v54, v57, v55, v32, v34, v38, v36, v39, v45, v91, eax21, eax29, ebp69, __return_address(), v41, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                    }
                } else {
                    ecx92 = g18043444;
                    edx93 = g18043448;
                    v32 = eax29;
                    eax94 = g18043440;
                    v34 = eax94;
                    eax95 = g1804344c;
                    v38 = ecx92;
                    ecx96 = *reinterpret_cast<void***>(esi19 + 8);
                    v36 = edx93;
                    edx97 = *reinterpret_cast<void***>(esi19);
                    v39 = eax95;
                    eax98 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ecx96) - reinterpret_cast<unsigned char>(edx97)) >> 1);
                    if (reinterpret_cast<signed char>(edi20) > reinterpret_cast<signed char>(eax98)) {
                        ecx99 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi20) - reinterpret_cast<unsigned char>(eax98));
                        v100 = ecx99;
                        eax101 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi19 + 4)) - (reinterpret_cast<unsigned char>(ecx99) + reinterpret_cast<unsigned char>(ecx99)));
                        if (reinterpret_cast<signed char>(edi20) > reinterpret_cast<signed char>(ecx99)) {
                        }
                        v41 = edi20;
                    } else {
                        v41 = edi20;
                        eax101 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx96) - (reinterpret_cast<unsigned char>(edi20) + reinterpret_cast<unsigned char>(edi20)));
                    }
                    ecx102 = g18043448;
                    edx103 = g18043440;
                    eax104 = g18043444;
                    edx105 = g1804344c;
                    fun_1801a210(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc8, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffdc, v41, edi22, esi23, ebx24, v106, v107, v108, v109, v110, v111, v112, v113, v114, v115, eax101, edx103, eax104, ecx102, edx105, v32, v34, v38, v36, v39, v116, v100, eax21, eax29, ebp69, __return_address(), v41, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                    if (reinterpret_cast<signed char>(v41) < reinterpret_cast<signed char>(edi20)) {
                        eax117 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi20) - reinterpret_cast<unsigned char>(v41));
                        fun_1801f3c0(esi19, eax117, eax117, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 12, reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 16);
                        eax118 = g18043440;
                        ecx119 = g18043444;
                        edx120 = g18043448;
                        eax121 = g1804344c;
                        eax122 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffdc);
                        *reinterpret_cast<int16_t*>(&eax122) = fun_1801c050(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffa0, eax122, v41, v123);
                        fun_1801a210(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc8, eax122, v123, edi22, esi23, ebx24, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v100, eax118, ecx119, edx120, eax121, v32, v34, v38, v36, v39, v134, v100, eax21, eax29, ebp69, __return_address(), v41, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                    }
                    ecx135 = g18043440;
                    v52 = ecx135;
                    ecx136 = g1804344c;
                    edx137 = g18043444;
                    v50 = eax29 + reinterpret_cast<unsigned char>(edi20) * 2;
                    eax138 = g18043448;
                    v55 = ecx136;
                    ecx56 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 0xffffffc8);
                    v54 = edx137;
                    v57 = eax138;
                    fun_18017250(ecx56, reinterpret_cast<unsigned char>(v18) - reinterpret_cast<unsigned char>(edi20), edi22, esi23, ebx24, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v50, v52, v54, v57, v55, v32, v34, v38, v36, v39);
                }
                v149 = *reinterpret_cast<void***>(esi19);
                fun_1802b2b0(ecx56, v149, edi22, esi23, ebx24, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v50, v52, v54, v57, v55, v32, v34, v38, v36, v39, v45, v100, eax21, eax29, ebp69, __return_address(), v41, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
                *reinterpret_cast<void***>(esi19) = eax29;
                *reinterpret_cast<void***>(esi19 + 4) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax21) + reinterpret_cast<unsigned char>(eax29));
                *reinterpret_cast<void***>(esi19 + 8) = eax29;
            }
        } else {
            v160 = *reinterpret_cast<void***>(esi19);
            fun_1802b2b0(ecx, v160, edi22, esi23, ebx24, v161, v162, v163, v164, v165, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, ebp69, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
            *reinterpret_cast<void***>(esi19 + 4) = reinterpret_cast<void**>(0);
            *reinterpret_cast<void***>(esi19) = reinterpret_cast<void**>(0);
            *reinterpret_cast<void***>(esi19 + 8) = reinterpret_cast<void**>(0);
            return;
        }
    }
    return;
}

struct s627 {
    signed char[36] pad36;
    int32_t f36;
};

void fun_1801f270(struct s627* ecx, int32_t a2) {
    ecx->f36 = a2;
    return;
}

struct s628 {
    signed char[4] pad4;
    void** f4;
    signed char[23] pad28;
    void** f28;
    signed char[3] pad32;
    int32_t f32;
    void** f36;
};

void** fun_1801f470(struct s628* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17) {
    void** eax18;
    void** ecx19;
    void** edx20;
    void** ecx21;
    void** edx22;
    int32_t ecx23;
    void** esi24;
    void** ax25;

    fun_18022b10(&ecx->f4);
    eax18 = ecx->f28;
    ecx->f36 = eax18;
    ecx19 = g18043440;
    edx20 = g18043444;
    ecx21 = g18043448;
    edx22 = g1804344c;
    ecx23 = ecx->f32;
    ax25 = fun_18017250(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 - 4 + 4 - 4 + 8, reinterpret_cast<int32_t>(ecx23 - reinterpret_cast<unsigned char>(eax18)) >> 1, esi24, eax18, ecx19, edx20, ecx21, edx22, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
    return ax25;
}

struct s629 {
    signed char[16] pad16;
    void** f16;
    signed char[1] pad18;
    void** f18;
};

int32_t g180346f4 = 0x3ff6a09e;

int32_t g180346f0 = 0x667f3bcd;

void fun_1801fd90(struct s629* ecx) {
    int32_t eax2;
    int32_t ecx3;
    void** ax4;
    void** ax5;

    eax2 = g180346f4;
    ecx3 = g180346f0;
    ax4 = fun_1800da10(ecx3, eax2, 14);
    __asm__("fild dword [ebp+0x8]");
    ecx->f16 = ax4;
    __asm__("fmul qword [0x180346d0]");
    __asm__("fidiv dword [esi+0xc]");
    __asm__("fstp qword [ebp-0x8]");
    __asm__("fld qword [ebp-0x8]");
    __asm__("fsin ");
    __asm__("fstp qword [ebp-0x10]");
    __asm__("fld qword [ebp-0x10]");
    __asm__("fadd st0, st0");
    __asm__("fstp qword [esp]");
    ax5 = fun_1800da10(ecx3, eax2, 14);
    ecx->f18 = ax5;
    return;
}

struct s630 {
    signed char[4] pad4;
    void** f4;
};

struct s631 {
    void** f0;
    signed char[7] pad8;
    int32_t f8;
    int32_t f12;
    int32_t f16;
    int32_t f20;
    int32_t f24;
    void** f28;
    signed char[1] pad30;
    int16_t f30;
    void** f32;
    signed char[1] pad34;
    void** f34;
    signed char[1] pad36;
    void** f36;
    signed char[1] pad38;
    void** f38;
    signed char[1] pad40;
    void** f40;
    signed char[1] pad42;
    void** f42;
    signed char[1] pad44;
    void** f44;
    signed char[1] pad46;
    void** f46;
    signed char[1] pad48;
    void** f48;
    signed char[1] pad50;
    void** f50;
};

int16_t fun_1801ffc0(void** ecx, struct s630* a2) {
    void** esi3;
    void** ecx4;
    void** v5;
    void** edi6;
    void** esi7;
    void** ebx8;
    void** v9;
    void** v10;
    void** v11;
    void** v12;
    void** v13;
    void** v14;
    void** v15;
    void** v16;
    void** v17;
    void** v18;
    void** v19;
    void** v20;
    void** v21;
    void** v22;
    void** v23;
    void** v24;
    void** v25;
    void** v26;
    void** v27;
    void** v28;
    void** v29;
    void** v30;
    void** v31;
    void** v32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** eax50;
    void** v51;
    void** v52;
    void** v53;
    void** eax54;
    void** eax55;
    void** ebx56;
    void** edx57;
    int32_t eax58;
    int32_t v59;
    struct s631* esi60;
    int32_t v61;
    int32_t v62;
    int32_t eax63;
    int32_t v64;
    int32_t v65;
    int32_t v66;
    int32_t v67;
    int32_t v68;
    int32_t v69;
    void** ax70;
    void** ax71;
    int32_t v72;
    int32_t v73;
    void** ax74;
    int32_t v75;
    int32_t v76;
    void** ax77;
    int32_t v78;
    int32_t v79;
    void** ax80;
    void** ax81;
    void** ax82;
    void** ax83;
    void** ax84;
    void** ax85;
    void** eax86;

    esi3 = ecx;
    ecx4 = a2->f4;
    v5 = esi3;
    if (*reinterpret_cast<void***>(esi3 + 12) == ecx4 || (ecx4 = *reinterpret_cast<void***>(esi3 + 16), fun_1802b2b0(ecx4, ecx4, edi6, esi7, ebx8, v9, v10, v11, v12, v13, v14, v5, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49), eax50 = a2->f4, *reinterpret_cast<void***>(esi3 + 12) = eax50, eax54 = fun_1802b2bb(ecx4, reinterpret_cast<uint32_t>(eax50 + reinterpret_cast<uint32_t>(eax50 + reinterpret_cast<unsigned char>(eax50) * 2) * 4) << 2, ecx4, edi6, esi7, ebx8, v51, v52, v53), *reinterpret_cast<void***>(esi3 + 16) = eax54, !!eax54)) {
        __asm__("fild dword [esi+0xc]");
        __asm__("fdivr dword [0x18034238]");
        __asm__("fstp dword [esp]");
        __asm__("fld dword [edi]");
        __asm__("fabs ");
        __asm__("fstp dword [esp]");
        fun_1800de70(ecx4, ecx4, ecx4);
        eax55 = *reinterpret_cast<void***>(esi3 + 12);
        __asm__("fstp qword [esp+0x40]");
        ebx56 = reinterpret_cast<void**>(0);
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax55) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax55 == 0))) {
            do {
                if (ebx56 || !(*reinterpret_cast<unsigned char*>(&eax55 + 1) & 1)) {
                    __asm__("fld qword [esp+0x40]");
                } else {
                    __asm__("fld qword [esp+0x40]");
                    __asm__("fchs ");
                }
                __asm__("fst dword [esp+0x14]");
                __asm__("fstp qword [esp+0x28]");
                edx57 = *reinterpret_cast<void***>(esi3 + 16);
                eax58 = v59;
                esi60 = reinterpret_cast<struct s631*>(edx57 + reinterpret_cast<uint32_t>(ebx56 + reinterpret_cast<uint32_t>(ebx56 + reinterpret_cast<unsigned char>(ebx56) * 2) * 4) * 4);
                v61 = eax58;
                *reinterpret_cast<void***>(&eax58) = fun_1800da10(v62, v61, 13);
                __asm__("fld dword [esp+0x10]");
                esi60->f8 = eax58;
                __asm__("fstp qword [esp]");
                *reinterpret_cast<void***>(&eax58) = fun_1800da10(v62, v61, 13);
                __asm__("fld dword [esp+0x18]");
                esi60->f12 = eax58;
                __asm__("fstp qword [esp]");
                *reinterpret_cast<void***>(&eax58) = fun_1800da10(v62, v61, 13);
                __asm__("fld dword [esp+0x1c]");
                __asm__("fmul dword [esp+0x14]");
                esi60->f16 = eax58;
                __asm__("fstp qword [esp+0x3c]");
                eax63 = v64;
                *reinterpret_cast<void***>(&eax63) = fun_1800da10(eax63, v65, 13);
                __asm__("fld dword [esp+0x20]");
                __asm__("fmul dword [esp+0x14]");
                esi60->f20 = eax63;
                __asm__("fstp qword [esp+0x34]");
                *reinterpret_cast<void***>(&eax63) = fun_1800da10(v66, v67, 13);
                esi60->f24 = eax63;
                ax70 = fun_1800da10(v68, v69, 13);
                __asm__("fld dword [esp+0x1c]");
                __asm__("fsub dword [esp+0x10]");
                esi60->f28 = ax70;
                esi60->f30 = 0;
                __asm__("fmul dword [esp+0x20]");
                __asm__("fstp qword [esp]");
                ax71 = fun_1800da10(v68, v69, 13);
                esi60->f32 = ax71;
                ax74 = fun_1800da10(v72, v73, 13);
                esi60->f34 = ax74;
                ax77 = fun_1800da10(v75, v76, 13);
                esi60->f36 = ax77;
                ax80 = fun_1800da10(v78, v79, 13);
                __asm__("fld dword [esp+0x20]");
                __asm__("fmul dword [esp+0x10]");
                esi60->f38 = ax80;
                __asm__("fmul dword [esp+0x20]");
                __asm__("fchs ");
                __asm__("fstp qword [esp]");
                ax81 = fun_1800da10(v78, v79, 13);
                __asm__("fld dword [esp+0x1c]");
                __asm__("fmul dword [esp+0x10]");
                esi60->f40 = ax81;
                __asm__("fsubr dword [esp+0x2c]");
                __asm__("fmul dword [esp+0x20]");
                __asm__("fstp qword [esp]");
                ax82 = fun_1800da10(v78, v79, 13);
                __asm__("fld dword [esp+0x18]");
                esi60->f42 = ax82;
                __asm__("fchs ");
                __asm__("fstp qword [esp]");
                ax83 = fun_1800da10(v78, v79, 13);
                __asm__("fld dword [esp+0x10]");
                esi60->f44 = ax83;
                __asm__("fchs ");
                __asm__("fstp qword [esp]");
                ax84 = fun_1800da10(v78, v79, 13);
                __asm__("fld dword [esp+0x18]");
                __asm__("fmul dword [esp+0x10]");
                esi60->f46 = ax84;
                __asm__("fstp qword [esp]");
                ax85 = fun_1800da10(v78, v79, 13);
                __asm__("fld dword [esp+0x10]");
                __asm__("fmul dword [esp+0x10]");
                esi60->f48 = ax85;
                __asm__("fsub dword [esp+0x24]");
                __asm__("fstp qword [esp]");
                eax55 = fun_1800da10(v78, v79, 13);
                esi60->f50 = eax55;
                ++ebx56;
                esi3 = v5;
            } while (reinterpret_cast<signed char>(ebx56) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(v5 + 12)));
        }
        eax86 = *reinterpret_cast<void***>(esi3);
        *reinterpret_cast<void***>(eax86 + 24)(esi3);
        return 0;
    } else {
        return 1;
    }
}

int16_t fun_1801ff80(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_1801ffa0(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

void fun_180204b0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** esi7;
    void** eax8;
    void** esi9;
    void** eax10;
    void** eax11;
    int32_t eax12;
    void** eax13;
    void** edx14;

    eax8 = fun_1802b2bb(ecx, 20, esi7, __return_address(), a2, a3, a4, a5, a6);
    if (!eax8) {
        esi9 = reinterpret_cast<void**>(0);
    } else {
        eax10 = fun_18020500(eax8);
        esi9 = eax10;
    }
    eax11 = *reinterpret_cast<void***>(esi9);
    eax12 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(eax11 + 32)(esi9));
    if (!eax12) {
        eax13 = *reinterpret_cast<void***>(esi9);
        *reinterpret_cast<void***>(eax13 + 24)(esi9);
        goto esi7;
    } else {
        if (esi9) {
            edx14 = *reinterpret_cast<void***>(esi9);
            *reinterpret_cast<void***>(edx14)(esi9, 1);
        }
        goto esi7;
    }
}

int16_t fun_18020530(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18020550(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s632 {
    signed char[12] pad12;
    void** f12;
    signed char[3] pad16;
    void** f16;
};

struct s633 {
    void** f0;
    signed char[7] pad8;
    void** f8;
    signed char[3] pad12;
    void*** f12;
};

struct s634 {
    void** f0;
    signed char[1] pad2;
    void** f2;
    signed char[1] pad4;
    void** f4;
    signed char[1] pad6;
    void** f6;
    signed char[1] pad8;
    int16_t f8;
    void** f10;
    signed char[1] pad12;
    void** f12;
    signed char[1] pad14;
    void** f14;
    signed char[1] pad16;
    void** f16;
    signed char[1] pad18;
    void** f18;
    signed char[1] pad20;
    void** f20;
};

int16_t fun_18020570(struct s632* ecx, struct s633* a2) {
    struct s633* esi3;
    struct s632* ebx4;
    void*** esp5;
    void** ecx6;
    void** edi7;
    void** esi8;
    void** ebx9;
    void** v10;
    void** v11;
    void** v12;
    void** v13;
    void** v14;
    void** v15;
    void** v16;
    void** v17;
    void** v18;
    void** v19;
    void** v20;
    void** v21;
    void** v22;
    void** v23;
    void** v24;
    void** v25;
    void** v26;
    void** v27;
    void** v28;
    void** v29;
    void** v30;
    void** v31;
    void** v32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** eax52;
    void** v53;
    void** v54;
    void** v55;
    void** eax56;
    void* esp57;
    void** eax58;
    void** edi59;
    void** ecx60;
    void** esp61;
    void*** edx62;
    void** edx63;
    struct s634* esi64;
    int32_t v65;
    int32_t v66;
    void** ax67;
    void** ax68;
    void** ax69;
    int32_t v70;
    int32_t v71;
    void** ax72;
    void** ax73;
    int32_t v74;
    int32_t v75;
    void** ax76;
    void** ax77;
    void** ax78;
    void** ax79;
    void** ax80;

    esi3 = a2;
    ebx4 = ecx;
    esp5 = reinterpret_cast<void***>((reinterpret_cast<uint32_t>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4) & 0xfffffff8) - 28 - 4 - 4 - 4);
    ecx6 = esi3->f8;
    if (ebx4->f12 == ecx6 || (ecx6 = ebx4->f16, fun_1802b2b0(ecx6, ecx6, edi7, esi8, ebx9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51), eax52 = esi3->f8, ebx4->f12 = eax52, eax56 = fun_1802b2bb(ecx6, reinterpret_cast<uint32_t>(eax52 + reinterpret_cast<uint32_t>(eax52 + reinterpret_cast<unsigned char>(eax52) * 2) * 4) << 1, ecx6, edi7, esi8, ebx9, v53, v54, v55), esp5 = esp5 - 4 - 4 + 4 - 4 - 4 + 4 + 8, ebx4->f16 = eax56, !!eax56)) {
        __asm__("fild dword [ebx+0xc]");
        __asm__("fdivr dword [0x18034238]");
        __asm__("fstp dword [esp]");
        __asm__("fld dword [esi+0x4]");
        __asm__("fabs ");
        __asm__("fstp dword [esp]");
        fun_1800de70(ecx6, ecx6, ecx6);
        esp57 = reinterpret_cast<void*>(esp5 - 4 - 4 - 4 + 8 + 4);
        eax58 = ebx4->f12;
        edi59 = reinterpret_cast<void**>(0);
        __asm__("fstp dword [esp+0x1c]");
        if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax58) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax58 == 0))) {
            while (1) {
                if (!(edi59 || !(*reinterpret_cast<unsigned char*>(&eax58 + 1) & 1))) {
                    __asm__("fld dword [esp+0x1c]");
                    __asm__("fchs ");
                    __asm__("fstp dword [esp+0x18]");
                }
                ecx60 = esi3->f0;
                esp61 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(esp57) - 4);
                edx62 = esi3->f12;
                fun_18019f00(edx62 + reinterpret_cast<unsigned char>(edi59) * 8, ecx60, esp61 + 5, reinterpret_cast<uint32_t>(esp57) + 20);
                __asm__("fld dword [esp+0x18]");
                edx63 = ebx4->f16;
                __asm__("fstp qword [esp+0x20]");
                esi64 = reinterpret_cast<struct s634*>(edx63 + reinterpret_cast<uint32_t>(edi59 + reinterpret_cast<uint32_t>(edi59 + reinterpret_cast<unsigned char>(edi59) * 2) * 4) * 2);
                ax67 = fun_1800da10(v65, v66, 14);
                esi64->f0 = ax67;
                __asm__("fld dword [esp+0x14]");
                __asm__("fstp qword [esp]");
                ax68 = fun_1800da10(v65, v66, 14);
                esi64->f2 = ax68;
                __asm__("fld dword [esp+0x18]");
                __asm__("fstp qword [esp]");
                ax69 = fun_1800da10(v65, v66, 14);
                esi64->f4 = ax69;
                ax72 = fun_1800da10(v70, v71, 13);
                esi64->f6 = ax72;
                esi64->f8 = 0;
                __asm__("fld dword [esp+0x10]");
                __asm__("fmul dword [esp+0x18]");
                __asm__("fchs ");
                __asm__("fstp qword [esp]");
                ax73 = fun_1800da10(v70, v71, 13);
                esi64->f10 = ax73;
                ax76 = fun_1800da10(v74, v75, 13);
                esi64->f12 = ax76;
                __asm__("fld dword [esp+0x18]");
                __asm__("fchs ");
                __asm__("fstp qword [esp]");
                ax77 = fun_1800da10(v74, v75, 13);
                esi64->f14 = ax77;
                __asm__("fld dword [esp+0x14]");
                __asm__("fchs ");
                __asm__("fstp qword [esp]");
                ax78 = fun_1800da10(v74, v75, 13);
                esi64->f16 = ax78;
                __asm__("fld dword [esp+0x14]");
                __asm__("fmul dword [esp+0x18]");
                __asm__("fstp qword [esp]");
                ax79 = fun_1800da10(v74, v75, 13);
                esi64->f18 = ax79;
                __asm__("fld dword [esp+0x14]");
                __asm__("fmul dword [esp+0x14]");
                __asm__("fsub dword [esp+0x18]");
                __asm__("fstp qword [esp]");
                ax80 = fun_1800da10(v74, v75, 13);
                esp57 = reinterpret_cast<void*>(esp61 - 1 - 1 - 1 + 3 + 1 - 1 - 1 - 1 - 1 + 3 + 1 - 1 - 2 - 1 + 3 + 1 - 1 - 2 - 1 + 3 + 1 - 1 - 1 - 1 - 1 + 3 + 1 - 1 - 2 - 1 + 3 + 1 - 1 - 1 - 1 - 1 + 3 + 1 - 1 - 2 - 1 + 3 + 1 - 1 - 2 - 1 + 3 + 1 - 1 - 2 - 1 + 3 + 1 - 1 - 2 - 1 + 3 + 1);
                esi64->f20 = ax80;
                eax58 = ebx4->f12;
                ++edi59;
                if (reinterpret_cast<signed char>(edi59) >= reinterpret_cast<signed char>(eax58)) 
                    break;
                esi3 = a2;
            }
        }
        return 0;
    } else {
        return 1;
    }
}

int16_t fun_18020c70(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** eax8;
    int16_t ax9;

    eax8 = fun_1802b2bb(ecx, 72, __return_address(), a2, a3, a4, a5, a6, a7);
    if (!eax8) {
        return 0;
    } else {
        ax9 = fun_18020970(eax8, a2);
        return ax9;
    }
}

void fun_180209d0(struct s298* ecx, int32_t a2) {
    ecx->f16 = a2;
    fun_18020a00(ecx);
    return;
}

struct s635 {
    int32_t f0;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

void fun_18020c92(struct s635* ecx) {
    ecx->f4 = 0;
    ecx->f8 = 0;
    ecx->f12 = 0;
    ecx->f0 = 0x1803506c;
    return;
}

int16_t fun_18020d10(void** ecx, void** a2) {
    void** eax3;
    void** esi4;
    void** edi5;
    void** ebx6;
    void** edi7;
    void** esi8;
    void** ebp9;
    void** ebx10;
    void** v11;
    void** v12;
    void** v13;
    void** eax14;
    void* esp15;
    void** ecx16;
    void** edx17;
    void** v18;
    void** eax19;
    void** edi20;
    void** v21;
    void** ecx22;
    void** v23;
    void** v24;
    void** edx25;
    void** v26;
    void** v27;
    void** eax28;
    void** ecx29;
    void** edx30;
    void** v31;
    void** ecx32;
    void** ebx33;
    void** edx34;
    void** eax35;
    void** v36;
    void** ecx37;
    void** v38;
    void*** esp39;
    void** ecx40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void* esp66;
    void** edx67;
    void** eax68;
    void** ecx69;
    void** ebp70;
    void** v71;
    void** edi72;
    void** eax73;
    void** v74;
    void** edi75;
    void*** esp76;
    void* esp77;
    void* esp78;
    void** ecx79;
    void** edx80;
    void** eax81;
    void** v82;
    void** ecx83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** v92;
    void** v93;
    void** v94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** ebx103;
    void** ecx104;
    void** ebx105;
    void** v106;
    void** eax107;
    void** v108;
    void** eax109;
    void** edx110;
    void** v111;
    void** ecx112;
    void** v113;
    void** v114;
    void** eax115;
    void** ebx116;
    void** ecx117;
    void** ebx118;
    void** eax119;
    void** v120;
    void** ecx121;
    void** v122;
    void** edx123;
    void** v124;
    void*** esp125;
    void** v126;
    void** v127;
    void** v128;
    void** v129;
    void** v130;
    void** v131;
    void** v132;
    void** v133;
    void** v134;
    void** v135;
    void** v136;
    void** v137;
    void** v138;
    void** v139;
    void** v140;
    void** v141;
    void** v142;
    void** v143;
    void** v144;
    void** v145;
    void** v146;
    void** v147;
    void** v148;
    void** v149;
    void* esp150;
    void** eax151;
    void** eax152;
    void** ecx153;
    void** v154;
    void** edx155;
    void** v156;
    void** eax157;
    void** v158;
    void** v159;
    void** v160;
    void*** esp161;
    void*** esp162;
    void** eax163;
    void*** esp164;
    void** v165;
    void** v166;
    void** v167;
    void** v168;
    void** v169;
    void** v170;
    void** v171;
    void** v172;
    void** v173;
    void** v174;
    void** v175;
    void** v176;
    void** v177;
    void** v178;
    void** v179;
    void** v180;
    void** v181;
    void** edx182;
    void** eax183;
    void** v184;
    void** edx185;
    void** v186;
    void** ecx187;
    void** v188;
    void** v189;
    void** v190;
    void** v191;
    void** v192;
    void** v193;
    void** v194;
    void** v195;
    void** v196;
    void** v197;
    void** v198;
    void** v199;
    void** v200;
    void** v201;
    void** v202;
    void** v203;
    void** v204;
    void** v205;
    void** v206;
    void** v207;
    void** v208;
    void** v209;
    void** v210;
    void** v211;
    void** v212;
    void** v213;
    void** v214;
    void** v215;
    void** v216;
    void** v217;
    void** v218;
    void** v219;
    void** v220;
    void** v221;
    void** v222;
    void** v223;
    void** v224;
    void** v225;
    void** v226;
    void** v227;
    void** v228;
    void** v229;
    void** v230;
    void** v231;
    void** v232;
    void** v233;
    void** v234;
    void** v235;
    void** v236;
    void** v237;
    void** v238;
    void** v239;
    void** v240;
    void** v241;
    void** v242;
    int16_t ax243;

    eax3 = *reinterpret_cast<void***>(ecx + 4);
    esi4 = ecx + 4;
    edi5 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi4 + 4)) - reinterpret_cast<unsigned char>(eax3)) >> 1);
    if (a2 != edi5) {
        if (a2) {
            ebx6 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a2) + reinterpret_cast<unsigned char>(a2));
            eax14 = fun_1802b2bb(ecx, ebx6, edi7, esi8, ebp9, ebx10, v11, v12, v13);
            esp15 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0xe0 - 4 - 4 - 4 - 4 - 4 - 4 + 4 + 4);
            if (eax14) {
                if (reinterpret_cast<signed char>(a2) <= reinterpret_cast<signed char>(edi5)) {
                    ecx16 = g18043448;
                    edx17 = g1804344c;
                    v18 = eax14;
                    eax19 = g18043444;
                    edi20 = g18043440;
                    v21 = ecx16;
                    ecx22 = *reinterpret_cast<void***>(esi4 + 8);
                    v23 = eax19;
                    v24 = edx17;
                    edx25 = *reinterpret_cast<void***>(esi4);
                    v26 = edi20;
                    v27 = a2;
                    eax28 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ecx22) - reinterpret_cast<unsigned char>(edx25)) >> 1);
                    if (reinterpret_cast<signed char>(a2) > reinterpret_cast<signed char>(eax28)) {
                        ecx29 = *reinterpret_cast<void***>(esi4 + 4);
                        edx30 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a2) - reinterpret_cast<unsigned char>(eax28));
                        v31 = edx30;
                        ecx32 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx29) - (reinterpret_cast<unsigned char>(edx30) + reinterpret_cast<unsigned char>(edx30)));
                        if (reinterpret_cast<signed char>(a2) > reinterpret_cast<signed char>(edx30)) {
                        }
                        ebx33 = v31;
                    } else {
                        ecx32 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx22) - reinterpret_cast<unsigned char>(ebx6));
                        ebx33 = a2;
                    }
                    edx34 = g18043448;
                    eax35 = g1804344c;
                    v36 = ecx32;
                    ecx37 = g18043444;
                    v38 = ecx37;
                    esp39 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp15) - 4 - 4);
                    ecx40 = reinterpret_cast<void**>(esp39 + 88);
                    v41 = edi20;
                    v42 = edx34;
                    v43 = eax35;
                    fun_1801a210(ecx40, reinterpret_cast<int32_t>(esp15) + 40, ebx33, edi7, esi8, ebp9, ebx10, v27, v31, eax14, v44, v45, ebx6, v18, v26, v23, v21, v24, v46, v47, v48, v49, v50, v36, v41, v38, v42, v43, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65);
                    esp66 = reinterpret_cast<void*>(esp39 - 4 + 8 + 4);
                    if (reinterpret_cast<signed char>(ebx33) < reinterpret_cast<signed char>(a2)) {
                        edx67 = *reinterpret_cast<void***>(esi4 + 8);
                        eax68 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a2) - reinterpret_cast<unsigned char>(ebx33));
                        ecx69 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(edx67) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi4))) >> 1);
                        ebp70 = eax68;
                        v71 = ebp70;
                        if (reinterpret_cast<signed char>(eax68) > reinterpret_cast<signed char>(ecx69)) {
                            edi72 = *reinterpret_cast<void***>(esi4 + 4);
                            eax73 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax68) - reinterpret_cast<unsigned char>(ecx69));
                            v74 = eax73;
                            edi75 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi72) - (reinterpret_cast<unsigned char>(eax73) + reinterpret_cast<unsigned char>(eax73)));
                            if (reinterpret_cast<signed char>(ebp70) > reinterpret_cast<signed char>(eax73)) {
                            }
                            ebp70 = v74;
                        } else {
                            edi75 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx67) - (reinterpret_cast<unsigned char>(eax68) + reinterpret_cast<unsigned char>(eax68)));
                        }
                        fun_180196c0(reinterpret_cast<int32_t>(esp66) + 0xb4, reinterpret_cast<int32_t>(esp66) + 40);
                        esp76 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp66) - 4 - 4 + 4 + 4 - 4);
                        fun_1801c020(esp76 + 0xb8, ebx33);
                        esp77 = reinterpret_cast<void*>(esp76 - 4 + 4 + 4);
                        fun_180196c0(reinterpret_cast<int32_t>(esp77) + 0xc8, reinterpret_cast<int32_t>(esp77) + 0xb4);
                        esp78 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp77) - 4 - 4 + 4 + 4);
                        ecx79 = g18043440;
                        edx80 = g18043444;
                        eax81 = g18043448;
                        v82 = ecx79;
                        ecx83 = g1804344c;
                        v84 = edx80;
                        v85 = ecx83;
                        ecx40 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp78) - 4 - 4 + 0x6c);
                        v86 = edi75;
                        v87 = eax81;
                        fun_1801a210(ecx40, reinterpret_cast<int32_t>(esp78) + 0xc8, ebp70, edi7, esi8, ebp9, ebx10, v27, v31, eax14, v71, v74, ebx6, v18, v26, v23, v21, v24, v88, v89, v90, v91, v92, v36, v41, v38, v42, v43, v86, v82, v84, v87, v85, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102);
                    }
                    ebx103 = eax14;
                } else {
                    ecx104 = g18043448;
                    ebx105 = *reinterpret_cast<void***>(esi4);
                    v106 = eax14;
                    eax107 = g18043444;
                    v108 = eax107;
                    eax109 = g1804344c;
                    edx110 = g18043440;
                    v111 = ecx104;
                    ecx112 = *reinterpret_cast<void***>(esi4 + 8);
                    v113 = eax109;
                    v114 = edx110;
                    v31 = edi5;
                    eax115 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ecx112) - reinterpret_cast<unsigned char>(ebx105)) >> 1);
                    if (reinterpret_cast<signed char>(edi5) > reinterpret_cast<signed char>(eax115)) {
                        ebx116 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi5) - reinterpret_cast<unsigned char>(eax115));
                        v27 = ebx116;
                        ecx117 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi4 + 4)) - (reinterpret_cast<unsigned char>(ebx116) + reinterpret_cast<unsigned char>(ebx116)));
                        if (reinterpret_cast<signed char>(edi5) > reinterpret_cast<signed char>(ebx116)) {
                        }
                        ebx118 = v31;
                    } else {
                        ebx118 = edi5;
                        ecx117 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx112) - (reinterpret_cast<unsigned char>(edi5) + reinterpret_cast<unsigned char>(edi5)));
                    }
                    eax119 = g1804344c;
                    v120 = ecx117;
                    ecx121 = g18043444;
                    v122 = edx110;
                    edx123 = g18043448;
                    v124 = ecx121;
                    esp125 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp15) - 4 - 4);
                    v126 = edx123;
                    v127 = eax119;
                    fun_1801a210(esp125 + 0x94, reinterpret_cast<int32_t>(esp15) + 60, ebx118, edi7, esi8, ebp9, ebx10, v27, v31, eax14, v128, v129, ebx6, v130, v131, v132, v133, v134, v106, v114, v108, v111, v113, v135, v136, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v120, v122, v124, v126, v127);
                    esp150 = reinterpret_cast<void*>(esp125 - 4 + 8 + 4);
                    if (reinterpret_cast<signed char>(ebx118) < reinterpret_cast<signed char>(edi5)) {
                        eax151 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi5) - reinterpret_cast<unsigned char>(ebx118));
                        fun_1801f3c0(esi4, eax151, eax151, reinterpret_cast<int32_t>(esp150) + 16, reinterpret_cast<int32_t>(esp150) + 20);
                        eax152 = g18043440;
                        ecx153 = g18043444;
                        v154 = v27;
                        edx155 = g18043448;
                        v156 = eax152;
                        eax157 = g1804344c;
                        v158 = ecx153;
                        v159 = edx155;
                        v160 = eax157;
                        esp161 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp150) - 4 - 4 - 4 - 4 - 4 + 16 + 4 - 4);
                        esp162 = esp161 - 4;
                        eax163 = reinterpret_cast<void**>(esp162 + 0xe4);
                        *reinterpret_cast<int16_t*>(&eax163) = fun_1801c050(eax163, esp161 + 64, ebx118, v31);
                        esp164 = esp162 - 4 - 4 - 4 + 12 + 4 - 4;
                        fun_1801a210(esp164 + 0x80, eax163, v31, edi7, esi8, ebp9, ebx10, v27, v31, eax14, v165, v166, ebx6, v167, v168, v169, v170, v171, v106, v114, v108, v111, v113, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v154, v156, v158, v159, v160, v120, v122, v124, v126, v127);
                        esp150 = reinterpret_cast<void*>(esp164 - 4 + 8 + 4);
                    }
                    ebx103 = eax14;
                    edx182 = g18043440;
                    eax183 = g18043444;
                    v184 = edx182;
                    edx185 = g1804344c;
                    v186 = ebx103 + reinterpret_cast<unsigned char>(edi5) * 2;
                    ecx187 = g18043448;
                    v188 = ecx187;
                    ecx40 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp150) - 4 + 0xa4);
                    v189 = eax183;
                    v190 = edx185;
                    fun_18017250(ecx40, reinterpret_cast<unsigned char>(a2) - reinterpret_cast<unsigned char>(edi5), edi7, esi8, ebp9, ebx10, v27, v31, eax14, v191, v192, ebx6, v193, v194, v195, v196, v197, v106, v114, v108, v111, v113, v198, v199, v200);
                }
                v201 = *reinterpret_cast<void***>(esi4);
                *reinterpret_cast<int16_t*>(&eax3) = fun_1802b2b0(ecx40, v201, edi7, esi8, ebp9, ebx10, v27, v31, eax14, v71, v74, ebx6, v18, v26, v23, v21, v24, v106, v114, v108, v111, v113, v36, v41, v38, v42, v43, v86, v82, v84, v87, v85, v154, v156, v158, v159, v160, v120, v122, v124, v126, v127, v186, v184, v189, v188, v190);
                *reinterpret_cast<void***>(esi4) = ebx103;
                *reinterpret_cast<void***>(esi4 + 4) = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx6) + reinterpret_cast<unsigned char>(ebx103));
                *reinterpret_cast<void***>(esi4 + 8) = ebx103;
            } else {
                *reinterpret_cast<signed char*>(&eax14) = 0;
                return *reinterpret_cast<int16_t*>(&eax14);
            }
        } else {
            ax243 = fun_1802b2b0(ecx, eax3, edi7, esi8, ebp9, ebx10, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242);
            *reinterpret_cast<void***>(esi4 + 4) = reinterpret_cast<void**>(0);
            *reinterpret_cast<void***>(esi4) = reinterpret_cast<void**>(0);
            *reinterpret_cast<void***>(esi4 + 8) = reinterpret_cast<void**>(0);
            *reinterpret_cast<signed char*>(&ax243) = 1;
            return ax243;
        }
    }
    *reinterpret_cast<signed char*>(&eax3) = 1;
    return *reinterpret_cast<int16_t*>(&eax3);
}

struct s636 {
    signed char[4] pad4;
    int32_t f4;
    int32_t f8;
};

int32_t fun_18021080(struct s636* ecx) {
    return ecx->f8 - ecx->f4 >> 1;
}

struct s637 {
    signed char[4] pad4;
    int32_t f4;
    void* f8;
    void* f12;
};

void** fun_18021120(struct s637* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26) {
    void** ebx27;
    void* ecx28;
    int32_t ebp29;
    void** eax30;
    void** ecx31;
    void* eax32;
    void** eax33;
    void** ebp34;
    void** ecx35;
    void** edx36;
    void** eax37;
    void** eax38;
    void*** esp39;
    void** edi40;
    void** esi41;
    void** ebp42;
    void** ebx43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** ax49;
    void* esp50;
    void* edx51;
    void** esi52;
    int32_t eax53;
    void** v54;
    void* eax55;
    void** ecx56;
    void** edx57;
    void** ebx58;
    void** eax59;
    void** ecx60;
    void* edi61;
    void** ecx62;
    void** edx63;
    void** v64;
    void** eax65;
    void** v66;
    void** ecx67;
    void** ecx68;
    void** eax69;

    ebx27 = a3;
    ecx28 = ecx->f12;
    ebp29 = ecx->f4;
    eax30 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ecx28) - ebp29 >> 1);
    if (reinterpret_cast<signed char>(ebx27) > reinterpret_cast<signed char>(eax30)) {
        ecx31 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(eax30));
        eax32 = ecx->f8;
        a3 = ecx31;
        eax33 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(eax32) - (reinterpret_cast<unsigned char>(ecx31) + reinterpret_cast<unsigned char>(ecx31)));
        if (reinterpret_cast<signed char>(a4) > reinterpret_cast<signed char>(ecx31)) {
        }
        ebp34 = a4;
    } else {
        ebp34 = a4;
        eax33 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ecx28) - (reinterpret_cast<unsigned char>(ebx27) + reinterpret_cast<unsigned char>(ebx27)));
    }
    ecx35 = g18043444;
    edx36 = g18043448;
    eax37 = g18043440;
    eax38 = g1804344c;
    esp39 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 40 - 4 - 4 - 4 - 4 - 4 - 4);
    ax49 = fun_1801a210(esp39 + 24, a2, ebp34, edi40, esi41, ebp42, ebx43, eax33, eax37, ecx35, edx36, eax38, v44, v45, v46, v47, v48, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
    esp50 = reinterpret_cast<void*>(esp39 - 4 + 8 + 4);
    if (reinterpret_cast<signed char>(ebp34) < reinterpret_cast<signed char>(a4)) {
        edx51 = ecx->f12;
        esi52 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a4) - reinterpret_cast<unsigned char>(ebp34));
        eax53 = reinterpret_cast<int32_t>(edx51) - ecx->f4;
        v54 = esi52;
        eax55 = reinterpret_cast<void*>(eax53 >> 1);
        if (reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(ebp34)) > reinterpret_cast<int32_t>(eax55)) {
            ecx56 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(ebp34) - reinterpret_cast<uint32_t>(eax55));
            a3 = ecx56;
            edx57 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(ecx->f8) - (reinterpret_cast<unsigned char>(ecx56) + reinterpret_cast<unsigned char>(ecx56)));
            if (reinterpret_cast<signed char>(esi52) > reinterpret_cast<signed char>(ecx56)) {
            }
            esi52 = v54;
        } else {
            edx57 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(edx51) - (reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(ebp34) + (reinterpret_cast<unsigned char>(ebx27) - reinterpret_cast<unsigned char>(ebp34))));
        }
        ebx58 = *reinterpret_cast<void***>(a2);
        eax59 = a2 + 4;
        ecx60 = *reinterpret_cast<void***>(eax59 + 12);
        if (reinterpret_cast<signed char>(ecx60) < reinterpret_cast<signed char>(0)) {
            edi61 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax59 + 8)) * reinterpret_cast<unsigned char>(ebp34));
        } else {
            edi61 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ebp34) << *reinterpret_cast<unsigned char*>(&ecx60));
        }
        ecx62 = *reinterpret_cast<void***>(eax59);
        edx63 = g18043444;
        v64 = *reinterpret_cast<void***>(eax59 + 4);
        eax65 = *reinterpret_cast<void***>(eax59 + 12);
        v66 = *reinterpret_cast<void***>(eax59 + 8);
        ecx67 = g18043440;
        ecx68 = g1804344c;
        eax69 = g18043448;
        ax49 = fun_1801a210(reinterpret_cast<int32_t>(esp50) - 4 - 4 + 44, reinterpret_cast<int32_t>(esp50) + 16, esi52, edi40, esi41, ebp42, ebx43, reinterpret_cast<unsigned char>(ebx58) + reinterpret_cast<uint32_t>(edi61), ecx62, v64, v66, eax65, edx57, ecx67, edx63, eax69, ecx68, __return_address(), a2, a3, v54, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26);
    }
    return ax49;
}

struct s638 {
    signed char[4] pad4;
    void** f4;
    signed char[3] pad8;
    int32_t f8;
    void** f12;
};

int16_t fun_180214f0(struct s638* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36) {
    void** v37;
    void** v38;
    void** ebx39;
    struct s638* ebx40;
    void** v41;
    void** ebp42;
    void** v43;
    void** esi44;
    void** ecx45;
    void** eax46;
    void** v47;
    void* eax48;
    void** esi49;
    void** v50;
    void** ebp51;
    void** esi52;
    void** eax53;
    void** v54;
    void** edi55;
    void** edi56;
    uint32_t ecx57;
    uint32_t ecx58;
    void** edx59;
    void** eax60;
    void** v61;
    void** v62;
    void** eax63;
    void** v64;
    void** v65;
    void*** edi66;
    void** edx67;
    void** esi68;
    uint32_t ecx69;
    void** v70;
    void** ecx71;

    v37 = reinterpret_cast<void**>(__return_address());
    v38 = ebx39;
    ebx40 = ecx;
    v41 = ebp42;
    v43 = esi44;
    ecx45 = ebx40->f12;
    eax46 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ecx45) - reinterpret_cast<unsigned char>(ebx40->f4)) >> 1);
    v47 = eax46;
    if (eax46 && (eax48 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(ebx40->f8 - reinterpret_cast<unsigned char>(ecx45)) >> 1), esi49 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(eax48) + reinterpret_cast<uint32_t>(eax48)), v50 = esi49, eax46 = fun_1802b2bb(ecx45, esi49, v43, v41, v38, v47, v50, v37, a2), ebp51 = eax46, !!ebp51)) {
        esi52 = ebx40->f12;
        eax53 = esi49;
        v54 = edi55;
        edi56 = ebp51;
        ecx57 = reinterpret_cast<unsigned char>(esi49) >> 2;
        while (ecx57) {
            --ecx57;
            *reinterpret_cast<void***>(edi56) = *reinterpret_cast<void***>(esi52);
            edi56 = edi56 + 4;
            esi52 = esi52 + 4;
        }
        ecx58 = reinterpret_cast<unsigned char>(eax53) & 3;
        while (ecx58) {
            --ecx58;
            *reinterpret_cast<void***>(edi56) = *reinterpret_cast<void***>(esi52);
            ++edi56;
            ++esi52;
        }
        edx59 = ebx40->f12;
        eax60 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v47) + reinterpret_cast<unsigned char>(v47));
        v61 = eax60;
        v62 = eax60;
        eax63 = ebx40->f4;
        v64 = edx59;
        v65 = eax63;
        fun_1802b920(v65, v64, v62, v54, v43, v41, v38, v61, v50, v37, a2, a3);
        edi66 = reinterpret_cast<void***>(reinterpret_cast<unsigned char>(ebx40->f4) + reinterpret_cast<unsigned char>(v61));
        edx67 = v50;
        esi68 = ebp51;
        ecx69 = reinterpret_cast<unsigned char>(v50) >> 2;
        while (ecx69) {
            --ecx69;
            *edi66 = *reinterpret_cast<void***>(esi68);
            edi66 = edi66 + 4;
            esi68 = esi68 + 4;
        }
        v70 = ebp51;
        ecx71 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx67) & 3);
        while (ecx71) {
            --ecx71;
            *edi66 = *reinterpret_cast<void***>(esi68);
            ++edi66;
            ++esi68;
        }
        ebx40->f12 = ebx40->f4;
        *reinterpret_cast<int16_t*>(&eax46) = fun_1802b2b0(ecx71, v70, v65, v64, v62, v54, v43, v41, v38, v61, v50, v37, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36);
    }
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s639 {
    signed char[4] pad4;
    int32_t f4;
    void* f8;
    void* f12;
};

int32_t fun_18021590(struct s639* ecx) {
    void* eax2;
    int32_t ebp3;
    int32_t eax4;
    void* esi5;
    int32_t eax6;
    int32_t edx7;
    void* ebx8;
    int32_t esi9;
    int16_t* ebx10;
    int32_t ebp11;
    void* esi12;
    int32_t eax13;
    int32_t edi14;
    int32_t edx15;
    int32_t edx16;
    void* esi17;
    int32_t eax18;
    int16_t* esi19;
    unsigned char al20;
    unsigned char al21;

    eax2 = ecx->f8;
    ebp3 = ecx->f4;
    eax4 = reinterpret_cast<int32_t>(eax2) - ecx->f4;
    esi5 = ecx->f12;
    eax6 = eax4 >> 1;
    edx7 = reinterpret_cast<int32_t>(esi5) - ebp3 >> 1;
    if (eax6 > edx7) {
        ebx8 = ecx->f8;
        esi9 = eax6 - edx7;
        ebx10 = reinterpret_cast<int16_t*>(reinterpret_cast<int32_t>(ebx8) - (esi9 + esi9));
        if (eax6 > esi9) {
        }
        ebp11 = esi9;
    } else {
        ebp11 = eax6;
        ebx10 = reinterpret_cast<int16_t*>(reinterpret_cast<int32_t>(esi5) - (eax6 + eax6));
    }
    esi12 = ecx->f12;
    eax13 = eax6 - ebp11;
    edi14 = eax13;
    edx15 = reinterpret_cast<int32_t>(esi12) - ecx->f4;
    edx16 = edx15 >> 1;
    if (eax13 > edx16) {
        esi17 = ecx->f8;
        eax18 = eax13 - edx16;
        esi19 = reinterpret_cast<int16_t*>(reinterpret_cast<int32_t>(esi17) - (eax18 + eax18));
        if (edi14 > eax18) {
        }
        edi14 = edi14;
    } else {
        esi19 = reinterpret_cast<int16_t*>(reinterpret_cast<int32_t>(esi12) - (eax13 + eax13));
    }
    al20 = fun_18018b30(ebx10, ebp11);
    if (!al20 || (al21 = fun_18018b30(esi19, edi14), al21 == 0)) {
        return 0;
    } else {
        return 1;
    }
}

struct s640 {
    signed char[4] pad4;
    void** f4;
    signed char[3] pad8;
    int32_t f8;
    void** f12;
};

void** fun_18021650(struct s640* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18) {
    void** eax19;
    void** edx20;
    int32_t ecx21;
    void** edx22;
    void** edx23;
    void** edx24;
    void** ax25;

    eax19 = ecx->f4;
    ecx->f12 = eax19;
    edx20 = g18043440;
    ecx21 = ecx->f8;
    edx22 = g18043444;
    edx23 = g18043448;
    edx24 = g1804344c;
    ax25 = fun_18017250(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 + 4, reinterpret_cast<int32_t>(ecx21 - reinterpret_cast<unsigned char>(eax19)) >> 1, eax19, edx20, edx22, edx23, edx24, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
    return ax25;
}

int16_t fun_18020cc0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18020ce0(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

void fun_18022be0(void** ecx, void** a2, void** a3) {
    void*** esp4;
    void** ecx5;
    void** eax6;
    void** edx7;
    void** v8;
    int32_t eax9;
    void* esp10;
    void* eax11;
    void** v12;
    void** v13;
    void** eax14;
    void** v15;
    void** esi16;

    esp4 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4);
    ecx5 = *reinterpret_cast<void***>(ecx + 0x1b4);
    if (ecx5 && !*reinterpret_cast<void***>(ecx + 0x1c0)) {
        eax6 = *reinterpret_cast<void***>(ecx + 0x1ac);
        if (!eax6) {
            edx7 = *reinterpret_cast<void***>(ecx + 0x1b8);
            v8 = *reinterpret_cast<void***>(ecx + 0x1bc);
            eax9 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(ecx + 0x1b0)(ecx5, edx7, v8));
            esp10 = reinterpret_cast<void*>(esp4 - 4 - 4 - 4 - 4 + 4);
            eax11 = reinterpret_cast<void*>(-eax9);
            *reinterpret_cast<void***>(ecx + 0x1c0) = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(eax11) - (reinterpret_cast<uint32_t>(eax11) + reinterpret_cast<uint1_t>(reinterpret_cast<uint32_t>(eax11) < reinterpret_cast<uint32_t>(eax11) + reinterpret_cast<uint1_t>(!!eax9))) + 1);
        } else {
            v12 = *reinterpret_cast<void***>(ecx + 0x1bc);
            v13 = *reinterpret_cast<void***>(ecx + 0x1b8);
            eax6(ecx5, v13, v12);
            esp10 = reinterpret_cast<void*>(esp4 - 4 - 4 - 4 - 4 + 4 + 12);
        }
        eax14 = *reinterpret_cast<void***>(ecx + 0x1b4);
        v15 = *reinterpret_cast<void***>(ecx + 0x1b8);
        fun_18027690(ecx, reinterpret_cast<int32_t>(esp10) - 4 + 8, 1, v15, esi16, eax14, __return_address(), a2, a3);
    }
    return;
}

int16_t fun_18022ce0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43) {
    void** v44;
    void** edi45;
    void** esi46;
    void** eax47;
    void** eax48;
    void** edx49;
    void** v50;
    void** ecx51;
    void** edx52;
    void** ecx53;

    v44 = *reinterpret_cast<void***>(ecx + 12);
    eax47 = fun_1802b2bb(ecx, v44, edi45, esi46, __return_address(), a2, a3, a4, a5);
    if (eax47) {
        eax48 = fun_1802b2bb(ecx, 0x1c4, edi45, esi46, __return_address(), a2, a3, a4, a5);
        if (!eax48 || (edx49 = *reinterpret_cast<void***>(ecx + 36), v50 = *reinterpret_cast<void***>(ecx + 40), ecx51 = *reinterpret_cast<void***>(ecx + 32), edx52 = *reinterpret_cast<void***>(ecx + 12), ecx53 = *reinterpret_cast<void***>(ecx + 28), ecx = eax48, *reinterpret_cast<int16_t*>(&eax48) = fun_18022b20(ecx, ecx53, eax47, edx52, ecx51, edx49, v50), !eax48)) {
            fun_1802b2b0(ecx, eax47, edi45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43);
            return 4;
        } else {
            *reinterpret_cast<void***>(a2) = eax48;
            fun_1802b2b0(ecx, 0, edi45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43);
            return 0;
        }
    } else {
        fun_1802b2b0(ecx, eax47, edi45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43);
        return 4;
    }
}

int16_t fun_18022b90(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18022bb0(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

signed char fun_18022ca0() {
    return 1;
}

void fun_180240d0(void** ecx) {
    void** v2;
    void** v3;
    void** ebx4;
    void** ebx5;
    void** v6;
    void** esi7;
    void** esi8;
    void** edx9;
    void** v10;
    void** eax11;
    void*** esp12;
    void** v13;
    void** edi14;
    void*** edi15;
    void*** eax16;
    void** ecx17;
    void** eax18;
    int1_t zf19;
    void* esp20;
    void** edi21;
    void** edx22;
    uint32_t ecx23;
    void*** esp24;
    void** v25;
    uint32_t ecx26;
    void** eax27;
    void** eax28;
    void* esp29;
    void** eax30;
    void** esi31;
    void** v32;

    v2 = reinterpret_cast<void**>(__return_address());
    v3 = ebx4;
    ebx5 = ecx;
    v6 = esi7;
    esi8 = *reinterpret_cast<void***>(ebx5 + 0x1a0);
    edx9 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx5 + 0x19c)) - reinterpret_cast<unsigned char>(esi8));
    v10 = edx9;
    if (edx9) {
        eax11 = *reinterpret_cast<void***>(ebx5 + 0x1b0);
        esp12 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4 - 4);
        v13 = edi14;
        edi15 = reinterpret_cast<void***>(ebx5 + 0x1b0);
        eax16 = esp12 + 12;
        if (reinterpret_cast<unsigned char>(edx9) > reinterpret_cast<unsigned char>(eax11)) {
            eax16 = edi15;
        }
        ecx17 = *eax16;
        eax18 = reinterpret_cast<void**>(0);
        zf19 = esi8 == *reinterpret_cast<void***>(ebx5 + 0x198);
        *reinterpret_cast<void***>(ebx5 + 0x1c8) = ecx17;
        esp20 = reinterpret_cast<void*>(esp12 - 4 + 4);
        if (zf19) {
            eax18 = reinterpret_cast<void**>(16);
        }
        if (ecx17 == edx9) {
            *reinterpret_cast<unsigned char*>(&eax18) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax18) | 32);
        }
        if (ecx17 == *edi15) {
            *reinterpret_cast<unsigned char*>(&eax18) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax18) | 4);
        }
        edi21 = *reinterpret_cast<void***>(ebx5 + 0x1c4);
        edx22 = ecx17;
        ecx23 = reinterpret_cast<unsigned char>(ecx17) >> 2;
        while (ecx23) {
            --ecx23;
            *reinterpret_cast<void***>(edi21) = *reinterpret_cast<void***>(esi8);
            edi21 = edi21 + 4;
            esi8 = esi8 + 4;
        }
        esp24 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp20) - 4);
        v25 = eax18;
        ecx26 = reinterpret_cast<unsigned char>(edx22) & 3;
        eax27 = ebx5 + 0x1b8;
        while (ecx26) {
            --ecx26;
            *reinterpret_cast<void***>(edi21) = *reinterpret_cast<void***>(esi8);
            ++edi21;
            ++esi8;
        }
        eax28 = reinterpret_cast<void**>(g180458fc());
        esp29 = reinterpret_cast<void*>(esp24 - 4 - 4 - 4 + 4 + 4);
        if (eax28) {
            fun_18032300(0, 0x18043ccc, eax28, eax27, v25, v13, v6, v3, v10, v2);
            esp29 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp29) - 4 - 4 - 4 - 4 + 4 + 12);
        }
        eax30 = *reinterpret_cast<void***>(ebx5 + 0x1d4);
        esi31 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx5 + 0x1a0)) + reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(ebx5 + 0x1cc)));
        v32 = *reinterpret_cast<void***>(ebx5 + 0x1dc);
        *reinterpret_cast<void***>(ebx5 + 0x1a0) = esi31;
        fun_18027690(ebx5, reinterpret_cast<int32_t>(esp29) - 4 + 12, 1, v32, eax27, v25, eax30, v6, v3);
    }
    return;
}

struct s641 {
    signed char[520] pad520;
    int32_t f520;
};

void fun_180245e0(struct s641* ecx) {
    ecx->f520 = ecx->f520 + 1;
    goto fun_18027c50;
}

int16_t fun_18024740(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14) {
    int32_t edi15;
    void** edi16;
    void** esi17;
    void** eax18;
    void** edx19;
    void** v20;
    void** ecx21;
    void** eax22;
    void** esi23;
    void** edx24;
    void** v25;
    void** ecx26;
    int32_t eax27;
    void** eax28;
    int32_t eax29;

    edi15 = 0;
    if (*reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 28)) == 1 || *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 28)) == 3) {
        eax18 = fun_1802b2bb(ecx, 0x1ac, edi16, esi17, __return_address(), a2, a3, a4, a5);
        if (!eax18 || (edx19 = *reinterpret_cast<void***>(ecx + 8), v20 = *reinterpret_cast<void***>(ecx + 12), ecx21 = *reinterpret_cast<void***>(ecx + 28), *reinterpret_cast<int16_t*>(&eax18) = fun_18027cf0(eax18, ecx21, edx19, v20), !eax18)) {
            return 4;
        } else {
            *reinterpret_cast<void***>(a2) = eax18;
        }
    } else {
        eax22 = fun_1802b2bb(ecx, 0x20c, edi16, esi17, __return_address(), a2, a3, a4, a5);
        if (!eax22) {
            esi23 = reinterpret_cast<void**>(0);
        } else {
            edx24 = *reinterpret_cast<void***>(ecx + 8);
            v25 = *reinterpret_cast<void***>(ecx + 12);
            ecx26 = *reinterpret_cast<void***>(ecx + 28);
            *reinterpret_cast<int16_t*>(&eax22) = fun_18023cf0(eax22, ecx26, edx24, v25);
            esi23 = eax22;
        }
        eax27 = fun_18023dd0(esi23, edi16, esi17, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
        edi15 = eax27;
        if (edi15) {
            if (esi23) {
                eax28 = *reinterpret_cast<void***>(esi23);
                *reinterpret_cast<void***>(eax28 + 32)(esi23);
                goto esi17;
            }
        } else {
            *reinterpret_cast<void***>(a2) = esi23;
            if (!esi23) {
                return 4;
            }
        }
    }
    eax29 = edi15;
    return *reinterpret_cast<int16_t*>(&eax29);
}

struct s643 {
    struct s643* f0;
    signed char[4] pad8;
    struct s176* f8;
};

struct s642 {
    signed char[96] pad96;
    void** f96;
    signed char[3] pad100;
    void** f100;
    signed char[3] pad104;
    void** f104;
    signed char[27] pad132;
    void* f132;
    signed char[60] pad196;
    struct s643* f196;
};

int16_t fun_180251d0(struct s642* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11) {
    void** v12;
    void** v13;
    void** ebx14;
    void** v15;
    void** ebp16;
    void** ebp17;
    void** v18;
    void** esi19;
    void** v20;
    void** edi21;
    struct s642* edi22;
    struct s643* ebx23;
    struct s643* esi24;
    struct s176* ecx25;
    void** ecx26;
    int32_t eax27;

    v12 = reinterpret_cast<void**>(__return_address());
    v13 = ebx14;
    v15 = ebp16;
    ebp17 = a4;
    v18 = esi19;
    v20 = edi21;
    edi22 = ecx;
    if (ebp17 && (ebx23 = reinterpret_cast<struct s643*>(&edi22->f196), edi22->f100 = ebp17, esi24 = ebx23->f0, esi24 != ebx23)) {
        do {
            ecx25 = esi24->f8;
            fun_18026540(ecx25, ebp17, v20, v18, v15, v13, v12, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
            esi24 = esi24->f0;
        } while (esi24 != ebx23);
    }
    ecx26 = a2;
    eax27 = 0;
    if (reinterpret_cast<signed char>(reinterpret_cast<unsigned char>(ecx26) + reinterpret_cast<unsigned char>(ecx26) + 20) > reinterpret_cast<signed char>(edi22->f100)) {
        __asm__("cdq ");
        eax27 = 1;
        ecx26 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(edi22->f100 + 0xffffffec) - reinterpret_cast<unsigned char>(edi22->f100)) >> 1);
    }
    edi22->f96 = ecx26;
    edi22->f132 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(ecx26) + reinterpret_cast<unsigned char>(ecx26));
    if (!a3) {
        edi22->f104 = ecx26;
        return *reinterpret_cast<int16_t*>(&eax27);
    } else {
        edi22->f104 = a3;
        return *reinterpret_cast<int16_t*>(&eax27);
    }
}

struct s645 {
    struct s645* f0;
    signed char[4] pad8;
    struct s177* f8;
};

struct s644 {
    signed char[196] pad196;
    struct s645* f196;
};

void fun_18025250(struct s644* ecx, int32_t a2) {
    struct s645* esi3;
    struct s645* edi4;
    int32_t ebx5;
    struct s177* ecx6;

    esi3 = ecx->f196;
    edi4 = reinterpret_cast<struct s645*>(&ecx->f196);
    if (esi3 != edi4) {
        ebx5 = a2;
        do {
            ecx6 = esi3->f8;
            fun_18026560(ecx6, ebx5);
            esi3 = esi3->f0;
        } while (esi3 != edi4);
    }
    return;
}

int32_t CoInitialize = 0x364e6;

void fun_18025300(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10) {
    void** v11;
    void** v12;
    void** ebx13;
    void** v14;
    void** ebp15;
    void** v16;
    void** esi17;
    void** esi18;
    void** v19;
    void** edi20;
    void* esp21;
    void** eax22;
    void** eax23;
    void** v24;
    void** v25;
    void** v26;
    void** edi27;
    void** ebp28;
    void** edi29;
    void** ecx30;
    void** v31;
    void** ecx32;
    void** ebx33;
    void** eax34;
    void** edi35;
    void** eax36;
    void** edx37;
    void** v38;
    void** edi39;
    void** ebx40;
    void** eax41;
    void** ebx42;
    void** ebp43;
    void** v44;
    void** edi45;
    uint32_t eax46;
    uint32_t eax47;
    void** v48;
    void** v49;
    void** v50;
    void* esp51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** eax57;
    void** edi58;
    void** ebx59;
    void** eax60;
    void** ecx61;
    void** eax62;
    void** ebx63;
    void** ecx64;
    void** v65;
    void** v66;
    void** v67;
    void** eax68;
    void** ecx69;
    void** edx70;
    void** eax71;
    int32_t eax72;
    void** v73;
    void** v74;
    void** v75;
    void** v76;
    void** v77;
    void** v78;
    void** v79;
    int32_t v80;
    void** ecx81;
    void** eax82;
    void** eax83;
    void** ecx84;
    void** edx85;
    void** eax86;
    void** v87;
    void** v88;
    void** eax89;
    void** v90;
    void** v91;
    void** eax92;
    int32_t v93;
    void** ecx94;
    int32_t eax95;
    int32_t v96;

    v11 = reinterpret_cast<void**>(__return_address());
    v12 = ebx13;
    v14 = ebp15;
    v16 = esi17;
    esi18 = ecx;
    v19 = edi20;
    if (*reinterpret_cast<void***>(esi18 + 4)) {
        addr_0x18025615_2:
        goto v11;
    } else {
        CoInitialize();
        esp21 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 12 - 4 - 4 - 4 - 4 - 4 - 4 + 4);
        eax22 = *reinterpret_cast<void***>(esi18 + 92);
        if (*reinterpret_cast<unsigned char*>(&eax22 + 1) & 4) {
            if (!v11) {
                if (!*reinterpret_cast<void***>(esi18 + 0x94) && (eax23 = fun_18032400(), esp21 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp21) - 4 + 4), *reinterpret_cast<void***>(esi18 + 0x94) = eax23, !eax23)) {
                    fun_180323c0(ecx, 0x18043ef0, 0, v19, v16, v14, v12, v24, v25, v26, v11, a2, a3, a4, a5, a6);
                    esp21 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp21) - 4 - 4 + 4 + 4);
                }
            } else {
                *reinterpret_cast<void***>(esi18 + 0x94) = v11;
            }
        }
        edi27 = *reinterpret_cast<void***>(esi18 + 0xb0);
        ebp28 = esi18 + 0xb0;
        if (edi27 != ebp28) 
            goto addr_0x1802536a_9;
    }
    addr_0x18025382_10:
    edi29 = *reinterpret_cast<void***>(esi18 + 0xb4);
    if (edi29 != ebp28) {
        do {
            ecx30 = *reinterpret_cast<void***>(esi18 + 92);
            if (*reinterpret_cast<unsigned char*>(&ecx30 + 1) & 4 && *reinterpret_cast<void***>(esi18 + 0x94)) {
                v31 = *reinterpret_cast<void***>(esi18 + 0x94);
                ecx32 = *reinterpret_cast<void***>(edi29 + 8);
                fun_18025f30(ecx32, ecx30, v31);
                esp21 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp21) - 4 - 4 - 4 + 8 + 4);
            }
            edi29 = *reinterpret_cast<void***>(edi29 + 4);
        } while (edi29 != ebp28);
    }
    ebx33 = *reinterpret_cast<void***>(ebp28);
    if (ebx33 != ebp28) {
        do {
            eax34 = *reinterpret_cast<void***>(esi18 + 92);
            edi35 = *reinterpret_cast<void***>(ebx33 + 8);
            if (*reinterpret_cast<unsigned char*>(&eax34 + 1) & 2) {
                fun_18025fc0(edi35, esi18 + 20);
                esp21 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp21) - 4 - 4 + 4 + 4);
            }
            if (*reinterpret_cast<void***>(esi18 + 0x98) && (eax36 = *reinterpret_cast<void***>(edi35 + 24), !!eax36)) {
                edx37 = *reinterpret_cast<void***>(eax36);
                v38 = *reinterpret_cast<void***>(esi18 + 0x98);
                *reinterpret_cast<void***>(edx37 + 36)(eax36, v38);
                esp21 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp21) - 4 - 4 - 4 + 4);
            }
            ebx33 = *reinterpret_cast<void***>(ebx33);
        } while (ebx33 != ebp28);
    }
    edi39 = *reinterpret_cast<void***>(esi18 + 0xc4);
    ebx40 = esi18 + 0xc4;
    if (edi39 == ebx40) {
        addr_0x18025441_21:
        eax41 = *reinterpret_cast<void***>(esi18 + 92);
        if (!(*reinterpret_cast<unsigned char*>(&eax41 + 1) & 1)) {
            if (!*reinterpret_cast<void***>(esi18 + 96)) {
                ebx42 = *reinterpret_cast<void***>(esi18 + 0xb0);
                ebp43 = esi18 + 0xb0;
                v12 = reinterpret_cast<void**>(50);
                v44 = reinterpret_cast<void**>(50);
                if (ebx42 != ebp43) {
                    do {
                        edi45 = *reinterpret_cast<void***>(ebx42 + 8);
                        eax46 = fun_18026350(edi45);
                        esp21 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp21) - 4 + 4);
                        eax47 = eax46 >> 5;
                        if (*reinterpret_cast<unsigned char*>(&eax47) & 1 && (fun_180323c0(edi45, 0x18043e58, 0, v19, v16, v14, v12, v48, v49, v50, v44, a2, a3, a4, a5, a6), esp51 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp21) - 4 - 4 + 4 + 4), *reinterpret_cast<int16_t*>(&eax47) = fun_18026190(edi45, reinterpret_cast<int32_t>(esp51) + 20, reinterpret_cast<int32_t>(esp51) + 24), esp21 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp51) - 4 - 4 - 4 + 8 + 4), reinterpret_cast<int32_t>(eax47) >= reinterpret_cast<int32_t>(0))) {
                            if (reinterpret_cast<signed char>(v52) > reinterpret_cast<signed char>(v12)) {
                                v12 = v52;
                            }
                            if (reinterpret_cast<signed char>(v53) > reinterpret_cast<signed char>(v44)) {
                                v44 = v53;
                            }
                            fun_180323c0(v52, 0x18043e18, v52, v53, 0, v19, v16, v14, v12, v54, v55, v56, v44, a2, a3, a4);
                            esp21 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp21) - 4 - 4 - 4 - 4 + 4 + 12);
                        }
                        ebx42 = *reinterpret_cast<void***>(ebx42);
                    } while (ebx42 != ebp43);
                }
                eax57 = *reinterpret_cast<void***>(esi18);
                *reinterpret_cast<void***>(eax57 + 24)(esi18, v12, v44, 0);
            }
            edi58 = *reinterpret_cast<void***>(esi18 + 0xb0);
            ebx59 = esi18 + 0xb0;
            if (edi58 != ebx59) {
                do {
                    if (*reinterpret_cast<void***>(*reinterpret_cast<void***>(edi58 + 8) + 20) && (eax60 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(edi58 + 8) + 28), !!eax60)) {
                        ecx61 = *reinterpret_cast<void***>(eax60);
                        *reinterpret_cast<void***>(ecx61 + 48)(eax60, 0, 0, 1);
                    }
                    edi58 = *reinterpret_cast<void***>(edi58);
                } while (edi58 != ebx59);
            }
        } else {
            eax62 = *reinterpret_cast<void***>(esi18 + 12);
            ebx63 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx40) + 8);
            if (eax62) {
                ecx64 = *reinterpret_cast<void***>(eax62);
                *reinterpret_cast<void***>(ecx64 + 12)(eax62, ebx63 + 12);
            }
            eax68 = fun_18026520(ebx63, 0, v19, v16, v14, v12, v65, v66, v67, v11, a2, a3, a4, a5, a6, a7, a8, a9);
            *reinterpret_cast<void***>(esi18 + 100) = eax68;
            if (reinterpret_cast<signed char>(eax68) >= reinterpret_cast<signed char>(20)) {
                if (!*reinterpret_cast<void***>(esi18 + 96)) {
                    *reinterpret_cast<void***>(esi18 + 0x68) = reinterpret_cast<void**>(50);
                    *reinterpret_cast<void***>(esi18 + 96) = reinterpret_cast<void**>(50);
                }
                ecx69 = *reinterpret_cast<void***>(esi18 + 0x68);
                edx70 = *reinterpret_cast<void***>(esi18 + 96);
                eax71 = *reinterpret_cast<void***>(esi18);
                eax72 = reinterpret_cast<int32_t>(*reinterpret_cast<void***>(eax71 + 24)(esi18, edx70, ecx69, 0));
                if (eax72) {
                    v73 = *reinterpret_cast<void***>(esi18 + 96);
                    fun_180323c0(esi18, 0x18043e84, v73, edx70, ecx69, 0, 0, v19, v16, v14, v12, v74, v75, v76, v11, a2);
                }
            } else {
                fun_180323c0(ebx63, 0x18043ec4, eax68, 0, v19, v16, v14, v12, v77, v78, v79, v11, a2, a3, a4, a5);
                CoUninitialize(ebx63);
                goto v80;
            }
        }
    } else {
        do {
            ecx81 = *reinterpret_cast<void***>(edi39 + 8);
            eax82 = *reinterpret_cast<void***>(esi18 + 92);
            if (edi39 != *reinterpret_cast<void***>(ebx40)) {
                *reinterpret_cast<unsigned char*>(&eax82 + 1) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax82 + 1) | 64);
            }
            *reinterpret_cast<int16_t*>(&eax82) = fun_18026580(ecx81, eax82);
            esp21 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp21) - 4 - 4 + 4 + 4);
            if (eax82) 
                goto addr_0x1802542f_47;
            edi39 = *reinterpret_cast<void***>(edi39);
        } while (edi39 != ebx40);
        goto addr_0x1802541b_49;
    }
    eax83 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi18 + 96)) << 2);
    ecx84 = *reinterpret_cast<void***>(esi18 + 100) - 20;
    v11 = ecx84;
    if (reinterpret_cast<signed char>(ecx84) > reinterpret_cast<signed char>(eax83)) {
    }
    edx85 = *reinterpret_cast<void***>(esi18 + 24);
    eax86 = v11;
    *reinterpret_cast<void***>(esi18 + 0x88) = eax86;
    *reinterpret_cast<int16_t*>(&eax86) = fun_1800da70(ecx84, eax86, edx85, 0x3e8, 0, v19, v16, v14, v12, v87, eax83, v88, v11, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    *reinterpret_cast<void***>(esi18 + 0x8c) = eax86;
    eax89 = *reinterpret_cast<void***>(esi18 + 24);
    *reinterpret_cast<int16_t*>(&eax89) = fun_1800da70(ecx84, 10, eax89, 0x3e8, 0, v19, v16, v14, v12, v90, eax83, v91, v11, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    *reinterpret_cast<void***>(esi18 + 0x90) = eax89;
    *reinterpret_cast<void***>(esi18 + 0x6c) = reinterpret_cast<void**>(0);
    eax92 = g18045920;
    g18045920 = eax92 + 1;
    *reinterpret_cast<void***>(esi18 + 4) = reinterpret_cast<void**>(1);
    goto addr_0x18025615_2;
    addr_0x1802542f_47:
    CoUninitialize(ecx81);
    goto v93;
    addr_0x1802541b_49:
    goto addr_0x18025441_21;
    do {
        addr_0x1802536a_9:
        ecx94 = *reinterpret_cast<void***>(edi27 + 8);
        eax95 = fun_18025e70(ecx94);
        esp21 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp21) - 4 + 4);
        if (eax95) 
            break;
        edi27 = *reinterpret_cast<void***>(edi27);
    } while (edi27 != ebp28);
    goto addr_0x18025382_10;
    CoUninitialize(ecx94);
    goto v96;
}

void fun_180256f0(void** a1, void** a2) {
    void** eax3;
    void** v4;
    void** edi5;
    void** esi6;

    if (!*reinterpret_cast<void***>(a1 + 0xa4)) {
        fun_180249a0(a1);
        fun_18025790(a1);
        fun_180249b0(a1);
        if (*reinterpret_cast<void***>(a1 + 12)) {
            eax3 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(a1 + 12));
            v4 = *reinterpret_cast<void***>(a1 + 12);
            *reinterpret_cast<void***>(eax3 + 32)(a1, v4);
        }
        return;
    } else {
        fun_18025740(a1, edi5, esi6, __return_address(), a1, a2);
        SetEvent(a1);
        goto esi6;
    }
}

int32_t fun_18025770(void** ecx) {
    int32_t eax2;
    void** ecx3;
    void** v4;

    eax2 = fun_18025790(ecx);
    if (*reinterpret_cast<void***>(ecx + 12)) {
        ecx3 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 12));
        v4 = *reinterpret_cast<void***>(ecx + 12);
        *reinterpret_cast<void***>(ecx3 + 32)(v4);
    }
    return eax2;
}

struct s648 {
    signed char[24] pad24;
    int32_t f24;
};

struct s647 {
    signed char[8] pad8;
    struct s648* f8;
};

struct s646 {
    signed char[176] pad176;
    struct s647* f176;
};

int32_t fun_18024ab0(struct s646* ecx) {
    return ecx->f176->f8->f24;
}

int32_t fun_180273b0(int32_t ecx) {
    int32_t eax2;

    __asm__("rdtsc ");
    return eax2;
}

void fun_18027c20(struct s187* ecx, struct s190* a2, int32_t* a3, int32_t a4) {
    int32_t eax5;

    eax5 = a4;
    *reinterpret_cast<int16_t*>(&eax5) = fun_180278b0(ecx, a2, a3, eax5);
    ecx->f420 = ecx->f420 + eax5;
    return;
}

void fun_18027dd0(struct s195* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30) {
    void** eax31;
    void** edx32;
    void** ecx33;
    void** eax34;
    void** ecx35;
    void** eax36;
    void*** esp37;
    void** edx38;
    void** eax39;
    void** edi40;
    void** esi41;

    eax31 = g180458c8;
    edx32 = g180458d0;
    ecx33 = g180458cc;
    eax34 = g180458d4;
    ecx35 = ecx->f440;
    eax36 = ecx->f412;
    esp37 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 - 4 - 4);
    edx38 = *reinterpret_cast<void***>(ecx35);
    eax39 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx38 + 16)());
    fun_1801a210(esp37 - 4 - 4 - 4 + 4 - 4 - 4 + 16, &ecx->f48, eax39, esp37 + 12, 0, eax36, edi40, esi41, 0, eax31, ecx33, edx32, eax34, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30);
    fun_18027770(ecx, eax39);
    goto ecx33;
}

int16_t fun_18027da0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18027dc0(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

void fun_18027f30(struct s195* ecx) {
    void** ecx2;
    void** eax3;
    void** edx4;
    void** eax5;
    void** ecx6;
    void** edx7;
    int32_t edi8;

    ecx2 = ecx->f444;
    eax3 = ecx->f412;
    edx4 = *reinterpret_cast<void***>(ecx2);
    eax5 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx4 + 16)(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 - 4 - 4 + 12, 0, eax3));
    ecx6 = ecx->f440;
    edx7 = *reinterpret_cast<void***>(ecx6);
    *reinterpret_cast<void***>(edx7 + 0x68)();
    fun_18027770(ecx, eax5);
    goto edi8;
}

int16_t fun_18027f00(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18027f20(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s650 {
    signed char[12] pad12;
    void** f12;
};

struct s649 {
    signed char[444] pad444;
    struct s650* f444;
    signed char[20] pad468;
    struct s650* f468;
};

void fun_180280e0(struct s649* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17) {
    struct s650* eax18;
    void** ecx19;
    void** esi20;

    eax18 = ecx->f444;
    ecx19 = eax18->f12;
    *reinterpret_cast<int16_t*>(&eax18) = fun_1800da70(ecx19, a2, ecx19, 0x3e8, esi20, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
    ecx->f468 = eax18;
    return;
}

void fun_18028180(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** esp7;
    void** eax8;
    void** esi9;
    void** v10;
    void** v11;
    void** v12;
    void** v13;
    void** v14;
    void** v15;
    void** v16;
    void** v17;
    void** v18;
    void** edx19;
    int32_t v20;

    esp7 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20);
    eax8 = reinterpret_cast<void**>(0);
    *reinterpret_cast<int16_t*>(&eax8) = *reinterpret_cast<int16_t*>(ecx + 22);
    fun_18027240(esp7, 1, a2, eax8, esi9, v10, v11, v12, v13, v14, __return_address(), a2, a3, a4, a5, a6);
    fun_18027620(ecx, reinterpret_cast<uint32_t>(esp7 - 4) - 4 - 4 - 4 - 4 - 4 + 16 + 4 + 4, esi9, v15, v16, v17, v18);
    edx19 = *reinterpret_cast<void***>(ecx);
    *reinterpret_cast<void***>(edx19 + 44)(ecx);
    goto v20;
}

int16_t fun_180288a0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_180288c0(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

void fun_180288e0(struct s300* ecx, int32_t a2) {
    struct s301** ecx3;
    struct s301* eax4;
    int32_t esi5;

    ecx3 = ecx->f444;
    eax4 = *ecx3;
    eax4->f36();
    fun_18027b60(ecx, a2);
    goto esi5;
}

struct s651 {
    signed char[444] pad444;
    void** f444;
    signed char[3] pad448;
    unsigned char f448;
    signed char[1] pad450;
    signed char f450;
};

void fun_18028970(struct s651* ecx, int32_t a2) {
    void** eax3;
    void** ecx4;
    unsigned char al5;
    int32_t esi6;

    eax3 = *reinterpret_cast<void***>(ecx->f444);
    *reinterpret_cast<void***>(eax3 + 48)();
    if (ecx->f448 && (ecx4 = ecx->f444, al5 = fun_18028200(ecx4), !al5)) {
        ecx->f450 = 1;
        ecx->f448 = al5;
    }
    goto esi6;
}

struct s653 {
    signed char[52] pad52;
    int32_t f52;
};

struct s652 {
    signed char[444] pad444;
    struct s653** f444;
};

void fun_180289b0(struct s652* ecx) {
    goto (*ecx->f444)->f52;
}

int16_t fun_18028c20(struct s187* ecx, struct s190* a2, int32_t* a3, int32_t a4) {
    int16_t ax5;
    struct s189** ecx6;
    struct s189* edx7;
    int16_t ax8;

    if (!ecx->f448) {
        ax5 = fun_180278b0(ecx, a2, a3, a4);
        return ax5;
    } else {
        if (!ecx->f449) {
            ecx6 = ecx->f440;
            edx7 = *ecx6;
            edx7->f16();
            goto a2;
        } else {
            ax8 = fun_180278b0(ecx, a2, a3, a4);
            return ax8;
        }
    }
}

void fun_18028270() {
    int32_t* v1;

    *v1 = 0;
    return;
}

struct s654 {
    signed char[412] pad412;
    int32_t f412;
    int32_t f416;
};

void fun_18028e80(struct s654* ecx, int32_t a2) {
    ecx->f412 = ecx->f412 - a2;
    ecx->f416 = ecx->f416 + a2;
    return;
}

struct s656 {
    signed char[12] pad12;
    int32_t f12;
};

struct s657 {
    signed char[16] pad16;
    int32_t f16;
};

struct s655 {
    struct s656* f0;
    signed char[828] pad832;
    struct s657** f832;
    signed char[8] pad844;
    int32_t f844;
    signed char[256] pad1104;
    int32_t f1104;
};

void fun_180290c0(struct s655* ecx, int32_t a2, int32_t a3, int32_t a4) {
    struct s656* eax5;
    int32_t edi6;
    int32_t esi7;
    int32_t* edi8;
    int32_t* eax9;
    struct s657** ecx10;
    int32_t v11;
    struct s657* edx12;
    int32_t eax13;
    int32_t ecx14;

    eax5 = ecx->f0;
    eax5->f12(edi6, esi7, __return_address());
    edi8 = &ecx->f844;
    eax9 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4 + 4 + 20);
    if (a4 > ecx->f844) {
        eax9 = edi8;
    }
    ecx10 = ecx->f832;
    v11 = *eax9;
    edx12 = *ecx10;
    eax13 = reinterpret_cast<int32_t>(edx12->f16());
    ecx14 = ecx->f1104 + eax13;
    *edi8 = *edi8 - eax13;
    ecx->f1104 = ecx14;
    goto v11;
}

int16_t fun_180294a0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_180294c0(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_18028f90(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18028fb0(ecx);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s659 {
    signed char[4] pad4;
    int32_t f4;
    int32_t f8;
};

struct s658 {
    signed char[448] pad448;
    struct s659** f448;
    signed char[4] pad456;
    void** f456;
};

void fun_18029580(struct s658* ecx, void** a2, void** a3, int32_t a4) {
    void** ebx5;
    void** esi6;
    void** eax7;
    struct s659* eax8;
    void** eax9;
    struct s659** ecx10;
    struct s659* edx11;
    void** ecx12;

    ebx5 = a2;
    esi6 = a3;
    if (reinterpret_cast<signed char>(esi6) < reinterpret_cast<signed char>(ebx5)) {
        eax7 = esi6;
        esi6 = ebx5;
        ebx5 = eax7;
    }
    eax8 = *ecx->f448;
    eax9 = reinterpret_cast<void**>(eax8->f8());
    if (reinterpret_cast<signed char>(esi6) > reinterpret_cast<signed char>(eax9)) {
        ecx10 = ecx->f448;
        edx11 = *ecx10;
        edx11->f4(esi6);
    }
    ecx12 = ecx->f456;
    fun_18029170(ecx12, ebx5, esi6, a4);
    return;
}

void fun_180295d0() {
    __asm__("fld dword [esp+0x4]");
    __asm__("fmul dword [0x18034774]");
    __asm__("fstp dword [ecx+0x1b8]");
    return;
}

int16_t fun_18029a10(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18029a30(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s661 {
    signed char[4] pad4;
    int32_t f4;
    int32_t f8;
};

struct s660 {
    signed char[452] pad452;
    struct s661** f452;
    signed char[4] pad460;
    void** f460;
};

void fun_18029a70(struct s660* ecx, void** a2, void** a3, int32_t a4) {
    void** ebx5;
    void** esi6;
    void** eax7;
    struct s661* eax8;
    void** eax9;
    struct s661** ecx10;
    struct s661* edx11;
    void** ecx12;

    ebx5 = a2;
    esi6 = a3;
    if (reinterpret_cast<signed char>(esi6) < reinterpret_cast<signed char>(ebx5)) {
        eax7 = esi6;
        esi6 = ebx5;
        ebx5 = eax7;
    }
    eax8 = *ecx->f452;
    eax9 = reinterpret_cast<void**>(eax8->f8());
    if (reinterpret_cast<signed char>(esi6) > reinterpret_cast<signed char>(eax9)) {
        ecx10 = ecx->f452;
        edx11 = *ecx10;
        edx11->f4(esi6);
    }
    ecx12 = ecx->f460;
    fun_18029120(ecx12, ebx5, esi6, a4);
    return;
}

struct s663 {
    signed char[4] pad4;
    int32_t f4;
    int32_t f8;
};

struct s662 {
    signed char[452] pad452;
    struct s663** f452;
    signed char[4] pad460;
    void** f460;
};

void fun_18029ac0(struct s662* ecx, void** a2, void** a3, int32_t a4) {
    void** ebx5;
    void** esi6;
    void** eax7;
    struct s663* eax8;
    void** eax9;
    struct s663** ecx10;
    struct s663* edx11;
    void** ecx12;

    ebx5 = a2;
    esi6 = a3;
    if (reinterpret_cast<signed char>(esi6) < reinterpret_cast<signed char>(ebx5)) {
        eax7 = esi6;
        esi6 = ebx5;
        ebx5 = eax7;
    }
    eax8 = *ecx->f452;
    eax9 = reinterpret_cast<void**>(eax8->f8());
    if (reinterpret_cast<signed char>(esi6) > reinterpret_cast<signed char>(eax9)) {
        ecx10 = ecx->f452;
        edx11 = *ecx10;
        edx11->f4(esi6);
    }
    ecx12 = ecx->f460;
    fun_18029170(ecx12, ebx5, esi6, a4);
    return;
}

struct s664 {
    signed char[440] pad440;
    int32_t f440;
};

void fun_18029b10(struct s664* ecx, int32_t a2) {
    ecx->f440 = a2;
    return;
}

struct s665 {
    signed char[4] pad4;
    signed char f4;
    signed char[99] pad104;
    int32_t f104;
    int32_t f108;
    int32_t f112;
    int32_t f116;
};

int16_t fun_1802a330(struct s665* ecx) {
    struct s665* esi2;
    int32_t* ebp3;
    int32_t eax4;
    int32_t ebx5;
    int32_t edi6;
    int32_t edx7;
    int32_t ecx8;
    int32_t eax9;

    esi2 = ecx;
    if (esi2->f4) {
        addr_0x1802a3c8_2:
        return 0;
    } else {
        if (!esi2->f108) {
            ebp3 = &esi2->f104;
        } else {
            ebp3 = &esi2->f104;
        }
        eax4 = reinterpret_cast<int32_t>(waveOutOpen());
        if (eax4) 
            goto addr_0x1802a37c_7;
    }
    ebx5 = 0;
    if (reinterpret_cast<uint1_t>(esi2->f112 < 0) | reinterpret_cast<uint1_t>(esi2->f112 == 0)) {
        addr_0x1802a3c4_9:
        esi2->f4 = 1;
        goto addr_0x1802a3c8_2;
    } else {
        edi6 = 0;
        do {
            edx7 = *ebp3;
            ecx8 = esi2->f116 + edi6;
            eax9 = reinterpret_cast<int32_t>(waveOutPrepareHeader(edx7, ecx8, 32));
            if (eax9) 
                break;
            ++ebx5;
            *reinterpret_cast<uint32_t*>(esi2->f116 + edi6 + 16) = *reinterpret_cast<uint32_t*>(esi2->f116 + edi6 + 16) | 1;
            edi6 = edi6 + 32;
        } while (ebx5 < esi2->f112);
        goto addr_0x1802a3c4_9;
    }
    addr_0x1802a37c_7:
    goto 0;
}

int16_t fun_1802a5b0(int32_t a1, int32_t a2, int32_t a3, struct s274* a4) {
    void** esi5;
    void** edx6;

    if (a2 != 0x3bd) {
        DefWindowProcA();
        goto a1;
    } else {
        esi5 = a4->f12;
        if (*reinterpret_cast<void***>(esi5 + 5)) {
            fun_180249a0(esi5);
            edx6 = *reinterpret_cast<void***>(esi5);
            *reinterpret_cast<void***>(edx6 + 16)(esi5);
            fun_180249b0(esi5);
        }
        return 0;
    }
}

int16_t fun_1802a110(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_1802a130(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_1802a970(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** esi7;
    void** eax8;
    uint32_t eax9;
    uint32_t eax10;
    uint32_t eax11;
    void** edx12;
    void** v13;
    void** ecx14;
    uint32_t eax15;
    uint32_t eax16;
    uint32_t eax17;

    eax8 = fun_1802b2bb(ecx, 0x1ac, esi7, __return_address(), a2, a3, a4, a5, a6);
    if (!eax8) {
        *reinterpret_cast<void***>(a2) = reinterpret_cast<void**>(0);
        eax9 = reinterpret_cast<uint32_t>(-reinterpret_cast<unsigned char>(0));
        eax10 = eax9 - (eax9 + reinterpret_cast<uint1_t>(eax9 < eax9));
        *reinterpret_cast<unsigned char*>(&eax10) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax10) & 0xfc);
        eax11 = eax10 + 4;
        return *reinterpret_cast<int16_t*>(&eax11);
    } else {
        edx12 = *reinterpret_cast<void***>(ecx + 8);
        v13 = *reinterpret_cast<void***>(ecx + 12);
        ecx14 = *reinterpret_cast<void***>(ecx + 28);
        *reinterpret_cast<int16_t*>(&eax8) = fun_18027cf0(eax8, ecx14, edx12, v13);
        *reinterpret_cast<void***>(a2) = eax8;
        eax15 = reinterpret_cast<uint32_t>(-reinterpret_cast<unsigned char>(eax8));
        eax16 = eax15 - (eax15 + reinterpret_cast<uint1_t>(eax15 < eax15 + reinterpret_cast<uint1_t>(!!eax8)));
        *reinterpret_cast<unsigned char*>(&eax16) = reinterpret_cast<unsigned char>(*reinterpret_cast<unsigned char*>(&eax16) & 0xfc);
        eax17 = eax16 + 4;
        return *reinterpret_cast<int16_t*>(&eax17);
    }
}

int32_t g1804592c = 0;

uint32_t fun_1802b260(int32_t ecx) {
    int32_t eax2;
    uint32_t eax3;

    fun_1802b278();
    eax2 = fun_1802c5bc();
    g1804592c = eax2;
    eax3 = fun_1802c56c(ecx);
    __asm__("fclex ");
    return eax3;
}

void fun_1802b31b(void** ecx) {
    fun_1802b7a4(ecx);
    return;
}

int32_t __image_base = 0x1802b277;

int16_t fun_1802b84e(void** ecx, struct s247* a2) {
    void** eax3;
    int32_t eax4;
    int32_t eax5;
    void** v6;

    eax3 = *reinterpret_cast<void***>(&g0);
    *reinterpret_cast<void***>(&g0) = reinterpret_cast<void**>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4 - 4 - 4);
    eax4 = reinterpret_cast<int32_t>(TlsSetValue());
    if (!eax4) {
        fun_1802b7a4(ecx);
        ecx = reinterpret_cast<void**>(16);
    }
    eax5 = __image_base;
    if (eax5) {
        eax5(ecx);
    }
    v6 = a2->f76;
    a2->f72(ecx);
    fun_1802b8e1(v6);
    *reinterpret_cast<void***>(&g0) = eax3;
    return 0;
}

uint32_t fun_1802b8c2() {
    void** eax1;
    int32_t ebp2;
    void** ecx3;
    int32_t ebp4;
    uint32_t eax5;

    eax1 = *reinterpret_cast<void***>(ebp2 - 20);
    ecx3 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(eax1));
    *reinterpret_cast<void***>(ebp4 - 28) = ecx3;
    eax5 = fun_1802e042(ecx3, ecx3, eax1);
    return eax5;
}

void fun_1802ba9d(int32_t ecx) {
}

void fun_1802bae9(int32_t ecx) {
}

void fun_1802bc25(int32_t ecx) {
}

void fun_1802c5e5(void** ecx, struct s304* a2) {
    struct s304* esi3;
    void** v4;
    void** eax5;
    void** ecx6;
    int1_t less_or_equal7;
    uint32_t eax8;
    uint32_t eax9;
    void** eax10;
    void** cl11;
    void** al12;
    void*** esi13;
    void** cl14;

    esi3 = a2;
    v4 = reinterpret_cast<void**>(static_cast<int32_t>(reinterpret_cast<signed char>(esi3->f0)));
    eax5 = fun_1802f6ab(ecx, v4);
    ecx6 = v4;
    if (eax5 != 0x65) {
        do {
            esi3 = reinterpret_cast<struct s304*>(&esi3->f1);
            less_or_equal7 = reinterpret_cast<signed char>(g18044898) <= reinterpret_cast<signed char>(1);
            if (less_or_equal7) {
                eax8 = reinterpret_cast<uint32_t>(static_cast<int32_t>(reinterpret_cast<signed char>(esi3->f0)));
                ecx6 = __image_base;
                *reinterpret_cast<void***>(&eax8) = *reinterpret_cast<void***>(ecx6 + eax8 * 2);
                eax9 = eax8 & 4;
            } else {
                eax10 = reinterpret_cast<void**>(static_cast<int32_t>(reinterpret_cast<signed char>(esi3->f0)));
                eax9 = fun_1802ebc4(ecx6, eax10, 4);
                ecx6 = reinterpret_cast<void**>(4);
            }
        } while (eax9);
    }
    cl11 = g1804489c;
    al12 = esi3->f0;
    esi3->f0 = cl11;
    esi13 = &esi3->f1;
    do {
        cl14 = *esi13;
        *esi13 = al12;
        al12 = cl14;
        ++esi13;
    } while (*esi13);
    return;
}

void fun_1802c6a5(void** ecx, int32_t a2, struct s303* a3, void** a4) {
    if (!a2) {
        fun_1802fba4(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 16, a4);
        a3->f0 = a4;
        return;
    } else {
        fun_1802fb77(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 8, a4);
        a3->f0 = ecx;
        a3->f4 = ecx;
        return;
    }
}

void fun_1802fd67() {
}

void** fun_1802c995(void** ecx, int32_t a2, void** a3, int32_t a4, void** a5, void** a6) {
    void** eax7;
    void** eax8;

    if (a4 == 0x65 || a4 == 69) {
        eax7 = fun_1802c6e3(ecx, a2, a3, a5, a6);
    } else {
        if (a4 != 0x66) {
            eax7 = fun_1802c902(ecx, a2, a3, a5, a6);
        } else {
            eax8 = fun_1802c806(ecx, a2, a3, a5);
            return eax8;
        }
    }
    return eax7;
}

struct s666 {
    signed char[4] pad4;
    uint32_t f4;
};

int32_t fun_1802e1dc(struct s666* a1, int32_t a2);

int32_t fun_1802e266() {
    int32_t eax1;
    void** ecx2;

    eax1 = 0;
    ecx2 = *reinterpret_cast<void***>(&g0);
    if (reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ecx2 + 4) == fun_1802e1dc) && *reinterpret_cast<void***>(ecx2 + 8) == *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx2 + 12) + 12)) {
        eax1 = 1;
    }
    return eax1;
}

struct s667 {
    signed char[4] pad4;
    uint32_t f4;
};

struct s668 {
    signed char[12] pad12;
    struct s216* f12;
};

int32_t fun_1802e2ac(struct s667* a1, struct s216* a2, int32_t a3) {
    unsigned char* esi4;
    unsigned char dh5;
    unsigned char* eax6;
    struct s668* ebp7;
    struct s216* ebx8;
    int32_t eax9;
    int32_t esi10;
    int32_t* edi11;
    int32_t ecx12;
    int32_t eax13;
    int32_t* edi14;
    int32_t ecx15;

    *esi4 = reinterpret_cast<unsigned char>(*esi4 ^ reinterpret_cast<unsigned char>(dh5 ^ *eax6));
    ebp7 = reinterpret_cast<struct s668*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 4 - 4);
    ebx8 = a2;
    if (a1->f4 & 6) {
        fun_1802e1fe(ebx8, 0xff);
        eax9 = 1;
    } else {
        *reinterpret_cast<void**>(reinterpret_cast<int32_t>(ebx8) - 4) = reinterpret_cast<void*>(reinterpret_cast<int32_t>(ebp7) - 8);
        esi10 = ebx8->f12;
        edi11 = ebx8->f8;
        while (esi10 != -1) {
            ecx12 = esi10 + esi10 * 2;
            if ((edi11 + ecx12)[1] && (eax13 = reinterpret_cast<int32_t>((edi11 + ecx12)[1]()), ebp7 = ebp7, esi10 = esi10, ebx8 = ebp7->f12, !!eax13)) {
                if (__intrinsic()) 
                    goto addr_0x1802e346_7;
                edi14 = ebx8->f8;
                fun_1802e1bc(ebx8);
                ebp7 = reinterpret_cast<struct s668*>(ebx8 + 1);
                fun_1802e1fe(ebx8, esi10);
                ecx15 = esi10 + esi10 * 2;
                fun_1802e292(ecx15, 1);
                ebx8->f12 = edi14[ecx15];
                (edi14 + ecx15)[2]();
            }
            edi11 = ebx8->f8;
            esi10 = edi11[esi10 + esi10 * 2];
        }
        goto addr_0x1802e34d_10;
    }
    addr_0x1802e369_11:
    return eax9;
    addr_0x1802e34d_10:
    eax9 = 1;
    goto addr_0x1802e369_11;
    addr_0x1802e346_7:
    eax9 = 0;
    goto addr_0x1802e369_11;
}

void fun_1802e289(int32_t ecx) {
    goto 0x1802e29c;
}

int32_t fun_1802e1dc(struct s666* a1, int32_t a2) {
    int32_t eax3;
    int32_t* v4;

    eax3 = 1;
    if (a1->f4 & 6) {
        *v4 = a2;
        eax3 = 3;
    }
    return eax3;
}

void fun_1802ea89() {
    int32_t ebp1;
    int32_t ebp2;

    *reinterpret_cast<int32_t*>(ebp1 - 36) = 0;
    *reinterpret_cast<uint32_t*>(ebp2 - 4) = 0xffffffff;
}

int32_t fun_1802eb39() {
    return 1;
}

void fun_1802ec39(void** ecx) {
    void** eax2;
    void** esi3;
    void** eax4;
    void** eax5;
    void* ecx6;
    int32_t eax7;
    void** edx8;
    uint32_t ecx9;
    uint32_t* edx10;
    uint32_t eax11;

    eax2 = g18046f00;
    if (eax2) {
        if (reinterpret_cast<signed char>(eax2) >= reinterpret_cast<signed char>(20)) {
            addr_0x1802ec58_3:
            eax4 = fun_1802dfb5(ecx, eax2, 4, esi3);
            g18045ee0 = eax4;
            if (!eax4 && (g18046f00 = reinterpret_cast<void**>(20), eax5 = fun_1802dfb5(4, 20, 4, esi3), g18045ee0 = eax5, !eax5)) {
                fun_1802b7a4(4);
            }
        } else {
            eax2 = reinterpret_cast<void**>(20);
            goto addr_0x1802ec53_6;
        }
    } else {
        eax2 = reinterpret_cast<void**>(0x200);
        goto addr_0x1802ec53_6;
    }
    ecx6 = reinterpret_cast<void*>(0);
    eax7 = 0x180448a8;
    do {
        edx8 = g18045ee0;
        *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(ecx6) + reinterpret_cast<unsigned char>(edx8)) = eax7;
        eax7 = eax7 + 32;
        ecx6 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(ecx6) + 4);
    } while (eax7 < 0x18044b28);
    ecx9 = 0;
    edx10 = reinterpret_cast<uint32_t*>(0x180448b8);
    do {
        eax11 = ecx9 & 31;
        if ((*reinterpret_cast<int32_t**>((reinterpret_cast<int32_t>(ecx9) >> 5) * 4 + 0x18046f20))[eax11 + eax11 * 8] == -1 || !(*reinterpret_cast<int32_t**>((reinterpret_cast<int32_t>(ecx9) >> 5) * 4 + 0x18046f20))[eax11 + eax11 * 8]) {
            *edx10 = 0xffffffff;
        }
        edx10 = edx10 + 8;
        ++ecx9;
    } while (reinterpret_cast<int32_t>(edx10) < 0x18044918);
    return;
    addr_0x1802ec53_6:
    g18046f00 = eax2;
    goto addr_0x1802ec58_3;
}

void fun_1802f38d(int32_t ecx) {
}

void fun_1802f3d9(int32_t ecx) {
}

void fun_1802f515(int32_t ecx) {
}

void fun_1802ff2b(void** ecx) {
    fun_1802b7a4(ecx);
    return;
}

void fun_1803110a() {
}

void* fun_180311d0(int32_t ecx, signed char* a2, signed char* a3) {
    void* eax4;
    signed char* edx5;
    signed char* esi6;

    eax4 = reinterpret_cast<void*>(0);
    edx5 = a3;
    while (*edx5) {
        ++edx5;
        __asm__("bts [esp], eax");
    }
    esi6 = a2;
    do {
        *reinterpret_cast<signed char*>(&eax4) = *esi6;
        if (!*reinterpret_cast<signed char*>(&eax4)) 
            break;
        ++esi6;
    } while (!static_cast<int1_t>(0 >> reinterpret_cast<int32_t>(eax4)));
    goto addr_0x18031201_7;
    addr_0x18031204_8:
    return eax4;
    addr_0x18031201_7:
    eax4 = reinterpret_cast<void*>(esi6 - 1);
    goto addr_0x18031204_8;
}

void fun_18031307() {
}

int16_t fun_180321e0(int32_t a1, uint32_t a2, int32_t a3, uint32_t a4) {
    int32_t eax5;
    int32_t eax6;

    if (a4 | a2) {
        eax5 = a1 * a3;
        return *reinterpret_cast<int16_t*>(&eax5);
    } else {
        eax6 = a1 * a3;
        return *reinterpret_cast<int16_t*>(&eax6);
    }
}

void fun_18032214(int32_t a1) {
    goto a1;
}

uint32_t* fun_18032225(unsigned char* a1, signed char a2) {
    uint32_t eax3;
    uint32_t ebx4;
    uint32_t eax5;
    unsigned char* edx6;
    uint32_t ebx7;
    uint32_t ebx8;
    uint32_t ecx9;
    uint32_t esi10;
    uint32_t eax11;
    uint32_t eax12;
    uint32_t eax13;

    eax3 = 0;
    *reinterpret_cast<signed char*>(&eax3) = a2;
    ebx4 = eax3;
    eax5 = eax3 << 8;
    edx6 = a1;
    if (!(reinterpret_cast<uint32_t>(edx6) & 3)) {
        addr_0x1803225b_2:
        ebx7 = ebx4 | eax5;
        ebx8 = ebx7 << 16 | ebx7;
    } else {
        do {
            ++edx6;
            if (*edx6 == *reinterpret_cast<unsigned char*>(&ebx4)) 
                goto 0x18032220;
            if (!*edx6) 
                goto addr_0x180322a4_5;
        } while (reinterpret_cast<uint32_t>(edx6) & 3);
        goto addr_0x1803225b_2;
    }
    while (1) {
        ecx9 = *edx6 ^ ebx8;
        esi10 = 0x7efefeff + *edx6;
        edx6 = edx6 + 4;
        if ((ecx9 ^ 0xffffffff ^ 0x7efefeff + ecx9) & 0x81010100) {
            eax11 = *reinterpret_cast<uint32_t*>(edx6 - 4);
            if (*reinterpret_cast<signed char*>(&eax11) == *reinterpret_cast<signed char*>(&ebx8)) 
                break;
            if (!*reinterpret_cast<signed char*>(&eax11)) 
                goto addr_0x180322a2_10;
            if (*reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(&eax11) + 1) == *reinterpret_cast<signed char*>(&ebx8)) 
                goto addr_0x180322de_12;
            if (!*reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(&eax11) + 1)) 
                goto addr_0x180322a2_10;
            eax12 = eax11 >> 16;
            if (*reinterpret_cast<signed char*>(&eax12) == *reinterpret_cast<signed char*>(&ebx8)) 
                goto addr_0x180322d7_15;
            if (!*reinterpret_cast<signed char*>(&eax12)) 
                goto addr_0x180322a2_10;
            if (*reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(&eax12) + 1) == *reinterpret_cast<signed char*>(&ebx8)) 
                goto addr_0x180322d0_18;
            if (!*reinterpret_cast<signed char*>(reinterpret_cast<int32_t>(&eax12) + 1)) 
                goto addr_0x180322a2_10;
        } else {
            eax13 = (*edx6 ^ 0xffffffff ^ esi10) & 0x81010100;
            if (!eax13) 
                continue;
            if (eax13 & 0x1010100) 
                goto addr_0x180322a2_10;
            if (!(esi10 & 0x80000000)) 
                goto addr_0x180322a2_10;
        }
    }
    return edx6 - 4;
    addr_0x180322a2_10:
    addr_0x180322a4_5:
    return 0;
    addr_0x180322de_12:
    return edx6 - 3;
    addr_0x180322d7_15:
    return edx6 - 2;
    addr_0x180322d0_18:
    return edx6 - 1;
}

void fun_18032460(int32_t a1) {
    int32_t esi2;

    GetWindowThreadProcessId();
    if (esi2 != *reinterpret_cast<int32_t*>(__return_address())) {
        goto reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 8;
    } else {
        *reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(__return_address()) + 4) = a1;
        goto reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 + 8;
    }
}

void fun_1803303b() {
    signed char* eax1;
    signed char* eax2;
    signed char al3;
    signed char* eax4;
    signed char* eax5;
    signed char al6;
    signed char* eax7;
    signed char* eax8;
    signed char al9;
    signed char* eax10;
    signed char* eax11;
    signed char al12;
    signed char* eax13;
    signed char* eax14;
    signed char al15;
    signed char* eax16;
    signed char* eax17;
    signed char al18;
    signed char* eax19;
    signed char* eax20;
    signed char al21;
    signed char* eax22;
    signed char* eax23;
    signed char al24;
    signed char* eax25;
    signed char* eax26;
    signed char al27;
    signed char* eax28;
    signed char* eax29;
    signed char al30;
    signed char* eax31;
    signed char* eax32;
    signed char al33;
    signed char* eax34;
    signed char* eax35;
    signed char al36;
    signed char* eax37;
    signed char* eax38;
    signed char al39;
    signed char* eax40;
    signed char* eax41;
    signed char al42;
    signed char* eax43;
    signed char* eax44;
    signed char al45;
    signed char* eax46;
    signed char* eax47;
    signed char al48;
    signed char* eax49;
    signed char* eax50;
    signed char al51;
    signed char* eax52;
    signed char* eax53;
    signed char al54;
    signed char* eax55;
    signed char* eax56;
    signed char al57;
    signed char* eax58;
    signed char* eax59;
    signed char al60;
    signed char* eax61;
    signed char* eax62;
    signed char al63;
    signed char* eax64;
    signed char* eax65;
    signed char al66;
    signed char* eax67;
    signed char* eax68;
    signed char al69;
    signed char* eax70;
    signed char* eax71;
    signed char al72;
    signed char* eax73;
    signed char* eax74;
    signed char al75;
    signed char* eax76;
    signed char* eax77;
    signed char al78;
    signed char* eax79;
    signed char* eax80;
    signed char al81;
    signed char* eax82;
    signed char* eax83;
    signed char al84;
    signed char* eax85;
    signed char* eax86;
    signed char al87;
    signed char* eax88;
    signed char* eax89;
    signed char al90;
    signed char* eax91;
    signed char* eax92;
    signed char al93;
    signed char* eax94;
    signed char* eax95;
    signed char al96;
    signed char* eax97;
    signed char* eax98;
    signed char al99;
    signed char* eax100;
    signed char* eax101;
    signed char al102;
    signed char* eax103;
    signed char* eax104;
    signed char al105;
    signed char* eax106;
    signed char* eax107;
    signed char al108;
    signed char* eax109;
    signed char* eax110;
    signed char al111;
    signed char* eax112;
    signed char* eax113;
    signed char al114;
    signed char* eax115;
    signed char* eax116;
    signed char al117;
    signed char* eax118;
    signed char* eax119;
    signed char al120;
    signed char* eax121;
    signed char* eax122;
    signed char al123;
    signed char* eax124;
    signed char* eax125;
    signed char al126;
    signed char* eax127;
    signed char* eax128;
    signed char al129;
    signed char* eax130;
    signed char* eax131;
    signed char al132;
    signed char* eax133;
    signed char* eax134;
    signed char al135;
    signed char* eax136;
    signed char* eax137;
    signed char al138;
    signed char* eax139;
    signed char* eax140;
    signed char al141;
    signed char* eax142;
    signed char* eax143;
    signed char al144;
    signed char* eax145;
    signed char* eax146;
    signed char al147;
    signed char* eax148;
    signed char* eax149;
    signed char al150;
    signed char* eax151;
    signed char* eax152;
    signed char al153;
    signed char* eax154;
    signed char* eax155;
    signed char al156;
    signed char* eax157;
    signed char* eax158;
    signed char al159;
    signed char* eax160;
    signed char* eax161;
    signed char al162;
    signed char* eax163;
    signed char* eax164;
    signed char al165;
    signed char* eax166;
    signed char* eax167;
    signed char al168;
    signed char* eax169;
    signed char* eax170;
    signed char al171;
    signed char* eax172;
    signed char* eax173;
    signed char al174;
    signed char* eax175;
    signed char* eax176;
    signed char al177;
    signed char* eax178;
    signed char* eax179;
    signed char al180;
    signed char* eax181;
    signed char* eax182;
    signed char al183;
    signed char* eax184;
    signed char* eax185;
    signed char al186;
    signed char* eax187;
    signed char* eax188;
    signed char al189;
    signed char* eax190;
    signed char* eax191;
    signed char al192;
    signed char* eax193;
    signed char* eax194;
    signed char al195;
    signed char* eax196;
    signed char* eax197;
    signed char al198;
    signed char* eax199;
    signed char* eax200;
    signed char al201;
    signed char* eax202;
    signed char* eax203;
    signed char al204;
    signed char* eax205;
    signed char* eax206;
    signed char al207;
    signed char* eax208;
    signed char* eax209;
    signed char al210;
    signed char* eax211;
    signed char* eax212;
    signed char al213;
    signed char* eax214;
    signed char* eax215;
    signed char al216;
    signed char* eax217;
    signed char* eax218;
    signed char al219;
    signed char* eax220;
    signed char* eax221;
    signed char al222;
    signed char* eax223;
    signed char* eax224;
    signed char al225;
    signed char* eax226;
    signed char* eax227;
    signed char al228;
    signed char* eax229;
    signed char* eax230;
    signed char al231;
    signed char* eax232;
    signed char* eax233;
    signed char al234;
    signed char* eax235;
    signed char* eax236;
    signed char al237;
    signed char* eax238;
    signed char* eax239;
    signed char al240;
    signed char* eax241;
    signed char* eax242;
    signed char al243;
    signed char* eax244;
    signed char* eax245;
    signed char al246;
    signed char* eax247;
    signed char* eax248;
    signed char al249;
    signed char* eax250;
    signed char* eax251;
    signed char al252;
    signed char* eax253;
    signed char* eax254;
    signed char al255;
    signed char* eax256;
    signed char* eax257;
    signed char al258;
    signed char* eax259;
    signed char* eax260;
    signed char al261;
    signed char* eax262;
    signed char* eax263;
    signed char al264;
    signed char* eax265;
    signed char* eax266;
    signed char al267;
    signed char* eax268;
    signed char* eax269;
    signed char al270;
    signed char* eax271;
    signed char* eax272;
    signed char al273;
    signed char* eax274;
    signed char* eax275;
    signed char al276;
    signed char* eax277;
    signed char* eax278;
    signed char al279;
    signed char* eax280;
    signed char* eax281;
    signed char al282;
    signed char* eax283;
    signed char* eax284;
    signed char al285;
    signed char* eax286;
    signed char* eax287;
    signed char al288;
    signed char* eax289;
    signed char* eax290;
    signed char al291;
    signed char* eax292;
    signed char* eax293;
    signed char al294;
    signed char* eax295;
    signed char* eax296;
    signed char al297;
    signed char* eax298;
    signed char* eax299;
    signed char al300;
    signed char* eax301;
    signed char* eax302;
    signed char al303;
    signed char* eax304;
    signed char* eax305;
    signed char al306;
    signed char* eax307;
    signed char* eax308;
    signed char al309;
    signed char* eax310;
    signed char* eax311;
    signed char al312;
    signed char* eax313;
    signed char* eax314;
    signed char al315;
    signed char* eax316;
    signed char* eax317;
    signed char al318;
    signed char* eax319;
    signed char* eax320;
    signed char al321;
    signed char* eax322;
    signed char* eax323;
    signed char al324;
    signed char* eax325;
    signed char* eax326;
    signed char al327;
    signed char* eax328;
    signed char* eax329;
    signed char al330;
    signed char* eax331;
    signed char* eax332;
    signed char al333;
    signed char* eax334;
    signed char* eax335;
    signed char al336;
    signed char* eax337;
    signed char* eax338;
    signed char al339;
    signed char* eax340;
    signed char* eax341;
    signed char al342;
    signed char* eax343;
    signed char* eax344;
    signed char al345;
    signed char* eax346;
    signed char* eax347;
    signed char al348;
    signed char* eax349;
    signed char* eax350;
    signed char al351;
    signed char* eax352;
    signed char* eax353;
    signed char al354;
    signed char* eax355;
    signed char* eax356;
    signed char al357;
    signed char* eax358;
    signed char* eax359;
    signed char al360;
    signed char* eax361;
    signed char* eax362;
    signed char al363;
    signed char* eax364;
    signed char* eax365;
    signed char al366;
    signed char* eax367;
    signed char* eax368;
    signed char al369;
    signed char* eax370;
    signed char* eax371;
    signed char al372;
    signed char* eax373;
    signed char* eax374;
    signed char al375;
    signed char* eax376;
    signed char* eax377;
    signed char al378;
    signed char* eax379;
    signed char* eax380;
    signed char al381;
    signed char* eax382;
    signed char* eax383;
    signed char al384;
    signed char* eax385;
    signed char* eax386;
    signed char al387;
    signed char* eax388;
    signed char* eax389;
    signed char al390;
    signed char* eax391;
    signed char* eax392;
    signed char al393;
    signed char* eax394;
    signed char* eax395;
    signed char al396;
    signed char* eax397;
    signed char* eax398;
    signed char al399;
    signed char* eax400;
    signed char* eax401;
    signed char al402;
    signed char* eax403;
    signed char* eax404;
    signed char al405;
    signed char* eax406;
    signed char* eax407;
    signed char al408;
    signed char* eax409;
    signed char* eax410;
    signed char al411;
    signed char* eax412;
    signed char* eax413;
    signed char al414;
    signed char* eax415;
    signed char* eax416;
    signed char al417;
    signed char* eax418;
    signed char* eax419;
    signed char al420;
    signed char* eax421;
    signed char* eax422;
    signed char al423;
    signed char* eax424;
    signed char* eax425;
    signed char al426;
    signed char* eax427;
    signed char* eax428;
    signed char al429;
    signed char* eax430;
    signed char* eax431;
    signed char al432;
    signed char* eax433;
    signed char* eax434;
    signed char al435;
    signed char* eax436;
    signed char* eax437;
    signed char al438;
    signed char* eax439;
    signed char* eax440;
    signed char al441;
    signed char* eax442;
    signed char* eax443;
    signed char al444;
    signed char* eax445;
    signed char* eax446;
    signed char al447;
    signed char* eax448;
    signed char* eax449;
    signed char al450;
    signed char* eax451;
    signed char* eax452;
    signed char al453;
    signed char* eax454;
    signed char* eax455;
    signed char al456;
    signed char* eax457;
    signed char* eax458;
    signed char al459;
    signed char* eax460;
    signed char* eax461;
    signed char al462;
    signed char* eax463;
    signed char* eax464;
    signed char al465;
    signed char* eax466;
    signed char* eax467;
    signed char al468;
    signed char* eax469;
    signed char* eax470;
    signed char al471;
    signed char* eax472;
    signed char* eax473;
    signed char al474;
    signed char* eax475;
    signed char* eax476;
    signed char al477;
    signed char* eax478;
    signed char* eax479;
    signed char al480;
    signed char* eax481;
    signed char* eax482;
    signed char al483;
    signed char* eax484;
    signed char* eax485;
    signed char al486;
    signed char* eax487;
    signed char* eax488;
    signed char al489;
    signed char* eax490;
    signed char* eax491;
    signed char al492;
    signed char* eax493;
    signed char* eax494;
    signed char al495;
    signed char* eax496;
    signed char* eax497;
    signed char al498;
    signed char* eax499;
    signed char* eax500;
    signed char al501;
    signed char* eax502;
    signed char* eax503;
    signed char al504;
    signed char* eax505;
    signed char* eax506;
    signed char al507;
    signed char* eax508;
    signed char* eax509;
    signed char al510;
    signed char* eax511;
    signed char* eax512;
    signed char al513;
    signed char* eax514;
    signed char* eax515;
    signed char al516;
    signed char* eax517;
    signed char* eax518;
    signed char al519;
    signed char* eax520;
    signed char* eax521;
    signed char al522;
    signed char* eax523;
    signed char* eax524;
    signed char al525;
    signed char* eax526;
    signed char* eax527;
    signed char al528;
    signed char* eax529;
    signed char* eax530;
    signed char al531;
    signed char* eax532;
    signed char* eax533;
    signed char al534;
    signed char* eax535;
    signed char* eax536;
    signed char al537;
    signed char* eax538;
    signed char* eax539;
    signed char al540;
    signed char* eax541;
    signed char* eax542;
    signed char al543;
    signed char* eax544;
    signed char* eax545;
    signed char al546;
    signed char* eax547;
    signed char* eax548;
    signed char al549;
    signed char* eax550;
    signed char* eax551;
    signed char al552;
    signed char* eax553;
    signed char* eax554;
    signed char al555;
    signed char* eax556;
    signed char* eax557;
    signed char al558;
    signed char* eax559;
    signed char* eax560;
    signed char al561;
    signed char* eax562;
    signed char* eax563;
    signed char al564;
    signed char* eax565;
    signed char* eax566;
    signed char al567;
    signed char* eax568;
    signed char* eax569;
    signed char al570;
    signed char* eax571;
    signed char* eax572;
    signed char al573;
    signed char* eax574;
    signed char* eax575;
    signed char al576;
    signed char* eax577;
    signed char* eax578;
    signed char al579;
    signed char* eax580;
    signed char* eax581;
    signed char al582;
    signed char* eax583;
    signed char* eax584;
    signed char al585;
    signed char* eax586;
    signed char* eax587;
    signed char al588;
    signed char* eax589;
    signed char* eax590;
    signed char al591;
    signed char* eax592;
    signed char* eax593;
    signed char al594;
    signed char* eax595;
    signed char* eax596;
    signed char al597;
    signed char* eax598;
    signed char* eax599;
    signed char al600;
    signed char* eax601;
    signed char* eax602;
    signed char al603;
    signed char* eax604;
    signed char* eax605;
    signed char al606;
    signed char* eax607;
    signed char* eax608;
    signed char al609;
    signed char* eax610;
    signed char* eax611;
    signed char al612;
    signed char* eax613;
    signed char* eax614;
    signed char al615;
    signed char* eax616;
    signed char* eax617;
    signed char al618;
    signed char* eax619;
    signed char* eax620;
    signed char al621;
    signed char* eax622;
    signed char* eax623;
    signed char al624;
    signed char* eax625;
    signed char* eax626;
    signed char al627;
    signed char* eax628;
    signed char* eax629;
    signed char al630;
    signed char* eax631;
    signed char* eax632;
    signed char al633;
    signed char* eax634;
    signed char* eax635;
    signed char al636;
    signed char* eax637;
    signed char* eax638;
    signed char al639;
    signed char* eax640;
    signed char* eax641;
    signed char al642;
    signed char* eax643;
    signed char* eax644;
    signed char al645;
    signed char* eax646;
    signed char* eax647;
    signed char al648;
    signed char* eax649;
    signed char* eax650;
    signed char al651;
    signed char* eax652;
    signed char* eax653;
    signed char al654;
    signed char* eax655;
    signed char* eax656;
    signed char al657;
    signed char* eax658;
    signed char* eax659;
    signed char al660;
    signed char* eax661;
    signed char* eax662;
    signed char al663;
    signed char* eax664;
    signed char* eax665;
    signed char al666;
    signed char* eax667;
    signed char* eax668;
    signed char al669;
    signed char* eax670;
    signed char* eax671;
    signed char al672;
    signed char* eax673;
    signed char* eax674;
    signed char al675;
    signed char* eax676;
    signed char* eax677;
    signed char al678;
    signed char* eax679;
    signed char* eax680;
    signed char al681;
    signed char* eax682;
    signed char* eax683;
    signed char al684;
    signed char* eax685;
    signed char* eax686;
    signed char al687;
    signed char* eax688;
    signed char* eax689;
    signed char al690;
    signed char* eax691;
    signed char* eax692;
    signed char al693;
    signed char* eax694;
    signed char* eax695;
    signed char al696;
    signed char* eax697;
    signed char* eax698;
    signed char al699;
    signed char* eax700;
    signed char* eax701;
    signed char al702;
    signed char* eax703;
    signed char* eax704;
    signed char al705;
    signed char* eax706;
    signed char* eax707;
    signed char al708;
    signed char* eax709;
    signed char* eax710;
    signed char al711;
    signed char* eax712;
    signed char* eax713;
    signed char al714;
    signed char* eax715;
    signed char* eax716;
    signed char al717;
    signed char* eax718;
    signed char* eax719;
    signed char al720;
    signed char* eax721;
    signed char* eax722;
    signed char al723;
    signed char* eax724;
    signed char* eax725;
    signed char al726;
    signed char* eax727;
    signed char* eax728;
    signed char al729;
    signed char* eax730;
    signed char* eax731;
    signed char al732;
    signed char* eax733;
    signed char* eax734;
    signed char al735;
    signed char* eax736;
    signed char* eax737;
    signed char al738;
    signed char* eax739;
    signed char* eax740;
    signed char al741;
    signed char* eax742;
    signed char* eax743;
    signed char al744;
    signed char* eax745;
    signed char* eax746;
    signed char al747;
    signed char* eax748;
    signed char* eax749;
    signed char al750;
    signed char* eax751;
    signed char* eax752;
    signed char al753;
    signed char* eax754;
    signed char* eax755;
    signed char al756;
    signed char* eax757;
    signed char* eax758;
    signed char al759;
    signed char* eax760;
    signed char* eax761;
    signed char al762;
    signed char* eax763;
    signed char* eax764;
    signed char al765;
    signed char* eax766;
    signed char* eax767;
    signed char al768;
    signed char* eax769;
    signed char* eax770;
    signed char al771;
    signed char* eax772;
    signed char* eax773;
    signed char al774;
    signed char* eax775;
    signed char* eax776;
    signed char al777;
    signed char* eax778;
    signed char* eax779;
    signed char al780;
    signed char* eax781;
    signed char* eax782;
    signed char al783;
    signed char* eax784;
    signed char* eax785;
    signed char al786;
    signed char* eax787;
    signed char* eax788;
    signed char al789;
    signed char* eax790;
    signed char* eax791;
    signed char al792;
    signed char* eax793;
    signed char* eax794;
    signed char al795;
    signed char* eax796;
    signed char* eax797;
    signed char al798;
    signed char* eax799;
    signed char* eax800;
    signed char al801;
    signed char* eax802;
    signed char* eax803;
    signed char al804;
    signed char* eax805;
    signed char* eax806;
    signed char al807;
    signed char* eax808;
    signed char* eax809;
    signed char al810;
    signed char* eax811;
    signed char* eax812;
    signed char al813;
    signed char* eax814;
    signed char* eax815;
    signed char al816;
    signed char* eax817;
    signed char* eax818;
    signed char al819;
    signed char* eax820;
    signed char* eax821;
    signed char al822;
    signed char* eax823;
    signed char* eax824;
    signed char al825;
    signed char* eax826;
    signed char* eax827;
    signed char al828;
    signed char* eax829;
    signed char* eax830;
    signed char al831;
    signed char* eax832;
    signed char* eax833;
    signed char al834;
    signed char* eax835;
    signed char* eax836;
    signed char al837;
    signed char* eax838;
    signed char* eax839;
    signed char al840;
    signed char* eax841;
    signed char* eax842;
    signed char al843;
    signed char* eax844;
    signed char* eax845;
    signed char al846;
    signed char* eax847;
    signed char* eax848;
    signed char al849;
    signed char* eax850;
    signed char* eax851;
    signed char al852;
    signed char* eax853;
    signed char* eax854;
    signed char al855;
    signed char* eax856;
    signed char* eax857;
    signed char al858;
    signed char* eax859;
    signed char* eax860;
    signed char al861;
    signed char* eax862;
    signed char* eax863;
    signed char al864;
    signed char* eax865;
    signed char* eax866;
    signed char al867;
    signed char* eax868;
    signed char* eax869;
    signed char al870;
    signed char* eax871;
    signed char* eax872;
    signed char al873;
    signed char* eax874;
    signed char* eax875;
    signed char al876;
    signed char* eax877;
    signed char* eax878;
    signed char al879;
    signed char* eax880;
    signed char* eax881;
    signed char al882;
    signed char* eax883;
    signed char* eax884;
    signed char al885;
    signed char* eax886;
    signed char* eax887;
    signed char al888;
    signed char* eax889;
    signed char* eax890;
    signed char al891;
    signed char* eax892;
    signed char* eax893;
    signed char al894;
    signed char* eax895;
    signed char* eax896;
    signed char al897;
    signed char* eax898;
    signed char* eax899;
    signed char al900;
    signed char* eax901;
    signed char* eax902;
    signed char al903;
    signed char* eax904;
    signed char* eax905;
    signed char al906;
    signed char* eax907;
    signed char* eax908;
    signed char al909;
    signed char* eax910;
    signed char* eax911;
    signed char al912;
    signed char* eax913;
    signed char* eax914;
    signed char al915;
    signed char* eax916;
    signed char* eax917;
    signed char al918;
    signed char* eax919;
    signed char* eax920;
    signed char al921;
    signed char* eax922;
    signed char* eax923;
    signed char al924;
    signed char* eax925;
    signed char* eax926;
    signed char al927;
    signed char* eax928;
    signed char* eax929;
    signed char al930;
    signed char* eax931;
    signed char* eax932;
    signed char al933;
    signed char* eax934;
    signed char* eax935;
    signed char al936;
    signed char* eax937;
    signed char* eax938;
    signed char al939;
    signed char* eax940;
    signed char* eax941;
    signed char al942;
    signed char* eax943;
    signed char* eax944;
    signed char al945;
    signed char* eax946;
    signed char* eax947;
    signed char al948;
    signed char* eax949;
    signed char* eax950;
    signed char al951;
    signed char* eax952;
    signed char* eax953;
    signed char al954;
    signed char* eax955;
    signed char* eax956;
    signed char al957;
    signed char* eax958;
    signed char* eax959;
    signed char al960;
    signed char* eax961;
    signed char* eax962;
    signed char al963;
    signed char* eax964;
    signed char* eax965;
    signed char al966;
    signed char* eax967;
    signed char* eax968;
    signed char al969;
    signed char* eax970;
    signed char* eax971;
    signed char al972;
    signed char* eax973;
    signed char* eax974;
    signed char al975;
    signed char* eax976;
    signed char* eax977;
    signed char al978;
    signed char* eax979;
    signed char* eax980;
    signed char al981;
    signed char* eax982;
    signed char* eax983;
    signed char al984;
    signed char* eax985;
    signed char* eax986;
    signed char al987;
    signed char* eax988;
    signed char* eax989;
    signed char al990;
    signed char* eax991;
    signed char* eax992;
    signed char al993;
    signed char* eax994;
    signed char* eax995;
    signed char al996;
    signed char* eax997;
    signed char* eax998;
    signed char al999;
    signed char* eax1000;
    signed char* eax1001;
    signed char al1002;
    signed char* eax1003;
    signed char* eax1004;
    signed char al1005;
    signed char* eax1006;
    signed char* eax1007;
    signed char al1008;
    signed char* eax1009;
    signed char* eax1010;
    signed char al1011;
    signed char* eax1012;
    signed char* eax1013;
    signed char al1014;
    signed char* eax1015;
    signed char* eax1016;
    signed char al1017;
    signed char* eax1018;
    signed char* eax1019;
    signed char al1020;
    signed char* eax1021;
    signed char* eax1022;
    signed char al1023;
    signed char* eax1024;
    signed char* eax1025;
    signed char al1026;
    signed char* eax1027;
    signed char* eax1028;
    signed char al1029;
    signed char* eax1030;
    signed char* eax1031;
    signed char al1032;
    signed char* eax1033;
    signed char* eax1034;
    signed char al1035;
    signed char* eax1036;
    signed char* eax1037;
    signed char al1038;
    signed char* eax1039;
    signed char* eax1040;
    signed char al1041;
    signed char* eax1042;
    signed char* eax1043;
    signed char al1044;
    signed char* eax1045;
    signed char* eax1046;
    signed char al1047;
    signed char* eax1048;
    signed char* eax1049;
    signed char al1050;
    signed char* eax1051;
    signed char* eax1052;
    signed char al1053;
    signed char* eax1054;
    signed char* eax1055;
    signed char al1056;
    signed char* eax1057;
    signed char* eax1058;
    signed char al1059;
    signed char* eax1060;
    signed char* eax1061;
    signed char al1062;
    signed char* eax1063;
    signed char* eax1064;
    signed char al1065;
    signed char* eax1066;
    signed char* eax1067;
    signed char al1068;
    signed char* eax1069;
    signed char* eax1070;
    signed char al1071;
    signed char* eax1072;
    signed char* eax1073;
    signed char al1074;
    signed char* eax1075;
    signed char* eax1076;
    signed char al1077;
    signed char* eax1078;
    signed char* eax1079;
    signed char al1080;
    signed char* eax1081;
    signed char* eax1082;
    signed char al1083;
    signed char* eax1084;
    signed char* eax1085;
    signed char al1086;
    signed char* eax1087;
    signed char* eax1088;
    signed char al1089;
    signed char* eax1090;
    signed char* eax1091;
    signed char al1092;
    signed char* eax1093;
    signed char* eax1094;
    signed char al1095;
    signed char* eax1096;
    signed char* eax1097;
    signed char al1098;
    signed char* eax1099;
    signed char* eax1100;
    signed char al1101;
    signed char* eax1102;
    signed char* eax1103;
    signed char al1104;
    signed char* eax1105;
    signed char* eax1106;
    signed char al1107;
    signed char* eax1108;
    signed char* eax1109;
    signed char al1110;
    signed char* eax1111;
    signed char* eax1112;
    signed char al1113;
    signed char* eax1114;
    signed char* eax1115;
    signed char al1116;
    signed char* eax1117;
    signed char* eax1118;
    signed char al1119;
    signed char* eax1120;
    signed char* eax1121;
    signed char al1122;
    signed char* eax1123;
    signed char* eax1124;
    signed char al1125;
    signed char* eax1126;
    signed char* eax1127;
    signed char al1128;
    signed char* eax1129;
    signed char* eax1130;
    signed char al1131;
    signed char* eax1132;
    signed char* eax1133;
    signed char al1134;
    signed char* eax1135;
    signed char* eax1136;
    signed char al1137;
    signed char* eax1138;
    signed char* eax1139;
    signed char al1140;
    signed char* eax1141;
    signed char* eax1142;
    signed char al1143;
    signed char* eax1144;
    signed char* eax1145;
    signed char al1146;
    signed char* eax1147;
    signed char* eax1148;
    signed char al1149;
    signed char* eax1150;
    signed char* eax1151;
    signed char al1152;
    signed char* eax1153;
    signed char* eax1154;
    signed char al1155;
    signed char* eax1156;
    signed char* eax1157;
    signed char al1158;
    signed char* eax1159;
    signed char* eax1160;
    signed char al1161;
    signed char* eax1162;
    signed char* eax1163;
    signed char al1164;
    signed char* eax1165;
    signed char* eax1166;
    signed char al1167;
    signed char* eax1168;
    signed char* eax1169;
    signed char al1170;
    signed char* eax1171;
    signed char* eax1172;
    signed char al1173;
    signed char* eax1174;
    signed char* eax1175;
    signed char al1176;
    signed char* eax1177;
    signed char* eax1178;
    signed char al1179;
    signed char* eax1180;
    signed char* eax1181;
    signed char al1182;
    signed char* eax1183;
    signed char* eax1184;
    signed char al1185;
    signed char* eax1186;
    signed char* eax1187;
    signed char al1188;
    signed char* eax1189;
    signed char* eax1190;
    signed char al1191;
    signed char* eax1192;
    signed char* eax1193;
    signed char al1194;
    signed char* eax1195;
    signed char* eax1196;
    signed char al1197;
    signed char* eax1198;
    signed char* eax1199;
    signed char al1200;
    signed char* eax1201;
    signed char* eax1202;
    signed char al1203;
    signed char* eax1204;
    signed char* eax1205;
    signed char al1206;
    signed char* eax1207;
    signed char* eax1208;
    signed char al1209;
    signed char* eax1210;
    signed char* eax1211;
    signed char al1212;
    signed char* eax1213;
    signed char* eax1214;
    signed char al1215;
    signed char* eax1216;
    signed char* eax1217;
    signed char al1218;
    signed char* eax1219;
    signed char* eax1220;
    signed char al1221;
    signed char* eax1222;
    signed char* eax1223;
    signed char al1224;
    signed char* eax1225;
    signed char* eax1226;
    signed char al1227;
    signed char* eax1228;
    signed char* eax1229;
    signed char al1230;
    signed char* eax1231;
    signed char* eax1232;
    signed char al1233;
    signed char* eax1234;
    signed char* eax1235;
    signed char al1236;
    signed char* eax1237;
    signed char* eax1238;
    signed char al1239;
    signed char* eax1240;
    signed char* eax1241;
    signed char al1242;
    signed char* eax1243;
    signed char* eax1244;
    signed char al1245;
    signed char* eax1246;
    signed char* eax1247;
    signed char al1248;
    signed char* eax1249;
    signed char* eax1250;
    signed char al1251;
    signed char* eax1252;
    signed char* eax1253;
    signed char al1254;
    signed char* eax1255;
    signed char* eax1256;
    signed char al1257;
    signed char* eax1258;
    signed char* eax1259;
    signed char al1260;
    signed char* eax1261;
    signed char* eax1262;
    signed char al1263;
    signed char* eax1264;
    signed char* eax1265;
    signed char al1266;
    signed char* eax1267;
    signed char* eax1268;
    signed char al1269;
    signed char* eax1270;
    signed char* eax1271;
    signed char al1272;
    signed char* eax1273;
    signed char* eax1274;
    signed char al1275;
    signed char* eax1276;
    signed char* eax1277;
    signed char al1278;
    signed char* eax1279;
    signed char* eax1280;
    signed char al1281;
    signed char* eax1282;
    signed char* eax1283;
    signed char al1284;
    signed char* eax1285;
    signed char* eax1286;
    signed char al1287;
    signed char* eax1288;
    signed char* eax1289;
    signed char al1290;
    signed char* eax1291;
    signed char* eax1292;
    signed char al1293;
    signed char* eax1294;
    signed char* eax1295;
    signed char al1296;
    signed char* eax1297;
    signed char* eax1298;
    signed char al1299;
    signed char* eax1300;
    signed char* eax1301;
    signed char al1302;
    signed char* eax1303;
    signed char* eax1304;
    signed char al1305;
    signed char* eax1306;
    signed char* eax1307;
    signed char al1308;
    signed char* eax1309;
    signed char* eax1310;
    signed char al1311;
    signed char* eax1312;
    signed char* eax1313;
    signed char al1314;
    signed char* eax1315;
    signed char* eax1316;
    signed char al1317;
    signed char* eax1318;
    signed char* eax1319;
    signed char al1320;
    signed char* eax1321;
    signed char* eax1322;
    signed char al1323;
    signed char* eax1324;
    signed char* eax1325;
    signed char al1326;
    signed char* eax1327;
    signed char* eax1328;
    signed char al1329;
    signed char* eax1330;
    signed char* eax1331;
    signed char al1332;
    signed char* eax1333;
    signed char* eax1334;
    signed char al1335;
    signed char* eax1336;
    signed char* eax1337;
    signed char al1338;
    signed char* eax1339;
    signed char* eax1340;
    signed char al1341;
    signed char* eax1342;
    signed char* eax1343;
    signed char al1344;
    signed char* eax1345;
    signed char* eax1346;
    signed char al1347;
    signed char* eax1348;
    signed char* eax1349;
    signed char al1350;
    signed char* eax1351;
    signed char* eax1352;
    signed char al1353;
    signed char* eax1354;
    signed char* eax1355;
    signed char al1356;
    signed char* eax1357;
    signed char* eax1358;
    signed char al1359;
    signed char* eax1360;
    signed char* eax1361;
    signed char al1362;
    signed char* eax1363;
    signed char* eax1364;
    signed char al1365;
    signed char* eax1366;
    signed char* eax1367;
    signed char al1368;
    signed char* eax1369;
    signed char* eax1370;
    signed char al1371;
    signed char* eax1372;
    signed char* eax1373;
    signed char al1374;
    signed char* eax1375;
    signed char* eax1376;
    signed char al1377;
    signed char* eax1378;
    signed char* eax1379;
    signed char al1380;
    signed char* eax1381;
    signed char* eax1382;
    signed char al1383;
    signed char* eax1384;
    signed char* eax1385;
    signed char al1386;
    signed char* eax1387;
    signed char* eax1388;
    signed char al1389;
    signed char* eax1390;
    signed char* eax1391;
    signed char al1392;
    signed char* eax1393;
    signed char* eax1394;
    signed char al1395;
    signed char* eax1396;
    signed char* eax1397;
    signed char al1398;
    signed char* eax1399;
    signed char* eax1400;
    signed char al1401;
    signed char* eax1402;
    signed char* eax1403;
    signed char al1404;
    signed char* eax1405;
    signed char* eax1406;
    signed char al1407;
    signed char* eax1408;
    signed char* eax1409;
    signed char al1410;
    signed char* eax1411;
    signed char* eax1412;
    signed char al1413;
    signed char* eax1414;
    signed char* eax1415;
    signed char al1416;
    signed char* eax1417;
    signed char* eax1418;
    signed char al1419;
    signed char* eax1420;
    signed char* eax1421;
    signed char al1422;
    signed char* eax1423;
    signed char* eax1424;
    signed char al1425;
    signed char* eax1426;
    signed char* eax1427;
    signed char al1428;
    signed char* eax1429;
    signed char* eax1430;
    signed char al1431;
    signed char* eax1432;
    signed char* eax1433;
    signed char al1434;
    signed char* eax1435;
    signed char* eax1436;
    signed char al1437;
    signed char* eax1438;
    signed char* eax1439;
    signed char al1440;
    signed char* eax1441;
    signed char* eax1442;
    signed char al1443;
    signed char* eax1444;
    signed char* eax1445;
    signed char al1446;
    signed char* eax1447;
    signed char* eax1448;
    signed char al1449;
    signed char* eax1450;
    signed char* eax1451;
    signed char al1452;
    signed char* eax1453;
    signed char* eax1454;
    signed char al1455;
    signed char* eax1456;
    signed char* eax1457;
    signed char al1458;
    signed char* eax1459;
    signed char* eax1460;
    signed char al1461;
    signed char* eax1462;
    signed char* eax1463;
    signed char al1464;
    signed char* eax1465;
    signed char* eax1466;
    signed char al1467;
    signed char* eax1468;
    signed char* eax1469;
    signed char al1470;
    signed char* eax1471;
    signed char* eax1472;
    signed char al1473;
    signed char* eax1474;
    signed char* eax1475;
    signed char al1476;
    signed char* eax1477;
    signed char* eax1478;
    signed char al1479;
    signed char* eax1480;
    signed char* eax1481;
    signed char al1482;
    signed char* eax1483;
    signed char* eax1484;
    signed char al1485;
    signed char* eax1486;
    signed char* eax1487;
    signed char al1488;
    signed char* eax1489;
    signed char* eax1490;
    signed char al1491;
    signed char* eax1492;
    signed char* eax1493;
    signed char al1494;
    signed char* eax1495;
    signed char* eax1496;
    signed char al1497;
    signed char* eax1498;
    signed char* eax1499;
    signed char al1500;
    signed char* eax1501;
    signed char* eax1502;
    signed char al1503;
    signed char* eax1504;
    signed char* eax1505;
    signed char al1506;
    signed char* eax1507;
    signed char* eax1508;
    signed char al1509;
    signed char* eax1510;
    signed char* eax1511;
    signed char al1512;
    signed char* eax1513;
    signed char* eax1514;
    signed char al1515;
    signed char* eax1516;
    signed char* eax1517;
    signed char al1518;
    signed char* eax1519;
    signed char* eax1520;
    signed char al1521;
    signed char* eax1522;
    signed char* eax1523;
    signed char al1524;
    signed char* eax1525;
    signed char* eax1526;
    signed char al1527;
    signed char* eax1528;
    signed char* eax1529;
    signed char al1530;
    signed char* eax1531;
    signed char* eax1532;
    signed char al1533;
    signed char* eax1534;
    signed char* eax1535;
    signed char al1536;
    signed char* eax1537;
    signed char* eax1538;
    signed char al1539;
    signed char* eax1540;
    signed char* eax1541;
    signed char al1542;
    signed char* eax1543;
    signed char* eax1544;
    signed char al1545;
    signed char* eax1546;
    signed char* eax1547;
    signed char al1548;
    signed char* eax1549;
    signed char* eax1550;
    signed char al1551;
    signed char* eax1552;
    signed char* eax1553;
    signed char al1554;
    signed char* eax1555;
    signed char* eax1556;
    signed char al1557;
    signed char* eax1558;
    signed char* eax1559;
    signed char al1560;
    signed char* eax1561;
    signed char* eax1562;
    signed char al1563;
    signed char* eax1564;
    signed char* eax1565;
    signed char al1566;
    signed char* eax1567;
    signed char* eax1568;
    signed char al1569;
    signed char* eax1570;
    signed char* eax1571;
    signed char al1572;
    signed char* eax1573;
    signed char* eax1574;
    signed char al1575;
    signed char* eax1576;
    signed char* eax1577;
    signed char al1578;
    signed char* eax1579;
    signed char* eax1580;
    signed char al1581;
    signed char* eax1582;
    signed char* eax1583;
    signed char al1584;
    signed char* eax1585;
    signed char* eax1586;
    signed char al1587;
    signed char* eax1588;
    signed char* eax1589;
    signed char al1590;
    signed char* eax1591;
    signed char* eax1592;
    signed char al1593;
    signed char* eax1594;
    signed char* eax1595;
    signed char al1596;
    signed char* eax1597;
    signed char* eax1598;
    signed char al1599;
    signed char* eax1600;
    signed char* eax1601;
    signed char al1602;
    signed char* eax1603;
    signed char* eax1604;
    signed char al1605;
    signed char* eax1606;
    signed char* eax1607;
    signed char al1608;
    signed char* eax1609;
    signed char* eax1610;
    signed char al1611;
    signed char* eax1612;
    signed char* eax1613;
    signed char al1614;
    signed char* eax1615;
    signed char* eax1616;
    signed char al1617;
    signed char* eax1618;
    signed char* eax1619;
    signed char al1620;
    signed char* eax1621;
    signed char* eax1622;
    signed char al1623;
    signed char* eax1624;
    signed char* eax1625;
    signed char al1626;
    signed char* eax1627;
    signed char* eax1628;
    signed char al1629;
    signed char* eax1630;
    signed char* eax1631;
    signed char al1632;
    signed char* eax1633;
    signed char* eax1634;
    signed char al1635;
    signed char* eax1636;
    signed char* eax1637;
    signed char al1638;
    signed char* eax1639;
    signed char* eax1640;
    signed char al1641;
    signed char* eax1642;
    signed char* eax1643;
    signed char al1644;
    signed char* eax1645;
    signed char* eax1646;
    signed char al1647;
    signed char* eax1648;
    signed char* eax1649;
    signed char al1650;
    signed char* eax1651;
    signed char* eax1652;
    signed char al1653;
    signed char* eax1654;
    signed char* eax1655;
    signed char al1656;
    signed char* eax1657;
    signed char* eax1658;
    signed char al1659;
    signed char* eax1660;
    signed char* eax1661;
    signed char al1662;
    signed char* eax1663;
    signed char* eax1664;
    signed char al1665;
    signed char* eax1666;
    signed char* eax1667;
    signed char al1668;
    signed char* eax1669;
    signed char* eax1670;
    signed char al1671;
    signed char* eax1672;
    signed char* eax1673;
    signed char al1674;
    signed char* eax1675;
    signed char* eax1676;
    signed char al1677;
    signed char* eax1678;
    signed char* eax1679;
    signed char al1680;
    signed char* eax1681;
    signed char* eax1682;
    signed char al1683;
    signed char* eax1684;
    signed char* eax1685;
    signed char al1686;
    signed char* eax1687;
    signed char* eax1688;
    signed char al1689;
    signed char* eax1690;
    signed char* eax1691;
    signed char al1692;
    signed char* eax1693;
    signed char* eax1694;
    signed char al1695;
    signed char* eax1696;
    signed char* eax1697;
    signed char al1698;
    signed char* eax1699;
    signed char* eax1700;
    signed char al1701;
    signed char* eax1702;
    signed char* eax1703;
    signed char al1704;
    signed char* eax1705;
    signed char* eax1706;
    signed char al1707;
    signed char* eax1708;
    signed char* eax1709;
    signed char al1710;
    signed char* eax1711;
    signed char* eax1712;
    signed char al1713;
    signed char* eax1714;
    signed char* eax1715;
    signed char al1716;
    signed char* eax1717;
    signed char* eax1718;
    signed char al1719;
    signed char* eax1720;
    signed char* eax1721;
    signed char al1722;
    signed char* eax1723;
    signed char* eax1724;
    signed char al1725;
    signed char* eax1726;
    signed char* eax1727;
    signed char al1728;
    signed char* eax1729;
    signed char* eax1730;
    signed char al1731;
    signed char* eax1732;
    signed char* eax1733;
    signed char al1734;
    signed char* eax1735;
    signed char* eax1736;
    signed char al1737;
    signed char* eax1738;
    signed char* eax1739;
    signed char al1740;
    signed char* eax1741;
    signed char* eax1742;
    signed char al1743;
    signed char* eax1744;
    signed char* eax1745;
    signed char al1746;
    signed char* eax1747;
    signed char* eax1748;
    signed char al1749;
    signed char* eax1750;
    signed char* eax1751;
    signed char al1752;
    signed char* eax1753;
    signed char* eax1754;
    signed char al1755;
    signed char* eax1756;
    signed char* eax1757;
    signed char al1758;
    signed char* eax1759;
    signed char* eax1760;
    signed char al1761;
    signed char* eax1762;
    signed char* eax1763;
    signed char al1764;
    signed char* eax1765;
    signed char* eax1766;
    signed char al1767;
    signed char* eax1768;
    signed char* eax1769;
    signed char al1770;
    signed char* eax1771;
    signed char* eax1772;
    signed char al1773;
    signed char* eax1774;
    signed char* eax1775;
    signed char al1776;
    signed char* eax1777;
    signed char* eax1778;
    signed char al1779;
    signed char* eax1780;
    signed char* eax1781;
    signed char al1782;
    signed char* eax1783;
    signed char* eax1784;
    signed char al1785;
    signed char* eax1786;
    signed char* eax1787;
    signed char al1788;
    signed char* eax1789;
    signed char* eax1790;
    signed char al1791;
    signed char* eax1792;
    signed char* eax1793;
    signed char al1794;
    signed char* eax1795;
    signed char* eax1796;
    signed char al1797;
    signed char* eax1798;
    signed char* eax1799;
    signed char al1800;
    signed char* eax1801;
    signed char* eax1802;
    signed char al1803;
    signed char* eax1804;
    signed char* eax1805;
    signed char al1806;
    signed char* eax1807;
    signed char* eax1808;
    signed char al1809;
    signed char* eax1810;
    signed char* eax1811;
    signed char al1812;
    signed char* eax1813;
    signed char* eax1814;
    signed char al1815;
    signed char* eax1816;
    signed char* eax1817;
    signed char al1818;
    signed char* eax1819;
    signed char* eax1820;
    signed char al1821;
    signed char* eax1822;
    signed char* eax1823;
    signed char al1824;
    signed char* eax1825;
    signed char* eax1826;
    signed char al1827;
    signed char* eax1828;
    signed char* eax1829;
    signed char al1830;
    signed char* eax1831;
    signed char* eax1832;
    signed char al1833;
    signed char* eax1834;
    signed char* eax1835;
    signed char al1836;
    signed char* eax1837;
    signed char* eax1838;
    signed char al1839;
    signed char* eax1840;
    signed char* eax1841;
    signed char al1842;
    signed char* eax1843;
    signed char* eax1844;
    signed char al1845;
    signed char* eax1846;
    signed char* eax1847;
    signed char al1848;
    signed char* eax1849;
    signed char* eax1850;
    signed char al1851;
    signed char* eax1852;
    signed char* eax1853;
    signed char al1854;
    signed char* eax1855;
    signed char* eax1856;
    signed char al1857;
    signed char* eax1858;
    signed char* eax1859;
    signed char al1860;
    signed char* eax1861;
    signed char* eax1862;
    signed char al1863;
    signed char* eax1864;
    signed char* eax1865;
    signed char al1866;
    signed char* eax1867;
    signed char* eax1868;
    signed char al1869;
    signed char* eax1870;
    signed char* eax1871;
    signed char al1872;
    signed char* eax1873;
    signed char* eax1874;
    signed char al1875;
    signed char* eax1876;
    signed char* eax1877;
    signed char al1878;
    signed char* eax1879;
    signed char* eax1880;
    signed char al1881;
    signed char* eax1882;
    signed char* eax1883;
    signed char al1884;
    signed char* eax1885;
    signed char* eax1886;
    signed char al1887;
    signed char* eax1888;
    signed char* eax1889;
    signed char al1890;
    signed char* eax1891;
    signed char* eax1892;
    signed char al1893;
    signed char* eax1894;
    signed char* eax1895;
    signed char al1896;
    signed char* eax1897;
    signed char* eax1898;
    signed char al1899;
    signed char* eax1900;
    signed char* eax1901;
    signed char al1902;
    signed char* eax1903;
    signed char* eax1904;
    signed char al1905;
    signed char* eax1906;
    signed char* eax1907;
    signed char al1908;
    signed char* eax1909;
    signed char* eax1910;
    signed char al1911;
    signed char* eax1912;
    signed char* eax1913;
    signed char al1914;
    signed char* eax1915;
    signed char* eax1916;
    signed char al1917;
    signed char* eax1918;
    signed char* eax1919;
    signed char al1920;
    signed char* eax1921;
    signed char* eax1922;
    signed char al1923;
    signed char* eax1924;
    signed char* eax1925;
    signed char al1926;
    signed char* eax1927;
    signed char* eax1928;
    signed char al1929;
    signed char* eax1930;
    signed char* eax1931;
    signed char al1932;
    signed char* eax1933;
    signed char* eax1934;
    signed char al1935;
    signed char* eax1936;
    signed char* eax1937;
    signed char al1938;
    signed char* eax1939;
    signed char* eax1940;
    signed char al1941;
    signed char* eax1942;
    signed char* eax1943;
    signed char al1944;
    signed char* eax1945;
    signed char* eax1946;
    signed char al1947;
    signed char* eax1948;
    signed char* eax1949;
    signed char al1950;
    signed char* eax1951;
    signed char* eax1952;
    signed char al1953;
    signed char* eax1954;
    signed char* eax1955;
    signed char al1956;
    signed char* eax1957;
    signed char* eax1958;
    signed char al1959;
    signed char* eax1960;
    signed char* eax1961;
    signed char al1962;
    signed char* eax1963;
    signed char* eax1964;
    signed char al1965;
    signed char* eax1966;
    signed char* eax1967;
    signed char al1968;
    signed char* eax1969;
    signed char* eax1970;
    signed char al1971;
    signed char* eax1972;
    signed char* eax1973;
    signed char al1974;
    signed char* eax1975;
    signed char* eax1976;
    signed char al1977;
    signed char* eax1978;
    signed char* eax1979;
    signed char al1980;
    signed char* eax1981;
    signed char* eax1982;
    signed char al1983;
    signed char* eax1984;
    signed char* eax1985;
    signed char al1986;
    signed char* eax1987;
    signed char* eax1988;
    signed char al1989;
    signed char* eax1990;
    signed char* eax1991;
    signed char al1992;
    signed char* eax1993;
    signed char* eax1994;
    signed char al1995;
    signed char* eax1996;
    signed char* eax1997;
    signed char al1998;
    signed char* eax1999;
    signed char* eax2000;
    signed char al2001;
    signed char* eax2002;
    signed char* eax2003;
    signed char al2004;
    signed char* eax2005;
    signed char* eax2006;
    signed char al2007;
    signed char* eax2008;
    signed char* eax2009;
    signed char al2010;
    signed char* eax2011;
    signed char* eax2012;
    signed char al2013;
    signed char* eax2014;
    signed char* eax2015;
    signed char al2016;
    signed char* eax2017;
    signed char* eax2018;
    signed char al2019;
    signed char* eax2020;
    signed char* eax2021;
    signed char al2022;
    signed char* eax2023;
    signed char* eax2024;
    signed char al2025;
    signed char* eax2026;
    signed char* eax2027;
    signed char al2028;
    signed char* eax2029;
    signed char* eax2030;
    signed char al2031;
    signed char* eax2032;
    signed char* eax2033;
    signed char al2034;
    signed char* eax2035;
    signed char* eax2036;
    signed char al2037;
    signed char* eax2038;
    signed char* eax2039;
    signed char al2040;
    signed char* eax2041;
    signed char* eax2042;
    signed char al2043;
    signed char* eax2044;
    signed char* eax2045;
    signed char al2046;
    signed char* eax2047;
    signed char* eax2048;
    signed char al2049;
    signed char* eax2050;
    signed char* eax2051;
    signed char al2052;
    signed char* eax2053;
    signed char* eax2054;
    signed char al2055;
    signed char* eax2056;
    signed char* eax2057;
    signed char al2058;
    signed char* eax2059;
    signed char* eax2060;
    signed char al2061;
    signed char* eax2062;
    signed char* eax2063;
    signed char al2064;
    signed char* eax2065;
    signed char* eax2066;
    signed char al2067;
    signed char* eax2068;
    signed char* eax2069;
    signed char al2070;
    signed char* eax2071;
    signed char* eax2072;
    signed char al2073;
    signed char* eax2074;
    signed char* eax2075;
    signed char al2076;
    signed char* eax2077;
    signed char* eax2078;
    signed char al2079;
    signed char* eax2080;
    signed char* eax2081;
    signed char al2082;
    signed char* eax2083;
    signed char* eax2084;
    signed char al2085;
    signed char* eax2086;
    signed char* eax2087;
    signed char al2088;
    signed char* eax2089;
    signed char* eax2090;
    signed char al2091;
    signed char* eax2092;
    signed char* eax2093;
    signed char al2094;
    signed char* eax2095;
    signed char* eax2096;
    signed char al2097;
    signed char* eax2098;
    signed char* eax2099;
    signed char al2100;
    signed char* eax2101;
    signed char* eax2102;
    signed char al2103;
    signed char* eax2104;
    signed char* eax2105;
    signed char al2106;
    signed char* eax2107;
    signed char* eax2108;
    signed char al2109;
    signed char* eax2110;
    signed char* eax2111;
    signed char al2112;
    signed char* eax2113;
    signed char* eax2114;
    signed char al2115;
    signed char* eax2116;
    signed char* eax2117;
    signed char al2118;
    signed char* eax2119;
    signed char* eax2120;
    signed char al2121;
    signed char* eax2122;
    signed char* eax2123;
    signed char al2124;
    signed char* eax2125;
    signed char* eax2126;
    signed char al2127;
    signed char* eax2128;
    signed char* eax2129;
    signed char al2130;
    signed char* eax2131;
    signed char* eax2132;
    signed char al2133;
    signed char* eax2134;
    signed char* eax2135;
    signed char al2136;
    signed char* eax2137;
    signed char* eax2138;
    signed char al2139;
    signed char* eax2140;
    signed char* eax2141;
    signed char al2142;
    signed char* eax2143;
    signed char* eax2144;
    signed char al2145;
    signed char* eax2146;
    signed char* eax2147;
    signed char al2148;
    signed char* eax2149;
    signed char* eax2150;
    signed char al2151;
    signed char* eax2152;
    signed char* eax2153;
    signed char al2154;
    signed char* eax2155;
    signed char* eax2156;
    signed char al2157;
    signed char* eax2158;
    signed char* eax2159;
    signed char al2160;
    signed char* eax2161;
    signed char* eax2162;
    signed char al2163;
    signed char* eax2164;
    signed char* eax2165;
    signed char al2166;
    signed char* eax2167;
    signed char* eax2168;
    signed char al2169;
    signed char* eax2170;
    signed char* eax2171;
    signed char al2172;
    signed char* eax2173;
    signed char* eax2174;
    signed char al2175;
    signed char* eax2176;
    signed char* eax2177;
    signed char al2178;
    signed char* eax2179;
    signed char* eax2180;
    signed char al2181;
    signed char* eax2182;
    signed char* eax2183;
    signed char al2184;
    signed char* eax2185;
    signed char* eax2186;
    signed char al2187;
    signed char* eax2188;
    signed char* eax2189;
    signed char al2190;
    signed char* eax2191;
    signed char* eax2192;
    signed char al2193;
    signed char* eax2194;
    signed char* eax2195;
    signed char al2196;
    signed char* eax2197;
    signed char* eax2198;
    signed char al2199;
    signed char* eax2200;
    signed char* eax2201;
    signed char al2202;
    signed char* eax2203;
    signed char* eax2204;
    signed char al2205;
    signed char* eax2206;
    signed char* eax2207;
    signed char al2208;
    signed char* eax2209;
    signed char* eax2210;
    signed char al2211;
    signed char* eax2212;
    signed char* eax2213;
    signed char al2214;
    signed char* eax2215;
    signed char* eax2216;
    signed char al2217;
    signed char* eax2218;
    signed char* eax2219;
    signed char al2220;
    signed char* eax2221;
    signed char* eax2222;
    signed char al2223;
    signed char* eax2224;
    signed char* eax2225;
    signed char al2226;
    signed char* eax2227;
    signed char* eax2228;
    signed char al2229;
    signed char* eax2230;
    signed char* eax2231;
    signed char al2232;
    signed char* eax2233;
    signed char* eax2234;
    signed char al2235;
    signed char* eax2236;
    signed char* eax2237;
    signed char al2238;
    signed char* eax2239;
    signed char* eax2240;
    signed char al2241;
    signed char* eax2242;
    signed char* eax2243;
    signed char al2244;
    signed char* eax2245;
    signed char* eax2246;
    signed char al2247;
    signed char* eax2248;
    signed char* eax2249;
    signed char al2250;
    signed char* eax2251;
    signed char* eax2252;
    signed char al2253;
    signed char* eax2254;
    signed char* eax2255;
    signed char al2256;
    signed char* eax2257;
    signed char* eax2258;
    signed char al2259;
    signed char* eax2260;
    signed char* eax2261;
    signed char al2262;
    signed char* eax2263;
    signed char* eax2264;
    signed char al2265;
    signed char* eax2266;
    signed char* eax2267;
    signed char al2268;
    signed char* eax2269;
    signed char* eax2270;
    signed char al2271;
    signed char* eax2272;
    signed char* eax2273;
    signed char al2274;
    signed char* eax2275;
    signed char* eax2276;
    signed char al2277;
    signed char* eax2278;
    signed char* eax2279;
    signed char al2280;
    signed char* eax2281;
    signed char* eax2282;
    signed char al2283;
    signed char* eax2284;
    signed char* eax2285;
    signed char al2286;
    signed char* eax2287;
    signed char* eax2288;
    signed char al2289;
    signed char* eax2290;
    signed char* eax2291;
    signed char al2292;
    signed char* eax2293;
    signed char* eax2294;
    signed char al2295;
    signed char* eax2296;
    signed char* eax2297;
    signed char al2298;
    signed char* eax2299;
    signed char* eax2300;
    signed char al2301;
    signed char* eax2302;
    signed char* eax2303;
    signed char al2304;
    signed char* eax2305;
    signed char* eax2306;
    signed char al2307;
    signed char* eax2308;
    signed char* eax2309;
    signed char al2310;
    signed char* eax2311;
    signed char* eax2312;
    signed char al2313;
    signed char* eax2314;
    signed char* eax2315;
    signed char al2316;
    signed char* eax2317;
    signed char* eax2318;
    signed char al2319;
    signed char* eax2320;
    signed char* eax2321;
    signed char al2322;
    signed char* eax2323;
    signed char* eax2324;
    signed char al2325;
    signed char* eax2326;
    signed char* eax2327;
    signed char al2328;
    signed char* eax2329;
    signed char* eax2330;
    signed char al2331;
    signed char* eax2332;
    signed char* eax2333;
    signed char al2334;
    signed char* eax2335;
    signed char* eax2336;
    signed char al2337;
    signed char* eax2338;
    signed char* eax2339;
    signed char al2340;
    signed char* eax2341;
    signed char* eax2342;
    signed char al2343;
    signed char* eax2344;
    signed char* eax2345;
    signed char al2346;
    signed char* eax2347;
    signed char* eax2348;
    signed char al2349;
    signed char* eax2350;
    signed char* eax2351;
    signed char al2352;
    signed char* eax2353;
    signed char* eax2354;
    signed char al2355;
    signed char* eax2356;
    signed char* eax2357;
    signed char al2358;
    signed char* eax2359;
    signed char* eax2360;
    signed char al2361;
    signed char* eax2362;
    signed char* eax2363;
    signed char al2364;
    signed char* eax2365;
    signed char* eax2366;
    signed char al2367;
    signed char* eax2368;
    signed char* eax2369;
    signed char al2370;
    signed char* eax2371;
    signed char* eax2372;
    signed char al2373;
    signed char* eax2374;
    signed char* eax2375;
    signed char al2376;
    signed char* eax2377;
    signed char* eax2378;
    signed char al2379;
    signed char* eax2380;
    signed char* eax2381;
    signed char al2382;
    signed char* eax2383;
    signed char* eax2384;
    signed char al2385;
    signed char* eax2386;
    signed char* eax2387;
    signed char al2388;
    signed char* eax2389;
    signed char* eax2390;
    signed char al2391;
    signed char* eax2392;
    signed char* eax2393;
    signed char al2394;
    signed char* eax2395;
    signed char* eax2396;
    signed char al2397;
    signed char* eax2398;
    signed char* eax2399;
    signed char al2400;
    signed char* eax2401;
    signed char* eax2402;
    signed char al2403;
    signed char* eax2404;
    signed char* eax2405;
    signed char al2406;
    signed char* eax2407;
    signed char* eax2408;
    signed char al2409;
    signed char* eax2410;
    signed char* eax2411;
    signed char al2412;
    signed char* eax2413;
    signed char* eax2414;
    signed char al2415;
    signed char* eax2416;
    signed char* eax2417;
    signed char al2418;
    signed char* eax2419;
    signed char* eax2420;
    signed char al2421;
    signed char* eax2422;
    signed char* eax2423;
    signed char al2424;
    signed char* eax2425;
    signed char* eax2426;
    signed char al2427;
    signed char* eax2428;
    signed char* eax2429;
    signed char al2430;
    signed char* eax2431;
    signed char* eax2432;
    signed char al2433;
    signed char* eax2434;
    signed char* eax2435;
    signed char al2436;
    signed char* eax2437;
    signed char* eax2438;
    signed char al2439;
    signed char* eax2440;
    signed char* eax2441;
    signed char al2442;
    signed char* eax2443;
    signed char* eax2444;
    signed char al2445;
    signed char* eax2446;
    signed char* eax2447;
    signed char al2448;
    signed char* eax2449;
    signed char* eax2450;
    signed char al2451;
    signed char* eax2452;
    signed char* eax2453;
    signed char al2454;
    signed char* eax2455;
    signed char* eax2456;
    signed char al2457;
    signed char* eax2458;
    signed char* eax2459;
    signed char al2460;
    signed char* eax2461;
    signed char* eax2462;
    signed char al2463;
    signed char* eax2464;
    signed char* eax2465;
    signed char al2466;
    signed char* eax2467;
    signed char* eax2468;
    signed char al2469;
    signed char* eax2470;
    signed char* eax2471;
    signed char al2472;
    signed char* eax2473;
    signed char* eax2474;
    signed char al2475;
    signed char* eax2476;
    signed char* eax2477;
    signed char al2478;
    signed char* eax2479;
    signed char* eax2480;
    signed char al2481;
    signed char* eax2482;
    signed char* eax2483;
    signed char al2484;
    signed char* eax2485;
    signed char* eax2486;
    signed char al2487;
    signed char* eax2488;
    signed char* eax2489;
    signed char al2490;
    signed char* eax2491;
    signed char* eax2492;
    signed char al2493;
    signed char* eax2494;
    signed char* eax2495;
    signed char al2496;
    signed char* eax2497;
    signed char* eax2498;
    signed char al2499;
    signed char* eax2500;
    signed char* eax2501;
    signed char al2502;
    signed char* eax2503;
    signed char* eax2504;
    signed char al2505;
    signed char* eax2506;
    signed char* eax2507;
    signed char al2508;
    signed char* eax2509;
    signed char* eax2510;
    signed char al2511;
    signed char* eax2512;
    signed char* eax2513;
    signed char al2514;
    signed char* eax2515;
    signed char* eax2516;
    signed char al2517;
    signed char* eax2518;
    signed char* eax2519;
    signed char al2520;
    signed char* eax2521;
    signed char* eax2522;
    signed char al2523;
    signed char* eax2524;
    signed char* eax2525;
    signed char al2526;
    signed char* eax2527;
    signed char* eax2528;
    signed char al2529;
    signed char* eax2530;
    signed char* eax2531;
    signed char al2532;
    signed char* eax2533;
    signed char* eax2534;
    signed char al2535;
    signed char* eax2536;
    signed char* eax2537;
    signed char al2538;
    signed char* eax2539;
    signed char* eax2540;
    signed char al2541;
    signed char* eax2542;
    signed char* eax2543;
    signed char al2544;
    signed char* eax2545;
    signed char* eax2546;
    signed char al2547;
    signed char* eax2548;
    signed char* eax2549;
    signed char al2550;
    signed char* eax2551;
    signed char* eax2552;
    signed char al2553;
    signed char* eax2554;
    signed char* eax2555;
    signed char al2556;
    signed char* eax2557;
    signed char* eax2558;
    signed char al2559;
    signed char* eax2560;
    signed char* eax2561;
    signed char al2562;
    signed char* eax2563;
    signed char* eax2564;
    signed char al2565;
    signed char* eax2566;
    signed char* eax2567;
    signed char al2568;
    signed char* eax2569;
    signed char* eax2570;
    signed char al2571;
    signed char* eax2572;
    signed char* eax2573;
    signed char al2574;
    signed char* eax2575;
    signed char* eax2576;
    signed char al2577;
    signed char* eax2578;
    signed char* eax2579;
    signed char al2580;
    signed char* eax2581;
    signed char* eax2582;
    signed char al2583;
    signed char* eax2584;
    signed char* eax2585;
    signed char al2586;
    signed char* eax2587;
    signed char* eax2588;
    signed char al2589;
    signed char* eax2590;
    signed char* eax2591;
    signed char al2592;
    signed char* eax2593;
    signed char* eax2594;
    signed char al2595;
    signed char* eax2596;
    signed char* eax2597;
    signed char al2598;
    signed char* eax2599;
    signed char* eax2600;
    signed char al2601;
    signed char* eax2602;
    signed char* eax2603;
    signed char al2604;
    signed char* eax2605;
    signed char* eax2606;
    signed char al2607;
    signed char* eax2608;
    signed char* eax2609;
    signed char al2610;
    signed char* eax2611;
    signed char* eax2612;
    signed char al2613;
    signed char* eax2614;
    signed char* eax2615;
    signed char al2616;
    signed char* eax2617;
    signed char* eax2618;
    signed char al2619;
    signed char* eax2620;
    signed char* eax2621;
    signed char al2622;
    signed char* eax2623;
    signed char* eax2624;
    signed char al2625;
    signed char* eax2626;
    signed char* eax2627;
    signed char al2628;
    signed char* eax2629;
    signed char* eax2630;
    signed char al2631;
    signed char* eax2632;
    signed char* eax2633;
    signed char al2634;
    signed char* eax2635;
    signed char* eax2636;
    signed char al2637;
    signed char* eax2638;
    signed char* eax2639;
    signed char al2640;
    signed char* eax2641;
    signed char* eax2642;
    signed char al2643;
    signed char* eax2644;
    signed char* eax2645;
    signed char al2646;
    signed char* eax2647;
    signed char* eax2648;
    signed char al2649;
    signed char* eax2650;
    signed char* eax2651;
    signed char al2652;
    signed char* eax2653;
    signed char* eax2654;
    signed char al2655;
    signed char* eax2656;
    signed char* eax2657;
    signed char al2658;
    signed char* eax2659;
    signed char* eax2660;
    signed char al2661;
    signed char* eax2662;
    signed char* eax2663;
    signed char al2664;
    signed char* eax2665;
    signed char* eax2666;
    signed char al2667;
    signed char* eax2668;
    signed char* eax2669;
    signed char al2670;
    signed char* eax2671;
    signed char* eax2672;
    signed char al2673;
    signed char* eax2674;
    signed char* eax2675;
    signed char al2676;
    signed char* eax2677;
    signed char* eax2678;
    signed char al2679;
    signed char* eax2680;
    signed char* eax2681;
    signed char al2682;
    signed char* eax2683;
    signed char* eax2684;
    signed char al2685;
    signed char* eax2686;
    signed char* eax2687;
    signed char al2688;
    signed char* eax2689;
    signed char* eax2690;
    signed char al2691;
    signed char* eax2692;
    signed char* eax2693;
    signed char al2694;
    signed char* eax2695;
    signed char* eax2696;
    signed char al2697;
    signed char* eax2698;
    signed char* eax2699;
    signed char al2700;
    signed char* eax2701;
    signed char* eax2702;
    signed char al2703;
    signed char* eax2704;
    signed char* eax2705;
    signed char al2706;
    signed char* eax2707;
    signed char* eax2708;
    signed char al2709;
    signed char* eax2710;
    signed char* eax2711;
    signed char al2712;
    signed char* eax2713;
    signed char* eax2714;
    signed char al2715;
    signed char* eax2716;
    signed char* eax2717;
    signed char al2718;
    signed char* eax2719;
    signed char* eax2720;
    signed char al2721;
    signed char* eax2722;
    signed char* eax2723;
    signed char al2724;
    signed char* eax2725;
    signed char* eax2726;
    signed char al2727;
    signed char* eax2728;
    signed char* eax2729;
    signed char al2730;
    signed char* eax2731;
    signed char* eax2732;
    signed char al2733;
    signed char* eax2734;
    signed char* eax2735;
    signed char al2736;
    signed char* eax2737;
    signed char* eax2738;
    signed char al2739;
    signed char* eax2740;
    signed char* eax2741;
    signed char al2742;
    signed char* eax2743;
    signed char* eax2744;
    signed char al2745;
    signed char* eax2746;
    signed char* eax2747;
    signed char al2748;
    signed char* eax2749;
    signed char* eax2750;
    signed char al2751;
    signed char* eax2752;
    signed char* eax2753;
    signed char al2754;
    signed char* eax2755;
    signed char* eax2756;
    signed char al2757;
    signed char* eax2758;
    signed char* eax2759;
    signed char al2760;
    signed char* eax2761;
    signed char* eax2762;
    signed char al2763;
    signed char* eax2764;
    signed char* eax2765;
    signed char al2766;
    signed char* eax2767;
    signed char* eax2768;
    signed char al2769;
    signed char* eax2770;
    signed char* eax2771;
    signed char al2772;
    signed char* eax2773;
    signed char* eax2774;
    signed char al2775;
    signed char* eax2776;
    signed char* eax2777;
    signed char al2778;
    signed char* eax2779;
    signed char* eax2780;
    signed char al2781;
    signed char* eax2782;
    signed char* eax2783;
    signed char al2784;
    signed char* eax2785;
    signed char* eax2786;
    signed char al2787;
    signed char* eax2788;
    signed char* eax2789;
    signed char al2790;
    signed char* eax2791;
    signed char* eax2792;
    signed char al2793;
    signed char* eax2794;
    signed char* eax2795;
    signed char al2796;
    signed char* eax2797;
    signed char* eax2798;
    signed char al2799;
    signed char* eax2800;
    signed char* eax2801;
    signed char al2802;
    signed char* eax2803;
    signed char* eax2804;
    signed char al2805;
    signed char* eax2806;
    signed char* eax2807;
    signed char al2808;
    signed char* eax2809;
    signed char* eax2810;
    signed char al2811;
    signed char* eax2812;
    signed char* eax2813;
    signed char al2814;
    signed char* eax2815;
    signed char* eax2816;
    signed char al2817;
    signed char* eax2818;
    signed char* eax2819;
    signed char al2820;
    signed char* eax2821;
    signed char* eax2822;
    signed char al2823;
    signed char* eax2824;
    signed char* eax2825;
    signed char al2826;
    signed char* eax2827;
    signed char* eax2828;
    signed char al2829;
    signed char* eax2830;
    signed char* eax2831;
    signed char al2832;
    signed char* eax2833;
    signed char* eax2834;
    signed char al2835;
    signed char* eax2836;
    signed char* eax2837;
    signed char al2838;
    signed char* eax2839;
    signed char* eax2840;
    signed char al2841;
    signed char* eax2842;
    signed char* eax2843;
    signed char al2844;
    signed char* eax2845;
    signed char* eax2846;
    signed char al2847;
    signed char* eax2848;
    signed char* eax2849;
    signed char al2850;
    signed char* eax2851;
    signed char* eax2852;
    signed char al2853;
    signed char* eax2854;
    signed char* eax2855;
    signed char al2856;
    signed char* eax2857;
    signed char* eax2858;
    signed char al2859;
    signed char* eax2860;
    signed char* eax2861;
    signed char al2862;
    signed char* eax2863;
    signed char* eax2864;
    signed char al2865;
    signed char* eax2866;
    signed char* eax2867;
    signed char al2868;
    signed char* eax2869;
    signed char* eax2870;
    signed char al2871;
    signed char* eax2872;
    signed char* eax2873;
    signed char al2874;
    signed char* eax2875;
    signed char* eax2876;
    signed char al2877;
    signed char* eax2878;
    signed char* eax2879;
    signed char al2880;
    signed char* eax2881;
    signed char* eax2882;
    signed char al2883;
    signed char* eax2884;
    signed char* eax2885;
    signed char al2886;
    signed char* eax2887;
    signed char* eax2888;
    signed char al2889;
    signed char* eax2890;
    signed char* eax2891;
    signed char al2892;
    signed char* eax2893;
    signed char* eax2894;
    signed char al2895;
    signed char* eax2896;
    signed char* eax2897;
    signed char al2898;
    signed char* eax2899;
    signed char* eax2900;
    signed char al2901;
    signed char* eax2902;
    signed char* eax2903;
    signed char al2904;
    signed char* eax2905;
    signed char* eax2906;
    signed char al2907;
    signed char* eax2908;
    signed char* eax2909;
    signed char al2910;
    signed char* eax2911;
    signed char* eax2912;
    signed char al2913;
    signed char* eax2914;
    signed char* eax2915;
    signed char al2916;
    signed char* eax2917;
    signed char* eax2918;
    signed char al2919;
    signed char* eax2920;
    signed char* eax2921;
    signed char al2922;
    signed char* eax2923;
    signed char* eax2924;
    signed char al2925;
    signed char* eax2926;
    signed char* eax2927;
    signed char al2928;
    signed char* eax2929;
    signed char* eax2930;
    signed char al2931;
    signed char* eax2932;
    signed char* eax2933;
    signed char al2934;
    signed char* eax2935;
    signed char* eax2936;
    signed char al2937;
    signed char* eax2938;
    signed char* eax2939;
    signed char al2940;
    signed char* eax2941;
    signed char* eax2942;
    signed char al2943;
    signed char* eax2944;
    signed char* eax2945;
    signed char al2946;
    signed char* eax2947;
    signed char* eax2948;
    signed char al2949;
    signed char* eax2950;
    signed char* eax2951;
    signed char al2952;
    signed char* eax2953;
    signed char* eax2954;
    signed char al2955;
    signed char* eax2956;
    signed char* eax2957;
    signed char al2958;
    signed char* eax2959;
    signed char* eax2960;
    signed char al2961;
    signed char* eax2962;
    signed char* eax2963;
    signed char al2964;
    signed char* eax2965;
    signed char* eax2966;
    signed char al2967;
    signed char* eax2968;
    signed char* eax2969;
    signed char al2970;
    signed char* eax2971;
    signed char* eax2972;
    signed char al2973;
    signed char* eax2974;
    signed char* eax2975;
    signed char al2976;
    signed char* eax2977;
    signed char* eax2978;
    signed char al2979;
    signed char* eax2980;
    signed char* eax2981;
    signed char al2982;
    signed char* eax2983;
    signed char* eax2984;
    signed char al2985;
    signed char* eax2986;
    signed char* eax2987;
    signed char al2988;
    signed char* eax2989;
    signed char* eax2990;
    signed char al2991;
    signed char* eax2992;
    signed char* eax2993;
    signed char al2994;
    signed char* eax2995;
    signed char* eax2996;
    signed char al2997;
    signed char* eax2998;
    signed char* eax2999;
    signed char al3000;
    signed char* eax3001;
    signed char* eax3002;
    signed char al3003;
    signed char* eax3004;
    signed char* eax3005;
    signed char al3006;
    signed char* eax3007;
    signed char* eax3008;
    signed char al3009;
    signed char* eax3010;
    signed char* eax3011;
    signed char al3012;
    signed char* eax3013;
    signed char* eax3014;
    signed char al3015;
    signed char* eax3016;
    signed char* eax3017;
    signed char al3018;
    signed char* eax3019;
    signed char* eax3020;
    signed char al3021;
    signed char* eax3022;
    signed char* eax3023;
    signed char al3024;
    signed char* eax3025;
    signed char* eax3026;
    signed char al3027;
    signed char* eax3028;
    signed char* eax3029;
    signed char al3030;
    signed char* eax3031;
    signed char* eax3032;
    signed char al3033;
    signed char* eax3034;
    signed char* eax3035;
    signed char al3036;
    signed char* eax3037;
    signed char* eax3038;
    signed char al3039;
    signed char* eax3040;
    signed char* eax3041;
    signed char al3042;
    signed char* eax3043;
    signed char* eax3044;
    signed char al3045;
    signed char* eax3046;
    signed char* eax3047;
    signed char al3048;
    signed char* eax3049;
    signed char* eax3050;
    signed char al3051;
    signed char* eax3052;
    signed char* eax3053;
    signed char al3054;
    signed char* eax3055;
    signed char* eax3056;
    signed char al3057;
    signed char* eax3058;
    signed char* eax3059;
    signed char al3060;
    signed char* eax3061;
    signed char* eax3062;
    signed char al3063;
    signed char* eax3064;
    signed char* eax3065;
    signed char al3066;
    signed char* eax3067;
    signed char* eax3068;
    signed char al3069;
    signed char* eax3070;
    signed char* eax3071;
    signed char al3072;
    signed char* eax3073;
    signed char* eax3074;
    signed char al3075;
    signed char* eax3076;
    signed char* eax3077;
    signed char al3078;
    signed char* eax3079;
    signed char* eax3080;
    signed char al3081;
    signed char* eax3082;
    signed char* eax3083;
    signed char al3084;
    signed char* eax3085;
    signed char* eax3086;
    signed char al3087;
    signed char* eax3088;
    signed char* eax3089;
    signed char al3090;
    signed char* eax3091;
    signed char* eax3092;
    signed char al3093;
    signed char* eax3094;
    signed char* eax3095;
    signed char al3096;
    signed char* eax3097;
    signed char* eax3098;
    signed char al3099;
    signed char* eax3100;
    signed char* eax3101;
    signed char al3102;
    signed char* eax3103;
    signed char* eax3104;
    signed char al3105;
    signed char* eax3106;
    signed char* eax3107;
    signed char al3108;
    signed char* eax3109;
    signed char* eax3110;
    signed char al3111;
    signed char* eax3112;
    signed char* eax3113;
    signed char al3114;
    signed char* eax3115;
    signed char* eax3116;
    signed char al3117;
    signed char* eax3118;
    signed char* eax3119;
    signed char al3120;
    signed char* eax3121;
    signed char* eax3122;
    signed char al3123;
    signed char* eax3124;
    signed char* eax3125;
    signed char al3126;
    signed char* eax3127;
    signed char* eax3128;
    signed char al3129;
    signed char* eax3130;
    signed char* eax3131;
    signed char al3132;
    signed char* eax3133;
    signed char* eax3134;
    signed char al3135;
    signed char* eax3136;
    signed char* eax3137;
    signed char al3138;
    signed char* eax3139;
    signed char* eax3140;
    signed char al3141;
    signed char* eax3142;
    signed char* eax3143;
    signed char al3144;
    signed char* eax3145;
    signed char* eax3146;
    signed char al3147;
    signed char* eax3148;
    signed char* eax3149;
    signed char al3150;
    signed char* eax3151;
    signed char* eax3152;
    signed char al3153;
    signed char* eax3154;
    signed char* eax3155;
    signed char al3156;
    signed char* eax3157;
    signed char* eax3158;
    signed char al3159;
    signed char* eax3160;
    signed char* eax3161;
    signed char al3162;
    signed char* eax3163;
    signed char* eax3164;
    signed char al3165;
    signed char* eax3166;
    signed char* eax3167;
    signed char al3168;
    signed char* eax3169;
    signed char* eax3170;
    signed char al3171;
    signed char* eax3172;
    signed char* eax3173;
    signed char al3174;
    signed char* eax3175;
    signed char* eax3176;
    signed char al3177;
    signed char* eax3178;
    signed char* eax3179;
    signed char al3180;
    signed char* eax3181;
    signed char* eax3182;
    signed char al3183;
    signed char* eax3184;
    signed char* eax3185;
    signed char al3186;
    signed char* eax3187;
    signed char* eax3188;
    signed char al3189;
    signed char* eax3190;
    signed char* eax3191;
    signed char al3192;
    signed char* eax3193;
    signed char* eax3194;
    signed char al3195;
    signed char* eax3196;
    signed char* eax3197;
    signed char al3198;
    signed char* eax3199;
    signed char* eax3200;
    signed char al3201;
    signed char* eax3202;
    signed char* eax3203;
    signed char al3204;
    signed char* eax3205;
    signed char* eax3206;
    signed char al3207;
    signed char* eax3208;
    signed char* eax3209;
    signed char al3210;
    signed char* eax3211;
    signed char* eax3212;
    signed char al3213;
    signed char* eax3214;
    signed char* eax3215;
    signed char al3216;
    signed char* eax3217;
    signed char* eax3218;
    signed char al3219;
    signed char* eax3220;
    signed char* eax3221;
    signed char al3222;
    signed char* eax3223;
    signed char* eax3224;
    signed char al3225;
    signed char* eax3226;
    signed char* eax3227;
    signed char al3228;
    signed char* eax3229;
    signed char* eax3230;
    signed char al3231;
    signed char* eax3232;
    signed char* eax3233;
    signed char al3234;
    signed char* eax3235;
    signed char* eax3236;
    signed char al3237;
    signed char* eax3238;
    signed char* eax3239;
    signed char al3240;
    signed char* eax3241;
    signed char* eax3242;
    signed char al3243;
    signed char* eax3244;
    signed char* eax3245;
    signed char al3246;
    signed char* eax3247;
    signed char* eax3248;
    signed char al3249;
    signed char* eax3250;
    signed char* eax3251;
    signed char al3252;
    signed char* eax3253;
    signed char* eax3254;
    signed char al3255;
    signed char* eax3256;
    signed char* eax3257;
    signed char al3258;
    signed char* eax3259;
    signed char* eax3260;
    signed char al3261;
    signed char* eax3262;
    signed char* eax3263;
    signed char al3264;
    signed char* eax3265;
    signed char* eax3266;
    signed char al3267;
    signed char* eax3268;
    signed char* eax3269;
    signed char al3270;
    signed char* eax3271;
    signed char* eax3272;
    signed char al3273;
    signed char* eax3274;
    signed char* eax3275;
    signed char al3276;
    signed char* eax3277;
    signed char* eax3278;
    signed char al3279;
    signed char* eax3280;
    signed char* eax3281;
    signed char al3282;
    signed char* eax3283;
    signed char* eax3284;
    signed char al3285;
    signed char* eax3286;
    signed char* eax3287;
    signed char al3288;
    signed char* eax3289;
    signed char* eax3290;
    signed char al3291;
    signed char* eax3292;
    signed char* eax3293;
    signed char al3294;
    signed char* eax3295;
    signed char* eax3296;
    signed char al3297;
    signed char* eax3298;
    signed char* eax3299;
    signed char al3300;
    signed char* eax3301;
    signed char* eax3302;
    signed char al3303;
    signed char* eax3304;
    signed char* eax3305;
    signed char al3306;
    signed char* eax3307;
    signed char* eax3308;
    signed char al3309;
    signed char* eax3310;
    signed char* eax3311;
    signed char al3312;
    signed char* eax3313;
    signed char* eax3314;
    signed char al3315;
    signed char* eax3316;
    signed char* eax3317;
    signed char al3318;
    signed char* eax3319;
    signed char* eax3320;
    signed char al3321;
    signed char* eax3322;
    signed char* eax3323;
    signed char al3324;
    signed char* eax3325;
    signed char* eax3326;
    signed char al3327;
    signed char* eax3328;
    signed char* eax3329;
    signed char al3330;
    signed char* eax3331;
    signed char* eax3332;
    signed char al3333;
    signed char* eax3334;
    signed char* eax3335;
    signed char al3336;
    signed char* eax3337;
    signed char* eax3338;
    signed char al3339;
    signed char* eax3340;
    signed char* eax3341;
    signed char al3342;
    signed char* eax3343;
    signed char* eax3344;
    signed char al3345;
    signed char* eax3346;
    signed char* eax3347;
    signed char al3348;
    signed char* eax3349;
    signed char* eax3350;
    signed char al3351;
    signed char* eax3352;
    signed char* eax3353;
    signed char al3354;
    signed char* eax3355;
    signed char* eax3356;
    signed char al3357;
    signed char* eax3358;
    signed char* eax3359;
    signed char al3360;
    signed char* eax3361;
    signed char* eax3362;
    signed char al3363;
    signed char* eax3364;
    signed char* eax3365;
    signed char al3366;
    signed char* eax3367;
    signed char* eax3368;
    signed char al3369;
    signed char* eax3370;
    signed char* eax3371;
    signed char al3372;
    signed char* eax3373;
    signed char* eax3374;
    signed char al3375;
    signed char* eax3376;
    signed char* eax3377;
    signed char al3378;
    signed char* eax3379;
    signed char* eax3380;
    signed char al3381;
    signed char* eax3382;
    signed char* eax3383;
    signed char al3384;
    signed char* eax3385;
    signed char* eax3386;
    signed char al3387;
    signed char* eax3388;
    signed char* eax3389;
    signed char al3390;
    signed char* eax3391;
    signed char* eax3392;
    signed char al3393;
    signed char* eax3394;
    signed char* eax3395;
    signed char al3396;
    signed char* eax3397;
    signed char* eax3398;
    signed char al3399;
    signed char* eax3400;
    signed char* eax3401;
    signed char al3402;
    signed char* eax3403;
    signed char* eax3404;
    signed char al3405;
    signed char* eax3406;
    signed char* eax3407;
    signed char al3408;
    signed char* eax3409;
    signed char* eax3410;
    signed char al3411;
    signed char* eax3412;
    signed char* eax3413;
    signed char al3414;
    signed char* eax3415;
    signed char* eax3416;
    signed char al3417;
    signed char* eax3418;
    signed char* eax3419;
    signed char al3420;
    signed char* eax3421;
    signed char* eax3422;
    signed char al3423;
    signed char* eax3424;
    signed char* eax3425;
    signed char al3426;
    signed char* eax3427;
    signed char* eax3428;
    signed char al3429;
    signed char* eax3430;
    signed char* eax3431;
    signed char al3432;
    signed char* eax3433;
    signed char* eax3434;
    signed char al3435;
    signed char* eax3436;
    signed char* eax3437;
    signed char al3438;
    signed char* eax3439;
    signed char* eax3440;
    signed char al3441;
    signed char* eax3442;
    signed char* eax3443;
    signed char al3444;
    signed char* eax3445;
    signed char* eax3446;
    signed char al3447;
    signed char* eax3448;
    signed char* eax3449;
    signed char al3450;
    signed char* eax3451;
    signed char* eax3452;
    signed char al3453;
    signed char* eax3454;
    signed char* eax3455;
    signed char al3456;
    signed char* eax3457;
    signed char* eax3458;
    signed char al3459;
    signed char* eax3460;
    signed char* eax3461;
    signed char al3462;
    signed char* eax3463;
    signed char* eax3464;
    signed char al3465;
    signed char* eax3466;
    signed char* eax3467;
    signed char al3468;
    signed char* eax3469;
    signed char* eax3470;
    signed char al3471;
    signed char* eax3472;
    signed char* eax3473;
    signed char al3474;
    signed char* eax3475;
    signed char* eax3476;
    signed char al3477;
    signed char* eax3478;
    signed char* eax3479;
    signed char al3480;
    signed char* eax3481;
    signed char* eax3482;
    signed char al3483;
    signed char* eax3484;
    signed char* eax3485;
    signed char al3486;
    signed char* eax3487;
    signed char* eax3488;
    signed char al3489;
    signed char* eax3490;
    signed char* eax3491;
    signed char al3492;
    signed char* eax3493;
    signed char* eax3494;
    signed char al3495;
    signed char* eax3496;
    signed char* eax3497;
    signed char al3498;
    signed char* eax3499;
    signed char* eax3500;
    signed char al3501;
    signed char* eax3502;
    signed char* eax3503;
    signed char al3504;
    signed char* eax3505;
    signed char* eax3506;
    signed char al3507;
    signed char* eax3508;
    signed char* eax3509;
    signed char al3510;
    signed char* eax3511;
    signed char* eax3512;
    signed char al3513;
    signed char* eax3514;
    signed char* eax3515;
    signed char al3516;
    signed char* eax3517;
    signed char* eax3518;
    signed char al3519;
    signed char* eax3520;
    signed char* eax3521;
    signed char al3522;
    signed char* eax3523;
    signed char* eax3524;
    signed char al3525;
    signed char* eax3526;
    signed char* eax3527;
    signed char al3528;
    signed char* eax3529;
    signed char* eax3530;
    signed char al3531;
    signed char* eax3532;
    signed char* eax3533;
    signed char al3534;
    signed char* eax3535;
    signed char* eax3536;
    signed char al3537;
    signed char* eax3538;
    signed char* eax3539;
    signed char al3540;
    signed char* eax3541;
    signed char* eax3542;
    signed char al3543;
    signed char* eax3544;
    signed char* eax3545;
    signed char al3546;
    signed char* eax3547;
    signed char* eax3548;
    signed char al3549;
    signed char* eax3550;
    signed char* eax3551;
    signed char al3552;
    signed char* eax3553;
    signed char* eax3554;
    signed char al3555;
    signed char* eax3556;
    signed char* eax3557;
    signed char al3558;
    signed char* eax3559;
    signed char* eax3560;
    signed char al3561;
    signed char* eax3562;
    signed char* eax3563;
    signed char al3564;
    signed char* eax3565;
    signed char* eax3566;
    signed char al3567;
    signed char* eax3568;
    signed char* eax3569;
    signed char al3570;
    signed char* eax3571;
    signed char* eax3572;
    signed char al3573;
    signed char* eax3574;
    signed char* eax3575;
    signed char al3576;
    signed char* eax3577;
    signed char* eax3578;
    signed char al3579;
    signed char* eax3580;
    signed char* eax3581;
    signed char al3582;
    signed char* eax3583;
    signed char* eax3584;
    signed char al3585;
    signed char* eax3586;
    signed char* eax3587;
    signed char al3588;
    signed char* eax3589;
    signed char* eax3590;
    signed char al3591;
    signed char* eax3592;
    signed char* eax3593;
    signed char al3594;
    signed char* eax3595;
    signed char* eax3596;
    signed char al3597;
    signed char* eax3598;
    signed char* eax3599;
    signed char al3600;
    signed char* eax3601;
    signed char* eax3602;
    signed char al3603;
    signed char* eax3604;
    signed char* eax3605;
    signed char al3606;
    signed char* eax3607;
    signed char* eax3608;
    signed char al3609;
    signed char* eax3610;
    signed char* eax3611;
    signed char al3612;
    signed char* eax3613;
    signed char* eax3614;
    signed char al3615;
    signed char* eax3616;
    signed char* eax3617;
    signed char al3618;
    signed char* eax3619;
    signed char* eax3620;
    signed char al3621;
    signed char* eax3622;
    signed char* eax3623;
    signed char al3624;
    signed char* eax3625;
    signed char* eax3626;
    signed char al3627;
    signed char* eax3628;
    signed char* eax3629;
    signed char al3630;
    signed char* eax3631;
    signed char* eax3632;
    signed char al3633;
    signed char* eax3634;
    signed char* eax3635;
    signed char al3636;
    signed char* eax3637;
    signed char* eax3638;
    signed char al3639;
    signed char* eax3640;
    signed char* eax3641;
    signed char al3642;
    signed char* eax3643;
    signed char* eax3644;
    signed char al3645;
    signed char* eax3646;
    signed char* eax3647;
    signed char al3648;
    signed char* eax3649;
    signed char* eax3650;
    signed char al3651;
    signed char* eax3652;
    signed char* eax3653;
    signed char al3654;
    signed char* eax3655;
    signed char* eax3656;
    signed char al3657;
    signed char* eax3658;
    signed char* eax3659;
    signed char al3660;
    signed char* eax3661;
    signed char* eax3662;
    signed char al3663;
    signed char* eax3664;
    signed char* eax3665;
    signed char al3666;
    signed char* eax3667;
    signed char* eax3668;
    signed char al3669;
    signed char* eax3670;
    signed char* eax3671;
    signed char al3672;
    signed char* eax3673;
    signed char* eax3674;
    signed char al3675;
    signed char* eax3676;
    signed char* eax3677;
    signed char al3678;
    signed char* eax3679;
    signed char* eax3680;
    signed char al3681;
    signed char* eax3682;
    signed char* eax3683;
    signed char al3684;
    signed char* eax3685;
    signed char* eax3686;
    signed char al3687;
    signed char* eax3688;
    signed char* eax3689;
    signed char al3690;
    signed char* eax3691;
    signed char* eax3692;
    signed char al3693;
    signed char* eax3694;
    signed char* eax3695;
    signed char al3696;
    signed char* eax3697;
    signed char* eax3698;
    signed char al3699;
    signed char* eax3700;
    signed char* eax3701;
    signed char al3702;
    signed char* eax3703;
    signed char* eax3704;
    signed char al3705;
    signed char* eax3706;
    signed char* eax3707;
    signed char al3708;
    signed char* eax3709;
    signed char* eax3710;
    signed char al3711;
    signed char* eax3712;
    signed char* eax3713;
    signed char al3714;
    signed char* eax3715;
    signed char* eax3716;
    signed char al3717;
    signed char* eax3718;
    signed char* eax3719;
    signed char al3720;
    signed char* eax3721;
    signed char* eax3722;
    signed char al3723;
    signed char* eax3724;
    signed char* eax3725;
    signed char al3726;
    signed char* eax3727;
    signed char* eax3728;
    signed char al3729;
    signed char* eax3730;
    signed char* eax3731;
    signed char al3732;
    signed char* eax3733;
    signed char* eax3734;
    signed char al3735;
    signed char* eax3736;
    signed char* eax3737;
    signed char al3738;
    signed char* eax3739;
    signed char* eax3740;
    signed char al3741;
    signed char* eax3742;
    signed char* eax3743;
    signed char al3744;
    signed char* eax3745;
    signed char* eax3746;
    signed char al3747;
    signed char* eax3748;
    signed char* eax3749;
    signed char al3750;
    signed char* eax3751;
    signed char* eax3752;
    signed char al3753;
    signed char* eax3754;
    signed char* eax3755;
    signed char al3756;
    signed char* eax3757;
    signed char* eax3758;
    signed char al3759;
    signed char* eax3760;
    signed char* eax3761;
    signed char al3762;
    signed char* eax3763;
    signed char* eax3764;
    signed char al3765;
    signed char* eax3766;
    signed char* eax3767;
    signed char al3768;
    signed char* eax3769;
    signed char* eax3770;
    signed char al3771;
    signed char* eax3772;
    signed char* eax3773;
    signed char al3774;
    signed char* eax3775;
    signed char* eax3776;
    signed char al3777;
    signed char* eax3778;
    signed char* eax3779;
    signed char al3780;
    signed char* eax3781;
    signed char* eax3782;
    signed char al3783;
    signed char* eax3784;
    signed char* eax3785;
    signed char al3786;
    signed char* eax3787;
    signed char* eax3788;
    signed char al3789;
    signed char* eax3790;
    signed char* eax3791;
    signed char al3792;
    signed char* eax3793;
    signed char* eax3794;
    signed char al3795;
    signed char* eax3796;
    signed char* eax3797;
    signed char al3798;
    signed char* eax3799;
    signed char* eax3800;
    signed char al3801;
    signed char* eax3802;
    signed char* eax3803;
    signed char al3804;
    signed char* eax3805;
    signed char* eax3806;
    signed char al3807;
    signed char* eax3808;
    signed char* eax3809;
    signed char al3810;
    signed char* eax3811;
    signed char* eax3812;
    signed char al3813;
    signed char* eax3814;
    signed char* eax3815;
    signed char al3816;
    signed char* eax3817;
    signed char* eax3818;
    signed char al3819;
    signed char* eax3820;
    signed char* eax3821;
    signed char al3822;
    signed char* eax3823;
    signed char* eax3824;
    signed char al3825;
    signed char* eax3826;
    signed char* eax3827;
    signed char al3828;
    signed char* eax3829;
    signed char* eax3830;
    signed char al3831;
    signed char* eax3832;
    signed char* eax3833;
    signed char al3834;
    signed char* eax3835;
    signed char* eax3836;
    signed char al3837;
    signed char* eax3838;
    signed char* eax3839;
    signed char al3840;
    signed char* eax3841;
    signed char* eax3842;
    signed char al3843;
    signed char* eax3844;
    signed char* eax3845;
    signed char al3846;
    signed char* eax3847;
    signed char* eax3848;
    signed char al3849;
    signed char* eax3850;
    signed char* eax3851;
    signed char al3852;
    signed char* eax3853;
    signed char* eax3854;
    signed char al3855;
    signed char* eax3856;
    signed char* eax3857;
    signed char al3858;
    signed char* eax3859;
    signed char* eax3860;
    signed char al3861;
    signed char* eax3862;
    signed char* eax3863;
    signed char al3864;
    signed char* eax3865;
    signed char* eax3866;
    signed char al3867;
    signed char* eax3868;
    signed char* eax3869;
    signed char al3870;
    signed char* eax3871;
    signed char* eax3872;
    signed char al3873;
    signed char* eax3874;
    signed char* eax3875;
    signed char al3876;
    signed char* eax3877;
    signed char* eax3878;
    signed char al3879;
    signed char* eax3880;
    signed char* eax3881;
    signed char al3882;
    signed char* eax3883;
    signed char* eax3884;
    signed char al3885;
    signed char* eax3886;
    signed char* eax3887;
    signed char al3888;
    signed char* eax3889;
    signed char* eax3890;
    signed char al3891;
    signed char* eax3892;
    signed char* eax3893;
    signed char al3894;
    signed char* eax3895;
    signed char* eax3896;
    signed char al3897;
    signed char* eax3898;
    signed char* eax3899;
    signed char al3900;
    signed char* eax3901;
    signed char* eax3902;
    signed char al3903;
    signed char* eax3904;
    signed char* eax3905;
    signed char al3906;
    signed char* eax3907;
    signed char* eax3908;
    signed char al3909;
    signed char* eax3910;
    signed char* eax3911;
    signed char al3912;
    signed char* eax3913;
    signed char* eax3914;
    signed char al3915;
    signed char* eax3916;
    signed char* eax3917;
    signed char al3918;
    signed char* eax3919;
    signed char* eax3920;
    signed char al3921;
    signed char* eax3922;
    signed char* eax3923;
    signed char al3924;
    signed char* eax3925;
    signed char* eax3926;
    signed char al3927;
    signed char* eax3928;
    signed char* eax3929;
    signed char al3930;
    signed char* eax3931;
    signed char* eax3932;
    signed char al3933;
    signed char* eax3934;
    signed char* eax3935;
    signed char al3936;
    signed char* eax3937;
    signed char* eax3938;
    signed char al3939;
    signed char* eax3940;
    signed char* eax3941;
    signed char al3942;
    signed char* eax3943;
    signed char* eax3944;
    signed char al3945;
    signed char* eax3946;
    signed char* eax3947;
    signed char al3948;
    signed char* eax3949;
    signed char* eax3950;
    signed char al3951;
    signed char* eax3952;
    signed char* eax3953;
    signed char al3954;
    signed char* eax3955;
    signed char* eax3956;
    signed char al3957;
    signed char* eax3958;
    signed char* eax3959;
    signed char al3960;
    signed char* eax3961;
    signed char* eax3962;
    signed char al3963;
    signed char* eax3964;
    signed char* eax3965;
    signed char al3966;
    signed char* eax3967;
    signed char* eax3968;
    signed char al3969;
    signed char* eax3970;
    signed char* eax3971;
    signed char al3972;
    signed char* eax3973;
    signed char* eax3974;
    signed char al3975;
    signed char* eax3976;
    signed char* eax3977;
    signed char al3978;
    signed char* eax3979;
    signed char* eax3980;
    signed char al3981;
    signed char* eax3982;
    signed char* eax3983;
    signed char al3984;
    signed char* eax3985;
    signed char* eax3986;
    signed char al3987;
    signed char* eax3988;
    signed char* eax3989;
    signed char al3990;
    signed char* eax3991;
    signed char* eax3992;
    signed char al3993;
    signed char* eax3994;
    signed char* eax3995;
    signed char al3996;
    signed char* eax3997;
    signed char* eax3998;
    signed char al3999;
    signed char* eax4000;
    signed char* eax4001;
    signed char al4002;
    signed char* eax4003;
    signed char* eax4004;
    signed char al4005;
    signed char* eax4006;
    signed char* eax4007;
    signed char al4008;
    signed char* eax4009;
    signed char* eax4010;
    signed char al4011;
    signed char* eax4012;
    signed char* eax4013;
    signed char al4014;
    signed char* eax4015;
    signed char* eax4016;
    signed char al4017;
    signed char* eax4018;
    signed char* eax4019;
    signed char al4020;
    signed char* eax4021;
    signed char* eax4022;
    signed char al4023;
    signed char* eax4024;
    signed char* eax4025;
    signed char al4026;
    signed char* eax4027;
    signed char* eax4028;
    signed char al4029;
    signed char* eax4030;
    signed char* eax4031;
    signed char al4032;
    signed char* eax4033;
    signed char* eax4034;
    signed char al4035;
    signed char* eax4036;
    signed char* eax4037;
    signed char al4038;
    signed char* eax4039;
    signed char* eax4040;
    signed char al4041;
    signed char* eax4042;
    signed char* eax4043;
    signed char al4044;
    signed char* eax4045;
    signed char* eax4046;
    signed char al4047;
    signed char* eax4048;
    signed char* eax4049;
    signed char al4050;
    signed char* eax4051;
    signed char* eax4052;
    signed char al4053;
    signed char* eax4054;
    signed char* eax4055;
    signed char al4056;
    signed char* eax4057;
    signed char* eax4058;
    signed char al4059;
    signed char* eax4060;
    signed char* eax4061;
    signed char al4062;
    signed char* eax4063;
    signed char* eax4064;
    signed char al4065;
    signed char* eax4066;
    signed char* eax4067;
    signed char al4068;
    signed char* eax4069;
    signed char* eax4070;
    signed char al4071;
    signed char* eax4072;
    signed char* eax4073;
    signed char al4074;
    signed char* eax4075;
    signed char* eax4076;
    signed char al4077;
    signed char* eax4078;
    signed char* eax4079;
    signed char al4080;
    signed char* eax4081;
    signed char* eax4082;
    signed char al4083;
    signed char* eax4084;
    signed char* eax4085;
    signed char al4086;
    signed char* eax4087;
    signed char* eax4088;
    signed char al4089;
    signed char* eax4090;
    signed char* eax4091;
    signed char al4092;
    signed char* eax4093;
    signed char* eax4094;
    signed char al4095;
    signed char* eax4096;
    signed char* eax4097;
    signed char al4098;
    signed char* eax4099;
    signed char* eax4100;
    signed char al4101;
    signed char* eax4102;
    signed char* eax4103;
    signed char al4104;
    signed char* eax4105;
    signed char* eax4106;
    signed char al4107;
    signed char* eax4108;
    signed char* eax4109;
    signed char al4110;
    signed char* eax4111;
    signed char* eax4112;
    signed char al4113;
    signed char* eax4114;
    signed char* eax4115;
    signed char al4116;
    signed char* eax4117;
    signed char* eax4118;
    signed char al4119;
    signed char* eax4120;
    signed char* eax4121;
    signed char al4122;
    signed char* eax4123;
    signed char* eax4124;
    signed char al4125;
    signed char* eax4126;
    signed char* eax4127;
    signed char al4128;
    signed char* eax4129;
    signed char* eax4130;
    signed char al4131;
    signed char* eax4132;
    signed char* eax4133;
    signed char al4134;
    signed char* eax4135;
    signed char* eax4136;
    signed char al4137;
    signed char* eax4138;
    signed char* eax4139;
    signed char al4140;
    signed char* eax4141;
    signed char* eax4142;
    signed char al4143;
    signed char* eax4144;
    signed char* eax4145;
    signed char al4146;
    signed char* eax4147;
    signed char* eax4148;
    signed char al4149;
    signed char* eax4150;
    signed char* eax4151;
    signed char al4152;
    signed char* eax4153;
    signed char* eax4154;
    signed char al4155;
    signed char* eax4156;
    signed char* eax4157;
    signed char al4158;
    signed char* eax4159;
    signed char* eax4160;
    signed char al4161;
    signed char* eax4162;
    signed char* eax4163;
    signed char al4164;
    signed char* eax4165;
    signed char* eax4166;
    signed char al4167;
    signed char* eax4168;
    signed char* eax4169;
    signed char al4170;
    signed char* eax4171;
    signed char* eax4172;
    signed char al4173;
    signed char* eax4174;
    signed char* eax4175;
    signed char al4176;
    signed char* eax4177;
    signed char* eax4178;
    signed char al4179;
    signed char* eax4180;
    signed char* eax4181;
    signed char al4182;
    signed char* eax4183;
    signed char* eax4184;
    signed char al4185;
    signed char* eax4186;
    signed char* eax4187;
    signed char al4188;
    signed char* eax4189;
    signed char* eax4190;
    signed char al4191;
    signed char* eax4192;
    signed char* eax4193;
    signed char al4194;
    signed char* eax4195;
    signed char* eax4196;
    signed char al4197;
    signed char* eax4198;
    signed char* eax4199;
    signed char al4200;
    signed char* eax4201;
    signed char* eax4202;
    signed char al4203;
    signed char* eax4204;
    signed char* eax4205;
    signed char al4206;
    signed char* eax4207;
    signed char* eax4208;
    signed char al4209;
    signed char* eax4210;
    signed char* eax4211;
    signed char al4212;
    signed char* eax4213;
    signed char* eax4214;
    signed char al4215;
    signed char* eax4216;
    signed char* eax4217;
    signed char al4218;
    signed char* eax4219;
    signed char* eax4220;
    signed char al4221;
    signed char* eax4222;
    signed char* eax4223;
    signed char al4224;
    signed char* eax4225;
    signed char* eax4226;
    signed char al4227;
    signed char* eax4228;
    signed char* eax4229;
    signed char al4230;
    signed char* eax4231;
    signed char* eax4232;
    signed char al4233;
    signed char* eax4234;
    signed char* eax4235;
    signed char al4236;
    signed char* eax4237;
    signed char* eax4238;
    signed char al4239;
    signed char* eax4240;
    signed char* eax4241;
    signed char al4242;
    signed char* eax4243;
    signed char* eax4244;
    signed char al4245;
    signed char* eax4246;
    signed char* eax4247;
    signed char al4248;
    signed char* eax4249;
    signed char* eax4250;
    signed char al4251;
    signed char* eax4252;
    signed char* eax4253;
    signed char al4254;
    signed char* eax4255;
    signed char* eax4256;
    signed char al4257;
    signed char* eax4258;
    signed char* eax4259;
    signed char al4260;
    signed char* eax4261;
    signed char* eax4262;
    signed char al4263;
    signed char* eax4264;
    signed char* eax4265;
    signed char al4266;
    signed char* eax4267;
    signed char* eax4268;
    signed char al4269;
    signed char* eax4270;
    signed char* eax4271;
    signed char al4272;
    signed char* eax4273;
    signed char* eax4274;
    signed char al4275;
    signed char* eax4276;
    signed char* eax4277;
    signed char al4278;
    signed char* eax4279;
    signed char* eax4280;
    signed char al4281;
    signed char* eax4282;
    signed char* eax4283;
    signed char al4284;
    signed char* eax4285;
    signed char* eax4286;
    signed char al4287;
    signed char* eax4288;
    signed char* eax4289;
    signed char al4290;
    signed char* eax4291;
    signed char* eax4292;
    signed char al4293;
    signed char* eax4294;
    signed char* eax4295;
    signed char al4296;
    signed char* eax4297;
    signed char* eax4298;
    signed char al4299;
    signed char* eax4300;
    signed char* eax4301;
    signed char al4302;
    signed char* eax4303;
    signed char* eax4304;
    signed char al4305;
    signed char* eax4306;
    signed char* eax4307;
    signed char al4308;
    signed char* eax4309;
    signed char* eax4310;
    signed char al4311;
    signed char* eax4312;
    signed char* eax4313;
    signed char al4314;
    signed char* eax4315;
    signed char* eax4316;
    signed char al4317;
    signed char* eax4318;
    signed char* eax4319;
    signed char al4320;
    signed char* eax4321;
    signed char* eax4322;
    signed char al4323;
    signed char* eax4324;
    signed char* eax4325;
    signed char al4326;
    signed char* eax4327;
    signed char* eax4328;
    signed char al4329;
    signed char* eax4330;
    signed char* eax4331;
    signed char al4332;
    signed char* eax4333;
    signed char* eax4334;
    signed char al4335;
    signed char* eax4336;
    signed char* eax4337;
    signed char al4338;
    signed char* eax4339;
    signed char* eax4340;
    signed char al4341;
    signed char* eax4342;
    signed char* eax4343;
    signed char al4344;
    signed char* eax4345;
    signed char* eax4346;
    signed char al4347;
    signed char* eax4348;
    signed char* eax4349;
    signed char al4350;
    signed char* eax4351;
    signed char* eax4352;
    signed char al4353;
    signed char* eax4354;
    signed char* eax4355;
    signed char al4356;
    signed char* eax4357;
    signed char* eax4358;
    signed char al4359;
    signed char* eax4360;
    signed char* eax4361;
    signed char al4362;
    signed char* eax4363;
    signed char* eax4364;
    signed char al4365;
    signed char* eax4366;
    signed char* eax4367;
    signed char al4368;
    signed char* eax4369;
    signed char* eax4370;
    signed char al4371;
    signed char* eax4372;
    signed char* eax4373;
    signed char al4374;
    signed char* eax4375;
    signed char* eax4376;
    signed char al4377;
    signed char* eax4378;
    signed char* eax4379;
    signed char al4380;
    signed char* eax4381;
    signed char* eax4382;
    signed char al4383;
    signed char* eax4384;
    signed char* eax4385;
    signed char al4386;
    signed char* eax4387;
    signed char* eax4388;
    signed char al4389;
    signed char* eax4390;
    signed char* eax4391;
    signed char al4392;
    signed char* eax4393;
    signed char* eax4394;
    signed char al4395;
    signed char* eax4396;
    signed char* eax4397;
    signed char al4398;
    signed char* eax4399;
    signed char* eax4400;
    signed char al4401;
    signed char* eax4402;
    signed char* eax4403;
    signed char al4404;
    signed char* eax4405;
    signed char* eax4406;
    signed char al4407;
    signed char* eax4408;
    signed char* eax4409;
    signed char al4410;
    signed char* eax4411;
    signed char* eax4412;
    signed char al4413;
    signed char* eax4414;
    signed char* eax4415;
    signed char al4416;
    signed char* eax4417;
    signed char* eax4418;
    signed char al4419;
    signed char* eax4420;
    signed char* eax4421;
    signed char al4422;
    signed char* eax4423;
    signed char* eax4424;
    signed char al4425;
    signed char* eax4426;
    signed char* eax4427;
    signed char al4428;
    signed char* eax4429;
    signed char* eax4430;
    signed char al4431;
    signed char* eax4432;
    signed char* eax4433;
    signed char al4434;
    signed char* eax4435;
    signed char* eax4436;
    signed char al4437;
    signed char* eax4438;
    signed char* eax4439;
    signed char al4440;
    signed char* eax4441;
    signed char* eax4442;
    signed char al4443;
    signed char* eax4444;
    signed char* eax4445;
    signed char al4446;
    signed char* eax4447;
    signed char* eax4448;
    signed char al4449;
    signed char* eax4450;
    signed char* eax4451;
    signed char al4452;
    signed char* eax4453;
    signed char* eax4454;
    signed char al4455;
    signed char* eax4456;
    signed char* eax4457;
    signed char al4458;
    signed char* eax4459;
    signed char* eax4460;
    signed char al4461;
    signed char* eax4462;
    signed char* eax4463;
    signed char al4464;
    signed char* eax4465;
    signed char* eax4466;
    signed char al4467;
    signed char* eax4468;
    signed char* eax4469;
    signed char al4470;
    signed char* eax4471;
    signed char* eax4472;
    signed char al4473;
    signed char* eax4474;
    signed char* eax4475;
    signed char al4476;
    signed char* eax4477;
    signed char* eax4478;
    signed char al4479;
    signed char* eax4480;
    signed char* eax4481;
    signed char al4482;
    signed char* eax4483;
    signed char* eax4484;
    signed char al4485;
    signed char* eax4486;
    signed char* eax4487;
    signed char al4488;
    signed char* eax4489;
    signed char* eax4490;
    signed char al4491;
    signed char* eax4492;
    signed char* eax4493;
    signed char al4494;
    signed char* eax4495;
    signed char* eax4496;
    signed char al4497;
    signed char* eax4498;
    signed char* eax4499;
    signed char al4500;
    signed char* eax4501;
    signed char* eax4502;
    signed char al4503;
    signed char* eax4504;
    signed char* eax4505;
    signed char al4506;
    signed char* eax4507;
    signed char* eax4508;
    signed char al4509;
    signed char* eax4510;
    signed char* eax4511;
    signed char al4512;
    signed char* eax4513;
    signed char* eax4514;
    signed char al4515;
    signed char* eax4516;
    signed char* eax4517;
    signed char al4518;
    signed char* eax4519;
    signed char* eax4520;
    signed char al4521;
    signed char* eax4522;
    signed char* eax4523;
    signed char al4524;
    signed char* eax4525;
    signed char* eax4526;
    signed char al4527;
    signed char* eax4528;
    signed char* eax4529;
    signed char al4530;
    signed char* eax4531;
    signed char* eax4532;
    signed char al4533;
    signed char* eax4534;
    signed char* eax4535;
    signed char al4536;
    signed char* eax4537;
    signed char* eax4538;
    signed char al4539;
    signed char* eax4540;
    signed char* eax4541;
    signed char al4542;
    signed char* eax4543;
    signed char* eax4544;
    signed char al4545;
    signed char* eax4546;
    signed char* eax4547;
    signed char al4548;
    signed char* eax4549;
    signed char* eax4550;
    signed char al4551;
    signed char* eax4552;
    signed char* eax4553;
    signed char al4554;
    signed char* eax4555;
    signed char* eax4556;
    signed char al4557;
    signed char* eax4558;
    signed char* eax4559;
    signed char al4560;
    signed char* eax4561;
    signed char* eax4562;
    signed char al4563;
    signed char* eax4564;
    signed char* eax4565;
    signed char al4566;
    signed char* eax4567;
    signed char* eax4568;
    signed char al4569;
    signed char* eax4570;
    signed char* eax4571;
    signed char al4572;
    signed char* eax4573;
    signed char* eax4574;
    signed char al4575;
    signed char* eax4576;
    signed char* eax4577;
    signed char al4578;
    signed char* eax4579;
    signed char* eax4580;
    signed char al4581;
    signed char* eax4582;
    signed char* eax4583;
    signed char al4584;
    signed char* eax4585;
    signed char* eax4586;
    signed char al4587;
    signed char* eax4588;
    signed char* eax4589;
    signed char al4590;
    signed char* eax4591;
    signed char* eax4592;
    signed char al4593;
    signed char* eax4594;
    signed char* eax4595;
    signed char al4596;
    signed char* eax4597;
    signed char* eax4598;
    signed char al4599;
    signed char* eax4600;
    signed char* eax4601;
    signed char al4602;
    signed char* eax4603;
    signed char* eax4604;
    signed char al4605;
    signed char* eax4606;
    signed char* eax4607;
    signed char al4608;
    signed char* eax4609;
    signed char* eax4610;
    signed char al4611;
    signed char* eax4612;
    signed char* eax4613;
    signed char al4614;
    signed char* eax4615;
    signed char* eax4616;
    signed char al4617;
    signed char* eax4618;
    signed char* eax4619;
    signed char al4620;
    signed char* eax4621;
    signed char* eax4622;
    signed char al4623;
    signed char* eax4624;
    signed char* eax4625;
    signed char al4626;
    signed char* eax4627;
    signed char* eax4628;
    signed char al4629;
    signed char* eax4630;
    signed char* eax4631;
    signed char al4632;
    signed char* eax4633;
    signed char* eax4634;
    signed char al4635;
    signed char* eax4636;
    signed char* eax4637;
    signed char al4638;
    signed char* eax4639;
    signed char* eax4640;
    signed char al4641;
    signed char* eax4642;
    signed char* eax4643;
    signed char al4644;
    signed char* eax4645;
    signed char* eax4646;
    signed char al4647;
    signed char* eax4648;
    signed char* eax4649;
    signed char al4650;
    signed char* eax4651;
    signed char* eax4652;
    signed char al4653;
    signed char* eax4654;
    signed char* eax4655;
    signed char al4656;
    signed char* eax4657;
    signed char* eax4658;
    signed char al4659;
    signed char* eax4660;
    signed char* eax4661;
    signed char al4662;
    signed char* eax4663;
    signed char* eax4664;
    signed char al4665;
    signed char* eax4666;
    signed char* eax4667;
    signed char al4668;
    signed char* eax4669;
    signed char* eax4670;
    signed char al4671;
    signed char* eax4672;
    signed char* eax4673;
    signed char al4674;
    signed char* eax4675;
    signed char* eax4676;
    signed char al4677;
    signed char* eax4678;
    signed char* eax4679;
    signed char al4680;
    signed char* eax4681;
    signed char* eax4682;
    signed char al4683;
    signed char* eax4684;
    signed char* eax4685;
    signed char al4686;
    signed char* eax4687;
    signed char* eax4688;
    signed char al4689;
    signed char* eax4690;
    signed char* eax4691;
    signed char al4692;
    signed char* eax4693;
    signed char* eax4694;
    signed char al4695;
    signed char* eax4696;
    signed char* eax4697;
    signed char al4698;
    signed char* eax4699;
    signed char* eax4700;
    signed char al4701;
    signed char* eax4702;
    signed char* eax4703;
    signed char al4704;
    signed char* eax4705;
    signed char* eax4706;
    signed char al4707;
    signed char* eax4708;
    signed char* eax4709;
    signed char al4710;
    signed char* eax4711;
    signed char* eax4712;
    signed char al4713;
    signed char* eax4714;
    signed char* eax4715;
    signed char al4716;
    signed char* eax4717;
    signed char* eax4718;
    signed char al4719;
    signed char* eax4720;
    signed char* eax4721;
    signed char al4722;
    signed char* eax4723;
    signed char* eax4724;
    signed char al4725;
    signed char* eax4726;
    signed char* eax4727;
    signed char al4728;
    signed char* eax4729;
    signed char* eax4730;
    signed char al4731;
    signed char* eax4732;
    signed char* eax4733;
    signed char al4734;
    signed char* eax4735;
    signed char* eax4736;
    signed char al4737;
    signed char* eax4738;
    signed char* eax4739;
    signed char al4740;
    signed char* eax4741;
    signed char* eax4742;
    signed char al4743;
    signed char* eax4744;
    signed char* eax4745;
    signed char al4746;
    signed char* eax4747;
    signed char* eax4748;
    signed char al4749;
    signed char* eax4750;
    signed char* eax4751;
    signed char al4752;
    signed char* eax4753;
    signed char* eax4754;
    signed char al4755;
    signed char* eax4756;
    signed char* eax4757;
    signed char al4758;
    signed char* eax4759;
    signed char* eax4760;
    signed char al4761;
    signed char* eax4762;
    signed char* eax4763;
    signed char al4764;
    signed char* eax4765;
    signed char* eax4766;
    signed char al4767;
    signed char* eax4768;
    signed char* eax4769;
    signed char al4770;
    signed char* eax4771;
    signed char* eax4772;
    signed char al4773;
    signed char* eax4774;
    signed char* eax4775;
    signed char al4776;
    signed char* eax4777;
    signed char* eax4778;
    signed char al4779;
    signed char* eax4780;
    signed char* eax4781;
    signed char al4782;
    signed char* eax4783;
    signed char* eax4784;
    signed char al4785;
    signed char* eax4786;
    signed char* eax4787;
    signed char al4788;
    signed char* eax4789;
    signed char* eax4790;
    signed char al4791;
    signed char* eax4792;
    signed char* eax4793;
    signed char al4794;
    signed char* eax4795;
    signed char* eax4796;
    signed char al4797;
    signed char* eax4798;
    signed char* eax4799;
    signed char al4800;
    signed char* eax4801;
    signed char* eax4802;
    signed char al4803;
    signed char* eax4804;
    signed char* eax4805;
    signed char al4806;
    signed char* eax4807;
    signed char* eax4808;
    signed char al4809;
    signed char* eax4810;
    signed char* eax4811;
    signed char al4812;
    signed char* eax4813;
    signed char* eax4814;
    signed char al4815;
    signed char* eax4816;
    signed char* eax4817;
    signed char al4818;
    signed char* eax4819;
    signed char* eax4820;
    signed char al4821;
    signed char* eax4822;
    signed char* eax4823;
    signed char al4824;
    signed char* eax4825;
    signed char* eax4826;
    signed char al4827;
    signed char* eax4828;
    signed char* eax4829;
    signed char al4830;
    signed char* eax4831;
    signed char* eax4832;
    signed char al4833;
    signed char* eax4834;
    signed char* eax4835;
    signed char al4836;
    signed char* eax4837;
    signed char* eax4838;
    signed char al4839;
    signed char* eax4840;
    signed char* eax4841;
    signed char al4842;
    signed char* eax4843;
    signed char* eax4844;
    signed char al4845;
    signed char* eax4846;
    signed char* eax4847;
    signed char al4848;
    signed char* eax4849;
    signed char* eax4850;
    signed char al4851;
    signed char* eax4852;
    signed char* eax4853;
    signed char al4854;
    signed char* eax4855;
    signed char* eax4856;
    signed char al4857;
    signed char* eax4858;
    signed char* eax4859;
    signed char al4860;
    signed char* eax4861;
    signed char* eax4862;
    signed char al4863;
    signed char* eax4864;
    signed char* eax4865;
    signed char al4866;
    signed char* eax4867;
    signed char* eax4868;
    signed char al4869;
    signed char* eax4870;
    signed char* eax4871;
    signed char al4872;
    signed char* eax4873;
    signed char* eax4874;
    signed char al4875;
    signed char* eax4876;
    signed char* eax4877;
    signed char al4878;
    signed char* eax4879;
    signed char* eax4880;
    signed char al4881;
    signed char* eax4882;
    signed char* eax4883;
    signed char al4884;
    signed char* eax4885;
    signed char* eax4886;
    signed char al4887;
    signed char* eax4888;
    signed char* eax4889;
    signed char al4890;
    signed char* eax4891;
    signed char* eax4892;
    signed char al4893;
    signed char* eax4894;
    signed char* eax4895;
    signed char al4896;
    signed char* eax4897;
    signed char* eax4898;
    signed char al4899;
    signed char* eax4900;
    signed char* eax4901;
    signed char al4902;
    signed char* eax4903;
    signed char* eax4904;
    signed char al4905;
    signed char* eax4906;
    signed char* eax4907;
    signed char al4908;
    signed char* eax4909;
    signed char* eax4910;
    signed char al4911;
    signed char* eax4912;
    signed char* eax4913;
    signed char al4914;
    signed char* eax4915;
    signed char* eax4916;
    signed char al4917;
    signed char* eax4918;
    signed char* eax4919;
    signed char al4920;
    signed char* eax4921;
    signed char* eax4922;
    signed char al4923;
    signed char* eax4924;
    signed char* eax4925;
    signed char al4926;
    signed char* eax4927;
    signed char* eax4928;
    signed char al4929;
    signed char* eax4930;
    signed char* eax4931;
    signed char al4932;
    signed char* eax4933;
    signed char* eax4934;
    signed char al4935;
    signed char* eax4936;
    signed char* eax4937;
    signed char al4938;
    signed char* eax4939;
    signed char* eax4940;
    signed char al4941;
    signed char* eax4942;
    signed char* eax4943;
    signed char al4944;
    signed char* eax4945;
    signed char* eax4946;
    signed char al4947;
    signed char* eax4948;
    signed char* eax4949;
    signed char al4950;
    signed char* eax4951;
    signed char* eax4952;
    signed char al4953;
    signed char* eax4954;
    signed char* eax4955;
    signed char al4956;
    signed char* eax4957;
    signed char* eax4958;
    signed char al4959;
    signed char* eax4960;
    signed char* eax4961;
    signed char al4962;
    signed char* eax4963;
    signed char* eax4964;
    signed char al4965;
    signed char* eax4966;
    signed char* eax4967;
    signed char al4968;
    signed char* eax4969;
    signed char* eax4970;
    signed char al4971;
    signed char* eax4972;
    signed char* eax4973;
    signed char al4974;
    signed char* eax4975;
    signed char* eax4976;
    signed char al4977;
    signed char* eax4978;
    signed char* eax4979;
    signed char al4980;
    signed char* eax4981;
    signed char* eax4982;
    signed char al4983;
    signed char* eax4984;
    signed char* eax4985;
    signed char al4986;
    signed char* eax4987;
    signed char* eax4988;
    signed char al4989;
    signed char* eax4990;
    signed char* eax4991;
    signed char al4992;
    signed char* eax4993;
    signed char* eax4994;
    signed char al4995;
    signed char* eax4996;
    signed char* eax4997;
    signed char al4998;
    signed char* eax4999;
    signed char* eax5000;
    signed char al5001;
    signed char* eax5002;
    signed char* eax5003;
    signed char al5004;
    signed char* eax5005;
    signed char* eax5006;
    signed char al5007;
    signed char* eax5008;
    signed char* eax5009;
    signed char al5010;
    signed char* eax5011;
    signed char* eax5012;
    signed char al5013;
    signed char* eax5014;
    signed char* eax5015;
    signed char al5016;
    signed char* eax5017;
    signed char* eax5018;
    signed char al5019;
    signed char* eax5020;
    signed char* eax5021;
    signed char al5022;
    signed char* eax5023;
    signed char* eax5024;
    signed char al5025;
    signed char* eax5026;
    signed char* eax5027;
    signed char al5028;
    signed char* eax5029;
    signed char* eax5030;
    signed char al5031;
    signed char* eax5032;
    signed char* eax5033;
    signed char al5034;
    signed char* eax5035;
    signed char* eax5036;
    signed char al5037;
    signed char* eax5038;
    signed char* eax5039;
    signed char al5040;
    signed char* eax5041;
    signed char* eax5042;
    signed char al5043;
    signed char* eax5044;
    signed char* eax5045;
    signed char al5046;
    signed char* eax5047;
    signed char* eax5048;
    signed char al5049;
    signed char* eax5050;
    signed char* eax5051;
    signed char al5052;
    signed char* eax5053;
    signed char* eax5054;
    signed char al5055;
    signed char* eax5056;
    signed char* eax5057;
    signed char al5058;
    signed char* eax5059;
    signed char* eax5060;
    signed char al5061;
    signed char* eax5062;
    signed char* eax5063;
    signed char al5064;
    signed char* eax5065;
    signed char* eax5066;
    signed char al5067;
    signed char* eax5068;
    signed char* eax5069;
    signed char al5070;
    signed char* eax5071;
    signed char* eax5072;
    signed char al5073;
    signed char* eax5074;
    signed char* eax5075;
    signed char al5076;
    signed char* eax5077;
    signed char* eax5078;
    signed char al5079;
    signed char* eax5080;
    signed char* eax5081;
    signed char al5082;
    signed char* eax5083;
    signed char* eax5084;
    signed char al5085;
    signed char* eax5086;
    signed char* eax5087;
    signed char al5088;
    signed char* eax5089;
    signed char* eax5090;
    signed char al5091;
    signed char* eax5092;
    signed char* eax5093;
    signed char al5094;
    signed char* eax5095;
    signed char* eax5096;
    signed char al5097;
    signed char* eax5098;
    signed char* eax5099;
    signed char al5100;
    signed char* eax5101;
    signed char* eax5102;
    signed char al5103;
    signed char* eax5104;
    signed char* eax5105;
    signed char al5106;
    signed char* eax5107;
    signed char* eax5108;
    signed char al5109;
    signed char* eax5110;
    signed char* eax5111;
    signed char al5112;
    signed char* eax5113;
    signed char* eax5114;
    signed char al5115;
    signed char* eax5116;
    signed char* eax5117;
    signed char al5118;
    signed char* eax5119;
    signed char* eax5120;
    signed char al5121;
    signed char* eax5122;
    signed char* eax5123;
    signed char al5124;
    signed char* eax5125;
    signed char* eax5126;
    signed char al5127;
    signed char* eax5128;
    signed char* eax5129;
    signed char al5130;
    signed char* eax5131;
    signed char* eax5132;
    signed char al5133;
    signed char* eax5134;
    signed char* eax5135;
    signed char al5136;
    signed char* eax5137;
    signed char* eax5138;
    signed char al5139;
    signed char* eax5140;
    signed char* eax5141;
    signed char al5142;
    signed char* eax5143;
    signed char* eax5144;
    signed char al5145;
    signed char* eax5146;
    signed char* eax5147;
    signed char al5148;
    signed char* eax5149;
    signed char* eax5150;
    signed char al5151;
    signed char* eax5152;
    signed char* eax5153;
    signed char al5154;
    signed char* eax5155;
    signed char* eax5156;
    signed char al5157;
    signed char* eax5158;
    signed char* eax5159;
    signed char al5160;
    signed char* eax5161;
    signed char* eax5162;
    signed char al5163;
    signed char* eax5164;
    signed char* eax5165;
    signed char al5166;
    signed char* eax5167;
    signed char* eax5168;
    signed char al5169;
    signed char* eax5170;
    signed char* eax5171;
    signed char al5172;
    signed char* eax5173;
    signed char* eax5174;
    signed char al5175;
    signed char* eax5176;
    signed char* eax5177;
    signed char al5178;
    signed char* eax5179;
    signed char* eax5180;
    signed char al5181;
    signed char* eax5182;
    signed char* eax5183;
    signed char al5184;
    signed char* eax5185;
    signed char* eax5186;
    signed char al5187;
    signed char* eax5188;
    signed char* eax5189;
    signed char al5190;
    signed char* eax5191;
    signed char* eax5192;
    signed char al5193;
    signed char* eax5194;
    signed char* eax5195;
    signed char al5196;
    signed char* eax5197;
    signed char* eax5198;
    signed char al5199;
    signed char* eax5200;
    signed char* eax5201;
    signed char al5202;
    signed char* eax5203;
    signed char* eax5204;
    signed char al5205;
    signed char* eax5206;
    signed char* eax5207;
    signed char al5208;
    signed char* eax5209;
    signed char* eax5210;
    signed char al5211;
    signed char* eax5212;
    signed char* eax5213;
    signed char al5214;
    signed char* eax5215;
    signed char* eax5216;
    signed char al5217;
    signed char* eax5218;
    signed char* eax5219;
    signed char al5220;
    signed char* eax5221;
    signed char* eax5222;
    signed char al5223;
    signed char* eax5224;
    signed char* eax5225;
    signed char al5226;
    signed char* eax5227;
    signed char* eax5228;
    signed char al5229;
    signed char* eax5230;
    signed char* eax5231;
    signed char al5232;
    signed char* eax5233;
    signed char* eax5234;
    signed char al5235;
    signed char* eax5236;
    signed char* eax5237;
    signed char al5238;
    signed char* eax5239;
    signed char* eax5240;
    signed char al5241;
    signed char* eax5242;
    signed char* eax5243;
    signed char al5244;
    signed char* eax5245;
    signed char* eax5246;
    signed char al5247;
    signed char* eax5248;
    signed char* eax5249;
    signed char al5250;
    signed char* eax5251;
    signed char* eax5252;
    signed char al5253;
    signed char* eax5254;
    signed char* eax5255;
    signed char al5256;
    signed char* eax5257;
    signed char* eax5258;
    signed char al5259;
    signed char* eax5260;
    signed char* eax5261;
    signed char al5262;
    signed char* eax5263;
    signed char* eax5264;
    signed char al5265;
    signed char* eax5266;
    signed char* eax5267;
    signed char al5268;
    signed char* eax5269;
    signed char* eax5270;
    signed char al5271;
    signed char* eax5272;
    signed char* eax5273;
    signed char al5274;
    signed char* eax5275;
    signed char* eax5276;
    signed char al5277;
    signed char* eax5278;
    signed char* eax5279;
    signed char al5280;
    signed char* eax5281;
    signed char* eax5282;
    signed char al5283;
    signed char* eax5284;
    signed char* eax5285;
    signed char al5286;
    signed char* eax5287;
    signed char* eax5288;
    signed char al5289;
    signed char* eax5290;
    signed char* eax5291;
    signed char al5292;
    signed char* eax5293;
    signed char* eax5294;
    signed char al5295;
    signed char* eax5296;
    signed char* eax5297;
    signed char al5298;
    signed char* eax5299;
    signed char* eax5300;
    signed char al5301;
    signed char* eax5302;
    signed char* eax5303;
    signed char al5304;
    signed char* eax5305;
    signed char* eax5306;
    signed char al5307;
    signed char* eax5308;
    signed char* eax5309;
    signed char al5310;
    signed char* eax5311;
    signed char* eax5312;
    signed char al5313;
    signed char* eax5314;
    signed char* eax5315;
    signed char al5316;
    signed char* eax5317;
    signed char* eax5318;
    signed char al5319;
    signed char* eax5320;
    signed char* eax5321;
    signed char al5322;
    signed char* eax5323;
    signed char* eax5324;
    signed char al5325;
    signed char* eax5326;
    signed char* eax5327;
    signed char al5328;
    signed char* eax5329;
    signed char* eax5330;
    signed char al5331;
    signed char* eax5332;
    signed char* eax5333;
    signed char al5334;
    signed char* eax5335;
    signed char* eax5336;
    signed char al5337;
    signed char* eax5338;
    signed char* eax5339;
    signed char al5340;
    signed char* eax5341;
    signed char* eax5342;
    signed char al5343;
    signed char* eax5344;
    signed char* eax5345;
    signed char al5346;
    signed char* eax5347;
    signed char* eax5348;
    signed char al5349;
    signed char* eax5350;
    signed char* eax5351;
    signed char al5352;
    signed char* eax5353;
    signed char* eax5354;
    signed char al5355;
    signed char* eax5356;
    signed char* eax5357;
    signed char al5358;
    signed char* eax5359;
    signed char* eax5360;
    signed char al5361;
    signed char* eax5362;
    signed char* eax5363;
    signed char al5364;
    signed char* eax5365;
    signed char* eax5366;
    signed char al5367;
    signed char* eax5368;
    signed char* eax5369;
    signed char al5370;
    signed char* eax5371;
    signed char* eax5372;
    signed char al5373;
    signed char* eax5374;
    signed char* eax5375;
    signed char al5376;
    signed char* eax5377;
    signed char* eax5378;
    signed char al5379;
    signed char* eax5380;
    signed char* eax5381;
    signed char al5382;
    signed char* eax5383;
    signed char* eax5384;
    signed char al5385;
    signed char* eax5386;
    signed char* eax5387;
    signed char al5388;
    signed char* eax5389;
    signed char* eax5390;
    signed char al5391;
    signed char* eax5392;
    signed char* eax5393;
    signed char al5394;
    signed char* eax5395;
    signed char* eax5396;
    signed char al5397;
    signed char* eax5398;
    signed char* eax5399;
    signed char al5400;
    signed char* eax5401;
    signed char* eax5402;
    signed char al5403;
    signed char* eax5404;
    signed char* eax5405;
    signed char al5406;
    signed char* eax5407;
    signed char* eax5408;
    signed char al5409;
    signed char* eax5410;
    signed char* eax5411;
    signed char al5412;
    signed char* eax5413;
    signed char* eax5414;
    signed char al5415;
    signed char* eax5416;
    signed char* eax5417;
    signed char al5418;
    signed char* eax5419;
    signed char* eax5420;
    signed char al5421;
    signed char* eax5422;
    signed char* eax5423;
    signed char al5424;
    signed char* eax5425;
    signed char* eax5426;
    signed char al5427;
    signed char* eax5428;
    signed char* eax5429;
    signed char al5430;
    signed char* eax5431;
    signed char* eax5432;
    signed char al5433;
    signed char* eax5434;
    signed char* eax5435;
    signed char al5436;
    signed char* eax5437;
    signed char* eax5438;
    signed char al5439;
    signed char* eax5440;
    signed char* eax5441;
    signed char al5442;
    signed char* eax5443;
    signed char* eax5444;
    signed char al5445;
    signed char* eax5446;
    signed char* eax5447;
    signed char al5448;
    signed char* eax5449;
    signed char* eax5450;
    signed char al5451;
    signed char* eax5452;
    signed char* eax5453;
    signed char al5454;
    signed char* eax5455;
    signed char* eax5456;
    signed char al5457;
    signed char* eax5458;
    signed char* eax5459;
    signed char al5460;
    signed char* eax5461;
    signed char* eax5462;
    signed char al5463;
    signed char* eax5464;
    signed char* eax5465;
    signed char al5466;
    signed char* eax5467;
    signed char* eax5468;
    signed char al5469;
    signed char* eax5470;
    signed char* eax5471;
    signed char al5472;
    signed char* eax5473;
    signed char* eax5474;
    signed char al5475;
    signed char* eax5476;
    signed char* eax5477;
    signed char al5478;
    signed char* eax5479;
    signed char* eax5480;
    signed char al5481;
    signed char* eax5482;
    signed char* eax5483;
    signed char al5484;
    signed char* eax5485;
    signed char* eax5486;
    signed char al5487;
    signed char* eax5488;
    signed char* eax5489;
    signed char al5490;
    signed char* eax5491;
    signed char* eax5492;
    signed char al5493;
    signed char* eax5494;
    signed char* eax5495;
    signed char al5496;
    signed char* eax5497;
    signed char* eax5498;
    signed char al5499;
    signed char* eax5500;
    signed char* eax5501;
    signed char al5502;
    signed char* eax5503;
    signed char* eax5504;
    signed char al5505;
    signed char* eax5506;
    signed char* eax5507;
    signed char al5508;
    signed char* eax5509;
    signed char* eax5510;
    signed char al5511;
    signed char* eax5512;
    signed char* eax5513;
    signed char al5514;
    signed char* eax5515;
    signed char* eax5516;
    signed char al5517;
    signed char* eax5518;
    signed char* eax5519;
    signed char al5520;
    signed char* eax5521;
    signed char* eax5522;
    signed char al5523;
    signed char* eax5524;
    signed char* eax5525;
    signed char al5526;
    signed char* eax5527;
    signed char* eax5528;
    signed char al5529;
    signed char* eax5530;
    signed char* eax5531;
    signed char al5532;
    signed char* eax5533;
    signed char* eax5534;
    signed char al5535;
    signed char* eax5536;
    signed char* eax5537;
    signed char al5538;
    signed char* eax5539;
    signed char* eax5540;
    signed char al5541;
    signed char* eax5542;
    signed char* eax5543;
    signed char al5544;
    signed char* eax5545;
    signed char* eax5546;
    signed char al5547;
    signed char* eax5548;
    signed char* eax5549;
    signed char al5550;
    signed char* eax5551;
    signed char* eax5552;
    signed char al5553;
    signed char* eax5554;
    signed char* eax5555;
    signed char al5556;
    signed char* eax5557;
    signed char* eax5558;
    signed char al5559;
    signed char* eax5560;
    signed char* eax5561;
    signed char al5562;
    signed char* eax5563;
    signed char* eax5564;
    signed char al5565;
    signed char* eax5566;
    signed char* eax5567;
    signed char al5568;
    signed char* eax5569;
    signed char* eax5570;
    signed char al5571;
    signed char* eax5572;
    signed char* eax5573;
    signed char al5574;
    signed char* eax5575;
    signed char* eax5576;
    signed char al5577;
    signed char* eax5578;
    signed char* eax5579;
    signed char al5580;
    signed char* eax5581;
    signed char* eax5582;
    signed char al5583;
    signed char* eax5584;
    signed char* eax5585;
    signed char al5586;
    signed char* eax5587;
    signed char* eax5588;
    signed char al5589;
    signed char* eax5590;
    signed char* eax5591;
    signed char al5592;
    signed char* eax5593;
    signed char* eax5594;
    signed char al5595;
    signed char* eax5596;
    signed char* eax5597;
    signed char al5598;
    signed char* eax5599;
    signed char* eax5600;
    signed char al5601;
    signed char* eax5602;
    signed char* eax5603;
    signed char al5604;
    signed char* eax5605;
    signed char* eax5606;
    signed char al5607;
    signed char* eax5608;
    signed char* eax5609;
    signed char al5610;
    signed char* eax5611;
    signed char* eax5612;
    signed char al5613;
    signed char* eax5614;
    signed char* eax5615;
    signed char al5616;
    signed char* eax5617;
    signed char* eax5618;
    signed char al5619;
    signed char* eax5620;
    signed char* eax5621;
    signed char al5622;
    signed char* eax5623;
    signed char* eax5624;
    signed char al5625;
    signed char* eax5626;
    signed char* eax5627;
    signed char al5628;
    signed char* eax5629;
    signed char* eax5630;
    signed char al5631;
    signed char* eax5632;
    signed char* eax5633;
    signed char al5634;
    signed char* eax5635;
    signed char* eax5636;
    signed char al5637;
    signed char* eax5638;
    signed char* eax5639;
    signed char al5640;
    signed char* eax5641;
    signed char* eax5642;
    signed char al5643;
    signed char* eax5644;
    signed char* eax5645;
    signed char al5646;
    signed char* eax5647;
    signed char* eax5648;
    signed char al5649;
    signed char* eax5650;
    signed char* eax5651;
    signed char al5652;
    signed char* eax5653;
    signed char* eax5654;
    signed char al5655;
    signed char* eax5656;
    signed char* eax5657;
    signed char al5658;
    signed char* eax5659;
    signed char* eax5660;
    signed char al5661;
    signed char* eax5662;
    signed char* eax5663;
    signed char al5664;
    signed char* eax5665;
    signed char* eax5666;
    signed char al5667;
    signed char* eax5668;
    signed char* eax5669;
    signed char al5670;
    signed char* eax5671;
    signed char* eax5672;
    signed char al5673;
    signed char* eax5674;
    signed char* eax5675;
    signed char al5676;
    signed char* eax5677;
    signed char* eax5678;
    signed char al5679;
    signed char* eax5680;
    signed char* eax5681;
    signed char al5682;
    signed char* eax5683;
    signed char* eax5684;
    signed char al5685;
    signed char* eax5686;
    signed char* eax5687;
    signed char al5688;
    signed char* eax5689;
    signed char* eax5690;
    signed char al5691;
    signed char* eax5692;
    signed char* eax5693;
    signed char al5694;
    signed char* eax5695;
    signed char* eax5696;
    signed char al5697;
    signed char* eax5698;
    signed char* eax5699;
    signed char al5700;
    signed char* eax5701;
    signed char* eax5702;
    signed char al5703;
    signed char* eax5704;
    signed char* eax5705;
    signed char al5706;
    signed char* eax5707;
    signed char* eax5708;
    signed char al5709;
    signed char* eax5710;
    signed char* eax5711;
    signed char al5712;
    signed char* eax5713;
    signed char* eax5714;
    signed char al5715;
    signed char* eax5716;
    signed char* eax5717;
    signed char al5718;
    signed char* eax5719;
    signed char* eax5720;
    signed char al5721;
    signed char* eax5722;
    signed char* eax5723;
    signed char al5724;
    signed char* eax5725;
    signed char* eax5726;
    signed char al5727;
    signed char* eax5728;
    signed char* eax5729;
    signed char al5730;
    signed char* eax5731;
    signed char* eax5732;
    signed char al5733;
    signed char* eax5734;
    signed char* eax5735;
    signed char al5736;
    signed char* eax5737;
    signed char* eax5738;
    signed char al5739;
    signed char* eax5740;
    signed char* eax5741;
    signed char al5742;
    signed char* eax5743;
    signed char* eax5744;
    signed char al5745;
    signed char* eax5746;
    signed char* eax5747;
    signed char al5748;
    signed char* eax5749;
    signed char* eax5750;
    signed char al5751;
    signed char* eax5752;
    signed char* eax5753;
    signed char al5754;
    signed char* eax5755;
    signed char* eax5756;
    signed char al5757;
    signed char* eax5758;
    signed char* eax5759;
    signed char al5760;
    signed char* eax5761;
    signed char* eax5762;
    signed char al5763;
    signed char* eax5764;
    signed char* eax5765;
    signed char al5766;
    signed char* eax5767;
    signed char* eax5768;
    signed char al5769;
    signed char* eax5770;
    signed char* eax5771;
    signed char al5772;
    signed char* eax5773;
    signed char* eax5774;
    signed char al5775;
    signed char* eax5776;
    signed char* eax5777;
    signed char al5778;
    signed char* eax5779;
    signed char* eax5780;
    signed char al5781;
    signed char* eax5782;
    signed char* eax5783;
    signed char al5784;
    signed char* eax5785;
    signed char* eax5786;
    signed char al5787;
    signed char* eax5788;
    signed char* eax5789;
    signed char al5790;
    signed char* eax5791;
    signed char* eax5792;
    signed char al5793;
    signed char* eax5794;
    signed char* eax5795;
    signed char al5796;
    signed char* eax5797;
    signed char* eax5798;
    signed char al5799;
    signed char* eax5800;
    signed char* eax5801;
    signed char al5802;
    signed char* eax5803;
    signed char* eax5804;
    signed char al5805;
    signed char* eax5806;
    signed char* eax5807;
    signed char al5808;
    signed char* eax5809;
    signed char* eax5810;
    signed char al5811;
    signed char* eax5812;
    signed char* eax5813;
    signed char al5814;
    signed char* eax5815;
    signed char* eax5816;
    signed char al5817;
    signed char* eax5818;
    signed char* eax5819;
    signed char al5820;
    signed char* eax5821;
    signed char* eax5822;
    signed char al5823;
    signed char* eax5824;
    signed char* eax5825;
    signed char al5826;
    signed char* eax5827;
    signed char* eax5828;
    signed char al5829;
    signed char* eax5830;
    signed char* eax5831;
    signed char al5832;
    signed char* eax5833;
    signed char* eax5834;
    signed char al5835;
    signed char* eax5836;
    signed char* eax5837;
    signed char al5838;
    signed char* eax5839;
    signed char* eax5840;
    signed char al5841;
    signed char* eax5842;
    signed char* eax5843;
    signed char al5844;
    signed char* eax5845;
    signed char* eax5846;
    signed char al5847;
    signed char* eax5848;
    signed char* eax5849;
    signed char al5850;
    signed char* eax5851;
    signed char* eax5852;
    signed char al5853;
    signed char* eax5854;
    signed char* eax5855;
    signed char al5856;
    signed char* eax5857;
    signed char* eax5858;
    signed char al5859;
    signed char* eax5860;
    signed char* eax5861;
    signed char al5862;
    signed char* eax5863;
    signed char* eax5864;
    signed char al5865;
    signed char* eax5866;
    signed char* eax5867;
    signed char al5868;
    signed char* eax5869;
    signed char* eax5870;
    signed char al5871;
    signed char* eax5872;
    signed char* eax5873;
    signed char al5874;
    signed char* eax5875;
    signed char* eax5876;
    signed char al5877;
    signed char* eax5878;
    signed char* eax5879;
    signed char al5880;
    signed char* eax5881;
    signed char* eax5882;
    signed char al5883;
    signed char* eax5884;
    signed char* eax5885;
    signed char al5886;
    signed char* eax5887;
    signed char* eax5888;
    signed char al5889;
    signed char* eax5890;
    signed char* eax5891;
    signed char al5892;
    signed char* eax5893;
    signed char* eax5894;
    signed char al5895;
    signed char* eax5896;
    signed char* eax5897;
    signed char al5898;
    signed char* eax5899;
    signed char* eax5900;
    signed char al5901;
    signed char* eax5902;
    signed char* eax5903;
    signed char al5904;
    signed char* eax5905;
    signed char* eax5906;
    signed char al5907;
    signed char* eax5908;
    signed char* eax5909;
    signed char al5910;
    signed char* eax5911;
    signed char* eax5912;
    signed char al5913;
    signed char* eax5914;
    signed char* eax5915;
    signed char al5916;
    signed char* eax5917;
    signed char* eax5918;
    signed char al5919;
    signed char* eax5920;
    signed char* eax5921;
    signed char al5922;
    signed char* eax5923;
    signed char* eax5924;
    signed char al5925;
    signed char* eax5926;
    signed char* eax5927;
    signed char al5928;
    signed char* eax5929;
    signed char* eax5930;
    signed char al5931;
    signed char* eax5932;
    signed char* eax5933;
    signed char al5934;
    signed char* eax5935;
    signed char* eax5936;
    signed char al5937;
    signed char* eax5938;
    signed char* eax5939;
    signed char al5940;
    signed char* eax5941;
    signed char* eax5942;
    signed char al5943;
    signed char* eax5944;
    signed char* eax5945;
    signed char al5946;
    signed char* eax5947;
    signed char* eax5948;
    signed char al5949;
    signed char* eax5950;
    signed char* eax5951;
    signed char al5952;
    signed char* eax5953;
    signed char* eax5954;
    signed char al5955;
    signed char* eax5956;
    signed char* eax5957;
    signed char al5958;
    signed char* eax5959;
    signed char* eax5960;
    signed char al5961;
    signed char* eax5962;
    signed char* eax5963;
    signed char al5964;
    signed char* eax5965;
    signed char* eax5966;
    signed char al5967;
    signed char* eax5968;
    signed char* eax5969;
    signed char al5970;
    signed char* eax5971;
    signed char* eax5972;
    signed char al5973;
    signed char* eax5974;
    signed char* eax5975;
    signed char al5976;
    signed char* eax5977;
    signed char* eax5978;
    signed char al5979;
    signed char* eax5980;
    signed char* eax5981;
    signed char al5982;
    signed char* eax5983;
    signed char* eax5984;
    signed char al5985;
    signed char* eax5986;
    signed char* eax5987;
    signed char al5988;
    signed char* eax5989;
    signed char* eax5990;
    signed char al5991;
    signed char* eax5992;
    signed char* eax5993;
    signed char al5994;
    signed char* eax5995;
    signed char* eax5996;
    signed char al5997;
    signed char* eax5998;
    signed char* eax5999;
    signed char al6000;
    signed char* eax6001;
    signed char* eax6002;
    signed char al6003;
    signed char* eax6004;
    signed char* eax6005;
    signed char al6006;
    signed char* eax6007;
    signed char* eax6008;
    signed char al6009;
    signed char* eax6010;
    signed char* eax6011;
    signed char al6012;
    signed char* eax6013;
    signed char* eax6014;
    signed char al6015;
    signed char* eax6016;
    signed char* eax6017;
    signed char al6018;
    signed char* eax6019;
    signed char* eax6020;
    signed char al6021;
    signed char* eax6022;
    signed char* eax6023;
    signed char al6024;
    signed char* eax6025;
    signed char* eax6026;
    signed char al6027;
    signed char* eax6028;
    signed char* eax6029;
    signed char al6030;
    signed char* eax6031;
    signed char* eax6032;
    signed char al6033;
    signed char* eax6034;
    signed char* eax6035;
    signed char al6036;
    signed char* eax6037;
    signed char* eax6038;
    signed char al6039;
    signed char* eax6040;
    signed char* eax6041;
    signed char al6042;
    signed char* eax6043;
    signed char* eax6044;
    signed char al6045;
    signed char* eax6046;
    signed char* eax6047;
    signed char al6048;
    signed char* eax6049;
    signed char* eax6050;
    signed char al6051;
    signed char* eax6052;
    signed char* eax6053;
    signed char al6054;

    *eax1 = reinterpret_cast<signed char>(*eax2 + al3);
    *eax4 = reinterpret_cast<signed char>(*eax5 + al6);
    *eax7 = reinterpret_cast<signed char>(*eax8 + al9);
    *eax10 = reinterpret_cast<signed char>(*eax11 + al12);
    *eax13 = reinterpret_cast<signed char>(*eax14 + al15);
    *eax16 = reinterpret_cast<signed char>(*eax17 + al18);
    *eax19 = reinterpret_cast<signed char>(*eax20 + al21);
    *eax22 = reinterpret_cast<signed char>(*eax23 + al24);
    *eax25 = reinterpret_cast<signed char>(*eax26 + al27);
    *eax28 = reinterpret_cast<signed char>(*eax29 + al30);
    *eax31 = reinterpret_cast<signed char>(*eax32 + al33);
    *eax34 = reinterpret_cast<signed char>(*eax35 + al36);
    *eax37 = reinterpret_cast<signed char>(*eax38 + al39);
    *eax40 = reinterpret_cast<signed char>(*eax41 + al42);
    *eax43 = reinterpret_cast<signed char>(*eax44 + al45);
    *eax46 = reinterpret_cast<signed char>(*eax47 + al48);
    *eax49 = reinterpret_cast<signed char>(*eax50 + al51);
    *eax52 = reinterpret_cast<signed char>(*eax53 + al54);
    *eax55 = reinterpret_cast<signed char>(*eax56 + al57);
    *eax58 = reinterpret_cast<signed char>(*eax59 + al60);
    *eax61 = reinterpret_cast<signed char>(*eax62 + al63);
    *eax64 = reinterpret_cast<signed char>(*eax65 + al66);
    *eax67 = reinterpret_cast<signed char>(*eax68 + al69);
    *eax70 = reinterpret_cast<signed char>(*eax71 + al72);
    *eax73 = reinterpret_cast<signed char>(*eax74 + al75);
    *eax76 = reinterpret_cast<signed char>(*eax77 + al78);
    *eax79 = reinterpret_cast<signed char>(*eax80 + al81);
    *eax82 = reinterpret_cast<signed char>(*eax83 + al84);
    *eax85 = reinterpret_cast<signed char>(*eax86 + al87);
    *eax88 = reinterpret_cast<signed char>(*eax89 + al90);
    *eax91 = reinterpret_cast<signed char>(*eax92 + al93);
    *eax94 = reinterpret_cast<signed char>(*eax95 + al96);
    *eax97 = reinterpret_cast<signed char>(*eax98 + al99);
    *eax100 = reinterpret_cast<signed char>(*eax101 + al102);
    *eax103 = reinterpret_cast<signed char>(*eax104 + al105);
    *eax106 = reinterpret_cast<signed char>(*eax107 + al108);
    *eax109 = reinterpret_cast<signed char>(*eax110 + al111);
    *eax112 = reinterpret_cast<signed char>(*eax113 + al114);
    *eax115 = reinterpret_cast<signed char>(*eax116 + al117);
    *eax118 = reinterpret_cast<signed char>(*eax119 + al120);
    *eax121 = reinterpret_cast<signed char>(*eax122 + al123);
    *eax124 = reinterpret_cast<signed char>(*eax125 + al126);
    *eax127 = reinterpret_cast<signed char>(*eax128 + al129);
    *eax130 = reinterpret_cast<signed char>(*eax131 + al132);
    *eax133 = reinterpret_cast<signed char>(*eax134 + al135);
    *eax136 = reinterpret_cast<signed char>(*eax137 + al138);
    *eax139 = reinterpret_cast<signed char>(*eax140 + al141);
    *eax142 = reinterpret_cast<signed char>(*eax143 + al144);
    *eax145 = reinterpret_cast<signed char>(*eax146 + al147);
    *eax148 = reinterpret_cast<signed char>(*eax149 + al150);
    *eax151 = reinterpret_cast<signed char>(*eax152 + al153);
    *eax154 = reinterpret_cast<signed char>(*eax155 + al156);
    *eax157 = reinterpret_cast<signed char>(*eax158 + al159);
    *eax160 = reinterpret_cast<signed char>(*eax161 + al162);
    *eax163 = reinterpret_cast<signed char>(*eax164 + al165);
    *eax166 = reinterpret_cast<signed char>(*eax167 + al168);
    *eax169 = reinterpret_cast<signed char>(*eax170 + al171);
    *eax172 = reinterpret_cast<signed char>(*eax173 + al174);
    *eax175 = reinterpret_cast<signed char>(*eax176 + al177);
    *eax178 = reinterpret_cast<signed char>(*eax179 + al180);
    *eax181 = reinterpret_cast<signed char>(*eax182 + al183);
    *eax184 = reinterpret_cast<signed char>(*eax185 + al186);
    *eax187 = reinterpret_cast<signed char>(*eax188 + al189);
    *eax190 = reinterpret_cast<signed char>(*eax191 + al192);
    *eax193 = reinterpret_cast<signed char>(*eax194 + al195);
    *eax196 = reinterpret_cast<signed char>(*eax197 + al198);
    *eax199 = reinterpret_cast<signed char>(*eax200 + al201);
    *eax202 = reinterpret_cast<signed char>(*eax203 + al204);
    *eax205 = reinterpret_cast<signed char>(*eax206 + al207);
    *eax208 = reinterpret_cast<signed char>(*eax209 + al210);
    *eax211 = reinterpret_cast<signed char>(*eax212 + al213);
    *eax214 = reinterpret_cast<signed char>(*eax215 + al216);
    *eax217 = reinterpret_cast<signed char>(*eax218 + al219);
    *eax220 = reinterpret_cast<signed char>(*eax221 + al222);
    *eax223 = reinterpret_cast<signed char>(*eax224 + al225);
    *eax226 = reinterpret_cast<signed char>(*eax227 + al228);
    *eax229 = reinterpret_cast<signed char>(*eax230 + al231);
    *eax232 = reinterpret_cast<signed char>(*eax233 + al234);
    *eax235 = reinterpret_cast<signed char>(*eax236 + al237);
    *eax238 = reinterpret_cast<signed char>(*eax239 + al240);
    *eax241 = reinterpret_cast<signed char>(*eax242 + al243);
    *eax244 = reinterpret_cast<signed char>(*eax245 + al246);
    *eax247 = reinterpret_cast<signed char>(*eax248 + al249);
    *eax250 = reinterpret_cast<signed char>(*eax251 + al252);
    *eax253 = reinterpret_cast<signed char>(*eax254 + al255);
    *eax256 = reinterpret_cast<signed char>(*eax257 + al258);
    *eax259 = reinterpret_cast<signed char>(*eax260 + al261);
    *eax262 = reinterpret_cast<signed char>(*eax263 + al264);
    *eax265 = reinterpret_cast<signed char>(*eax266 + al267);
    *eax268 = reinterpret_cast<signed char>(*eax269 + al270);
    *eax271 = reinterpret_cast<signed char>(*eax272 + al273);
    *eax274 = reinterpret_cast<signed char>(*eax275 + al276);
    *eax277 = reinterpret_cast<signed char>(*eax278 + al279);
    *eax280 = reinterpret_cast<signed char>(*eax281 + al282);
    *eax283 = reinterpret_cast<signed char>(*eax284 + al285);
    *eax286 = reinterpret_cast<signed char>(*eax287 + al288);
    *eax289 = reinterpret_cast<signed char>(*eax290 + al291);
    *eax292 = reinterpret_cast<signed char>(*eax293 + al294);
    *eax295 = reinterpret_cast<signed char>(*eax296 + al297);
    *eax298 = reinterpret_cast<signed char>(*eax299 + al300);
    *eax301 = reinterpret_cast<signed char>(*eax302 + al303);
    *eax304 = reinterpret_cast<signed char>(*eax305 + al306);
    *eax307 = reinterpret_cast<signed char>(*eax308 + al309);
    *eax310 = reinterpret_cast<signed char>(*eax311 + al312);
    *eax313 = reinterpret_cast<signed char>(*eax314 + al315);
    *eax316 = reinterpret_cast<signed char>(*eax317 + al318);
    *eax319 = reinterpret_cast<signed char>(*eax320 + al321);
    *eax322 = reinterpret_cast<signed char>(*eax323 + al324);
    *eax325 = reinterpret_cast<signed char>(*eax326 + al327);
    *eax328 = reinterpret_cast<signed char>(*eax329 + al330);
    *eax331 = reinterpret_cast<signed char>(*eax332 + al333);
    *eax334 = reinterpret_cast<signed char>(*eax335 + al336);
    *eax337 = reinterpret_cast<signed char>(*eax338 + al339);
    *eax340 = reinterpret_cast<signed char>(*eax341 + al342);
    *eax343 = reinterpret_cast<signed char>(*eax344 + al345);
    *eax346 = reinterpret_cast<signed char>(*eax347 + al348);
    *eax349 = reinterpret_cast<signed char>(*eax350 + al351);
    *eax352 = reinterpret_cast<signed char>(*eax353 + al354);
    *eax355 = reinterpret_cast<signed char>(*eax356 + al357);
    *eax358 = reinterpret_cast<signed char>(*eax359 + al360);
    *eax361 = reinterpret_cast<signed char>(*eax362 + al363);
    *eax364 = reinterpret_cast<signed char>(*eax365 + al366);
    *eax367 = reinterpret_cast<signed char>(*eax368 + al369);
    *eax370 = reinterpret_cast<signed char>(*eax371 + al372);
    *eax373 = reinterpret_cast<signed char>(*eax374 + al375);
    *eax376 = reinterpret_cast<signed char>(*eax377 + al378);
    *eax379 = reinterpret_cast<signed char>(*eax380 + al381);
    *eax382 = reinterpret_cast<signed char>(*eax383 + al384);
    *eax385 = reinterpret_cast<signed char>(*eax386 + al387);
    *eax388 = reinterpret_cast<signed char>(*eax389 + al390);
    *eax391 = reinterpret_cast<signed char>(*eax392 + al393);
    *eax394 = reinterpret_cast<signed char>(*eax395 + al396);
    *eax397 = reinterpret_cast<signed char>(*eax398 + al399);
    *eax400 = reinterpret_cast<signed char>(*eax401 + al402);
    *eax403 = reinterpret_cast<signed char>(*eax404 + al405);
    *eax406 = reinterpret_cast<signed char>(*eax407 + al408);
    *eax409 = reinterpret_cast<signed char>(*eax410 + al411);
    *eax412 = reinterpret_cast<signed char>(*eax413 + al414);
    *eax415 = reinterpret_cast<signed char>(*eax416 + al417);
    *eax418 = reinterpret_cast<signed char>(*eax419 + al420);
    *eax421 = reinterpret_cast<signed char>(*eax422 + al423);
    *eax424 = reinterpret_cast<signed char>(*eax425 + al426);
    *eax427 = reinterpret_cast<signed char>(*eax428 + al429);
    *eax430 = reinterpret_cast<signed char>(*eax431 + al432);
    *eax433 = reinterpret_cast<signed char>(*eax434 + al435);
    *eax436 = reinterpret_cast<signed char>(*eax437 + al438);
    *eax439 = reinterpret_cast<signed char>(*eax440 + al441);
    *eax442 = reinterpret_cast<signed char>(*eax443 + al444);
    *eax445 = reinterpret_cast<signed char>(*eax446 + al447);
    *eax448 = reinterpret_cast<signed char>(*eax449 + al450);
    *eax451 = reinterpret_cast<signed char>(*eax452 + al453);
    *eax454 = reinterpret_cast<signed char>(*eax455 + al456);
    *eax457 = reinterpret_cast<signed char>(*eax458 + al459);
    *eax460 = reinterpret_cast<signed char>(*eax461 + al462);
    *eax463 = reinterpret_cast<signed char>(*eax464 + al465);
    *eax466 = reinterpret_cast<signed char>(*eax467 + al468);
    *eax469 = reinterpret_cast<signed char>(*eax470 + al471);
    *eax472 = reinterpret_cast<signed char>(*eax473 + al474);
    *eax475 = reinterpret_cast<signed char>(*eax476 + al477);
    *eax478 = reinterpret_cast<signed char>(*eax479 + al480);
    *eax481 = reinterpret_cast<signed char>(*eax482 + al483);
    *eax484 = reinterpret_cast<signed char>(*eax485 + al486);
    *eax487 = reinterpret_cast<signed char>(*eax488 + al489);
    *eax490 = reinterpret_cast<signed char>(*eax491 + al492);
    *eax493 = reinterpret_cast<signed char>(*eax494 + al495);
    *eax496 = reinterpret_cast<signed char>(*eax497 + al498);
    *eax499 = reinterpret_cast<signed char>(*eax500 + al501);
    *eax502 = reinterpret_cast<signed char>(*eax503 + al504);
    *eax505 = reinterpret_cast<signed char>(*eax506 + al507);
    *eax508 = reinterpret_cast<signed char>(*eax509 + al510);
    *eax511 = reinterpret_cast<signed char>(*eax512 + al513);
    *eax514 = reinterpret_cast<signed char>(*eax515 + al516);
    *eax517 = reinterpret_cast<signed char>(*eax518 + al519);
    *eax520 = reinterpret_cast<signed char>(*eax521 + al522);
    *eax523 = reinterpret_cast<signed char>(*eax524 + al525);
    *eax526 = reinterpret_cast<signed char>(*eax527 + al528);
    *eax529 = reinterpret_cast<signed char>(*eax530 + al531);
    *eax532 = reinterpret_cast<signed char>(*eax533 + al534);
    *eax535 = reinterpret_cast<signed char>(*eax536 + al537);
    *eax538 = reinterpret_cast<signed char>(*eax539 + al540);
    *eax541 = reinterpret_cast<signed char>(*eax542 + al543);
    *eax544 = reinterpret_cast<signed char>(*eax545 + al546);
    *eax547 = reinterpret_cast<signed char>(*eax548 + al549);
    *eax550 = reinterpret_cast<signed char>(*eax551 + al552);
    *eax553 = reinterpret_cast<signed char>(*eax554 + al555);
    *eax556 = reinterpret_cast<signed char>(*eax557 + al558);
    *eax559 = reinterpret_cast<signed char>(*eax560 + al561);
    *eax562 = reinterpret_cast<signed char>(*eax563 + al564);
    *eax565 = reinterpret_cast<signed char>(*eax566 + al567);
    *eax568 = reinterpret_cast<signed char>(*eax569 + al570);
    *eax571 = reinterpret_cast<signed char>(*eax572 + al573);
    *eax574 = reinterpret_cast<signed char>(*eax575 + al576);
    *eax577 = reinterpret_cast<signed char>(*eax578 + al579);
    *eax580 = reinterpret_cast<signed char>(*eax581 + al582);
    *eax583 = reinterpret_cast<signed char>(*eax584 + al585);
    *eax586 = reinterpret_cast<signed char>(*eax587 + al588);
    *eax589 = reinterpret_cast<signed char>(*eax590 + al591);
    *eax592 = reinterpret_cast<signed char>(*eax593 + al594);
    *eax595 = reinterpret_cast<signed char>(*eax596 + al597);
    *eax598 = reinterpret_cast<signed char>(*eax599 + al600);
    *eax601 = reinterpret_cast<signed char>(*eax602 + al603);
    *eax604 = reinterpret_cast<signed char>(*eax605 + al606);
    *eax607 = reinterpret_cast<signed char>(*eax608 + al609);
    *eax610 = reinterpret_cast<signed char>(*eax611 + al612);
    *eax613 = reinterpret_cast<signed char>(*eax614 + al615);
    *eax616 = reinterpret_cast<signed char>(*eax617 + al618);
    *eax619 = reinterpret_cast<signed char>(*eax620 + al621);
    *eax622 = reinterpret_cast<signed char>(*eax623 + al624);
    *eax625 = reinterpret_cast<signed char>(*eax626 + al627);
    *eax628 = reinterpret_cast<signed char>(*eax629 + al630);
    *eax631 = reinterpret_cast<signed char>(*eax632 + al633);
    *eax634 = reinterpret_cast<signed char>(*eax635 + al636);
    *eax637 = reinterpret_cast<signed char>(*eax638 + al639);
    *eax640 = reinterpret_cast<signed char>(*eax641 + al642);
    *eax643 = reinterpret_cast<signed char>(*eax644 + al645);
    *eax646 = reinterpret_cast<signed char>(*eax647 + al648);
    *eax649 = reinterpret_cast<signed char>(*eax650 + al651);
    *eax652 = reinterpret_cast<signed char>(*eax653 + al654);
    *eax655 = reinterpret_cast<signed char>(*eax656 + al657);
    *eax658 = reinterpret_cast<signed char>(*eax659 + al660);
    *eax661 = reinterpret_cast<signed char>(*eax662 + al663);
    *eax664 = reinterpret_cast<signed char>(*eax665 + al666);
    *eax667 = reinterpret_cast<signed char>(*eax668 + al669);
    *eax670 = reinterpret_cast<signed char>(*eax671 + al672);
    *eax673 = reinterpret_cast<signed char>(*eax674 + al675);
    *eax676 = reinterpret_cast<signed char>(*eax677 + al678);
    *eax679 = reinterpret_cast<signed char>(*eax680 + al681);
    *eax682 = reinterpret_cast<signed char>(*eax683 + al684);
    *eax685 = reinterpret_cast<signed char>(*eax686 + al687);
    *eax688 = reinterpret_cast<signed char>(*eax689 + al690);
    *eax691 = reinterpret_cast<signed char>(*eax692 + al693);
    *eax694 = reinterpret_cast<signed char>(*eax695 + al696);
    *eax697 = reinterpret_cast<signed char>(*eax698 + al699);
    *eax700 = reinterpret_cast<signed char>(*eax701 + al702);
    *eax703 = reinterpret_cast<signed char>(*eax704 + al705);
    *eax706 = reinterpret_cast<signed char>(*eax707 + al708);
    *eax709 = reinterpret_cast<signed char>(*eax710 + al711);
    *eax712 = reinterpret_cast<signed char>(*eax713 + al714);
    *eax715 = reinterpret_cast<signed char>(*eax716 + al717);
    *eax718 = reinterpret_cast<signed char>(*eax719 + al720);
    *eax721 = reinterpret_cast<signed char>(*eax722 + al723);
    *eax724 = reinterpret_cast<signed char>(*eax725 + al726);
    *eax727 = reinterpret_cast<signed char>(*eax728 + al729);
    *eax730 = reinterpret_cast<signed char>(*eax731 + al732);
    *eax733 = reinterpret_cast<signed char>(*eax734 + al735);
    *eax736 = reinterpret_cast<signed char>(*eax737 + al738);
    *eax739 = reinterpret_cast<signed char>(*eax740 + al741);
    *eax742 = reinterpret_cast<signed char>(*eax743 + al744);
    *eax745 = reinterpret_cast<signed char>(*eax746 + al747);
    *eax748 = reinterpret_cast<signed char>(*eax749 + al750);
    *eax751 = reinterpret_cast<signed char>(*eax752 + al753);
    *eax754 = reinterpret_cast<signed char>(*eax755 + al756);
    *eax757 = reinterpret_cast<signed char>(*eax758 + al759);
    *eax760 = reinterpret_cast<signed char>(*eax761 + al762);
    *eax763 = reinterpret_cast<signed char>(*eax764 + al765);
    *eax766 = reinterpret_cast<signed char>(*eax767 + al768);
    *eax769 = reinterpret_cast<signed char>(*eax770 + al771);
    *eax772 = reinterpret_cast<signed char>(*eax773 + al774);
    *eax775 = reinterpret_cast<signed char>(*eax776 + al777);
    *eax778 = reinterpret_cast<signed char>(*eax779 + al780);
    *eax781 = reinterpret_cast<signed char>(*eax782 + al783);
    *eax784 = reinterpret_cast<signed char>(*eax785 + al786);
    *eax787 = reinterpret_cast<signed char>(*eax788 + al789);
    *eax790 = reinterpret_cast<signed char>(*eax791 + al792);
    *eax793 = reinterpret_cast<signed char>(*eax794 + al795);
    *eax796 = reinterpret_cast<signed char>(*eax797 + al798);
    *eax799 = reinterpret_cast<signed char>(*eax800 + al801);
    *eax802 = reinterpret_cast<signed char>(*eax803 + al804);
    *eax805 = reinterpret_cast<signed char>(*eax806 + al807);
    *eax808 = reinterpret_cast<signed char>(*eax809 + al810);
    *eax811 = reinterpret_cast<signed char>(*eax812 + al813);
    *eax814 = reinterpret_cast<signed char>(*eax815 + al816);
    *eax817 = reinterpret_cast<signed char>(*eax818 + al819);
    *eax820 = reinterpret_cast<signed char>(*eax821 + al822);
    *eax823 = reinterpret_cast<signed char>(*eax824 + al825);
    *eax826 = reinterpret_cast<signed char>(*eax827 + al828);
    *eax829 = reinterpret_cast<signed char>(*eax830 + al831);
    *eax832 = reinterpret_cast<signed char>(*eax833 + al834);
    *eax835 = reinterpret_cast<signed char>(*eax836 + al837);
    *eax838 = reinterpret_cast<signed char>(*eax839 + al840);
    *eax841 = reinterpret_cast<signed char>(*eax842 + al843);
    *eax844 = reinterpret_cast<signed char>(*eax845 + al846);
    *eax847 = reinterpret_cast<signed char>(*eax848 + al849);
    *eax850 = reinterpret_cast<signed char>(*eax851 + al852);
    *eax853 = reinterpret_cast<signed char>(*eax854 + al855);
    *eax856 = reinterpret_cast<signed char>(*eax857 + al858);
    *eax859 = reinterpret_cast<signed char>(*eax860 + al861);
    *eax862 = reinterpret_cast<signed char>(*eax863 + al864);
    *eax865 = reinterpret_cast<signed char>(*eax866 + al867);
    *eax868 = reinterpret_cast<signed char>(*eax869 + al870);
    *eax871 = reinterpret_cast<signed char>(*eax872 + al873);
    *eax874 = reinterpret_cast<signed char>(*eax875 + al876);
    *eax877 = reinterpret_cast<signed char>(*eax878 + al879);
    *eax880 = reinterpret_cast<signed char>(*eax881 + al882);
    *eax883 = reinterpret_cast<signed char>(*eax884 + al885);
    *eax886 = reinterpret_cast<signed char>(*eax887 + al888);
    *eax889 = reinterpret_cast<signed char>(*eax890 + al891);
    *eax892 = reinterpret_cast<signed char>(*eax893 + al894);
    *eax895 = reinterpret_cast<signed char>(*eax896 + al897);
    *eax898 = reinterpret_cast<signed char>(*eax899 + al900);
    *eax901 = reinterpret_cast<signed char>(*eax902 + al903);
    *eax904 = reinterpret_cast<signed char>(*eax905 + al906);
    *eax907 = reinterpret_cast<signed char>(*eax908 + al909);
    *eax910 = reinterpret_cast<signed char>(*eax911 + al912);
    *eax913 = reinterpret_cast<signed char>(*eax914 + al915);
    *eax916 = reinterpret_cast<signed char>(*eax917 + al918);
    *eax919 = reinterpret_cast<signed char>(*eax920 + al921);
    *eax922 = reinterpret_cast<signed char>(*eax923 + al924);
    *eax925 = reinterpret_cast<signed char>(*eax926 + al927);
    *eax928 = reinterpret_cast<signed char>(*eax929 + al930);
    *eax931 = reinterpret_cast<signed char>(*eax932 + al933);
    *eax934 = reinterpret_cast<signed char>(*eax935 + al936);
    *eax937 = reinterpret_cast<signed char>(*eax938 + al939);
    *eax940 = reinterpret_cast<signed char>(*eax941 + al942);
    *eax943 = reinterpret_cast<signed char>(*eax944 + al945);
    *eax946 = reinterpret_cast<signed char>(*eax947 + al948);
    *eax949 = reinterpret_cast<signed char>(*eax950 + al951);
    *eax952 = reinterpret_cast<signed char>(*eax953 + al954);
    *eax955 = reinterpret_cast<signed char>(*eax956 + al957);
    *eax958 = reinterpret_cast<signed char>(*eax959 + al960);
    *eax961 = reinterpret_cast<signed char>(*eax962 + al963);
    *eax964 = reinterpret_cast<signed char>(*eax965 + al966);
    *eax967 = reinterpret_cast<signed char>(*eax968 + al969);
    *eax970 = reinterpret_cast<signed char>(*eax971 + al972);
    *eax973 = reinterpret_cast<signed char>(*eax974 + al975);
    *eax976 = reinterpret_cast<signed char>(*eax977 + al978);
    *eax979 = reinterpret_cast<signed char>(*eax980 + al981);
    *eax982 = reinterpret_cast<signed char>(*eax983 + al984);
    *eax985 = reinterpret_cast<signed char>(*eax986 + al987);
    *eax988 = reinterpret_cast<signed char>(*eax989 + al990);
    *eax991 = reinterpret_cast<signed char>(*eax992 + al993);
    *eax994 = reinterpret_cast<signed char>(*eax995 + al996);
    *eax997 = reinterpret_cast<signed char>(*eax998 + al999);
    *eax1000 = reinterpret_cast<signed char>(*eax1001 + al1002);
    *eax1003 = reinterpret_cast<signed char>(*eax1004 + al1005);
    *eax1006 = reinterpret_cast<signed char>(*eax1007 + al1008);
    *eax1009 = reinterpret_cast<signed char>(*eax1010 + al1011);
    *eax1012 = reinterpret_cast<signed char>(*eax1013 + al1014);
    *eax1015 = reinterpret_cast<signed char>(*eax1016 + al1017);
    *eax1018 = reinterpret_cast<signed char>(*eax1019 + al1020);
    *eax1021 = reinterpret_cast<signed char>(*eax1022 + al1023);
    *eax1024 = reinterpret_cast<signed char>(*eax1025 + al1026);
    *eax1027 = reinterpret_cast<signed char>(*eax1028 + al1029);
    *eax1030 = reinterpret_cast<signed char>(*eax1031 + al1032);
    *eax1033 = reinterpret_cast<signed char>(*eax1034 + al1035);
    *eax1036 = reinterpret_cast<signed char>(*eax1037 + al1038);
    *eax1039 = reinterpret_cast<signed char>(*eax1040 + al1041);
    *eax1042 = reinterpret_cast<signed char>(*eax1043 + al1044);
    *eax1045 = reinterpret_cast<signed char>(*eax1046 + al1047);
    *eax1048 = reinterpret_cast<signed char>(*eax1049 + al1050);
    *eax1051 = reinterpret_cast<signed char>(*eax1052 + al1053);
    *eax1054 = reinterpret_cast<signed char>(*eax1055 + al1056);
    *eax1057 = reinterpret_cast<signed char>(*eax1058 + al1059);
    *eax1060 = reinterpret_cast<signed char>(*eax1061 + al1062);
    *eax1063 = reinterpret_cast<signed char>(*eax1064 + al1065);
    *eax1066 = reinterpret_cast<signed char>(*eax1067 + al1068);
    *eax1069 = reinterpret_cast<signed char>(*eax1070 + al1071);
    *eax1072 = reinterpret_cast<signed char>(*eax1073 + al1074);
    *eax1075 = reinterpret_cast<signed char>(*eax1076 + al1077);
    *eax1078 = reinterpret_cast<signed char>(*eax1079 + al1080);
    *eax1081 = reinterpret_cast<signed char>(*eax1082 + al1083);
    *eax1084 = reinterpret_cast<signed char>(*eax1085 + al1086);
    *eax1087 = reinterpret_cast<signed char>(*eax1088 + al1089);
    *eax1090 = reinterpret_cast<signed char>(*eax1091 + al1092);
    *eax1093 = reinterpret_cast<signed char>(*eax1094 + al1095);
    *eax1096 = reinterpret_cast<signed char>(*eax1097 + al1098);
    *eax1099 = reinterpret_cast<signed char>(*eax1100 + al1101);
    *eax1102 = reinterpret_cast<signed char>(*eax1103 + al1104);
    *eax1105 = reinterpret_cast<signed char>(*eax1106 + al1107);
    *eax1108 = reinterpret_cast<signed char>(*eax1109 + al1110);
    *eax1111 = reinterpret_cast<signed char>(*eax1112 + al1113);
    *eax1114 = reinterpret_cast<signed char>(*eax1115 + al1116);
    *eax1117 = reinterpret_cast<signed char>(*eax1118 + al1119);
    *eax1120 = reinterpret_cast<signed char>(*eax1121 + al1122);
    *eax1123 = reinterpret_cast<signed char>(*eax1124 + al1125);
    *eax1126 = reinterpret_cast<signed char>(*eax1127 + al1128);
    *eax1129 = reinterpret_cast<signed char>(*eax1130 + al1131);
    *eax1132 = reinterpret_cast<signed char>(*eax1133 + al1134);
    *eax1135 = reinterpret_cast<signed char>(*eax1136 + al1137);
    *eax1138 = reinterpret_cast<signed char>(*eax1139 + al1140);
    *eax1141 = reinterpret_cast<signed char>(*eax1142 + al1143);
    *eax1144 = reinterpret_cast<signed char>(*eax1145 + al1146);
    *eax1147 = reinterpret_cast<signed char>(*eax1148 + al1149);
    *eax1150 = reinterpret_cast<signed char>(*eax1151 + al1152);
    *eax1153 = reinterpret_cast<signed char>(*eax1154 + al1155);
    *eax1156 = reinterpret_cast<signed char>(*eax1157 + al1158);
    *eax1159 = reinterpret_cast<signed char>(*eax1160 + al1161);
    *eax1162 = reinterpret_cast<signed char>(*eax1163 + al1164);
    *eax1165 = reinterpret_cast<signed char>(*eax1166 + al1167);
    *eax1168 = reinterpret_cast<signed char>(*eax1169 + al1170);
    *eax1171 = reinterpret_cast<signed char>(*eax1172 + al1173);
    *eax1174 = reinterpret_cast<signed char>(*eax1175 + al1176);
    *eax1177 = reinterpret_cast<signed char>(*eax1178 + al1179);
    *eax1180 = reinterpret_cast<signed char>(*eax1181 + al1182);
    *eax1183 = reinterpret_cast<signed char>(*eax1184 + al1185);
    *eax1186 = reinterpret_cast<signed char>(*eax1187 + al1188);
    *eax1189 = reinterpret_cast<signed char>(*eax1190 + al1191);
    *eax1192 = reinterpret_cast<signed char>(*eax1193 + al1194);
    *eax1195 = reinterpret_cast<signed char>(*eax1196 + al1197);
    *eax1198 = reinterpret_cast<signed char>(*eax1199 + al1200);
    *eax1201 = reinterpret_cast<signed char>(*eax1202 + al1203);
    *eax1204 = reinterpret_cast<signed char>(*eax1205 + al1206);
    *eax1207 = reinterpret_cast<signed char>(*eax1208 + al1209);
    *eax1210 = reinterpret_cast<signed char>(*eax1211 + al1212);
    *eax1213 = reinterpret_cast<signed char>(*eax1214 + al1215);
    *eax1216 = reinterpret_cast<signed char>(*eax1217 + al1218);
    *eax1219 = reinterpret_cast<signed char>(*eax1220 + al1221);
    *eax1222 = reinterpret_cast<signed char>(*eax1223 + al1224);
    *eax1225 = reinterpret_cast<signed char>(*eax1226 + al1227);
    *eax1228 = reinterpret_cast<signed char>(*eax1229 + al1230);
    *eax1231 = reinterpret_cast<signed char>(*eax1232 + al1233);
    *eax1234 = reinterpret_cast<signed char>(*eax1235 + al1236);
    *eax1237 = reinterpret_cast<signed char>(*eax1238 + al1239);
    *eax1240 = reinterpret_cast<signed char>(*eax1241 + al1242);
    *eax1243 = reinterpret_cast<signed char>(*eax1244 + al1245);
    *eax1246 = reinterpret_cast<signed char>(*eax1247 + al1248);
    *eax1249 = reinterpret_cast<signed char>(*eax1250 + al1251);
    *eax1252 = reinterpret_cast<signed char>(*eax1253 + al1254);
    *eax1255 = reinterpret_cast<signed char>(*eax1256 + al1257);
    *eax1258 = reinterpret_cast<signed char>(*eax1259 + al1260);
    *eax1261 = reinterpret_cast<signed char>(*eax1262 + al1263);
    *eax1264 = reinterpret_cast<signed char>(*eax1265 + al1266);
    *eax1267 = reinterpret_cast<signed char>(*eax1268 + al1269);
    *eax1270 = reinterpret_cast<signed char>(*eax1271 + al1272);
    *eax1273 = reinterpret_cast<signed char>(*eax1274 + al1275);
    *eax1276 = reinterpret_cast<signed char>(*eax1277 + al1278);
    *eax1279 = reinterpret_cast<signed char>(*eax1280 + al1281);
    *eax1282 = reinterpret_cast<signed char>(*eax1283 + al1284);
    *eax1285 = reinterpret_cast<signed char>(*eax1286 + al1287);
    *eax1288 = reinterpret_cast<signed char>(*eax1289 + al1290);
    *eax1291 = reinterpret_cast<signed char>(*eax1292 + al1293);
    *eax1294 = reinterpret_cast<signed char>(*eax1295 + al1296);
    *eax1297 = reinterpret_cast<signed char>(*eax1298 + al1299);
    *eax1300 = reinterpret_cast<signed char>(*eax1301 + al1302);
    *eax1303 = reinterpret_cast<signed char>(*eax1304 + al1305);
    *eax1306 = reinterpret_cast<signed char>(*eax1307 + al1308);
    *eax1309 = reinterpret_cast<signed char>(*eax1310 + al1311);
    *eax1312 = reinterpret_cast<signed char>(*eax1313 + al1314);
    *eax1315 = reinterpret_cast<signed char>(*eax1316 + al1317);
    *eax1318 = reinterpret_cast<signed char>(*eax1319 + al1320);
    *eax1321 = reinterpret_cast<signed char>(*eax1322 + al1323);
    *eax1324 = reinterpret_cast<signed char>(*eax1325 + al1326);
    *eax1327 = reinterpret_cast<signed char>(*eax1328 + al1329);
    *eax1330 = reinterpret_cast<signed char>(*eax1331 + al1332);
    *eax1333 = reinterpret_cast<signed char>(*eax1334 + al1335);
    *eax1336 = reinterpret_cast<signed char>(*eax1337 + al1338);
    *eax1339 = reinterpret_cast<signed char>(*eax1340 + al1341);
    *eax1342 = reinterpret_cast<signed char>(*eax1343 + al1344);
    *eax1345 = reinterpret_cast<signed char>(*eax1346 + al1347);
    *eax1348 = reinterpret_cast<signed char>(*eax1349 + al1350);
    *eax1351 = reinterpret_cast<signed char>(*eax1352 + al1353);
    *eax1354 = reinterpret_cast<signed char>(*eax1355 + al1356);
    *eax1357 = reinterpret_cast<signed char>(*eax1358 + al1359);
    *eax1360 = reinterpret_cast<signed char>(*eax1361 + al1362);
    *eax1363 = reinterpret_cast<signed char>(*eax1364 + al1365);
    *eax1366 = reinterpret_cast<signed char>(*eax1367 + al1368);
    *eax1369 = reinterpret_cast<signed char>(*eax1370 + al1371);
    *eax1372 = reinterpret_cast<signed char>(*eax1373 + al1374);
    *eax1375 = reinterpret_cast<signed char>(*eax1376 + al1377);
    *eax1378 = reinterpret_cast<signed char>(*eax1379 + al1380);
    *eax1381 = reinterpret_cast<signed char>(*eax1382 + al1383);
    *eax1384 = reinterpret_cast<signed char>(*eax1385 + al1386);
    *eax1387 = reinterpret_cast<signed char>(*eax1388 + al1389);
    *eax1390 = reinterpret_cast<signed char>(*eax1391 + al1392);
    *eax1393 = reinterpret_cast<signed char>(*eax1394 + al1395);
    *eax1396 = reinterpret_cast<signed char>(*eax1397 + al1398);
    *eax1399 = reinterpret_cast<signed char>(*eax1400 + al1401);
    *eax1402 = reinterpret_cast<signed char>(*eax1403 + al1404);
    *eax1405 = reinterpret_cast<signed char>(*eax1406 + al1407);
    *eax1408 = reinterpret_cast<signed char>(*eax1409 + al1410);
    *eax1411 = reinterpret_cast<signed char>(*eax1412 + al1413);
    *eax1414 = reinterpret_cast<signed char>(*eax1415 + al1416);
    *eax1417 = reinterpret_cast<signed char>(*eax1418 + al1419);
    *eax1420 = reinterpret_cast<signed char>(*eax1421 + al1422);
    *eax1423 = reinterpret_cast<signed char>(*eax1424 + al1425);
    *eax1426 = reinterpret_cast<signed char>(*eax1427 + al1428);
    *eax1429 = reinterpret_cast<signed char>(*eax1430 + al1431);
    *eax1432 = reinterpret_cast<signed char>(*eax1433 + al1434);
    *eax1435 = reinterpret_cast<signed char>(*eax1436 + al1437);
    *eax1438 = reinterpret_cast<signed char>(*eax1439 + al1440);
    *eax1441 = reinterpret_cast<signed char>(*eax1442 + al1443);
    *eax1444 = reinterpret_cast<signed char>(*eax1445 + al1446);
    *eax1447 = reinterpret_cast<signed char>(*eax1448 + al1449);
    *eax1450 = reinterpret_cast<signed char>(*eax1451 + al1452);
    *eax1453 = reinterpret_cast<signed char>(*eax1454 + al1455);
    *eax1456 = reinterpret_cast<signed char>(*eax1457 + al1458);
    *eax1459 = reinterpret_cast<signed char>(*eax1460 + al1461);
    *eax1462 = reinterpret_cast<signed char>(*eax1463 + al1464);
    *eax1465 = reinterpret_cast<signed char>(*eax1466 + al1467);
    *eax1468 = reinterpret_cast<signed char>(*eax1469 + al1470);
    *eax1471 = reinterpret_cast<signed char>(*eax1472 + al1473);
    *eax1474 = reinterpret_cast<signed char>(*eax1475 + al1476);
    *eax1477 = reinterpret_cast<signed char>(*eax1478 + al1479);
    *eax1480 = reinterpret_cast<signed char>(*eax1481 + al1482);
    *eax1483 = reinterpret_cast<signed char>(*eax1484 + al1485);
    *eax1486 = reinterpret_cast<signed char>(*eax1487 + al1488);
    *eax1489 = reinterpret_cast<signed char>(*eax1490 + al1491);
    *eax1492 = reinterpret_cast<signed char>(*eax1493 + al1494);
    *eax1495 = reinterpret_cast<signed char>(*eax1496 + al1497);
    *eax1498 = reinterpret_cast<signed char>(*eax1499 + al1500);
    *eax1501 = reinterpret_cast<signed char>(*eax1502 + al1503);
    *eax1504 = reinterpret_cast<signed char>(*eax1505 + al1506);
    *eax1507 = reinterpret_cast<signed char>(*eax1508 + al1509);
    *eax1510 = reinterpret_cast<signed char>(*eax1511 + al1512);
    *eax1513 = reinterpret_cast<signed char>(*eax1514 + al1515);
    *eax1516 = reinterpret_cast<signed char>(*eax1517 + al1518);
    *eax1519 = reinterpret_cast<signed char>(*eax1520 + al1521);
    *eax1522 = reinterpret_cast<signed char>(*eax1523 + al1524);
    *eax1525 = reinterpret_cast<signed char>(*eax1526 + al1527);
    *eax1528 = reinterpret_cast<signed char>(*eax1529 + al1530);
    *eax1531 = reinterpret_cast<signed char>(*eax1532 + al1533);
    *eax1534 = reinterpret_cast<signed char>(*eax1535 + al1536);
    *eax1537 = reinterpret_cast<signed char>(*eax1538 + al1539);
    *eax1540 = reinterpret_cast<signed char>(*eax1541 + al1542);
    *eax1543 = reinterpret_cast<signed char>(*eax1544 + al1545);
    *eax1546 = reinterpret_cast<signed char>(*eax1547 + al1548);
    *eax1549 = reinterpret_cast<signed char>(*eax1550 + al1551);
    *eax1552 = reinterpret_cast<signed char>(*eax1553 + al1554);
    *eax1555 = reinterpret_cast<signed char>(*eax1556 + al1557);
    *eax1558 = reinterpret_cast<signed char>(*eax1559 + al1560);
    *eax1561 = reinterpret_cast<signed char>(*eax1562 + al1563);
    *eax1564 = reinterpret_cast<signed char>(*eax1565 + al1566);
    *eax1567 = reinterpret_cast<signed char>(*eax1568 + al1569);
    *eax1570 = reinterpret_cast<signed char>(*eax1571 + al1572);
    *eax1573 = reinterpret_cast<signed char>(*eax1574 + al1575);
    *eax1576 = reinterpret_cast<signed char>(*eax1577 + al1578);
    *eax1579 = reinterpret_cast<signed char>(*eax1580 + al1581);
    *eax1582 = reinterpret_cast<signed char>(*eax1583 + al1584);
    *eax1585 = reinterpret_cast<signed char>(*eax1586 + al1587);
    *eax1588 = reinterpret_cast<signed char>(*eax1589 + al1590);
    *eax1591 = reinterpret_cast<signed char>(*eax1592 + al1593);
    *eax1594 = reinterpret_cast<signed char>(*eax1595 + al1596);
    *eax1597 = reinterpret_cast<signed char>(*eax1598 + al1599);
    *eax1600 = reinterpret_cast<signed char>(*eax1601 + al1602);
    *eax1603 = reinterpret_cast<signed char>(*eax1604 + al1605);
    *eax1606 = reinterpret_cast<signed char>(*eax1607 + al1608);
    *eax1609 = reinterpret_cast<signed char>(*eax1610 + al1611);
    *eax1612 = reinterpret_cast<signed char>(*eax1613 + al1614);
    *eax1615 = reinterpret_cast<signed char>(*eax1616 + al1617);
    *eax1618 = reinterpret_cast<signed char>(*eax1619 + al1620);
    *eax1621 = reinterpret_cast<signed char>(*eax1622 + al1623);
    *eax1624 = reinterpret_cast<signed char>(*eax1625 + al1626);
    *eax1627 = reinterpret_cast<signed char>(*eax1628 + al1629);
    *eax1630 = reinterpret_cast<signed char>(*eax1631 + al1632);
    *eax1633 = reinterpret_cast<signed char>(*eax1634 + al1635);
    *eax1636 = reinterpret_cast<signed char>(*eax1637 + al1638);
    *eax1639 = reinterpret_cast<signed char>(*eax1640 + al1641);
    *eax1642 = reinterpret_cast<signed char>(*eax1643 + al1644);
    *eax1645 = reinterpret_cast<signed char>(*eax1646 + al1647);
    *eax1648 = reinterpret_cast<signed char>(*eax1649 + al1650);
    *eax1651 = reinterpret_cast<signed char>(*eax1652 + al1653);
    *eax1654 = reinterpret_cast<signed char>(*eax1655 + al1656);
    *eax1657 = reinterpret_cast<signed char>(*eax1658 + al1659);
    *eax1660 = reinterpret_cast<signed char>(*eax1661 + al1662);
    *eax1663 = reinterpret_cast<signed char>(*eax1664 + al1665);
    *eax1666 = reinterpret_cast<signed char>(*eax1667 + al1668);
    *eax1669 = reinterpret_cast<signed char>(*eax1670 + al1671);
    *eax1672 = reinterpret_cast<signed char>(*eax1673 + al1674);
    *eax1675 = reinterpret_cast<signed char>(*eax1676 + al1677);
    *eax1678 = reinterpret_cast<signed char>(*eax1679 + al1680);
    *eax1681 = reinterpret_cast<signed char>(*eax1682 + al1683);
    *eax1684 = reinterpret_cast<signed char>(*eax1685 + al1686);
    *eax1687 = reinterpret_cast<signed char>(*eax1688 + al1689);
    *eax1690 = reinterpret_cast<signed char>(*eax1691 + al1692);
    *eax1693 = reinterpret_cast<signed char>(*eax1694 + al1695);
    *eax1696 = reinterpret_cast<signed char>(*eax1697 + al1698);
    *eax1699 = reinterpret_cast<signed char>(*eax1700 + al1701);
    *eax1702 = reinterpret_cast<signed char>(*eax1703 + al1704);
    *eax1705 = reinterpret_cast<signed char>(*eax1706 + al1707);
    *eax1708 = reinterpret_cast<signed char>(*eax1709 + al1710);
    *eax1711 = reinterpret_cast<signed char>(*eax1712 + al1713);
    *eax1714 = reinterpret_cast<signed char>(*eax1715 + al1716);
    *eax1717 = reinterpret_cast<signed char>(*eax1718 + al1719);
    *eax1720 = reinterpret_cast<signed char>(*eax1721 + al1722);
    *eax1723 = reinterpret_cast<signed char>(*eax1724 + al1725);
    *eax1726 = reinterpret_cast<signed char>(*eax1727 + al1728);
    *eax1729 = reinterpret_cast<signed char>(*eax1730 + al1731);
    *eax1732 = reinterpret_cast<signed char>(*eax1733 + al1734);
    *eax1735 = reinterpret_cast<signed char>(*eax1736 + al1737);
    *eax1738 = reinterpret_cast<signed char>(*eax1739 + al1740);
    *eax1741 = reinterpret_cast<signed char>(*eax1742 + al1743);
    *eax1744 = reinterpret_cast<signed char>(*eax1745 + al1746);
    *eax1747 = reinterpret_cast<signed char>(*eax1748 + al1749);
    *eax1750 = reinterpret_cast<signed char>(*eax1751 + al1752);
    *eax1753 = reinterpret_cast<signed char>(*eax1754 + al1755);
    *eax1756 = reinterpret_cast<signed char>(*eax1757 + al1758);
    *eax1759 = reinterpret_cast<signed char>(*eax1760 + al1761);
    *eax1762 = reinterpret_cast<signed char>(*eax1763 + al1764);
    *eax1765 = reinterpret_cast<signed char>(*eax1766 + al1767);
    *eax1768 = reinterpret_cast<signed char>(*eax1769 + al1770);
    *eax1771 = reinterpret_cast<signed char>(*eax1772 + al1773);
    *eax1774 = reinterpret_cast<signed char>(*eax1775 + al1776);
    *eax1777 = reinterpret_cast<signed char>(*eax1778 + al1779);
    *eax1780 = reinterpret_cast<signed char>(*eax1781 + al1782);
    *eax1783 = reinterpret_cast<signed char>(*eax1784 + al1785);
    *eax1786 = reinterpret_cast<signed char>(*eax1787 + al1788);
    *eax1789 = reinterpret_cast<signed char>(*eax1790 + al1791);
    *eax1792 = reinterpret_cast<signed char>(*eax1793 + al1794);
    *eax1795 = reinterpret_cast<signed char>(*eax1796 + al1797);
    *eax1798 = reinterpret_cast<signed char>(*eax1799 + al1800);
    *eax1801 = reinterpret_cast<signed char>(*eax1802 + al1803);
    *eax1804 = reinterpret_cast<signed char>(*eax1805 + al1806);
    *eax1807 = reinterpret_cast<signed char>(*eax1808 + al1809);
    *eax1810 = reinterpret_cast<signed char>(*eax1811 + al1812);
    *eax1813 = reinterpret_cast<signed char>(*eax1814 + al1815);
    *eax1816 = reinterpret_cast<signed char>(*eax1817 + al1818);
    *eax1819 = reinterpret_cast<signed char>(*eax1820 + al1821);
    *eax1822 = reinterpret_cast<signed char>(*eax1823 + al1824);
    *eax1825 = reinterpret_cast<signed char>(*eax1826 + al1827);
    *eax1828 = reinterpret_cast<signed char>(*eax1829 + al1830);
    *eax1831 = reinterpret_cast<signed char>(*eax1832 + al1833);
    *eax1834 = reinterpret_cast<signed char>(*eax1835 + al1836);
    *eax1837 = reinterpret_cast<signed char>(*eax1838 + al1839);
    *eax1840 = reinterpret_cast<signed char>(*eax1841 + al1842);
    *eax1843 = reinterpret_cast<signed char>(*eax1844 + al1845);
    *eax1846 = reinterpret_cast<signed char>(*eax1847 + al1848);
    *eax1849 = reinterpret_cast<signed char>(*eax1850 + al1851);
    *eax1852 = reinterpret_cast<signed char>(*eax1853 + al1854);
    *eax1855 = reinterpret_cast<signed char>(*eax1856 + al1857);
    *eax1858 = reinterpret_cast<signed char>(*eax1859 + al1860);
    *eax1861 = reinterpret_cast<signed char>(*eax1862 + al1863);
    *eax1864 = reinterpret_cast<signed char>(*eax1865 + al1866);
    *eax1867 = reinterpret_cast<signed char>(*eax1868 + al1869);
    *eax1870 = reinterpret_cast<signed char>(*eax1871 + al1872);
    *eax1873 = reinterpret_cast<signed char>(*eax1874 + al1875);
    *eax1876 = reinterpret_cast<signed char>(*eax1877 + al1878);
    *eax1879 = reinterpret_cast<signed char>(*eax1880 + al1881);
    *eax1882 = reinterpret_cast<signed char>(*eax1883 + al1884);
    *eax1885 = reinterpret_cast<signed char>(*eax1886 + al1887);
    *eax1888 = reinterpret_cast<signed char>(*eax1889 + al1890);
    *eax1891 = reinterpret_cast<signed char>(*eax1892 + al1893);
    *eax1894 = reinterpret_cast<signed char>(*eax1895 + al1896);
    *eax1897 = reinterpret_cast<signed char>(*eax1898 + al1899);
    *eax1900 = reinterpret_cast<signed char>(*eax1901 + al1902);
    *eax1903 = reinterpret_cast<signed char>(*eax1904 + al1905);
    *eax1906 = reinterpret_cast<signed char>(*eax1907 + al1908);
    *eax1909 = reinterpret_cast<signed char>(*eax1910 + al1911);
    *eax1912 = reinterpret_cast<signed char>(*eax1913 + al1914);
    *eax1915 = reinterpret_cast<signed char>(*eax1916 + al1917);
    *eax1918 = reinterpret_cast<signed char>(*eax1919 + al1920);
    *eax1921 = reinterpret_cast<signed char>(*eax1922 + al1923);
    *eax1924 = reinterpret_cast<signed char>(*eax1925 + al1926);
    *eax1927 = reinterpret_cast<signed char>(*eax1928 + al1929);
    *eax1930 = reinterpret_cast<signed char>(*eax1931 + al1932);
    *eax1933 = reinterpret_cast<signed char>(*eax1934 + al1935);
    *eax1936 = reinterpret_cast<signed char>(*eax1937 + al1938);
    *eax1939 = reinterpret_cast<signed char>(*eax1940 + al1941);
    *eax1942 = reinterpret_cast<signed char>(*eax1943 + al1944);
    *eax1945 = reinterpret_cast<signed char>(*eax1946 + al1947);
    *eax1948 = reinterpret_cast<signed char>(*eax1949 + al1950);
    *eax1951 = reinterpret_cast<signed char>(*eax1952 + al1953);
    *eax1954 = reinterpret_cast<signed char>(*eax1955 + al1956);
    *eax1957 = reinterpret_cast<signed char>(*eax1958 + al1959);
    *eax1960 = reinterpret_cast<signed char>(*eax1961 + al1962);
    *eax1963 = reinterpret_cast<signed char>(*eax1964 + al1965);
    *eax1966 = reinterpret_cast<signed char>(*eax1967 + al1968);
    *eax1969 = reinterpret_cast<signed char>(*eax1970 + al1971);
    *eax1972 = reinterpret_cast<signed char>(*eax1973 + al1974);
    *eax1975 = reinterpret_cast<signed char>(*eax1976 + al1977);
    *eax1978 = reinterpret_cast<signed char>(*eax1979 + al1980);
    *eax1981 = reinterpret_cast<signed char>(*eax1982 + al1983);
    *eax1984 = reinterpret_cast<signed char>(*eax1985 + al1986);
    *eax1987 = reinterpret_cast<signed char>(*eax1988 + al1989);
    *eax1990 = reinterpret_cast<signed char>(*eax1991 + al1992);
    *eax1993 = reinterpret_cast<signed char>(*eax1994 + al1995);
    *eax1996 = reinterpret_cast<signed char>(*eax1997 + al1998);
    *eax1999 = reinterpret_cast<signed char>(*eax2000 + al2001);
    *eax2002 = reinterpret_cast<signed char>(*eax2003 + al2004);
    *eax2005 = reinterpret_cast<signed char>(*eax2006 + al2007);
    *eax2008 = reinterpret_cast<signed char>(*eax2009 + al2010);
    *eax2011 = reinterpret_cast<signed char>(*eax2012 + al2013);
    *eax2014 = reinterpret_cast<signed char>(*eax2015 + al2016);
    *eax2017 = reinterpret_cast<signed char>(*eax2018 + al2019);
    *eax2020 = reinterpret_cast<signed char>(*eax2021 + al2022);
    *eax2023 = reinterpret_cast<signed char>(*eax2024 + al2025);
    *eax2026 = reinterpret_cast<signed char>(*eax2027 + al2028);
    *eax2029 = reinterpret_cast<signed char>(*eax2030 + al2031);
    *eax2032 = reinterpret_cast<signed char>(*eax2033 + al2034);
    *eax2035 = reinterpret_cast<signed char>(*eax2036 + al2037);
    *eax2038 = reinterpret_cast<signed char>(*eax2039 + al2040);
    *eax2041 = reinterpret_cast<signed char>(*eax2042 + al2043);
    *eax2044 = reinterpret_cast<signed char>(*eax2045 + al2046);
    *eax2047 = reinterpret_cast<signed char>(*eax2048 + al2049);
    *eax2050 = reinterpret_cast<signed char>(*eax2051 + al2052);
    *eax2053 = reinterpret_cast<signed char>(*eax2054 + al2055);
    *eax2056 = reinterpret_cast<signed char>(*eax2057 + al2058);
    *eax2059 = reinterpret_cast<signed char>(*eax2060 + al2061);
    *eax2062 = reinterpret_cast<signed char>(*eax2063 + al2064);
    *eax2065 = reinterpret_cast<signed char>(*eax2066 + al2067);
    *eax2068 = reinterpret_cast<signed char>(*eax2069 + al2070);
    *eax2071 = reinterpret_cast<signed char>(*eax2072 + al2073);
    *eax2074 = reinterpret_cast<signed char>(*eax2075 + al2076);
    *eax2077 = reinterpret_cast<signed char>(*eax2078 + al2079);
    *eax2080 = reinterpret_cast<signed char>(*eax2081 + al2082);
    *eax2083 = reinterpret_cast<signed char>(*eax2084 + al2085);
    *eax2086 = reinterpret_cast<signed char>(*eax2087 + al2088);
    *eax2089 = reinterpret_cast<signed char>(*eax2090 + al2091);
    *eax2092 = reinterpret_cast<signed char>(*eax2093 + al2094);
    *eax2095 = reinterpret_cast<signed char>(*eax2096 + al2097);
    *eax2098 = reinterpret_cast<signed char>(*eax2099 + al2100);
    *eax2101 = reinterpret_cast<signed char>(*eax2102 + al2103);
    *eax2104 = reinterpret_cast<signed char>(*eax2105 + al2106);
    *eax2107 = reinterpret_cast<signed char>(*eax2108 + al2109);
    *eax2110 = reinterpret_cast<signed char>(*eax2111 + al2112);
    *eax2113 = reinterpret_cast<signed char>(*eax2114 + al2115);
    *eax2116 = reinterpret_cast<signed char>(*eax2117 + al2118);
    *eax2119 = reinterpret_cast<signed char>(*eax2120 + al2121);
    *eax2122 = reinterpret_cast<signed char>(*eax2123 + al2124);
    *eax2125 = reinterpret_cast<signed char>(*eax2126 + al2127);
    *eax2128 = reinterpret_cast<signed char>(*eax2129 + al2130);
    *eax2131 = reinterpret_cast<signed char>(*eax2132 + al2133);
    *eax2134 = reinterpret_cast<signed char>(*eax2135 + al2136);
    *eax2137 = reinterpret_cast<signed char>(*eax2138 + al2139);
    *eax2140 = reinterpret_cast<signed char>(*eax2141 + al2142);
    *eax2143 = reinterpret_cast<signed char>(*eax2144 + al2145);
    *eax2146 = reinterpret_cast<signed char>(*eax2147 + al2148);
    *eax2149 = reinterpret_cast<signed char>(*eax2150 + al2151);
    *eax2152 = reinterpret_cast<signed char>(*eax2153 + al2154);
    *eax2155 = reinterpret_cast<signed char>(*eax2156 + al2157);
    *eax2158 = reinterpret_cast<signed char>(*eax2159 + al2160);
    *eax2161 = reinterpret_cast<signed char>(*eax2162 + al2163);
    *eax2164 = reinterpret_cast<signed char>(*eax2165 + al2166);
    *eax2167 = reinterpret_cast<signed char>(*eax2168 + al2169);
    *eax2170 = reinterpret_cast<signed char>(*eax2171 + al2172);
    *eax2173 = reinterpret_cast<signed char>(*eax2174 + al2175);
    *eax2176 = reinterpret_cast<signed char>(*eax2177 + al2178);
    *eax2179 = reinterpret_cast<signed char>(*eax2180 + al2181);
    *eax2182 = reinterpret_cast<signed char>(*eax2183 + al2184);
    *eax2185 = reinterpret_cast<signed char>(*eax2186 + al2187);
    *eax2188 = reinterpret_cast<signed char>(*eax2189 + al2190);
    *eax2191 = reinterpret_cast<signed char>(*eax2192 + al2193);
    *eax2194 = reinterpret_cast<signed char>(*eax2195 + al2196);
    *eax2197 = reinterpret_cast<signed char>(*eax2198 + al2199);
    *eax2200 = reinterpret_cast<signed char>(*eax2201 + al2202);
    *eax2203 = reinterpret_cast<signed char>(*eax2204 + al2205);
    *eax2206 = reinterpret_cast<signed char>(*eax2207 + al2208);
    *eax2209 = reinterpret_cast<signed char>(*eax2210 + al2211);
    *eax2212 = reinterpret_cast<signed char>(*eax2213 + al2214);
    *eax2215 = reinterpret_cast<signed char>(*eax2216 + al2217);
    *eax2218 = reinterpret_cast<signed char>(*eax2219 + al2220);
    *eax2221 = reinterpret_cast<signed char>(*eax2222 + al2223);
    *eax2224 = reinterpret_cast<signed char>(*eax2225 + al2226);
    *eax2227 = reinterpret_cast<signed char>(*eax2228 + al2229);
    *eax2230 = reinterpret_cast<signed char>(*eax2231 + al2232);
    *eax2233 = reinterpret_cast<signed char>(*eax2234 + al2235);
    *eax2236 = reinterpret_cast<signed char>(*eax2237 + al2238);
    *eax2239 = reinterpret_cast<signed char>(*eax2240 + al2241);
    *eax2242 = reinterpret_cast<signed char>(*eax2243 + al2244);
    *eax2245 = reinterpret_cast<signed char>(*eax2246 + al2247);
    *eax2248 = reinterpret_cast<signed char>(*eax2249 + al2250);
    *eax2251 = reinterpret_cast<signed char>(*eax2252 + al2253);
    *eax2254 = reinterpret_cast<signed char>(*eax2255 + al2256);
    *eax2257 = reinterpret_cast<signed char>(*eax2258 + al2259);
    *eax2260 = reinterpret_cast<signed char>(*eax2261 + al2262);
    *eax2263 = reinterpret_cast<signed char>(*eax2264 + al2265);
    *eax2266 = reinterpret_cast<signed char>(*eax2267 + al2268);
    *eax2269 = reinterpret_cast<signed char>(*eax2270 + al2271);
    *eax2272 = reinterpret_cast<signed char>(*eax2273 + al2274);
    *eax2275 = reinterpret_cast<signed char>(*eax2276 + al2277);
    *eax2278 = reinterpret_cast<signed char>(*eax2279 + al2280);
    *eax2281 = reinterpret_cast<signed char>(*eax2282 + al2283);
    *eax2284 = reinterpret_cast<signed char>(*eax2285 + al2286);
    *eax2287 = reinterpret_cast<signed char>(*eax2288 + al2289);
    *eax2290 = reinterpret_cast<signed char>(*eax2291 + al2292);
    *eax2293 = reinterpret_cast<signed char>(*eax2294 + al2295);
    *eax2296 = reinterpret_cast<signed char>(*eax2297 + al2298);
    *eax2299 = reinterpret_cast<signed char>(*eax2300 + al2301);
    *eax2302 = reinterpret_cast<signed char>(*eax2303 + al2304);
    *eax2305 = reinterpret_cast<signed char>(*eax2306 + al2307);
    *eax2308 = reinterpret_cast<signed char>(*eax2309 + al2310);
    *eax2311 = reinterpret_cast<signed char>(*eax2312 + al2313);
    *eax2314 = reinterpret_cast<signed char>(*eax2315 + al2316);
    *eax2317 = reinterpret_cast<signed char>(*eax2318 + al2319);
    *eax2320 = reinterpret_cast<signed char>(*eax2321 + al2322);
    *eax2323 = reinterpret_cast<signed char>(*eax2324 + al2325);
    *eax2326 = reinterpret_cast<signed char>(*eax2327 + al2328);
    *eax2329 = reinterpret_cast<signed char>(*eax2330 + al2331);
    *eax2332 = reinterpret_cast<signed char>(*eax2333 + al2334);
    *eax2335 = reinterpret_cast<signed char>(*eax2336 + al2337);
    *eax2338 = reinterpret_cast<signed char>(*eax2339 + al2340);
    *eax2341 = reinterpret_cast<signed char>(*eax2342 + al2343);
    *eax2344 = reinterpret_cast<signed char>(*eax2345 + al2346);
    *eax2347 = reinterpret_cast<signed char>(*eax2348 + al2349);
    *eax2350 = reinterpret_cast<signed char>(*eax2351 + al2352);
    *eax2353 = reinterpret_cast<signed char>(*eax2354 + al2355);
    *eax2356 = reinterpret_cast<signed char>(*eax2357 + al2358);
    *eax2359 = reinterpret_cast<signed char>(*eax2360 + al2361);
    *eax2362 = reinterpret_cast<signed char>(*eax2363 + al2364);
    *eax2365 = reinterpret_cast<signed char>(*eax2366 + al2367);
    *eax2368 = reinterpret_cast<signed char>(*eax2369 + al2370);
    *eax2371 = reinterpret_cast<signed char>(*eax2372 + al2373);
    *eax2374 = reinterpret_cast<signed char>(*eax2375 + al2376);
    *eax2377 = reinterpret_cast<signed char>(*eax2378 + al2379);
    *eax2380 = reinterpret_cast<signed char>(*eax2381 + al2382);
    *eax2383 = reinterpret_cast<signed char>(*eax2384 + al2385);
    *eax2386 = reinterpret_cast<signed char>(*eax2387 + al2388);
    *eax2389 = reinterpret_cast<signed char>(*eax2390 + al2391);
    *eax2392 = reinterpret_cast<signed char>(*eax2393 + al2394);
    *eax2395 = reinterpret_cast<signed char>(*eax2396 + al2397);
    *eax2398 = reinterpret_cast<signed char>(*eax2399 + al2400);
    *eax2401 = reinterpret_cast<signed char>(*eax2402 + al2403);
    *eax2404 = reinterpret_cast<signed char>(*eax2405 + al2406);
    *eax2407 = reinterpret_cast<signed char>(*eax2408 + al2409);
    *eax2410 = reinterpret_cast<signed char>(*eax2411 + al2412);
    *eax2413 = reinterpret_cast<signed char>(*eax2414 + al2415);
    *eax2416 = reinterpret_cast<signed char>(*eax2417 + al2418);
    *eax2419 = reinterpret_cast<signed char>(*eax2420 + al2421);
    *eax2422 = reinterpret_cast<signed char>(*eax2423 + al2424);
    *eax2425 = reinterpret_cast<signed char>(*eax2426 + al2427);
    *eax2428 = reinterpret_cast<signed char>(*eax2429 + al2430);
    *eax2431 = reinterpret_cast<signed char>(*eax2432 + al2433);
    *eax2434 = reinterpret_cast<signed char>(*eax2435 + al2436);
    *eax2437 = reinterpret_cast<signed char>(*eax2438 + al2439);
    *eax2440 = reinterpret_cast<signed char>(*eax2441 + al2442);
    *eax2443 = reinterpret_cast<signed char>(*eax2444 + al2445);
    *eax2446 = reinterpret_cast<signed char>(*eax2447 + al2448);
    *eax2449 = reinterpret_cast<signed char>(*eax2450 + al2451);
    *eax2452 = reinterpret_cast<signed char>(*eax2453 + al2454);
    *eax2455 = reinterpret_cast<signed char>(*eax2456 + al2457);
    *eax2458 = reinterpret_cast<signed char>(*eax2459 + al2460);
    *eax2461 = reinterpret_cast<signed char>(*eax2462 + al2463);
    *eax2464 = reinterpret_cast<signed char>(*eax2465 + al2466);
    *eax2467 = reinterpret_cast<signed char>(*eax2468 + al2469);
    *eax2470 = reinterpret_cast<signed char>(*eax2471 + al2472);
    *eax2473 = reinterpret_cast<signed char>(*eax2474 + al2475);
    *eax2476 = reinterpret_cast<signed char>(*eax2477 + al2478);
    *eax2479 = reinterpret_cast<signed char>(*eax2480 + al2481);
    *eax2482 = reinterpret_cast<signed char>(*eax2483 + al2484);
    *eax2485 = reinterpret_cast<signed char>(*eax2486 + al2487);
    *eax2488 = reinterpret_cast<signed char>(*eax2489 + al2490);
    *eax2491 = reinterpret_cast<signed char>(*eax2492 + al2493);
    *eax2494 = reinterpret_cast<signed char>(*eax2495 + al2496);
    *eax2497 = reinterpret_cast<signed char>(*eax2498 + al2499);
    *eax2500 = reinterpret_cast<signed char>(*eax2501 + al2502);
    *eax2503 = reinterpret_cast<signed char>(*eax2504 + al2505);
    *eax2506 = reinterpret_cast<signed char>(*eax2507 + al2508);
    *eax2509 = reinterpret_cast<signed char>(*eax2510 + al2511);
    *eax2512 = reinterpret_cast<signed char>(*eax2513 + al2514);
    *eax2515 = reinterpret_cast<signed char>(*eax2516 + al2517);
    *eax2518 = reinterpret_cast<signed char>(*eax2519 + al2520);
    *eax2521 = reinterpret_cast<signed char>(*eax2522 + al2523);
    *eax2524 = reinterpret_cast<signed char>(*eax2525 + al2526);
    *eax2527 = reinterpret_cast<signed char>(*eax2528 + al2529);
    *eax2530 = reinterpret_cast<signed char>(*eax2531 + al2532);
    *eax2533 = reinterpret_cast<signed char>(*eax2534 + al2535);
    *eax2536 = reinterpret_cast<signed char>(*eax2537 + al2538);
    *eax2539 = reinterpret_cast<signed char>(*eax2540 + al2541);
    *eax2542 = reinterpret_cast<signed char>(*eax2543 + al2544);
    *eax2545 = reinterpret_cast<signed char>(*eax2546 + al2547);
    *eax2548 = reinterpret_cast<signed char>(*eax2549 + al2550);
    *eax2551 = reinterpret_cast<signed char>(*eax2552 + al2553);
    *eax2554 = reinterpret_cast<signed char>(*eax2555 + al2556);
    *eax2557 = reinterpret_cast<signed char>(*eax2558 + al2559);
    *eax2560 = reinterpret_cast<signed char>(*eax2561 + al2562);
    *eax2563 = reinterpret_cast<signed char>(*eax2564 + al2565);
    *eax2566 = reinterpret_cast<signed char>(*eax2567 + al2568);
    *eax2569 = reinterpret_cast<signed char>(*eax2570 + al2571);
    *eax2572 = reinterpret_cast<signed char>(*eax2573 + al2574);
    *eax2575 = reinterpret_cast<signed char>(*eax2576 + al2577);
    *eax2578 = reinterpret_cast<signed char>(*eax2579 + al2580);
    *eax2581 = reinterpret_cast<signed char>(*eax2582 + al2583);
    *eax2584 = reinterpret_cast<signed char>(*eax2585 + al2586);
    *eax2587 = reinterpret_cast<signed char>(*eax2588 + al2589);
    *eax2590 = reinterpret_cast<signed char>(*eax2591 + al2592);
    *eax2593 = reinterpret_cast<signed char>(*eax2594 + al2595);
    *eax2596 = reinterpret_cast<signed char>(*eax2597 + al2598);
    *eax2599 = reinterpret_cast<signed char>(*eax2600 + al2601);
    *eax2602 = reinterpret_cast<signed char>(*eax2603 + al2604);
    *eax2605 = reinterpret_cast<signed char>(*eax2606 + al2607);
    *eax2608 = reinterpret_cast<signed char>(*eax2609 + al2610);
    *eax2611 = reinterpret_cast<signed char>(*eax2612 + al2613);
    *eax2614 = reinterpret_cast<signed char>(*eax2615 + al2616);
    *eax2617 = reinterpret_cast<signed char>(*eax2618 + al2619);
    *eax2620 = reinterpret_cast<signed char>(*eax2621 + al2622);
    *eax2623 = reinterpret_cast<signed char>(*eax2624 + al2625);
    *eax2626 = reinterpret_cast<signed char>(*eax2627 + al2628);
    *eax2629 = reinterpret_cast<signed char>(*eax2630 + al2631);
    *eax2632 = reinterpret_cast<signed char>(*eax2633 + al2634);
    *eax2635 = reinterpret_cast<signed char>(*eax2636 + al2637);
    *eax2638 = reinterpret_cast<signed char>(*eax2639 + al2640);
    *eax2641 = reinterpret_cast<signed char>(*eax2642 + al2643);
    *eax2644 = reinterpret_cast<signed char>(*eax2645 + al2646);
    *eax2647 = reinterpret_cast<signed char>(*eax2648 + al2649);
    *eax2650 = reinterpret_cast<signed char>(*eax2651 + al2652);
    *eax2653 = reinterpret_cast<signed char>(*eax2654 + al2655);
    *eax2656 = reinterpret_cast<signed char>(*eax2657 + al2658);
    *eax2659 = reinterpret_cast<signed char>(*eax2660 + al2661);
    *eax2662 = reinterpret_cast<signed char>(*eax2663 + al2664);
    *eax2665 = reinterpret_cast<signed char>(*eax2666 + al2667);
    *eax2668 = reinterpret_cast<signed char>(*eax2669 + al2670);
    *eax2671 = reinterpret_cast<signed char>(*eax2672 + al2673);
    *eax2674 = reinterpret_cast<signed char>(*eax2675 + al2676);
    *eax2677 = reinterpret_cast<signed char>(*eax2678 + al2679);
    *eax2680 = reinterpret_cast<signed char>(*eax2681 + al2682);
    *eax2683 = reinterpret_cast<signed char>(*eax2684 + al2685);
    *eax2686 = reinterpret_cast<signed char>(*eax2687 + al2688);
    *eax2689 = reinterpret_cast<signed char>(*eax2690 + al2691);
    *eax2692 = reinterpret_cast<signed char>(*eax2693 + al2694);
    *eax2695 = reinterpret_cast<signed char>(*eax2696 + al2697);
    *eax2698 = reinterpret_cast<signed char>(*eax2699 + al2700);
    *eax2701 = reinterpret_cast<signed char>(*eax2702 + al2703);
    *eax2704 = reinterpret_cast<signed char>(*eax2705 + al2706);
    *eax2707 = reinterpret_cast<signed char>(*eax2708 + al2709);
    *eax2710 = reinterpret_cast<signed char>(*eax2711 + al2712);
    *eax2713 = reinterpret_cast<signed char>(*eax2714 + al2715);
    *eax2716 = reinterpret_cast<signed char>(*eax2717 + al2718);
    *eax2719 = reinterpret_cast<signed char>(*eax2720 + al2721);
    *eax2722 = reinterpret_cast<signed char>(*eax2723 + al2724);
    *eax2725 = reinterpret_cast<signed char>(*eax2726 + al2727);
    *eax2728 = reinterpret_cast<signed char>(*eax2729 + al2730);
    *eax2731 = reinterpret_cast<signed char>(*eax2732 + al2733);
    *eax2734 = reinterpret_cast<signed char>(*eax2735 + al2736);
    *eax2737 = reinterpret_cast<signed char>(*eax2738 + al2739);
    *eax2740 = reinterpret_cast<signed char>(*eax2741 + al2742);
    *eax2743 = reinterpret_cast<signed char>(*eax2744 + al2745);
    *eax2746 = reinterpret_cast<signed char>(*eax2747 + al2748);
    *eax2749 = reinterpret_cast<signed char>(*eax2750 + al2751);
    *eax2752 = reinterpret_cast<signed char>(*eax2753 + al2754);
    *eax2755 = reinterpret_cast<signed char>(*eax2756 + al2757);
    *eax2758 = reinterpret_cast<signed char>(*eax2759 + al2760);
    *eax2761 = reinterpret_cast<signed char>(*eax2762 + al2763);
    *eax2764 = reinterpret_cast<signed char>(*eax2765 + al2766);
    *eax2767 = reinterpret_cast<signed char>(*eax2768 + al2769);
    *eax2770 = reinterpret_cast<signed char>(*eax2771 + al2772);
    *eax2773 = reinterpret_cast<signed char>(*eax2774 + al2775);
    *eax2776 = reinterpret_cast<signed char>(*eax2777 + al2778);
    *eax2779 = reinterpret_cast<signed char>(*eax2780 + al2781);
    *eax2782 = reinterpret_cast<signed char>(*eax2783 + al2784);
    *eax2785 = reinterpret_cast<signed char>(*eax2786 + al2787);
    *eax2788 = reinterpret_cast<signed char>(*eax2789 + al2790);
    *eax2791 = reinterpret_cast<signed char>(*eax2792 + al2793);
    *eax2794 = reinterpret_cast<signed char>(*eax2795 + al2796);
    *eax2797 = reinterpret_cast<signed char>(*eax2798 + al2799);
    *eax2800 = reinterpret_cast<signed char>(*eax2801 + al2802);
    *eax2803 = reinterpret_cast<signed char>(*eax2804 + al2805);
    *eax2806 = reinterpret_cast<signed char>(*eax2807 + al2808);
    *eax2809 = reinterpret_cast<signed char>(*eax2810 + al2811);
    *eax2812 = reinterpret_cast<signed char>(*eax2813 + al2814);
    *eax2815 = reinterpret_cast<signed char>(*eax2816 + al2817);
    *eax2818 = reinterpret_cast<signed char>(*eax2819 + al2820);
    *eax2821 = reinterpret_cast<signed char>(*eax2822 + al2823);
    *eax2824 = reinterpret_cast<signed char>(*eax2825 + al2826);
    *eax2827 = reinterpret_cast<signed char>(*eax2828 + al2829);
    *eax2830 = reinterpret_cast<signed char>(*eax2831 + al2832);
    *eax2833 = reinterpret_cast<signed char>(*eax2834 + al2835);
    *eax2836 = reinterpret_cast<signed char>(*eax2837 + al2838);
    *eax2839 = reinterpret_cast<signed char>(*eax2840 + al2841);
    *eax2842 = reinterpret_cast<signed char>(*eax2843 + al2844);
    *eax2845 = reinterpret_cast<signed char>(*eax2846 + al2847);
    *eax2848 = reinterpret_cast<signed char>(*eax2849 + al2850);
    *eax2851 = reinterpret_cast<signed char>(*eax2852 + al2853);
    *eax2854 = reinterpret_cast<signed char>(*eax2855 + al2856);
    *eax2857 = reinterpret_cast<signed char>(*eax2858 + al2859);
    *eax2860 = reinterpret_cast<signed char>(*eax2861 + al2862);
    *eax2863 = reinterpret_cast<signed char>(*eax2864 + al2865);
    *eax2866 = reinterpret_cast<signed char>(*eax2867 + al2868);
    *eax2869 = reinterpret_cast<signed char>(*eax2870 + al2871);
    *eax2872 = reinterpret_cast<signed char>(*eax2873 + al2874);
    *eax2875 = reinterpret_cast<signed char>(*eax2876 + al2877);
    *eax2878 = reinterpret_cast<signed char>(*eax2879 + al2880);
    *eax2881 = reinterpret_cast<signed char>(*eax2882 + al2883);
    *eax2884 = reinterpret_cast<signed char>(*eax2885 + al2886);
    *eax2887 = reinterpret_cast<signed char>(*eax2888 + al2889);
    *eax2890 = reinterpret_cast<signed char>(*eax2891 + al2892);
    *eax2893 = reinterpret_cast<signed char>(*eax2894 + al2895);
    *eax2896 = reinterpret_cast<signed char>(*eax2897 + al2898);
    *eax2899 = reinterpret_cast<signed char>(*eax2900 + al2901);
    *eax2902 = reinterpret_cast<signed char>(*eax2903 + al2904);
    *eax2905 = reinterpret_cast<signed char>(*eax2906 + al2907);
    *eax2908 = reinterpret_cast<signed char>(*eax2909 + al2910);
    *eax2911 = reinterpret_cast<signed char>(*eax2912 + al2913);
    *eax2914 = reinterpret_cast<signed char>(*eax2915 + al2916);
    *eax2917 = reinterpret_cast<signed char>(*eax2918 + al2919);
    *eax2920 = reinterpret_cast<signed char>(*eax2921 + al2922);
    *eax2923 = reinterpret_cast<signed char>(*eax2924 + al2925);
    *eax2926 = reinterpret_cast<signed char>(*eax2927 + al2928);
    *eax2929 = reinterpret_cast<signed char>(*eax2930 + al2931);
    *eax2932 = reinterpret_cast<signed char>(*eax2933 + al2934);
    *eax2935 = reinterpret_cast<signed char>(*eax2936 + al2937);
    *eax2938 = reinterpret_cast<signed char>(*eax2939 + al2940);
    *eax2941 = reinterpret_cast<signed char>(*eax2942 + al2943);
    *eax2944 = reinterpret_cast<signed char>(*eax2945 + al2946);
    *eax2947 = reinterpret_cast<signed char>(*eax2948 + al2949);
    *eax2950 = reinterpret_cast<signed char>(*eax2951 + al2952);
    *eax2953 = reinterpret_cast<signed char>(*eax2954 + al2955);
    *eax2956 = reinterpret_cast<signed char>(*eax2957 + al2958);
    *eax2959 = reinterpret_cast<signed char>(*eax2960 + al2961);
    *eax2962 = reinterpret_cast<signed char>(*eax2963 + al2964);
    *eax2965 = reinterpret_cast<signed char>(*eax2966 + al2967);
    *eax2968 = reinterpret_cast<signed char>(*eax2969 + al2970);
    *eax2971 = reinterpret_cast<signed char>(*eax2972 + al2973);
    *eax2974 = reinterpret_cast<signed char>(*eax2975 + al2976);
    *eax2977 = reinterpret_cast<signed char>(*eax2978 + al2979);
    *eax2980 = reinterpret_cast<signed char>(*eax2981 + al2982);
    *eax2983 = reinterpret_cast<signed char>(*eax2984 + al2985);
    *eax2986 = reinterpret_cast<signed char>(*eax2987 + al2988);
    *eax2989 = reinterpret_cast<signed char>(*eax2990 + al2991);
    *eax2992 = reinterpret_cast<signed char>(*eax2993 + al2994);
    *eax2995 = reinterpret_cast<signed char>(*eax2996 + al2997);
    *eax2998 = reinterpret_cast<signed char>(*eax2999 + al3000);
    *eax3001 = reinterpret_cast<signed char>(*eax3002 + al3003);
    *eax3004 = reinterpret_cast<signed char>(*eax3005 + al3006);
    *eax3007 = reinterpret_cast<signed char>(*eax3008 + al3009);
    *eax3010 = reinterpret_cast<signed char>(*eax3011 + al3012);
    *eax3013 = reinterpret_cast<signed char>(*eax3014 + al3015);
    *eax3016 = reinterpret_cast<signed char>(*eax3017 + al3018);
    *eax3019 = reinterpret_cast<signed char>(*eax3020 + al3021);
    *eax3022 = reinterpret_cast<signed char>(*eax3023 + al3024);
    *eax3025 = reinterpret_cast<signed char>(*eax3026 + al3027);
    *eax3028 = reinterpret_cast<signed char>(*eax3029 + al3030);
    *eax3031 = reinterpret_cast<signed char>(*eax3032 + al3033);
    *eax3034 = reinterpret_cast<signed char>(*eax3035 + al3036);
    *eax3037 = reinterpret_cast<signed char>(*eax3038 + al3039);
    *eax3040 = reinterpret_cast<signed char>(*eax3041 + al3042);
    *eax3043 = reinterpret_cast<signed char>(*eax3044 + al3045);
    *eax3046 = reinterpret_cast<signed char>(*eax3047 + al3048);
    *eax3049 = reinterpret_cast<signed char>(*eax3050 + al3051);
    *eax3052 = reinterpret_cast<signed char>(*eax3053 + al3054);
    *eax3055 = reinterpret_cast<signed char>(*eax3056 + al3057);
    *eax3058 = reinterpret_cast<signed char>(*eax3059 + al3060);
    *eax3061 = reinterpret_cast<signed char>(*eax3062 + al3063);
    *eax3064 = reinterpret_cast<signed char>(*eax3065 + al3066);
    *eax3067 = reinterpret_cast<signed char>(*eax3068 + al3069);
    *eax3070 = reinterpret_cast<signed char>(*eax3071 + al3072);
    *eax3073 = reinterpret_cast<signed char>(*eax3074 + al3075);
    *eax3076 = reinterpret_cast<signed char>(*eax3077 + al3078);
    *eax3079 = reinterpret_cast<signed char>(*eax3080 + al3081);
    *eax3082 = reinterpret_cast<signed char>(*eax3083 + al3084);
    *eax3085 = reinterpret_cast<signed char>(*eax3086 + al3087);
    *eax3088 = reinterpret_cast<signed char>(*eax3089 + al3090);
    *eax3091 = reinterpret_cast<signed char>(*eax3092 + al3093);
    *eax3094 = reinterpret_cast<signed char>(*eax3095 + al3096);
    *eax3097 = reinterpret_cast<signed char>(*eax3098 + al3099);
    *eax3100 = reinterpret_cast<signed char>(*eax3101 + al3102);
    *eax3103 = reinterpret_cast<signed char>(*eax3104 + al3105);
    *eax3106 = reinterpret_cast<signed char>(*eax3107 + al3108);
    *eax3109 = reinterpret_cast<signed char>(*eax3110 + al3111);
    *eax3112 = reinterpret_cast<signed char>(*eax3113 + al3114);
    *eax3115 = reinterpret_cast<signed char>(*eax3116 + al3117);
    *eax3118 = reinterpret_cast<signed char>(*eax3119 + al3120);
    *eax3121 = reinterpret_cast<signed char>(*eax3122 + al3123);
    *eax3124 = reinterpret_cast<signed char>(*eax3125 + al3126);
    *eax3127 = reinterpret_cast<signed char>(*eax3128 + al3129);
    *eax3130 = reinterpret_cast<signed char>(*eax3131 + al3132);
    *eax3133 = reinterpret_cast<signed char>(*eax3134 + al3135);
    *eax3136 = reinterpret_cast<signed char>(*eax3137 + al3138);
    *eax3139 = reinterpret_cast<signed char>(*eax3140 + al3141);
    *eax3142 = reinterpret_cast<signed char>(*eax3143 + al3144);
    *eax3145 = reinterpret_cast<signed char>(*eax3146 + al3147);
    *eax3148 = reinterpret_cast<signed char>(*eax3149 + al3150);
    *eax3151 = reinterpret_cast<signed char>(*eax3152 + al3153);
    *eax3154 = reinterpret_cast<signed char>(*eax3155 + al3156);
    *eax3157 = reinterpret_cast<signed char>(*eax3158 + al3159);
    *eax3160 = reinterpret_cast<signed char>(*eax3161 + al3162);
    *eax3163 = reinterpret_cast<signed char>(*eax3164 + al3165);
    *eax3166 = reinterpret_cast<signed char>(*eax3167 + al3168);
    *eax3169 = reinterpret_cast<signed char>(*eax3170 + al3171);
    *eax3172 = reinterpret_cast<signed char>(*eax3173 + al3174);
    *eax3175 = reinterpret_cast<signed char>(*eax3176 + al3177);
    *eax3178 = reinterpret_cast<signed char>(*eax3179 + al3180);
    *eax3181 = reinterpret_cast<signed char>(*eax3182 + al3183);
    *eax3184 = reinterpret_cast<signed char>(*eax3185 + al3186);
    *eax3187 = reinterpret_cast<signed char>(*eax3188 + al3189);
    *eax3190 = reinterpret_cast<signed char>(*eax3191 + al3192);
    *eax3193 = reinterpret_cast<signed char>(*eax3194 + al3195);
    *eax3196 = reinterpret_cast<signed char>(*eax3197 + al3198);
    *eax3199 = reinterpret_cast<signed char>(*eax3200 + al3201);
    *eax3202 = reinterpret_cast<signed char>(*eax3203 + al3204);
    *eax3205 = reinterpret_cast<signed char>(*eax3206 + al3207);
    *eax3208 = reinterpret_cast<signed char>(*eax3209 + al3210);
    *eax3211 = reinterpret_cast<signed char>(*eax3212 + al3213);
    *eax3214 = reinterpret_cast<signed char>(*eax3215 + al3216);
    *eax3217 = reinterpret_cast<signed char>(*eax3218 + al3219);
    *eax3220 = reinterpret_cast<signed char>(*eax3221 + al3222);
    *eax3223 = reinterpret_cast<signed char>(*eax3224 + al3225);
    *eax3226 = reinterpret_cast<signed char>(*eax3227 + al3228);
    *eax3229 = reinterpret_cast<signed char>(*eax3230 + al3231);
    *eax3232 = reinterpret_cast<signed char>(*eax3233 + al3234);
    *eax3235 = reinterpret_cast<signed char>(*eax3236 + al3237);
    *eax3238 = reinterpret_cast<signed char>(*eax3239 + al3240);
    *eax3241 = reinterpret_cast<signed char>(*eax3242 + al3243);
    *eax3244 = reinterpret_cast<signed char>(*eax3245 + al3246);
    *eax3247 = reinterpret_cast<signed char>(*eax3248 + al3249);
    *eax3250 = reinterpret_cast<signed char>(*eax3251 + al3252);
    *eax3253 = reinterpret_cast<signed char>(*eax3254 + al3255);
    *eax3256 = reinterpret_cast<signed char>(*eax3257 + al3258);
    *eax3259 = reinterpret_cast<signed char>(*eax3260 + al3261);
    *eax3262 = reinterpret_cast<signed char>(*eax3263 + al3264);
    *eax3265 = reinterpret_cast<signed char>(*eax3266 + al3267);
    *eax3268 = reinterpret_cast<signed char>(*eax3269 + al3270);
    *eax3271 = reinterpret_cast<signed char>(*eax3272 + al3273);
    *eax3274 = reinterpret_cast<signed char>(*eax3275 + al3276);
    *eax3277 = reinterpret_cast<signed char>(*eax3278 + al3279);
    *eax3280 = reinterpret_cast<signed char>(*eax3281 + al3282);
    *eax3283 = reinterpret_cast<signed char>(*eax3284 + al3285);
    *eax3286 = reinterpret_cast<signed char>(*eax3287 + al3288);
    *eax3289 = reinterpret_cast<signed char>(*eax3290 + al3291);
    *eax3292 = reinterpret_cast<signed char>(*eax3293 + al3294);
    *eax3295 = reinterpret_cast<signed char>(*eax3296 + al3297);
    *eax3298 = reinterpret_cast<signed char>(*eax3299 + al3300);
    *eax3301 = reinterpret_cast<signed char>(*eax3302 + al3303);
    *eax3304 = reinterpret_cast<signed char>(*eax3305 + al3306);
    *eax3307 = reinterpret_cast<signed char>(*eax3308 + al3309);
    *eax3310 = reinterpret_cast<signed char>(*eax3311 + al3312);
    *eax3313 = reinterpret_cast<signed char>(*eax3314 + al3315);
    *eax3316 = reinterpret_cast<signed char>(*eax3317 + al3318);
    *eax3319 = reinterpret_cast<signed char>(*eax3320 + al3321);
    *eax3322 = reinterpret_cast<signed char>(*eax3323 + al3324);
    *eax3325 = reinterpret_cast<signed char>(*eax3326 + al3327);
    *eax3328 = reinterpret_cast<signed char>(*eax3329 + al3330);
    *eax3331 = reinterpret_cast<signed char>(*eax3332 + al3333);
    *eax3334 = reinterpret_cast<signed char>(*eax3335 + al3336);
    *eax3337 = reinterpret_cast<signed char>(*eax3338 + al3339);
    *eax3340 = reinterpret_cast<signed char>(*eax3341 + al3342);
    *eax3343 = reinterpret_cast<signed char>(*eax3344 + al3345);
    *eax3346 = reinterpret_cast<signed char>(*eax3347 + al3348);
    *eax3349 = reinterpret_cast<signed char>(*eax3350 + al3351);
    *eax3352 = reinterpret_cast<signed char>(*eax3353 + al3354);
    *eax3355 = reinterpret_cast<signed char>(*eax3356 + al3357);
    *eax3358 = reinterpret_cast<signed char>(*eax3359 + al3360);
    *eax3361 = reinterpret_cast<signed char>(*eax3362 + al3363);
    *eax3364 = reinterpret_cast<signed char>(*eax3365 + al3366);
    *eax3367 = reinterpret_cast<signed char>(*eax3368 + al3369);
    *eax3370 = reinterpret_cast<signed char>(*eax3371 + al3372);
    *eax3373 = reinterpret_cast<signed char>(*eax3374 + al3375);
    *eax3376 = reinterpret_cast<signed char>(*eax3377 + al3378);
    *eax3379 = reinterpret_cast<signed char>(*eax3380 + al3381);
    *eax3382 = reinterpret_cast<signed char>(*eax3383 + al3384);
    *eax3385 = reinterpret_cast<signed char>(*eax3386 + al3387);
    *eax3388 = reinterpret_cast<signed char>(*eax3389 + al3390);
    *eax3391 = reinterpret_cast<signed char>(*eax3392 + al3393);
    *eax3394 = reinterpret_cast<signed char>(*eax3395 + al3396);
    *eax3397 = reinterpret_cast<signed char>(*eax3398 + al3399);
    *eax3400 = reinterpret_cast<signed char>(*eax3401 + al3402);
    *eax3403 = reinterpret_cast<signed char>(*eax3404 + al3405);
    *eax3406 = reinterpret_cast<signed char>(*eax3407 + al3408);
    *eax3409 = reinterpret_cast<signed char>(*eax3410 + al3411);
    *eax3412 = reinterpret_cast<signed char>(*eax3413 + al3414);
    *eax3415 = reinterpret_cast<signed char>(*eax3416 + al3417);
    *eax3418 = reinterpret_cast<signed char>(*eax3419 + al3420);
    *eax3421 = reinterpret_cast<signed char>(*eax3422 + al3423);
    *eax3424 = reinterpret_cast<signed char>(*eax3425 + al3426);
    *eax3427 = reinterpret_cast<signed char>(*eax3428 + al3429);
    *eax3430 = reinterpret_cast<signed char>(*eax3431 + al3432);
    *eax3433 = reinterpret_cast<signed char>(*eax3434 + al3435);
    *eax3436 = reinterpret_cast<signed char>(*eax3437 + al3438);
    *eax3439 = reinterpret_cast<signed char>(*eax3440 + al3441);
    *eax3442 = reinterpret_cast<signed char>(*eax3443 + al3444);
    *eax3445 = reinterpret_cast<signed char>(*eax3446 + al3447);
    *eax3448 = reinterpret_cast<signed char>(*eax3449 + al3450);
    *eax3451 = reinterpret_cast<signed char>(*eax3452 + al3453);
    *eax3454 = reinterpret_cast<signed char>(*eax3455 + al3456);
    *eax3457 = reinterpret_cast<signed char>(*eax3458 + al3459);
    *eax3460 = reinterpret_cast<signed char>(*eax3461 + al3462);
    *eax3463 = reinterpret_cast<signed char>(*eax3464 + al3465);
    *eax3466 = reinterpret_cast<signed char>(*eax3467 + al3468);
    *eax3469 = reinterpret_cast<signed char>(*eax3470 + al3471);
    *eax3472 = reinterpret_cast<signed char>(*eax3473 + al3474);
    *eax3475 = reinterpret_cast<signed char>(*eax3476 + al3477);
    *eax3478 = reinterpret_cast<signed char>(*eax3479 + al3480);
    *eax3481 = reinterpret_cast<signed char>(*eax3482 + al3483);
    *eax3484 = reinterpret_cast<signed char>(*eax3485 + al3486);
    *eax3487 = reinterpret_cast<signed char>(*eax3488 + al3489);
    *eax3490 = reinterpret_cast<signed char>(*eax3491 + al3492);
    *eax3493 = reinterpret_cast<signed char>(*eax3494 + al3495);
    *eax3496 = reinterpret_cast<signed char>(*eax3497 + al3498);
    *eax3499 = reinterpret_cast<signed char>(*eax3500 + al3501);
    *eax3502 = reinterpret_cast<signed char>(*eax3503 + al3504);
    *eax3505 = reinterpret_cast<signed char>(*eax3506 + al3507);
    *eax3508 = reinterpret_cast<signed char>(*eax3509 + al3510);
    *eax3511 = reinterpret_cast<signed char>(*eax3512 + al3513);
    *eax3514 = reinterpret_cast<signed char>(*eax3515 + al3516);
    *eax3517 = reinterpret_cast<signed char>(*eax3518 + al3519);
    *eax3520 = reinterpret_cast<signed char>(*eax3521 + al3522);
    *eax3523 = reinterpret_cast<signed char>(*eax3524 + al3525);
    *eax3526 = reinterpret_cast<signed char>(*eax3527 + al3528);
    *eax3529 = reinterpret_cast<signed char>(*eax3530 + al3531);
    *eax3532 = reinterpret_cast<signed char>(*eax3533 + al3534);
    *eax3535 = reinterpret_cast<signed char>(*eax3536 + al3537);
    *eax3538 = reinterpret_cast<signed char>(*eax3539 + al3540);
    *eax3541 = reinterpret_cast<signed char>(*eax3542 + al3543);
    *eax3544 = reinterpret_cast<signed char>(*eax3545 + al3546);
    *eax3547 = reinterpret_cast<signed char>(*eax3548 + al3549);
    *eax3550 = reinterpret_cast<signed char>(*eax3551 + al3552);
    *eax3553 = reinterpret_cast<signed char>(*eax3554 + al3555);
    *eax3556 = reinterpret_cast<signed char>(*eax3557 + al3558);
    *eax3559 = reinterpret_cast<signed char>(*eax3560 + al3561);
    *eax3562 = reinterpret_cast<signed char>(*eax3563 + al3564);
    *eax3565 = reinterpret_cast<signed char>(*eax3566 + al3567);
    *eax3568 = reinterpret_cast<signed char>(*eax3569 + al3570);
    *eax3571 = reinterpret_cast<signed char>(*eax3572 + al3573);
    *eax3574 = reinterpret_cast<signed char>(*eax3575 + al3576);
    *eax3577 = reinterpret_cast<signed char>(*eax3578 + al3579);
    *eax3580 = reinterpret_cast<signed char>(*eax3581 + al3582);
    *eax3583 = reinterpret_cast<signed char>(*eax3584 + al3585);
    *eax3586 = reinterpret_cast<signed char>(*eax3587 + al3588);
    *eax3589 = reinterpret_cast<signed char>(*eax3590 + al3591);
    *eax3592 = reinterpret_cast<signed char>(*eax3593 + al3594);
    *eax3595 = reinterpret_cast<signed char>(*eax3596 + al3597);
    *eax3598 = reinterpret_cast<signed char>(*eax3599 + al3600);
    *eax3601 = reinterpret_cast<signed char>(*eax3602 + al3603);
    *eax3604 = reinterpret_cast<signed char>(*eax3605 + al3606);
    *eax3607 = reinterpret_cast<signed char>(*eax3608 + al3609);
    *eax3610 = reinterpret_cast<signed char>(*eax3611 + al3612);
    *eax3613 = reinterpret_cast<signed char>(*eax3614 + al3615);
    *eax3616 = reinterpret_cast<signed char>(*eax3617 + al3618);
    *eax3619 = reinterpret_cast<signed char>(*eax3620 + al3621);
    *eax3622 = reinterpret_cast<signed char>(*eax3623 + al3624);
    *eax3625 = reinterpret_cast<signed char>(*eax3626 + al3627);
    *eax3628 = reinterpret_cast<signed char>(*eax3629 + al3630);
    *eax3631 = reinterpret_cast<signed char>(*eax3632 + al3633);
    *eax3634 = reinterpret_cast<signed char>(*eax3635 + al3636);
    *eax3637 = reinterpret_cast<signed char>(*eax3638 + al3639);
    *eax3640 = reinterpret_cast<signed char>(*eax3641 + al3642);
    *eax3643 = reinterpret_cast<signed char>(*eax3644 + al3645);
    *eax3646 = reinterpret_cast<signed char>(*eax3647 + al3648);
    *eax3649 = reinterpret_cast<signed char>(*eax3650 + al3651);
    *eax3652 = reinterpret_cast<signed char>(*eax3653 + al3654);
    *eax3655 = reinterpret_cast<signed char>(*eax3656 + al3657);
    *eax3658 = reinterpret_cast<signed char>(*eax3659 + al3660);
    *eax3661 = reinterpret_cast<signed char>(*eax3662 + al3663);
    *eax3664 = reinterpret_cast<signed char>(*eax3665 + al3666);
    *eax3667 = reinterpret_cast<signed char>(*eax3668 + al3669);
    *eax3670 = reinterpret_cast<signed char>(*eax3671 + al3672);
    *eax3673 = reinterpret_cast<signed char>(*eax3674 + al3675);
    *eax3676 = reinterpret_cast<signed char>(*eax3677 + al3678);
    *eax3679 = reinterpret_cast<signed char>(*eax3680 + al3681);
    *eax3682 = reinterpret_cast<signed char>(*eax3683 + al3684);
    *eax3685 = reinterpret_cast<signed char>(*eax3686 + al3687);
    *eax3688 = reinterpret_cast<signed char>(*eax3689 + al3690);
    *eax3691 = reinterpret_cast<signed char>(*eax3692 + al3693);
    *eax3694 = reinterpret_cast<signed char>(*eax3695 + al3696);
    *eax3697 = reinterpret_cast<signed char>(*eax3698 + al3699);
    *eax3700 = reinterpret_cast<signed char>(*eax3701 + al3702);
    *eax3703 = reinterpret_cast<signed char>(*eax3704 + al3705);
    *eax3706 = reinterpret_cast<signed char>(*eax3707 + al3708);
    *eax3709 = reinterpret_cast<signed char>(*eax3710 + al3711);
    *eax3712 = reinterpret_cast<signed char>(*eax3713 + al3714);
    *eax3715 = reinterpret_cast<signed char>(*eax3716 + al3717);
    *eax3718 = reinterpret_cast<signed char>(*eax3719 + al3720);
    *eax3721 = reinterpret_cast<signed char>(*eax3722 + al3723);
    *eax3724 = reinterpret_cast<signed char>(*eax3725 + al3726);
    *eax3727 = reinterpret_cast<signed char>(*eax3728 + al3729);
    *eax3730 = reinterpret_cast<signed char>(*eax3731 + al3732);
    *eax3733 = reinterpret_cast<signed char>(*eax3734 + al3735);
    *eax3736 = reinterpret_cast<signed char>(*eax3737 + al3738);
    *eax3739 = reinterpret_cast<signed char>(*eax3740 + al3741);
    *eax3742 = reinterpret_cast<signed char>(*eax3743 + al3744);
    *eax3745 = reinterpret_cast<signed char>(*eax3746 + al3747);
    *eax3748 = reinterpret_cast<signed char>(*eax3749 + al3750);
    *eax3751 = reinterpret_cast<signed char>(*eax3752 + al3753);
    *eax3754 = reinterpret_cast<signed char>(*eax3755 + al3756);
    *eax3757 = reinterpret_cast<signed char>(*eax3758 + al3759);
    *eax3760 = reinterpret_cast<signed char>(*eax3761 + al3762);
    *eax3763 = reinterpret_cast<signed char>(*eax3764 + al3765);
    *eax3766 = reinterpret_cast<signed char>(*eax3767 + al3768);
    *eax3769 = reinterpret_cast<signed char>(*eax3770 + al3771);
    *eax3772 = reinterpret_cast<signed char>(*eax3773 + al3774);
    *eax3775 = reinterpret_cast<signed char>(*eax3776 + al3777);
    *eax3778 = reinterpret_cast<signed char>(*eax3779 + al3780);
    *eax3781 = reinterpret_cast<signed char>(*eax3782 + al3783);
    *eax3784 = reinterpret_cast<signed char>(*eax3785 + al3786);
    *eax3787 = reinterpret_cast<signed char>(*eax3788 + al3789);
    *eax3790 = reinterpret_cast<signed char>(*eax3791 + al3792);
    *eax3793 = reinterpret_cast<signed char>(*eax3794 + al3795);
    *eax3796 = reinterpret_cast<signed char>(*eax3797 + al3798);
    *eax3799 = reinterpret_cast<signed char>(*eax3800 + al3801);
    *eax3802 = reinterpret_cast<signed char>(*eax3803 + al3804);
    *eax3805 = reinterpret_cast<signed char>(*eax3806 + al3807);
    *eax3808 = reinterpret_cast<signed char>(*eax3809 + al3810);
    *eax3811 = reinterpret_cast<signed char>(*eax3812 + al3813);
    *eax3814 = reinterpret_cast<signed char>(*eax3815 + al3816);
    *eax3817 = reinterpret_cast<signed char>(*eax3818 + al3819);
    *eax3820 = reinterpret_cast<signed char>(*eax3821 + al3822);
    *eax3823 = reinterpret_cast<signed char>(*eax3824 + al3825);
    *eax3826 = reinterpret_cast<signed char>(*eax3827 + al3828);
    *eax3829 = reinterpret_cast<signed char>(*eax3830 + al3831);
    *eax3832 = reinterpret_cast<signed char>(*eax3833 + al3834);
    *eax3835 = reinterpret_cast<signed char>(*eax3836 + al3837);
    *eax3838 = reinterpret_cast<signed char>(*eax3839 + al3840);
    *eax3841 = reinterpret_cast<signed char>(*eax3842 + al3843);
    *eax3844 = reinterpret_cast<signed char>(*eax3845 + al3846);
    *eax3847 = reinterpret_cast<signed char>(*eax3848 + al3849);
    *eax3850 = reinterpret_cast<signed char>(*eax3851 + al3852);
    *eax3853 = reinterpret_cast<signed char>(*eax3854 + al3855);
    *eax3856 = reinterpret_cast<signed char>(*eax3857 + al3858);
    *eax3859 = reinterpret_cast<signed char>(*eax3860 + al3861);
    *eax3862 = reinterpret_cast<signed char>(*eax3863 + al3864);
    *eax3865 = reinterpret_cast<signed char>(*eax3866 + al3867);
    *eax3868 = reinterpret_cast<signed char>(*eax3869 + al3870);
    *eax3871 = reinterpret_cast<signed char>(*eax3872 + al3873);
    *eax3874 = reinterpret_cast<signed char>(*eax3875 + al3876);
    *eax3877 = reinterpret_cast<signed char>(*eax3878 + al3879);
    *eax3880 = reinterpret_cast<signed char>(*eax3881 + al3882);
    *eax3883 = reinterpret_cast<signed char>(*eax3884 + al3885);
    *eax3886 = reinterpret_cast<signed char>(*eax3887 + al3888);
    *eax3889 = reinterpret_cast<signed char>(*eax3890 + al3891);
    *eax3892 = reinterpret_cast<signed char>(*eax3893 + al3894);
    *eax3895 = reinterpret_cast<signed char>(*eax3896 + al3897);
    *eax3898 = reinterpret_cast<signed char>(*eax3899 + al3900);
    *eax3901 = reinterpret_cast<signed char>(*eax3902 + al3903);
    *eax3904 = reinterpret_cast<signed char>(*eax3905 + al3906);
    *eax3907 = reinterpret_cast<signed char>(*eax3908 + al3909);
    *eax3910 = reinterpret_cast<signed char>(*eax3911 + al3912);
    *eax3913 = reinterpret_cast<signed char>(*eax3914 + al3915);
    *eax3916 = reinterpret_cast<signed char>(*eax3917 + al3918);
    *eax3919 = reinterpret_cast<signed char>(*eax3920 + al3921);
    *eax3922 = reinterpret_cast<signed char>(*eax3923 + al3924);
    *eax3925 = reinterpret_cast<signed char>(*eax3926 + al3927);
    *eax3928 = reinterpret_cast<signed char>(*eax3929 + al3930);
    *eax3931 = reinterpret_cast<signed char>(*eax3932 + al3933);
    *eax3934 = reinterpret_cast<signed char>(*eax3935 + al3936);
    *eax3937 = reinterpret_cast<signed char>(*eax3938 + al3939);
    *eax3940 = reinterpret_cast<signed char>(*eax3941 + al3942);
    *eax3943 = reinterpret_cast<signed char>(*eax3944 + al3945);
    *eax3946 = reinterpret_cast<signed char>(*eax3947 + al3948);
    *eax3949 = reinterpret_cast<signed char>(*eax3950 + al3951);
    *eax3952 = reinterpret_cast<signed char>(*eax3953 + al3954);
    *eax3955 = reinterpret_cast<signed char>(*eax3956 + al3957);
    *eax3958 = reinterpret_cast<signed char>(*eax3959 + al3960);
    *eax3961 = reinterpret_cast<signed char>(*eax3962 + al3963);
    *eax3964 = reinterpret_cast<signed char>(*eax3965 + al3966);
    *eax3967 = reinterpret_cast<signed char>(*eax3968 + al3969);
    *eax3970 = reinterpret_cast<signed char>(*eax3971 + al3972);
    *eax3973 = reinterpret_cast<signed char>(*eax3974 + al3975);
    *eax3976 = reinterpret_cast<signed char>(*eax3977 + al3978);
    *eax3979 = reinterpret_cast<signed char>(*eax3980 + al3981);
    *eax3982 = reinterpret_cast<signed char>(*eax3983 + al3984);
    *eax3985 = reinterpret_cast<signed char>(*eax3986 + al3987);
    *eax3988 = reinterpret_cast<signed char>(*eax3989 + al3990);
    *eax3991 = reinterpret_cast<signed char>(*eax3992 + al3993);
    *eax3994 = reinterpret_cast<signed char>(*eax3995 + al3996);
    *eax3997 = reinterpret_cast<signed char>(*eax3998 + al3999);
    *eax4000 = reinterpret_cast<signed char>(*eax4001 + al4002);
    *eax4003 = reinterpret_cast<signed char>(*eax4004 + al4005);
    *eax4006 = reinterpret_cast<signed char>(*eax4007 + al4008);
    *eax4009 = reinterpret_cast<signed char>(*eax4010 + al4011);
    *eax4012 = reinterpret_cast<signed char>(*eax4013 + al4014);
    *eax4015 = reinterpret_cast<signed char>(*eax4016 + al4017);
    *eax4018 = reinterpret_cast<signed char>(*eax4019 + al4020);
    *eax4021 = reinterpret_cast<signed char>(*eax4022 + al4023);
    *eax4024 = reinterpret_cast<signed char>(*eax4025 + al4026);
    *eax4027 = reinterpret_cast<signed char>(*eax4028 + al4029);
    *eax4030 = reinterpret_cast<signed char>(*eax4031 + al4032);
    *eax4033 = reinterpret_cast<signed char>(*eax4034 + al4035);
    *eax4036 = reinterpret_cast<signed char>(*eax4037 + al4038);
    *eax4039 = reinterpret_cast<signed char>(*eax4040 + al4041);
    *eax4042 = reinterpret_cast<signed char>(*eax4043 + al4044);
    *eax4045 = reinterpret_cast<signed char>(*eax4046 + al4047);
    *eax4048 = reinterpret_cast<signed char>(*eax4049 + al4050);
    *eax4051 = reinterpret_cast<signed char>(*eax4052 + al4053);
    *eax4054 = reinterpret_cast<signed char>(*eax4055 + al4056);
    *eax4057 = reinterpret_cast<signed char>(*eax4058 + al4059);
    *eax4060 = reinterpret_cast<signed char>(*eax4061 + al4062);
    *eax4063 = reinterpret_cast<signed char>(*eax4064 + al4065);
    *eax4066 = reinterpret_cast<signed char>(*eax4067 + al4068);
    *eax4069 = reinterpret_cast<signed char>(*eax4070 + al4071);
    *eax4072 = reinterpret_cast<signed char>(*eax4073 + al4074);
    *eax4075 = reinterpret_cast<signed char>(*eax4076 + al4077);
    *eax4078 = reinterpret_cast<signed char>(*eax4079 + al4080);
    *eax4081 = reinterpret_cast<signed char>(*eax4082 + al4083);
    *eax4084 = reinterpret_cast<signed char>(*eax4085 + al4086);
    *eax4087 = reinterpret_cast<signed char>(*eax4088 + al4089);
    *eax4090 = reinterpret_cast<signed char>(*eax4091 + al4092);
    *eax4093 = reinterpret_cast<signed char>(*eax4094 + al4095);
    *eax4096 = reinterpret_cast<signed char>(*eax4097 + al4098);
    *eax4099 = reinterpret_cast<signed char>(*eax4100 + al4101);
    *eax4102 = reinterpret_cast<signed char>(*eax4103 + al4104);
    *eax4105 = reinterpret_cast<signed char>(*eax4106 + al4107);
    *eax4108 = reinterpret_cast<signed char>(*eax4109 + al4110);
    *eax4111 = reinterpret_cast<signed char>(*eax4112 + al4113);
    *eax4114 = reinterpret_cast<signed char>(*eax4115 + al4116);
    *eax4117 = reinterpret_cast<signed char>(*eax4118 + al4119);
    *eax4120 = reinterpret_cast<signed char>(*eax4121 + al4122);
    *eax4123 = reinterpret_cast<signed char>(*eax4124 + al4125);
    *eax4126 = reinterpret_cast<signed char>(*eax4127 + al4128);
    *eax4129 = reinterpret_cast<signed char>(*eax4130 + al4131);
    *eax4132 = reinterpret_cast<signed char>(*eax4133 + al4134);
    *eax4135 = reinterpret_cast<signed char>(*eax4136 + al4137);
    *eax4138 = reinterpret_cast<signed char>(*eax4139 + al4140);
    *eax4141 = reinterpret_cast<signed char>(*eax4142 + al4143);
    *eax4144 = reinterpret_cast<signed char>(*eax4145 + al4146);
    *eax4147 = reinterpret_cast<signed char>(*eax4148 + al4149);
    *eax4150 = reinterpret_cast<signed char>(*eax4151 + al4152);
    *eax4153 = reinterpret_cast<signed char>(*eax4154 + al4155);
    *eax4156 = reinterpret_cast<signed char>(*eax4157 + al4158);
    *eax4159 = reinterpret_cast<signed char>(*eax4160 + al4161);
    *eax4162 = reinterpret_cast<signed char>(*eax4163 + al4164);
    *eax4165 = reinterpret_cast<signed char>(*eax4166 + al4167);
    *eax4168 = reinterpret_cast<signed char>(*eax4169 + al4170);
    *eax4171 = reinterpret_cast<signed char>(*eax4172 + al4173);
    *eax4174 = reinterpret_cast<signed char>(*eax4175 + al4176);
    *eax4177 = reinterpret_cast<signed char>(*eax4178 + al4179);
    *eax4180 = reinterpret_cast<signed char>(*eax4181 + al4182);
    *eax4183 = reinterpret_cast<signed char>(*eax4184 + al4185);
    *eax4186 = reinterpret_cast<signed char>(*eax4187 + al4188);
    *eax4189 = reinterpret_cast<signed char>(*eax4190 + al4191);
    *eax4192 = reinterpret_cast<signed char>(*eax4193 + al4194);
    *eax4195 = reinterpret_cast<signed char>(*eax4196 + al4197);
    *eax4198 = reinterpret_cast<signed char>(*eax4199 + al4200);
    *eax4201 = reinterpret_cast<signed char>(*eax4202 + al4203);
    *eax4204 = reinterpret_cast<signed char>(*eax4205 + al4206);
    *eax4207 = reinterpret_cast<signed char>(*eax4208 + al4209);
    *eax4210 = reinterpret_cast<signed char>(*eax4211 + al4212);
    *eax4213 = reinterpret_cast<signed char>(*eax4214 + al4215);
    *eax4216 = reinterpret_cast<signed char>(*eax4217 + al4218);
    *eax4219 = reinterpret_cast<signed char>(*eax4220 + al4221);
    *eax4222 = reinterpret_cast<signed char>(*eax4223 + al4224);
    *eax4225 = reinterpret_cast<signed char>(*eax4226 + al4227);
    *eax4228 = reinterpret_cast<signed char>(*eax4229 + al4230);
    *eax4231 = reinterpret_cast<signed char>(*eax4232 + al4233);
    *eax4234 = reinterpret_cast<signed char>(*eax4235 + al4236);
    *eax4237 = reinterpret_cast<signed char>(*eax4238 + al4239);
    *eax4240 = reinterpret_cast<signed char>(*eax4241 + al4242);
    *eax4243 = reinterpret_cast<signed char>(*eax4244 + al4245);
    *eax4246 = reinterpret_cast<signed char>(*eax4247 + al4248);
    *eax4249 = reinterpret_cast<signed char>(*eax4250 + al4251);
    *eax4252 = reinterpret_cast<signed char>(*eax4253 + al4254);
    *eax4255 = reinterpret_cast<signed char>(*eax4256 + al4257);
    *eax4258 = reinterpret_cast<signed char>(*eax4259 + al4260);
    *eax4261 = reinterpret_cast<signed char>(*eax4262 + al4263);
    *eax4264 = reinterpret_cast<signed char>(*eax4265 + al4266);
    *eax4267 = reinterpret_cast<signed char>(*eax4268 + al4269);
    *eax4270 = reinterpret_cast<signed char>(*eax4271 + al4272);
    *eax4273 = reinterpret_cast<signed char>(*eax4274 + al4275);
    *eax4276 = reinterpret_cast<signed char>(*eax4277 + al4278);
    *eax4279 = reinterpret_cast<signed char>(*eax4280 + al4281);
    *eax4282 = reinterpret_cast<signed char>(*eax4283 + al4284);
    *eax4285 = reinterpret_cast<signed char>(*eax4286 + al4287);
    *eax4288 = reinterpret_cast<signed char>(*eax4289 + al4290);
    *eax4291 = reinterpret_cast<signed char>(*eax4292 + al4293);
    *eax4294 = reinterpret_cast<signed char>(*eax4295 + al4296);
    *eax4297 = reinterpret_cast<signed char>(*eax4298 + al4299);
    *eax4300 = reinterpret_cast<signed char>(*eax4301 + al4302);
    *eax4303 = reinterpret_cast<signed char>(*eax4304 + al4305);
    *eax4306 = reinterpret_cast<signed char>(*eax4307 + al4308);
    *eax4309 = reinterpret_cast<signed char>(*eax4310 + al4311);
    *eax4312 = reinterpret_cast<signed char>(*eax4313 + al4314);
    *eax4315 = reinterpret_cast<signed char>(*eax4316 + al4317);
    *eax4318 = reinterpret_cast<signed char>(*eax4319 + al4320);
    *eax4321 = reinterpret_cast<signed char>(*eax4322 + al4323);
    *eax4324 = reinterpret_cast<signed char>(*eax4325 + al4326);
    *eax4327 = reinterpret_cast<signed char>(*eax4328 + al4329);
    *eax4330 = reinterpret_cast<signed char>(*eax4331 + al4332);
    *eax4333 = reinterpret_cast<signed char>(*eax4334 + al4335);
    *eax4336 = reinterpret_cast<signed char>(*eax4337 + al4338);
    *eax4339 = reinterpret_cast<signed char>(*eax4340 + al4341);
    *eax4342 = reinterpret_cast<signed char>(*eax4343 + al4344);
    *eax4345 = reinterpret_cast<signed char>(*eax4346 + al4347);
    *eax4348 = reinterpret_cast<signed char>(*eax4349 + al4350);
    *eax4351 = reinterpret_cast<signed char>(*eax4352 + al4353);
    *eax4354 = reinterpret_cast<signed char>(*eax4355 + al4356);
    *eax4357 = reinterpret_cast<signed char>(*eax4358 + al4359);
    *eax4360 = reinterpret_cast<signed char>(*eax4361 + al4362);
    *eax4363 = reinterpret_cast<signed char>(*eax4364 + al4365);
    *eax4366 = reinterpret_cast<signed char>(*eax4367 + al4368);
    *eax4369 = reinterpret_cast<signed char>(*eax4370 + al4371);
    *eax4372 = reinterpret_cast<signed char>(*eax4373 + al4374);
    *eax4375 = reinterpret_cast<signed char>(*eax4376 + al4377);
    *eax4378 = reinterpret_cast<signed char>(*eax4379 + al4380);
    *eax4381 = reinterpret_cast<signed char>(*eax4382 + al4383);
    *eax4384 = reinterpret_cast<signed char>(*eax4385 + al4386);
    *eax4387 = reinterpret_cast<signed char>(*eax4388 + al4389);
    *eax4390 = reinterpret_cast<signed char>(*eax4391 + al4392);
    *eax4393 = reinterpret_cast<signed char>(*eax4394 + al4395);
    *eax4396 = reinterpret_cast<signed char>(*eax4397 + al4398);
    *eax4399 = reinterpret_cast<signed char>(*eax4400 + al4401);
    *eax4402 = reinterpret_cast<signed char>(*eax4403 + al4404);
    *eax4405 = reinterpret_cast<signed char>(*eax4406 + al4407);
    *eax4408 = reinterpret_cast<signed char>(*eax4409 + al4410);
    *eax4411 = reinterpret_cast<signed char>(*eax4412 + al4413);
    *eax4414 = reinterpret_cast<signed char>(*eax4415 + al4416);
    *eax4417 = reinterpret_cast<signed char>(*eax4418 + al4419);
    *eax4420 = reinterpret_cast<signed char>(*eax4421 + al4422);
    *eax4423 = reinterpret_cast<signed char>(*eax4424 + al4425);
    *eax4426 = reinterpret_cast<signed char>(*eax4427 + al4428);
    *eax4429 = reinterpret_cast<signed char>(*eax4430 + al4431);
    *eax4432 = reinterpret_cast<signed char>(*eax4433 + al4434);
    *eax4435 = reinterpret_cast<signed char>(*eax4436 + al4437);
    *eax4438 = reinterpret_cast<signed char>(*eax4439 + al4440);
    *eax4441 = reinterpret_cast<signed char>(*eax4442 + al4443);
    *eax4444 = reinterpret_cast<signed char>(*eax4445 + al4446);
    *eax4447 = reinterpret_cast<signed char>(*eax4448 + al4449);
    *eax4450 = reinterpret_cast<signed char>(*eax4451 + al4452);
    *eax4453 = reinterpret_cast<signed char>(*eax4454 + al4455);
    *eax4456 = reinterpret_cast<signed char>(*eax4457 + al4458);
    *eax4459 = reinterpret_cast<signed char>(*eax4460 + al4461);
    *eax4462 = reinterpret_cast<signed char>(*eax4463 + al4464);
    *eax4465 = reinterpret_cast<signed char>(*eax4466 + al4467);
    *eax4468 = reinterpret_cast<signed char>(*eax4469 + al4470);
    *eax4471 = reinterpret_cast<signed char>(*eax4472 + al4473);
    *eax4474 = reinterpret_cast<signed char>(*eax4475 + al4476);
    *eax4477 = reinterpret_cast<signed char>(*eax4478 + al4479);
    *eax4480 = reinterpret_cast<signed char>(*eax4481 + al4482);
    *eax4483 = reinterpret_cast<signed char>(*eax4484 + al4485);
    *eax4486 = reinterpret_cast<signed char>(*eax4487 + al4488);
    *eax4489 = reinterpret_cast<signed char>(*eax4490 + al4491);
    *eax4492 = reinterpret_cast<signed char>(*eax4493 + al4494);
    *eax4495 = reinterpret_cast<signed char>(*eax4496 + al4497);
    *eax4498 = reinterpret_cast<signed char>(*eax4499 + al4500);
    *eax4501 = reinterpret_cast<signed char>(*eax4502 + al4503);
    *eax4504 = reinterpret_cast<signed char>(*eax4505 + al4506);
    *eax4507 = reinterpret_cast<signed char>(*eax4508 + al4509);
    *eax4510 = reinterpret_cast<signed char>(*eax4511 + al4512);
    *eax4513 = reinterpret_cast<signed char>(*eax4514 + al4515);
    *eax4516 = reinterpret_cast<signed char>(*eax4517 + al4518);
    *eax4519 = reinterpret_cast<signed char>(*eax4520 + al4521);
    *eax4522 = reinterpret_cast<signed char>(*eax4523 + al4524);
    *eax4525 = reinterpret_cast<signed char>(*eax4526 + al4527);
    *eax4528 = reinterpret_cast<signed char>(*eax4529 + al4530);
    *eax4531 = reinterpret_cast<signed char>(*eax4532 + al4533);
    *eax4534 = reinterpret_cast<signed char>(*eax4535 + al4536);
    *eax4537 = reinterpret_cast<signed char>(*eax4538 + al4539);
    *eax4540 = reinterpret_cast<signed char>(*eax4541 + al4542);
    *eax4543 = reinterpret_cast<signed char>(*eax4544 + al4545);
    *eax4546 = reinterpret_cast<signed char>(*eax4547 + al4548);
    *eax4549 = reinterpret_cast<signed char>(*eax4550 + al4551);
    *eax4552 = reinterpret_cast<signed char>(*eax4553 + al4554);
    *eax4555 = reinterpret_cast<signed char>(*eax4556 + al4557);
    *eax4558 = reinterpret_cast<signed char>(*eax4559 + al4560);
    *eax4561 = reinterpret_cast<signed char>(*eax4562 + al4563);
    *eax4564 = reinterpret_cast<signed char>(*eax4565 + al4566);
    *eax4567 = reinterpret_cast<signed char>(*eax4568 + al4569);
    *eax4570 = reinterpret_cast<signed char>(*eax4571 + al4572);
    *eax4573 = reinterpret_cast<signed char>(*eax4574 + al4575);
    *eax4576 = reinterpret_cast<signed char>(*eax4577 + al4578);
    *eax4579 = reinterpret_cast<signed char>(*eax4580 + al4581);
    *eax4582 = reinterpret_cast<signed char>(*eax4583 + al4584);
    *eax4585 = reinterpret_cast<signed char>(*eax4586 + al4587);
    *eax4588 = reinterpret_cast<signed char>(*eax4589 + al4590);
    *eax4591 = reinterpret_cast<signed char>(*eax4592 + al4593);
    *eax4594 = reinterpret_cast<signed char>(*eax4595 + al4596);
    *eax4597 = reinterpret_cast<signed char>(*eax4598 + al4599);
    *eax4600 = reinterpret_cast<signed char>(*eax4601 + al4602);
    *eax4603 = reinterpret_cast<signed char>(*eax4604 + al4605);
    *eax4606 = reinterpret_cast<signed char>(*eax4607 + al4608);
    *eax4609 = reinterpret_cast<signed char>(*eax4610 + al4611);
    *eax4612 = reinterpret_cast<signed char>(*eax4613 + al4614);
    *eax4615 = reinterpret_cast<signed char>(*eax4616 + al4617);
    *eax4618 = reinterpret_cast<signed char>(*eax4619 + al4620);
    *eax4621 = reinterpret_cast<signed char>(*eax4622 + al4623);
    *eax4624 = reinterpret_cast<signed char>(*eax4625 + al4626);
    *eax4627 = reinterpret_cast<signed char>(*eax4628 + al4629);
    *eax4630 = reinterpret_cast<signed char>(*eax4631 + al4632);
    *eax4633 = reinterpret_cast<signed char>(*eax4634 + al4635);
    *eax4636 = reinterpret_cast<signed char>(*eax4637 + al4638);
    *eax4639 = reinterpret_cast<signed char>(*eax4640 + al4641);
    *eax4642 = reinterpret_cast<signed char>(*eax4643 + al4644);
    *eax4645 = reinterpret_cast<signed char>(*eax4646 + al4647);
    *eax4648 = reinterpret_cast<signed char>(*eax4649 + al4650);
    *eax4651 = reinterpret_cast<signed char>(*eax4652 + al4653);
    *eax4654 = reinterpret_cast<signed char>(*eax4655 + al4656);
    *eax4657 = reinterpret_cast<signed char>(*eax4658 + al4659);
    *eax4660 = reinterpret_cast<signed char>(*eax4661 + al4662);
    *eax4663 = reinterpret_cast<signed char>(*eax4664 + al4665);
    *eax4666 = reinterpret_cast<signed char>(*eax4667 + al4668);
    *eax4669 = reinterpret_cast<signed char>(*eax4670 + al4671);
    *eax4672 = reinterpret_cast<signed char>(*eax4673 + al4674);
    *eax4675 = reinterpret_cast<signed char>(*eax4676 + al4677);
    *eax4678 = reinterpret_cast<signed char>(*eax4679 + al4680);
    *eax4681 = reinterpret_cast<signed char>(*eax4682 + al4683);
    *eax4684 = reinterpret_cast<signed char>(*eax4685 + al4686);
    *eax4687 = reinterpret_cast<signed char>(*eax4688 + al4689);
    *eax4690 = reinterpret_cast<signed char>(*eax4691 + al4692);
    *eax4693 = reinterpret_cast<signed char>(*eax4694 + al4695);
    *eax4696 = reinterpret_cast<signed char>(*eax4697 + al4698);
    *eax4699 = reinterpret_cast<signed char>(*eax4700 + al4701);
    *eax4702 = reinterpret_cast<signed char>(*eax4703 + al4704);
    *eax4705 = reinterpret_cast<signed char>(*eax4706 + al4707);
    *eax4708 = reinterpret_cast<signed char>(*eax4709 + al4710);
    *eax4711 = reinterpret_cast<signed char>(*eax4712 + al4713);
    *eax4714 = reinterpret_cast<signed char>(*eax4715 + al4716);
    *eax4717 = reinterpret_cast<signed char>(*eax4718 + al4719);
    *eax4720 = reinterpret_cast<signed char>(*eax4721 + al4722);
    *eax4723 = reinterpret_cast<signed char>(*eax4724 + al4725);
    *eax4726 = reinterpret_cast<signed char>(*eax4727 + al4728);
    *eax4729 = reinterpret_cast<signed char>(*eax4730 + al4731);
    *eax4732 = reinterpret_cast<signed char>(*eax4733 + al4734);
    *eax4735 = reinterpret_cast<signed char>(*eax4736 + al4737);
    *eax4738 = reinterpret_cast<signed char>(*eax4739 + al4740);
    *eax4741 = reinterpret_cast<signed char>(*eax4742 + al4743);
    *eax4744 = reinterpret_cast<signed char>(*eax4745 + al4746);
    *eax4747 = reinterpret_cast<signed char>(*eax4748 + al4749);
    *eax4750 = reinterpret_cast<signed char>(*eax4751 + al4752);
    *eax4753 = reinterpret_cast<signed char>(*eax4754 + al4755);
    *eax4756 = reinterpret_cast<signed char>(*eax4757 + al4758);
    *eax4759 = reinterpret_cast<signed char>(*eax4760 + al4761);
    *eax4762 = reinterpret_cast<signed char>(*eax4763 + al4764);
    *eax4765 = reinterpret_cast<signed char>(*eax4766 + al4767);
    *eax4768 = reinterpret_cast<signed char>(*eax4769 + al4770);
    *eax4771 = reinterpret_cast<signed char>(*eax4772 + al4773);
    *eax4774 = reinterpret_cast<signed char>(*eax4775 + al4776);
    *eax4777 = reinterpret_cast<signed char>(*eax4778 + al4779);
    *eax4780 = reinterpret_cast<signed char>(*eax4781 + al4782);
    *eax4783 = reinterpret_cast<signed char>(*eax4784 + al4785);
    *eax4786 = reinterpret_cast<signed char>(*eax4787 + al4788);
    *eax4789 = reinterpret_cast<signed char>(*eax4790 + al4791);
    *eax4792 = reinterpret_cast<signed char>(*eax4793 + al4794);
    *eax4795 = reinterpret_cast<signed char>(*eax4796 + al4797);
    *eax4798 = reinterpret_cast<signed char>(*eax4799 + al4800);
    *eax4801 = reinterpret_cast<signed char>(*eax4802 + al4803);
    *eax4804 = reinterpret_cast<signed char>(*eax4805 + al4806);
    *eax4807 = reinterpret_cast<signed char>(*eax4808 + al4809);
    *eax4810 = reinterpret_cast<signed char>(*eax4811 + al4812);
    *eax4813 = reinterpret_cast<signed char>(*eax4814 + al4815);
    *eax4816 = reinterpret_cast<signed char>(*eax4817 + al4818);
    *eax4819 = reinterpret_cast<signed char>(*eax4820 + al4821);
    *eax4822 = reinterpret_cast<signed char>(*eax4823 + al4824);
    *eax4825 = reinterpret_cast<signed char>(*eax4826 + al4827);
    *eax4828 = reinterpret_cast<signed char>(*eax4829 + al4830);
    *eax4831 = reinterpret_cast<signed char>(*eax4832 + al4833);
    *eax4834 = reinterpret_cast<signed char>(*eax4835 + al4836);
    *eax4837 = reinterpret_cast<signed char>(*eax4838 + al4839);
    *eax4840 = reinterpret_cast<signed char>(*eax4841 + al4842);
    *eax4843 = reinterpret_cast<signed char>(*eax4844 + al4845);
    *eax4846 = reinterpret_cast<signed char>(*eax4847 + al4848);
    *eax4849 = reinterpret_cast<signed char>(*eax4850 + al4851);
    *eax4852 = reinterpret_cast<signed char>(*eax4853 + al4854);
    *eax4855 = reinterpret_cast<signed char>(*eax4856 + al4857);
    *eax4858 = reinterpret_cast<signed char>(*eax4859 + al4860);
    *eax4861 = reinterpret_cast<signed char>(*eax4862 + al4863);
    *eax4864 = reinterpret_cast<signed char>(*eax4865 + al4866);
    *eax4867 = reinterpret_cast<signed char>(*eax4868 + al4869);
    *eax4870 = reinterpret_cast<signed char>(*eax4871 + al4872);
    *eax4873 = reinterpret_cast<signed char>(*eax4874 + al4875);
    *eax4876 = reinterpret_cast<signed char>(*eax4877 + al4878);
    *eax4879 = reinterpret_cast<signed char>(*eax4880 + al4881);
    *eax4882 = reinterpret_cast<signed char>(*eax4883 + al4884);
    *eax4885 = reinterpret_cast<signed char>(*eax4886 + al4887);
    *eax4888 = reinterpret_cast<signed char>(*eax4889 + al4890);
    *eax4891 = reinterpret_cast<signed char>(*eax4892 + al4893);
    *eax4894 = reinterpret_cast<signed char>(*eax4895 + al4896);
    *eax4897 = reinterpret_cast<signed char>(*eax4898 + al4899);
    *eax4900 = reinterpret_cast<signed char>(*eax4901 + al4902);
    *eax4903 = reinterpret_cast<signed char>(*eax4904 + al4905);
    *eax4906 = reinterpret_cast<signed char>(*eax4907 + al4908);
    *eax4909 = reinterpret_cast<signed char>(*eax4910 + al4911);
    *eax4912 = reinterpret_cast<signed char>(*eax4913 + al4914);
    *eax4915 = reinterpret_cast<signed char>(*eax4916 + al4917);
    *eax4918 = reinterpret_cast<signed char>(*eax4919 + al4920);
    *eax4921 = reinterpret_cast<signed char>(*eax4922 + al4923);
    *eax4924 = reinterpret_cast<signed char>(*eax4925 + al4926);
    *eax4927 = reinterpret_cast<signed char>(*eax4928 + al4929);
    *eax4930 = reinterpret_cast<signed char>(*eax4931 + al4932);
    *eax4933 = reinterpret_cast<signed char>(*eax4934 + al4935);
    *eax4936 = reinterpret_cast<signed char>(*eax4937 + al4938);
    *eax4939 = reinterpret_cast<signed char>(*eax4940 + al4941);
    *eax4942 = reinterpret_cast<signed char>(*eax4943 + al4944);
    *eax4945 = reinterpret_cast<signed char>(*eax4946 + al4947);
    *eax4948 = reinterpret_cast<signed char>(*eax4949 + al4950);
    *eax4951 = reinterpret_cast<signed char>(*eax4952 + al4953);
    *eax4954 = reinterpret_cast<signed char>(*eax4955 + al4956);
    *eax4957 = reinterpret_cast<signed char>(*eax4958 + al4959);
    *eax4960 = reinterpret_cast<signed char>(*eax4961 + al4962);
    *eax4963 = reinterpret_cast<signed char>(*eax4964 + al4965);
    *eax4966 = reinterpret_cast<signed char>(*eax4967 + al4968);
    *eax4969 = reinterpret_cast<signed char>(*eax4970 + al4971);
    *eax4972 = reinterpret_cast<signed char>(*eax4973 + al4974);
    *eax4975 = reinterpret_cast<signed char>(*eax4976 + al4977);
    *eax4978 = reinterpret_cast<signed char>(*eax4979 + al4980);
    *eax4981 = reinterpret_cast<signed char>(*eax4982 + al4983);
    *eax4984 = reinterpret_cast<signed char>(*eax4985 + al4986);
    *eax4987 = reinterpret_cast<signed char>(*eax4988 + al4989);
    *eax4990 = reinterpret_cast<signed char>(*eax4991 + al4992);
    *eax4993 = reinterpret_cast<signed char>(*eax4994 + al4995);
    *eax4996 = reinterpret_cast<signed char>(*eax4997 + al4998);
    *eax4999 = reinterpret_cast<signed char>(*eax5000 + al5001);
    *eax5002 = reinterpret_cast<signed char>(*eax5003 + al5004);
    *eax5005 = reinterpret_cast<signed char>(*eax5006 + al5007);
    *eax5008 = reinterpret_cast<signed char>(*eax5009 + al5010);
    *eax5011 = reinterpret_cast<signed char>(*eax5012 + al5013);
    *eax5014 = reinterpret_cast<signed char>(*eax5015 + al5016);
    *eax5017 = reinterpret_cast<signed char>(*eax5018 + al5019);
    *eax5020 = reinterpret_cast<signed char>(*eax5021 + al5022);
    *eax5023 = reinterpret_cast<signed char>(*eax5024 + al5025);
    *eax5026 = reinterpret_cast<signed char>(*eax5027 + al5028);
    *eax5029 = reinterpret_cast<signed char>(*eax5030 + al5031);
    *eax5032 = reinterpret_cast<signed char>(*eax5033 + al5034);
    *eax5035 = reinterpret_cast<signed char>(*eax5036 + al5037);
    *eax5038 = reinterpret_cast<signed char>(*eax5039 + al5040);
    *eax5041 = reinterpret_cast<signed char>(*eax5042 + al5043);
    *eax5044 = reinterpret_cast<signed char>(*eax5045 + al5046);
    *eax5047 = reinterpret_cast<signed char>(*eax5048 + al5049);
    *eax5050 = reinterpret_cast<signed char>(*eax5051 + al5052);
    *eax5053 = reinterpret_cast<signed char>(*eax5054 + al5055);
    *eax5056 = reinterpret_cast<signed char>(*eax5057 + al5058);
    *eax5059 = reinterpret_cast<signed char>(*eax5060 + al5061);
    *eax5062 = reinterpret_cast<signed char>(*eax5063 + al5064);
    *eax5065 = reinterpret_cast<signed char>(*eax5066 + al5067);
    *eax5068 = reinterpret_cast<signed char>(*eax5069 + al5070);
    *eax5071 = reinterpret_cast<signed char>(*eax5072 + al5073);
    *eax5074 = reinterpret_cast<signed char>(*eax5075 + al5076);
    *eax5077 = reinterpret_cast<signed char>(*eax5078 + al5079);
    *eax5080 = reinterpret_cast<signed char>(*eax5081 + al5082);
    *eax5083 = reinterpret_cast<signed char>(*eax5084 + al5085);
    *eax5086 = reinterpret_cast<signed char>(*eax5087 + al5088);
    *eax5089 = reinterpret_cast<signed char>(*eax5090 + al5091);
    *eax5092 = reinterpret_cast<signed char>(*eax5093 + al5094);
    *eax5095 = reinterpret_cast<signed char>(*eax5096 + al5097);
    *eax5098 = reinterpret_cast<signed char>(*eax5099 + al5100);
    *eax5101 = reinterpret_cast<signed char>(*eax5102 + al5103);
    *eax5104 = reinterpret_cast<signed char>(*eax5105 + al5106);
    *eax5107 = reinterpret_cast<signed char>(*eax5108 + al5109);
    *eax5110 = reinterpret_cast<signed char>(*eax5111 + al5112);
    *eax5113 = reinterpret_cast<signed char>(*eax5114 + al5115);
    *eax5116 = reinterpret_cast<signed char>(*eax5117 + al5118);
    *eax5119 = reinterpret_cast<signed char>(*eax5120 + al5121);
    *eax5122 = reinterpret_cast<signed char>(*eax5123 + al5124);
    *eax5125 = reinterpret_cast<signed char>(*eax5126 + al5127);
    *eax5128 = reinterpret_cast<signed char>(*eax5129 + al5130);
    *eax5131 = reinterpret_cast<signed char>(*eax5132 + al5133);
    *eax5134 = reinterpret_cast<signed char>(*eax5135 + al5136);
    *eax5137 = reinterpret_cast<signed char>(*eax5138 + al5139);
    *eax5140 = reinterpret_cast<signed char>(*eax5141 + al5142);
    *eax5143 = reinterpret_cast<signed char>(*eax5144 + al5145);
    *eax5146 = reinterpret_cast<signed char>(*eax5147 + al5148);
    *eax5149 = reinterpret_cast<signed char>(*eax5150 + al5151);
    *eax5152 = reinterpret_cast<signed char>(*eax5153 + al5154);
    *eax5155 = reinterpret_cast<signed char>(*eax5156 + al5157);
    *eax5158 = reinterpret_cast<signed char>(*eax5159 + al5160);
    *eax5161 = reinterpret_cast<signed char>(*eax5162 + al5163);
    *eax5164 = reinterpret_cast<signed char>(*eax5165 + al5166);
    *eax5167 = reinterpret_cast<signed char>(*eax5168 + al5169);
    *eax5170 = reinterpret_cast<signed char>(*eax5171 + al5172);
    *eax5173 = reinterpret_cast<signed char>(*eax5174 + al5175);
    *eax5176 = reinterpret_cast<signed char>(*eax5177 + al5178);
    *eax5179 = reinterpret_cast<signed char>(*eax5180 + al5181);
    *eax5182 = reinterpret_cast<signed char>(*eax5183 + al5184);
    *eax5185 = reinterpret_cast<signed char>(*eax5186 + al5187);
    *eax5188 = reinterpret_cast<signed char>(*eax5189 + al5190);
    *eax5191 = reinterpret_cast<signed char>(*eax5192 + al5193);
    *eax5194 = reinterpret_cast<signed char>(*eax5195 + al5196);
    *eax5197 = reinterpret_cast<signed char>(*eax5198 + al5199);
    *eax5200 = reinterpret_cast<signed char>(*eax5201 + al5202);
    *eax5203 = reinterpret_cast<signed char>(*eax5204 + al5205);
    *eax5206 = reinterpret_cast<signed char>(*eax5207 + al5208);
    *eax5209 = reinterpret_cast<signed char>(*eax5210 + al5211);
    *eax5212 = reinterpret_cast<signed char>(*eax5213 + al5214);
    *eax5215 = reinterpret_cast<signed char>(*eax5216 + al5217);
    *eax5218 = reinterpret_cast<signed char>(*eax5219 + al5220);
    *eax5221 = reinterpret_cast<signed char>(*eax5222 + al5223);
    *eax5224 = reinterpret_cast<signed char>(*eax5225 + al5226);
    *eax5227 = reinterpret_cast<signed char>(*eax5228 + al5229);
    *eax5230 = reinterpret_cast<signed char>(*eax5231 + al5232);
    *eax5233 = reinterpret_cast<signed char>(*eax5234 + al5235);
    *eax5236 = reinterpret_cast<signed char>(*eax5237 + al5238);
    *eax5239 = reinterpret_cast<signed char>(*eax5240 + al5241);
    *eax5242 = reinterpret_cast<signed char>(*eax5243 + al5244);
    *eax5245 = reinterpret_cast<signed char>(*eax5246 + al5247);
    *eax5248 = reinterpret_cast<signed char>(*eax5249 + al5250);
    *eax5251 = reinterpret_cast<signed char>(*eax5252 + al5253);
    *eax5254 = reinterpret_cast<signed char>(*eax5255 + al5256);
    *eax5257 = reinterpret_cast<signed char>(*eax5258 + al5259);
    *eax5260 = reinterpret_cast<signed char>(*eax5261 + al5262);
    *eax5263 = reinterpret_cast<signed char>(*eax5264 + al5265);
    *eax5266 = reinterpret_cast<signed char>(*eax5267 + al5268);
    *eax5269 = reinterpret_cast<signed char>(*eax5270 + al5271);
    *eax5272 = reinterpret_cast<signed char>(*eax5273 + al5274);
    *eax5275 = reinterpret_cast<signed char>(*eax5276 + al5277);
    *eax5278 = reinterpret_cast<signed char>(*eax5279 + al5280);
    *eax5281 = reinterpret_cast<signed char>(*eax5282 + al5283);
    *eax5284 = reinterpret_cast<signed char>(*eax5285 + al5286);
    *eax5287 = reinterpret_cast<signed char>(*eax5288 + al5289);
    *eax5290 = reinterpret_cast<signed char>(*eax5291 + al5292);
    *eax5293 = reinterpret_cast<signed char>(*eax5294 + al5295);
    *eax5296 = reinterpret_cast<signed char>(*eax5297 + al5298);
    *eax5299 = reinterpret_cast<signed char>(*eax5300 + al5301);
    *eax5302 = reinterpret_cast<signed char>(*eax5303 + al5304);
    *eax5305 = reinterpret_cast<signed char>(*eax5306 + al5307);
    *eax5308 = reinterpret_cast<signed char>(*eax5309 + al5310);
    *eax5311 = reinterpret_cast<signed char>(*eax5312 + al5313);
    *eax5314 = reinterpret_cast<signed char>(*eax5315 + al5316);
    *eax5317 = reinterpret_cast<signed char>(*eax5318 + al5319);
    *eax5320 = reinterpret_cast<signed char>(*eax5321 + al5322);
    *eax5323 = reinterpret_cast<signed char>(*eax5324 + al5325);
    *eax5326 = reinterpret_cast<signed char>(*eax5327 + al5328);
    *eax5329 = reinterpret_cast<signed char>(*eax5330 + al5331);
    *eax5332 = reinterpret_cast<signed char>(*eax5333 + al5334);
    *eax5335 = reinterpret_cast<signed char>(*eax5336 + al5337);
    *eax5338 = reinterpret_cast<signed char>(*eax5339 + al5340);
    *eax5341 = reinterpret_cast<signed char>(*eax5342 + al5343);
    *eax5344 = reinterpret_cast<signed char>(*eax5345 + al5346);
    *eax5347 = reinterpret_cast<signed char>(*eax5348 + al5349);
    *eax5350 = reinterpret_cast<signed char>(*eax5351 + al5352);
    *eax5353 = reinterpret_cast<signed char>(*eax5354 + al5355);
    *eax5356 = reinterpret_cast<signed char>(*eax5357 + al5358);
    *eax5359 = reinterpret_cast<signed char>(*eax5360 + al5361);
    *eax5362 = reinterpret_cast<signed char>(*eax5363 + al5364);
    *eax5365 = reinterpret_cast<signed char>(*eax5366 + al5367);
    *eax5368 = reinterpret_cast<signed char>(*eax5369 + al5370);
    *eax5371 = reinterpret_cast<signed char>(*eax5372 + al5373);
    *eax5374 = reinterpret_cast<signed char>(*eax5375 + al5376);
    *eax5377 = reinterpret_cast<signed char>(*eax5378 + al5379);
    *eax5380 = reinterpret_cast<signed char>(*eax5381 + al5382);
    *eax5383 = reinterpret_cast<signed char>(*eax5384 + al5385);
    *eax5386 = reinterpret_cast<signed char>(*eax5387 + al5388);
    *eax5389 = reinterpret_cast<signed char>(*eax5390 + al5391);
    *eax5392 = reinterpret_cast<signed char>(*eax5393 + al5394);
    *eax5395 = reinterpret_cast<signed char>(*eax5396 + al5397);
    *eax5398 = reinterpret_cast<signed char>(*eax5399 + al5400);
    *eax5401 = reinterpret_cast<signed char>(*eax5402 + al5403);
    *eax5404 = reinterpret_cast<signed char>(*eax5405 + al5406);
    *eax5407 = reinterpret_cast<signed char>(*eax5408 + al5409);
    *eax5410 = reinterpret_cast<signed char>(*eax5411 + al5412);
    *eax5413 = reinterpret_cast<signed char>(*eax5414 + al5415);
    *eax5416 = reinterpret_cast<signed char>(*eax5417 + al5418);
    *eax5419 = reinterpret_cast<signed char>(*eax5420 + al5421);
    *eax5422 = reinterpret_cast<signed char>(*eax5423 + al5424);
    *eax5425 = reinterpret_cast<signed char>(*eax5426 + al5427);
    *eax5428 = reinterpret_cast<signed char>(*eax5429 + al5430);
    *eax5431 = reinterpret_cast<signed char>(*eax5432 + al5433);
    *eax5434 = reinterpret_cast<signed char>(*eax5435 + al5436);
    *eax5437 = reinterpret_cast<signed char>(*eax5438 + al5439);
    *eax5440 = reinterpret_cast<signed char>(*eax5441 + al5442);
    *eax5443 = reinterpret_cast<signed char>(*eax5444 + al5445);
    *eax5446 = reinterpret_cast<signed char>(*eax5447 + al5448);
    *eax5449 = reinterpret_cast<signed char>(*eax5450 + al5451);
    *eax5452 = reinterpret_cast<signed char>(*eax5453 + al5454);
    *eax5455 = reinterpret_cast<signed char>(*eax5456 + al5457);
    *eax5458 = reinterpret_cast<signed char>(*eax5459 + al5460);
    *eax5461 = reinterpret_cast<signed char>(*eax5462 + al5463);
    *eax5464 = reinterpret_cast<signed char>(*eax5465 + al5466);
    *eax5467 = reinterpret_cast<signed char>(*eax5468 + al5469);
    *eax5470 = reinterpret_cast<signed char>(*eax5471 + al5472);
    *eax5473 = reinterpret_cast<signed char>(*eax5474 + al5475);
    *eax5476 = reinterpret_cast<signed char>(*eax5477 + al5478);
    *eax5479 = reinterpret_cast<signed char>(*eax5480 + al5481);
    *eax5482 = reinterpret_cast<signed char>(*eax5483 + al5484);
    *eax5485 = reinterpret_cast<signed char>(*eax5486 + al5487);
    *eax5488 = reinterpret_cast<signed char>(*eax5489 + al5490);
    *eax5491 = reinterpret_cast<signed char>(*eax5492 + al5493);
    *eax5494 = reinterpret_cast<signed char>(*eax5495 + al5496);
    *eax5497 = reinterpret_cast<signed char>(*eax5498 + al5499);
    *eax5500 = reinterpret_cast<signed char>(*eax5501 + al5502);
    *eax5503 = reinterpret_cast<signed char>(*eax5504 + al5505);
    *eax5506 = reinterpret_cast<signed char>(*eax5507 + al5508);
    *eax5509 = reinterpret_cast<signed char>(*eax5510 + al5511);
    *eax5512 = reinterpret_cast<signed char>(*eax5513 + al5514);
    *eax5515 = reinterpret_cast<signed char>(*eax5516 + al5517);
    *eax5518 = reinterpret_cast<signed char>(*eax5519 + al5520);
    *eax5521 = reinterpret_cast<signed char>(*eax5522 + al5523);
    *eax5524 = reinterpret_cast<signed char>(*eax5525 + al5526);
    *eax5527 = reinterpret_cast<signed char>(*eax5528 + al5529);
    *eax5530 = reinterpret_cast<signed char>(*eax5531 + al5532);
    *eax5533 = reinterpret_cast<signed char>(*eax5534 + al5535);
    *eax5536 = reinterpret_cast<signed char>(*eax5537 + al5538);
    *eax5539 = reinterpret_cast<signed char>(*eax5540 + al5541);
    *eax5542 = reinterpret_cast<signed char>(*eax5543 + al5544);
    *eax5545 = reinterpret_cast<signed char>(*eax5546 + al5547);
    *eax5548 = reinterpret_cast<signed char>(*eax5549 + al5550);
    *eax5551 = reinterpret_cast<signed char>(*eax5552 + al5553);
    *eax5554 = reinterpret_cast<signed char>(*eax5555 + al5556);
    *eax5557 = reinterpret_cast<signed char>(*eax5558 + al5559);
    *eax5560 = reinterpret_cast<signed char>(*eax5561 + al5562);
    *eax5563 = reinterpret_cast<signed char>(*eax5564 + al5565);
    *eax5566 = reinterpret_cast<signed char>(*eax5567 + al5568);
    *eax5569 = reinterpret_cast<signed char>(*eax5570 + al5571);
    *eax5572 = reinterpret_cast<signed char>(*eax5573 + al5574);
    *eax5575 = reinterpret_cast<signed char>(*eax5576 + al5577);
    *eax5578 = reinterpret_cast<signed char>(*eax5579 + al5580);
    *eax5581 = reinterpret_cast<signed char>(*eax5582 + al5583);
    *eax5584 = reinterpret_cast<signed char>(*eax5585 + al5586);
    *eax5587 = reinterpret_cast<signed char>(*eax5588 + al5589);
    *eax5590 = reinterpret_cast<signed char>(*eax5591 + al5592);
    *eax5593 = reinterpret_cast<signed char>(*eax5594 + al5595);
    *eax5596 = reinterpret_cast<signed char>(*eax5597 + al5598);
    *eax5599 = reinterpret_cast<signed char>(*eax5600 + al5601);
    *eax5602 = reinterpret_cast<signed char>(*eax5603 + al5604);
    *eax5605 = reinterpret_cast<signed char>(*eax5606 + al5607);
    *eax5608 = reinterpret_cast<signed char>(*eax5609 + al5610);
    *eax5611 = reinterpret_cast<signed char>(*eax5612 + al5613);
    *eax5614 = reinterpret_cast<signed char>(*eax5615 + al5616);
    *eax5617 = reinterpret_cast<signed char>(*eax5618 + al5619);
    *eax5620 = reinterpret_cast<signed char>(*eax5621 + al5622);
    *eax5623 = reinterpret_cast<signed char>(*eax5624 + al5625);
    *eax5626 = reinterpret_cast<signed char>(*eax5627 + al5628);
    *eax5629 = reinterpret_cast<signed char>(*eax5630 + al5631);
    *eax5632 = reinterpret_cast<signed char>(*eax5633 + al5634);
    *eax5635 = reinterpret_cast<signed char>(*eax5636 + al5637);
    *eax5638 = reinterpret_cast<signed char>(*eax5639 + al5640);
    *eax5641 = reinterpret_cast<signed char>(*eax5642 + al5643);
    *eax5644 = reinterpret_cast<signed char>(*eax5645 + al5646);
    *eax5647 = reinterpret_cast<signed char>(*eax5648 + al5649);
    *eax5650 = reinterpret_cast<signed char>(*eax5651 + al5652);
    *eax5653 = reinterpret_cast<signed char>(*eax5654 + al5655);
    *eax5656 = reinterpret_cast<signed char>(*eax5657 + al5658);
    *eax5659 = reinterpret_cast<signed char>(*eax5660 + al5661);
    *eax5662 = reinterpret_cast<signed char>(*eax5663 + al5664);
    *eax5665 = reinterpret_cast<signed char>(*eax5666 + al5667);
    *eax5668 = reinterpret_cast<signed char>(*eax5669 + al5670);
    *eax5671 = reinterpret_cast<signed char>(*eax5672 + al5673);
    *eax5674 = reinterpret_cast<signed char>(*eax5675 + al5676);
    *eax5677 = reinterpret_cast<signed char>(*eax5678 + al5679);
    *eax5680 = reinterpret_cast<signed char>(*eax5681 + al5682);
    *eax5683 = reinterpret_cast<signed char>(*eax5684 + al5685);
    *eax5686 = reinterpret_cast<signed char>(*eax5687 + al5688);
    *eax5689 = reinterpret_cast<signed char>(*eax5690 + al5691);
    *eax5692 = reinterpret_cast<signed char>(*eax5693 + al5694);
    *eax5695 = reinterpret_cast<signed char>(*eax5696 + al5697);
    *eax5698 = reinterpret_cast<signed char>(*eax5699 + al5700);
    *eax5701 = reinterpret_cast<signed char>(*eax5702 + al5703);
    *eax5704 = reinterpret_cast<signed char>(*eax5705 + al5706);
    *eax5707 = reinterpret_cast<signed char>(*eax5708 + al5709);
    *eax5710 = reinterpret_cast<signed char>(*eax5711 + al5712);
    *eax5713 = reinterpret_cast<signed char>(*eax5714 + al5715);
    *eax5716 = reinterpret_cast<signed char>(*eax5717 + al5718);
    *eax5719 = reinterpret_cast<signed char>(*eax5720 + al5721);
    *eax5722 = reinterpret_cast<signed char>(*eax5723 + al5724);
    *eax5725 = reinterpret_cast<signed char>(*eax5726 + al5727);
    *eax5728 = reinterpret_cast<signed char>(*eax5729 + al5730);
    *eax5731 = reinterpret_cast<signed char>(*eax5732 + al5733);
    *eax5734 = reinterpret_cast<signed char>(*eax5735 + al5736);
    *eax5737 = reinterpret_cast<signed char>(*eax5738 + al5739);
    *eax5740 = reinterpret_cast<signed char>(*eax5741 + al5742);
    *eax5743 = reinterpret_cast<signed char>(*eax5744 + al5745);
    *eax5746 = reinterpret_cast<signed char>(*eax5747 + al5748);
    *eax5749 = reinterpret_cast<signed char>(*eax5750 + al5751);
    *eax5752 = reinterpret_cast<signed char>(*eax5753 + al5754);
    *eax5755 = reinterpret_cast<signed char>(*eax5756 + al5757);
    *eax5758 = reinterpret_cast<signed char>(*eax5759 + al5760);
    *eax5761 = reinterpret_cast<signed char>(*eax5762 + al5763);
    *eax5764 = reinterpret_cast<signed char>(*eax5765 + al5766);
    *eax5767 = reinterpret_cast<signed char>(*eax5768 + al5769);
    *eax5770 = reinterpret_cast<signed char>(*eax5771 + al5772);
    *eax5773 = reinterpret_cast<signed char>(*eax5774 + al5775);
    *eax5776 = reinterpret_cast<signed char>(*eax5777 + al5778);
    *eax5779 = reinterpret_cast<signed char>(*eax5780 + al5781);
    *eax5782 = reinterpret_cast<signed char>(*eax5783 + al5784);
    *eax5785 = reinterpret_cast<signed char>(*eax5786 + al5787);
    *eax5788 = reinterpret_cast<signed char>(*eax5789 + al5790);
    *eax5791 = reinterpret_cast<signed char>(*eax5792 + al5793);
    *eax5794 = reinterpret_cast<signed char>(*eax5795 + al5796);
    *eax5797 = reinterpret_cast<signed char>(*eax5798 + al5799);
    *eax5800 = reinterpret_cast<signed char>(*eax5801 + al5802);
    *eax5803 = reinterpret_cast<signed char>(*eax5804 + al5805);
    *eax5806 = reinterpret_cast<signed char>(*eax5807 + al5808);
    *eax5809 = reinterpret_cast<signed char>(*eax5810 + al5811);
    *eax5812 = reinterpret_cast<signed char>(*eax5813 + al5814);
    *eax5815 = reinterpret_cast<signed char>(*eax5816 + al5817);
    *eax5818 = reinterpret_cast<signed char>(*eax5819 + al5820);
    *eax5821 = reinterpret_cast<signed char>(*eax5822 + al5823);
    *eax5824 = reinterpret_cast<signed char>(*eax5825 + al5826);
    *eax5827 = reinterpret_cast<signed char>(*eax5828 + al5829);
    *eax5830 = reinterpret_cast<signed char>(*eax5831 + al5832);
    *eax5833 = reinterpret_cast<signed char>(*eax5834 + al5835);
    *eax5836 = reinterpret_cast<signed char>(*eax5837 + al5838);
    *eax5839 = reinterpret_cast<signed char>(*eax5840 + al5841);
    *eax5842 = reinterpret_cast<signed char>(*eax5843 + al5844);
    *eax5845 = reinterpret_cast<signed char>(*eax5846 + al5847);
    *eax5848 = reinterpret_cast<signed char>(*eax5849 + al5850);
    *eax5851 = reinterpret_cast<signed char>(*eax5852 + al5853);
    *eax5854 = reinterpret_cast<signed char>(*eax5855 + al5856);
    *eax5857 = reinterpret_cast<signed char>(*eax5858 + al5859);
    *eax5860 = reinterpret_cast<signed char>(*eax5861 + al5862);
    *eax5863 = reinterpret_cast<signed char>(*eax5864 + al5865);
    *eax5866 = reinterpret_cast<signed char>(*eax5867 + al5868);
    *eax5869 = reinterpret_cast<signed char>(*eax5870 + al5871);
    *eax5872 = reinterpret_cast<signed char>(*eax5873 + al5874);
    *eax5875 = reinterpret_cast<signed char>(*eax5876 + al5877);
    *eax5878 = reinterpret_cast<signed char>(*eax5879 + al5880);
    *eax5881 = reinterpret_cast<signed char>(*eax5882 + al5883);
    *eax5884 = reinterpret_cast<signed char>(*eax5885 + al5886);
    *eax5887 = reinterpret_cast<signed char>(*eax5888 + al5889);
    *eax5890 = reinterpret_cast<signed char>(*eax5891 + al5892);
    *eax5893 = reinterpret_cast<signed char>(*eax5894 + al5895);
    *eax5896 = reinterpret_cast<signed char>(*eax5897 + al5898);
    *eax5899 = reinterpret_cast<signed char>(*eax5900 + al5901);
    *eax5902 = reinterpret_cast<signed char>(*eax5903 + al5904);
    *eax5905 = reinterpret_cast<signed char>(*eax5906 + al5907);
    *eax5908 = reinterpret_cast<signed char>(*eax5909 + al5910);
    *eax5911 = reinterpret_cast<signed char>(*eax5912 + al5913);
    *eax5914 = reinterpret_cast<signed char>(*eax5915 + al5916);
    *eax5917 = reinterpret_cast<signed char>(*eax5918 + al5919);
    *eax5920 = reinterpret_cast<signed char>(*eax5921 + al5922);
    *eax5923 = reinterpret_cast<signed char>(*eax5924 + al5925);
    *eax5926 = reinterpret_cast<signed char>(*eax5927 + al5928);
    *eax5929 = reinterpret_cast<signed char>(*eax5930 + al5931);
    *eax5932 = reinterpret_cast<signed char>(*eax5933 + al5934);
    *eax5935 = reinterpret_cast<signed char>(*eax5936 + al5937);
    *eax5938 = reinterpret_cast<signed char>(*eax5939 + al5940);
    *eax5941 = reinterpret_cast<signed char>(*eax5942 + al5943);
    *eax5944 = reinterpret_cast<signed char>(*eax5945 + al5946);
    *eax5947 = reinterpret_cast<signed char>(*eax5948 + al5949);
    *eax5950 = reinterpret_cast<signed char>(*eax5951 + al5952);
    *eax5953 = reinterpret_cast<signed char>(*eax5954 + al5955);
    *eax5956 = reinterpret_cast<signed char>(*eax5957 + al5958);
    *eax5959 = reinterpret_cast<signed char>(*eax5960 + al5961);
    *eax5962 = reinterpret_cast<signed char>(*eax5963 + al5964);
    *eax5965 = reinterpret_cast<signed char>(*eax5966 + al5967);
    *eax5968 = reinterpret_cast<signed char>(*eax5969 + al5970);
    *eax5971 = reinterpret_cast<signed char>(*eax5972 + al5973);
    *eax5974 = reinterpret_cast<signed char>(*eax5975 + al5976);
    *eax5977 = reinterpret_cast<signed char>(*eax5978 + al5979);
    *eax5980 = reinterpret_cast<signed char>(*eax5981 + al5982);
    *eax5983 = reinterpret_cast<signed char>(*eax5984 + al5985);
    *eax5986 = reinterpret_cast<signed char>(*eax5987 + al5988);
    *eax5989 = reinterpret_cast<signed char>(*eax5990 + al5991);
    *eax5992 = reinterpret_cast<signed char>(*eax5993 + al5994);
    *eax5995 = reinterpret_cast<signed char>(*eax5996 + al5997);
    *eax5998 = reinterpret_cast<signed char>(*eax5999 + al6000);
    *eax6001 = reinterpret_cast<signed char>(*eax6002 + al6003);
    *eax6004 = reinterpret_cast<signed char>(*eax6005 + al6006);
    *eax6007 = reinterpret_cast<signed char>(*eax6008 + al6009);
    *eax6010 = reinterpret_cast<signed char>(*eax6011 + al6012);
    *eax6013 = reinterpret_cast<signed char>(*eax6014 + al6015);
    *eax6016 = reinterpret_cast<signed char>(*eax6017 + al6018);
    *eax6019 = reinterpret_cast<signed char>(*eax6020 + al6021);
    *eax6022 = reinterpret_cast<signed char>(*eax6023 + al6024);
    *eax6025 = reinterpret_cast<signed char>(*eax6026 + al6027);
    *eax6028 = reinterpret_cast<signed char>(*eax6029 + al6030);
    *eax6031 = reinterpret_cast<signed char>(*eax6032 + al6033);
    *eax6034 = reinterpret_cast<signed char>(*eax6035 + al6036);
    *eax6037 = reinterpret_cast<signed char>(*eax6038 + al6039);
    *eax6040 = reinterpret_cast<signed char>(*eax6041 + al6042);
    *eax6043 = reinterpret_cast<signed char>(*eax6044 + al6045);
    *eax6046 = reinterpret_cast<signed char>(*eax6047 + al6048);
    *eax6049 = reinterpret_cast<signed char>(*eax6050 + al6051);
    *eax6052 = reinterpret_cast<signed char>(*eax6053 + al6054);
}

int16_t QSWaveMixGetListenerOrientation(void** ecx, void** a2, void** a3, void** a4) {
    int16_t ax5;
    void* esp6;
    int32_t ebx7;
    void** v8;
    int32_t eax9;
    int32_t eax10;
    int32_t v11;
    void* esp12;
    void** eax13;
    void* esp14;
    void** eax15;
    void** edi16;
    void** esi17;
    void** ebp18;
    void** ebx19;

    ax5 = fun_180010c0(a2);
    esp6 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 36 - 4 - 4 - 4 - 4 - 4 - 4 + 4 + 4);
    if (!*reinterpret_cast<signed char*>(&ax5)) {
        ebx7 = IsBadWritePtr;
        if (a3 && (v8 = a3, eax9 = reinterpret_cast<int32_t>(ebx7()), esp6 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp6) - 4 - 4 - 4 + 4), !!eax9) || a4 && (v8 = a4, eax10 = reinterpret_cast<int32_t>(ebx7()), esp6 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp6) - 4 - 4 - 4 + 4), !!eax10)) {
            fun_18009260(ecx, 50, v8);
            goto v11;
        } else {
            fun_1800a1e0(a2);
            esp12 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp6) - 4 + 4);
            eax13 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp12) + 28);
            fun_1800a750(a2, reinterpret_cast<int32_t>(esp12) + 16, eax13);
            esp14 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp12) - 4 - 4 - 4 + 8 + 4);
            if (a3) {
                eax15 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp14) + 40);
                *reinterpret_cast<int16_t*>(&eax15) = fun_18001020(a2, eax15, reinterpret_cast<int32_t>(esp14) + 16, edi16, esi17, ebp18, ebx19);
                esp14 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp14) - 4 - 4 - 4 + 8 + 4);
                *reinterpret_cast<void***>(a3) = *reinterpret_cast<void***>(eax15);
                *reinterpret_cast<void***>(a3 + 4) = *reinterpret_cast<void***>(eax15 + 4);
                eax13 = *reinterpret_cast<void***>(eax15 + 8);
                *reinterpret_cast<void***>(a3 + 8) = eax13;
            }
            if (a4) {
                *reinterpret_cast<int16_t*>(&eax13) = fun_18001020(a2, reinterpret_cast<int32_t>(esp14) + 40, reinterpret_cast<int32_t>(esp14) + 28, edi16, esi17, ebp18, ebx19);
                *reinterpret_cast<void***>(a4) = *reinterpret_cast<void***>(eax13);
                *reinterpret_cast<void***>(a4 + 4) = *reinterpret_cast<void***>(eax13 + 4);
                *reinterpret_cast<void***>(a4 + 8) = *reinterpret_cast<void***>(eax13 + 8);
            }
            fun_1800a200(a2);
            return 0;
        }
    } else {
        return 5;
    }
}

int16_t QSWaveMixGetPanRate(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29) {
    int16_t ax30;
    int32_t eax31;
    void** eax32;
    void* esp33;
    void** edi34;
    void** esi35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    int32_t v58;
    int32_t v59;
    int32_t v60;

    ax30 = fun_180010c0(a2);
    if (!*reinterpret_cast<signed char*>(&ax30)) {
        eax31 = reinterpret_cast<int32_t>(IsBadWritePtr());
        if (!eax31) {
            fun_1800a1e0(a2);
            eax32 = reinterpret_cast<void**>(__return_address());
            *reinterpret_cast<int16_t*>(&eax32) = fun_18009c50(a2, eax32);
            esp33 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 44 - 4 - 4 - 4 - 4 + 4 + 4 - 4 - 4 - 4 + 4 - 4 + 4 - 4 - 4 + 4 + 4);
            if (eax32) {
                fun_180085a0(eax32, reinterpret_cast<int32_t>(esp33) + 8, 4, a4, 4, edi34, esi35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9);
                *reinterpret_cast<void***>(a4) = esi35;
                fun_1800c670(reinterpret_cast<int32_t>(esp33) - 4 - 4 - 4 + 8 + 4 + 8, a4, 4, edi34, esi35, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29);
                fun_1800a200(a2);
                goto v58;
            } else {
                fun_18009260(a2, 10, a4);
                fun_1800a200(a2);
                goto v59;
            }
        } else {
            fun_18009260(ecx, 50, a4);
            goto v60;
        }
    } else {
        return 5;
    }
}

int32_t fun_180249e0() {
    return 0;
}

struct s669 {
    signed char[4] pad4;
    int32_t f4;
};

int16_t fun_18005a00(struct s669** a1, int32_t* a2, int32_t* a3) {
    int32_t* eax4;
    int32_t v5;
    int32_t esi6;
    int32_t ecx7;
    int32_t* edi8;
    int32_t* esi9;
    int1_t zf10;
    struct s669* edx11;
    int32_t* esi12;
    int32_t ecx13;
    int32_t* edi14;
    int1_t zf15;

    eax4 = a2;
    v5 = esi6;
    ecx7 = 4;
    edi8 = reinterpret_cast<int32_t*>(0x18034678);
    esi9 = eax4;
    zf10 = 1;
    while (ecx7) {
        --ecx7;
        zf10 = *esi9 == *edi8;
        *edi8 = *esi9;
        ++edi8;
        ++esi9;
    }
    if (zf10) {
        addr_0x18005a3a_5:
        *a3 = reinterpret_cast<int32_t>(a1 - 5);
        edx11 = *a1;
        edx11->f4();
        goto v5;
    } else {
        esi12 = eax4;
        ecx13 = 4;
        edi14 = reinterpret_cast<int32_t*>(0x18034458);
        zf15 = 1;
        while (ecx13) {
            --ecx13;
            zf15 = *esi12 == *edi14;
            *edi14 = *esi12;
            ++edi14;
            ++esi12;
        }
        if (zf15) 
            goto addr_0x18005a3a_5;
    }
    *a3 = 0;
    return 0x4002;
}

struct s671 {
    signed char[916] pad916;
    int32_t f916;
};

struct s670 {
    signed char[4] pad4;
    struct s671* f4;
    signed char f8;
    signed char[3] pad12;
    int32_t f12;
};

void fun_180063e0(struct s670* ecx, struct s671* a2) {
    struct s671* edi3;
    int32_t esi4;
    unsigned char dl5;
    int1_t zf6;
    uint32_t eax7;

    edi3 = a2;
    esi4 = edi3->f916;
    if (esi4 != -1) {
        if (!ecx->f4) {
            addr_0x18006423_3:
            ecx->f12 = esi4;
            ecx->f4 = edi3;
        } else {
            dl5 = static_cast<unsigned char>(reinterpret_cast<uint1_t>(esi4 - ecx->f12 < 0));
            zf6 = ecx->f8 == 0;
            *reinterpret_cast<unsigned char*>(&a2) = dl5;
            if (zf6) {
                eax7 = reinterpret_cast<uint32_t>(a2) & 0xff;
            } else {
                *reinterpret_cast<unsigned char*>(&eax7) = static_cast<unsigned char>(reinterpret_cast<uint1_t>(dl5 == 0));
            }
            if (*reinterpret_cast<unsigned char*>(&eax7)) 
                goto addr_0x18006423_3;
        }
    }
    return;
}

int16_t fun_18006c60(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18006c50(ecx);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s674 {
    signed char[644] pad644;
    int32_t f644;
    signed char[60] pad708;
    signed char f708;
    signed char[1] pad710;
    signed char f710;
    signed char[5] pad716;
    int32_t f716;
};

struct s673 {
    signed char[12] pad12;
    struct s674* f12;
};

struct s672 {
    struct s672* f0;
    signed char[4] pad8;
    struct s673* f8;
};

int16_t fun_1800b590(int32_t a1) {
    struct s672* ecx2;
    struct s672* edx3;

    ecx2 = *reinterpret_cast<struct s672**>(a1 - 36);
    edx3 = reinterpret_cast<struct s672*>(a1 - 36);
    if (ecx2 == edx3) {
        addr_0x1800b5e2_2:
        return 0;
    } else {
        while (!ecx2->f8->f12 || (!ecx2->f8->f12->f708 || (!ecx2->f8->f12->f716 || (ecx2->f8->f12->f710 || !ecx2->f8->f12->f644)))) {
            ecx2 = ecx2->f0;
            if (ecx2 == edx3) 
                goto addr_0x1800b5e2_2;
        }
    }
    return 1;
}

struct s676 {
    signed char[20] pad20;
    int32_t f20;
    signed char[24] pad48;
    int32_t f48;
};

struct s675 {
    signed char[12] pad12;
    struct s676** f12;
    signed char[4] pad20;
    int32_t f20;
    signed char[12] pad36;
    int32_t f36;
};

struct s677 {
    int32_t f0;
    void** f4;
};

struct s678 {
    struct s678* f0;
    signed char[4] pad8;
    struct s74* f8;
};

int16_t fun_1800b610(struct s675* a1, int32_t a2, int32_t a3, int32_t a4, int32_t* a5) {
    int32_t v6;
    struct s677* eax7;
    int32_t eax8;
    void** v9;
    void*** esp10;
    void* esp11;
    int32_t v12;
    void** edx13;
    void** v14;
    int32_t ecx15;
    int32_t ecx16;
    int32_t v17;
    int32_t eax18;
    int32_t v19;
    struct s675* ebp20;
    int32_t ebx21;
    signed char v22;
    int32_t* eax23;
    int32_t edi24;
    struct s678* esi25;
    struct s678* eax26;
    struct s74* ecx27;
    struct s676** ecx28;
    int32_t* esp29;
    struct s676* eax30;
    int32_t esi31;
    struct s676* eax32;
    signed char al33;
    int32_t v34;
    int32_t edx35;

    v6 = reinterpret_cast<int32_t>(__return_address());
    if (!a4) {
        return 0;
    }
    eax7 = reinterpret_cast<struct s677*>(&a1->f20);
    eax8 = eax7->f0;
    v9 = eax7->f4;
    __asm__("cdq ");
    esp10 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 100 - 4 - 4 - 4 - 4 - 4 - 4);
    fun_18017200(esp10 + 28, eax8 / a3, v9);
    esp11 = reinterpret_cast<void*>(esp10 - 4 - 4 + 12 + 4);
    v12 = 4;
    do {
        edx13 = g180458c8;
        v14 = edx13;
        ecx15 = v12 - 1;
        v12 = ecx15;
    } while (ecx15);
    if (!(reinterpret_cast<uint1_t>(a3 < 0) | reinterpret_cast<uint1_t>(a3 == 0))) 
        goto addr_0x1800b6b9_6;
    addr_0x1800b6e8_7:
    ecx16 = v17;
    if (ecx16 < 0) {
        __asm__("cdq ");
        eax18 = a4 / v19;
    } else {
        eax18 = a4 >> *reinterpret_cast<signed char*>(&ecx16);
    }
    ebp20 = a1;
    ebx21 = eax18;
    v22 = 0;
    if (!(reinterpret_cast<uint1_t>(ebx21 < 0) | reinterpret_cast<uint1_t>(ebx21 == 0))) {
        do {
            eax23 = &ebp20->f36;
            if (ebp20->f36 > ebx21) {
                eax23 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esp11) + 0x7c);
            }
            edi24 = *eax23;
            esi25 = *reinterpret_cast<struct s678**>(reinterpret_cast<int32_t>(ebp20) - 36);
            eax26 = reinterpret_cast<struct s678*>(reinterpret_cast<int32_t>(ebp20) - 36);
            if (esi25 != eax26) {
                do {
                    ecx27 = esi25->f8;
                    *reinterpret_cast<int16_t*>(&eax26) = fun_1800bbf0(ecx27, edi24);
                    esp11 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp11) - 4 - 4 + 4 + 4);
                    if (eax26) {
                        v22 = 1;
                    }
                    esi25 = esi25->f0;
                    eax26 = reinterpret_cast<struct s678*>(reinterpret_cast<int32_t>(ebp20) - 36);
                } while (esi25 != eax26);
            }
            ecx28 = ebp20->f12;
            esp29 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(esp11) - 4 - 4);
            eax30 = *ecx28;
            eax30->f48(esp29 + 11, a3, edi24);
            esp11 = reinterpret_cast<void*>(esp29 - 1 - 1 + 1);
            ebx21 = ebx21 - edi24;
            if (!(reinterpret_cast<uint1_t>(v6 < 0) | reinterpret_cast<uint1_t>(v6 == 0))) {
                esi31 = v6;
                do {
                    if (reinterpret_cast<signed char>(v14) < reinterpret_cast<signed char>(0)) {
                    }
                    --esi31;
                } while (esi31);
            }
        } while (!reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(ebx21 < 0) | reinterpret_cast<uint1_t>(ebx21 == 0)));
    }
    if (a5) {
        if (v22 || (eax32 = *ebp20->f12, al33 = reinterpret_cast<signed char>(eax32->f20()), al33 == 0)) {
            *a5 = 0;
        } else {
            *a5 = 1;
            goto v6;
        }
    }
    goto v6;
    addr_0x1800b6b9_6:
    v34 = a3;
    do {
        edx35 = v34 - 1;
        v34 = edx35;
    } while (edx35);
    goto addr_0x1800b6e8_7;
}

int16_t fun_1800b0e0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_1800b100(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_1800d910(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43) {
    void** eax44;
    void** eax45;
    void** esi46;

    eax44 = *reinterpret_cast<void***>(a2 + 8) - 1;
    *reinterpret_cast<void***>(a2 + 8) = eax44;
    if (!eax44) {
        if (a2) {
            eax45 = *reinterpret_cast<void***>(a2 + 4);
            *reinterpret_cast<void***>(a2) = reinterpret_cast<void**>(0x180346b8);
            CloseHandle(eax45);
            fun_1802b2b0(ecx, a2, eax45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43);
        }
        eax44 = reinterpret_cast<void**>(0);
    }
    return *reinterpret_cast<int16_t*>(&eax44);
}

struct s679 {
    signed char[4] pad4;
    int32_t f4;
};

int32_t ReleaseMutex = 0x35f9a;

void fun_1800d970(struct s679* a1) {
    int32_t v2;

    v2 = a1->f4;
    ReleaseMutex();
    goto v2;
}

struct s680 {
    signed char[80] pad80;
    int32_t f80;
    int32_t f84;
    signed char[80] pad168;
    int32_t f168;
    int32_t f172;
    void** f176;
    signed char[3] pad180;
    void** f180;
};

void fun_1800e090(struct s680* ecx) {
    int32_t eax2;
    void** ecx3;
    uint1_t zf4;
    uint1_t less_or_equal5;

    eax2 = ecx->f84 + 75;
    __asm__("fild dword [esp+0x4]");
    __asm__("fmul dword [0x1803476c]");
    __asm__("fst dword [esp+0x4]");
    __asm__("fcomp dword [0x18034238]");
    __asm__("fnstsw ax");
    if (!(*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax2) + 1) & 65)) {
    }
    __asm__("fld dword [ecx]");
    __asm__("fcomp dword [0x1803422c]");
    __asm__("fnstsw ax");
    if (*reinterpret_cast<unsigned char*>(reinterpret_cast<int32_t>(&eax2) + 1) & 1) {
    }
    __asm__("fld dword [eax]");
    ecx3 = reinterpret_cast<void**>(&ecx->f176);
    __asm__("fstp dword [esp]");
    fun_1800dbe0(ecx3, ecx3, &ecx->f180, ecx3);
    zf4 = reinterpret_cast<uint1_t>(ecx->f80 == 0);
    less_or_equal5 = reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(ecx->f80 < 0) | zf4);
    if (!zf4) {
        if (less_or_equal5) {
            __asm__("fild dword [esp+0x10]");
            ecx->f168 = 0x3f800000;
            __asm__("fmul dword [0x18034768]");
            __asm__("fstp dword [esp]");
            fun_1800cef0(ecx3, ecx3);
            __asm__("fstp dword [esi+0xac]");
            return;
        } else {
            __asm__("fild dword [esp+0xc]");
            __asm__("fmul dword [0x18034768]");
            __asm__("fstp dword [esp]");
            fun_1800cef0(ecx3, ecx3);
            __asm__("fstp dword [esi+0xa8]");
            ecx->f172 = 0x3f800000;
            return;
        }
    } else {
        ecx->f172 = 0x3f800000;
        ecx->f168 = 0x3f800000;
        return;
    }
}

int16_t fun_1800e8d0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_1800e8f0(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_180126e0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18012700(ecx);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

void fun_1800f1b0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17) {
    void** v18;
    void** v19;
    void** ebx20;
    void** ebx21;
    void** v22;
    void** esi23;
    void** v24;
    void** edi25;
    void** esi26;
    void** v27;
    void** v28;
    void** v29;
    int16_t ax30;
    void** ecx31;
    void** edx32;
    void** v33;
    void** ebp34;
    void** edi35;
    struct s257* esi36;
    void** v37;
    void** edx38;
    void** ebp39;
    int16_t ax40;
    void** ecx41;
    void** eax42;
    void** ecx43;
    int16_t ax44;
    void** ecx45;
    void** edx46;
    void** ebp47;
    void** edx48;
    void** ebx49;
    int16_t ax50;
    void** ecx51;
    void** eax52;
    void** edx53;
    void** ebx54;
    int16_t ax55;
    void** ecx56;
    void** eax57;
    void** edx58;
    void** ebx59;
    int16_t ax60;
    void** ecx61;
    void** eax62;
    void** eax63;
    void** v64;
    void** v65;
    void** v66;
    void** ecx67;
    void** esi68;

    v18 = reinterpret_cast<void**>(__return_address());
    v19 = ebx20;
    ebx21 = ecx;
    v22 = esi23;
    v24 = edi25;
    esi26 = ebx21 + 0x50c;
    v27 = *reinterpret_cast<void***>(ebx21 + 0x56c);
    v28 = ebx21;
    ax30 = fun_180192b0(esi26, v27, a4, v24, v22, v19, v28, v29, v18);
    if (*reinterpret_cast<signed char*>(&ax30)) {
        ecx31 = *reinterpret_cast<void***>(ebx21 + 0x56c);
        edx32 = *reinterpret_cast<void***>(ecx31);
        *reinterpret_cast<void***>(edx32 + 28)(ebx21 + 0x534, esi26);
    }
    v33 = ebp34;
    edi35 = ebx21 + 0x41c;
    esi36 = reinterpret_cast<struct s257*>(ebx21 + 0x564);
    v37 = reinterpret_cast<void**>(2);
    while (1) {
        edx38 = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi36) - 8);
        ebp39 = edi35 + 0xffffffb0;
        ax40 = fun_180192b0(ebp39, edx38, a4, v33, v24, v22, v19, v28, v37);
        if (*reinterpret_cast<signed char*>(&ax40)) {
            ecx41 = *reinterpret_cast<void***>(reinterpret_cast<uint32_t>(esi36) - 8);
            eax42 = *reinterpret_cast<void***>(ecx41);
            *reinterpret_cast<void***>(eax42 + 28)(edi35 + 0xffffff10, ebp39);
        }
        ecx43 = esi36->f0;
        ax44 = fun_180192b0(edi35, ecx43, a4, v33, v24, v22, v19, v28, v37);
        if (*reinterpret_cast<signed char*>(&ax44)) {
            ecx45 = esi36->f0;
            edx46 = *reinterpret_cast<void***>(ecx45);
            *reinterpret_cast<void***>(edx46 + 28)(edi35 + 0xffffff10, edi35);
        }
        ebp47 = edi35 + 0xffffff10;
        fun_18019740(ebp47, ebx21 + 0x534, v33, v24, v22, v19, v28, v37, v18, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
        edx48 = esi36->f28;
        ebx49 = edi35 + 0xffffff60;
        ax50 = fun_180192b0(ebx49, edx48, a4, v33, v24, v22, v19, v28, v37);
        if (*reinterpret_cast<signed char*>(&ax50)) {
            ecx51 = esi36->f28;
            eax52 = *reinterpret_cast<void***>(ecx51);
            *reinterpret_cast<void***>(eax52 + 28)(ebx49);
            fun_18019740(ebp47, ebx49, ebx49, v33, v24, v22, v19, v28, v37, v18, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
        }
        edx53 = esi36->f12;
        ebx54 = edi35 + 80;
        ax55 = fun_180192b0(ebx54, edx53, a4, v33, v24, v22, v19, v28, v37);
        if (*reinterpret_cast<signed char*>(&ax55)) {
            ecx56 = esi36->f12;
            eax57 = *reinterpret_cast<void***>(ecx56);
            *reinterpret_cast<void***>(eax57 + 28)(ebx54);
            fun_18019740(ebp47, ebx54, ebx54, v33, v24, v22, v19, v28, v37, v18, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
        }
        edx58 = esi36->f20;
        ebx59 = edi35 + 0xa0;
        ax60 = fun_180192b0(ebx59, edx58, a4, v33, v24, v22, v19, v28, v37);
        if (*reinterpret_cast<signed char*>(&ax60)) {
            ecx61 = esi36->f20;
            eax62 = *reinterpret_cast<void***>(ecx61);
            *reinterpret_cast<void***>(eax62 + 28)(ebx59);
            fun_18019740(ebp47, ebx59, ebx59, v33, v24, v22, v19, v28, v37, v18, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
        }
        esi36 = reinterpret_cast<struct s257*>(reinterpret_cast<uint32_t>(esi36) + 4);
        edi35 = edi35 + 40;
        eax63 = v37 - 1;
        v37 = eax63;
        if (!eax63) 
            break;
        ebx21 = v28;
    }
    if (!reinterpret_cast<int1_t>(a3 == 2)) {
        if (reinterpret_cast<int1_t>(a3 == 1)) {
            if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(v28 + 8)) & 4)) {
                v64 = a4;
                v65 = v28 + 0x354;
                v66 = a2;
                ecx67 = v28 + 0x32c;
            } else {
                v64 = a4;
                v65 = v28 + 0x32c;
                v66 = a2;
                ecx67 = v28 + 0x354;
            }
            fun_18019a60(ecx67, v66, v65, v64);
        }
        esi68 = v28;
    } else {
        esi68 = v28;
        if (!(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi68 + 8)) & 4)) {
            fun_18019b10(esi68 + 0x32c, a2, a4, v24, v22, v19, v28, v37, v18, a2);
            fun_18019b10(esi68 + 0x354, a2 + 20, a4, v24, v22, v19, v28, v37, v18, a2);
        } else {
            fun_18019b10(esi68 + 0x354, a2, a4, v24, v22, v19, v28, v37, v18, a2);
            fun_18019b10(esi68 + 0x32c, a2 + 20, a4, v24, v22, v19, v28, v37, v18, a2);
        }
    }
    fun_1800f3c0(esi68, a4);
    return;
}

struct s681 {
    signed char[12] pad12;
    signed char f12;
    signed char[7] pad20;
    int32_t f20;
};

void fun_18013db0(struct s681* ecx, int32_t a2) {
    ecx->f12 = 1;
    ecx->f20 = a2;
    return;
}

struct s683 {
    signed char[20] pad20;
    int32_t f20;
};

struct s682 {
    signed char[4] pad4;
    struct s683** f4;
};

void fun_18014640(struct s682* ecx) {
    goto (*ecx->f4)->f20;
}

struct s685 {
    signed char[32] pad32;
    int32_t f32;
};

struct s684 {
    signed char[116] pad116;
    struct s685** f116;
};

unsigned char fun_180151d0(struct s684* ecx) {
    struct s685* eax2;
    signed char al3;

    eax2 = *ecx->f116;
    al3 = reinterpret_cast<signed char>(eax2->f32());
    return static_cast<unsigned char>(reinterpret_cast<uint1_t>(!!al3));
}

struct s687 {
    signed char[32] pad32;
    int32_t f32;
};

struct s686 {
    signed char[40] pad40;
    struct s687** f40;
};

signed char fun_18015aa0(struct s686* ecx) {
    int32_t esi2;
    struct s687*** edi3;
    struct s687* eax4;
    signed char al5;

    esi2 = 0;
    edi3 = &ecx->f40;
    do {
        eax4 = **edi3;
        al5 = reinterpret_cast<signed char>(eax4->f32());
        if (!al5) 
            break;
        ++esi2;
        ++edi3;
    } while (esi2 < 2);
    goto addr_0x18015abb_4;
    return 0;
    addr_0x18015abb_4:
    return 1;
}

struct s689 {
    signed char[32] pad32;
    int32_t f32;
};

struct s688 {
    signed char[200] pad200;
    struct s689** f200;
};

signed char fun_18016330(struct s688* ecx) {
    int32_t esi2;
    struct s689*** edi3;
    struct s689* eax4;
    signed char al5;

    esi2 = 0;
    edi3 = &ecx->f200;
    do {
        eax4 = **edi3;
        al5 = reinterpret_cast<signed char>(eax4->f32());
        if (!al5) 
            break;
        ++esi2;
        ++edi3;
    } while (esi2 < 2);
    goto addr_0x1801634e_4;
    return 0;
    addr_0x1801634e_4:
    return 1;
}

struct s691 {
    signed char[36] pad36;
    int32_t f36;
};

struct s690 {
    signed char[176] pad176;
    struct s691** f176;
};

void fun_18016fc0(struct s690* ecx) {
    goto (*ecx->f176)->f36;
}

int16_t fun_1801ac80(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_1801aca0(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

void fun_1801b9b0(int32_t ecx) {
    goto 0x18022ae0;
}

void fun_1801c0f0(void** ecx) {
    __asm__("fld dword [esi+0x14]");
    __asm__("fdiv dword [ebp+0x8]");
    __asm__("fstp dword [esp]");
    fun_1800de70(ecx, 0x3a83126f, ecx);
    __asm__("fst dword [esi+0x18]");
    __asm__("fld st0");
    __asm__("fmul st0, st1");
    __asm__("fsubr dword [0x18034238]");
    __asm__("fstp dword [esi+0x1c]");
    __asm__("fstp dword [esi+0x50]");
    __asm__("fild dword [esi+0x10]");
    __asm__("fmul dword [ebp+0x8]");
    __asm__("fstp dword [ebp+0x8]");
    __asm__("fld dword [ebp+0x8]");
    __asm__("fistp dword [ebp-0x4]");
    fun_18022aa0(ecx + 4, ecx);
    return;
}

struct s692 {
    signed char[16] pad16;
    void** f16;
    signed char[7] pad24;
    void*** f24;
    void** f28;
    signed char[3] pad32;
    void*** f32;
    void** f36;
};

struct s693 {
    void** f0;
    signed char[3] pad4;
    void** f4;
};

void** fun_1801c310(struct s692* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10) {
    void** v11;
    void** edx12;
    void** v13;
    void** ebx14;
    void** v15;
    void** ebp16;
    void** v17;
    void** esi18;
    void** ebp19;
    void*** esp20;
    void** v21;
    void** edi22;
    struct s692* esi23;
    void** v24;
    void** ecx25;
    uint1_t less_or_equal26;
    void** v27;
    void** edi28;
    struct s693* eax29;
    void** v30;
    void** eax31;
    void** v32;
    void** ecx33;
    void** edx34;
    void** v35;
    void** eax36;
    void** ecx37;
    void** v38;
    void** eax39;
    void** ebp40;
    void** ecx41;
    void** edx42;
    void** v43;
    void** eax44;
    void** v45;
    void** v46;
    void** v47;
    void** eax48;
    void* esp49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** ecx66;
    void** edx67;
    void* edi68;
    void* eax69;
    void** edi70;
    void** edx71;
    void** eax72;
    void** edx73;
    void** edx74;
    void** eax75;
    void* esp76;
    void** v77;
    void** v78;
    void** v79;
    void** v80;
    void** v81;
    void** edx82;
    void** ecx83;
    void*** esp84;
    void** edx85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    int1_t less91;
    void** edx92;
    void** v93;
    void** v94;
    void** v95;
    void** v96;
    void*** eax97;
    void** v98;
    void** edi99;
    void** eax100;
    void** edx101;
    void** v102;
    void** ecx103;
    void** eax104;
    void** v105;
    void** v106;
    void** v107;
    void** v108;
    void** v109;
    void** edx110;
    void** eax111;
    void** edx112;
    void** v113;
    void** ecx114;
    void** eax115;
    void*** esp116;
    void** v117;
    void** v118;
    void** v119;
    void** v120;
    void** v121;
    void* esp122;
    void** ecx123;
    void** edx124;
    void** eax125;
    void** edx126;
    void** eax127;
    struct s160** esp128;
    void*** esp129;
    void* esp130;
    void* esp131;
    void** ebp132;
    void** v133;
    void** v134;
    void** v135;
    void** v136;
    void** v137;
    void** ax138;
    void** eax139;
    void** ecx140;
    void** edx141;
    void** edx142;
    struct s160** esp143;
    void* esp144;
    void* esp145;
    struct s160** esp146;
    void* esp147;
    void** v148;
    void** v149;
    void** v150;
    void** v151;
    void** v152;
    void** ax153;
    void** eax154;
    void** edx155;
    void** v156;
    void** ecx157;
    void** edx158;
    void** v159;
    void** v160;
    void** v161;
    void** v162;
    void** v163;
    void** eax164;

    v11 = reinterpret_cast<void**>(__return_address());
    edx12 = a3;
    v13 = ebx14;
    v15 = ebp16;
    v17 = esi18;
    ebp19 = *reinterpret_cast<void***>(edx12 + 24);
    esp20 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x68 - 4 - 4 - 4 - 4);
    v21 = edi22;
    esi23 = ecx;
    v24 = ebp19;
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(ebp19) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(ebp19 == 0)) && (esi23->f16 && (ecx25 = reinterpret_cast<void**>(0), less_or_equal26 = reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(esi23->f16) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(esi23->f16 == 0)), v27 = reinterpret_cast<void**>(0), !less_or_equal26))) {
        do {
            edi28 = esi23->f24[reinterpret_cast<unsigned char>(ecx25) * 8];
            eax29 = reinterpret_cast<struct s693*>(esi23->f24 + reinterpret_cast<unsigned char>(ecx25) * 8);
            v30 = eax29->f4;
            if (reinterpret_cast<signed char>(edi28) > reinterpret_cast<signed char>(ebp19)) {
            }
            eax31 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebp19) - reinterpret_cast<unsigned char>(edi28));
            v32 = eax31;
            if (edi28) {
                ecx33 = esi23->f36;
                edx34 = esi23->f28;
                v35 = edi28;
                eax36 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ecx33) - reinterpret_cast<unsigned char>(edx34)) >> 2);
                if (reinterpret_cast<signed char>(edi28) > reinterpret_cast<signed char>(eax36)) {
                    ecx37 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi28) - reinterpret_cast<unsigned char>(eax36));
                    v38 = ecx37;
                    eax39 = reinterpret_cast<void**>(esi23->f32 - reinterpret_cast<unsigned char>(ecx37) * 4);
                    if (reinterpret_cast<signed char>(edi28) > reinterpret_cast<signed char>(ecx37)) {
                    }
                    ebp40 = v38;
                } else {
                    ebp40 = edi28;
                    eax39 = ecx33 - reinterpret_cast<unsigned char>(edi28) * 4;
                }
                ecx41 = g18043454;
                edx42 = g18043458;
                v43 = eax39;
                eax44 = g18043450;
                v45 = ecx41;
                v46 = edx42;
                v47 = eax44;
                eax48 = g1804345c;
                esp49 = reinterpret_cast<void*>(esp20 - 4 - 4 - 4);
                v50 = eax48;
                fun_18019390(a2, reinterpret_cast<int32_t>(esp49) + 52, v30, 0, ebp40, 0, v21, v17, v15, v13, v24, v30, v32, v27, v35, v38, v43, v47, v45, v46, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65);
                esp20 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp49) - 4 - 4 - 4 + 20 + 4);
                ecx66 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi28) - reinterpret_cast<unsigned char>(ebp40));
                if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(ecx66) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(ecx66 == 0))) {
                    edx67 = esi23->f36;
                    edi68 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(edi28) - reinterpret_cast<unsigned char>(ebp40));
                    v38 = ecx66;
                    eax69 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(edx67) - reinterpret_cast<unsigned char>(esi23->f28)) >> 2);
                    if (reinterpret_cast<int32_t>(edi68) > reinterpret_cast<int32_t>(eax69)) {
                        edi70 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(edi68) - reinterpret_cast<uint32_t>(eax69));
                        v35 = edi70;
                        edx71 = reinterpret_cast<void**>(esi23->f32 - reinterpret_cast<unsigned char>(edi70) * 4);
                        if (reinterpret_cast<signed char>(ecx66) > reinterpret_cast<signed char>(edi70)) {
                        }
                        ecx66 = v38;
                    } else {
                        edx71 = edx67 - reinterpret_cast<uint32_t>(edi68) * 4;
                    }
                    eax72 = g18043454;
                    v51 = edx71;
                    edx73 = g18043450;
                    v52 = edx73;
                    edx74 = g18043458;
                    v54 = edx74;
                    v53 = eax72;
                    eax75 = g1804345c;
                    esp76 = reinterpret_cast<void*>(esp20 - 4 - 4 - 4);
                    v55 = eax75;
                    fun_18019390(a2, reinterpret_cast<int32_t>(esp76) + 72, v30, 0, ecx66, ebp40, v21, v17, v15, v13, v24, v30, v32, v27, v35, v38, v43, v47, v45, v46, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v77, v78, v79, v80, v81);
                    esp20 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp76) - 4 - 4 - 4 + 20 + 4);
                }
                eax31 = v32;
                ebp19 = v24;
            }
            if (eax31) {
                edx82 = a3 + 4;
                v56 = *reinterpret_cast<void***>(a3);
                ecx83 = *reinterpret_cast<void***>(edx82);
                esp84 = esp20 - 4 - 4 - 4 - 4;
                v57 = ecx83;
                v58 = *reinterpret_cast<void***>(edx82 + 4);
                v59 = *reinterpret_cast<void***>(edx82 + 8);
                edx85 = *reinterpret_cast<void***>(edx82 + 12);
                v60 = edx85;
                fun_18019390(a2, esp84 + 96, v30, 0, eax31, edi28, v21, v17, v15, v13, v24, v30, v32, v27, v35, v38, v43, v47, v45, v46, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v86, v87, v88, v89, v90);
                esp20 = esp84 - 4 - 4 + 20 + 4;
            }
            ecx25 = v27 + 1;
            less91 = reinterpret_cast<signed char>(ecx25) < reinterpret_cast<signed char>(esi23->f16);
            v27 = ecx25;
        } while (less91);
        edx12 = a3;
    }
    edx92 = edx12 + 4;
    v93 = *reinterpret_cast<void***>(edx12);
    v94 = *reinterpret_cast<void***>(edx92);
    v95 = *reinterpret_cast<void***>(edx92 + 4);
    v96 = *reinterpret_cast<void***>(edx92 + 8);
    eax97 = esi23->f32;
    v98 = *reinterpret_cast<void***>(edx92 + 12);
    edi99 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<int32_t>(eax97) - reinterpret_cast<unsigned char>(esi23->f36)) >> 2);
    if (edi99) {
        if (reinterpret_cast<signed char>(ebp19) >= reinterpret_cast<signed char>(edi99)) {
            if (reinterpret_cast<signed char>(ebp19) <= reinterpret_cast<signed char>(edi99)) {
                eax100 = g18043450;
                edx101 = g18043458;
                v102 = esi23->f36;
                ecx103 = g18043454;
                eax104 = g1804345c;
                *reinterpret_cast<void***>(&eax97) = fun_1801a210(esp20 - 4 - 4 + 48, esp20 + 80, ebp19, v21, v17, v15, v13, v24, v30, v32, v27, v35, v38, v93, v94, v95, v96, v98, v51, v52, v53, v54, v55, v102, eax100, ecx103, edx101, eax104, v105, v106, v107, v108, v109, v11, a2, a3, a4, a5, a6, a7, a8, a9, a10);
                esi23->f36 = esi23->f28;
            } else {
                edx110 = esi23->f28;
                if (reinterpret_cast<signed char>(ebp19) < reinterpret_cast<signed char>(reinterpret_cast<int32_t>(reinterpret_cast<int32_t>(eax97) - reinterpret_cast<unsigned char>(edx110)) >> 2)) {
                    eax111 = g18043450;
                    edx112 = g18043458;
                    v113 = esi23->f36;
                    ecx114 = g18043454;
                    eax115 = g1804345c;
                    esp116 = esp20 - 4 - 4;
                    fun_1801a210(esp116 + 48, esp20 + 80, edi99, v21, v17, v15, v13, v24, v30, v32, v27, v35, v38, v93, v94, v95, v96, v98, v51, v52, v53, v54, v55, v113, eax111, ecx114, edx112, eax115, v117, v118, v119, v120, v121, v11, a2, a3, a4, a5, a6, a7, a8, a9, a10);
                    esp122 = reinterpret_cast<void*>(esp116 - 4 + 8 + 4);
                    ecx123 = g18043454;
                    edx124 = esi23->f28;
                    eax125 = g18043450;
                    edx126 = g18043458;
                    eax127 = g1804345c;
                    esp128 = reinterpret_cast<struct s160**>(reinterpret_cast<int32_t>(esp122) - 4);
                    fun_180196c0(esp128 + 16, reinterpret_cast<int32_t>(esp122) + 40);
                    esp129 = reinterpret_cast<void***>(esp128 - 1 + 1 + 1 - 1);
                    fun_1801c020(esp129 + 64, edi99);
                    esp130 = reinterpret_cast<void*>(esp129 - 4 + 4 + 4);
                    fun_180196c0(reinterpret_cast<int32_t>(esp130) + 100, reinterpret_cast<int32_t>(esp130) + 60);
                    esp131 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp130) - 4 - 4 + 4 + 4);
                    ebp132 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebp19) - reinterpret_cast<unsigned char>(edi99));
                    ax138 = fun_1801a210(reinterpret_cast<int32_t>(esp131) - 4 - 4 + 0x6c, reinterpret_cast<int32_t>(esp131) + 80, ebp132, v21, v17, v15, v13, v24, v30, v32, v27, v35, v38, v93, v94, v95, v96, v98, v51, v52, v53, v54, v55, edx124, eax125, ecx123, edx126, eax127, v133, v134, v135, v136, v137, v11, a2, a3, a4, a5, a6, a7, a8, a9, a10);
                    esi23->f36 = esi23->f28 + reinterpret_cast<unsigned char>(ebp132) * 4;
                    return ax138;
                } else {
                    esi23->f36 = edx110;
                    eax139 = g18043454;
                    ecx140 = g18043458;
                    edx141 = g18043450;
                    edx142 = g1804345c;
                    esp143 = reinterpret_cast<struct s160**>(esp20 - 4);
                    fun_180196c0(esp143 + 16, esp20 + 40);
                    esp144 = reinterpret_cast<void*>(esp143 - 1 + 1 + 1);
                    fun_1801c020(reinterpret_cast<int32_t>(esp144) + 60, reinterpret_cast<unsigned char>(ebp19) - reinterpret_cast<unsigned char>(reinterpret_cast<int32_t>(reinterpret_cast<int32_t>(eax97) - reinterpret_cast<unsigned char>(edx110)) >> 2));
                    esp145 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp144) - 4 - 4 + 4 + 4);
                    esp146 = reinterpret_cast<struct s160**>(reinterpret_cast<int32_t>(esp145) - 4);
                    fun_180196c0(esp146 + 26, reinterpret_cast<int32_t>(esp145) + 60);
                    esp147 = reinterpret_cast<void*>(esp146 - 1 + 1 + 1);
                    ax153 = fun_1801a210(reinterpret_cast<int32_t>(esp147) - 4 - 4 + 0x6c, reinterpret_cast<int32_t>(esp147) + 80, reinterpret_cast<int32_t>(reinterpret_cast<int32_t>(eax97) - reinterpret_cast<unsigned char>(edx110)) >> 2, v21, v17, v15, v13, v24, v30, v32, v27, v35, v38, v93, v94, v95, v96, v98, v51, v52, v53, v54, v55, edx110, edx141, eax139, ecx140, edx142, v148, v149, v150, v151, v152, v11, a2, a3, a4, a5, a6, a7, a8, a9, a10);
                    return ax153;
                }
            }
        } else {
            eax154 = g18043454;
            edx155 = g18043450;
            v156 = esi23->f36;
            ecx157 = g18043458;
            edx158 = g1804345c;
            fun_1801a210(esp20 - 4 - 4 + 48, esp20 + 80, ebp19, v21, v17, v15, v13, v24, v30, v32, v27, v35, v38, v93, v94, v95, v96, v98, v51, v52, v53, v54, v55, v156, edx155, eax154, ecx157, edx158, v159, v160, v161, v162, v163, v11, a2, a3, a4, a5, a6, a7, a8, a9, a10);
            eax164 = esi23->f36 + reinterpret_cast<unsigned char>(ebp19) * 4;
            esi23->f36 = eax164;
            return eax164;
        }
    }
    return *reinterpret_cast<void***>(&eax97);
}

void fun_1801c710(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22) {
    void** v23;
    void** v24;
    void** ebp25;
    void*** ebp26;
    void** v27;
    void** ebx28;
    void** v29;
    void** esi30;
    void** esi31;
    void** v32;
    void** edi33;
    void** edi34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** eax59;
    void** eax60;
    void** ebx61;
    void** edx62;
    void** esi63;
    void** edi64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** eax69;
    void** ecx70;
    void** ecx71;
    void** edx72;
    void** v73;
    void** ecx74;
    void** v75;
    void** v76;
    void** eax77;
    void** v78;
    void** ecx79;
    void** v80;
    void** v81;
    void** v82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** v92;
    void** ecx93;
    void** edx94;
    void** v95;
    void** v96;
    void** eax97;
    void** v98;
    void** v99;
    void** eax100;
    void** v101;
    void** ecx102;
    void** edx103;
    void** eax104;
    void** ecx105;
    void** v106;
    void** v107;
    void** v108;
    void** v109;
    void** v110;
    void** v111;
    void** v112;
    void** eax113;
    void** ecx114;
    void** edx115;
    void** eax116;
    void** ecx117;
    void** eax118;
    void** v119;
    void** v120;
    void** v121;
    void** v122;
    void** v123;
    void** v124;
    void** v125;
    void** v126;
    void** v127;
    void** edx128;
    void** edx129;
    void** eax130;
    void** ecx131;
    void** v132;
    void** v133;
    void** v134;
    void** v135;
    void** v136;
    void** v137;
    void** v138;
    void** v139;
    void** v140;
    void** v141;
    void** v142;
    void** v143;
    void** v144;
    void** v145;
    void** v146;
    void** eax147;
    void** v148;
    void** v149;
    void** v150;
    void** v151;
    void** v152;
    void** v153;
    void** v154;
    void** v155;
    void** v156;
    void** v157;
    void** v158;
    void** v159;
    void** v160;
    void** v161;
    void** v162;
    void** v163;
    void** v164;
    void** v165;

    v23 = reinterpret_cast<void**>(__return_address());
    v24 = ebp25;
    ebp26 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    v27 = ebx28;
    v29 = esi30;
    esi31 = ecx;
    v32 = edi33;
    edi34 = a2;
    v35 = esi31;
    if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi31 + 20)) < reinterpret_cast<signed char>(edi34)) {
        v36 = *reinterpret_cast<void***>(esi31 + 24);
        fun_1802b2b0(ecx, v36, v32, v29, v27, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v35, v24, v23, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
        if (reinterpret_cast<signed char>(edi34) < reinterpret_cast<signed char>(32)) {
        }
        *reinterpret_cast<void***>(esi31 + 20) = a2;
        ecx = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a2) * 8);
        eax59 = fun_1802b2bb(ecx, ecx, v32, v29, v27, v55, v56, v57, v58);
        *reinterpret_cast<void***>(esi31 + 24) = eax59;
    }
    __asm__("fild dword [esi+0xc]");
    eax60 = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi31 + 16) = edi34;
    __asm__("fmul dword [0x18034544]");
    __asm__("fstp dword [ebp+0x8]");
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(edi34) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(edi34 == 0))) {
        ecx = a3;
        do {
            __asm__("fld dword [ebp+0x8]");
            __asm__("fmul dword [ecx+eax*8]");
            __asm__("fstp dword [ebp+0xc]");
            __asm__("fld dword [ebp+0xc]");
            __asm__("fistp dword [ebp-0x8]");
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi31 + 24) + reinterpret_cast<unsigned char>(eax60) * 8) = reinterpret_cast<void**>(32);
            *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(*reinterpret_cast<void***>(esi31 + 24) + reinterpret_cast<unsigned char>(eax60) * 8) + 4) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(ecx + reinterpret_cast<unsigned char>(eax60) * 8) + 4);
            ++eax60;
        } while (reinterpret_cast<signed char>(eax60) < reinterpret_cast<signed char>(edi34));
    }
    ebx61 = reinterpret_cast<void**>(0);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi31 + 16)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(esi31 + 16) == 0))) {
        ecx = *reinterpret_cast<void***>(esi31 + 24);
        edx62 = *reinterpret_cast<void***>(esi31 + 16);
        do {
            if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx)) > reinterpret_cast<signed char>(ebx61)) {
                ebx61 = *reinterpret_cast<void***>(ecx);
            }
            ecx = ecx + 8;
            --edx62;
        } while (edx62);
    }
    esi63 = esi31 + 28;
    edi64 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi31 + 32)) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi31 + 28))) >> 2);
    if (ebx61 == edi64) 
        goto addr_0x1801c963_14;
    if (ebx61) {
        eax69 = fun_1802b2bb(ecx, reinterpret_cast<unsigned char>(ebx61) * 4, v32, v29, v27, v65, v66, v67, v68);
        if (!eax69) {
            addr_0x1801c963_14:
            if (reinterpret_cast<signed char>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi63 + 4)) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi63))) >> 2) < reinterpret_cast<signed char>(ebx61)) {
                ebx61 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi63 + 4)) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi63))) >> 2);
                if (ebx61) {
                    ecx70 = reinterpret_cast<void**>(0);
                    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(v35 + 16)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(v35 + 16) == 0))) {
                        do {
                            if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(v35 + 24) + reinterpret_cast<unsigned char>(ecx70) * 8)) > reinterpret_cast<signed char>(ebx61)) {
                                *reinterpret_cast<void***>(*reinterpret_cast<void***>(v35 + 24) + reinterpret_cast<unsigned char>(ecx70) * 8) = ebx61;
                            }
                            ++ecx70;
                        } while (reinterpret_cast<signed char>(ecx70) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(v35 + 16)));
                    }
                } else {
                    *reinterpret_cast<void***>(v35 + 16) = reinterpret_cast<void**>(0);
                }
            }
        } else {
            if (reinterpret_cast<signed char>(ebx61) <= reinterpret_cast<signed char>(edi64)) {
                ecx71 = g18043450;
                edx72 = g18043454;
                v73 = ecx71;
                ecx74 = g1804345c;
                v75 = edx72;
                v76 = eax69;
                eax77 = g18043458;
                v78 = ecx74;
                ecx79 = esi63;
                v80 = eax77;
                fun_1801ca40(ecx79, ebp26 + 0xffffffc8, ebx61, ebx61, v32, v29, v27, v81, v82, v83, v84, v85, v76, v73, v75, v80, v78, v86, v87, v88, v89, v90, v91, v92, 32, v35);
            } else {
                ecx93 = g18043454;
                edx94 = g18043458;
                v95 = ecx93;
                v96 = eax69;
                eax97 = g18043450;
                v98 = edx94;
                v99 = eax97;
                eax100 = g1804345c;
                v101 = eax100;
                fun_1801c1e0(esi63, edi64, edi64, ebp26 - 8, ebp26 + 8);
                ecx102 = g18043450;
                edx103 = g18043454;
                eax104 = g18043458;
                ecx105 = g1804345c;
                fun_1801a210(ebp26 + 0xffffffc8, ebp26 + 0xffffffdc, a2, v32, v29, v27, v106, v107, v108, v109, v110, 32, ecx102, edx103, eax104, ecx105, v96, v99, v95, v98, v101, v111, v112, 32, v35, v24, v23, a2, eax69, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
                if (reinterpret_cast<signed char>(a2) < reinterpret_cast<signed char>(edi64)) {
                    eax113 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi64) - reinterpret_cast<unsigned char>(a2));
                    fun_1801c1e0(esi63, eax113, eax113, ebp26 - 12, ebp26 - 16);
                    ecx114 = g18043450;
                    edx115 = g18043454;
                    eax116 = g18043458;
                    ecx117 = g1804345c;
                    eax118 = a2;
                    *reinterpret_cast<int16_t*>(&eax118) = fun_1801c050(ebp26 + 0xffffffb4, ebp26 + 0xffffffdc, eax118, v119);
                    fun_1801a210(ebp26 + 0xffffffc8, eax118, v119, v32, v29, v27, v120, v121, v122, v123, v124, v125, ecx114, edx115, eax116, ecx117, v96, v99, v95, v98, v101, v126, v127, 32, v35, v24, v23, a2, eax69, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
                }
                edx128 = g18043450;
                v73 = edx128;
                edx129 = g1804345c;
                eax130 = g18043454;
                v75 = eax130;
                v76 = eax69 + reinterpret_cast<unsigned char>(edi64) * 4;
                ecx131 = g18043458;
                v80 = ecx131;
                ecx79 = reinterpret_cast<void**>(ebp26 + 0xffffffc8);
                v78 = edx129;
                fun_18017250(ecx79, reinterpret_cast<unsigned char>(ebx61) - reinterpret_cast<unsigned char>(edi64), v32, v29, v27, v132, v133, v134, v135, v136, v76, v73, v75, v80, v78, v96, v99, v95, v98, v101, v137, v138, 32, v35, v24);
            }
            v139 = *reinterpret_cast<void***>(esi63);
            fun_1802b2b0(ecx79, v139, v32, v29, v27, v140, v141, v142, v143, v144, v76, v73, v75, v80, v78, v96, v99, v95, v98, v101, v145, v146, 32, v35, v24, v23, a2, eax69, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
            eax147 = eax69;
            *reinterpret_cast<void***>(esi63) = eax147;
            *reinterpret_cast<void***>(esi63 + 4) = eax147 + reinterpret_cast<unsigned char>(ebx61) * 4;
            goto addr_0x1801c960_29;
        }
    } else {
        v148 = *reinterpret_cast<void***>(esi31 + 28);
        fun_1802b2b0(ecx, v148, v32, v29, v27, v149, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, v164, v165, 32, v35, v24, v23, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
        eax147 = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(esi63 + 4) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(esi63) = reinterpret_cast<void**>(0);
        goto addr_0x1801c960_29;
    }
    fun_18022aa0(v35 + 4, ebx61);
    return;
    addr_0x1801c960_29:
    *reinterpret_cast<void***>(esi63 + 8) = eax147;
    goto addr_0x1801c963_14;
}

int16_t fun_1801cbb0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** eax8;
    int16_t ax9;

    eax8 = fun_1802b2bb(ecx, 32, __return_address(), a2, a3, a4, a5, a6, a7);
    if (!eax8) {
        return 0;
    } else {
        ax9 = fun_1801cbe0(eax8, a2);
        return ax9;
    }
}

struct s694 {
    signed char[16] pad16;
    int32_t f16;
    int32_t f20;
};

struct s695 {
    int32_t f0;
    signed char[20] pad24;
    int32_t f24;
};

int16_t fun_1801cc60(struct s694* ecx, struct s695* a2) {
    int32_t eax3;
    int32_t edx4;
    int32_t ecx5;
    int32_t v6;

    eax3 = a2->f24;
    if (eax3) {
        edx4 = a2->f0;
        ecx5 = ecx->f16;
        v6 = ecx->f20;
        *reinterpret_cast<int16_t*>(&eax3) = fun_1801cc90(edx4, ecx5, v6, ecx + 1, eax3);
    }
    return *reinterpret_cast<int16_t*>(&eax3);
}

struct s696 {
    unsigned char* f0;
    void** f4;
    signed char[3] pad8;
    int32_t f8;
};

struct s697 {
    void** f0;
    signed char[3] pad4;
    void** f4;
};

int16_t fun_18017c70(unsigned char** a1, struct s696* a2, int32_t a3, int32_t a4, void** a5) {
    void** eax6;
    struct s697* ecx7;
    void** edx8;
    void** edi9;
    int1_t zf10;
    int32_t v11;
    int32_t v12;
    unsigned char* ecx13;
    unsigned char* v14;
    unsigned char* ecx15;
    unsigned char* v16;
    int16_t ax17;
    unsigned char* ecx18;
    unsigned char* v19;
    int16_t ax20;
    unsigned char* esi21;
    unsigned char* edi22;
    void* ecx23;
    void* eax24;
    uint32_t ecx25;
    uint32_t ecx26;

    eax6 = a5;
    if (eax6) {
        ecx7 = reinterpret_cast<struct s697*>(&a2->f4);
        eax6 = ecx7->f0;
        edx8 = ecx7->f4;
        edi9 = g18043440;
        if (eax6 != edi9 || ((zf10 = edx8 == g18043444, !zf10) || (!(*reinterpret_cast<unsigned char*>(&eax6 + 1) & 64) || !(*reinterpret_cast<unsigned char*>(&eax6 + 1) & 64)))) {
            if (reinterpret_cast<int1_t>(ecx7->f0 == 1)) {
                __asm__("fld dword [ebp+0x10]");
                __asm__("fmul dword [0x18034548]");
                __asm__("fstp dword [ebp+0xc]");
                __asm__("fld dword [ebp+0xc]");
                __asm__("fistp dword [ebp-0x4]");
                if (v11 > 0x7fff) {
                }
                if (v11 < 0xffff8000) {
                }
                __asm__("fld dword [ebp+0x14]");
                __asm__("fmul dword [0x18034548]");
                __asm__("fstp dword [ebp+0xc]");
                __asm__("fld dword [ebp+0xc]");
                __asm__("fistp dword [ebp-0x8]");
                if (!1) {
                }
                if (!1) {
                }
                eax6 = reinterpret_cast<void**>(0xffff8000);
                if (a2->f8 == 8) {
                    v12 = v11;
                    ecx13 = *a1;
                    v14 = a2->f0;
                    *reinterpret_cast<int16_t*>(&eax6) = fun_18017de0(ecx13, v14, *reinterpret_cast<int16_t*>(&v12), 0x8000, a5);
                } else {
                    if (a2->f8 == 16) {
                        ecx15 = *a1;
                        v16 = a2->f0;
                        ax17 = fun_18017ed0(ecx15, v16, v11, 0x8000, a5);
                        return ax17;
                    } else {
                        if (a2->f8 == 32) {
                            ecx18 = a2->f0;
                            v19 = *a1;
                            ax20 = fun_18017fd0(ecx18, v19, ecx18, a3, a4, a5);
                            return ax20;
                        }
                    }
                }
            }
        } else {
            esi21 = a2->f0;
            edi22 = *a1;
            ecx23 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(a5) + reinterpret_cast<unsigned char>(a5));
            eax24 = ecx23;
            ecx25 = reinterpret_cast<uint32_t>(ecx23) >> 2;
            while (ecx25) {
                --ecx25;
                *edi22 = *esi21;
                edi22 = edi22 + 4;
                esi21 = esi21 + 4;
            }
            ecx26 = reinterpret_cast<uint32_t>(eax24) & 3;
            while (ecx26) {
                --ecx26;
                *edi22 = *esi21;
                ++edi22;
                ++esi21;
            }
            return *reinterpret_cast<int16_t*>(&eax24);
        }
    }
    return *reinterpret_cast<int16_t*>(&eax6);
}

void fun_1801d230(int32_t ecx) {
    goto 0x18022ae0;
}

struct s698 {
    signed char[4] pad4;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

struct s699 {
    int32_t f0;
    void** f4;
};

struct s700 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

void fun_1801d850(struct s698* ecx, int32_t a2, int32_t a3, struct s699* a4, int32_t* a5) {
    int32_t ebx6;
    int32_t esi7;
    int32_t eax8;
    int32_t edx9;
    int32_t eax10;
    void** ecx11;
    void** edx12;
    void** esi13;
    void** edi14;
    struct s700* ebx15;

    ebx6 = ecx->f4;
    esi7 = ecx->f12;
    eax8 = esi7 - ebx6 >> 2;
    if (a2 > eax8) {
        edx9 = a2 - eax8;
        eax10 = ecx->f8 - edx9 * 4;
        if (a3 > edx9) {
        }
        *a5 = a3;
    } else {
        eax10 = esi7 - a2 * 4;
        *a5 = a3;
    }
    ecx11 = g18043450;
    edx12 = g18043454;
    esi13 = g18043458;
    edi14 = g1804345c;
    a4->f0 = eax10;
    ebx15 = reinterpret_cast<struct s700*>(&a4->f4);
    ebx15->f0 = ecx11;
    ebx15->f4 = edx12;
    ebx15->f8 = esi13;
    ebx15->f12 = edi14;
    return;
}

struct s701 {
    signed char[4] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

void** fun_1801da50(struct s701* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21) {
    void*** esp22;
    void** eax23;
    void** edx24;
    void** edi25;
    void** ecx26;
    void** eax27;
    void** edx28;
    void** ecx29;
    void** edi30;
    void** esi31;
    void** ebp32;
    void** ebx33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** ecx44;
    void** ecx45;
    void** eax46;
    void** edx47;
    void** eax48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void* esp59;
    void** eax60;
    void** edx61;
    void** ecx62;
    void** eax63;
    void** edx64;
    void** eax65;
    void** edx66;
    void** v67;
    void** v68;
    void** ecx69;
    void* ebp70;
    void** ecx71;
    void** edx72;
    void** ebx73;
    void** edx74;
    void** eax75;
    void** v76;
    void** v77;
    void** v78;
    void** eax79;
    void** eax80;
    void** eax81;
    void** edx82;
    void** ecx83;
    void** eax84;
    void** v85;
    void*** esp86;
    void** v87;
    void** v88;
    void** v89;
    void** eax90;
    void** v91;
    void* esp92;
    struct s160** esp93;
    void* esp94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** ax100;
    void** ecx101;
    void** eax102;
    void** edx103;
    void** eax104;
    void** v105;
    void** v106;
    void** v107;
    void** v108;
    void** v109;
    void** v110;
    void** v111;
    void** v112;
    void** v113;
    void** v114;
    void** eax115;

    esp22 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 60 - 4 - 4 - 4 - 4);
    eax23 = ecx->f8;
    edx24 = ecx->f12;
    edi25 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax23) - reinterpret_cast<unsigned char>(edx24)) >> 2);
    if (edi25) {
        if (reinterpret_cast<signed char>(a3) >= reinterpret_cast<signed char>(edi25)) {
            if (reinterpret_cast<signed char>(a3) <= reinterpret_cast<signed char>(edi25)) {
                ecx26 = g18043450;
                eax27 = g18043458;
                edx28 = g18043454;
                ecx29 = g1804345c;
                fun_1801a210(a2, esp22 + 36, a3, edi30, esi31, ebp32, ebx33, v34, v35, v36, v37, v38, edx24, ecx26, edx28, eax27, ecx29, v39, v40, v41, v42, v43, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
                eax23 = ecx->f4;
                ecx->f12 = eax23;
            } else {
                ecx44 = ecx->f4;
                if (reinterpret_cast<signed char>(a3) < reinterpret_cast<signed char>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax23) - reinterpret_cast<unsigned char>(ecx44)) >> 2)) {
                    ecx45 = g18043454;
                    eax46 = g18043450;
                    edx47 = g18043458;
                    eax48 = g1804345c;
                    fun_1801a210(a2, esp22 + 36, edi25, edi30, esi31, ebp32, ebx33, v49, v50, v51, v52, v53, edx24, eax46, ecx45, edx47, eax48, v54, v55, v56, v57, v58, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
                    esp59 = reinterpret_cast<void*>(esp22 - 4 - 4 - 4 + 8 + 4);
                    eax60 = g18043450;
                    edx61 = ecx->f4;
                    ecx62 = g18043454;
                    eax63 = g1804345c;
                    edx64 = g18043458;
                    eax65 = a2 + 4;
                    edx66 = *reinterpret_cast<void***>(a2);
                    v67 = *reinterpret_cast<void***>(eax65);
                    v68 = *reinterpret_cast<void***>(eax65 + 4);
                    ecx69 = *reinterpret_cast<void***>(eax65 + 12);
                    if (reinterpret_cast<signed char>(ecx69) < reinterpret_cast<signed char>(0)) {
                        ebp70 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax65 + 8)) * reinterpret_cast<unsigned char>(edi25));
                    } else {
                        ebp70 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(edi25) << *reinterpret_cast<unsigned char*>(&ecx69));
                    }
                    ecx71 = *reinterpret_cast<void***>(eax65 + 4);
                    edx72 = *reinterpret_cast<void***>(eax65);
                    ebx73 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a3) - reinterpret_cast<unsigned char>(edi25));
                    edx74 = *reinterpret_cast<void***>(eax65 + 8);
                    eax75 = *reinterpret_cast<void***>(eax65 + 12);
                    fun_1801a210(reinterpret_cast<int32_t>(esp59) - 4 - 4 + 24, reinterpret_cast<int32_t>(esp59) + 36, ebx73, edi30, esi31, ebp32, ebx33, reinterpret_cast<unsigned char>(edx66) + reinterpret_cast<uint32_t>(ebp70), edx72, ecx71, edx74, eax75, edx61, eax60, ecx62, edx64, eax63, v76, v67, v68, v77, v78, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
                    eax79 = ecx->f4 + reinterpret_cast<unsigned char>(ebx73) * 4;
                    ecx->f12 = eax79;
                    return eax79;
                } else {
                    ecx->f12 = ecx44;
                    eax80 = g18043450;
                    eax81 = g1804345c;
                    edx82 = g18043458;
                    ecx83 = g18043454;
                    eax84 = a2 + 4;
                    v85 = *reinterpret_cast<void***>(a2);
                    esp86 = esp22 - 4;
                    v87 = *reinterpret_cast<void***>(eax84);
                    v88 = *reinterpret_cast<void***>(eax84 + 4);
                    v89 = *reinterpret_cast<void***>(eax84 + 8);
                    eax90 = *reinterpret_cast<void***>(eax84 + 12);
                    v91 = eax90;
                    *reinterpret_cast<int16_t*>(&eax90) = fun_180196f0(esp86 + 20, reinterpret_cast<unsigned char>(a3) - reinterpret_cast<unsigned char>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax23) - reinterpret_cast<unsigned char>(ecx44)) >> 2), edi30);
                    esp92 = reinterpret_cast<void*>(esp86 - 4 + 4 + 4);
                    esp93 = reinterpret_cast<struct s160**>(reinterpret_cast<int32_t>(esp92) - 4);
                    fun_180196c0(esp93 + 15, reinterpret_cast<int32_t>(esp92) + 16);
                    esp94 = reinterpret_cast<void*>(esp93 - 1 + 1 + 1);
                    ax100 = fun_1801a210(reinterpret_cast<int32_t>(esp94) - 4 - 4 + 64, reinterpret_cast<int32_t>(esp94) + 36, reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax23) - reinterpret_cast<unsigned char>(ecx44)) >> 2, edi30, esi31, ebp32, ebx33, reinterpret_cast<unsigned char>(v85) + reinterpret_cast<unsigned char>(eax90), v87, v88, v89, v91, ecx44, eax80, ecx83, edx82, eax81, v95, v96, v97, v98, v99, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
                    return ax100;
                }
            }
        } else {
            ecx101 = g18043454;
            eax102 = g18043450;
            edx103 = g18043458;
            eax104 = g1804345c;
            fun_1801a210(a2, esp22 + 16, a3, edi30, esi31, ebp32, ebx33, edx24, eax102, ecx101, edx103, eax104, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
            eax115 = ecx->f12 + reinterpret_cast<unsigned char>(a3) * 4;
            ecx->f12 = eax115;
            return eax115;
        }
    }
    return eax23;
}

struct s702 {
    signed char[4] pad4;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

void fun_1801dc90(struct s702* ecx, int32_t a2) {
    int32_t eax3;
    int32_t eax4;

    eax3 = ecx->f8;
    eax4 = eax3 - ecx->f12 >> 2;
    if (a2 >= eax4) {
        ecx->f12 = ecx->f4 + (a2 - eax4) * 4;
        return;
    } else {
        ecx->f12 = ecx->f12 + a2 * 4;
        return;
    }
}

int32_t fun_1801de90(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** eax8;

    eax8 = fun_1802b2bb(ecx, 16, __return_address(), a2, a3, a4, a5, a6, a7);
    if (!eax8) {
        return 0;
    } else {
        goto 0x1801d440;
    }
}

void fun_1801f280(void** ecx) {
    __asm__("fild dword [ecx+0x10]");
    __asm__("fmul dword [ebp+0x8]");
    __asm__("fstp dword [ebp+0x8]");
    __asm__("fld dword [ebp+0x8]");
    __asm__("fistp dword [ebp-0x4]");
    fun_18022aa0(ecx + 4, ecx);
    return;
}

struct s703 {
    signed char[16] pad16;
    void** f16;
    signed char[7] pad24;
    void*** f24;
    void** f28;
    signed char[3] pad32;
    void* f32;
    void** f36;
};

struct s704 {
    void** f0;
    signed char[3] pad4;
    void** f4;
};

void** fun_1801f4d0(struct s703* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10) {
    void** v11;
    void** edx12;
    void** v13;
    void** ebx14;
    void** v15;
    void** ebp16;
    void** v17;
    void** esi18;
    void** ebp19;
    void*** esp20;
    void** v21;
    void** edi22;
    struct s703* esi23;
    void** v24;
    void** ecx25;
    uint1_t less_or_equal26;
    void** v27;
    void** edi28;
    struct s704* eax29;
    void** v30;
    void** eax31;
    void** v32;
    void** ecx33;
    void** edx34;
    void** v35;
    void** eax36;
    void** ecx37;
    void** v38;
    void** eax39;
    void** ebp40;
    void** ecx41;
    void** edx42;
    void** v43;
    void** eax44;
    void** v45;
    void** v46;
    void** v47;
    void** eax48;
    void* esp49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** v59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** ecx66;
    void** edx67;
    void* edi68;
    void* eax69;
    void** edi70;
    void** edx71;
    void** eax72;
    void** edx73;
    void** edx74;
    void** eax75;
    void* esp76;
    void** v77;
    void** v78;
    void** v79;
    void** v80;
    void** v81;
    void** edx82;
    void** ecx83;
    void*** esp84;
    void** edx85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    int1_t less91;
    void** edx92;
    void** v93;
    void** v94;
    void** v95;
    void** v96;
    void* eax97;
    void** v98;
    void** edi99;
    void** eax100;
    void** edx101;
    void** v102;
    void** ecx103;
    void** eax104;
    void** v105;
    void** v106;
    void** v107;
    void** v108;
    void** v109;
    void** edx110;
    void** eax111;
    void** edx112;
    void** v113;
    void** ecx114;
    void** eax115;
    void*** esp116;
    void** v117;
    void** v118;
    void** v119;
    void** v120;
    void** v121;
    void* esp122;
    void** ecx123;
    void** edx124;
    void** eax125;
    void** edx126;
    void** eax127;
    struct s160** esp128;
    void*** esp129;
    void* esp130;
    void* esp131;
    void** ebp132;
    void** v133;
    void** v134;
    void** v135;
    void** v136;
    void** v137;
    void** ax138;
    void** eax139;
    void** ecx140;
    void** edx141;
    void** edx142;
    struct s160** esp143;
    void* esp144;
    void* esp145;
    struct s160** esp146;
    void* esp147;
    void** v148;
    void** v149;
    void** v150;
    void** v151;
    void** v152;
    void** ax153;
    void** eax154;
    void** edx155;
    void** v156;
    void** ecx157;
    void** edx158;
    void** v159;
    void** v160;
    void** v161;
    void** v162;
    void** v163;
    void** eax164;

    v11 = reinterpret_cast<void**>(__return_address());
    edx12 = a3;
    v13 = ebx14;
    v15 = ebp16;
    v17 = esi18;
    ebp19 = *reinterpret_cast<void***>(edx12 + 24);
    esp20 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x68 - 4 - 4 - 4 - 4);
    v21 = edi22;
    esi23 = ecx;
    v24 = ebp19;
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(ebp19) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(ebp19 == 0)) && (esi23->f16 && (ecx25 = reinterpret_cast<void**>(0), less_or_equal26 = reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(esi23->f16) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(esi23->f16 == 0)), v27 = reinterpret_cast<void**>(0), !less_or_equal26))) {
        do {
            edi28 = esi23->f24[reinterpret_cast<unsigned char>(ecx25) * 8];
            eax29 = reinterpret_cast<struct s704*>(esi23->f24 + reinterpret_cast<unsigned char>(ecx25) * 8);
            v30 = eax29->f4;
            if (reinterpret_cast<signed char>(edi28) > reinterpret_cast<signed char>(ebp19)) {
            }
            eax31 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebp19) - reinterpret_cast<unsigned char>(edi28));
            v32 = eax31;
            if (edi28) {
                ecx33 = esi23->f36;
                edx34 = esi23->f28;
                v35 = edi28;
                eax36 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(ecx33) - reinterpret_cast<unsigned char>(edx34)) >> 1);
                if (reinterpret_cast<signed char>(edi28) > reinterpret_cast<signed char>(eax36)) {
                    ecx37 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi28) - reinterpret_cast<unsigned char>(eax36));
                    v38 = ecx37;
                    eax39 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esi23->f32) - (reinterpret_cast<unsigned char>(ecx37) + reinterpret_cast<unsigned char>(ecx37)));
                    if (reinterpret_cast<signed char>(edi28) > reinterpret_cast<signed char>(ecx37)) {
                    }
                    ebp40 = v38;
                } else {
                    ebp40 = edi28;
                    eax39 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx33) - (reinterpret_cast<unsigned char>(edi28) + reinterpret_cast<unsigned char>(edi28)));
                }
                ecx41 = g18043444;
                edx42 = g18043448;
                v43 = eax39;
                eax44 = g18043440;
                v45 = ecx41;
                v46 = edx42;
                v47 = eax44;
                eax48 = g1804344c;
                esp49 = reinterpret_cast<void*>(esp20 - 4 - 4 - 4);
                v50 = eax48;
                fun_18019390(a2, reinterpret_cast<int32_t>(esp49) + 52, v30, 0, ebp40, 0, v21, v17, v15, v13, v24, v30, v32, v27, v35, v38, v43, v47, v45, v46, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65);
                esp20 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp49) - 4 - 4 - 4 + 20 + 4);
                ecx66 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi28) - reinterpret_cast<unsigned char>(ebp40));
                if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(ecx66) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(ecx66 == 0))) {
                    edx67 = esi23->f36;
                    edi68 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(edi28) - reinterpret_cast<unsigned char>(ebp40));
                    v38 = ecx66;
                    eax69 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(edx67) - reinterpret_cast<unsigned char>(esi23->f28)) >> 1);
                    if (reinterpret_cast<int32_t>(edi68) > reinterpret_cast<int32_t>(eax69)) {
                        edi70 = reinterpret_cast<void**>(reinterpret_cast<uint32_t>(edi68) - reinterpret_cast<uint32_t>(eax69));
                        v35 = edi70;
                        edx71 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esi23->f32) - (reinterpret_cast<unsigned char>(edi70) + reinterpret_cast<unsigned char>(edi70)));
                        if (reinterpret_cast<signed char>(ecx66) > reinterpret_cast<signed char>(edi70)) {
                        }
                        ecx66 = v38;
                    } else {
                        edx71 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edx67) - (reinterpret_cast<uint32_t>(edi68) + reinterpret_cast<uint32_t>(edi68)));
                    }
                    eax72 = g18043444;
                    v51 = edx71;
                    edx73 = g18043440;
                    v52 = edx73;
                    edx74 = g18043448;
                    v54 = edx74;
                    v53 = eax72;
                    eax75 = g1804344c;
                    esp76 = reinterpret_cast<void*>(esp20 - 4 - 4 - 4);
                    v55 = eax75;
                    fun_18019390(a2, reinterpret_cast<int32_t>(esp76) + 72, v30, 0, ecx66, ebp40, v21, v17, v15, v13, v24, v30, v32, v27, v35, v38, v43, v47, v45, v46, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v77, v78, v79, v80, v81);
                    esp20 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp76) - 4 - 4 - 4 + 20 + 4);
                }
                eax31 = v32;
                ebp19 = v24;
            }
            if (eax31) {
                edx82 = a3 + 4;
                v56 = *reinterpret_cast<void***>(a3);
                ecx83 = *reinterpret_cast<void***>(edx82);
                esp84 = esp20 - 4 - 4 - 4 - 4;
                v57 = ecx83;
                v58 = *reinterpret_cast<void***>(edx82 + 4);
                v59 = *reinterpret_cast<void***>(edx82 + 8);
                edx85 = *reinterpret_cast<void***>(edx82 + 12);
                v60 = edx85;
                fun_18019390(a2, esp84 + 96, v30, 0, eax31, edi28, v21, v17, v15, v13, v24, v30, v32, v27, v35, v38, v43, v47, v45, v46, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v86, v87, v88, v89, v90);
                esp20 = esp84 - 4 - 4 + 20 + 4;
            }
            ecx25 = v27 + 1;
            less91 = reinterpret_cast<signed char>(ecx25) < reinterpret_cast<signed char>(esi23->f16);
            v27 = ecx25;
        } while (less91);
        edx12 = a3;
    }
    edx92 = edx12 + 4;
    v93 = *reinterpret_cast<void***>(edx12);
    v94 = *reinterpret_cast<void***>(edx92);
    v95 = *reinterpret_cast<void***>(edx92 + 4);
    v96 = *reinterpret_cast<void***>(edx92 + 8);
    eax97 = esi23->f32;
    v98 = *reinterpret_cast<void***>(edx92 + 12);
    edi99 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<int32_t>(eax97) - reinterpret_cast<unsigned char>(esi23->f36)) >> 1);
    if (edi99) {
        if (reinterpret_cast<signed char>(ebp19) >= reinterpret_cast<signed char>(edi99)) {
            if (reinterpret_cast<signed char>(ebp19) <= reinterpret_cast<signed char>(edi99)) {
                eax100 = g18043440;
                edx101 = g18043448;
                v102 = esi23->f36;
                ecx103 = g18043444;
                eax104 = g1804344c;
                *reinterpret_cast<void***>(&eax97) = fun_1801a210(esp20 - 4 - 4 + 48, esp20 + 80, ebp19, v21, v17, v15, v13, v24, v30, v32, v27, v35, v38, v93, v94, v95, v96, v98, v51, v52, v53, v54, v55, v102, eax100, ecx103, edx101, eax104, v105, v106, v107, v108, v109, v11, a2, a3, a4, a5, a6, a7, a8, a9, a10);
                esi23->f36 = esi23->f28;
            } else {
                edx110 = esi23->f28;
                if (reinterpret_cast<signed char>(ebp19) < reinterpret_cast<signed char>(reinterpret_cast<int32_t>(reinterpret_cast<int32_t>(eax97) - reinterpret_cast<unsigned char>(edx110)) >> 1)) {
                    eax111 = g18043440;
                    edx112 = g18043448;
                    v113 = esi23->f36;
                    ecx114 = g18043444;
                    eax115 = g1804344c;
                    esp116 = esp20 - 4 - 4;
                    fun_1801a210(esp116 + 48, esp20 + 80, edi99, v21, v17, v15, v13, v24, v30, v32, v27, v35, v38, v93, v94, v95, v96, v98, v51, v52, v53, v54, v55, v113, eax111, ecx114, edx112, eax115, v117, v118, v119, v120, v121, v11, a2, a3, a4, a5, a6, a7, a8, a9, a10);
                    esp122 = reinterpret_cast<void*>(esp116 - 4 + 8 + 4);
                    ecx123 = g18043444;
                    edx124 = esi23->f28;
                    eax125 = g18043440;
                    edx126 = g18043448;
                    eax127 = g1804344c;
                    esp128 = reinterpret_cast<struct s160**>(reinterpret_cast<int32_t>(esp122) - 4);
                    fun_180196c0(esp128 + 16, reinterpret_cast<int32_t>(esp122) + 40);
                    esp129 = reinterpret_cast<void***>(esp128 - 1 + 1 + 1 - 1);
                    fun_1801c020(esp129 + 64, edi99);
                    esp130 = reinterpret_cast<void*>(esp129 - 4 + 4 + 4);
                    fun_180196c0(reinterpret_cast<int32_t>(esp130) + 100, reinterpret_cast<int32_t>(esp130) + 60);
                    esp131 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp130) - 4 - 4 + 4 + 4);
                    ebp132 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ebp19) - reinterpret_cast<unsigned char>(edi99));
                    ax138 = fun_1801a210(reinterpret_cast<int32_t>(esp131) - 4 - 4 + 0x6c, reinterpret_cast<int32_t>(esp131) + 80, ebp132, v21, v17, v15, v13, v24, v30, v32, v27, v35, v38, v93, v94, v95, v96, v98, v51, v52, v53, v54, v55, edx124, eax125, ecx123, edx126, eax127, v133, v134, v135, v136, v137, v11, a2, a3, a4, a5, a6, a7, a8, a9, a10);
                    esi23->f36 = esi23->f28 + reinterpret_cast<unsigned char>(ebp132) * 2;
                    return ax138;
                } else {
                    esi23->f36 = edx110;
                    eax139 = g18043444;
                    ecx140 = g18043448;
                    edx141 = g18043440;
                    edx142 = g1804344c;
                    esp143 = reinterpret_cast<struct s160**>(esp20 - 4);
                    fun_180196c0(esp143 + 16, esp20 + 40);
                    esp144 = reinterpret_cast<void*>(esp143 - 1 + 1 + 1);
                    fun_1801c020(reinterpret_cast<int32_t>(esp144) + 60, reinterpret_cast<unsigned char>(ebp19) - reinterpret_cast<unsigned char>(reinterpret_cast<int32_t>(reinterpret_cast<int32_t>(eax97) - reinterpret_cast<unsigned char>(edx110)) >> 1));
                    esp145 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp144) - 4 - 4 + 4 + 4);
                    esp146 = reinterpret_cast<struct s160**>(reinterpret_cast<int32_t>(esp145) - 4);
                    fun_180196c0(esp146 + 26, reinterpret_cast<int32_t>(esp145) + 60);
                    esp147 = reinterpret_cast<void*>(esp146 - 1 + 1 + 1);
                    ax153 = fun_1801a210(reinterpret_cast<int32_t>(esp147) - 4 - 4 + 0x6c, reinterpret_cast<int32_t>(esp147) + 80, reinterpret_cast<int32_t>(reinterpret_cast<int32_t>(eax97) - reinterpret_cast<unsigned char>(edx110)) >> 1, v21, v17, v15, v13, v24, v30, v32, v27, v35, v38, v93, v94, v95, v96, v98, v51, v52, v53, v54, v55, edx110, edx141, eax139, ecx140, edx142, v148, v149, v150, v151, v152, v11, a2, a3, a4, a5, a6, a7, a8, a9, a10);
                    return ax153;
                }
            }
        } else {
            eax154 = g18043444;
            edx155 = g18043440;
            v156 = esi23->f36;
            ecx157 = g18043448;
            edx158 = g1804344c;
            fun_1801a210(esp20 - 4 - 4 + 48, esp20 + 80, ebp19, v21, v17, v15, v13, v24, v30, v32, v27, v35, v38, v93, v94, v95, v96, v98, v51, v52, v53, v54, v55, v156, edx155, eax154, ecx157, edx158, v159, v160, v161, v162, v163, v11, a2, a3, a4, a5, a6, a7, a8, a9, a10);
            eax164 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi23->f36) + (reinterpret_cast<unsigned char>(ebp19) + reinterpret_cast<unsigned char>(ebp19)));
            esi23->f36 = eax164;
            return eax164;
        }
    }
    return *reinterpret_cast<void***>(&eax97);
}

void fun_1801f8c0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22) {
    void** v23;
    void** v24;
    void** ebp25;
    void*** ebp26;
    void** v27;
    void** ebx28;
    void** v29;
    void** esi30;
    void** esi31;
    void** v32;
    void** edi33;
    void** edi34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void** eax59;
    void** eax60;
    void** ebx61;
    void** edx62;
    void** esi63;
    void** edi64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** eax69;
    void** ecx70;
    void** ecx71;
    void** edx72;
    void** v73;
    void** ecx74;
    void** v75;
    void** v76;
    void** eax77;
    void** v78;
    void** ecx79;
    void** v80;
    void** v81;
    void** v82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** v92;
    void** ecx93;
    void** edx94;
    void** v95;
    void** v96;
    void** eax97;
    void** v98;
    void** v99;
    void** eax100;
    void** v101;
    void** ecx102;
    void** edx103;
    void** eax104;
    void** ecx105;
    void** v106;
    void** v107;
    void** v108;
    void** v109;
    void** v110;
    void** v111;
    void** v112;
    void** eax113;
    void** ecx114;
    void** edx115;
    void** eax116;
    void** ecx117;
    void** eax118;
    void** v119;
    void** v120;
    void** v121;
    void** v122;
    void** v123;
    void** v124;
    void** v125;
    void** v126;
    void** v127;
    void** edx128;
    void** edx129;
    void** eax130;
    void** ecx131;
    void** v132;
    void** v133;
    void** v134;
    void** v135;
    void** v136;
    void** v137;
    void** v138;
    void** v139;
    void** v140;
    void** v141;
    void** v142;
    void** v143;
    void** v144;
    void** v145;
    void** v146;
    void** eax147;
    void** v148;
    void** v149;
    void** v150;
    void** v151;
    void** v152;
    void** v153;
    void** v154;
    void** v155;
    void** v156;
    void** v157;
    void** v158;
    void** v159;
    void** v160;
    void** v161;
    void** v162;
    void** v163;
    void** v164;
    void** v165;

    v23 = reinterpret_cast<void**>(__return_address());
    v24 = ebp25;
    ebp26 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 4);
    v27 = ebx28;
    v29 = esi30;
    esi31 = ecx;
    v32 = edi33;
    edi34 = a2;
    v35 = esi31;
    if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi31 + 20)) < reinterpret_cast<signed char>(edi34)) {
        v36 = *reinterpret_cast<void***>(esi31 + 24);
        fun_1802b2b0(ecx, v36, v32, v29, v27, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v35, v24, v23, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
        if (reinterpret_cast<signed char>(edi34) < reinterpret_cast<signed char>(32)) {
        }
        *reinterpret_cast<void***>(esi31 + 20) = a2;
        ecx = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a2) * 8);
        eax59 = fun_1802b2bb(ecx, ecx, v32, v29, v27, v55, v56, v57, v58);
        *reinterpret_cast<void***>(esi31 + 24) = eax59;
    }
    __asm__("fild dword [esi+0xc]");
    eax60 = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(esi31 + 16) = edi34;
    __asm__("fmul dword [0x18034544]");
    __asm__("fstp dword [ebp+0x8]");
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(edi34) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(edi34 == 0))) {
        ecx = a3;
        do {
            __asm__("fld dword [ebp+0x8]");
            __asm__("fmul dword [ecx+eax*8]");
            __asm__("fstp dword [ebp+0xc]");
            __asm__("fld dword [ebp+0xc]");
            __asm__("fistp dword [ebp-0x8]");
            *reinterpret_cast<void***>(*reinterpret_cast<void***>(esi31 + 24) + reinterpret_cast<unsigned char>(eax60) * 8) = reinterpret_cast<void**>(32);
            *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(*reinterpret_cast<void***>(esi31 + 24) + reinterpret_cast<unsigned char>(eax60) * 8) + 4) = *reinterpret_cast<int32_t*>(reinterpret_cast<uint32_t>(ecx + reinterpret_cast<unsigned char>(eax60) * 8) + 4);
            ++eax60;
        } while (reinterpret_cast<signed char>(eax60) < reinterpret_cast<signed char>(edi34));
    }
    ebx61 = reinterpret_cast<void**>(0);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(esi31 + 16)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(esi31 + 16) == 0))) {
        ecx = *reinterpret_cast<void***>(esi31 + 24);
        edx62 = *reinterpret_cast<void***>(esi31 + 16);
        do {
            if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(ecx)) > reinterpret_cast<signed char>(ebx61)) {
                ebx61 = *reinterpret_cast<void***>(ecx);
            }
            ecx = ecx + 8;
            --edx62;
        } while (edx62);
    }
    esi63 = esi31 + 28;
    edi64 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi31 + 32)) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi31 + 28))) >> 1);
    if (ebx61 == edi64) 
        goto addr_0x1801fb0e_14;
    if (ebx61) {
        eax69 = fun_1802b2bb(ecx, reinterpret_cast<unsigned char>(ebx61) + reinterpret_cast<unsigned char>(ebx61), v32, v29, v27, v65, v66, v67, v68);
        if (!eax69) {
            addr_0x1801fb0e_14:
            if (reinterpret_cast<signed char>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi63 + 4)) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi63))) >> 1) < reinterpret_cast<signed char>(ebx61)) {
                ebx61 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi63 + 4)) - reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(esi63))) >> 1);
                if (ebx61) {
                    ecx70 = reinterpret_cast<void**>(0);
                    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(*reinterpret_cast<void***>(v35 + 16)) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(*reinterpret_cast<void***>(v35 + 16) == 0))) {
                        do {
                            if (reinterpret_cast<signed char>(*reinterpret_cast<void***>(*reinterpret_cast<void***>(v35 + 24) + reinterpret_cast<unsigned char>(ecx70) * 8)) > reinterpret_cast<signed char>(ebx61)) {
                                *reinterpret_cast<void***>(*reinterpret_cast<void***>(v35 + 24) + reinterpret_cast<unsigned char>(ecx70) * 8) = ebx61;
                            }
                            ++ecx70;
                        } while (reinterpret_cast<signed char>(ecx70) < reinterpret_cast<signed char>(*reinterpret_cast<void***>(v35 + 16)));
                    }
                } else {
                    *reinterpret_cast<void***>(v35 + 16) = reinterpret_cast<void**>(0);
                }
            }
        } else {
            if (reinterpret_cast<signed char>(ebx61) <= reinterpret_cast<signed char>(edi64)) {
                ecx71 = g18043440;
                edx72 = g18043444;
                v73 = ecx71;
                ecx74 = g1804344c;
                v75 = edx72;
                v76 = eax69;
                eax77 = g18043448;
                v78 = ecx74;
                ecx79 = esi63;
                v80 = eax77;
                fun_1801fbc0(ecx79, ebp26 + 0xffffffc8, ebx61, ebx61, v32, v29, v27, v81, v82, v83, v84, v85, v76, v73, v75, v80, v78, v86, v87, v88, v89, v90, v91, v92, 32, v35);
            } else {
                ecx93 = g18043444;
                edx94 = g18043448;
                v95 = ecx93;
                v96 = eax69;
                eax97 = g18043440;
                v98 = edx94;
                v99 = eax97;
                eax100 = g1804344c;
                v101 = eax100;
                fun_1801f3c0(esi63, edi64, edi64, ebp26 - 8, ebp26 + 8);
                ecx102 = g18043440;
                edx103 = g18043444;
                eax104 = g18043448;
                ecx105 = g1804344c;
                fun_1801a210(ebp26 + 0xffffffc8, ebp26 + 0xffffffdc, a2, v32, v29, v27, v106, v107, v108, v109, v110, 32, ecx102, edx103, eax104, ecx105, v96, v99, v95, v98, v101, v111, v112, 32, v35, v24, v23, a2, eax69, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
                if (reinterpret_cast<signed char>(a2) < reinterpret_cast<signed char>(edi64)) {
                    eax113 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi64) - reinterpret_cast<unsigned char>(a2));
                    fun_1801f3c0(esi63, eax113, eax113, ebp26 - 12, ebp26 - 16);
                    ecx114 = g18043440;
                    edx115 = g18043444;
                    eax116 = g18043448;
                    ecx117 = g1804344c;
                    eax118 = a2;
                    *reinterpret_cast<int16_t*>(&eax118) = fun_1801c050(ebp26 + 0xffffffb4, ebp26 + 0xffffffdc, eax118, v119);
                    fun_1801a210(ebp26 + 0xffffffc8, eax118, v119, v32, v29, v27, v120, v121, v122, v123, v124, v125, ecx114, edx115, eax116, ecx117, v96, v99, v95, v98, v101, v126, v127, 32, v35, v24, v23, a2, eax69, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
                }
                edx128 = g18043440;
                v73 = edx128;
                edx129 = g1804344c;
                eax130 = g18043444;
                v75 = eax130;
                v76 = eax69 + reinterpret_cast<unsigned char>(edi64) * 2;
                ecx131 = g18043448;
                v80 = ecx131;
                ecx79 = reinterpret_cast<void**>(ebp26 + 0xffffffc8);
                v78 = edx129;
                fun_18017250(ecx79, reinterpret_cast<unsigned char>(ebx61) - reinterpret_cast<unsigned char>(edi64), v32, v29, v27, v132, v133, v134, v135, v136, v76, v73, v75, v80, v78, v96, v99, v95, v98, v101, v137, v138, 32, v35, v24);
            }
            v139 = *reinterpret_cast<void***>(esi63);
            fun_1802b2b0(ecx79, v139, v32, v29, v27, v140, v141, v142, v143, v144, v76, v73, v75, v80, v78, v96, v99, v95, v98, v101, v145, v146, 32, v35, v24, v23, a2, eax69, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
            eax147 = eax69;
            *reinterpret_cast<void***>(esi63) = eax147;
            *reinterpret_cast<void***>(esi63 + 4) = eax147 + reinterpret_cast<unsigned char>(ebx61) * 2;
            goto addr_0x1801fb0b_29;
        }
    } else {
        v148 = *reinterpret_cast<void***>(esi31 + 28);
        fun_1802b2b0(ecx, v148, v32, v29, v27, v149, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, v164, v165, 32, v35, v24, v23, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
        eax147 = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(esi63 + 4) = reinterpret_cast<void**>(0);
        *reinterpret_cast<void***>(esi63) = reinterpret_cast<void**>(0);
        goto addr_0x1801fb0b_29;
    }
    fun_18022aa0(v35 + 4, ebx61);
    return;
    addr_0x1801fb0b_29:
    *reinterpret_cast<void***>(esi63 + 8) = eax147;
    goto addr_0x1801fb0e_14;
}

int16_t fun_1801fd20(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** eax8;
    int16_t ax9;

    eax8 = fun_1802b2bb(ecx, 28, __return_address(), a2, a3, a4, a5, a6, a7);
    if (!eax8) {
        return 0;
    } else {
        ax9 = fun_1801fd50(eax8, a2);
        return ax9;
    }
}

struct s705 {
    signed char[16] pad16;
    int16_t f16;
    int16_t f18;
};

struct s706 {
    void* f0;
    signed char[20] pad24;
    int32_t f24;
};

int16_t fun_1801fdf0(struct s705* ecx, struct s706* a2) {
    int32_t eax3;
    void* edx4;
    int32_t eax5;
    int32_t v6;
    int32_t v7;
    struct s705* v8;

    eax3 = a2->f24;
    if (eax3) {
        edx4 = a2->f0;
        eax5 = reinterpret_cast<int32_t>(ecx + 1);
        v6 = eax5;
        *reinterpret_cast<int16_t*>(&eax5) = ecx->f18;
        *reinterpret_cast<int16_t*>(&ecx) = ecx->f16;
        v7 = eax5;
        v8 = ecx;
        *reinterpret_cast<int16_t*>(&eax3) = fun_1801fe20(edx4, *reinterpret_cast<int16_t*>(&v8), *reinterpret_cast<int16_t*>(&v7), v6, eax3);
    }
    return *reinterpret_cast<int16_t*>(&eax3);
}

void fun_180209e0(struct s298* ecx, int32_t a2, int32_t a3, int32_t a4) {
    ecx->f20 = a2;
    ecx->f24 = a3;
    ecx->f28 = a4;
    fun_18020a00(ecx);
    return;
}

struct s707 {
    signed char[4] pad4;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

struct s708 {
    int32_t f0;
    void** f4;
};

struct s709 {
    void** f0;
    signed char[3] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

void fun_18021090(struct s707* ecx, int32_t a2, int32_t a3, struct s708* a4, int32_t* a5) {
    int32_t ebx6;
    int32_t esi7;
    int32_t eax8;
    int32_t edx9;
    int32_t eax10;
    void** ecx11;
    void** edx12;
    void** esi13;
    void** edi14;
    struct s709* ebx15;

    ebx6 = ecx->f4;
    esi7 = ecx->f12;
    eax8 = esi7 - ebx6 >> 1;
    if (a2 > eax8) {
        edx9 = a2 - eax8;
        eax10 = ecx->f8 - (edx9 + edx9);
        if (a3 > edx9) {
        }
        *a5 = a3;
    } else {
        eax10 = esi7 - (a2 + a2);
        *a5 = a3;
    }
    ecx11 = g18043440;
    edx12 = g18043444;
    esi13 = g18043448;
    edi14 = g1804344c;
    a4->f0 = eax10;
    ebx15 = reinterpret_cast<struct s709*>(&a4->f4);
    ebx15->f0 = ecx11;
    ebx15->f4 = edx12;
    ebx15->f8 = esi13;
    ebx15->f12 = edi14;
    return;
}

struct s710 {
    signed char[4] pad4;
    void** f4;
    signed char[3] pad8;
    void** f8;
    signed char[3] pad12;
    void** f12;
};

void** fun_18021280(struct s710* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21) {
    void*** esp22;
    void** eax23;
    void** edx24;
    void** edi25;
    void** ecx26;
    void** eax27;
    void** edx28;
    void** ecx29;
    void** edi30;
    void** esi31;
    void** ebp32;
    void** ebx33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** ecx44;
    void** ecx45;
    void** eax46;
    void** edx47;
    void** eax48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** v56;
    void** v57;
    void** v58;
    void* esp59;
    void** eax60;
    void** edx61;
    void** ecx62;
    void** eax63;
    void** edx64;
    void** eax65;
    void** edx66;
    void** v67;
    void** v68;
    void** ecx69;
    void* ebp70;
    void** ecx71;
    void** edx72;
    void** ebx73;
    void** edx74;
    void** eax75;
    void** v76;
    void** v77;
    void** v78;
    void** eax79;
    void** eax80;
    void** eax81;
    void** edx82;
    void** ecx83;
    void** eax84;
    void** v85;
    void*** esp86;
    void** v87;
    void** v88;
    void** v89;
    void** eax90;
    void** v91;
    void* esp92;
    struct s160** esp93;
    void* esp94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** ax100;
    void** ecx101;
    void** eax102;
    void** edx103;
    void** eax104;
    void** v105;
    void** v106;
    void** v107;
    void** v108;
    void** v109;
    void** v110;
    void** v111;
    void** v112;
    void** v113;
    void** v114;
    void** eax115;

    esp22 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 60 - 4 - 4 - 4 - 4);
    eax23 = ecx->f8;
    edx24 = ecx->f12;
    edi25 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax23) - reinterpret_cast<unsigned char>(edx24)) >> 1);
    if (edi25) {
        if (reinterpret_cast<signed char>(a3) >= reinterpret_cast<signed char>(edi25)) {
            if (reinterpret_cast<signed char>(a3) <= reinterpret_cast<signed char>(edi25)) {
                ecx26 = g18043440;
                eax27 = g18043448;
                edx28 = g18043444;
                ecx29 = g1804344c;
                fun_1801a210(a2, esp22 + 36, a3, edi30, esi31, ebp32, ebx33, v34, v35, v36, v37, v38, edx24, ecx26, edx28, eax27, ecx29, v39, v40, v41, v42, v43, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
                eax23 = ecx->f4;
                ecx->f12 = eax23;
            } else {
                ecx44 = ecx->f4;
                if (reinterpret_cast<signed char>(a3) < reinterpret_cast<signed char>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax23) - reinterpret_cast<unsigned char>(ecx44)) >> 1)) {
                    ecx45 = g18043444;
                    eax46 = g18043440;
                    edx47 = g18043448;
                    eax48 = g1804344c;
                    fun_1801a210(a2, esp22 + 36, edi25, edi30, esi31, ebp32, ebx33, v49, v50, v51, v52, v53, edx24, eax46, ecx45, edx47, eax48, v54, v55, v56, v57, v58, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
                    esp59 = reinterpret_cast<void*>(esp22 - 4 - 4 - 4 + 8 + 4);
                    eax60 = g18043440;
                    edx61 = ecx->f4;
                    ecx62 = g18043444;
                    eax63 = g1804344c;
                    edx64 = g18043448;
                    eax65 = a2 + 4;
                    edx66 = *reinterpret_cast<void***>(a2);
                    v67 = *reinterpret_cast<void***>(eax65);
                    v68 = *reinterpret_cast<void***>(eax65 + 4);
                    ecx69 = *reinterpret_cast<void***>(eax65 + 12);
                    if (reinterpret_cast<signed char>(ecx69) < reinterpret_cast<signed char>(0)) {
                        ebp70 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(*reinterpret_cast<void***>(eax65 + 8)) * reinterpret_cast<unsigned char>(edi25));
                    } else {
                        ebp70 = reinterpret_cast<void*>(reinterpret_cast<unsigned char>(edi25) << *reinterpret_cast<unsigned char*>(&ecx69));
                    }
                    ecx71 = *reinterpret_cast<void***>(eax65 + 4);
                    edx72 = *reinterpret_cast<void***>(eax65);
                    ebx73 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(a3) - reinterpret_cast<unsigned char>(edi25));
                    edx74 = *reinterpret_cast<void***>(eax65 + 8);
                    eax75 = *reinterpret_cast<void***>(eax65 + 12);
                    fun_1801a210(reinterpret_cast<int32_t>(esp59) - 4 - 4 + 24, reinterpret_cast<int32_t>(esp59) + 36, ebx73, edi30, esi31, ebp32, ebx33, reinterpret_cast<unsigned char>(edx66) + reinterpret_cast<uint32_t>(ebp70), edx72, ecx71, edx74, eax75, edx61, eax60, ecx62, edx64, eax63, v76, v67, v68, v77, v78, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
                    eax79 = ecx->f4 + reinterpret_cast<unsigned char>(ebx73) * 2;
                    ecx->f12 = eax79;
                    return eax79;
                } else {
                    ecx->f12 = ecx44;
                    eax80 = g18043440;
                    eax81 = g1804344c;
                    edx82 = g18043448;
                    ecx83 = g18043444;
                    eax84 = a2 + 4;
                    v85 = *reinterpret_cast<void***>(a2);
                    esp86 = esp22 - 4;
                    v87 = *reinterpret_cast<void***>(eax84);
                    v88 = *reinterpret_cast<void***>(eax84 + 4);
                    v89 = *reinterpret_cast<void***>(eax84 + 8);
                    eax90 = *reinterpret_cast<void***>(eax84 + 12);
                    v91 = eax90;
                    *reinterpret_cast<int16_t*>(&eax90) = fun_180196f0(esp86 + 20, reinterpret_cast<unsigned char>(a3) - reinterpret_cast<unsigned char>(reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax23) - reinterpret_cast<unsigned char>(ecx44)) >> 1), edi30);
                    esp92 = reinterpret_cast<void*>(esp86 - 4 + 4 + 4);
                    esp93 = reinterpret_cast<struct s160**>(reinterpret_cast<int32_t>(esp92) - 4);
                    fun_180196c0(esp93 + 15, reinterpret_cast<int32_t>(esp92) + 16);
                    esp94 = reinterpret_cast<void*>(esp93 - 1 + 1 + 1);
                    ax100 = fun_1801a210(reinterpret_cast<int32_t>(esp94) - 4 - 4 + 64, reinterpret_cast<int32_t>(esp94) + 36, reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax23) - reinterpret_cast<unsigned char>(ecx44)) >> 1, edi30, esi31, ebp32, ebx33, reinterpret_cast<unsigned char>(v85) + reinterpret_cast<unsigned char>(eax90), v87, v88, v89, v91, ecx44, eax80, ecx83, edx82, eax81, v95, v96, v97, v98, v99, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
                    return ax100;
                }
            }
        } else {
            ecx101 = g18043444;
            eax102 = g18043440;
            edx103 = g18043448;
            eax104 = g1804344c;
            fun_1801a210(a2, esp22 + 16, a3, edi30, esi31, ebp32, ebx33, edx24, eax102, ecx101, edx103, eax104, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
            eax115 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx->f12) + (reinterpret_cast<unsigned char>(a3) + reinterpret_cast<unsigned char>(a3)));
            ecx->f12 = eax115;
            return eax115;
        }
    }
    return eax23;
}

struct s711 {
    signed char[4] pad4;
    int32_t f4;
    int32_t f8;
    int32_t f12;
};

void fun_180214c0(struct s711* ecx, int32_t a2) {
    int32_t eax3;
    int32_t eax4;

    eax3 = ecx->f8;
    eax4 = eax3 - ecx->f12 >> 1;
    if (a2 >= eax4) {
        ecx->f12 = ecx->f4 + (a2 - eax4) * 2;
        return;
    } else {
        ecx->f12 = ecx->f12 + a2 * 2;
        return;
    }
}

int32_t fun_180216a0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7) {
    void** eax8;

    eax8 = fun_1802b2bb(ecx, 16, __return_address(), a2, a3, a4, a5, a6, a7);
    if (!eax8) {
        return 0;
    } else {
        goto 0x18020ca0;
    }
}

struct s712 {
    signed char[4] pad4;
    int32_t f4;
};

int16_t fun_1802a940(struct s712* a1) {
    int32_t ecx2;
    int32_t eax3;

    ecx2 = a1->f4 + 1;
    a1->f4 = ecx2;
    eax3 = ecx2;
    return *reinterpret_cast<int16_t*>(&eax3);
}

int16_t fun_18027bd0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_180275f0(ecx);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

int16_t fun_18022cb0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18022cd0(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

void fun_18023520(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41) {
    void** v42;
    void** esi43;
    void** eax44;
    int32_t edi45;
    void** v46;
    void** v47;
    void** edi48;

    v42 = esi43;
    eax44 = *reinterpret_cast<void***>(ecx + 44);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180350f8);
    UnmapViewOfFile();
    edi45 = CloseHandle;
    v46 = *reinterpret_cast<void***>(ecx + 40);
    edi45();
    if (*reinterpret_cast<void***>(ecx + 36)) {
        v47 = *reinterpret_cast<void***>(ecx + 36);
        edi45(v47);
    }
    fun_18022e40(ecx, v46, eax44, edi48, v42, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39);
    if (*reinterpret_cast<unsigned char*>(&v42) & 1) {
        fun_1802b2b0(ecx, ecx, v46, eax44, edi48, v42, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41);
    }
    goto edi48;
}

int16_t fun_18024240(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6) {
    void** esi7;
    void** eax8;
    void** v9;

    eax8 = fun_1802b2bb(ecx, 0x20c, esi7, __return_address(), a2, a3, a4, a5, a6);
    if (!eax8) {
        *reinterpret_cast<void***>(a2) = reinterpret_cast<void**>(0);
        return 0;
    } else {
        v9 = *reinterpret_cast<void***>(ecx + 32);
        *reinterpret_cast<int16_t*>(&eax8) = fun_18024280(eax8, v9);
        *reinterpret_cast<void***>(a2) = eax8;
        return 0;
    }
}

int16_t fun_180245f0() {
    return 0x4001;
}

struct s715 {
    signed char[28] pad28;
    int32_t f28;
    int32_t f32;
    int32_t f36;
};

struct s714 {
    signed char[440] pad440;
    struct s715** f440;
    signed char[72] pad516;
    int32_t f516;
};

struct s713 {
    signed char[8] pad8;
    struct s714* f8;
};

int16_t fun_180246e0(struct s713* a1, int32_t a2) {
    struct s715** eax3;
    struct s715* ecx4;
    int32_t esi5;
    struct s714* edx6;
    struct s715** eax7;
    struct s715* ecx8;
    struct s715** eax9;
    struct s715* ecx10;

    if (a2 != 3) {
        return 0;
    } else {
        a1->f8->f516 = a1->f8->f516 + 1;
        eax3 = a1->f8->f440;
        ecx4 = *eax3;
        ecx4->f32(eax3, esi5);
        edx6 = a1->f8;
        eax7 = edx6->f440;
        ecx8 = *eax7;
        ecx8->f36();
        eax9 = a1->f8->f440;
        ecx10 = *eax9;
        ecx10->f28();
        goto eax7;
    }
}

void fun_18024e80(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39) {
    void** v40;
    void** v41;
    void** ebx42;
    void** v43;
    void** ebp44;
    void** ebp45;
    void** ebx46;
    void** ecx47;
    void** v48;
    void** esi49;
    void** eax50;
    void*** esp51;
    void** v52;
    void** edi53;
    void** edx54;
    void** v55;
    void** eax56;
    void** edx57;
    void** edi58;
    void** esi59;
    void*** esp60;
    void** v61;
    void** v62;
    int32_t eax63;
    int32_t eax64;
    void** v65;
    void** eax66;
    void* esp67;
    void** esi68;
    void** v69;
    void** ecx70;
    void** eax71;
    void** eax72;
    void** edx73;
    int32_t eax74;
    void** v75;
    void** eax76;
    void* esp77;
    void** esi78;
    void** v79;
    void** ecx80;
    void** eax81;
    void** ecx82;
    unsigned char al83;
    void*** v84;
    void** v85;
    void** eax86;
    void** esi87;
    void** v88;
    void** eax89;
    void** edx90;
    void** edx91;
    void** eax92;
    void** v93;
    void** ecx94;
    void*** eax95;
    void** ebp96;
    void** ebx97;
    void** v98;
    void** eax99;
    void** esi100;
    void** ecx101;
    void** v102;
    void** ecx103;
    void** edx104;
    void** eax105;
    void** ecx106;
    void** eax107;
    void** ebp108;
    void** v109;
    void** eax110;
    void** ebx111;
    void** v112;
    void** ecx113;
    void** edx114;
    void** eax115;
    void** v116;
    void** eax117;
    void** eax118;

    v40 = reinterpret_cast<void**>(__return_address());
    v41 = ebx42;
    v43 = ebp44;
    ebp45 = a2;
    ebx46 = ecx;
    ecx47 = ebp45;
    v48 = esi49;
    eax50 = ebx46 + 20;
    esp51 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 8 - 4 - 4 - 4 - 4);
    v52 = edi53;
    edx54 = *reinterpret_cast<void***>(ecx47);
    v55 = ebx46;
    *reinterpret_cast<void***>(eax50) = edx54;
    *reinterpret_cast<void***>(eax50 + 4) = *reinterpret_cast<void***>(ecx47 + 4);
    *reinterpret_cast<void***>(eax50 + 8) = *reinterpret_cast<void***>(ecx47 + 8);
    *reinterpret_cast<void***>(eax50 + 12) = *reinterpret_cast<void***>(ecx47 + 12);
    ecx47 = *reinterpret_cast<void***>(ecx47 + 16);
    *reinterpret_cast<void***>(eax50 + 16) = ecx47;
    eax56 = *reinterpret_cast<void***>(ebx46 + 12);
    if (eax56) {
        edx57 = *reinterpret_cast<void***>(eax56);
        *reinterpret_cast<void***>(edx57 + 12)(eax56, ebp45);
        esp51 = esp51 - 4 - 4 - 4 + 4;
    }
    edi58 = ebx46 + 0xc0;
    if (*reinterpret_cast<void***>(ebx46 + 0xc0)) {
        do {
            ecx47 = edi58;
            esi59 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx46 + 0xc4) + 8);
            esp60 = esp51 - 4;
            v61 = *reinterpret_cast<void***>(edi58 + 4);
            fun_180091b0(ecx47, esp60 + 20, v61);
            esp51 = esp60 - 4 - 4 + 8 + 4;
            if (esi59) {
                ecx47 = esi59;
                fun_180264a0(ecx47);
                fun_1802b2b0(ecx47, esi59, v52, v48, v43, v41, v62, v55, v40, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39);
                esp51 = esp51 - 4 + 4 - 4 - 4 + 4 + 4;
            }
        } while (*reinterpret_cast<void***>(edi58));
    }
    eax63 = 0;
    *reinterpret_cast<void***>(&eax63) = *reinterpret_cast<void***>(ebp45 + 2);
    eax64 = eax63 - 1;
    if (!eax64) {
        eax66 = fun_1802b2bb(ecx47, 72, v52, v48, v43, v41, v65, v55, v40);
        esp67 = reinterpret_cast<void*>(esp51 - 4 - 4 + 4 + 4);
        if (!eax66) {
            esi68 = reinterpret_cast<void**>(0);
        } else {
            v69 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx46 + 0xb0) + 8);
            *reinterpret_cast<int16_t*>(&eax66) = fun_18026460(eax66, v69);
            esp67 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp67) - 4 - 4 + 4 + 4);
            esi68 = eax66;
        }
        ecx70 = *reinterpret_cast<void***>(ebp45 + 4);
        eax71 = reinterpret_cast<void**>(0);
        eax71 = *reinterpret_cast<void***>(ebp45 + 14);
        fun_180264b0(esi68, 0, ecx70, eax71);
        eax72 = edi58 + 4;
        edx73 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp67) - 4 - 4 - 4 - 4 + 12 + 4 + 28);
    } else {
        eax74 = eax64 - 1;
        if (!eax74) {
            eax76 = fun_1802b2bb(ecx47, 72, v52, v48, v43, v41, v75, v55, v40);
            esp77 = reinterpret_cast<void*>(esp51 - 4 - 4 + 4 + 4);
            if (!eax76) {
                esi78 = reinterpret_cast<void**>(0);
            } else {
                v79 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx46 + 0xb0) + 8);
                *reinterpret_cast<int16_t*>(&eax76) = fun_18026460(eax76, v79);
                esp77 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp77) - 4 - 4 + 4 + 4);
                esi78 = eax76;
            }
            ecx80 = *reinterpret_cast<void***>(ebp45 + 4);
            eax81 = reinterpret_cast<void**>(0);
            eax81 = *reinterpret_cast<void***>(ebp45 + 14);
            fun_180264b0(esi78, 3, ecx80, eax81);
            eax72 = edi58 + 4;
            edx73 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp77) - 4 - 4 - 4 - 4 + 12 + 4 + 28);
        } else {
            if (!(eax74 - reinterpret_cast<unsigned char>(2))) {
                ecx82 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx46 + 0xb0) + 8);
                al83 = fun_18026380(ecx82);
                if (!al83) {
                    if (!reinterpret_cast<int1_t>(*reinterpret_cast<void***>(ebx46 + 0xac) == 2)) {
                        v84 = reinterpret_cast<void***>(0x18043d00);
                        do {
                            eax86 = fun_1802b2bb(ecx82, 72, v52, v48, v43, v41, v85, v55, v40);
                            if (!eax86) {
                                esi87 = reinterpret_cast<void**>(0);
                            } else {
                                v88 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx46 + 0xb0) + 8);
                                *reinterpret_cast<int16_t*>(&eax86) = fun_18026460(eax86, v88);
                                esi87 = eax86;
                            }
                            eax89 = *reinterpret_cast<void***>(ebp45 + 4);
                            edx90 = reinterpret_cast<void**>(0);
                            edx90 = *reinterpret_cast<void***>(ebp45 + 14);
                            edx91 = *v84;
                            ecx82 = esi87;
                            fun_180264b0(ecx82, edx91, eax89, edx90);
                            eax92 = *reinterpret_cast<void***>(edi58 + 16);
                            if (!eax92) {
                                eax92 = fun_1802b2bb(ecx82, 12, v52, v48, v43, v41, v93, v55, v40);
                            } else {
                                ecx82 = *reinterpret_cast<void***>(eax92);
                                *reinterpret_cast<void***>(edi58 + 16) = ecx82;
                            }
                            if (eax92) {
                                ecx94 = eax92 + 8;
                                if (ecx94) {
                                    *reinterpret_cast<void***>(ecx94) = esi87;
                                }
                                ecx82 = edi58 + 4;
                                *reinterpret_cast<void***>(eax92) = ecx82;
                                *reinterpret_cast<void***>(eax92 + 4) = *reinterpret_cast<void***>(ecx82 + 4);
                                *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx82 + 4)) = eax92;
                                *reinterpret_cast<void***>(ecx82 + 4) = eax92;
                                *reinterpret_cast<void***>(edi58) = *reinterpret_cast<void***>(edi58) + 1;
                            }
                            eax95 = v84 + 4;
                            v84 = eax95;
                        } while (reinterpret_cast<int32_t>(eax95) < 0x18043d10);
                        goto addr_0x180251a4_33;
                    } else {
                        ebp96 = *reinterpret_cast<void***>(ebx46 + 0xb0);
                        ebx97 = edi58 + 4;
                        v98 = reinterpret_cast<void**>(2);
                        do {
                            eax99 = fun_1802b2bb(ecx82, 72, v52, v48, v43, v41, v98, v55, v40);
                            if (!eax99) {
                                esi100 = reinterpret_cast<void**>(0);
                            } else {
                                ecx101 = ebp96;
                                ebp96 = *reinterpret_cast<void***>(ebp96);
                                v102 = *reinterpret_cast<void***>(ecx101 + 8);
                                *reinterpret_cast<int16_t*>(&eax99) = fun_18026460(eax99, v102);
                                esi100 = eax99;
                            }
                            ecx103 = reinterpret_cast<void**>(0);
                            ecx103 = *reinterpret_cast<void***>(a2 + 14);
                            edx104 = *reinterpret_cast<void***>(a2 + 4);
                            ecx82 = esi100;
                            fun_180264b0(ecx82, 3, edx104, ecx103);
                            eax105 = *reinterpret_cast<void***>(edi58 + 16);
                            if (!eax105) {
                                eax105 = fun_1802b2bb(ecx82, 12, v52, v48, v43, v41, v98, v55, v40);
                            } else {
                                ecx82 = *reinterpret_cast<void***>(eax105);
                                *reinterpret_cast<void***>(edi58 + 16) = ecx82;
                            }
                            if (eax105) {
                                ecx106 = eax105 + 8;
                                if (ecx106) {
                                    *reinterpret_cast<void***>(ecx106) = esi100;
                                }
                                *reinterpret_cast<void***>(eax105) = ebx97;
                                *reinterpret_cast<void***>(eax105 + 4) = *reinterpret_cast<void***>(ebx97 + 4);
                                ecx82 = *reinterpret_cast<void***>(ebx97 + 4);
                                *reinterpret_cast<void***>(ecx82) = eax105;
                                *reinterpret_cast<void***>(ebx97 + 4) = eax105;
                                *reinterpret_cast<void***>(edi58) = *reinterpret_cast<void***>(edi58) + 1;
                            }
                            eax107 = v98 - 1;
                            v98 = eax107;
                        } while (eax107);
                        ebx46 = v55;
                        goto addr_0x180251a4_33;
                    }
                } else {
                    ebp108 = edi58 + 4;
                    v109 = reinterpret_cast<void**>(0x18043cf8);
                    do {
                        eax110 = fun_1802b2bb(ecx82, 72, v52, v48, v43, v41, v109, v55, v40);
                        if (!eax110) {
                            ebx111 = reinterpret_cast<void**>(0);
                        } else {
                            v112 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ebx46 + 0xb0) + 8);
                            *reinterpret_cast<int16_t*>(&eax110) = fun_18026460(eax110, v112);
                            ebx111 = eax110;
                        }
                        ecx113 = reinterpret_cast<void**>(0);
                        ecx113 = *reinterpret_cast<void***>(a2 + 14);
                        edx114 = *reinterpret_cast<void***>(a2 + 4);
                        eax115 = v109;
                        v116 = *reinterpret_cast<void***>(eax115);
                        fun_180264b0(ebx111, v116, edx114, ecx113);
                        ecx82 = edi58 + 16;
                        *reinterpret_cast<int16_t*>(&eax115) = fun_18027200(ecx82, 12, v52, v48, v43, v41, v109);
                        if (eax115) {
                            fun_18027220(edi58 + 16, eax115 + 8, ebx111);
                            *reinterpret_cast<void***>(eax115) = ebp108;
                            *reinterpret_cast<void***>(eax115 + 4) = *reinterpret_cast<void***>(ebp108 + 4);
                            ecx82 = *reinterpret_cast<void***>(ebp108 + 4);
                            *reinterpret_cast<void***>(ecx82) = eax115;
                            *reinterpret_cast<void***>(ebp108 + 4) = eax115;
                            *reinterpret_cast<void***>(edi58) = *reinterpret_cast<void***>(edi58) + 1;
                        }
                        ebx46 = v55;
                        eax117 = v109 + 4;
                        v109 = eax117;
                    } while (reinterpret_cast<signed char>(eax117) < reinterpret_cast<signed char>(0x18043d00));
                    goto addr_0x180251a4_33;
                }
            }
        }
    }
    fun_180271b0(edi58, eax72, edx73, v52, v48, v43);
    addr_0x180251a4_33:
    eax118 = *reinterpret_cast<void***>(ebx46);
    *reinterpret_cast<void***>(eax118 + 24)(ebx46);
    goto v41;
}

int16_t fun_18024900(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18024920(ecx);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s718 {
    signed char[4] pad4;
    int32_t f4;
};

struct s717 {
    signed char[8] pad8;
    struct s718* f8;
};

struct s716 {
    signed char[196] pad196;
    struct s717* f196;
};

int32_t fun_18024ac0(struct s716* ecx) {
    return ecx->f196->f8->f4;
}

int32_t QueryPerformanceCounter = 0x36108;

void fun_180273d0() {
    int32_t v1;

    QueryPerformanceCounter();
    goto v1;
}

void fun_18027e40(void** ecx) {
    void** eax2;

    fun_180279c0(ecx);
    eax2 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(ecx + 0x1b8));
    *reinterpret_cast<void***>(eax2 + 28)();
    return;
}

struct s719 {
    signed char[12] pad12;
    void** f12;
    signed char[435] pad448;
    void** f448;
    signed char[7] pad456;
    void** f456;
    signed char[3] pad460;
    void** f460;
    signed char[3] pad464;
    int32_t f464;
    int32_t f468;
    int32_t f472;
    signed char f476;
};

void fun_18028110(struct s719* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17) {
    void** eax18;
    void** ecx19;
    void** esi20;
    int32_t ecx21;
    void** edx22;

    eax18 = a2;
    ecx19 = ecx->f12;
    ecx->f448 = eax18;
    *reinterpret_cast<int16_t*>(&eax18) = fun_1800da70(ecx19, 0x10000, eax18, ecx19, esi20, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
    ecx21 = ecx->f468;
    ecx->f460 = eax18;
    if (ecx21 <= 0 || ecx->f476) {
        ecx->f456 = eax18;
        ecx->f464 = 0;
        ecx->f472 = 0;
        return;
    } else {
        edx22 = ecx->f456;
        ecx->f472 = ecx21;
        __asm__("cdq ");
        ecx->f464 = reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax18) - reinterpret_cast<unsigned char>(edx22)) / ecx21;
        return;
    }
}

struct s721 {
    signed char[40] pad40;
    int32_t f40;
};

struct s720 {
    signed char[444] pad444;
    struct s721** f444;
};

void fun_18028910(struct s720* ecx, int32_t a2) {
    struct s721** ecx3;
    struct s721* eax4;

    ecx3 = ecx->f444;
    eax4 = *ecx3;
    eax4->f40();
    goto a2;
}

void fun_180289c0(void** ecx) {
    void** v2;
    void** esi3;
    void*** esp4;
    void** v5;
    void** edi6;
    void** edi7;
    int32_t ecx8;
    void** ecx9;
    unsigned char al10;
    void** ecx11;
    void*** esp12;
    void** v13;
    void** eax14;
    void** v15;
    int32_t v16;
    void** al17;
    void** v18;
    void** ebx19;
    void*** esp20;
    void** v21;
    void** ebp22;
    void** ecx23;
    void*** esp24;
    void** v25;
    void** edx26;
    int32_t ecx27;
    void** ecx28;
    void*** esp29;
    void** v30;
    void** eax31;
    void** v32;
    void** ecx33;
    void*** esp34;
    void** v35;
    void** edx36;
    void*** esp37;
    void** v38;
    void** v39;
    void** eax40;
    void** ebp41;
    void** ebx42;
    void*** esp43;
    void*** esp44;
    void** v45;
    void** v46;
    void** eax47;
    void* esp48;
    void** v49;
    void** ebp50;
    void** esi51;
    void*** ebx52;
    void** eax53;
    void** v54;
    void** v55;
    void** v56;
    void** edx57;
    void*** esp58;
    void** eax59;
    void** v60;
    void** v61;
    void** v62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    void** v72;
    void** v73;
    void** v74;
    void** v75;
    void** v76;
    void** v77;
    void** v78;
    void** v79;
    void** v80;
    void** v81;
    void** v82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void*** esp89;
    void** eax90;
    void** edx91;
    int32_t v92;
    void* esi93;
    void*** esp94;
    void** v95;
    void** v96;
    void** v97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** v103;
    void** v104;
    void** v105;
    void** v106;
    void** v107;
    void** v108;
    void** v109;
    void** v110;
    void** v111;
    void** v112;
    void** v113;
    void** v114;
    void** v115;
    void** v116;
    void** v117;
    void** v118;
    void** v119;
    void** v120;

    v2 = esi3;
    esp4 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0x10c - 4 - 4);
    v5 = edi6;
    edi7 = ecx;
    ecx8 = 6;
    do {
        --ecx8;
    } while (ecx8);
    if (!*reinterpret_cast<void***>(edi7 + 0x1c0) && ((ecx9 = *reinterpret_cast<void***>(edi7 + 0x1bc), al10 = fun_18028200(ecx9), esp4 = esp4 - 4 + 4, !!al10) && (ecx11 = *reinterpret_cast<void***>(edi7 + 0x1bc), esp12 = esp4 - 4, v13 = reinterpret_cast<void**>(esp4 + 8), *reinterpret_cast<void***>(edi7 + 0x1c0) = reinterpret_cast<void**>(1), eax14 = *reinterpret_cast<void***>(ecx11), *reinterpret_cast<void***>(eax14 + 56)(), esp4 = esp12 - 4 - 4 + 4, !!v5))) {
        v15 = *reinterpret_cast<void***>(edi7 + 44);
        fun_18027820(edi7, esp4 - 4 + 40, v15, v5, esp12 + 40, v13, v5, v2);
        goto v16;
    }
    al17 = *reinterpret_cast<void***>(edi7 + 0x1c0);
    v18 = ebx19;
    esp20 = esp4 - 4 - 4;
    v21 = ebp22;
    if (!al17) {
        if (!*reinterpret_cast<signed char*>(edi7 + 0x1c2)) {
            addr_0x18028bdb_7:
            ecx23 = *reinterpret_cast<void***>(edi7 + 0x1bc);
            esp24 = esp20 - 4;
            v25 = *reinterpret_cast<void***>(edi7 + 0x19c);
            edx26 = *reinterpret_cast<void***>(ecx23);
        } else {
            ecx27 = 6;
            do {
                --ecx27;
            } while (ecx27);
            ecx28 = *reinterpret_cast<void***>(edi7 + 0x1bc);
            esp29 = esp20 - 4;
            v30 = reinterpret_cast<void**>(esp20 + 16);
            eax31 = *reinterpret_cast<void***>(ecx28);
            v32 = reinterpret_cast<void**>(esp29 + 0xa8);
            *reinterpret_cast<void***>(eax31 + 56)(v32, v30);
            esp20 = esp29 - 4 - 4 + 4;
            if (!v5) 
                goto addr_0x18028bd4_11;
            ecx33 = *reinterpret_cast<void***>(edi7 + 0x1b8);
            esp34 = esp20 - 4;
            v35 = v5;
            edx36 = *reinterpret_cast<void***>(ecx33);
            esp37 = esp34 - 4;
            v38 = reinterpret_cast<void**>(esp34 + 24);
            v39 = reinterpret_cast<void**>(esp37 + 52);
            eax40 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx36 + 16)(v39, v38, v35, v32, v30));
            esp20 = esp37 - 4 - 4 + 4;
            ebp41 = eax40;
            ebx42 = reinterpret_cast<void**>(0);
            if (reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(v21) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(v21 == 0)) 
                goto addr_0x18028bd4_11; else 
                goto addr_0x18028bb4_13;
        }
    } else {
        edx26 = *reinterpret_cast<void***>(*reinterpret_cast<void***>(edi7 + 0x1b8));
        if (!*reinterpret_cast<signed char*>(edi7 + 0x1c1)) {
            esp24 = esp20 - 4;
            v25 = reinterpret_cast<void**>(0);
        } else {
            esp43 = esp20 - 4;
            v25 = *reinterpret_cast<void***>(edi7 + 0x19c);
            esp44 = esp43 - 4;
            v45 = reinterpret_cast<void**>(esp43 + 24);
            v46 = reinterpret_cast<void**>(esp44 + 52);
            eax47 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx26 + 16)());
            esp48 = reinterpret_cast<void*>(esp44 - 4 - 4 + 4);
            v49 = eax47;
            ebp50 = reinterpret_cast<void**>(0);
            if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(v5) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(v5 == 0))) {
                esi51 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp48) + 44);
                ebx52 = reinterpret_cast<void***>(edi7 + 0x1a0);
                do {
                    eax53 = edi7 + 28;
                    v54 = *ebx52;
                    v55 = *reinterpret_cast<void***>(eax53);
                    v56 = *reinterpret_cast<void***>(eax53 + 4);
                    edx57 = *reinterpret_cast<void***>(eax53 + 8);
                    esp58 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp48) - 4);
                    eax59 = *reinterpret_cast<void***>(eax53 + 12);
                    fun_1801a210(esi51, esp58 + 28, v49, v46, v45, v25, v21, v49, v5, v54, v55, v56, edx57, eax59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88);
                    esp48 = reinterpret_cast<void*>(esp58 - 4 - 4 + 8 + 4);
                    ++ebp50;
                    ebx52 = ebx52 + 4;
                    esi51 = esi51 + 20;
                } while (reinterpret_cast<signed char>(ebp50) < reinterpret_cast<signed char>(v5));
                goto addr_0x18028bfb_20;
            }
        }
    }
    esp89 = esp24 - 4;
    v45 = reinterpret_cast<void**>(esp24 + 24);
    v46 = reinterpret_cast<void**>(esp89 + 52);
    eax90 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx26 + 16)());
    esp48 = reinterpret_cast<void*>(esp89 - 4 - 4 + 4);
    v49 = eax90;
    addr_0x18028bfb_20:
    edx91 = *reinterpret_cast<void***>(edi7 + 44);
    fun_18027820(edi7, reinterpret_cast<int32_t>(esp48) - 4 + 48, edx91, v49, v46, v45, v25, v21);
    goto v92;
    addr_0x18028bd4_11:
    *reinterpret_cast<signed char*>(edi7 + 0x1c2) = 0;
    goto addr_0x18028bdb_7;
    addr_0x18028bb4_13:
    esi93 = reinterpret_cast<void*>(0);
    do {
        esp94 = esp20 - 4 - 4;
        fun_1801a210(reinterpret_cast<int32_t>(esp94) + reinterpret_cast<int32_t>(esi93) + 52, reinterpret_cast<int32_t>(esp20) + reinterpret_cast<int32_t>(esi93) + 0xa4, ebp41, v39, v38, v35, v32, v30, v21, v18, v5, v2, v95, v96, v97, v98, v99, v100, v101, 0, v102, v103, v104, v105, 0, v106, v107, v108, v109, 0, v110, v111, v112, v113, 0, v114, v115, v116, v117, 0, v118, v119, v120);
        esp20 = esp94 - 4 + 8 + 4;
        ++ebx42;
        esi93 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esi93) + 20);
    } while (reinterpret_cast<signed char>(ebx42) < reinterpret_cast<signed char>(v21));
    goto addr_0x18028bd4_11;
}

struct s722 {
    signed char[476] pad476;
    signed char f476;
};

void fun_180280a0(struct s722* ecx) {
    ecx->f476 = 1;
    return;
}

void fun_18028280(struct s195* ecx) {
    uint32_t v2;
    uint32_t esi3;
    struct s195* esi4;
    void** eax5;
    int32_t edi6;
    int32_t ecx7;
    void** ecx8;
    void** eax9;
    void** ebx10;
    struct s439* edi11;
    void** ecx12;
    void** edx13;
    void** eax14;
    void** eax15;
    void** ecx16;
    void** edx17;
    int32_t v18;

    v2 = esi3;
    esi4 = ecx;
    eax5 = *reinterpret_cast<void***>(esi4->f444);
    *reinterpret_cast<void***>(eax5 + 12)(edi6);
    ecx7 = 6;
    do {
        --ecx7;
    } while (ecx7);
    ecx8 = esi4->f444;
    eax9 = *reinterpret_cast<void***>(ecx8);
    *reinterpret_cast<void***>(eax9 + 16)();
    ebx10 = esi4->f412;
    if (esi4->f472 && reinterpret_cast<signed char>(esi4->f472) < reinterpret_cast<signed char>(ebx10)) {
        ebx10 = esi4->f472;
    }
    edi11 = reinterpret_cast<struct s439*>(reinterpret_cast<int32_t>(esi4->f44) - 1);
    if (reinterpret_cast<int32_t>(edi11) >= 0) {
        do {
            ecx12 = esi4->f440;
            edx13 = *reinterpret_cast<void***>(ecx12);
            eax14 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx13 + 96)());
            edi11 = reinterpret_cast<struct s439*>(reinterpret_cast<int32_t>(edi11) - 1);
            ebx10 = eax14;
        } while (reinterpret_cast<int32_t>(edi11) >= 0);
    }
    eax15 = esi4->f452;
    if (reinterpret_cast<int32_t>(v2) > reinterpret_cast<int32_t>(reinterpret_cast<unsigned char>(eax15) >> 16)) {
    }
    esi4->f452 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax15) - (v2 << 16));
    fun_180281c0(esi4, ebx10);
    ecx16 = esi4->f444;
    edx17 = *reinterpret_cast<void***>(ecx16);
    *reinterpret_cast<void***>(edx17 + 24)();
    fun_18027770(esi4, ebx10);
    goto v18;
}

struct s724 {
    signed char[12] pad12;
    int32_t f12;
};

struct s723 {
    signed char[408] pad408;
    struct s724** f408;
};

void fun_18028db0(struct s723* ecx) {
    void** ecx2;
    struct s724** ecx3;
    struct s724* edx4;

    ecx2 = g180458c8;
    ecx3 = ecx->f408;
    edx4 = *ecx3;
    edx4->f12();
    goto ecx2;
}

void fun_180295f0() {
    __asm__("fld dword [esp+0x4]");
    __asm__("fmul dword [0x18034774]");
    __asm__("fstp dword [ecx+0x1bc]");
    return;
}

struct s725 {
    signed char[444] pad444;
    int32_t f444;
};

void fun_18029b20(struct s725* ecx, int32_t a2) {
    ecx->f444 = a2;
    return;
}

void fun_1802b277() {
    return;
}

void fun_1802b8d6(void** ecx) {
    int32_t* esp2;
    int32_t ebp3;
    int32_t ebp4;

    esp2 = reinterpret_cast<int32_t*>(reinterpret_cast<int32_t>(*reinterpret_cast<void**>(ebp3 - 24)) - 4);
    *esp2 = *reinterpret_cast<int32_t*>(ebp4 - 28);
    *(esp2 - 1) = reinterpret_cast<int32_t>(fun_1802b8e1);
    fun_1802d42e(ecx);
}

struct s726 {
    signed char[24] pad24;
    struct s216* f24;
    int32_t f28;
};

void fun_1802e371(struct s726* a1) {
    int32_t v2;
    struct s216* v3;

    v2 = a1->f28;
    v3 = a1->f24;
    fun_1802e1fe(v3, v2);
    return;
}

void fun_1802eb3d() {
    int32_t ebp1;

    *reinterpret_cast<uint32_t*>(ebp1 - 4) = 0xffffffff;
}

void** fun_18031e40(void** a1, void** a2, void** a3) {
    void** v4;
    void** ebp5;
    void** v6;
    void** edi7;
    void** v8;
    void** esi9;
    void** v10;
    void** ebx11;
    void** ecx12;
    void** esi13;
    void** edi14;
    int1_t zf15;
    int1_t less_or_equal16;
    int32_t v17;
    void** eax18;
    void** ebx19;
    void** edi20;
    void** eax21;
    int1_t cf22;
    void** ecx23;
    void** ah24;
    void** al25;
    int1_t cf26;

    v4 = ebp5;
    v6 = edi7;
    v8 = esi9;
    v10 = ebx11;
    ecx12 = a3;
    if (!ecx12) 
        goto addr_0x18031f3a_2;
    esi13 = a1;
    edi14 = a2;
    zf15 = g18045b0c == 0;
    if (!zf15) {
        ++g18046f08;
        less_or_equal16 = reinterpret_cast<signed char>(g18046f04) <= reinterpret_cast<signed char>(0);
        if (!less_or_equal16) {
            --g18046f08;
            fun_1802e8ff(ecx12, 19, v10, v8, v6, v4, __return_address(), a1, a2);
            v17 = 1;
            ecx12 = ecx12;
        } else {
            v17 = 0;
        }
        eax18 = reinterpret_cast<void**>(0);
        ebx19 = reinterpret_cast<void**>(0);
        edi20 = edi14;
        do {
            eax18 = *reinterpret_cast<void***>(esi13);
            eax18 = eax18;
            ebx19 = *reinterpret_cast<void***>(edi20);
            if (!eax18) 
                break;
            ebx19 = ebx19;
            if (!ebx19) 
                break;
            ++esi13;
            ++edi20;
            eax21 = fun_1802f71a(ecx12, ebx19, eax18);
            ebx19 = eax21;
            eax18 = fun_1802f71a(ecx12, eax18, ecx12);
            cf22 = reinterpret_cast<unsigned char>(eax18) < reinterpret_cast<unsigned char>(ebx19);
            if (eax18 != ebx19) 
                goto addr_0x18031f15_11;
            --ecx12;
        } while (ecx12);
        ecx12 = reinterpret_cast<void**>(0);
        cf22 = reinterpret_cast<unsigned char>(eax18) < reinterpret_cast<unsigned char>(ebx19);
        if (eax18 == ebx19) {
            addr_0x18031f1e_14:
            if (v17) {
                fun_1802e960(ecx12, 19, v10, v8, v6, v4);
                ecx12 = ecx12;
                goto addr_0x18031f3a_2;
            } else {
                --g18046f08;
                goto addr_0x18031f3a_2;
            }
        } else {
            addr_0x18031f15_11:
            ecx12 = reinterpret_cast<void**>(0xffffffff);
            if (!cf22) {
                ecx12 = reinterpret_cast<void**>(-reinterpret_cast<unsigned char>(0xffffffff));
                goto addr_0x18031f1e_14;
            }
        }
    } else {
        ecx23 = ecx12;
        do {
            ah24 = *reinterpret_cast<void***>(esi13);
            al25 = *reinterpret_cast<void***>(edi14);
            if (!ah24) 
                break;
            al25 = al25;
            if (!al25) 
                break;
            ++esi13;
            ++edi14;
            if (reinterpret_cast<unsigned char>(ah24) >= 65 && reinterpret_cast<unsigned char>(ah24) <= 90) {
                ah24 = ah24 + 32;
            }
            if (reinterpret_cast<unsigned char>(al25) >= 65 && reinterpret_cast<unsigned char>(al25) <= 90) {
                al25 = al25 + 32;
            }
            cf26 = reinterpret_cast<unsigned char>(ah24) < reinterpret_cast<unsigned char>(al25);
            if (ah24 != al25) 
                goto addr_0x18031e9f_26;
            --ecx23;
        } while (ecx23);
        ecx12 = reinterpret_cast<void**>(0);
        cf26 = reinterpret_cast<unsigned char>(ah24) < reinterpret_cast<unsigned char>(al25);
        if (ah24 == al25) {
            addr_0x18031f3a_2:
            return ecx12;
        } else {
            addr_0x18031e9f_26:
            ecx12 = reinterpret_cast<void**>(0xffffffff);
            if (!cf26) {
                ecx12 = reinterpret_cast<void**>(-reinterpret_cast<unsigned char>(0xffffffff));
                goto addr_0x18031f3a_2;
            }
        }
    }
}

struct s727 {
    signed char[4] pad4;
    int32_t f4;
};

void fun_1800d990(struct s727* a1) {
    int32_t v2;

    v2 = a1->f4;
    WaitForSingleObject();
    goto v2;
}

struct s729 {
    signed char[12] pad12;
    int32_t f12;
};

struct s728 {
    signed char[24] pad24;
    struct s729** f24;
    signed char[80] pad108;
    struct s729*** f108;
};

void fun_18013dc0(struct s728* ecx, int32_t a2) {
    struct s728* edi3;
    struct s729*** esi4;
    struct s729** ecx5;
    struct s729* eax6;

    edi3 = ecx;
    esi4 = &edi3->f24;
    if (esi4 != edi3->f108) {
        do {
            ecx5 = *esi4;
            eax6 = *ecx5;
            eax6->f12();
            ++esi4;
        } while (esi4 != edi3->f108);
    }
    return;
}

struct s731 {
    signed char[24] pad24;
    int32_t f24;
};

struct s730 {
    signed char[4] pad4;
    struct s731** f4;
};

void fun_18014650(struct s730* ecx) {
    goto (*ecx->f4)->f24;
}

struct s733 {
    signed char[20] pad20;
    int32_t f20;
};

struct s732 {
    signed char[4] pad4;
    int32_t f4;
    signed char[8] pad16;
    void** f16;
    signed char[159] pad176;
    struct s733** f176;
};

void fun_18016fd0(struct s732* ecx, void** a2, void** a3, void** a4) {
    void** v5;
    void** v6;
    void** ebx7;
    struct s732* ebx8;
    void** v9;
    void** ebp10;
    void** ebp11;
    int32_t eax12;
    void** v13;
    void** esi14;
    int32_t esi15;
    void** v16;
    void** edi17;
    struct s86* edi18;
    struct s733** ecx19;
    struct s733* edx20;

    v5 = reinterpret_cast<void**>(__return_address());
    v6 = ebx7;
    ebx8 = ecx;
    v9 = ebp10;
    ebp11 = a3;
    eax12 = ebx8->f4;
    v13 = esi14;
    esi15 = 0;
    if (!(reinterpret_cast<uint1_t>(eax12 < 0) | reinterpret_cast<uint1_t>(eax12 == 0))) {
        v16 = edi17;
        edi18 = reinterpret_cast<struct s86*>(&ebx8->f16);
        do {
            fun_18018da0(edi18, a2, ebp11, a4, v16, v13, v9, v6, v5);
            ++esi15;
            ++edi18;
        } while (esi15 < ebx8->f4);
    }
    ecx19 = ebx8->f176;
    edx20 = *ecx19;
    edx20->f20();
    goto v9;
}

struct s735 {
    signed char[24] pad24;
    int32_t f24;
};

struct s734 {
    signed char[4] pad4;
    void** f4;
    signed char[19] pad24;
    void** f24;
    signed char[3] pad28;
    int32_t f28;
    void** f32;
    signed char[3] pad36;
    struct s735** f36;
};

void** fun_1801b9c0(struct s734* ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17) {
    void** eax18;
    void** ecx19;
    void** edx20;
    void** ecx21;
    void** edx22;
    int32_t ecx23;
    void** esi24;
    void** ax25;
    struct s735* edx26;

    fun_18022b10(&ecx->f4);
    eax18 = ecx->f24;
    ecx->f32 = eax18;
    ecx19 = g18043450;
    edx20 = g18043454;
    ecx21 = g18043458;
    edx22 = g1804345c;
    ecx23 = ecx->f28;
    ax25 = fun_18017250(reinterpret_cast<int32_t>(__zero_stack_offset()) - 20 - 4 - 4 + 4 - 4 + 8, reinterpret_cast<int32_t>(ecx23 - reinterpret_cast<unsigned char>(eax18)) >> 2, esi24, eax18, ecx19, edx20, ecx21, edx22, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
    if (ecx->f36) {
        edx26 = *ecx->f36;
        ax25 = reinterpret_cast<void**>(edx26->f24(eax18, ecx19, edx20, ecx21, edx22));
    }
    return ax25;
}

int16_t fun_1801c140(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** v45;
    void** esi46;
    void** eax47;

    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x18034cf8);
    v45 = *reinterpret_cast<void***>(ecx + 24);
    fun_1802b2b0(ecx, v45, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    *reinterpret_cast<void***>(ecx + 32) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 28) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx + 24) = reinterpret_cast<void**>(0);
    *reinterpret_cast<void***>(ecx) = reinterpret_cast<void**>(0x180348d4);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi46, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax47 = ecx;
    return *reinterpret_cast<int16_t*>(&eax47);
}

void fun_1801d240(int32_t ecx) {
    goto fun_18022af0;
}

struct s736 {
    signed char[40] pad40;
    int32_t f40;
};

void fun_1801f2b0(struct s736* ecx, int32_t a2) {
    ecx->f40 = a2;
    return;
}

struct s737 {
    signed char[56] pad56;
    int16_t f56;
    int16_t f58;
    int16_t f60;
    signed char[2] pad64;
    int32_t f64;
    int16_t f68;
};

struct s738 {
    int16_t* f0;
    signed char[20] pad24;
    uint32_t f24;
};

void fun_18020b10(struct s737* ecx, struct s738* a2) {
    struct s738* ebx3;
    struct s737* edx4;
    uint32_t eax5;
    int16_t* esi6;
    uint32_t eax7;
    struct s737* esi8;
    uint32_t ecx9;
    int16_t* edi10;
    int32_t ecx11;
    int32_t eax12;
    uint32_t ebx13;
    int32_t eax14;
    uint32_t v15;
    int16_t cx16;
    int32_t eax17;
    uint32_t ecx18;

    ebx3 = a2;
    edx4 = ecx;
    eax5 = ebx3->f24;
    if (eax5) {
        esi6 = ebx3->f0;
        eax7 = eax5 & 0xfffffffc;
        if (eax7) {
            esi8 = edx4;
            __asm__("movd mm1, dword [esi+0x44]");
            __asm__("movd mm3, dword [esi+0x40]");
            __asm__("pslld mm1, 0x10");
            __asm__("movq mm4, [esi+0x20]");
            __asm__("punpckldq mm3, mm3");
            __asm__("punpckldq mm1, mm1");
            __asm__("movq mm2, mm3");
            __asm__("movq mm5, [esi+0x28]");
            __asm__("psrad mm2, 0xe");
            __asm__("movq mm6, [esi+0x30]");
            __asm__("packssdw mm2, mm2");
            ecx9 = eax7 << 1;
            edi10 = reinterpret_cast<int16_t*>(reinterpret_cast<uint32_t>(esi6) + ecx9);
            ecx11 = reinterpret_cast<int32_t>(-ecx9);
            do {
                __asm__("movd mm0, dword [edi+ecx]");
                __asm__("pmaddwd mm1, mm5");
                __asm__("punpckldq mm0, mm0");
                __asm__("pmaddwd mm2, mm6");
                __asm__("movq mm7, mm0");
                __asm__("pmaddwd mm0, mm4");
                __asm__("paddd mm3, mm1");
                __asm__("movq mm1, mm7");
                __asm__("paddd mm2, mm3");
                __asm__("paddd mm2, mm0");
                __asm__("movq mm3, mm2");
                __asm__("psrad mm2, 0xe");
                __asm__("packssdw mm2, mm2");
                __asm__("movd dword [edi+ecx], mm2");
                __asm__("punpckhdq mm3, mm3");
                ecx11 = ecx11 + 4;
            } while (ecx11);
            __asm__("movd dword [esi+0x40], mm3");
            __asm__("movd eax, mm1");
            eax12 = reinterpret_cast<int32_t>(eax7) >> 16;
            esi8->f68 = *reinterpret_cast<int16_t*>(&eax12);
            __asm__("emms ");
            esi6 = edi10;
        }
        ebx13 = ebx3->f24 & 3;
        if (ebx13) {
            eax14 = edx4->f64 >> 14;
            if (eax14 <= 0x7fff) {
                if (eax14 < 0xffff8000) {
                    eax14 = 0xffff8000;
                }
            } else {
                eax14 = 0x7fff;
            }
            v15 = ebx13;
            do {
                cx16 = *esi6;
                eax17 = edx4->f64 + (edx4->f68 * edx4->f58 - edx4->f60 * *reinterpret_cast<int16_t*>(&eax14) + edx4->f56 * cx16);
                edx4->f64 = eax17;
                eax14 = eax17 >> 14;
                if (eax14 <= 0x7fff) {
                    if (eax14 < 0xffff8000) {
                        eax14 = 0xffff8000;
                    }
                } else {
                    eax14 = 0x7fff;
                }
                *esi6 = *reinterpret_cast<int16_t*>(&eax14);
                edx4->f68 = cx16;
                ++esi6;
                ecx18 = v15 - 1;
                v15 = ecx18;
            } while (ecx18);
        }
    }
    return;
}

struct s740 {
    signed char[12] pad12;
    int32_t f12;
};

struct s739 {
    struct s740* f0;
    int32_t f4;
};

int16_t fun_1802a950(struct s739* a1) {
    int32_t eax2;
    struct s740* eax3;

    eax2 = a1->f4 - 1;
    a1->f4 = eax2;
    if (reinterpret_cast<uint1_t>(reinterpret_cast<uint1_t>(eax2 < 0) | reinterpret_cast<uint1_t>(eax2 == 0))) {
        if (a1) {
            eax3 = a1->f0;
            eax3->f12(1);
        }
        eax2 = 0;
    }
    return *reinterpret_cast<int16_t*>(&eax2);
}

struct s741 {
    signed char[4] pad4;
    int32_t f4;
};

int16_t fun_18024600(struct s741* a1) {
    int32_t ecx2;
    int32_t eax3;

    ecx2 = a1->f4 - 1;
    a1->f4 = ecx2;
    eax3 = ecx2;
    return *reinterpret_cast<int16_t*>(&eax3);
}

struct s742 {
    signed char[96] pad96;
    int32_t f96;
};

int32_t fun_18024ad0(struct s742* ecx) {
    return ecx->f96;
}

struct s743 {
    signed char[444] pad444;
    void** f444;
    signed char[3] pad448;
    unsigned char f448;
    signed char[1] pad450;
    signed char f450;
};

void fun_18028930(struct s743* ecx, int32_t a2) {
    void** eax3;
    void** ecx4;
    unsigned char al5;
    int32_t esi6;

    eax3 = *reinterpret_cast<void***>(ecx->f444);
    *reinterpret_cast<void***>(eax3 + 44)();
    if (ecx->f448 && (ecx4 = ecx->f444, al5 = fun_18028200(ecx4), !al5)) {
        ecx->f450 = 1;
        ecx->f448 = al5;
    }
    goto esi6;
}

int16_t fun_180280b0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_180280d0(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s745 {
    signed char[12] pad12;
    int32_t f12;
};

struct s744 {
    signed char[408] pad408;
    struct s745** f408;
    int32_t f412;
    int32_t f416;
};

void fun_18028e10(struct s744* ecx, int32_t a2) {
    int32_t* esi3;
    int32_t v4;
    struct s745** ecx5;
    struct s745* edx6;
    int32_t* edi7;
    int32_t edx8;
    int32_t esi9;

    esi3 = &ecx->f412;
    if (v4 > ecx->f412) {
    }
    ecx5 = ecx->f408;
    edx6 = *ecx5;
    edx6->f12();
    if (edi7) {
        *edi7 = 1;
    }
    edx8 = *esi3 - esi9;
    ecx->f416 = ecx->f416 + esi9;
    *esi3 = edx8;
    goto reinterpret_cast<int32_t>(__zero_stack_offset()) - 4 - 4 - 4 + 24;
}

void fun_18029610(struct s195* ecx) {
    int32_t v2;
    void** v3;
    void** ebx4;
    void** v5;
    void** ebp6;
    void** v7;
    void** esi8;
    struct s195* esi9;
    void*** esp10;
    void** v11;
    void** edi12;
    void** edi13;
    void** eax14;
    int32_t ecx15;
    struct s196* eax16;
    void** eax17;
    void** ecx18;
    void** v19;
    void** ecx20;
    void** v21;
    void** ecx22;
    void*** esp23;
    void** v24;
    void** edx25;
    void*** esp26;
    void** v27;
    void** v28;
    void** eax29;
    void** ebx30;
    void** ecx31;
    void* esp32;
    void** v33;
    void** v34;
    void** v35;
    void** v36;
    void** v37;
    void** v38;
    void** v39;
    void** v40;
    void** v41;
    void** v42;
    void** v43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void* esp50;
    void** edi51;
    void** ecx52;
    void** edx53;
    void** eax54;
    void** edx55;
    void** eax56;
    void*** esp57;
    void*** esp58;
    void** eax59;
    void** eax60;
    void* esp61;
    void** edx62;
    void** v63;
    void** v64;
    void** v65;
    void** v66;
    void** v67;
    void** v68;
    void** v69;
    void** v70;
    void** v71;
    struct s196** ecx72;
    void** v73;
    void** v74;
    struct s196* edx75;
    void** ecx76;
    void** eax77;
    void** ecx78;
    void** edx79;
    void** ecx80;
    void*** esp81;
    void** ecx82;
    void*** esp83;
    void** edx84;
    void** eax85;
    void** eax86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    void** v92;
    void** v93;
    void** v94;
    int1_t less95;
    void** edi96;
    void** ebx97;
    void** v98;
    void** v99;
    void** v100;
    void** v101;
    void** v102;
    void** v103;
    void** v104;
    void** v105;
    void** v106;
    void** ebp107;
    void** v108;
    void** v109;
    void** v110;
    void** v111;
    void** v112;
    void** v113;
    void** v114;
    void** v115;
    void** v116;
    void** edi117;
    void** v118;
    void** v119;
    void** v120;
    void** v121;
    void** v122;
    void** v123;
    void** v124;
    void** v125;
    void** v126;

    v2 = reinterpret_cast<int32_t>(__return_address());
    v3 = ebx4;
    v5 = ebp6;
    v7 = esi8;
    esi9 = ecx;
    esp10 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0xb0 - 4 - 4 - 4 - 4);
    v11 = edi12;
    edi13 = reinterpret_cast<void**>(0);
    eax14 = esi9->f412;
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(eax14) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(eax14 == 0))) {
        do {
            ecx15 = 6;
            do {
                --ecx15;
            } while (ecx15);
            eax16 = *esi9->f448;
            eax17 = reinterpret_cast<void**>(eax16->f8());
            ecx18 = esi9->f412;
            v19 = eax17;
            ecx20 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx18) - reinterpret_cast<unsigned char>(edi13));
            v21 = ecx20;
            if (reinterpret_cast<signed char>(ecx20) > reinterpret_cast<signed char>(eax17)) {
            }
            ecx22 = esi9->f452;
            esp23 = esp10 - 4 + 4 - 4;
            v24 = v21;
            edx25 = *reinterpret_cast<void***>(ecx22);
            esp26 = esp23 - 4;
            v27 = reinterpret_cast<void**>(esp23 + 24);
            v28 = reinterpret_cast<void**>(esp26 + 80);
            eax29 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx25 + 16)(v28));
            ebx30 = eax29;
            if (!ebx30) 
                break;
            ecx31 = esi9->f440;
            esp32 = reinterpret_cast<void*>(esp26 - 4 - 4 + 4 - 4 - 4 - 4);
            fun_18019390(&esi9->f460, reinterpret_cast<int32_t>(esp32) + 84, ecx31, 0, ebx30, edi13, v28, v27, v24, v11, v7, v5, v3, 0, 0, v19, v21, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, 0, v43, v44, v45, v46, 0, v47, v48, v49);
            esp50 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp32) - 4 - 4 - 4 + 20 + 4);
            edi51 = reinterpret_cast<void**>(0);
            if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(ebx30) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(ebx30 == 0))) {
                do {
                    ecx52 = esi9->f456;
                    if (!*reinterpret_cast<int32_t*>(ecx52 + 0x338)) 
                        break;
                    edx53 = g180458cc;
                    eax54 = g180458c8;
                    v21 = edx53;
                    edx55 = g180458d4;
                    v34 = edx55;
                    v19 = eax54;
                    eax56 = g180458d0;
                    esp57 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp50) - 4);
                    esp58 = esp57 - 4;
                    v33 = eax56;
                    eax59 = *reinterpret_cast<void***>(ecx52);
                    eax60 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax59 + 16)(esp58 + 40, esp57 + 24, reinterpret_cast<unsigned char>(ebx30) - reinterpret_cast<unsigned char>(edi51), v28));
                    esp61 = reinterpret_cast<void*>(esp58 - 4 - 4 + 4);
                    edx62 = esi9->f444;
                    fun_18019390(&esi9->f500, reinterpret_cast<int32_t>(esp61) + 32, edx62, 0, eax60, reinterpret_cast<unsigned char>(edi51) + reinterpret_cast<unsigned char>(v27), esp58 + 40, esp57 + 24, reinterpret_cast<unsigned char>(ebx30) - reinterpret_cast<unsigned char>(edi51), v28, v27, v24, v11, v7, v5, v3, 0, 0, v19, v21, v33, v34, v35, v36, v37, v63, v64, v65, v66, v67, 0, v68, v69, v70, v71, 0);
                    esp50 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp61) - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
                    edi51 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi51) + reinterpret_cast<unsigned char>(eax60));
                } while (reinterpret_cast<signed char>(edi51) < reinterpret_cast<signed char>(ebx30));
            }
            ecx72 = esi9->f448;
            v73 = ebx30;
            v74 = reinterpret_cast<void**>(reinterpret_cast<int32_t>(esp50) + 72);
            edx75 = *ecx72;
            edx75->f20(v74);
            ecx76 = esi9->f456;
            fun_18029280(ecx76, ebx30, v74);
            esp10 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp50) - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4);
            if (reinterpret_cast<signed char>(edi51) < reinterpret_cast<signed char>(ebx30)) {
                do {
                    eax77 = g180458d0;
                    ecx78 = g180458c8;
                    edx79 = g180458cc;
                    v36 = eax77;
                    v34 = ecx78;
                    ecx80 = g180458d4;
                    esp81 = esp10 - 4;
                    v37 = ecx80;
                    ecx82 = esi9->f456;
                    esp83 = esp81 - 4;
                    v33 = reinterpret_cast<void**>(0);
                    v35 = edx79;
                    edx84 = *reinterpret_cast<void***>(ecx82);
                    eax85 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx84 + 16)(esp83 + 60, esp81 + 24, reinterpret_cast<unsigned char>(ebx30) - reinterpret_cast<unsigned char>(edi51), v74));
                    esp10 = esp83 - 4 - 4 + 4;
                    if (!eax85) 
                        break;
                    eax86 = esi9->f444;
                    fun_18019390(&esi9->f500, esp10 + 52, eax86, 0, eax85, reinterpret_cast<unsigned char>(edi51) + reinterpret_cast<unsigned char>(v73), esp83 + 60, esp81 + 24, reinterpret_cast<unsigned char>(ebx30) - reinterpret_cast<unsigned char>(edi51), v74, v73, v28, v27, v24, v11, v7, v5, v3, 0, 0, v19, v21, 0, v34, v35, v36, v37, v87, v88, v89, v90, v91, 0, v92, v93, v94);
                    esp10 = esp10 - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4;
                    edi51 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(edi51) + reinterpret_cast<unsigned char>(eax85));
                } while (reinterpret_cast<signed char>(edi51) < reinterpret_cast<signed char>(ebx30));
            }
            edi13 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v24) + reinterpret_cast<unsigned char>(ebx30));
            less95 = reinterpret_cast<signed char>(edi13) < reinterpret_cast<signed char>(esi9->f412);
        } while (less95);
    }
    edi96 = reinterpret_cast<void**>(&esi9->f460);
    ebx97 = reinterpret_cast<void**>(&esi9->f540);
    fun_18019740(ebx97, edi96, v11, v7, v5, v3, 0, 0, v19, v21, v33, v34, v35, v36, v37, v98, v99, v100, v101, v102, 0, v103, v104, v105, v106);
    ebp107 = reinterpret_cast<void**>(&esi9->f580);
    fun_18019740(ebp107, edi96, v11, v7, v5, v3, 0, 0, v19, v21, v33, v34, v35, v36, v37, v108, v109, v110, v111, v112, 0, v113, v114, v115, v116);
    edi117 = reinterpret_cast<void**>(&esi9->f500);
    fun_18019740(ebx97, edi117, v11, v7, v5, v3, 0, 0, v19, v21, v33, v34, v35, v36, v37, v118, v119, v120, v121, v122, 0, v123, v124, v125, v126);
    fun_18019850(ebp107, edi117, v11, v7, v5);
    esi9->f484 = 0;
    esi9->f524 = 0;
    esi9->f564 = 0;
    esi9->f604 = 0;
    fun_18027770(esi9, 0);
    goto v2;
}

struct s746 {
    signed char[448] pad448;
    int32_t f448;
};

void fun_18029b30(struct s746* ecx, int32_t a2) {
    ecx->f448 = a2;
    return;
}

int16_t fun_1801d250(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18013d30(ecx);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

struct s748 {
    signed char[24] pad24;
    int32_t f24;
};

struct s747 {
    signed char[4] pad4;
    void** f4;
    signed char[27] pad32;
    struct s748* f32;
};

void fun_1801f2c0(struct s747* ecx) {
    struct s748* eax2;

    eax2 = ecx->f32;
    eax2->f24(&ecx->f32);
    fun_18022b10(&ecx->f4);
    return;
}

struct s750 {
    signed char[444] pad444;
    int32_t f444;
    signed char[44] pad492;
    void** f492;
    signed char[23] pad516;
    void** f516;
};

struct s749 {
    void** f0;
    signed char[7] pad8;
    struct s750* f8;
};

struct s751 {
    int32_t f0;
    void** f4;
    signed char[23] pad28;
    void** f28;
};

void fun_18024610(void** ecx, struct s749* a2, void** a3, void** a4) {
    struct s749* ebx5;
    void** v6;
    void** ebp7;
    void** v8;
    void** esi9;
    struct s750* eax10;
    void** v11;
    void** edi12;
    void** v13;
    void** ebp14;
    void** ebx15;
    void** v16;
    void** v17;
    void** eax18;
    struct s749* esi19;
    void** edx20;
    void** v21;
    void** eax22;
    void** edi23;
    void** v24;
    uint32_t ecx25;
    void** ecx26;
    struct s751* esi27;
    void** eax28;
    void** edi29;
    void** v30;
    void** v31;
    void** ecx32;

    ebx5 = a2;
    v6 = ebp7;
    v8 = esi9;
    eax10 = ebx5->f8;
    v11 = edi12;
    v13 = reinterpret_cast<void**>(&eax10->f492);
    EnterCriticalSection();
    ebp14 = a3;
    eax18 = fun_1802b2bb(ecx, ebp14, v13, v11, v8, v6, ebx15, v16, v17);
    esi19 = a2;
    edx20 = eax18;
    v21 = ebx5->f8->f516;
    eax22 = ebp14;
    edi23 = edx20;
    v24 = edx20;
    ecx25 = reinterpret_cast<unsigned char>(ebp14) >> 2;
    while (ecx25) {
        --ecx25;
        *reinterpret_cast<void***>(edi23) = esi19->f0;
        edi23 = edi23 + 4;
        esi19 = reinterpret_cast<struct s749*>(reinterpret_cast<uint32_t>(esi19) + 4);
    }
    ecx26 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(eax22) & 3);
    while (ecx26) {
        --ecx26;
        *reinterpret_cast<void***>(edi23) = esi19->f0;
        ++edi23;
        esi19 = reinterpret_cast<struct s749*>(&esi19->pad8);
    }
    esi27 = reinterpret_cast<struct s751*>(&ebx5->f8->f444);
    eax28 = esi27->f28;
    edi29 = reinterpret_cast<void**>(&esi27->f4);
    if (!eax28) {
        eax28 = fun_1802b2bb(ecx26, 24, v13, v11, v8, v6, v24, v30, v31);
        edx20 = v24;
    } else {
        esi27->f28 = *reinterpret_cast<void***>(eax28);
    }
    if (eax28) {
        ecx32 = eax28 + 8;
        if (ecx32) {
            *reinterpret_cast<void***>(ecx32) = edx20;
            *reinterpret_cast<void***>(ecx32 + 4) = ebp14;
            *reinterpret_cast<void***>(ecx32 + 8) = a4;
            *reinterpret_cast<void***>(ecx32 + 12) = v21;
        }
        *reinterpret_cast<void***>(eax28) = edi29;
        *reinterpret_cast<void***>(eax28 + 4) = *reinterpret_cast<void***>(edi29 + 4);
        *reinterpret_cast<void***>(*reinterpret_cast<void***>(edi29 + 4)) = eax28;
        *reinterpret_cast<void***>(edi29 + 4) = eax28;
        esi27->f0 = esi27->f0 + 1;
    }
    LeaveCriticalSection();
    goto v21;
}

int16_t fun_18024ae0(void** ecx, void** a2, void** a3, void** a4, void** a5, void** a6, void** a7, void** a8, void** a9, void** a10, void** a11, void** a12, void** a13, void** a14, void** a15, void** a16, void** a17, void** a18, void** a19, void** a20, void** a21, void** a22, void** a23, void** a24, void** a25, void** a26, void** a27, void** a28, void** a29, void** a30, void** a31, void** a32, void** a33, void** a34, void** a35, void** a36, void** a37, void** a38, void** a39, void** a40, void** a41, void** a42, void** a43, void** a44) {
    void** esi45;
    void** eax46;

    fun_18024b00(ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40);
    if (*reinterpret_cast<unsigned char*>(&a2) & 1) {
        fun_1802b2b0(ecx, ecx, esi45, __return_address(), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44);
    }
    eax46 = ecx;
    return *reinterpret_cast<int16_t*>(&eax46);
}

void fun_18029b40(struct s195* ecx) {
    int32_t v2;
    void** v3;
    void** ebx4;
    void** v5;
    void** ebp6;
    void** v7;
    void** esi8;
    void*** esp9;
    void** v10;
    void** edi11;
    struct s195* edi12;
    void** esi13;
    int32_t ecx14;
    void** eax15;
    void** eax16;
    void** ecx17;
    void** v18;
    void** ecx19;
    void** v20;
    void** ecx21;
    void*** esp22;
    void** v23;
    void** edx24;
    void*** esp25;
    void** v26;
    void** v27;
    void** eax28;
    void** ebx29;
    void** esi30;
    void** ecx31;
    void** eax32;
    void** edx33;
    void** eax34;
    void** v35;
    void** edx36;
    void*** esp37;
    void*** esp38;
    void** v39;
    void** edx40;
    void** eax41;
    void* esp42;
    void** eax43;
    void** v44;
    void** v45;
    void** v46;
    void** v47;
    void** v48;
    void** v49;
    void** v50;
    void** v51;
    void** v52;
    void** v53;
    void** v54;
    void** v55;
    void** ecx56;
    void** v57;
    void** v58;
    void** edx59;
    void** ecx60;
    void* esp61;
    void** eax62;
    void** ecx63;
    void** edx64;
    void** ecx65;
    void*** esp66;
    void** ecx67;
    void*** esp68;
    void** edx69;
    void** eax70;
    void** eax71;
    void** v72;
    void** v73;
    void** v74;
    void** v75;
    void** v76;
    void** v77;
    void** v78;
    void** v79;
    void** edx80;
    void* esp81;
    void** v82;
    void** v83;
    void** v84;
    void** v85;
    void** v86;
    void** v87;
    void** v88;
    void** v89;
    void** v90;
    void** v91;
    int1_t less92;

    v2 = reinterpret_cast<int32_t>(__return_address());
    v3 = ebx4;
    v5 = ebp6;
    v7 = esi8;
    esp9 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(__zero_stack_offset()) - 0xb0 - 4 - 4 - 4 - 4);
    v10 = edi11;
    edi12 = ecx;
    esi13 = reinterpret_cast<void**>(0);
    if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(edi12->f412) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(edi12->f412 == 0))) {
        do {
            ecx14 = 6;
            do {
                --ecx14;
            } while (ecx14);
            eax15 = *reinterpret_cast<void***>(edi12->f452);
            eax16 = reinterpret_cast<void**>(*reinterpret_cast<void***>(eax15 + 8)());
            ecx17 = edi12->f412;
            v18 = eax16;
            ecx19 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(ecx17) - reinterpret_cast<unsigned char>(esi13));
            v20 = ecx19;
            if (reinterpret_cast<signed char>(ecx19) > reinterpret_cast<signed char>(eax16)) {
            }
            ecx21 = edi12->f456;
            esp22 = esp9 - 4 + 4 - 4;
            v23 = v20;
            edx24 = *reinterpret_cast<void***>(ecx21);
            esp25 = esp22 - 4;
            v26 = reinterpret_cast<void**>(esp22 + 24);
            v27 = reinterpret_cast<void**>(esp25 + 80);
            eax28 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx24 + 16)(v27));
            esp9 = esp25 - 4 - 4 + 4;
            ebx29 = eax28;
            if (!ebx29) 
                break;
            esi30 = reinterpret_cast<void**>(0);
            if (!(reinterpret_cast<uint1_t>(reinterpret_cast<signed char>(ebx29) < reinterpret_cast<signed char>(0)) | reinterpret_cast<uint1_t>(ebx29 == 0))) {
                do {
                    ecx31 = *reinterpret_cast<void***>(&edi12->f460);
                    if (!*reinterpret_cast<int32_t*>(ecx31 + 0x338)) 
                        break;
                    eax32 = g180458cc;
                    edx33 = g180458c8;
                    v20 = eax32;
                    eax34 = g180458d4;
                    v35 = eax34;
                    v18 = edx33;
                    edx36 = g180458d0;
                    esp37 = esp9 - 4;
                    esp38 = esp37 - 4;
                    v39 = edx36;
                    edx40 = *reinterpret_cast<void***>(ecx31);
                    eax41 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx40 + 16)(esp38 + 40, esp37 + 24, reinterpret_cast<unsigned char>(ebx29) - reinterpret_cast<unsigned char>(esi30), v27));
                    esp42 = reinterpret_cast<void*>(esp38 - 4 - 4 + 4);
                    eax43 = edi12->f444;
                    fun_18019390(&edi12->f464, reinterpret_cast<int32_t>(esp42) + 32, eax43, 0, eax41, reinterpret_cast<unsigned char>(esi30) + reinterpret_cast<unsigned char>(v26), esp38 + 40, esp37 + 24, reinterpret_cast<unsigned char>(ebx29) - reinterpret_cast<unsigned char>(esi30), v27, v26, v23, v10, v7, v5, v3, 0, 0, v18, v20, v39, v35, v44, v45, v46, v47, v48, v49, v50, v51, 0, v52, v53, v54, v55, 0);
                    esp9 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp42) - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
                    esi30 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi30) + reinterpret_cast<unsigned char>(eax41));
                } while (reinterpret_cast<signed char>(esi30) < reinterpret_cast<signed char>(ebx29));
            }
            ecx56 = edi12->f452;
            v57 = ebx29;
            v58 = reinterpret_cast<void**>(esp9 + 72);
            edx59 = *reinterpret_cast<void***>(ecx56);
            *reinterpret_cast<void***>(edx59 + 20)(v58);
            ecx60 = *reinterpret_cast<void***>(&edi12->f460);
            fun_18029280(ecx60, ebx29, v58);
            esp61 = reinterpret_cast<void*>(esp9 - 4 - 4 - 4 + 4 - 4 - 4 + 4 + 4);
            if (reinterpret_cast<signed char>(esi30) < reinterpret_cast<signed char>(ebx29)) {
                do {
                    eax62 = g180458d0;
                    ecx63 = g180458c8;
                    edx64 = g180458cc;
                    v45 = eax62;
                    v35 = ecx63;
                    ecx65 = g180458d4;
                    esp66 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp61) - 4);
                    v46 = ecx65;
                    ecx67 = *reinterpret_cast<void***>(&edi12->f460);
                    esp68 = esp66 - 4;
                    v39 = reinterpret_cast<void**>(0);
                    v44 = edx64;
                    edx69 = *reinterpret_cast<void***>(ecx67);
                    eax70 = reinterpret_cast<void**>(*reinterpret_cast<void***>(edx69 + 16)(esp68 + 60, esp66 + 24, reinterpret_cast<unsigned char>(ebx29) - reinterpret_cast<unsigned char>(esi30), v58));
                    esp61 = reinterpret_cast<void*>(esp68 - 4 - 4 + 4);
                    if (!eax70) 
                        break;
                    eax71 = edi12->f444;
                    fun_18019390(&edi12->f464, reinterpret_cast<int32_t>(esp61) + 52, eax71, 0, eax70, reinterpret_cast<unsigned char>(esi30) + reinterpret_cast<unsigned char>(v57), esp68 + 60, esp66 + 24, reinterpret_cast<unsigned char>(ebx29) - reinterpret_cast<unsigned char>(esi30), v58, v57, v27, v26, v23, v10, v7, v5, v3, 0, 0, v18, v20, 0, v35, v44, v45, v46, v72, v73, v74, v75, v76, 0, v77, v78, v79);
                    esp61 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp61) - 4 - 4 - 4 - 4 - 4 - 4 + 20 + 4);
                    esi30 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(esi30) + reinterpret_cast<unsigned char>(eax70));
                } while (reinterpret_cast<signed char>(esi30) < reinterpret_cast<signed char>(ebx29));
            }
            edx80 = edi12->f440;
            esp81 = reinterpret_cast<void*>(reinterpret_cast<int32_t>(esp61) - 4 - 4 - 4);
            fun_18019390(&edi12->f464, reinterpret_cast<int32_t>(esp81) + 84, edx80, 0, ebx29, v23, v58, v57, v27, v26, v23, v10, v7, v5, v3, 0, 0, v18, v20, v39, v35, v44, v45, v46, v82, v83, v84, v85, v86, 0, v87, v88, v89, v90, 0, v91);
            esp9 = reinterpret_cast<void***>(reinterpret_cast<int32_t>(esp81) - 4 - 4 - 4 + 20 + 4);
            esi13 = reinterpret_cast<void**>(reinterpret_cast<unsigned char>(v23) + reinterpret_cast<unsigned char>(ebx29));
            less92 = reinterpret_cast<signed char>(esi13) < reinterpret_cast<signed char>(edi12->f412);
        } while (less92);
    }
    edi12->f488 = 0;
    fun_18027770(edi12, esi13);
    goto v2;
}

struct s753 {
    signed char[32] pad32;
    int32_t f32;
};

struct s752 {
    signed char[32] pad32;
    struct s753* f32;
};

void fun_1801f2e0(struct s752* ecx, int32_t a2) {
    unsigned char ah3;
    struct s753* eax4;

    __asm__("fld dword [esp+0x8]");
    __asm__("fcomp dword [0x18034dc8]");
    __asm__("fnstsw ax");
    if (ah3 & 1) {
    }
    __asm__("fld dword [eax]");
    eax4 = ecx->f32;
    __asm__("fst dword [esp+0x8]");
    __asm__("fstp dword [ecx-0xc]");
    eax4->f32();
    goto 0x40c00000;
}
